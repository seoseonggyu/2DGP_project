//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Brave/Internal/Glitch" {
Properties {
_MainTex ("Base (RGB)", 2D) = "white" { }
_Perpendicular ("Is Perpendicular Tilt", Float) = 1
_Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
_Color ("Tint", Color) = (1,1,1,1)
[MaterialToggle] PixelSnap ("Pixel snap", Float) = 0
_GlitchInterval ("Glitch interval time [seconds]", Float) = 0.1
_DispProbability ("Displacement Glitch Probability", Float) = 0.4
_DispIntensity ("Displacement Glitch Intensity", Float) = 0.01
_ColorProbability ("Color Glitch Probability", Float) = 0.4
_ColorIntensity ("Color Glitch Intensity", Float) = 0.04
[MaterialToggle] _WrapDispCoords ("Wrap disp glitch (off = clamp)", Float) = 1
[MaterialToggle] _DispGlitchOn ("Displacement Glitch On", Float) = 1
[MaterialToggle] _ColorGlitchOn ("Color Glitch On", Float) = 1
}
SubShader {
 LOD 110
 Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
 Pass {
  Name "FORWARD"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
  ColorMask RGB 0
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 4782
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat10;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat3 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat3 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlitchInterval;
uniform 	float _DispIntensity;
uniform 	float _DispProbability;
uniform 	float _ColorIntensity;
uniform 	float _ColorProbability;
uniform 	float _DispGlitchOn;
uniform 	float _ColorGlitchOn;
uniform 	float _WrapDispCoords;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat16_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat10_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
vec2 u_xlat11;
float u_xlat16;
void main()
{
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].ww + u_xlat0.xy;
    u_xlat10.x = _Time.y / _GlitchInterval;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat5.x = u_xlat0.x + 2.79299998;
    u_xlat1 = u_xlat0.xxxx * vec4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
    u_xlat1 = sin(u_xlat1);
    u_xlat1 = u_xlat1 * vec4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
    u_xlat1 = fract(u_xlat1);
    u_xlat10.xy = u_xlat1.zw + vec2(-0.5, -0.5);
    u_xlat11.xy = u_xlat5.xx * vec2(-91.2228012, 91.2228012);
    u_xlat11.xy = sin(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy * vec2(43758.5469, 43758.5469);
    u_xlat11.xy = fract(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
    u_xlatb1.xy = lessThan(u_xlat1.xyxx, vec4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
    u_xlatb2.xyz = equal(vec4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), vec4(1.0, 1.0, 1.0, 0.0)).xyz;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
    u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
    u_xlat5.x = vs_TEXCOORD0.y / u_xlat5.x;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * 78.2330017;
    u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 43758.5469;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat0.x = u_xlat0.x * _DispIntensity + vs_TEXCOORD0.x;
    u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat16 = fract(abs(u_xlat0.x));
    u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : vs_TEXCOORD0.x;
    u_xlat0.y = vs_TEXCOORD0.y;
    u_xlat2 = texture(_MainTex, u_xlat0.xy);
    u_xlat3.xy = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
    u_xlat3.zw = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + vs_TEXCOORD0.yy;
    u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
    u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
    u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
    u_xlat0.y = u_xlat11.x * _ColorIntensity + vs_TEXCOORD0.y;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
    u_xlat1.x = u_xlat0.w + u_xlat16_1;
    u_xlat0.w = u_xlat1.x * 0.333333343;
    u_xlat0.x = u_xlat10_4.x;
    u_xlat0.y = u_xlat10_3.y;
    u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
    u_xlat1 = u_xlat0 * vs_COLOR0;
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + -0.100000001;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb0){
        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat5.x = u_xlat0.y * 0.25 + 0.75;
        u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat0.x = max(u_xlat5.x, u_xlat2.x);
        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
    } else {
        u_xlat0.x = float(1.0);
        u_xlat0.y = float(1.0);
        u_xlat0.z = float(1.0);
        u_xlat0.w = float(1.0);
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0, unity_OcclusionMaskSelector);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 197
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %116 %128 %129 %143 %172 %178 %181 %183 %184 %186 %189 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %143 Location 143 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %181 Location 181 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %186 Location 186 
                                                      OpDecorate %189 Location 189 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 3 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                               Private f32_4* %93 = OpVariable Private 
                                             %113 = OpTypeArray %6 %48 
                                             %114 = OpTypeStruct %7 %6 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %7 
                                             %126 = OpTypeVector %6 2 
                                             %127 = OpTypePointer Output %126 
                               Output f32_2* %128 = OpVariable Output 
                                Input f32_4* %129 = OpVariable Input 
                                         i32 %132 = OpConstant 5 
                                             %141 = OpTypeVector %6 3 
                                             %142 = OpTypePointer Input %141 
                                Input f32_3* %143 = OpVariable Input 
                                         u32 %161 = OpConstant 2 
                                Private f32* %163 = OpVariable Private 
                                             %171 = OpTypePointer Output %141 
                               Output f32_3* %172 = OpVariable Output 
                               Output f32_3* %178 = OpVariable Output 
                               Output f32_4* %181 = OpVariable Output 
                               Output f32_4* %183 = OpVariable Output 
                                Input f32_4* %184 = OpVariable Input 
                               Output f32_3* %186 = OpVariable Output 
                                         f32 %187 = OpConstant 3.674022E-40 
                                       f32_3 %188 = OpConstantComposite %187 %187 %187 
                               Output f32_4* %189 = OpVariable Output 
                                       f32_4 %190 = OpConstantComposite %187 %187 %187 %187 
                                             %191 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %30 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %86 = OpAccessChain %17 %60 %30 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %9 %92 
                                        f32_4 %94 = OpLoad %81 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                               Uniform f32_4* %96 = OpAccessChain %17 %73 %61 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpFMul %95 %97 
                                                      OpStore %93 %98 
                               Uniform f32_4* %99 = OpAccessChain %17 %73 %60 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %101 0 0 0 0 
                                       f32_4 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %93 
                                       f32_4 %105 = OpFAdd %103 %104 
                                                      OpStore %93 %105 
                              Uniform f32_4* %106 = OpAccessChain %17 %73 %73 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %81 
                                       f32_4 %109 = OpVectorShuffle %108 %108 2 2 2 2 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %93 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %93 %112 
                              Uniform f32_4* %117 = OpAccessChain %17 %73 %30 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %81 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %93 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %60 
                                                      OpStore %125 %123 
                                       f32_4 %130 = OpLoad %129 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %133 = OpAccessChain %17 %132 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFMul %131 %135 
                              Uniform f32_4* %137 = OpAccessChain %17 %132 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 2 3 
                                       f32_2 %140 = OpFAdd %136 %139 
                                                      OpStore %128 %140 
                                       f32_3 %144 = OpLoad %143 
                              Uniform f32_4* %145 = OpAccessChain %17 %61 %60 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %144 %147 
                                Private f32* %149 = OpAccessChain %81 %25 
                                                      OpStore %149 %148 
                                       f32_3 %150 = OpLoad %143 
                              Uniform f32_4* %151 = OpAccessChain %17 %61 %61 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %150 %153 
                                Private f32* %155 = OpAccessChain %81 %48 
                                                      OpStore %155 %154 
                                       f32_3 %156 = OpLoad %143 
                              Uniform f32_4* %157 = OpAccessChain %17 %61 %73 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %156 %159 
                                Private f32* %162 = OpAccessChain %81 %161 
                                                      OpStore %162 %160 
                                       f32_4 %164 = OpLoad %81 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_4 %166 = OpLoad %81 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %165 %167 
                                                      OpStore %163 %168 
                                         f32 %169 = OpLoad %163 
                                         f32 %170 = OpExtInst %1 32 %169 
                                                      OpStore %163 %170 
                                         f32 %173 = OpLoad %163 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_4 %175 = OpLoad %81 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFMul %174 %176 
                                                      OpStore %172 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                                      OpStore %178 %180 
                                       f32_4 %182 = OpLoad %9 
                                                      OpStore %181 %182 
                                       f32_4 %185 = OpLoad %184 
                                                      OpStore %183 %185 
                                                      OpStore %186 %188 
                                                      OpStore %189 %190 
                                 Output f32* %192 = OpAccessChain %116 %60 %48 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFNegate %193 
                                 Output f32* %195 = OpAccessChain %116 %60 %48 
                                                      OpStore %195 %194 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 650
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %205 %454 %523 %624 %645 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 RelaxedPrecision 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 RelaxedPrecision 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpMemberDecorate %16 14 Offset 16 
                                                      OpMemberDecorate %16 15 Offset 16 
                                                      OpMemberDecorate %16 16 Offset 16 
                                                      OpMemberDecorate %16 17 RelaxedPrecision 
                                                      OpMemberDecorate %16 17 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %205 Location 205 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %321 DescriptorSet 321 
                                                      OpDecorate %321 Binding 321 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %454 Location 454 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %512 SpecId 512 
                                                      OpDecorate %523 Location 523 
                                                      OpDecorate %604 DescriptorSet 604 
                                                      OpDecorate %604 Binding 604 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %624 Location 624 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %639 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %645 Location 645 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeStruct %7 %7 %12 %13 %7 %14 %15 %15 %7 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %18 = OpVariable Uniform 
                                              %19 = OpTypeInt 32 1 
                                          i32 %20 = OpConstant 2 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypeVector %6 2 
                                              %23 = OpTypePointer Uniform %7 
                                          i32 %27 = OpConstant 1 
                                          i32 %34 = OpConstant 0 
                                              %71 = OpTypePointer Private %22 
                               Private f32_2* %72 = OpVariable Private 
                                          u32 %73 = OpConstant 1 
                                              %74 = OpTypePointer Uniform %6 
                                          i32 %77 = OpConstant 9 
                                          u32 %81 = OpConstant 0 
                                              %82 = OpTypePointer Private %6 
                                Private f32* %103 = OpVariable Private 
                                         f32 %106 = OpConstant 3.674022E-40 
                              Private f32_4* %108 = OpVariable Private 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %112 = OpConstant 3.674022E-40 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %114 = OpConstant 3.674022E-40 
                                       f32_4 %115 = OpConstantComposite %111 %112 %113 %114 
                                         f32 %120 = OpConstant 3.674022E-40 
                                       f32_4 %121 = OpConstantComposite %120 %120 %120 %120 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_2 %128 = OpConstantComposite %127 %127 
                              Private f32_2* %130 = OpVariable Private 
                                       f32_2 %133 = OpConstantComposite %114 %112 
                                       f32_2 %138 = OpConstantComposite %120 %120 
                                             %144 = OpTypeBool 
                                             %145 = OpTypeVector %144 2 
                                             %146 = OpTypePointer Private %145 
                             Private bool_2* %147 = OpVariable Private 
                                         i32 %150 = OpConstant 11 
                                         i32 %153 = OpConstant 13 
                                             %161 = OpTypeVector %144 4 
                                             %164 = OpTypeVector %144 3 
                                             %165 = OpTypePointer Private %164 
                             Private bool_3* %166 = OpVariable Private 
                                         i32 %167 = OpConstant 14 
                                         i32 %170 = OpConstant 16 
                                         i32 %173 = OpConstant 15 
                                         f32 %179 = OpConstant 3.674022E-40 
                                         f32 %180 = OpConstant 3.674022E-40 
                                       f32_4 %181 = OpConstantComposite %179 %179 %179 %180 
                                         f32 %200 = OpConstant 3.674022E-40 
                                         f32 %202 = OpConstant 3.674022E-40 
                                             %204 = OpTypePointer Input %22 
                                Input f32_2* %205 = OpVariable Input 
                                             %206 = OpTypePointer Input %6 
                                Private f32* %213 = OpVariable Private 
                                         f32 %226 = OpConstant 3.674022E-40 
                                         f32 %230 = OpConstant 3.674022E-40 
                                         i32 %254 = OpConstant 10 
                                             %262 = OpTypePointer Private %144 
                               Private bool* %263 = OpVariable Private 
                                             %274 = OpTypePointer Function %6 
                              Private f32_4* %317 = OpVariable Private 
                                             %318 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %319 = OpTypeSampledImage %318 
                                             %320 = OpTypePointer UniformConstant %319 
 UniformConstant read_only Texture2DSampled* %321 = OpVariable UniformConstant 
                              Private f32_4* %326 = OpVariable Private 
                                         i32 %328 = OpConstant 12 
                              Private f32_4* %365 = OpVariable Private 
                                Private f32* %398 = OpVariable Private 
                                         u32 %399 = OpConstant 2 
                                         u32 %402 = OpConstant 3 
                                         f32 %411 = OpConstant 3.674022E-40 
                              Private f32_4* %413 = OpVariable Private 
                                             %426 = OpTypePointer Function %22 
                              Private f32_4* %451 = OpVariable Private 
                                             %453 = OpTypePointer Input %7 
                                Input f32_4* %454 = OpVariable Input 
                                         f32 %462 = OpConstant 3.674022E-40 
                                         i32 %471 = OpConstant -1 
                                         i32 %482 = OpConstant 17 
                                         i32 %499 = OpConstant 4 
                                        bool %505 = OpConstantFalse 
                                        bool %512 = OpSpecConstantFalse 
                                             %520 = OpTypePointer Private %15 
                              Private f32_3* %521 = OpVariable Private 
                                             %522 = OpTypePointer Input %15 
                                Input f32_3* %523 = OpVariable Input 
                                         i32 %526 = OpConstant 5 
                                             %552 = OpTypePointer Function %15 
                                         i32 %566 = OpConstant 7 
                                             %567 = OpTypePointer Uniform %15 
                                         i32 %576 = OpConstant 6 
                                         f32 %584 = OpConstant 3.674022E-40 
                                         f32 %586 = OpConstant 3.674022E-40 
                                         f32 %591 = OpConstant 3.674022E-40 
                                             %601 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %602 = OpTypeSampledImage %601 
                                             %603 = OpTypePointer UniformConstant %602 
 UniformConstant read_only Texture3DSampled* %604 = OpVariable UniformConstant 
                              Private f32_4* %609 = OpVariable Private 
                                Input f32_3* %624 = OpVariable Input 
                              Private f32_3* %629 = OpVariable Private 
                                         i32 %632 = OpConstant 8 
                                             %644 = OpTypePointer Output %7 
                               Output f32_4* %645 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %275 = OpVariable Function 
                               Function f32* %291 = OpVariable Function 
                               Function f32* %302 = OpVariable Function 
                               Function f32* %414 = OpVariable Function 
                             Function f32_2* %427 = OpVariable Function 
                               Function f32* %440 = OpVariable Function 
                             Function f32_3* %553 = OpVariable Function 
                               Uniform f32_4* %24 = OpAccessChain %18 %20 %21 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 1 1 
                               Uniform f32_4* %28 = OpAccessChain %18 %21 %27 
                                        f32_4 %29 = OpLoad %28 
                                        f32_2 %30 = OpVectorShuffle %29 %29 0 1 
                                        f32_2 %31 = OpFMul %26 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 2 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %35 = OpAccessChain %18 %21 %34 
                                        f32_4 %36 = OpLoad %35 
                                        f32_2 %37 = OpVectorShuffle %36 %36 0 1 
                               Uniform f32_4* %38 = OpAccessChain %18 %20 %21 
                                        f32_4 %39 = OpLoad %38 
                                        f32_2 %40 = OpVectorShuffle %39 %39 0 0 
                                        f32_2 %41 = OpFMul %37 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_2 %44 = OpFAdd %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpVectorShuffle %45 %44 4 5 2 3 
                                                      OpStore %9 %46 
                               Uniform f32_4* %47 = OpAccessChain %18 %21 %20 
                                        f32_4 %48 = OpLoad %47 
                                        f32_2 %49 = OpVectorShuffle %48 %48 0 1 
                               Uniform f32_4* %50 = OpAccessChain %18 %20 %21 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 2 
                                        f32_2 %53 = OpFMul %49 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                                        f32_2 %56 = OpFAdd %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %56 4 5 2 3 
                                                      OpStore %9 %58 
                               Uniform f32_4* %59 = OpAccessChain %18 %21 %21 
                                        f32_4 %60 = OpLoad %59 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                               Uniform f32_4* %62 = OpAccessChain %18 %20 %21 
                                        f32_4 %63 = OpLoad %62 
                                        f32_2 %64 = OpVectorShuffle %63 %63 3 3 
                                        f32_2 %65 = OpFMul %61 %64 
                                        f32_4 %66 = OpLoad %9 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_2 %68 = OpFAdd %65 %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpVectorShuffle %69 %68 4 5 2 3 
                                                      OpStore %9 %70 
                                 Uniform f32* %75 = OpAccessChain %18 %34 %73 
                                          f32 %76 = OpLoad %75 
                                 Uniform f32* %78 = OpAccessChain %18 %77 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFDiv %76 %79 
                                 Private f32* %83 = OpAccessChain %72 %81 
                                                      OpStore %83 %80 
                                 Private f32* %84 = OpAccessChain %72 %81 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpExtInst %1 8 %85 
                                 Private f32* %87 = OpAccessChain %72 %81 
                                                      OpStore %87 %86 
                                 Private f32* %88 = OpAccessChain %72 %81 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %90 = OpAccessChain %18 %77 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %89 %91 
                                 Private f32* %93 = OpAccessChain %9 %81 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %81 
                                                      OpStore %96 %95 
                                 Private f32* %97 = OpAccessChain %9 %73 
                                          f32 %98 = OpLoad %97 
                                 Private f32* %99 = OpAccessChain %9 %81 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFAdd %98 %100 
                                Private f32* %102 = OpAccessChain %9 %81 
                                                      OpStore %102 %101 
                                Private f32* %104 = OpAccessChain %9 %81 
                                         f32 %105 = OpLoad %104 
                                         f32 %107 = OpFAdd %105 %106 
                                                      OpStore %103 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_4 %110 = OpVectorShuffle %109 %109 0 0 0 0 
                                       f32_4 %116 = OpFMul %110 %115 
                                                      OpStore %108 %116 
                                       f32_4 %117 = OpLoad %108 
                                       f32_4 %118 = OpExtInst %1 13 %117 
                                                      OpStore %108 %118 
                                       f32_4 %119 = OpLoad %108 
                                       f32_4 %122 = OpFMul %119 %121 
                                                      OpStore %108 %122 
                                       f32_4 %123 = OpLoad %108 
                                       f32_4 %124 = OpExtInst %1 10 %123 
                                                      OpStore %108 %124 
                                       f32_4 %125 = OpLoad %108 
                                       f32_2 %126 = OpVectorShuffle %125 %125 2 3 
                                       f32_2 %129 = OpFAdd %126 %128 
                                                      OpStore %72 %129 
                                         f32 %131 = OpLoad %103 
                                       f32_2 %132 = OpCompositeConstruct %131 %131 
                                       f32_2 %134 = OpFMul %132 %133 
                                                      OpStore %130 %134 
                                       f32_2 %135 = OpLoad %130 
                                       f32_2 %136 = OpExtInst %1 13 %135 
                                                      OpStore %130 %136 
                                       f32_2 %137 = OpLoad %130 
                                       f32_2 %139 = OpFMul %137 %138 
                                                      OpStore %130 %139 
                                       f32_2 %140 = OpLoad %130 
                                       f32_2 %141 = OpExtInst %1 10 %140 
                                                      OpStore %130 %141 
                                       f32_2 %142 = OpLoad %130 
                                       f32_2 %143 = OpFAdd %142 %128 
                                                      OpStore %130 %143 
                                       f32_4 %148 = OpLoad %108 
                                       f32_4 %149 = OpVectorShuffle %148 %148 0 1 0 0 
                                Uniform f32* %151 = OpAccessChain %18 %150 
                                         f32 %152 = OpLoad %151 
                                Uniform f32* %154 = OpAccessChain %18 %153 
                                         f32 %155 = OpLoad %154 
                                Uniform f32* %156 = OpAccessChain %18 %150 
                                         f32 %157 = OpLoad %156 
                                Uniform f32* %158 = OpAccessChain %18 %150 
                                         f32 %159 = OpLoad %158 
                                       f32_4 %160 = OpCompositeConstruct %152 %155 %157 %159 
                                      bool_4 %162 = OpFOrdLessThan %149 %160 
                                      bool_2 %163 = OpVectorShuffle %162 %162 0 1 
                                                      OpStore %147 %163 
                                Uniform f32* %168 = OpAccessChain %18 %167 
                                         f32 %169 = OpLoad %168 
                                Uniform f32* %171 = OpAccessChain %18 %170 
                                         f32 %172 = OpLoad %171 
                                Uniform f32* %174 = OpAccessChain %18 %173 
                                         f32 %175 = OpLoad %174 
                                Uniform f32* %176 = OpAccessChain %18 %167 
                                         f32 %177 = OpLoad %176 
                                       f32_4 %178 = OpCompositeConstruct %169 %172 %175 %177 
                                      bool_4 %182 = OpFOrdEqual %178 %181 
                                      bool_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                                      OpStore %166 %183 
                                      bool_2 %184 = OpLoad %147 
                                        bool %185 = OpCompositeExtract %184 0 
                                      bool_3 %186 = OpLoad %166 
                                        bool %187 = OpCompositeExtract %186 0 
                                        bool %188 = OpLogicalAnd %185 %187 
                                      bool_2 %189 = OpLoad %147 
                                      bool_2 %190 = OpCompositeInsert %188 %189 0 
                                                      OpStore %147 %190 
                                      bool_2 %191 = OpLoad %147 
                                        bool %192 = OpCompositeExtract %191 1 
                                      bool_3 %193 = OpLoad %166 
                                        bool %194 = OpCompositeExtract %193 2 
                                        bool %195 = OpLogicalAnd %192 %194 
                                      bool_2 %196 = OpLoad %147 
                                      bool_2 %197 = OpCompositeInsert %195 %196 1 
                                                      OpStore %147 %197 
                                Private f32* %198 = OpAccessChain %130 %73 
                                         f32 %199 = OpLoad %198 
                                         f32 %201 = OpFMul %199 %200 
                                         f32 %203 = OpFAdd %201 %202 
                                                      OpStore %103 %203 
                                  Input f32* %207 = OpAccessChain %205 %73 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpLoad %103 
                                         f32 %210 = OpFDiv %208 %209 
                                                      OpStore %103 %210 
                                         f32 %211 = OpLoad %103 
                                         f32 %212 = OpExtInst %1 8 %211 
                                                      OpStore %103 %212 
                                Private f32* %214 = OpAccessChain %9 %81 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFNegate %215 
                                         f32 %217 = OpLoad %103 
                                         f32 %218 = OpFAdd %216 %217 
                                                      OpStore %213 %218 
                                Private f32* %219 = OpAccessChain %9 %81 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpLoad %103 
                                         f32 %222 = OpFAdd %220 %221 
                                Private f32* %223 = OpAccessChain %9 %81 
                                                      OpStore %223 %222 
                                Private f32* %224 = OpAccessChain %9 %81 
                                         f32 %225 = OpLoad %224 
                                         f32 %227 = OpFMul %225 %226 
                                Private f32* %228 = OpAccessChain %9 %81 
                                                      OpStore %228 %227 
                                         f32 %229 = OpLoad %213 
                                         f32 %231 = OpFMul %229 %230 
                                Private f32* %232 = OpAccessChain %9 %81 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                Private f32* %235 = OpAccessChain %9 %81 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %9 %81 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 13 %237 
                                Private f32* %239 = OpAccessChain %9 %81 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %9 %81 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %241 %120 
                                Private f32* %243 = OpAccessChain %9 %81 
                                                      OpStore %243 %242 
                                Private f32* %244 = OpAccessChain %9 %81 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpExtInst %1 10 %245 
                                Private f32* %247 = OpAccessChain %9 %81 
                                                      OpStore %247 %246 
                                Private f32* %248 = OpAccessChain %9 %81 
                                         f32 %249 = OpLoad %248 
                                         f32 %250 = OpFAdd %249 %127 
                                Private f32* %251 = OpAccessChain %9 %81 
                                                      OpStore %251 %250 
                                Private f32* %252 = OpAccessChain %9 %81 
                                         f32 %253 = OpLoad %252 
                                Uniform f32* %255 = OpAccessChain %18 %254 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFMul %253 %256 
                                  Input f32* %258 = OpAccessChain %205 %81 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFAdd %257 %259 
                                Private f32* %261 = OpAccessChain %9 %81 
                                                      OpStore %261 %260 
                                Private f32* %264 = OpAccessChain %9 %81 
                                         f32 %265 = OpLoad %264 
                                Private f32* %266 = OpAccessChain %9 %81 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFNegate %267 
                                        bool %269 = OpFOrdGreaterThanEqual %265 %268 
                                                      OpStore %263 %269 
                                Private f32* %270 = OpAccessChain %9 %81 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpExtInst %1 4 %271 
                                         f32 %273 = OpExtInst %1 10 %272 
                                                      OpStore %213 %273 
                                        bool %276 = OpLoad %263 
                                                      OpSelectionMerge %278 None 
                                                      OpBranchConditional %276 %277 %280 
                                             %277 = OpLabel 
                                         f32 %279 = OpLoad %213 
                                                      OpStore %275 %279 
                                                      OpBranch %278 
                                             %280 = OpLabel 
                                         f32 %281 = OpLoad %213 
                                         f32 %282 = OpFNegate %281 
                                                      OpStore %275 %282 
                                                      OpBranch %278 
                                             %278 = OpLabel 
                                         f32 %283 = OpLoad %275 
                                                      OpStore %103 %283 
                                Private f32* %284 = OpAccessChain %9 %81 
                                         f32 %285 = OpLoad %284 
                                Private f32* %286 = OpAccessChain %9 %81 
                                                      OpStore %286 %285 
                                Private f32* %287 = OpAccessChain %9 %81 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 43 %288 %180 %179 
                                Private f32* %290 = OpAccessChain %9 %81 
                                                      OpStore %290 %289 
                                      bool_3 %292 = OpLoad %166 
                                        bool %293 = OpCompositeExtract %292 1 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %297 
                                             %294 = OpLabel 
                                         f32 %296 = OpLoad %103 
                                                      OpStore %291 %296 
                                                      OpBranch %295 
                                             %297 = OpLabel 
                                Private f32* %298 = OpAccessChain %9 %81 
                                         f32 %299 = OpLoad %298 
                                                      OpStore %291 %299 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                         f32 %300 = OpLoad %291 
                                Private f32* %301 = OpAccessChain %9 %81 
                                                      OpStore %301 %300 
                                      bool_2 %303 = OpLoad %147 
                                        bool %304 = OpCompositeExtract %303 0 
                                                      OpSelectionMerge %306 None 
                                                      OpBranchConditional %304 %305 %309 
                                             %305 = OpLabel 
                                Private f32* %307 = OpAccessChain %9 %81 
                                         f32 %308 = OpLoad %307 
                                                      OpStore %302 %308 
                                                      OpBranch %306 
                                             %309 = OpLabel 
                                  Input f32* %310 = OpAccessChain %205 %81 
                                         f32 %311 = OpLoad %310 
                                                      OpStore %302 %311 
                                                      OpBranch %306 
                                             %306 = OpLabel 
                                         f32 %312 = OpLoad %302 
                                Private f32* %313 = OpAccessChain %9 %81 
                                                      OpStore %313 %312 
                                  Input f32* %314 = OpAccessChain %205 %73 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %9 %73 
                                                      OpStore %316 %315 
                  read_only Texture2DSampled %322 = OpLoad %321 
                                       f32_4 %323 = OpLoad %9 
                                       f32_2 %324 = OpVectorShuffle %323 %323 0 1 
                                       f32_4 %325 = OpImageSampleImplicitLod %322 %324 
                                                      OpStore %317 %325 
                                       f32_2 %327 = OpLoad %72 
                                Uniform f32* %329 = OpAccessChain %18 %328 
                                         f32 %330 = OpLoad %329 
                                Uniform f32* %331 = OpAccessChain %18 %328 
                                         f32 %332 = OpLoad %331 
                                       f32_2 %333 = OpCompositeConstruct %330 %332 
                                         f32 %334 = OpCompositeExtract %333 0 
                                         f32 %335 = OpCompositeExtract %333 1 
                                       f32_2 %336 = OpCompositeConstruct %334 %335 
                                       f32_2 %337 = OpFMul %327 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_2 %339 = OpVectorShuffle %338 %338 0 0 
                                       f32_2 %340 = OpFAdd %337 %339 
                                       f32_4 %341 = OpLoad %326 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 2 3 
                                                      OpStore %326 %342 
                                       f32_2 %343 = OpLoad %72 
                                Uniform f32* %344 = OpAccessChain %18 %328 
                                         f32 %345 = OpLoad %344 
                                Uniform f32* %346 = OpAccessChain %18 %328 
                                         f32 %347 = OpLoad %346 
                                       f32_2 %348 = OpCompositeConstruct %345 %347 
                                         f32 %349 = OpCompositeExtract %348 0 
                                         f32 %350 = OpCompositeExtract %348 1 
                                       f32_2 %351 = OpCompositeConstruct %349 %350 
                                       f32_2 %352 = OpFMul %343 %351 
                                       f32_2 %353 = OpLoad %205 
                                       f32_2 %354 = OpVectorShuffle %353 %353 1 1 
                                       f32_2 %355 = OpFAdd %352 %354 
                                       f32_4 %356 = OpLoad %326 
                                       f32_4 %357 = OpVectorShuffle %356 %355 0 1 4 5 
                                                      OpStore %326 %357 
                  read_only Texture2DSampled %358 = OpLoad %321 
                                       f32_4 %359 = OpLoad %326 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpImageSampleImplicitLod %358 %360 
                                       f32_2 %362 = OpVectorShuffle %361 %361 0 3 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %362 0 4 5 3 
                                                      OpStore %9 %364 
                  read_only Texture2DSampled %366 = OpLoad %321 
                                       f32_4 %367 = OpLoad %326 
                                       f32_2 %368 = OpVectorShuffle %367 %367 1 3 
                                       f32_4 %369 = OpImageSampleImplicitLod %366 %368 
                                       f32_2 %370 = OpVectorShuffle %369 %369 1 3 
                                       f32_4 %371 = OpLoad %365 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 1 2 5 
                                                      OpStore %365 %372 
                                Private f32* %373 = OpAccessChain %130 %81 
                                         f32 %374 = OpLoad %373 
                                Uniform f32* %375 = OpAccessChain %18 %328 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                Private f32* %378 = OpAccessChain %9 %81 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFAdd %377 %379 
                                Private f32* %381 = OpAccessChain %326 %81 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %130 %81 
                                         f32 %383 = OpLoad %382 
                                Uniform f32* %384 = OpAccessChain %18 %328 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFMul %383 %385 
                                  Input f32* %387 = OpAccessChain %205 %73 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFAdd %386 %388 
                                Private f32* %390 = OpAccessChain %326 %73 
                                                      OpStore %390 %389 
                  read_only Texture2DSampled %391 = OpLoad %321 
                                       f32_4 %392 = OpLoad %326 
                                       f32_2 %393 = OpVectorShuffle %392 %392 0 1 
                                       f32_4 %394 = OpImageSampleImplicitLod %391 %393 
                                       f32_2 %395 = OpVectorShuffle %394 %394 2 3 
                                       f32_4 %396 = OpLoad %9 
                                       f32_4 %397 = OpVectorShuffle %396 %395 4 1 2 5 
                                                      OpStore %9 %397 
                                Private f32* %400 = OpAccessChain %9 %399 
                                         f32 %401 = OpLoad %400 
                                Private f32* %403 = OpAccessChain %365 %402 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %401 %404 
                                                      OpStore %398 %405 
                                Private f32* %406 = OpAccessChain %9 %402 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpLoad %398 
                                         f32 %409 = OpFAdd %407 %408 
                                                      OpStore %398 %409 
                                         f32 %410 = OpLoad %398 
                                         f32 %412 = OpFMul %410 %411 
                                                      OpStore %398 %412 
                                      bool_2 %415 = OpLoad %147 
                                        bool %416 = OpCompositeExtract %415 1 
                                                      OpSelectionMerge %418 None 
                                                      OpBranchConditional %416 %417 %421 
                                             %417 = OpLabel 
                                Private f32* %419 = OpAccessChain %365 %81 
                                         f32 %420 = OpLoad %419 
                                                      OpStore %414 %420 
                                                      OpBranch %418 
                                             %421 = OpLabel 
                                Private f32* %422 = OpAccessChain %317 %73 
                                         f32 %423 = OpLoad %422 
                                                      OpStore %414 %423 
                                                      OpBranch %418 
                                             %418 = OpLabel 
                                         f32 %424 = OpLoad %414 
                                Private f32* %425 = OpAccessChain %413 %73 
                                                      OpStore %425 %424 
                                      bool_2 %428 = OpLoad %147 
                                        bool %429 = OpCompositeExtract %428 1 
                                                      OpSelectionMerge %431 None 
                                                      OpBranchConditional %429 %430 %434 
                                             %430 = OpLabel 
                                       f32_4 %432 = OpLoad %9 
                                       f32_2 %433 = OpVectorShuffle %432 %432 1 0 
                                                      OpStore %427 %433 
                                                      OpBranch %431 
                                             %434 = OpLabel 
                                       f32_4 %435 = OpLoad %317 
                                       f32_2 %436 = OpVectorShuffle %435 %435 0 2 
                                                      OpStore %427 %436 
                                                      OpBranch %431 
                                             %431 = OpLabel 
                                       f32_2 %437 = OpLoad %427 
                                       f32_4 %438 = OpLoad %413 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 1 5 3 
                                                      OpStore %413 %439 
                                      bool_2 %441 = OpLoad %147 
                                        bool %442 = OpCompositeExtract %441 1 
                                                      OpSelectionMerge %444 None 
                                                      OpBranchConditional %442 %443 %446 
                                             %443 = OpLabel 
                                         f32 %445 = OpLoad %398 
                                                      OpStore %440 %445 
                                                      OpBranch %444 
                                             %446 = OpLabel 
                                Private f32* %447 = OpAccessChain %317 %402 
                                         f32 %448 = OpLoad %447 
                                                      OpStore %440 %448 
                                                      OpBranch %444 
                                             %444 = OpLabel 
                                         f32 %449 = OpLoad %440 
                                Private f32* %450 = OpAccessChain %413 %402 
                                                      OpStore %450 %449 
                                       f32_4 %452 = OpLoad %413 
                                       f32_4 %455 = OpLoad %454 
                                       f32_4 %456 = OpFMul %452 %455 
                                                      OpStore %451 %456 
                                Private f32* %457 = OpAccessChain %413 %402 
                                         f32 %458 = OpLoad %457 
                                  Input f32* %459 = OpAccessChain %454 %402 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpFMul %458 %460 
                                         f32 %463 = OpFAdd %461 %462 
                                                      OpStore %398 %463 
                                         f32 %464 = OpLoad %398 
                                        bool %465 = OpFOrdLessThan %464 %180 
                                      bool_2 %466 = OpLoad %147 
                                      bool_2 %467 = OpCompositeInsert %465 %466 0 
                                                      OpStore %147 %467 
                                      bool_2 %468 = OpLoad %147 
                                        bool %469 = OpCompositeExtract %468 0 
                                         i32 %470 = OpSelect %469 %27 %34 
                                         i32 %472 = OpIMul %470 %471 
                                        bool %473 = OpINotEqual %472 %34 
                                                      OpSelectionMerge %475 None 
                                                      OpBranchConditional %473 %474 %475 
                                             %474 = OpLabel 
                                                      OpKill
                                             %475 = OpLabel 
                                Private f32* %477 = OpAccessChain %413 %402 
                                         f32 %478 = OpLoad %477 
                                  Input f32* %479 = OpAccessChain %454 %402 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFMul %478 %480 
                                Uniform f32* %483 = OpAccessChain %18 %482 
                                         f32 %484 = OpLoad %483 
                                         f32 %485 = OpFNegate %484 
                                         f32 %486 = OpFAdd %481 %485 
                                                      OpStore %398 %486 
                                         f32 %487 = OpLoad %398 
                                        bool %488 = OpFOrdLessThan %487 %180 
                                      bool_2 %489 = OpLoad %147 
                                      bool_2 %490 = OpCompositeInsert %488 %489 0 
                                                      OpStore %147 %490 
                                      bool_2 %491 = OpLoad %147 
                                        bool %492 = OpCompositeExtract %491 0 
                                         i32 %493 = OpSelect %492 %27 %34 
                                         i32 %494 = OpIMul %493 %471 
                                        bool %495 = OpINotEqual %494 %34 
                                                      OpSelectionMerge %497 None 
                                                      OpBranchConditional %495 %496 %497 
                                             %496 = OpLabel 
                                                      OpKill
                                             %497 = OpLabel 
                                Uniform f32* %500 = OpAccessChain %18 %499 %81 
                                         f32 %501 = OpLoad %500 
                                        bool %502 = OpFOrdEqual %501 %179 
                                      bool_2 %503 = OpLoad %147 
                                      bool_2 %504 = OpCompositeInsert %502 %503 0 
                                                      OpStore %147 %504 
                                                      OpSelectionMerge %507 None 
                                                      OpBranchConditional %505 %506 %507 
                                             %506 = OpLabel 
                                      bool_2 %508 = OpLoad %147 
                                        bool %509 = OpCompositeExtract %508 0 
                                                      OpSelectionMerge %511 None 
                                                      OpBranchConditional %509 %510 %511 
                                             %510 = OpLabel 
                                                      OpBranch %511 
                                             %511 = OpLabel 
                                                      OpBranch %507 
                                             %507 = OpLabel 
                                                      OpSelectionMerge %514 None 
                                                      OpBranchConditional %512 %513 %611 
                                             %513 = OpLabel 
                                Uniform f32* %515 = OpAccessChain %18 %499 %73 
                                         f32 %516 = OpLoad %515 
                                        bool %517 = OpFOrdEqual %516 %179 
                                      bool_2 %518 = OpLoad %147 
                                      bool_2 %519 = OpCompositeInsert %517 %518 0 
                                                      OpStore %147 %519 
                                       f32_3 %524 = OpLoad %523 
                                       f32_3 %525 = OpVectorShuffle %524 %524 1 1 1 
                              Uniform f32_4* %527 = OpAccessChain %18 %526 %27 
                                       f32_4 %528 = OpLoad %527 
                                       f32_3 %529 = OpVectorShuffle %528 %528 0 1 2 
                                       f32_3 %530 = OpFMul %525 %529 
                                                      OpStore %521 %530 
                              Uniform f32_4* %531 = OpAccessChain %18 %526 %34 
                                       f32_4 %532 = OpLoad %531 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpLoad %523 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 0 0 
                                       f32_3 %536 = OpFMul %533 %535 
                                       f32_3 %537 = OpLoad %521 
                                       f32_3 %538 = OpFAdd %536 %537 
                                                      OpStore %521 %538 
                              Uniform f32_4* %539 = OpAccessChain %18 %526 %20 
                                       f32_4 %540 = OpLoad %539 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                       f32_3 %542 = OpLoad %523 
                                       f32_3 %543 = OpVectorShuffle %542 %542 2 2 2 
                                       f32_3 %544 = OpFMul %541 %543 
                                       f32_3 %545 = OpLoad %521 
                                       f32_3 %546 = OpFAdd %544 %545 
                                                      OpStore %521 %546 
                                       f32_3 %547 = OpLoad %521 
                              Uniform f32_4* %548 = OpAccessChain %18 %526 %21 
                                       f32_4 %549 = OpLoad %548 
                                       f32_3 %550 = OpVectorShuffle %549 %549 0 1 2 
                                       f32_3 %551 = OpFAdd %547 %550 
                                                      OpStore %521 %551 
                                      bool_2 %554 = OpLoad %147 
                                        bool %555 = OpCompositeExtract %554 0 
                                                      OpSelectionMerge %557 None 
                                                      OpBranchConditional %555 %556 %559 
                                             %556 = OpLabel 
                                       f32_3 %558 = OpLoad %521 
                                                      OpStore %553 %558 
                                                      OpBranch %557 
                                             %559 = OpLabel 
                                       f32_3 %560 = OpLoad %523 
                                                      OpStore %553 %560 
                                                      OpBranch %557 
                                             %557 = OpLabel 
                                       f32_3 %561 = OpLoad %553 
                                       f32_4 %562 = OpLoad %108 
                                       f32_4 %563 = OpVectorShuffle %562 %561 4 5 6 3 
                                                      OpStore %108 %563 
                                       f32_4 %564 = OpLoad %108 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                              Uniform f32_3* %568 = OpAccessChain %18 %566 
                                       f32_3 %569 = OpLoad %568 
                                       f32_3 %570 = OpFNegate %569 
                                       f32_3 %571 = OpFAdd %565 %570 
                                       f32_4 %572 = OpLoad %108 
                                       f32_4 %573 = OpVectorShuffle %572 %571 4 5 6 3 
                                                      OpStore %108 %573 
                                       f32_4 %574 = OpLoad %108 
                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
                              Uniform f32_3* %577 = OpAccessChain %18 %576 
                                       f32_3 %578 = OpLoad %577 
                                       f32_3 %579 = OpFMul %575 %578 
                                       f32_4 %580 = OpLoad %108 
                                       f32_4 %581 = OpVectorShuffle %580 %579 0 4 5 6 
                                                      OpStore %108 %581 
                                Private f32* %582 = OpAccessChain %108 %73 
                                         f32 %583 = OpLoad %582 
                                         f32 %585 = OpFMul %583 %584 
                                         f32 %587 = OpFAdd %585 %586 
                                Private f32* %588 = OpAccessChain %521 %81 
                                                      OpStore %588 %587 
                                Uniform f32* %589 = OpAccessChain %18 %499 %399 
                                         f32 %590 = OpLoad %589 
                                         f32 %592 = OpFMul %590 %591 
                                         f32 %593 = OpFAdd %592 %586 
                                Private f32* %594 = OpAccessChain %317 %81 
                                                      OpStore %594 %593 
                                Private f32* %595 = OpAccessChain %521 %81 
                                         f32 %596 = OpLoad %595 
                                Private f32* %597 = OpAccessChain %317 %81 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpExtInst %1 40 %596 %598 
                                Private f32* %600 = OpAccessChain %108 %81 
                                                      OpStore %600 %599 
                  read_only Texture3DSampled %605 = OpLoad %604 
                                       f32_4 %606 = OpLoad %108 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 2 3 
                                       f32_4 %608 = OpImageSampleImplicitLod %605 %607 
                                                      OpStore %108 %608 
                                       f32_4 %610 = OpLoad %108 
                                                      OpStore %609 %610 
                                                      OpBranch %514 
                                             %611 = OpLabel 
                                Private f32* %612 = OpAccessChain %609 %81 
                                                      OpStore %612 %179 
                                Private f32* %613 = OpAccessChain %609 %73 
                                                      OpStore %613 %179 
                                Private f32* %614 = OpAccessChain %609 %399 
                                                      OpStore %614 %179 
                                Private f32* %615 = OpAccessChain %609 %402 
                                                      OpStore %615 %179 
                                                      OpBranch %514 
                                             %514 = OpLabel 
                                       f32_4 %616 = OpLoad %609 
                              Uniform f32_4* %617 = OpAccessChain %18 %27 
                                       f32_4 %618 = OpLoad %617 
                                         f32 %619 = OpDot %616 %618 
                                                      OpStore %398 %619 
                                         f32 %620 = OpLoad %398 
                                         f32 %621 = OpExtInst %1 43 %620 %180 %179 
                                                      OpStore %398 %621 
                                       f32_4 %622 = OpLoad %451 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                                       f32_3 %625 = OpLoad %624 
                                       f32_3 %626 = OpFMul %623 %625 
                                       f32_4 %627 = OpLoad %609 
                                       f32_4 %628 = OpVectorShuffle %627 %626 4 5 6 3 
                                                      OpStore %609 %628 
                                       f32_4 %630 = OpLoad %451 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
                              Uniform f32_4* %633 = OpAccessChain %18 %632 
                                       f32_4 %634 = OpLoad %633 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                       f32_3 %636 = OpFMul %631 %635 
                                                      OpStore %629 %636 
                                         f32 %637 = OpLoad %398 
                                       f32_3 %638 = OpCompositeConstruct %637 %637 %637 
                                       f32_3 %639 = OpLoad %629 
                                       f32_3 %640 = OpFMul %638 %639 
                                       f32_4 %641 = OpLoad %451 
                                       f32_4 %642 = OpVectorShuffle %641 %640 4 5 6 3 
                                                      OpStore %451 %642 
                                Private f32* %643 = OpAccessChain %609 %402 
                                                      OpStore %643 %180 
                                       f32_4 %646 = OpLoad %451 
                                       f32_4 %647 = OpLoad %609 
                                       f32_4 %648 = OpFAdd %646 %647 
                                                      OpStore %645 %648 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
float u_xlat13;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat4 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat4 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat1);
    u_xlat2.y = dot(unity_SHAg, u_xlat1);
    u_xlat2.z = dot(unity_SHAb, u_xlat1);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlitchInterval;
uniform 	float _DispIntensity;
uniform 	float _DispProbability;
uniform 	float _ColorIntensity;
uniform 	float _ColorProbability;
uniform 	float _DispGlitchOn;
uniform 	float _ColorGlitchOn;
uniform 	float _WrapDispCoords;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat16_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat10_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
vec2 u_xlat11;
float u_xlat16;
void main()
{
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].ww + u_xlat0.xy;
    u_xlat10.x = _Time.y / _GlitchInterval;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat5.x = u_xlat0.x + 2.79299998;
    u_xlat1 = u_xlat0.xxxx * vec4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
    u_xlat1 = sin(u_xlat1);
    u_xlat1 = u_xlat1 * vec4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
    u_xlat1 = fract(u_xlat1);
    u_xlat10.xy = u_xlat1.zw + vec2(-0.5, -0.5);
    u_xlat11.xy = u_xlat5.xx * vec2(-91.2228012, 91.2228012);
    u_xlat11.xy = sin(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy * vec2(43758.5469, 43758.5469);
    u_xlat11.xy = fract(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
    u_xlatb1.xy = lessThan(u_xlat1.xyxx, vec4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
    u_xlatb2.xyz = equal(vec4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), vec4(1.0, 1.0, 1.0, 0.0)).xyz;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
    u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
    u_xlat5.x = vs_TEXCOORD0.y / u_xlat5.x;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * 78.2330017;
    u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 43758.5469;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat0.x = u_xlat0.x * _DispIntensity + vs_TEXCOORD0.x;
    u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat16 = fract(abs(u_xlat0.x));
    u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : vs_TEXCOORD0.x;
    u_xlat0.y = vs_TEXCOORD0.y;
    u_xlat2 = texture(_MainTex, u_xlat0.xy);
    u_xlat3.xy = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
    u_xlat3.zw = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + vs_TEXCOORD0.yy;
    u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
    u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
    u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
    u_xlat0.y = u_xlat11.x * _ColorIntensity + vs_TEXCOORD0.y;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
    u_xlat1.x = u_xlat0.w + u_xlat16_1;
    u_xlat0.w = u_xlat1.x * 0.333333343;
    u_xlat0.x = u_xlat10_4.x;
    u_xlat0.y = u_xlat10_3.y;
    u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
    u_xlat1 = u_xlat0 * vs_COLOR0;
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + -0.100000001;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb0){
        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat5.x = u_xlat0.y * 0.25 + 0.75;
        u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat0.x = max(u_xlat5.x, u_xlat2.x);
        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
    } else {
        u_xlat0.x = float(1.0);
        u_xlat0.y = float(1.0);
        u_xlat0.z = float(1.0);
        u_xlat0.w = float(1.0);
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0, unity_OcclusionMaskSelector);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 311
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %119 %131 %132 %146 %183 %186 %189 %191 %192 %300 %303 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 RelaxedPrecision 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 RelaxedPrecision 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 RelaxedPrecision 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 RelaxedPrecision 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 RelaxedPrecision 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpMemberDecorate %117 0 BuiltIn 117 
                                                      OpMemberDecorate %117 1 BuiltIn 117 
                                                      OpMemberDecorate %117 2 BuiltIn 117 
                                                      OpDecorate %117 Block 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %132 Location 132 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %186 Location 186 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %191 Location 191 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 Location 192 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %300 Location 300 
                                                      OpDecorate %303 Location 303 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %12 %13 %14 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 11 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 10 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 7 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %66 = OpConstant 0 
                                          i32 %74 = OpConstant 2 
                               Private f32_4* %82 = OpVariable Private 
                                          i32 %84 = OpConstant 3 
                               Private f32_4* %95 = OpVariable Private 
                                          i32 %98 = OpConstant 9 
                                             %116 = OpTypeArray %6 %48 
                                             %117 = OpTypeStruct %7 %6 %116 
                                             %118 = OpTypePointer Output %117 
        Output struct {f32_4; f32; f32[1];}* %119 = OpVariable Output 
                                             %127 = OpTypePointer Output %7 
                                             %129 = OpTypeVector %6 2 
                                             %130 = OpTypePointer Output %129 
                               Output f32_2* %131 = OpVariable Output 
                                Input f32_4* %132 = OpVariable Input 
                                         i32 %135 = OpConstant 12 
                                             %144 = OpTypeVector %6 3 
                                             %145 = OpTypePointer Input %144 
                                Input f32_3* %146 = OpVariable Input 
                                         i32 %148 = OpConstant 8 
                                         u32 %165 = OpConstant 2 
                                Private f32* %167 = OpVariable Private 
                                             %182 = OpTypePointer Output %144 
                               Output f32_3* %183 = OpVariable Output 
                               Output f32_3* %186 = OpVariable Output 
                               Output f32_4* %189 = OpVariable Output 
                               Output f32_4* %191 = OpVariable Output 
                                Input f32_4* %192 = OpVariable Input 
                                             %194 = OpTypePointer Private %144 
                              Private f32_3* %195 = OpVariable Private 
                              Private f32_4* %212 = OpVariable Private 
                              Private f32_3* %218 = OpVariable Private 
                                         i32 %224 = OpConstant 4 
                                         i32 %230 = OpConstant 5 
                                         i32 %236 = OpConstant 6 
                                         u32 %245 = OpConstant 3 
                                         f32 %266 = OpConstant 3.674022E-40 
                                       f32_3 %267 = OpConstantComposite %266 %266 %266 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %287 = OpConstant 3.674022E-40 
                                       f32_3 %288 = OpConstantComposite %287 %287 %287 
                                         f32 %290 = OpConstant 3.674022E-40 
                                       f32_3 %291 = OpConstantComposite %290 %290 %290 
                               Output f32_3* %300 = OpVariable Output 
                               Output f32_4* %303 = OpVariable Output 
                                       f32_4 %304 = OpConstantComposite %266 %266 %266 %266 
                                             %305 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %67 = OpAccessChain %17 %60 %66 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %75 = OpAccessChain %17 %60 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_4 %77 = OpLoad %47 
                                        f32_4 %78 = OpVectorShuffle %77 %77 2 2 2 2 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpFAdd %79 %80 
                                                      OpStore %9 %81 
                                        f32_4 %83 = OpLoad %9 
                               Uniform f32_4* %85 = OpAccessChain %17 %60 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_4 %87 = OpFAdd %83 %86 
                                                      OpStore %82 %87 
                               Uniform f32_4* %88 = OpAccessChain %17 %60 %84 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %47 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                                      OpStore %9 %94 
                                        f32_4 %96 = OpLoad %82 
                                        f32_4 %97 = OpVectorShuffle %96 %96 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %17 %98 %61 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %97 %100 
                                                      OpStore %95 %101 
                              Uniform f32_4* %102 = OpAccessChain %17 %98 %66 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %82 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %95 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %95 %108 
                              Uniform f32_4* %109 = OpAccessChain %17 %98 %74 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %82 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %95 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %95 %115 
                              Uniform f32_4* %120 = OpAccessChain %17 %98 %84 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpLoad %82 
                                       f32_4 %123 = OpVectorShuffle %122 %122 3 3 3 3 
                                       f32_4 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %95 
                                       f32_4 %126 = OpFAdd %124 %125 
                               Output f32_4* %128 = OpAccessChain %119 %66 
                                                      OpStore %128 %126 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                              Uniform f32_4* %136 = OpAccessChain %17 %135 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %134 %138 
                              Uniform f32_4* %140 = OpAccessChain %17 %135 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                                      OpStore %131 %143 
                                       f32_3 %147 = OpLoad %146 
                              Uniform f32_4* %149 = OpAccessChain %17 %148 %66 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %147 %151 
                                Private f32* %153 = OpAccessChain %82 %25 
                                                      OpStore %153 %152 
                                       f32_3 %154 = OpLoad %146 
                              Uniform f32_4* %155 = OpAccessChain %17 %148 %61 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                         f32 %158 = OpDot %154 %157 
                                Private f32* %159 = OpAccessChain %82 %48 
                                                      OpStore %159 %158 
                                       f32_3 %160 = OpLoad %146 
                              Uniform f32_4* %161 = OpAccessChain %17 %148 %74 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                         f32 %164 = OpDot %160 %163 
                                Private f32* %166 = OpAccessChain %82 %165 
                                                      OpStore %166 %164 
                                       f32_4 %168 = OpLoad %82 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_4 %170 = OpLoad %82 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %169 %171 
                                                      OpStore %167 %172 
                                         f32 %173 = OpLoad %167 
                                         f32 %174 = OpExtInst %1 32 %173 
                                                      OpStore %167 %174 
                                         f32 %175 = OpLoad %167 
                                       f32_3 %176 = OpCompositeConstruct %175 %175 %175 
                                       f32_4 %177 = OpLoad %82 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFMul %176 %178 
                                       f32_4 %180 = OpLoad %82 
                                       f32_4 %181 = OpVectorShuffle %180 %179 4 5 6 3 
                                                      OpStore %82 %181 
                                       f32_4 %184 = OpLoad %82 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                                      OpStore %183 %185 
                                       f32_4 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                                      OpStore %186 %188 
                                       f32_4 %190 = OpLoad %9 
                                                      OpStore %189 %190 
                                       f32_4 %193 = OpLoad %192 
                                                      OpStore %191 %193 
                                Private f32* %196 = OpAccessChain %82 %48 
                                         f32 %197 = OpLoad %196 
                                Private f32* %198 = OpAccessChain %82 %48 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFMul %197 %199 
                                Private f32* %201 = OpAccessChain %195 %25 
                                                      OpStore %201 %200 
                                Private f32* %202 = OpAccessChain %82 %25 
                                         f32 %203 = OpLoad %202 
                                Private f32* %204 = OpAccessChain %82 %25 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %203 %205 
                                Private f32* %207 = OpAccessChain %195 %25 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFNegate %208 
                                         f32 %210 = OpFAdd %206 %209 
                                Private f32* %211 = OpAccessChain %195 %25 
                                                      OpStore %211 %210 
                                       f32_4 %213 = OpLoad %82 
                                       f32_4 %214 = OpVectorShuffle %213 %213 1 2 2 0 
                                       f32_4 %215 = OpLoad %82 
                                       f32_4 %216 = OpVectorShuffle %215 %215 0 1 2 2 
                                       f32_4 %217 = OpFMul %214 %216 
                                                      OpStore %212 %217 
                              Uniform f32_4* %219 = OpAccessChain %17 %84 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %212 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %218 %25 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %17 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_4 %227 = OpLoad %212 
                                         f32 %228 = OpDot %226 %227 
                                Private f32* %229 = OpAccessChain %218 %48 
                                                      OpStore %229 %228 
                              Uniform f32_4* %231 = OpAccessChain %17 %230 
                                       f32_4 %232 = OpLoad %231 
                                       f32_4 %233 = OpLoad %212 
                                         f32 %234 = OpDot %232 %233 
                                Private f32* %235 = OpAccessChain %218 %165 
                                                      OpStore %235 %234 
                              Uniform f32_4* %237 = OpAccessChain %17 %236 
                                       f32_4 %238 = OpLoad %237 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpLoad %195 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 0 0 
                                       f32_3 %242 = OpFMul %239 %241 
                                       f32_3 %243 = OpLoad %218 
                                       f32_3 %244 = OpFAdd %242 %243 
                                                      OpStore %195 %244 
                                Private f32* %246 = OpAccessChain %82 %245 
                                                      OpStore %246 %44 
                              Uniform f32_4* %247 = OpAccessChain %17 %66 
                                       f32_4 %248 = OpLoad %247 
                                       f32_4 %249 = OpLoad %82 
                                         f32 %250 = OpDot %248 %249 
                                Private f32* %251 = OpAccessChain %218 %25 
                                                      OpStore %251 %250 
                              Uniform f32_4* %252 = OpAccessChain %17 %61 
                                       f32_4 %253 = OpLoad %252 
                                       f32_4 %254 = OpLoad %82 
                                         f32 %255 = OpDot %253 %254 
                                Private f32* %256 = OpAccessChain %218 %48 
                                                      OpStore %256 %255 
                              Uniform f32_4* %257 = OpAccessChain %17 %74 
                                       f32_4 %258 = OpLoad %257 
                                       f32_4 %259 = OpLoad %82 
                                         f32 %260 = OpDot %258 %259 
                                Private f32* %261 = OpAccessChain %218 %165 
                                                      OpStore %261 %260 
                                       f32_3 %262 = OpLoad %195 
                                       f32_3 %263 = OpLoad %218 
                                       f32_3 %264 = OpFAdd %262 %263 
                                                      OpStore %195 %264 
                                       f32_3 %265 = OpLoad %195 
                                       f32_3 %268 = OpExtInst %1 40 %265 %267 
                                                      OpStore %195 %268 
                                       f32_3 %269 = OpLoad %195 
                                       f32_3 %270 = OpExtInst %1 30 %269 
                                       f32_4 %271 = OpLoad %82 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %82 %272 
                                       f32_4 %273 = OpLoad %82 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_4 %278 = OpLoad %82 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %82 %279 
                                       f32_4 %280 = OpLoad %82 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpExtInst %1 29 %281 
                                       f32_4 %283 = OpLoad %82 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %82 %284 
                                       f32_4 %285 = OpLoad %82 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %289 = OpFMul %286 %288 
                                       f32_3 %292 = OpFAdd %289 %291 
                                       f32_4 %293 = OpLoad %82 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 6 3 
                                                      OpStore %82 %294 
                                       f32_4 %295 = OpLoad %82 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpExtInst %1 40 %296 %267 
                                       f32_4 %298 = OpLoad %82 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %82 %299 
                                       f32_4 %301 = OpLoad %82 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                                      OpStore %300 %302 
                                                      OpStore %303 %304 
                                 Output f32* %306 = OpAccessChain %119 %66 %48 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFNegate %307 
                                 Output f32* %309 = OpAccessChain %119 %66 %48 
                                                      OpStore %309 %308 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 650
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %205 %454 %523 %624 %645 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 RelaxedPrecision 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 RelaxedPrecision 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpMemberDecorate %16 14 Offset 16 
                                                      OpMemberDecorate %16 15 Offset 16 
                                                      OpMemberDecorate %16 16 Offset 16 
                                                      OpMemberDecorate %16 17 RelaxedPrecision 
                                                      OpMemberDecorate %16 17 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %205 Location 205 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %321 DescriptorSet 321 
                                                      OpDecorate %321 Binding 321 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %454 Location 454 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %512 SpecId 512 
                                                      OpDecorate %523 Location 523 
                                                      OpDecorate %604 DescriptorSet 604 
                                                      OpDecorate %604 Binding 604 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %624 Location 624 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %639 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %645 Location 645 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeStruct %7 %7 %12 %13 %7 %14 %15 %15 %7 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %18 = OpVariable Uniform 
                                              %19 = OpTypeInt 32 1 
                                          i32 %20 = OpConstant 2 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypeVector %6 2 
                                              %23 = OpTypePointer Uniform %7 
                                          i32 %27 = OpConstant 1 
                                          i32 %34 = OpConstant 0 
                                              %71 = OpTypePointer Private %22 
                               Private f32_2* %72 = OpVariable Private 
                                          u32 %73 = OpConstant 1 
                                              %74 = OpTypePointer Uniform %6 
                                          i32 %77 = OpConstant 9 
                                          u32 %81 = OpConstant 0 
                                              %82 = OpTypePointer Private %6 
                                Private f32* %103 = OpVariable Private 
                                         f32 %106 = OpConstant 3.674022E-40 
                              Private f32_4* %108 = OpVariable Private 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %112 = OpConstant 3.674022E-40 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %114 = OpConstant 3.674022E-40 
                                       f32_4 %115 = OpConstantComposite %111 %112 %113 %114 
                                         f32 %120 = OpConstant 3.674022E-40 
                                       f32_4 %121 = OpConstantComposite %120 %120 %120 %120 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_2 %128 = OpConstantComposite %127 %127 
                              Private f32_2* %130 = OpVariable Private 
                                       f32_2 %133 = OpConstantComposite %114 %112 
                                       f32_2 %138 = OpConstantComposite %120 %120 
                                             %144 = OpTypeBool 
                                             %145 = OpTypeVector %144 2 
                                             %146 = OpTypePointer Private %145 
                             Private bool_2* %147 = OpVariable Private 
                                         i32 %150 = OpConstant 11 
                                         i32 %153 = OpConstant 13 
                                             %161 = OpTypeVector %144 4 
                                             %164 = OpTypeVector %144 3 
                                             %165 = OpTypePointer Private %164 
                             Private bool_3* %166 = OpVariable Private 
                                         i32 %167 = OpConstant 14 
                                         i32 %170 = OpConstant 16 
                                         i32 %173 = OpConstant 15 
                                         f32 %179 = OpConstant 3.674022E-40 
                                         f32 %180 = OpConstant 3.674022E-40 
                                       f32_4 %181 = OpConstantComposite %179 %179 %179 %180 
                                         f32 %200 = OpConstant 3.674022E-40 
                                         f32 %202 = OpConstant 3.674022E-40 
                                             %204 = OpTypePointer Input %22 
                                Input f32_2* %205 = OpVariable Input 
                                             %206 = OpTypePointer Input %6 
                                Private f32* %213 = OpVariable Private 
                                         f32 %226 = OpConstant 3.674022E-40 
                                         f32 %230 = OpConstant 3.674022E-40 
                                         i32 %254 = OpConstant 10 
                                             %262 = OpTypePointer Private %144 
                               Private bool* %263 = OpVariable Private 
                                             %274 = OpTypePointer Function %6 
                              Private f32_4* %317 = OpVariable Private 
                                             %318 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %319 = OpTypeSampledImage %318 
                                             %320 = OpTypePointer UniformConstant %319 
 UniformConstant read_only Texture2DSampled* %321 = OpVariable UniformConstant 
                              Private f32_4* %326 = OpVariable Private 
                                         i32 %328 = OpConstant 12 
                              Private f32_4* %365 = OpVariable Private 
                                Private f32* %398 = OpVariable Private 
                                         u32 %399 = OpConstant 2 
                                         u32 %402 = OpConstant 3 
                                         f32 %411 = OpConstant 3.674022E-40 
                              Private f32_4* %413 = OpVariable Private 
                                             %426 = OpTypePointer Function %22 
                              Private f32_4* %451 = OpVariable Private 
                                             %453 = OpTypePointer Input %7 
                                Input f32_4* %454 = OpVariable Input 
                                         f32 %462 = OpConstant 3.674022E-40 
                                         i32 %471 = OpConstant -1 
                                         i32 %482 = OpConstant 17 
                                         i32 %499 = OpConstant 4 
                                        bool %505 = OpConstantFalse 
                                        bool %512 = OpSpecConstantFalse 
                                             %520 = OpTypePointer Private %15 
                              Private f32_3* %521 = OpVariable Private 
                                             %522 = OpTypePointer Input %15 
                                Input f32_3* %523 = OpVariable Input 
                                         i32 %526 = OpConstant 5 
                                             %552 = OpTypePointer Function %15 
                                         i32 %566 = OpConstant 7 
                                             %567 = OpTypePointer Uniform %15 
                                         i32 %576 = OpConstant 6 
                                         f32 %584 = OpConstant 3.674022E-40 
                                         f32 %586 = OpConstant 3.674022E-40 
                                         f32 %591 = OpConstant 3.674022E-40 
                                             %601 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %602 = OpTypeSampledImage %601 
                                             %603 = OpTypePointer UniformConstant %602 
 UniformConstant read_only Texture3DSampled* %604 = OpVariable UniformConstant 
                              Private f32_4* %609 = OpVariable Private 
                                Input f32_3* %624 = OpVariable Input 
                              Private f32_3* %629 = OpVariable Private 
                                         i32 %632 = OpConstant 8 
                                             %644 = OpTypePointer Output %7 
                               Output f32_4* %645 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %275 = OpVariable Function 
                               Function f32* %291 = OpVariable Function 
                               Function f32* %302 = OpVariable Function 
                               Function f32* %414 = OpVariable Function 
                             Function f32_2* %427 = OpVariable Function 
                               Function f32* %440 = OpVariable Function 
                             Function f32_3* %553 = OpVariable Function 
                               Uniform f32_4* %24 = OpAccessChain %18 %20 %21 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 1 1 
                               Uniform f32_4* %28 = OpAccessChain %18 %21 %27 
                                        f32_4 %29 = OpLoad %28 
                                        f32_2 %30 = OpVectorShuffle %29 %29 0 1 
                                        f32_2 %31 = OpFMul %26 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 2 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %35 = OpAccessChain %18 %21 %34 
                                        f32_4 %36 = OpLoad %35 
                                        f32_2 %37 = OpVectorShuffle %36 %36 0 1 
                               Uniform f32_4* %38 = OpAccessChain %18 %20 %21 
                                        f32_4 %39 = OpLoad %38 
                                        f32_2 %40 = OpVectorShuffle %39 %39 0 0 
                                        f32_2 %41 = OpFMul %37 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_2 %44 = OpFAdd %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpVectorShuffle %45 %44 4 5 2 3 
                                                      OpStore %9 %46 
                               Uniform f32_4* %47 = OpAccessChain %18 %21 %20 
                                        f32_4 %48 = OpLoad %47 
                                        f32_2 %49 = OpVectorShuffle %48 %48 0 1 
                               Uniform f32_4* %50 = OpAccessChain %18 %20 %21 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 2 
                                        f32_2 %53 = OpFMul %49 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                                        f32_2 %56 = OpFAdd %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %56 4 5 2 3 
                                                      OpStore %9 %58 
                               Uniform f32_4* %59 = OpAccessChain %18 %21 %21 
                                        f32_4 %60 = OpLoad %59 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                               Uniform f32_4* %62 = OpAccessChain %18 %20 %21 
                                        f32_4 %63 = OpLoad %62 
                                        f32_2 %64 = OpVectorShuffle %63 %63 3 3 
                                        f32_2 %65 = OpFMul %61 %64 
                                        f32_4 %66 = OpLoad %9 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_2 %68 = OpFAdd %65 %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpVectorShuffle %69 %68 4 5 2 3 
                                                      OpStore %9 %70 
                                 Uniform f32* %75 = OpAccessChain %18 %34 %73 
                                          f32 %76 = OpLoad %75 
                                 Uniform f32* %78 = OpAccessChain %18 %77 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFDiv %76 %79 
                                 Private f32* %83 = OpAccessChain %72 %81 
                                                      OpStore %83 %80 
                                 Private f32* %84 = OpAccessChain %72 %81 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpExtInst %1 8 %85 
                                 Private f32* %87 = OpAccessChain %72 %81 
                                                      OpStore %87 %86 
                                 Private f32* %88 = OpAccessChain %72 %81 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %90 = OpAccessChain %18 %77 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %89 %91 
                                 Private f32* %93 = OpAccessChain %9 %81 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %81 
                                                      OpStore %96 %95 
                                 Private f32* %97 = OpAccessChain %9 %73 
                                          f32 %98 = OpLoad %97 
                                 Private f32* %99 = OpAccessChain %9 %81 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFAdd %98 %100 
                                Private f32* %102 = OpAccessChain %9 %81 
                                                      OpStore %102 %101 
                                Private f32* %104 = OpAccessChain %9 %81 
                                         f32 %105 = OpLoad %104 
                                         f32 %107 = OpFAdd %105 %106 
                                                      OpStore %103 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_4 %110 = OpVectorShuffle %109 %109 0 0 0 0 
                                       f32_4 %116 = OpFMul %110 %115 
                                                      OpStore %108 %116 
                                       f32_4 %117 = OpLoad %108 
                                       f32_4 %118 = OpExtInst %1 13 %117 
                                                      OpStore %108 %118 
                                       f32_4 %119 = OpLoad %108 
                                       f32_4 %122 = OpFMul %119 %121 
                                                      OpStore %108 %122 
                                       f32_4 %123 = OpLoad %108 
                                       f32_4 %124 = OpExtInst %1 10 %123 
                                                      OpStore %108 %124 
                                       f32_4 %125 = OpLoad %108 
                                       f32_2 %126 = OpVectorShuffle %125 %125 2 3 
                                       f32_2 %129 = OpFAdd %126 %128 
                                                      OpStore %72 %129 
                                         f32 %131 = OpLoad %103 
                                       f32_2 %132 = OpCompositeConstruct %131 %131 
                                       f32_2 %134 = OpFMul %132 %133 
                                                      OpStore %130 %134 
                                       f32_2 %135 = OpLoad %130 
                                       f32_2 %136 = OpExtInst %1 13 %135 
                                                      OpStore %130 %136 
                                       f32_2 %137 = OpLoad %130 
                                       f32_2 %139 = OpFMul %137 %138 
                                                      OpStore %130 %139 
                                       f32_2 %140 = OpLoad %130 
                                       f32_2 %141 = OpExtInst %1 10 %140 
                                                      OpStore %130 %141 
                                       f32_2 %142 = OpLoad %130 
                                       f32_2 %143 = OpFAdd %142 %128 
                                                      OpStore %130 %143 
                                       f32_4 %148 = OpLoad %108 
                                       f32_4 %149 = OpVectorShuffle %148 %148 0 1 0 0 
                                Uniform f32* %151 = OpAccessChain %18 %150 
                                         f32 %152 = OpLoad %151 
                                Uniform f32* %154 = OpAccessChain %18 %153 
                                         f32 %155 = OpLoad %154 
                                Uniform f32* %156 = OpAccessChain %18 %150 
                                         f32 %157 = OpLoad %156 
                                Uniform f32* %158 = OpAccessChain %18 %150 
                                         f32 %159 = OpLoad %158 
                                       f32_4 %160 = OpCompositeConstruct %152 %155 %157 %159 
                                      bool_4 %162 = OpFOrdLessThan %149 %160 
                                      bool_2 %163 = OpVectorShuffle %162 %162 0 1 
                                                      OpStore %147 %163 
                                Uniform f32* %168 = OpAccessChain %18 %167 
                                         f32 %169 = OpLoad %168 
                                Uniform f32* %171 = OpAccessChain %18 %170 
                                         f32 %172 = OpLoad %171 
                                Uniform f32* %174 = OpAccessChain %18 %173 
                                         f32 %175 = OpLoad %174 
                                Uniform f32* %176 = OpAccessChain %18 %167 
                                         f32 %177 = OpLoad %176 
                                       f32_4 %178 = OpCompositeConstruct %169 %172 %175 %177 
                                      bool_4 %182 = OpFOrdEqual %178 %181 
                                      bool_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                                      OpStore %166 %183 
                                      bool_2 %184 = OpLoad %147 
                                        bool %185 = OpCompositeExtract %184 0 
                                      bool_3 %186 = OpLoad %166 
                                        bool %187 = OpCompositeExtract %186 0 
                                        bool %188 = OpLogicalAnd %185 %187 
                                      bool_2 %189 = OpLoad %147 
                                      bool_2 %190 = OpCompositeInsert %188 %189 0 
                                                      OpStore %147 %190 
                                      bool_2 %191 = OpLoad %147 
                                        bool %192 = OpCompositeExtract %191 1 
                                      bool_3 %193 = OpLoad %166 
                                        bool %194 = OpCompositeExtract %193 2 
                                        bool %195 = OpLogicalAnd %192 %194 
                                      bool_2 %196 = OpLoad %147 
                                      bool_2 %197 = OpCompositeInsert %195 %196 1 
                                                      OpStore %147 %197 
                                Private f32* %198 = OpAccessChain %130 %73 
                                         f32 %199 = OpLoad %198 
                                         f32 %201 = OpFMul %199 %200 
                                         f32 %203 = OpFAdd %201 %202 
                                                      OpStore %103 %203 
                                  Input f32* %207 = OpAccessChain %205 %73 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpLoad %103 
                                         f32 %210 = OpFDiv %208 %209 
                                                      OpStore %103 %210 
                                         f32 %211 = OpLoad %103 
                                         f32 %212 = OpExtInst %1 8 %211 
                                                      OpStore %103 %212 
                                Private f32* %214 = OpAccessChain %9 %81 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFNegate %215 
                                         f32 %217 = OpLoad %103 
                                         f32 %218 = OpFAdd %216 %217 
                                                      OpStore %213 %218 
                                Private f32* %219 = OpAccessChain %9 %81 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpLoad %103 
                                         f32 %222 = OpFAdd %220 %221 
                                Private f32* %223 = OpAccessChain %9 %81 
                                                      OpStore %223 %222 
                                Private f32* %224 = OpAccessChain %9 %81 
                                         f32 %225 = OpLoad %224 
                                         f32 %227 = OpFMul %225 %226 
                                Private f32* %228 = OpAccessChain %9 %81 
                                                      OpStore %228 %227 
                                         f32 %229 = OpLoad %213 
                                         f32 %231 = OpFMul %229 %230 
                                Private f32* %232 = OpAccessChain %9 %81 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                Private f32* %235 = OpAccessChain %9 %81 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %9 %81 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 13 %237 
                                Private f32* %239 = OpAccessChain %9 %81 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %9 %81 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %241 %120 
                                Private f32* %243 = OpAccessChain %9 %81 
                                                      OpStore %243 %242 
                                Private f32* %244 = OpAccessChain %9 %81 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpExtInst %1 10 %245 
                                Private f32* %247 = OpAccessChain %9 %81 
                                                      OpStore %247 %246 
                                Private f32* %248 = OpAccessChain %9 %81 
                                         f32 %249 = OpLoad %248 
                                         f32 %250 = OpFAdd %249 %127 
                                Private f32* %251 = OpAccessChain %9 %81 
                                                      OpStore %251 %250 
                                Private f32* %252 = OpAccessChain %9 %81 
                                         f32 %253 = OpLoad %252 
                                Uniform f32* %255 = OpAccessChain %18 %254 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFMul %253 %256 
                                  Input f32* %258 = OpAccessChain %205 %81 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFAdd %257 %259 
                                Private f32* %261 = OpAccessChain %9 %81 
                                                      OpStore %261 %260 
                                Private f32* %264 = OpAccessChain %9 %81 
                                         f32 %265 = OpLoad %264 
                                Private f32* %266 = OpAccessChain %9 %81 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFNegate %267 
                                        bool %269 = OpFOrdGreaterThanEqual %265 %268 
                                                      OpStore %263 %269 
                                Private f32* %270 = OpAccessChain %9 %81 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpExtInst %1 4 %271 
                                         f32 %273 = OpExtInst %1 10 %272 
                                                      OpStore %213 %273 
                                        bool %276 = OpLoad %263 
                                                      OpSelectionMerge %278 None 
                                                      OpBranchConditional %276 %277 %280 
                                             %277 = OpLabel 
                                         f32 %279 = OpLoad %213 
                                                      OpStore %275 %279 
                                                      OpBranch %278 
                                             %280 = OpLabel 
                                         f32 %281 = OpLoad %213 
                                         f32 %282 = OpFNegate %281 
                                                      OpStore %275 %282 
                                                      OpBranch %278 
                                             %278 = OpLabel 
                                         f32 %283 = OpLoad %275 
                                                      OpStore %103 %283 
                                Private f32* %284 = OpAccessChain %9 %81 
                                         f32 %285 = OpLoad %284 
                                Private f32* %286 = OpAccessChain %9 %81 
                                                      OpStore %286 %285 
                                Private f32* %287 = OpAccessChain %9 %81 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 43 %288 %180 %179 
                                Private f32* %290 = OpAccessChain %9 %81 
                                                      OpStore %290 %289 
                                      bool_3 %292 = OpLoad %166 
                                        bool %293 = OpCompositeExtract %292 1 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %297 
                                             %294 = OpLabel 
                                         f32 %296 = OpLoad %103 
                                                      OpStore %291 %296 
                                                      OpBranch %295 
                                             %297 = OpLabel 
                                Private f32* %298 = OpAccessChain %9 %81 
                                         f32 %299 = OpLoad %298 
                                                      OpStore %291 %299 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                         f32 %300 = OpLoad %291 
                                Private f32* %301 = OpAccessChain %9 %81 
                                                      OpStore %301 %300 
                                      bool_2 %303 = OpLoad %147 
                                        bool %304 = OpCompositeExtract %303 0 
                                                      OpSelectionMerge %306 None 
                                                      OpBranchConditional %304 %305 %309 
                                             %305 = OpLabel 
                                Private f32* %307 = OpAccessChain %9 %81 
                                         f32 %308 = OpLoad %307 
                                                      OpStore %302 %308 
                                                      OpBranch %306 
                                             %309 = OpLabel 
                                  Input f32* %310 = OpAccessChain %205 %81 
                                         f32 %311 = OpLoad %310 
                                                      OpStore %302 %311 
                                                      OpBranch %306 
                                             %306 = OpLabel 
                                         f32 %312 = OpLoad %302 
                                Private f32* %313 = OpAccessChain %9 %81 
                                                      OpStore %313 %312 
                                  Input f32* %314 = OpAccessChain %205 %73 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %9 %73 
                                                      OpStore %316 %315 
                  read_only Texture2DSampled %322 = OpLoad %321 
                                       f32_4 %323 = OpLoad %9 
                                       f32_2 %324 = OpVectorShuffle %323 %323 0 1 
                                       f32_4 %325 = OpImageSampleImplicitLod %322 %324 
                                                      OpStore %317 %325 
                                       f32_2 %327 = OpLoad %72 
                                Uniform f32* %329 = OpAccessChain %18 %328 
                                         f32 %330 = OpLoad %329 
                                Uniform f32* %331 = OpAccessChain %18 %328 
                                         f32 %332 = OpLoad %331 
                                       f32_2 %333 = OpCompositeConstruct %330 %332 
                                         f32 %334 = OpCompositeExtract %333 0 
                                         f32 %335 = OpCompositeExtract %333 1 
                                       f32_2 %336 = OpCompositeConstruct %334 %335 
                                       f32_2 %337 = OpFMul %327 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_2 %339 = OpVectorShuffle %338 %338 0 0 
                                       f32_2 %340 = OpFAdd %337 %339 
                                       f32_4 %341 = OpLoad %326 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 2 3 
                                                      OpStore %326 %342 
                                       f32_2 %343 = OpLoad %72 
                                Uniform f32* %344 = OpAccessChain %18 %328 
                                         f32 %345 = OpLoad %344 
                                Uniform f32* %346 = OpAccessChain %18 %328 
                                         f32 %347 = OpLoad %346 
                                       f32_2 %348 = OpCompositeConstruct %345 %347 
                                         f32 %349 = OpCompositeExtract %348 0 
                                         f32 %350 = OpCompositeExtract %348 1 
                                       f32_2 %351 = OpCompositeConstruct %349 %350 
                                       f32_2 %352 = OpFMul %343 %351 
                                       f32_2 %353 = OpLoad %205 
                                       f32_2 %354 = OpVectorShuffle %353 %353 1 1 
                                       f32_2 %355 = OpFAdd %352 %354 
                                       f32_4 %356 = OpLoad %326 
                                       f32_4 %357 = OpVectorShuffle %356 %355 0 1 4 5 
                                                      OpStore %326 %357 
                  read_only Texture2DSampled %358 = OpLoad %321 
                                       f32_4 %359 = OpLoad %326 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpImageSampleImplicitLod %358 %360 
                                       f32_2 %362 = OpVectorShuffle %361 %361 0 3 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %362 0 4 5 3 
                                                      OpStore %9 %364 
                  read_only Texture2DSampled %366 = OpLoad %321 
                                       f32_4 %367 = OpLoad %326 
                                       f32_2 %368 = OpVectorShuffle %367 %367 1 3 
                                       f32_4 %369 = OpImageSampleImplicitLod %366 %368 
                                       f32_2 %370 = OpVectorShuffle %369 %369 1 3 
                                       f32_4 %371 = OpLoad %365 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 1 2 5 
                                                      OpStore %365 %372 
                                Private f32* %373 = OpAccessChain %130 %81 
                                         f32 %374 = OpLoad %373 
                                Uniform f32* %375 = OpAccessChain %18 %328 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                Private f32* %378 = OpAccessChain %9 %81 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFAdd %377 %379 
                                Private f32* %381 = OpAccessChain %326 %81 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %130 %81 
                                         f32 %383 = OpLoad %382 
                                Uniform f32* %384 = OpAccessChain %18 %328 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFMul %383 %385 
                                  Input f32* %387 = OpAccessChain %205 %73 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFAdd %386 %388 
                                Private f32* %390 = OpAccessChain %326 %73 
                                                      OpStore %390 %389 
                  read_only Texture2DSampled %391 = OpLoad %321 
                                       f32_4 %392 = OpLoad %326 
                                       f32_2 %393 = OpVectorShuffle %392 %392 0 1 
                                       f32_4 %394 = OpImageSampleImplicitLod %391 %393 
                                       f32_2 %395 = OpVectorShuffle %394 %394 2 3 
                                       f32_4 %396 = OpLoad %9 
                                       f32_4 %397 = OpVectorShuffle %396 %395 4 1 2 5 
                                                      OpStore %9 %397 
                                Private f32* %400 = OpAccessChain %9 %399 
                                         f32 %401 = OpLoad %400 
                                Private f32* %403 = OpAccessChain %365 %402 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %401 %404 
                                                      OpStore %398 %405 
                                Private f32* %406 = OpAccessChain %9 %402 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpLoad %398 
                                         f32 %409 = OpFAdd %407 %408 
                                                      OpStore %398 %409 
                                         f32 %410 = OpLoad %398 
                                         f32 %412 = OpFMul %410 %411 
                                                      OpStore %398 %412 
                                      bool_2 %415 = OpLoad %147 
                                        bool %416 = OpCompositeExtract %415 1 
                                                      OpSelectionMerge %418 None 
                                                      OpBranchConditional %416 %417 %421 
                                             %417 = OpLabel 
                                Private f32* %419 = OpAccessChain %365 %81 
                                         f32 %420 = OpLoad %419 
                                                      OpStore %414 %420 
                                                      OpBranch %418 
                                             %421 = OpLabel 
                                Private f32* %422 = OpAccessChain %317 %73 
                                         f32 %423 = OpLoad %422 
                                                      OpStore %414 %423 
                                                      OpBranch %418 
                                             %418 = OpLabel 
                                         f32 %424 = OpLoad %414 
                                Private f32* %425 = OpAccessChain %413 %73 
                                                      OpStore %425 %424 
                                      bool_2 %428 = OpLoad %147 
                                        bool %429 = OpCompositeExtract %428 1 
                                                      OpSelectionMerge %431 None 
                                                      OpBranchConditional %429 %430 %434 
                                             %430 = OpLabel 
                                       f32_4 %432 = OpLoad %9 
                                       f32_2 %433 = OpVectorShuffle %432 %432 1 0 
                                                      OpStore %427 %433 
                                                      OpBranch %431 
                                             %434 = OpLabel 
                                       f32_4 %435 = OpLoad %317 
                                       f32_2 %436 = OpVectorShuffle %435 %435 0 2 
                                                      OpStore %427 %436 
                                                      OpBranch %431 
                                             %431 = OpLabel 
                                       f32_2 %437 = OpLoad %427 
                                       f32_4 %438 = OpLoad %413 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 1 5 3 
                                                      OpStore %413 %439 
                                      bool_2 %441 = OpLoad %147 
                                        bool %442 = OpCompositeExtract %441 1 
                                                      OpSelectionMerge %444 None 
                                                      OpBranchConditional %442 %443 %446 
                                             %443 = OpLabel 
                                         f32 %445 = OpLoad %398 
                                                      OpStore %440 %445 
                                                      OpBranch %444 
                                             %446 = OpLabel 
                                Private f32* %447 = OpAccessChain %317 %402 
                                         f32 %448 = OpLoad %447 
                                                      OpStore %440 %448 
                                                      OpBranch %444 
                                             %444 = OpLabel 
                                         f32 %449 = OpLoad %440 
                                Private f32* %450 = OpAccessChain %413 %402 
                                                      OpStore %450 %449 
                                       f32_4 %452 = OpLoad %413 
                                       f32_4 %455 = OpLoad %454 
                                       f32_4 %456 = OpFMul %452 %455 
                                                      OpStore %451 %456 
                                Private f32* %457 = OpAccessChain %413 %402 
                                         f32 %458 = OpLoad %457 
                                  Input f32* %459 = OpAccessChain %454 %402 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpFMul %458 %460 
                                         f32 %463 = OpFAdd %461 %462 
                                                      OpStore %398 %463 
                                         f32 %464 = OpLoad %398 
                                        bool %465 = OpFOrdLessThan %464 %180 
                                      bool_2 %466 = OpLoad %147 
                                      bool_2 %467 = OpCompositeInsert %465 %466 0 
                                                      OpStore %147 %467 
                                      bool_2 %468 = OpLoad %147 
                                        bool %469 = OpCompositeExtract %468 0 
                                         i32 %470 = OpSelect %469 %27 %34 
                                         i32 %472 = OpIMul %470 %471 
                                        bool %473 = OpINotEqual %472 %34 
                                                      OpSelectionMerge %475 None 
                                                      OpBranchConditional %473 %474 %475 
                                             %474 = OpLabel 
                                                      OpKill
                                             %475 = OpLabel 
                                Private f32* %477 = OpAccessChain %413 %402 
                                         f32 %478 = OpLoad %477 
                                  Input f32* %479 = OpAccessChain %454 %402 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFMul %478 %480 
                                Uniform f32* %483 = OpAccessChain %18 %482 
                                         f32 %484 = OpLoad %483 
                                         f32 %485 = OpFNegate %484 
                                         f32 %486 = OpFAdd %481 %485 
                                                      OpStore %398 %486 
                                         f32 %487 = OpLoad %398 
                                        bool %488 = OpFOrdLessThan %487 %180 
                                      bool_2 %489 = OpLoad %147 
                                      bool_2 %490 = OpCompositeInsert %488 %489 0 
                                                      OpStore %147 %490 
                                      bool_2 %491 = OpLoad %147 
                                        bool %492 = OpCompositeExtract %491 0 
                                         i32 %493 = OpSelect %492 %27 %34 
                                         i32 %494 = OpIMul %493 %471 
                                        bool %495 = OpINotEqual %494 %34 
                                                      OpSelectionMerge %497 None 
                                                      OpBranchConditional %495 %496 %497 
                                             %496 = OpLabel 
                                                      OpKill
                                             %497 = OpLabel 
                                Uniform f32* %500 = OpAccessChain %18 %499 %81 
                                         f32 %501 = OpLoad %500 
                                        bool %502 = OpFOrdEqual %501 %179 
                                      bool_2 %503 = OpLoad %147 
                                      bool_2 %504 = OpCompositeInsert %502 %503 0 
                                                      OpStore %147 %504 
                                                      OpSelectionMerge %507 None 
                                                      OpBranchConditional %505 %506 %507 
                                             %506 = OpLabel 
                                      bool_2 %508 = OpLoad %147 
                                        bool %509 = OpCompositeExtract %508 0 
                                                      OpSelectionMerge %511 None 
                                                      OpBranchConditional %509 %510 %511 
                                             %510 = OpLabel 
                                                      OpBranch %511 
                                             %511 = OpLabel 
                                                      OpBranch %507 
                                             %507 = OpLabel 
                                                      OpSelectionMerge %514 None 
                                                      OpBranchConditional %512 %513 %611 
                                             %513 = OpLabel 
                                Uniform f32* %515 = OpAccessChain %18 %499 %73 
                                         f32 %516 = OpLoad %515 
                                        bool %517 = OpFOrdEqual %516 %179 
                                      bool_2 %518 = OpLoad %147 
                                      bool_2 %519 = OpCompositeInsert %517 %518 0 
                                                      OpStore %147 %519 
                                       f32_3 %524 = OpLoad %523 
                                       f32_3 %525 = OpVectorShuffle %524 %524 1 1 1 
                              Uniform f32_4* %527 = OpAccessChain %18 %526 %27 
                                       f32_4 %528 = OpLoad %527 
                                       f32_3 %529 = OpVectorShuffle %528 %528 0 1 2 
                                       f32_3 %530 = OpFMul %525 %529 
                                                      OpStore %521 %530 
                              Uniform f32_4* %531 = OpAccessChain %18 %526 %34 
                                       f32_4 %532 = OpLoad %531 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpLoad %523 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 0 0 
                                       f32_3 %536 = OpFMul %533 %535 
                                       f32_3 %537 = OpLoad %521 
                                       f32_3 %538 = OpFAdd %536 %537 
                                                      OpStore %521 %538 
                              Uniform f32_4* %539 = OpAccessChain %18 %526 %20 
                                       f32_4 %540 = OpLoad %539 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                       f32_3 %542 = OpLoad %523 
                                       f32_3 %543 = OpVectorShuffle %542 %542 2 2 2 
                                       f32_3 %544 = OpFMul %541 %543 
                                       f32_3 %545 = OpLoad %521 
                                       f32_3 %546 = OpFAdd %544 %545 
                                                      OpStore %521 %546 
                                       f32_3 %547 = OpLoad %521 
                              Uniform f32_4* %548 = OpAccessChain %18 %526 %21 
                                       f32_4 %549 = OpLoad %548 
                                       f32_3 %550 = OpVectorShuffle %549 %549 0 1 2 
                                       f32_3 %551 = OpFAdd %547 %550 
                                                      OpStore %521 %551 
                                      bool_2 %554 = OpLoad %147 
                                        bool %555 = OpCompositeExtract %554 0 
                                                      OpSelectionMerge %557 None 
                                                      OpBranchConditional %555 %556 %559 
                                             %556 = OpLabel 
                                       f32_3 %558 = OpLoad %521 
                                                      OpStore %553 %558 
                                                      OpBranch %557 
                                             %559 = OpLabel 
                                       f32_3 %560 = OpLoad %523 
                                                      OpStore %553 %560 
                                                      OpBranch %557 
                                             %557 = OpLabel 
                                       f32_3 %561 = OpLoad %553 
                                       f32_4 %562 = OpLoad %108 
                                       f32_4 %563 = OpVectorShuffle %562 %561 4 5 6 3 
                                                      OpStore %108 %563 
                                       f32_4 %564 = OpLoad %108 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                              Uniform f32_3* %568 = OpAccessChain %18 %566 
                                       f32_3 %569 = OpLoad %568 
                                       f32_3 %570 = OpFNegate %569 
                                       f32_3 %571 = OpFAdd %565 %570 
                                       f32_4 %572 = OpLoad %108 
                                       f32_4 %573 = OpVectorShuffle %572 %571 4 5 6 3 
                                                      OpStore %108 %573 
                                       f32_4 %574 = OpLoad %108 
                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
                              Uniform f32_3* %577 = OpAccessChain %18 %576 
                                       f32_3 %578 = OpLoad %577 
                                       f32_3 %579 = OpFMul %575 %578 
                                       f32_4 %580 = OpLoad %108 
                                       f32_4 %581 = OpVectorShuffle %580 %579 0 4 5 6 
                                                      OpStore %108 %581 
                                Private f32* %582 = OpAccessChain %108 %73 
                                         f32 %583 = OpLoad %582 
                                         f32 %585 = OpFMul %583 %584 
                                         f32 %587 = OpFAdd %585 %586 
                                Private f32* %588 = OpAccessChain %521 %81 
                                                      OpStore %588 %587 
                                Uniform f32* %589 = OpAccessChain %18 %499 %399 
                                         f32 %590 = OpLoad %589 
                                         f32 %592 = OpFMul %590 %591 
                                         f32 %593 = OpFAdd %592 %586 
                                Private f32* %594 = OpAccessChain %317 %81 
                                                      OpStore %594 %593 
                                Private f32* %595 = OpAccessChain %521 %81 
                                         f32 %596 = OpLoad %595 
                                Private f32* %597 = OpAccessChain %317 %81 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpExtInst %1 40 %596 %598 
                                Private f32* %600 = OpAccessChain %108 %81 
                                                      OpStore %600 %599 
                  read_only Texture3DSampled %605 = OpLoad %604 
                                       f32_4 %606 = OpLoad %108 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 2 3 
                                       f32_4 %608 = OpImageSampleImplicitLod %605 %607 
                                                      OpStore %108 %608 
                                       f32_4 %610 = OpLoad %108 
                                                      OpStore %609 %610 
                                                      OpBranch %514 
                                             %611 = OpLabel 
                                Private f32* %612 = OpAccessChain %609 %81 
                                                      OpStore %612 %179 
                                Private f32* %613 = OpAccessChain %609 %73 
                                                      OpStore %613 %179 
                                Private f32* %614 = OpAccessChain %609 %399 
                                                      OpStore %614 %179 
                                Private f32* %615 = OpAccessChain %609 %402 
                                                      OpStore %615 %179 
                                                      OpBranch %514 
                                             %514 = OpLabel 
                                       f32_4 %616 = OpLoad %609 
                              Uniform f32_4* %617 = OpAccessChain %18 %27 
                                       f32_4 %618 = OpLoad %617 
                                         f32 %619 = OpDot %616 %618 
                                                      OpStore %398 %619 
                                         f32 %620 = OpLoad %398 
                                         f32 %621 = OpExtInst %1 43 %620 %180 %179 
                                                      OpStore %398 %621 
                                       f32_4 %622 = OpLoad %451 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                                       f32_3 %625 = OpLoad %624 
                                       f32_3 %626 = OpFMul %623 %625 
                                       f32_4 %627 = OpLoad %609 
                                       f32_4 %628 = OpVectorShuffle %627 %626 4 5 6 3 
                                                      OpStore %609 %628 
                                       f32_4 %630 = OpLoad %451 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
                              Uniform f32_4* %633 = OpAccessChain %18 %632 
                                       f32_4 %634 = OpLoad %633 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                       f32_3 %636 = OpFMul %631 %635 
                                                      OpStore %629 %636 
                                         f32 %637 = OpLoad %398 
                                       f32_3 %638 = OpCompositeConstruct %637 %637 %637 
                                       f32_3 %639 = OpLoad %629 
                                       f32_3 %640 = OpFMul %638 %639 
                                       f32_4 %641 = OpLoad %451 
                                       f32_4 %642 = OpVectorShuffle %641 %640 4 5 6 3 
                                                      OpStore %451 %642 
                                Private f32* %643 = OpAccessChain %609 %402 
                                                      OpStore %643 %180 
                                       f32_4 %646 = OpLoad %451 
                                       f32_4 %647 = OpLoad %609 
                                       f32_4 %648 = OpFAdd %646 %647 
                                                      OpStore %645 %648 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat11;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat3 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat3 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    vs_TEXCOORD1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlitchInterval;
uniform 	float _DispIntensity;
uniform 	float _DispProbability;
uniform 	float _ColorIntensity;
uniform 	float _ColorProbability;
uniform 	float _DispGlitchOn;
uniform 	float _ColorGlitchOn;
uniform 	float _WrapDispCoords;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat16_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat10_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bool u_xlatb10;
vec2 u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].ww + u_xlat0.xy;
    u_xlat10.x = _Time.y / _GlitchInterval;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat5.x = u_xlat0.x + 2.79299998;
    u_xlat1 = u_xlat0.xxxx * vec4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
    u_xlat1 = sin(u_xlat1);
    u_xlat1 = u_xlat1 * vec4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
    u_xlat1 = fract(u_xlat1);
    u_xlat10.xy = u_xlat1.zw + vec2(-0.5, -0.5);
    u_xlat11.xy = u_xlat5.xx * vec2(-91.2228012, 91.2228012);
    u_xlat11.xy = sin(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy * vec2(43758.5469, 43758.5469);
    u_xlat11.xy = fract(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
    u_xlatb1.xy = lessThan(u_xlat1.xyxx, vec4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
    u_xlatb2.xyz = equal(vec4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), vec4(1.0, 1.0, 1.0, 0.0)).xyz;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
    u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
    u_xlat5.x = vs_TEXCOORD0.y / u_xlat5.x;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * 78.2330017;
    u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 43758.5469;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat0.x = u_xlat0.x * _DispIntensity + vs_TEXCOORD0.x;
    u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat16 = fract(abs(u_xlat0.x));
    u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : vs_TEXCOORD0.x;
    u_xlat0.y = vs_TEXCOORD0.y;
    u_xlat2 = texture(_MainTex, u_xlat0.xy);
    u_xlat3.xy = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
    u_xlat3.zw = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + vs_TEXCOORD0.yy;
    u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
    u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
    u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
    u_xlat0.y = u_xlat11.x * _ColorIntensity + vs_TEXCOORD0.y;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
    u_xlat1.x = u_xlat0.w + u_xlat16_1;
    u_xlat0.w = u_xlat1.x * 0.333333343;
    u_xlat0.x = u_xlat10_4.x;
    u_xlat0.y = u_xlat10_3.y;
    u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
    u_xlat1 = u_xlat0 * vs_COLOR0;
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + -0.100000001;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat5.x = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat15 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat15, u_xlat10.x);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat10.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat0.x = u_xlat0.x + u_xlat10_2.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10.x = min(u_xlat0.x, u_xlat10.x);
    u_xlat0.x = (u_xlatb5) ? u_xlat10.x : u_xlat0.x;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %124 %130 %131 %145 %174 %180 %183 %185 %186 %188 %208 %220 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpMemberDecorate %122 0 BuiltIn 122 
                                                      OpMemberDecorate %122 1 BuiltIn 122 
                                                      OpMemberDecorate %122 2 BuiltIn 122 
                                                      OpDecorate %122 Block 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %174 Location 174 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %185 Location 185 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %186 Location 186 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %188 Location 188 
                                                      OpDecorate %208 Location 208 
                                                      OpDecorate %220 Location 220 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %7 %12 %13 %14 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 5 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 4 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 1 
                                              %61 = OpTypePointer Uniform %7 
                                          i32 %65 = OpConstant 0 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                                          i32 %83 = OpConstant 3 
                               Private f32_4* %94 = OpVariable Private 
                                             %121 = OpTypeArray %6 %48 
                                             %122 = OpTypeStruct %7 %6 %121 
                                             %123 = OpTypePointer Output %122 
        Output struct {f32_4; f32; f32[1];}* %124 = OpVariable Output 
                                             %126 = OpTypePointer Output %7 
                                             %128 = OpTypeVector %6 2 
                                             %129 = OpTypePointer Output %128 
                               Output f32_2* %130 = OpVariable Output 
                                Input f32_4* %131 = OpVariable Input 
                                         i32 %134 = OpConstant 6 
                                             %143 = OpTypeVector %6 3 
                                             %144 = OpTypePointer Input %143 
                                Input f32_3* %145 = OpVariable Input 
                                         u32 %163 = OpConstant 2 
                                Private f32* %165 = OpVariable Private 
                                             %173 = OpTypePointer Output %143 
                               Output f32_3* %174 = OpVariable Output 
                               Output f32_3* %180 = OpVariable Output 
                               Output f32_4* %183 = OpVariable Output 
                               Output f32_4* %185 = OpVariable Output 
                                Input f32_4* %186 = OpVariable Input 
                               Output f32_3* %188 = OpVariable Output 
                                         f32 %189 = OpConstant 3.674022E-40 
                                       f32_3 %190 = OpConstantComposite %189 %189 %189 
                                         u32 %200 = OpConstant 3 
                                       f32_2 %204 = OpConstantComposite %37 %37 
                               Output f32_4* %208 = OpVariable Output 
                               Output f32_4* %220 = OpVariable Output 
                                       f32_4 %221 = OpConstantComposite %189 %189 %189 %189 
                                             %222 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %62 = OpAccessChain %17 %60 %60 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %59 %63 
                                                      OpStore %9 %64 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %84 = OpAccessChain %17 %60 %83 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpFAdd %82 %85 
                                                      OpStore %81 %86 
                               Uniform f32_4* %87 = OpAccessChain %17 %60 %83 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpLoad %47 
                                        f32_4 %90 = OpVectorShuffle %89 %89 3 3 3 3 
                                        f32_4 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_4 %93 = OpFAdd %91 %92 
                                                      OpStore %9 %93 
                                        f32_4 %95 = OpLoad %81 
                                        f32_4 %96 = OpVectorShuffle %95 %95 1 1 1 1 
                               Uniform f32_4* %97 = OpAccessChain %17 %83 %60 
                                        f32_4 %98 = OpLoad %97 
                                        f32_4 %99 = OpFMul %96 %98 
                                                      OpStore %94 %99 
                              Uniform f32_4* %100 = OpAccessChain %17 %83 %65 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %81 
                                       f32_4 %103 = OpVectorShuffle %102 %102 0 0 0 0 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %94 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %94 %106 
                              Uniform f32_4* %107 = OpAccessChain %17 %83 %73 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %81 
                                       f32_4 %110 = OpVectorShuffle %109 %109 2 2 2 2 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %94 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %94 %113 
                              Uniform f32_4* %114 = OpAccessChain %17 %83 %83 
                                       f32_4 %115 = OpLoad %114 
                                       f32_4 %116 = OpLoad %81 
                                       f32_4 %117 = OpVectorShuffle %116 %116 3 3 3 3 
                                       f32_4 %118 = OpFMul %115 %117 
                                       f32_4 %119 = OpLoad %94 
                                       f32_4 %120 = OpFAdd %118 %119 
                                                      OpStore %81 %120 
                                       f32_4 %125 = OpLoad %81 
                               Output f32_4* %127 = OpAccessChain %124 %65 
                                                      OpStore %127 %125 
                                       f32_4 %132 = OpLoad %131 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                              Uniform f32_4* %135 = OpAccessChain %17 %134 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                                       f32_2 %138 = OpFMul %133 %137 
                              Uniform f32_4* %139 = OpAccessChain %17 %134 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 2 3 
                                       f32_2 %142 = OpFAdd %138 %141 
                                                      OpStore %130 %142 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %147 = OpAccessChain %17 %73 %65 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                         f32 %150 = OpDot %146 %149 
                                Private f32* %151 = OpAccessChain %94 %25 
                                                      OpStore %151 %150 
                                       f32_3 %152 = OpLoad %145 
                              Uniform f32_4* %153 = OpAccessChain %17 %73 %60 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                         f32 %156 = OpDot %152 %155 
                                Private f32* %157 = OpAccessChain %94 %48 
                                                      OpStore %157 %156 
                                       f32_3 %158 = OpLoad %145 
                              Uniform f32_4* %159 = OpAccessChain %17 %73 %73 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %158 %161 
                                Private f32* %164 = OpAccessChain %94 %163 
                                                      OpStore %164 %162 
                                       f32_4 %166 = OpLoad %94 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_4 %168 = OpLoad %94 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                         f32 %170 = OpDot %167 %169 
                                                      OpStore %165 %170 
                                         f32 %171 = OpLoad %165 
                                         f32 %172 = OpExtInst %1 32 %171 
                                                      OpStore %165 %172 
                                         f32 %175 = OpLoad %165 
                                       f32_3 %176 = OpCompositeConstruct %175 %175 %175 
                                       f32_4 %177 = OpLoad %94 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFMul %176 %178 
                                                      OpStore %174 %179 
                                       f32_4 %181 = OpLoad %9 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                                      OpStore %180 %182 
                                       f32_4 %184 = OpLoad %9 
                                                      OpStore %183 %184 
                                       f32_4 %187 = OpLoad %186 
                                                      OpStore %185 %187 
                                                      OpStore %188 %190 
                                Private f32* %191 = OpAccessChain %81 %48 
                                         f32 %192 = OpLoad %191 
                                Uniform f32* %193 = OpAccessChain %17 %65 %25 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpFMul %192 %194 
                                Private f32* %196 = OpAccessChain %9 %25 
                                                      OpStore %196 %195 
                                Private f32* %197 = OpAccessChain %9 %25 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFMul %198 %37 
                                Private f32* %201 = OpAccessChain %9 %200 
                                                      OpStore %201 %199 
                                       f32_4 %202 = OpLoad %81 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 3 
                                       f32_2 %205 = OpFMul %203 %204 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 1 5 3 
                                                      OpStore %9 %207 
                                       f32_4 %209 = OpLoad %81 
                                       f32_2 %210 = OpVectorShuffle %209 %209 2 3 
                                       f32_4 %211 = OpLoad %208 
                                       f32_4 %212 = OpVectorShuffle %211 %210 0 1 4 5 
                                                      OpStore %208 %212 
                                       f32_4 %213 = OpLoad %9 
                                       f32_2 %214 = OpVectorShuffle %213 %213 2 2 
                                       f32_4 %215 = OpLoad %9 
                                       f32_2 %216 = OpVectorShuffle %215 %215 0 3 
                                       f32_2 %217 = OpFAdd %214 %216 
                                       f32_4 %218 = OpLoad %208 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 2 3 
                                                      OpStore %208 %219 
                                                      OpStore %220 %221 
                                 Output f32* %223 = OpAccessChain %124 %65 %48 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFNegate %224 
                                 Output f32* %226 = OpAccessChain %124 %65 %48 
                                                      OpStore %226 %225 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 759
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %207 %456 %502 %696 %734 %754 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 RelaxedPrecision 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 RelaxedPrecision 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 RelaxedPrecision 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpMemberDecorate %16 14 Offset 16 
                                                      OpMemberDecorate %16 15 Offset 16 
                                                      OpMemberDecorate %16 16 Offset 16 
                                                      OpMemberDecorate %16 17 Offset 16 
                                                      OpMemberDecorate %16 18 Offset 16 
                                                      OpMemberDecorate %16 19 Offset 16 
                                                      OpMemberDecorate %16 20 RelaxedPrecision 
                                                      OpMemberDecorate %16 20 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %323 DescriptorSet 323 
                                                      OpDecorate %323 Binding 323 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %456 Location 456 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %502 Location 502 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %583 SpecId 583 
                                                      OpDecorate %678 DescriptorSet 678 
                                                      OpDecorate %678 Binding 678 
                                                      OpDecorate %683 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %692 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %694 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %696 Location 696 
                                                      OpDecorate %702 RelaxedPrecision 
                                                      OpDecorate %703 RelaxedPrecision 
                                                      OpDecorate %703 DescriptorSet 703 
                                                      OpDecorate %703 Binding 703 
                                                      OpDecorate %704 RelaxedPrecision 
                                                      OpDecorate %707 RelaxedPrecision 
                                                      OpDecorate %708 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %719 RelaxedPrecision 
                                                      OpDecorate %720 RelaxedPrecision 
                                                      OpDecorate %721 RelaxedPrecision 
                                                      OpDecorate %726 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %732 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %734 Location 734 
                                                      OpDecorate %735 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %740 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                                      OpDecorate %749 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %754 Location 754 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %757 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeArray %7 %12 
                                              %16 = OpTypeStruct %7 %10 %7 %7 %7 %13 %14 %7 %15 %10 %10 %7 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %18 = OpVariable Uniform 
                                              %19 = OpTypeInt 32 1 
                                          i32 %20 = OpConstant 5 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypeVector %6 2 
                                              %23 = OpTypePointer Uniform %7 
                                          i32 %27 = OpConstant 6 
                                          i32 %28 = OpConstant 1 
                                          i32 %35 = OpConstant 0 
                                          i32 %48 = OpConstant 2 
                                              %73 = OpTypePointer Private %22 
                               Private f32_2* %74 = OpVariable Private 
                                          u32 %75 = OpConstant 1 
                                              %76 = OpTypePointer Uniform %6 
                                          i32 %79 = OpConstant 12 
                                          u32 %83 = OpConstant 0 
                                              %84 = OpTypePointer Private %6 
                                Private f32* %105 = OpVariable Private 
                                         f32 %108 = OpConstant 3.674022E-40 
                              Private f32_4* %110 = OpVariable Private 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %114 = OpConstant 3.674022E-40 
                                         f32 %115 = OpConstant 3.674022E-40 
                                         f32 %116 = OpConstant 3.674022E-40 
                                       f32_4 %117 = OpConstantComposite %113 %114 %115 %116 
                                         f32 %122 = OpConstant 3.674022E-40 
                                       f32_4 %123 = OpConstantComposite %122 %122 %122 %122 
                                         f32 %129 = OpConstant 3.674022E-40 
                                       f32_2 %130 = OpConstantComposite %129 %129 
                              Private f32_2* %132 = OpVariable Private 
                                       f32_2 %135 = OpConstantComposite %116 %114 
                                       f32_2 %140 = OpConstantComposite %122 %122 
                                             %146 = OpTypeBool 
                                             %147 = OpTypeVector %146 2 
                                             %148 = OpTypePointer Private %147 
                             Private bool_2* %149 = OpVariable Private 
                                         i32 %152 = OpConstant 14 
                                         i32 %155 = OpConstant 16 
                                             %163 = OpTypeVector %146 4 
                                             %166 = OpTypeVector %146 3 
                                             %167 = OpTypePointer Private %166 
                             Private bool_3* %168 = OpVariable Private 
                                         i32 %169 = OpConstant 17 
                                         i32 %172 = OpConstant 19 
                                         i32 %175 = OpConstant 18 
                                         f32 %181 = OpConstant 3.674022E-40 
                                         f32 %182 = OpConstant 3.674022E-40 
                                       f32_4 %183 = OpConstantComposite %181 %181 %181 %182 
                                         f32 %202 = OpConstant 3.674022E-40 
                                         f32 %204 = OpConstant 3.674022E-40 
                                             %206 = OpTypePointer Input %22 
                                Input f32_2* %207 = OpVariable Input 
                                             %208 = OpTypePointer Input %6 
                                Private f32* %215 = OpVariable Private 
                                         f32 %228 = OpConstant 3.674022E-40 
                                         f32 %232 = OpConstant 3.674022E-40 
                                         i32 %256 = OpConstant 13 
                                             %264 = OpTypePointer Private %146 
                               Private bool* %265 = OpVariable Private 
                                             %276 = OpTypePointer Function %6 
                              Private f32_4* %319 = OpVariable Private 
                                             %320 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %321 = OpTypeSampledImage %320 
                                             %322 = OpTypePointer UniformConstant %321 
 UniformConstant read_only Texture2DSampled* %323 = OpVariable UniformConstant 
                              Private f32_4* %328 = OpVariable Private 
                                         i32 %330 = OpConstant 15 
                              Private f32_4* %367 = OpVariable Private 
                                Private f32* %400 = OpVariable Private 
                                         u32 %401 = OpConstant 2 
                                         u32 %404 = OpConstant 3 
                                         f32 %413 = OpConstant 3.674022E-40 
                              Private f32_4* %415 = OpVariable Private 
                                             %428 = OpTypePointer Function %22 
                              Private f32_4* %453 = OpVariable Private 
                                             %455 = OpTypePointer Input %7 
                                Input f32_4* %456 = OpVariable Input 
                                         f32 %464 = OpConstant 3.674022E-40 
                                         i32 %473 = OpConstant -1 
                                         i32 %484 = OpConstant 20 
                                             %501 = OpTypePointer Input %10 
                                Input f32_3* %502 = OpVariable Input 
                                             %505 = OpTypePointer Uniform %10 
                                             %526 = OpTypePointer Private %10 
                              Private f32_3* %527 = OpVariable Private 
                                         i32 %529 = OpConstant 4 
                               Private bool* %572 = OpVariable Private 
                                         i32 %573 = OpConstant 7 
                                        bool %577 = OpConstantFalse 
                                        bool %583 = OpSpecConstantFalse 
                               Private bool* %586 = OpVariable Private 
                                         i32 %592 = OpConstant 8 
                                             %629 = OpTypePointer Function %10 
                                         i32 %643 = OpConstant 10 
                                         i32 %652 = OpConstant 9 
                                         f32 %660 = OpConstant 3.674022E-40 
                                         f32 %662 = OpConstant 3.674022E-40 
                                         f32 %667 = OpConstant 3.674022E-40 
                                             %675 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %676 = OpTypeSampledImage %675 
                                             %677 = OpTypePointer UniformConstant %676 
 UniformConstant read_only Texture3DSampled* %678 = OpVariable UniformConstant 
                              Private f32_4* %683 = OpVariable Private 
                                Input f32_4* %696 = OpVariable Input 
                                Private f32* %702 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %703 = OpVariable UniformConstant 
                              Private f32_3* %708 = OpVariable Private 
                              Private f32_4* %731 = OpVariable Private 
                                Input f32_3* %734 = OpVariable Input 
                                         i32 %741 = OpConstant 11 
                                             %753 = OpTypePointer Output %7 
                               Output f32_4* %754 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %277 = OpVariable Function 
                               Function f32* %293 = OpVariable Function 
                               Function f32* %304 = OpVariable Function 
                               Function f32* %416 = OpVariable Function 
                             Function f32_2* %429 = OpVariable Function 
                               Function f32* %442 = OpVariable Function 
                             Function f32_3* %630 = OpVariable Function 
                               Function f32* %722 = OpVariable Function 
                               Uniform f32_4* %24 = OpAccessChain %18 %20 %21 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 1 1 
                               Uniform f32_4* %29 = OpAccessChain %18 %27 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                                        f32_2 %32 = OpFMul %26 %31 
                                        f32_4 %33 = OpLoad %9 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 2 3 
                                                      OpStore %9 %34 
                               Uniform f32_4* %36 = OpAccessChain %18 %27 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                               Uniform f32_4* %39 = OpAccessChain %18 %20 %21 
                                        f32_4 %40 = OpLoad %39 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 0 
                                        f32_2 %42 = OpFMul %38 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_2 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 2 3 
                                                      OpStore %9 %47 
                               Uniform f32_4* %49 = OpAccessChain %18 %27 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                               Uniform f32_4* %52 = OpAccessChain %18 %20 %21 
                                        f32_4 %53 = OpLoad %52 
                                        f32_2 %54 = OpVectorShuffle %53 %53 2 2 
                                        f32_2 %55 = OpFMul %51 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_2 %57 = OpVectorShuffle %56 %56 0 1 
                                        f32_2 %58 = OpFAdd %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_4 %60 = OpVectorShuffle %59 %58 4 5 2 3 
                                                      OpStore %9 %60 
                               Uniform f32_4* %61 = OpAccessChain %18 %27 %21 
                                        f32_4 %62 = OpLoad %61 
                                        f32_2 %63 = OpVectorShuffle %62 %62 0 1 
                               Uniform f32_4* %64 = OpAccessChain %18 %20 %21 
                                        f32_4 %65 = OpLoad %64 
                                        f32_2 %66 = OpVectorShuffle %65 %65 3 3 
                                        f32_2 %67 = OpFMul %63 %66 
                                        f32_4 %68 = OpLoad %9 
                                        f32_2 %69 = OpVectorShuffle %68 %68 0 1 
                                        f32_2 %70 = OpFAdd %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %70 4 5 2 3 
                                                      OpStore %9 %72 
                                 Uniform f32* %77 = OpAccessChain %18 %35 %75 
                                          f32 %78 = OpLoad %77 
                                 Uniform f32* %80 = OpAccessChain %18 %79 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFDiv %78 %81 
                                 Private f32* %85 = OpAccessChain %74 %83 
                                                      OpStore %85 %82 
                                 Private f32* %86 = OpAccessChain %74 %83 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpExtInst %1 8 %87 
                                 Private f32* %89 = OpAccessChain %74 %83 
                                                      OpStore %89 %88 
                                 Private f32* %90 = OpAccessChain %74 %83 
                                          f32 %91 = OpLoad %90 
                                 Uniform f32* %92 = OpAccessChain %18 %79 
                                          f32 %93 = OpLoad %92 
                                          f32 %94 = OpFMul %91 %93 
                                 Private f32* %95 = OpAccessChain %9 %83 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFAdd %94 %96 
                                 Private f32* %98 = OpAccessChain %9 %83 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %9 %75 
                                         f32 %100 = OpLoad %99 
                                Private f32* %101 = OpAccessChain %9 %83 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFAdd %100 %102 
                                Private f32* %104 = OpAccessChain %9 %83 
                                                      OpStore %104 %103 
                                Private f32* %106 = OpAccessChain %9 %83 
                                         f32 %107 = OpLoad %106 
                                         f32 %109 = OpFAdd %107 %108 
                                                      OpStore %105 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_4 %112 = OpVectorShuffle %111 %111 0 0 0 0 
                                       f32_4 %118 = OpFMul %112 %117 
                                                      OpStore %110 %118 
                                       f32_4 %119 = OpLoad %110 
                                       f32_4 %120 = OpExtInst %1 13 %119 
                                                      OpStore %110 %120 
                                       f32_4 %121 = OpLoad %110 
                                       f32_4 %124 = OpFMul %121 %123 
                                                      OpStore %110 %124 
                                       f32_4 %125 = OpLoad %110 
                                       f32_4 %126 = OpExtInst %1 10 %125 
                                                      OpStore %110 %126 
                                       f32_4 %127 = OpLoad %110 
                                       f32_2 %128 = OpVectorShuffle %127 %127 2 3 
                                       f32_2 %131 = OpFAdd %128 %130 
                                                      OpStore %74 %131 
                                         f32 %133 = OpLoad %105 
                                       f32_2 %134 = OpCompositeConstruct %133 %133 
                                       f32_2 %136 = OpFMul %134 %135 
                                                      OpStore %132 %136 
                                       f32_2 %137 = OpLoad %132 
                                       f32_2 %138 = OpExtInst %1 13 %137 
                                                      OpStore %132 %138 
                                       f32_2 %139 = OpLoad %132 
                                       f32_2 %141 = OpFMul %139 %140 
                                                      OpStore %132 %141 
                                       f32_2 %142 = OpLoad %132 
                                       f32_2 %143 = OpExtInst %1 10 %142 
                                                      OpStore %132 %143 
                                       f32_2 %144 = OpLoad %132 
                                       f32_2 %145 = OpFAdd %144 %130 
                                                      OpStore %132 %145 
                                       f32_4 %150 = OpLoad %110 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 1 0 0 
                                Uniform f32* %153 = OpAccessChain %18 %152 
                                         f32 %154 = OpLoad %153 
                                Uniform f32* %156 = OpAccessChain %18 %155 
                                         f32 %157 = OpLoad %156 
                                Uniform f32* %158 = OpAccessChain %18 %152 
                                         f32 %159 = OpLoad %158 
                                Uniform f32* %160 = OpAccessChain %18 %152 
                                         f32 %161 = OpLoad %160 
                                       f32_4 %162 = OpCompositeConstruct %154 %157 %159 %161 
                                      bool_4 %164 = OpFOrdLessThan %151 %162 
                                      bool_2 %165 = OpVectorShuffle %164 %164 0 1 
                                                      OpStore %149 %165 
                                Uniform f32* %170 = OpAccessChain %18 %169 
                                         f32 %171 = OpLoad %170 
                                Uniform f32* %173 = OpAccessChain %18 %172 
                                         f32 %174 = OpLoad %173 
                                Uniform f32* %176 = OpAccessChain %18 %175 
                                         f32 %177 = OpLoad %176 
                                Uniform f32* %178 = OpAccessChain %18 %169 
                                         f32 %179 = OpLoad %178 
                                       f32_4 %180 = OpCompositeConstruct %171 %174 %177 %179 
                                      bool_4 %184 = OpFOrdEqual %180 %183 
                                      bool_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                                      OpStore %168 %185 
                                      bool_2 %186 = OpLoad %149 
                                        bool %187 = OpCompositeExtract %186 0 
                                      bool_3 %188 = OpLoad %168 
                                        bool %189 = OpCompositeExtract %188 0 
                                        bool %190 = OpLogicalAnd %187 %189 
                                      bool_2 %191 = OpLoad %149 
                                      bool_2 %192 = OpCompositeInsert %190 %191 0 
                                                      OpStore %149 %192 
                                      bool_2 %193 = OpLoad %149 
                                        bool %194 = OpCompositeExtract %193 1 
                                      bool_3 %195 = OpLoad %168 
                                        bool %196 = OpCompositeExtract %195 2 
                                        bool %197 = OpLogicalAnd %194 %196 
                                      bool_2 %198 = OpLoad %149 
                                      bool_2 %199 = OpCompositeInsert %197 %198 1 
                                                      OpStore %149 %199 
                                Private f32* %200 = OpAccessChain %132 %75 
                                         f32 %201 = OpLoad %200 
                                         f32 %203 = OpFMul %201 %202 
                                         f32 %205 = OpFAdd %203 %204 
                                                      OpStore %105 %205 
                                  Input f32* %209 = OpAccessChain %207 %75 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpLoad %105 
                                         f32 %212 = OpFDiv %210 %211 
                                                      OpStore %105 %212 
                                         f32 %213 = OpLoad %105 
                                         f32 %214 = OpExtInst %1 8 %213 
                                                      OpStore %105 %214 
                                Private f32* %216 = OpAccessChain %9 %83 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFNegate %217 
                                         f32 %219 = OpLoad %105 
                                         f32 %220 = OpFAdd %218 %219 
                                                      OpStore %215 %220 
                                Private f32* %221 = OpAccessChain %9 %83 
                                         f32 %222 = OpLoad %221 
                                         f32 %223 = OpLoad %105 
                                         f32 %224 = OpFAdd %222 %223 
                                Private f32* %225 = OpAccessChain %9 %83 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %9 %83 
                                         f32 %227 = OpLoad %226 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %9 %83 
                                                      OpStore %230 %229 
                                         f32 %231 = OpLoad %215 
                                         f32 %233 = OpFMul %231 %232 
                                Private f32* %234 = OpAccessChain %9 %83 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFAdd %233 %235 
                                Private f32* %237 = OpAccessChain %9 %83 
                                                      OpStore %237 %236 
                                Private f32* %238 = OpAccessChain %9 %83 
                                         f32 %239 = OpLoad %238 
                                         f32 %240 = OpExtInst %1 13 %239 
                                Private f32* %241 = OpAccessChain %9 %83 
                                                      OpStore %241 %240 
                                Private f32* %242 = OpAccessChain %9 %83 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFMul %243 %122 
                                Private f32* %245 = OpAccessChain %9 %83 
                                                      OpStore %245 %244 
                                Private f32* %246 = OpAccessChain %9 %83 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpExtInst %1 10 %247 
                                Private f32* %249 = OpAccessChain %9 %83 
                                                      OpStore %249 %248 
                                Private f32* %250 = OpAccessChain %9 %83 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFAdd %251 %129 
                                Private f32* %253 = OpAccessChain %9 %83 
                                                      OpStore %253 %252 
                                Private f32* %254 = OpAccessChain %9 %83 
                                         f32 %255 = OpLoad %254 
                                Uniform f32* %257 = OpAccessChain %18 %256 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFMul %255 %258 
                                  Input f32* %260 = OpAccessChain %207 %83 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpFAdd %259 %261 
                                Private f32* %263 = OpAccessChain %9 %83 
                                                      OpStore %263 %262 
                                Private f32* %266 = OpAccessChain %9 %83 
                                         f32 %267 = OpLoad %266 
                                Private f32* %268 = OpAccessChain %9 %83 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                        bool %271 = OpFOrdGreaterThanEqual %267 %270 
                                                      OpStore %265 %271 
                                Private f32* %272 = OpAccessChain %9 %83 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpExtInst %1 4 %273 
                                         f32 %275 = OpExtInst %1 10 %274 
                                                      OpStore %215 %275 
                                        bool %278 = OpLoad %265 
                                                      OpSelectionMerge %280 None 
                                                      OpBranchConditional %278 %279 %282 
                                             %279 = OpLabel 
                                         f32 %281 = OpLoad %215 
                                                      OpStore %277 %281 
                                                      OpBranch %280 
                                             %282 = OpLabel 
                                         f32 %283 = OpLoad %215 
                                         f32 %284 = OpFNegate %283 
                                                      OpStore %277 %284 
                                                      OpBranch %280 
                                             %280 = OpLabel 
                                         f32 %285 = OpLoad %277 
                                                      OpStore %105 %285 
                                Private f32* %286 = OpAccessChain %9 %83 
                                         f32 %287 = OpLoad %286 
                                Private f32* %288 = OpAccessChain %9 %83 
                                                      OpStore %288 %287 
                                Private f32* %289 = OpAccessChain %9 %83 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpExtInst %1 43 %290 %182 %181 
                                Private f32* %292 = OpAccessChain %9 %83 
                                                      OpStore %292 %291 
                                      bool_3 %294 = OpLoad %168 
                                        bool %295 = OpCompositeExtract %294 1 
                                                      OpSelectionMerge %297 None 
                                                      OpBranchConditional %295 %296 %299 
                                             %296 = OpLabel 
                                         f32 %298 = OpLoad %105 
                                                      OpStore %293 %298 
                                                      OpBranch %297 
                                             %299 = OpLabel 
                                Private f32* %300 = OpAccessChain %9 %83 
                                         f32 %301 = OpLoad %300 
                                                      OpStore %293 %301 
                                                      OpBranch %297 
                                             %297 = OpLabel 
                                         f32 %302 = OpLoad %293 
                                Private f32* %303 = OpAccessChain %9 %83 
                                                      OpStore %303 %302 
                                      bool_2 %305 = OpLoad %149 
                                        bool %306 = OpCompositeExtract %305 0 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %306 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %9 %83 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %304 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                  Input f32* %312 = OpAccessChain %207 %83 
                                         f32 %313 = OpLoad %312 
                                                      OpStore %304 %313 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %314 = OpLoad %304 
                                Private f32* %315 = OpAccessChain %9 %83 
                                                      OpStore %315 %314 
                                  Input f32* %316 = OpAccessChain %207 %75 
                                         f32 %317 = OpLoad %316 
                                Private f32* %318 = OpAccessChain %9 %75 
                                                      OpStore %318 %317 
                  read_only Texture2DSampled %324 = OpLoad %323 
                                       f32_4 %325 = OpLoad %9 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_4 %327 = OpImageSampleImplicitLod %324 %326 
                                                      OpStore %319 %327 
                                       f32_2 %329 = OpLoad %74 
                                Uniform f32* %331 = OpAccessChain %18 %330 
                                         f32 %332 = OpLoad %331 
                                Uniform f32* %333 = OpAccessChain %18 %330 
                                         f32 %334 = OpLoad %333 
                                       f32_2 %335 = OpCompositeConstruct %332 %334 
                                         f32 %336 = OpCompositeExtract %335 0 
                                         f32 %337 = OpCompositeExtract %335 1 
                                       f32_2 %338 = OpCompositeConstruct %336 %337 
                                       f32_2 %339 = OpFMul %329 %338 
                                       f32_4 %340 = OpLoad %9 
                                       f32_2 %341 = OpVectorShuffle %340 %340 0 0 
                                       f32_2 %342 = OpFAdd %339 %341 
                                       f32_4 %343 = OpLoad %328 
                                       f32_4 %344 = OpVectorShuffle %343 %342 4 5 2 3 
                                                      OpStore %328 %344 
                                       f32_2 %345 = OpLoad %74 
                                Uniform f32* %346 = OpAccessChain %18 %330 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %348 = OpAccessChain %18 %330 
                                         f32 %349 = OpLoad %348 
                                       f32_2 %350 = OpCompositeConstruct %347 %349 
                                         f32 %351 = OpCompositeExtract %350 0 
                                         f32 %352 = OpCompositeExtract %350 1 
                                       f32_2 %353 = OpCompositeConstruct %351 %352 
                                       f32_2 %354 = OpFMul %345 %353 
                                       f32_2 %355 = OpLoad %207 
                                       f32_2 %356 = OpVectorShuffle %355 %355 1 1 
                                       f32_2 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %328 
                                       f32_4 %359 = OpVectorShuffle %358 %357 0 1 4 5 
                                                      OpStore %328 %359 
                  read_only Texture2DSampled %360 = OpLoad %323 
                                       f32_4 %361 = OpLoad %328 
                                       f32_2 %362 = OpVectorShuffle %361 %361 0 2 
                                       f32_4 %363 = OpImageSampleImplicitLod %360 %362 
                                       f32_2 %364 = OpVectorShuffle %363 %363 0 3 
                                       f32_4 %365 = OpLoad %9 
                                       f32_4 %366 = OpVectorShuffle %365 %364 0 4 5 3 
                                                      OpStore %9 %366 
                  read_only Texture2DSampled %368 = OpLoad %323 
                                       f32_4 %369 = OpLoad %328 
                                       f32_2 %370 = OpVectorShuffle %369 %369 1 3 
                                       f32_4 %371 = OpImageSampleImplicitLod %368 %370 
                                       f32_2 %372 = OpVectorShuffle %371 %371 1 3 
                                       f32_4 %373 = OpLoad %367 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 1 2 5 
                                                      OpStore %367 %374 
                                Private f32* %375 = OpAccessChain %132 %83 
                                         f32 %376 = OpLoad %375 
                                Uniform f32* %377 = OpAccessChain %18 %330 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpFMul %376 %378 
                                Private f32* %380 = OpAccessChain %9 %83 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFAdd %379 %381 
                                Private f32* %383 = OpAccessChain %328 %83 
                                                      OpStore %383 %382 
                                Private f32* %384 = OpAccessChain %132 %83 
                                         f32 %385 = OpLoad %384 
                                Uniform f32* %386 = OpAccessChain %18 %330 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpFMul %385 %387 
                                  Input f32* %389 = OpAccessChain %207 %75 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpFAdd %388 %390 
                                Private f32* %392 = OpAccessChain %328 %75 
                                                      OpStore %392 %391 
                  read_only Texture2DSampled %393 = OpLoad %323 
                                       f32_4 %394 = OpLoad %328 
                                       f32_2 %395 = OpVectorShuffle %394 %394 0 1 
                                       f32_4 %396 = OpImageSampleImplicitLod %393 %395 
                                       f32_2 %397 = OpVectorShuffle %396 %396 2 3 
                                       f32_4 %398 = OpLoad %9 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 1 2 5 
                                                      OpStore %9 %399 
                                Private f32* %402 = OpAccessChain %9 %401 
                                         f32 %403 = OpLoad %402 
                                Private f32* %405 = OpAccessChain %367 %404 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFAdd %403 %406 
                                                      OpStore %400 %407 
                                Private f32* %408 = OpAccessChain %9 %404 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpLoad %400 
                                         f32 %411 = OpFAdd %409 %410 
                                                      OpStore %400 %411 
                                         f32 %412 = OpLoad %400 
                                         f32 %414 = OpFMul %412 %413 
                                                      OpStore %400 %414 
                                      bool_2 %417 = OpLoad %149 
                                        bool %418 = OpCompositeExtract %417 1 
                                                      OpSelectionMerge %420 None 
                                                      OpBranchConditional %418 %419 %423 
                                             %419 = OpLabel 
                                Private f32* %421 = OpAccessChain %367 %83 
                                         f32 %422 = OpLoad %421 
                                                      OpStore %416 %422 
                                                      OpBranch %420 
                                             %423 = OpLabel 
                                Private f32* %424 = OpAccessChain %319 %75 
                                         f32 %425 = OpLoad %424 
                                                      OpStore %416 %425 
                                                      OpBranch %420 
                                             %420 = OpLabel 
                                         f32 %426 = OpLoad %416 
                                Private f32* %427 = OpAccessChain %415 %75 
                                                      OpStore %427 %426 
                                      bool_2 %430 = OpLoad %149 
                                        bool %431 = OpCompositeExtract %430 1 
                                                      OpSelectionMerge %433 None 
                                                      OpBranchConditional %431 %432 %436 
                                             %432 = OpLabel 
                                       f32_4 %434 = OpLoad %9 
                                       f32_2 %435 = OpVectorShuffle %434 %434 1 0 
                                                      OpStore %429 %435 
                                                      OpBranch %433 
                                             %436 = OpLabel 
                                       f32_4 %437 = OpLoad %319 
                                       f32_2 %438 = OpVectorShuffle %437 %437 0 2 
                                                      OpStore %429 %438 
                                                      OpBranch %433 
                                             %433 = OpLabel 
                                       f32_2 %439 = OpLoad %429 
                                       f32_4 %440 = OpLoad %415 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 1 5 3 
                                                      OpStore %415 %441 
                                      bool_2 %443 = OpLoad %149 
                                        bool %444 = OpCompositeExtract %443 1 
                                                      OpSelectionMerge %446 None 
                                                      OpBranchConditional %444 %445 %448 
                                             %445 = OpLabel 
                                         f32 %447 = OpLoad %400 
                                                      OpStore %442 %447 
                                                      OpBranch %446 
                                             %448 = OpLabel 
                                Private f32* %449 = OpAccessChain %319 %404 
                                         f32 %450 = OpLoad %449 
                                                      OpStore %442 %450 
                                                      OpBranch %446 
                                             %446 = OpLabel 
                                         f32 %451 = OpLoad %442 
                                Private f32* %452 = OpAccessChain %415 %404 
                                                      OpStore %452 %451 
                                       f32_4 %454 = OpLoad %415 
                                       f32_4 %457 = OpLoad %456 
                                       f32_4 %458 = OpFMul %454 %457 
                                                      OpStore %453 %458 
                                Private f32* %459 = OpAccessChain %415 %404 
                                         f32 %460 = OpLoad %459 
                                  Input f32* %461 = OpAccessChain %456 %404 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFMul %460 %462 
                                         f32 %465 = OpFAdd %463 %464 
                                                      OpStore %400 %465 
                                         f32 %466 = OpLoad %400 
                                        bool %467 = OpFOrdLessThan %466 %182 
                                      bool_2 %468 = OpLoad %149 
                                      bool_2 %469 = OpCompositeInsert %467 %468 0 
                                                      OpStore %149 %469 
                                      bool_2 %470 = OpLoad %149 
                                        bool %471 = OpCompositeExtract %470 0 
                                         i32 %472 = OpSelect %471 %28 %35 
                                         i32 %474 = OpIMul %472 %473 
                                        bool %475 = OpINotEqual %474 %35 
                                                      OpSelectionMerge %477 None 
                                                      OpBranchConditional %475 %476 %477 
                                             %476 = OpLabel 
                                                      OpKill
                                             %477 = OpLabel 
                                Private f32* %479 = OpAccessChain %415 %404 
                                         f32 %480 = OpLoad %479 
                                  Input f32* %481 = OpAccessChain %456 %404 
                                         f32 %482 = OpLoad %481 
                                         f32 %483 = OpFMul %480 %482 
                                Uniform f32* %485 = OpAccessChain %18 %484 
                                         f32 %486 = OpLoad %485 
                                         f32 %487 = OpFNegate %486 
                                         f32 %488 = OpFAdd %483 %487 
                                                      OpStore %400 %488 
                                         f32 %489 = OpLoad %400 
                                        bool %490 = OpFOrdLessThan %489 %182 
                                      bool_2 %491 = OpLoad %149 
                                      bool_2 %492 = OpCompositeInsert %490 %491 0 
                                                      OpStore %149 %492 
                                      bool_2 %493 = OpLoad %149 
                                        bool %494 = OpCompositeExtract %493 0 
                                         i32 %495 = OpSelect %494 %28 %35 
                                         i32 %496 = OpIMul %495 %473 
                                        bool %497 = OpINotEqual %496 %35 
                                                      OpSelectionMerge %499 None 
                                                      OpBranchConditional %497 %498 %499 
                                             %498 = OpLabel 
                                                      OpKill
                                             %499 = OpLabel 
                                       f32_3 %503 = OpLoad %502 
                                       f32_3 %504 = OpFNegate %503 
                              Uniform f32_3* %506 = OpAccessChain %18 %28 
                                       f32_3 %507 = OpLoad %506 
                                       f32_3 %508 = OpFAdd %504 %507 
                                       f32_4 %509 = OpLoad %110 
                                       f32_4 %510 = OpVectorShuffle %509 %508 4 5 6 3 
                                                      OpStore %110 %510 
                                Uniform f32* %511 = OpAccessChain %18 %27 %35 %401 
                                         f32 %512 = OpLoad %511 
                                Private f32* %513 = OpAccessChain %319 %83 
                                                      OpStore %513 %512 
                                Uniform f32* %514 = OpAccessChain %18 %27 %28 %401 
                                         f32 %515 = OpLoad %514 
                                Private f32* %516 = OpAccessChain %319 %75 
                                                      OpStore %516 %515 
                                Uniform f32* %517 = OpAccessChain %18 %27 %48 %401 
                                         f32 %518 = OpLoad %517 
                                Private f32* %519 = OpAccessChain %319 %401 
                                                      OpStore %519 %518 
                                       f32_4 %520 = OpLoad %110 
                                       f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
                                       f32_4 %522 = OpLoad %319 
                                       f32_3 %523 = OpVectorShuffle %522 %522 0 1 2 
                                         f32 %524 = OpDot %521 %523 
                                Private f32* %525 = OpAccessChain %110 %83 
                                                      OpStore %525 %524 
                                       f32_3 %528 = OpLoad %502 
                              Uniform f32_4* %530 = OpAccessChain %18 %529 
                                       f32_4 %531 = OpLoad %530 
                                       f32_3 %532 = OpVectorShuffle %531 %531 0 1 2 
                                       f32_3 %533 = OpFNegate %532 
                                       f32_3 %534 = OpFAdd %528 %533 
                                                      OpStore %527 %534 
                                       f32_3 %535 = OpLoad %527 
                                       f32_3 %536 = OpLoad %527 
                                         f32 %537 = OpDot %535 %536 
                                Private f32* %538 = OpAccessChain %527 %83 
                                                      OpStore %538 %537 
                                Private f32* %539 = OpAccessChain %527 %83 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpExtInst %1 31 %540 
                                Private f32* %542 = OpAccessChain %527 %83 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %110 %83 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFNegate %544 
                                Private f32* %546 = OpAccessChain %527 %83 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpFAdd %545 %547 
                                Private f32* %549 = OpAccessChain %527 %83 
                                                      OpStore %549 %548 
                                Uniform f32* %550 = OpAccessChain %18 %529 %404 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %527 %83 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                Private f32* %555 = OpAccessChain %110 %83 
                                         f32 %556 = OpLoad %555 
                                         f32 %557 = OpFAdd %554 %556 
                                Private f32* %558 = OpAccessChain %110 %83 
                                                      OpStore %558 %557 
                                Private f32* %559 = OpAccessChain %110 %83 
                                         f32 %560 = OpLoad %559 
                                Uniform f32* %561 = OpAccessChain %18 %21 %401 
                                         f32 %562 = OpLoad %561 
                                         f32 %563 = OpFMul %560 %562 
                                Uniform f32* %564 = OpAccessChain %18 %21 %404 
                                         f32 %565 = OpLoad %564 
                                         f32 %566 = OpFAdd %563 %565 
                                Private f32* %567 = OpAccessChain %110 %83 
                                                      OpStore %567 %566 
                                Private f32* %568 = OpAccessChain %110 %83 
                                         f32 %569 = OpLoad %568 
                                         f32 %570 = OpExtInst %1 43 %569 %182 %181 
                                Private f32* %571 = OpAccessChain %110 %83 
                                                      OpStore %571 %570 
                                Uniform f32* %574 = OpAccessChain %18 %573 %83 
                                         f32 %575 = OpLoad %574 
                                        bool %576 = OpFOrdEqual %575 %181 
                                                      OpStore %572 %576 
                                                      OpSelectionMerge %579 None 
                                                      OpBranchConditional %577 %578 %579 
                                             %578 = OpLabel 
                                        bool %580 = OpLoad %572 
                                                      OpSelectionMerge %582 None 
                                                      OpBranchConditional %580 %581 %582 
                                             %581 = OpLabel 
                                                      OpBranch %582 
                                             %582 = OpLabel 
                                                      OpBranch %579 
                                             %579 = OpLabel 
                                                      OpSelectionMerge %585 None 
                                                      OpBranchConditional %583 %584 %685 
                                             %584 = OpLabel 
                                Uniform f32* %587 = OpAccessChain %18 %573 %75 
                                         f32 %588 = OpLoad %587 
                                        bool %589 = OpFOrdEqual %588 %181 
                                                      OpStore %586 %589 
                                       f32_3 %590 = OpLoad %502 
                                       f32_3 %591 = OpVectorShuffle %590 %590 1 1 1 
                              Uniform f32_4* %593 = OpAccessChain %18 %592 %28 
                                       f32_4 %594 = OpLoad %593 
                                       f32_3 %595 = OpVectorShuffle %594 %594 0 1 2 
                                       f32_3 %596 = OpFMul %591 %595 
                                       f32_4 %597 = OpLoad %319 
                                       f32_4 %598 = OpVectorShuffle %597 %596 4 5 6 3 
                                                      OpStore %319 %598 
                              Uniform f32_4* %599 = OpAccessChain %18 %592 %35 
                                       f32_4 %600 = OpLoad %599 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_3 %602 = OpLoad %502 
                                       f32_3 %603 = OpVectorShuffle %602 %602 0 0 0 
                                       f32_3 %604 = OpFMul %601 %603 
                                       f32_4 %605 = OpLoad %319 
                                       f32_3 %606 = OpVectorShuffle %605 %605 0 1 2 
                                       f32_3 %607 = OpFAdd %604 %606 
                                       f32_4 %608 = OpLoad %319 
                                       f32_4 %609 = OpVectorShuffle %608 %607 4 5 6 3 
                                                      OpStore %319 %609 
                              Uniform f32_4* %610 = OpAccessChain %18 %592 %48 
                                       f32_4 %611 = OpLoad %610 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 1 2 
                                       f32_3 %613 = OpLoad %502 
                                       f32_3 %614 = OpVectorShuffle %613 %613 2 2 2 
                                       f32_3 %615 = OpFMul %612 %614 
                                       f32_4 %616 = OpLoad %319 
                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
                                       f32_3 %618 = OpFAdd %615 %617 
                                       f32_4 %619 = OpLoad %319 
                                       f32_4 %620 = OpVectorShuffle %619 %618 4 5 6 3 
                                                      OpStore %319 %620 
                                       f32_4 %621 = OpLoad %319 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
                              Uniform f32_4* %623 = OpAccessChain %18 %592 %21 
                                       f32_4 %624 = OpLoad %623 
                                       f32_3 %625 = OpVectorShuffle %624 %624 0 1 2 
                                       f32_3 %626 = OpFAdd %622 %625 
                                       f32_4 %627 = OpLoad %319 
                                       f32_4 %628 = OpVectorShuffle %627 %626 4 5 6 3 
                                                      OpStore %319 %628 
                                        bool %631 = OpLoad %586 
                                                      OpSelectionMerge %633 None 
                                                      OpBranchConditional %631 %632 %636 
                                             %632 = OpLabel 
                                       f32_4 %634 = OpLoad %319 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                                      OpStore %630 %635 
                                                      OpBranch %633 
                                             %636 = OpLabel 
                                       f32_3 %637 = OpLoad %502 
                                                      OpStore %630 %637 
                                                      OpBranch %633 
                                             %633 = OpLabel 
                                       f32_3 %638 = OpLoad %630 
                                       f32_4 %639 = OpLoad %319 
                                       f32_4 %640 = OpVectorShuffle %639 %638 4 5 6 3 
                                                      OpStore %319 %640 
                                       f32_4 %641 = OpLoad %319 
                                       f32_3 %642 = OpVectorShuffle %641 %641 0 1 2 
                              Uniform f32_3* %644 = OpAccessChain %18 %643 
                                       f32_3 %645 = OpLoad %644 
                                       f32_3 %646 = OpFNegate %645 
                                       f32_3 %647 = OpFAdd %642 %646 
                                       f32_4 %648 = OpLoad %319 
                                       f32_4 %649 = OpVectorShuffle %648 %647 4 5 6 3 
                                                      OpStore %319 %649 
                                       f32_4 %650 = OpLoad %319 
                                       f32_3 %651 = OpVectorShuffle %650 %650 0 1 2 
                              Uniform f32_3* %653 = OpAccessChain %18 %652 
                                       f32_3 %654 = OpLoad %653 
                                       f32_3 %655 = OpFMul %651 %654 
                                       f32_4 %656 = OpLoad %319 
                                       f32_4 %657 = OpVectorShuffle %656 %655 0 4 5 6 
                                                      OpStore %319 %657 
                                Private f32* %658 = OpAccessChain %319 %75 
                                         f32 %659 = OpLoad %658 
                                         f32 %661 = OpFMul %659 %660 
                                         f32 %663 = OpFAdd %661 %662 
                                Private f32* %664 = OpAccessChain %132 %83 
                                                      OpStore %664 %663 
                                Uniform f32* %665 = OpAccessChain %18 %573 %401 
                                         f32 %666 = OpLoad %665 
                                         f32 %668 = OpFMul %666 %667 
                                         f32 %669 = OpFAdd %668 %662 
                                                      OpStore %215 %669 
                                         f32 %670 = OpLoad %215 
                                Private f32* %671 = OpAccessChain %132 %83 
                                         f32 %672 = OpLoad %671 
                                         f32 %673 = OpExtInst %1 40 %670 %672 
                                Private f32* %674 = OpAccessChain %319 %83 
                                                      OpStore %674 %673 
                  read_only Texture3DSampled %679 = OpLoad %678 
                                       f32_4 %680 = OpLoad %319 
                                       f32_3 %681 = OpVectorShuffle %680 %680 0 2 3 
                                       f32_4 %682 = OpImageSampleImplicitLod %679 %681 
                                                      OpStore %319 %682 
                                       f32_4 %684 = OpLoad %319 
                                                      OpStore %683 %684 
                                                      OpBranch %585 
                                             %685 = OpLabel 
                                Private f32* %686 = OpAccessChain %683 %83 
                                                      OpStore %686 %181 
                                Private f32* %687 = OpAccessChain %683 %75 
                                                      OpStore %687 %181 
                                Private f32* %688 = OpAccessChain %683 %401 
                                                      OpStore %688 %181 
                                Private f32* %689 = OpAccessChain %683 %404 
                                                      OpStore %689 %181 
                                                      OpBranch %585 
                                             %585 = OpLabel 
                                       f32_4 %690 = OpLoad %683 
                              Uniform f32_4* %691 = OpAccessChain %18 %48 
                                       f32_4 %692 = OpLoad %691 
                                         f32 %693 = OpDot %690 %692 
                                                      OpStore %400 %693 
                                         f32 %694 = OpLoad %400 
                                         f32 %695 = OpExtInst %1 43 %694 %182 %181 
                                                      OpStore %400 %695 
                                       f32_4 %697 = OpLoad %696 
                                       f32_2 %698 = OpVectorShuffle %697 %697 0 1 
                                       f32_4 %699 = OpLoad %696 
                                       f32_2 %700 = OpVectorShuffle %699 %699 3 3 
                                       f32_2 %701 = OpFDiv %698 %700 
                                                      OpStore %132 %701 
                  read_only Texture2DSampled %704 = OpLoad %703 
                                       f32_2 %705 = OpLoad %132 
                                       f32_4 %706 = OpImageSampleImplicitLod %704 %705 
                                         f32 %707 = OpCompositeExtract %706 0 
                                                      OpStore %702 %707 
                                Private f32* %709 = OpAccessChain %110 %83 
                                         f32 %710 = OpLoad %709 
                                         f32 %711 = OpLoad %702 
                                         f32 %712 = OpFAdd %710 %711 
                                Private f32* %713 = OpAccessChain %708 %83 
                                                      OpStore %713 %712 
                                Private f32* %714 = OpAccessChain %708 %83 
                                         f32 %715 = OpLoad %714 
                                         f32 %716 = OpExtInst %1 43 %715 %182 %181 
                                Private f32* %717 = OpAccessChain %708 %83 
                                                      OpStore %717 %716 
                                Private f32* %718 = OpAccessChain %708 %83 
                                         f32 %719 = OpLoad %718 
                                         f32 %720 = OpLoad %400 
                                         f32 %721 = OpExtInst %1 37 %719 %720 
                                                      OpStore %400 %721 
                                        bool %723 = OpLoad %572 
                                                      OpSelectionMerge %725 None 
                                                      OpBranchConditional %723 %724 %727 
                                             %724 = OpLabel 
                                         f32 %726 = OpLoad %400 
                                                      OpStore %722 %726 
                                                      OpBranch %725 
                                             %727 = OpLabel 
                                Private f32* %728 = OpAccessChain %708 %83 
                                         f32 %729 = OpLoad %728 
                                                      OpStore %722 %729 
                                                      OpBranch %725 
                                             %725 = OpLabel 
                                         f32 %730 = OpLoad %722 
                                                      OpStore %400 %730 
                                       f32_4 %732 = OpLoad %453 
                                       f32_3 %733 = OpVectorShuffle %732 %732 0 1 2 
                                       f32_3 %735 = OpLoad %734 
                                       f32_3 %736 = OpFMul %733 %735 
                                       f32_4 %737 = OpLoad %731 
                                       f32_4 %738 = OpVectorShuffle %737 %736 4 5 6 3 
                                                      OpStore %731 %738 
                                       f32_4 %739 = OpLoad %453 
                                       f32_3 %740 = OpVectorShuffle %739 %739 0 1 2 
                              Uniform f32_4* %742 = OpAccessChain %18 %741 
                                       f32_4 %743 = OpLoad %742 
                                       f32_3 %744 = OpVectorShuffle %743 %743 0 1 2 
                                       f32_3 %745 = OpFMul %740 %744 
                                                      OpStore %708 %745 
                                         f32 %746 = OpLoad %400 
                                       f32_3 %747 = OpCompositeConstruct %746 %746 %746 
                                       f32_3 %748 = OpLoad %708 
                                       f32_3 %749 = OpFMul %747 %748 
                                       f32_4 %750 = OpLoad %453 
                                       f32_4 %751 = OpVectorShuffle %750 %749 4 5 6 3 
                                                      OpStore %453 %751 
                                Private f32* %752 = OpAccessChain %731 %404 
                                                      OpStore %752 %182 
                                       f32_4 %755 = OpLoad %453 
                                       f32_4 %756 = OpLoad %731 
                                       f32_4 %757 = OpFAdd %755 %756 
                                                      OpStore %754 %757 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat5;
float u_xlat17;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat5 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat5 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlitchInterval;
uniform 	float _DispIntensity;
uniform 	float _DispProbability;
uniform 	float _ColorIntensity;
uniform 	float _ColorProbability;
uniform 	float _DispGlitchOn;
uniform 	float _ColorGlitchOn;
uniform 	float _WrapDispCoords;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat16_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat10_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bool u_xlatb10;
vec2 u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].ww + u_xlat0.xy;
    u_xlat10.x = _Time.y / _GlitchInterval;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat5.x = u_xlat0.x + 2.79299998;
    u_xlat1 = u_xlat0.xxxx * vec4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
    u_xlat1 = sin(u_xlat1);
    u_xlat1 = u_xlat1 * vec4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
    u_xlat1 = fract(u_xlat1);
    u_xlat10.xy = u_xlat1.zw + vec2(-0.5, -0.5);
    u_xlat11.xy = u_xlat5.xx * vec2(-91.2228012, 91.2228012);
    u_xlat11.xy = sin(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy * vec2(43758.5469, 43758.5469);
    u_xlat11.xy = fract(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
    u_xlatb1.xy = lessThan(u_xlat1.xyxx, vec4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
    u_xlatb2.xyz = equal(vec4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), vec4(1.0, 1.0, 1.0, 0.0)).xyz;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
    u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
    u_xlat5.x = vs_TEXCOORD0.y / u_xlat5.x;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * 78.2330017;
    u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 43758.5469;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat0.x = u_xlat0.x * _DispIntensity + vs_TEXCOORD0.x;
    u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat16 = fract(abs(u_xlat0.x));
    u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : vs_TEXCOORD0.x;
    u_xlat0.y = vs_TEXCOORD0.y;
    u_xlat2 = texture(_MainTex, u_xlat0.xy);
    u_xlat3.xy = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
    u_xlat3.zw = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + vs_TEXCOORD0.yy;
    u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
    u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
    u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
    u_xlat0.y = u_xlat11.x * _ColorIntensity + vs_TEXCOORD0.y;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
    u_xlat1.x = u_xlat0.w + u_xlat16_1;
    u_xlat0.w = u_xlat1.x * 0.333333343;
    u_xlat0.x = u_xlat10_4.x;
    u_xlat0.y = u_xlat10_3.y;
    u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
    u_xlat1 = u_xlat0 * vs_COLOR0;
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + -0.100000001;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat5.x = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat15 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat15, u_xlat10.x);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat10.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat0.x = u_xlat0.x + u_xlat10_2.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10.x = min(u_xlat0.x, u_xlat10.x);
    u_xlat0.x = (u_xlatb5) ? u_xlat10.x : u_xlat0.x;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 337
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %126 %132 %133 %147 %184 %187 %190 %192 %193 %302 %317 %329 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 RelaxedPrecision 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 RelaxedPrecision 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 RelaxedPrecision 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 RelaxedPrecision 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 RelaxedPrecision 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpMemberDecorate %124 0 BuiltIn 124 
                                                      OpMemberDecorate %124 1 BuiltIn 124 
                                                      OpMemberDecorate %124 2 BuiltIn 124 
                                                      OpDecorate %124 Block 
                                                      OpDecorate %132 Location 132 
                                                      OpDecorate %133 Location 133 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate %187 Location 187 
                                                      OpDecorate %190 Location 190 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 Location 192 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %302 Location 302 
                                                      OpDecorate %317 Location 317 
                                                      OpDecorate %329 Location 329 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %12 %13 %14 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 12 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 11 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 8 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %66 = OpConstant 0 
                                          i32 %74 = OpConstant 2 
                               Private f32_4* %82 = OpVariable Private 
                                          i32 %84 = OpConstant 3 
                               Private f32_4* %95 = OpVariable Private 
                                          i32 %98 = OpConstant 10 
                                             %123 = OpTypeArray %6 %48 
                                             %124 = OpTypeStruct %7 %6 %123 
                                             %125 = OpTypePointer Output %124 
        Output struct {f32_4; f32; f32[1];}* %126 = OpVariable Output 
                                             %128 = OpTypePointer Output %7 
                                             %130 = OpTypeVector %6 2 
                                             %131 = OpTypePointer Output %130 
                               Output f32_2* %132 = OpVariable Output 
                                Input f32_4* %133 = OpVariable Input 
                                         i32 %136 = OpConstant 13 
                                             %145 = OpTypeVector %6 3 
                                             %146 = OpTypePointer Input %145 
                                Input f32_3* %147 = OpVariable Input 
                                         i32 %149 = OpConstant 9 
                                         u32 %166 = OpConstant 2 
                                Private f32* %168 = OpVariable Private 
                                             %183 = OpTypePointer Output %145 
                               Output f32_3* %184 = OpVariable Output 
                               Output f32_3* %187 = OpVariable Output 
                               Output f32_4* %190 = OpVariable Output 
                               Output f32_4* %192 = OpVariable Output 
                                Input f32_4* %193 = OpVariable Input 
                                             %195 = OpTypePointer Private %145 
                              Private f32_3* %196 = OpVariable Private 
                              Private f32_4* %213 = OpVariable Private 
                              Private f32_3* %219 = OpVariable Private 
                                         i32 %220 = OpConstant 4 
                                         i32 %226 = OpConstant 5 
                                         i32 %232 = OpConstant 6 
                                         i32 %238 = OpConstant 7 
                                         u32 %247 = OpConstant 3 
                                         f32 %268 = OpConstant 3.674022E-40 
                                       f32_3 %269 = OpConstantComposite %268 %268 %268 
                                         f32 %277 = OpConstant 3.674022E-40 
                                       f32_3 %278 = OpConstantComposite %277 %277 %277 
                                         f32 %289 = OpConstant 3.674022E-40 
                                       f32_3 %290 = OpConstantComposite %289 %289 %289 
                                         f32 %292 = OpConstant 3.674022E-40 
                                       f32_3 %293 = OpConstantComposite %292 %292 %292 
                               Output f32_3* %302 = OpVariable Output 
                                       f32_3 %313 = OpConstantComposite %37 %37 %37 
                               Output f32_4* %317 = OpVariable Output 
                               Output f32_4* %329 = OpVariable Output 
                                       f32_4 %330 = OpConstantComposite %268 %268 %268 %268 
                                             %331 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %67 = OpAccessChain %17 %60 %66 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %75 = OpAccessChain %17 %60 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_4 %77 = OpLoad %47 
                                        f32_4 %78 = OpVectorShuffle %77 %77 2 2 2 2 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpFAdd %79 %80 
                                                      OpStore %9 %81 
                                        f32_4 %83 = OpLoad %9 
                               Uniform f32_4* %85 = OpAccessChain %17 %60 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_4 %87 = OpFAdd %83 %86 
                                                      OpStore %82 %87 
                               Uniform f32_4* %88 = OpAccessChain %17 %60 %84 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %47 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                                      OpStore %9 %94 
                                        f32_4 %96 = OpLoad %82 
                                        f32_4 %97 = OpVectorShuffle %96 %96 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %17 %98 %61 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %97 %100 
                                                      OpStore %95 %101 
                              Uniform f32_4* %102 = OpAccessChain %17 %98 %66 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %82 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %95 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %95 %108 
                              Uniform f32_4* %109 = OpAccessChain %17 %98 %74 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %82 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %95 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %95 %115 
                              Uniform f32_4* %116 = OpAccessChain %17 %98 %84 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %82 
                                       f32_4 %119 = OpVectorShuffle %118 %118 3 3 3 3 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %95 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %82 %122 
                                       f32_4 %127 = OpLoad %82 
                               Output f32_4* %129 = OpAccessChain %126 %66 
                                                      OpStore %129 %127 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                              Uniform f32_4* %137 = OpAccessChain %17 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                                       f32_2 %140 = OpFMul %135 %139 
                              Uniform f32_4* %141 = OpAccessChain %17 %136 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 2 3 
                                       f32_2 %144 = OpFAdd %140 %143 
                                                      OpStore %132 %144 
                                       f32_3 %148 = OpLoad %147 
                              Uniform f32_4* %150 = OpAccessChain %17 %149 %66 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                         f32 %153 = OpDot %148 %152 
                                Private f32* %154 = OpAccessChain %95 %25 
                                                      OpStore %154 %153 
                                       f32_3 %155 = OpLoad %147 
                              Uniform f32_4* %156 = OpAccessChain %17 %149 %61 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %155 %158 
                                Private f32* %160 = OpAccessChain %95 %48 
                                                      OpStore %160 %159 
                                       f32_3 %161 = OpLoad %147 
                              Uniform f32_4* %162 = OpAccessChain %17 %149 %74 
                                       f32_4 %163 = OpLoad %162 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                         f32 %165 = OpDot %161 %164 
                                Private f32* %167 = OpAccessChain %95 %166 
                                                      OpStore %167 %165 
                                       f32_4 %169 = OpLoad %95 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_4 %171 = OpLoad %95 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %170 %172 
                                                      OpStore %168 %173 
                                         f32 %174 = OpLoad %168 
                                         f32 %175 = OpExtInst %1 32 %174 
                                                      OpStore %168 %175 
                                         f32 %176 = OpLoad %168 
                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
                                       f32_4 %178 = OpLoad %95 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %95 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %95 %182 
                                       f32_4 %185 = OpLoad %95 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                                      OpStore %184 %186 
                                       f32_4 %188 = OpLoad %9 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                                      OpStore %187 %189 
                                       f32_4 %191 = OpLoad %9 
                                                      OpStore %190 %191 
                                       f32_4 %194 = OpLoad %193 
                                                      OpStore %192 %194 
                                Private f32* %197 = OpAccessChain %95 %48 
                                         f32 %198 = OpLoad %197 
                                Private f32* %199 = OpAccessChain %95 %48 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %198 %200 
                                Private f32* %202 = OpAccessChain %196 %25 
                                                      OpStore %202 %201 
                                Private f32* %203 = OpAccessChain %95 %25 
                                         f32 %204 = OpLoad %203 
                                Private f32* %205 = OpAccessChain %95 %25 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFMul %204 %206 
                                Private f32* %208 = OpAccessChain %196 %25 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %207 %210 
                                Private f32* %212 = OpAccessChain %196 %25 
                                                      OpStore %212 %211 
                                       f32_4 %214 = OpLoad %95 
                                       f32_4 %215 = OpVectorShuffle %214 %214 1 2 2 0 
                                       f32_4 %216 = OpLoad %95 
                                       f32_4 %217 = OpVectorShuffle %216 %216 0 1 2 2 
                                       f32_4 %218 = OpFMul %215 %217 
                                                      OpStore %213 %218 
                              Uniform f32_4* %221 = OpAccessChain %17 %220 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %213 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %219 %25 
                                                      OpStore %225 %224 
                              Uniform f32_4* %227 = OpAccessChain %17 %226 
                                       f32_4 %228 = OpLoad %227 
                                       f32_4 %229 = OpLoad %213 
                                         f32 %230 = OpDot %228 %229 
                                Private f32* %231 = OpAccessChain %219 %48 
                                                      OpStore %231 %230 
                              Uniform f32_4* %233 = OpAccessChain %17 %232 
                                       f32_4 %234 = OpLoad %233 
                                       f32_4 %235 = OpLoad %213 
                                         f32 %236 = OpDot %234 %235 
                                Private f32* %237 = OpAccessChain %219 %166 
                                                      OpStore %237 %236 
                              Uniform f32_4* %239 = OpAccessChain %17 %238 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpLoad %196 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 0 0 
                                       f32_3 %244 = OpFMul %241 %243 
                                       f32_3 %245 = OpLoad %219 
                                       f32_3 %246 = OpFAdd %244 %245 
                                                      OpStore %196 %246 
                                Private f32* %248 = OpAccessChain %95 %247 
                                                      OpStore %248 %44 
                              Uniform f32_4* %249 = OpAccessChain %17 %61 
                                       f32_4 %250 = OpLoad %249 
                                       f32_4 %251 = OpLoad %95 
                                         f32 %252 = OpDot %250 %251 
                                Private f32* %253 = OpAccessChain %219 %25 
                                                      OpStore %253 %252 
                              Uniform f32_4* %254 = OpAccessChain %17 %74 
                                       f32_4 %255 = OpLoad %254 
                                       f32_4 %256 = OpLoad %95 
                                         f32 %257 = OpDot %255 %256 
                                Private f32* %258 = OpAccessChain %219 %48 
                                                      OpStore %258 %257 
                              Uniform f32_4* %259 = OpAccessChain %17 %84 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpLoad %95 
                                         f32 %262 = OpDot %260 %261 
                                Private f32* %263 = OpAccessChain %219 %166 
                                                      OpStore %263 %262 
                                       f32_3 %264 = OpLoad %196 
                                       f32_3 %265 = OpLoad %219 
                                       f32_3 %266 = OpFAdd %264 %265 
                                                      OpStore %196 %266 
                                       f32_3 %267 = OpLoad %196 
                                       f32_3 %270 = OpExtInst %1 40 %267 %269 
                                                      OpStore %196 %270 
                                       f32_3 %271 = OpLoad %196 
                                       f32_3 %272 = OpExtInst %1 30 %271 
                                       f32_4 %273 = OpLoad %95 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
                                                      OpStore %95 %274 
                                       f32_4 %275 = OpLoad %95 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_4 %280 = OpLoad %95 
                                       f32_4 %281 = OpVectorShuffle %280 %279 4 5 6 3 
                                                      OpStore %95 %281 
                                       f32_4 %282 = OpLoad %95 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_3 %284 = OpExtInst %1 29 %283 
                                       f32_4 %285 = OpLoad %95 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %95 %286 
                                       f32_4 %287 = OpLoad %95 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %95 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %95 %296 
                                       f32_4 %297 = OpLoad %95 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpExtInst %1 40 %298 %269 
                                       f32_4 %300 = OpLoad %95 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
                                                      OpStore %95 %301 
                                       f32_4 %303 = OpLoad %95 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                                      OpStore %302 %304 
                                Private f32* %305 = OpAccessChain %82 %48 
                                         f32 %306 = OpLoad %305 
                                Uniform f32* %307 = OpAccessChain %17 %66 %25 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %306 %308 
                                Private f32* %310 = OpAccessChain %82 %48 
                                                      OpStore %310 %309 
                                       f32_4 %311 = OpLoad %82 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 3 1 
                                       f32_3 %314 = OpFMul %312 %313 
                                       f32_4 %315 = OpLoad %95 
                                       f32_4 %316 = OpVectorShuffle %315 %314 4 1 5 6 
                                                      OpStore %95 %316 
                                       f32_4 %318 = OpLoad %82 
                                       f32_2 %319 = OpVectorShuffle %318 %318 2 3 
                                       f32_4 %320 = OpLoad %317 
                                       f32_4 %321 = OpVectorShuffle %320 %319 0 1 4 5 
                                                      OpStore %317 %321 
                                       f32_4 %322 = OpLoad %95 
                                       f32_2 %323 = OpVectorShuffle %322 %322 2 2 
                                       f32_4 %324 = OpLoad %95 
                                       f32_2 %325 = OpVectorShuffle %324 %324 0 3 
                                       f32_2 %326 = OpFAdd %323 %325 
                                       f32_4 %327 = OpLoad %317 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 2 3 
                                                      OpStore %317 %328 
                                                      OpStore %329 %330 
                                 Output f32* %332 = OpAccessChain %126 %66 %48 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpFNegate %333 
                                 Output f32* %335 = OpAccessChain %126 %66 %48 
                                                      OpStore %335 %334 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 759
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %207 %456 %502 %696 %734 %754 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 RelaxedPrecision 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 RelaxedPrecision 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 RelaxedPrecision 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpMemberDecorate %16 14 Offset 16 
                                                      OpMemberDecorate %16 15 Offset 16 
                                                      OpMemberDecorate %16 16 Offset 16 
                                                      OpMemberDecorate %16 17 Offset 16 
                                                      OpMemberDecorate %16 18 Offset 16 
                                                      OpMemberDecorate %16 19 Offset 16 
                                                      OpMemberDecorate %16 20 RelaxedPrecision 
                                                      OpMemberDecorate %16 20 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %323 DescriptorSet 323 
                                                      OpDecorate %323 Binding 323 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %456 Location 456 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %502 Location 502 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %583 SpecId 583 
                                                      OpDecorate %678 DescriptorSet 678 
                                                      OpDecorate %678 Binding 678 
                                                      OpDecorate %683 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %692 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %694 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %696 Location 696 
                                                      OpDecorate %702 RelaxedPrecision 
                                                      OpDecorate %703 RelaxedPrecision 
                                                      OpDecorate %703 DescriptorSet 703 
                                                      OpDecorate %703 Binding 703 
                                                      OpDecorate %704 RelaxedPrecision 
                                                      OpDecorate %707 RelaxedPrecision 
                                                      OpDecorate %708 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %719 RelaxedPrecision 
                                                      OpDecorate %720 RelaxedPrecision 
                                                      OpDecorate %721 RelaxedPrecision 
                                                      OpDecorate %726 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %732 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %734 Location 734 
                                                      OpDecorate %735 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %740 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                                      OpDecorate %749 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %754 Location 754 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %757 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeArray %7 %12 
                                              %16 = OpTypeStruct %7 %10 %7 %7 %7 %13 %14 %7 %15 %10 %10 %7 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %18 = OpVariable Uniform 
                                              %19 = OpTypeInt 32 1 
                                          i32 %20 = OpConstant 5 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypeVector %6 2 
                                              %23 = OpTypePointer Uniform %7 
                                          i32 %27 = OpConstant 6 
                                          i32 %28 = OpConstant 1 
                                          i32 %35 = OpConstant 0 
                                          i32 %48 = OpConstant 2 
                                              %73 = OpTypePointer Private %22 
                               Private f32_2* %74 = OpVariable Private 
                                          u32 %75 = OpConstant 1 
                                              %76 = OpTypePointer Uniform %6 
                                          i32 %79 = OpConstant 12 
                                          u32 %83 = OpConstant 0 
                                              %84 = OpTypePointer Private %6 
                                Private f32* %105 = OpVariable Private 
                                         f32 %108 = OpConstant 3.674022E-40 
                              Private f32_4* %110 = OpVariable Private 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %114 = OpConstant 3.674022E-40 
                                         f32 %115 = OpConstant 3.674022E-40 
                                         f32 %116 = OpConstant 3.674022E-40 
                                       f32_4 %117 = OpConstantComposite %113 %114 %115 %116 
                                         f32 %122 = OpConstant 3.674022E-40 
                                       f32_4 %123 = OpConstantComposite %122 %122 %122 %122 
                                         f32 %129 = OpConstant 3.674022E-40 
                                       f32_2 %130 = OpConstantComposite %129 %129 
                              Private f32_2* %132 = OpVariable Private 
                                       f32_2 %135 = OpConstantComposite %116 %114 
                                       f32_2 %140 = OpConstantComposite %122 %122 
                                             %146 = OpTypeBool 
                                             %147 = OpTypeVector %146 2 
                                             %148 = OpTypePointer Private %147 
                             Private bool_2* %149 = OpVariable Private 
                                         i32 %152 = OpConstant 14 
                                         i32 %155 = OpConstant 16 
                                             %163 = OpTypeVector %146 4 
                                             %166 = OpTypeVector %146 3 
                                             %167 = OpTypePointer Private %166 
                             Private bool_3* %168 = OpVariable Private 
                                         i32 %169 = OpConstant 17 
                                         i32 %172 = OpConstant 19 
                                         i32 %175 = OpConstant 18 
                                         f32 %181 = OpConstant 3.674022E-40 
                                         f32 %182 = OpConstant 3.674022E-40 
                                       f32_4 %183 = OpConstantComposite %181 %181 %181 %182 
                                         f32 %202 = OpConstant 3.674022E-40 
                                         f32 %204 = OpConstant 3.674022E-40 
                                             %206 = OpTypePointer Input %22 
                                Input f32_2* %207 = OpVariable Input 
                                             %208 = OpTypePointer Input %6 
                                Private f32* %215 = OpVariable Private 
                                         f32 %228 = OpConstant 3.674022E-40 
                                         f32 %232 = OpConstant 3.674022E-40 
                                         i32 %256 = OpConstant 13 
                                             %264 = OpTypePointer Private %146 
                               Private bool* %265 = OpVariable Private 
                                             %276 = OpTypePointer Function %6 
                              Private f32_4* %319 = OpVariable Private 
                                             %320 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %321 = OpTypeSampledImage %320 
                                             %322 = OpTypePointer UniformConstant %321 
 UniformConstant read_only Texture2DSampled* %323 = OpVariable UniformConstant 
                              Private f32_4* %328 = OpVariable Private 
                                         i32 %330 = OpConstant 15 
                              Private f32_4* %367 = OpVariable Private 
                                Private f32* %400 = OpVariable Private 
                                         u32 %401 = OpConstant 2 
                                         u32 %404 = OpConstant 3 
                                         f32 %413 = OpConstant 3.674022E-40 
                              Private f32_4* %415 = OpVariable Private 
                                             %428 = OpTypePointer Function %22 
                              Private f32_4* %453 = OpVariable Private 
                                             %455 = OpTypePointer Input %7 
                                Input f32_4* %456 = OpVariable Input 
                                         f32 %464 = OpConstant 3.674022E-40 
                                         i32 %473 = OpConstant -1 
                                         i32 %484 = OpConstant 20 
                                             %501 = OpTypePointer Input %10 
                                Input f32_3* %502 = OpVariable Input 
                                             %505 = OpTypePointer Uniform %10 
                                             %526 = OpTypePointer Private %10 
                              Private f32_3* %527 = OpVariable Private 
                                         i32 %529 = OpConstant 4 
                               Private bool* %572 = OpVariable Private 
                                         i32 %573 = OpConstant 7 
                                        bool %577 = OpConstantFalse 
                                        bool %583 = OpSpecConstantFalse 
                               Private bool* %586 = OpVariable Private 
                                         i32 %592 = OpConstant 8 
                                             %629 = OpTypePointer Function %10 
                                         i32 %643 = OpConstant 10 
                                         i32 %652 = OpConstant 9 
                                         f32 %660 = OpConstant 3.674022E-40 
                                         f32 %662 = OpConstant 3.674022E-40 
                                         f32 %667 = OpConstant 3.674022E-40 
                                             %675 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %676 = OpTypeSampledImage %675 
                                             %677 = OpTypePointer UniformConstant %676 
 UniformConstant read_only Texture3DSampled* %678 = OpVariable UniformConstant 
                              Private f32_4* %683 = OpVariable Private 
                                Input f32_4* %696 = OpVariable Input 
                                Private f32* %702 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %703 = OpVariable UniformConstant 
                              Private f32_3* %708 = OpVariable Private 
                              Private f32_4* %731 = OpVariable Private 
                                Input f32_3* %734 = OpVariable Input 
                                         i32 %741 = OpConstant 11 
                                             %753 = OpTypePointer Output %7 
                               Output f32_4* %754 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %277 = OpVariable Function 
                               Function f32* %293 = OpVariable Function 
                               Function f32* %304 = OpVariable Function 
                               Function f32* %416 = OpVariable Function 
                             Function f32_2* %429 = OpVariable Function 
                               Function f32* %442 = OpVariable Function 
                             Function f32_3* %630 = OpVariable Function 
                               Function f32* %722 = OpVariable Function 
                               Uniform f32_4* %24 = OpAccessChain %18 %20 %21 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 1 1 
                               Uniform f32_4* %29 = OpAccessChain %18 %27 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                                        f32_2 %32 = OpFMul %26 %31 
                                        f32_4 %33 = OpLoad %9 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 2 3 
                                                      OpStore %9 %34 
                               Uniform f32_4* %36 = OpAccessChain %18 %27 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                               Uniform f32_4* %39 = OpAccessChain %18 %20 %21 
                                        f32_4 %40 = OpLoad %39 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 0 
                                        f32_2 %42 = OpFMul %38 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_2 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 2 3 
                                                      OpStore %9 %47 
                               Uniform f32_4* %49 = OpAccessChain %18 %27 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                               Uniform f32_4* %52 = OpAccessChain %18 %20 %21 
                                        f32_4 %53 = OpLoad %52 
                                        f32_2 %54 = OpVectorShuffle %53 %53 2 2 
                                        f32_2 %55 = OpFMul %51 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_2 %57 = OpVectorShuffle %56 %56 0 1 
                                        f32_2 %58 = OpFAdd %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_4 %60 = OpVectorShuffle %59 %58 4 5 2 3 
                                                      OpStore %9 %60 
                               Uniform f32_4* %61 = OpAccessChain %18 %27 %21 
                                        f32_4 %62 = OpLoad %61 
                                        f32_2 %63 = OpVectorShuffle %62 %62 0 1 
                               Uniform f32_4* %64 = OpAccessChain %18 %20 %21 
                                        f32_4 %65 = OpLoad %64 
                                        f32_2 %66 = OpVectorShuffle %65 %65 3 3 
                                        f32_2 %67 = OpFMul %63 %66 
                                        f32_4 %68 = OpLoad %9 
                                        f32_2 %69 = OpVectorShuffle %68 %68 0 1 
                                        f32_2 %70 = OpFAdd %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %70 4 5 2 3 
                                                      OpStore %9 %72 
                                 Uniform f32* %77 = OpAccessChain %18 %35 %75 
                                          f32 %78 = OpLoad %77 
                                 Uniform f32* %80 = OpAccessChain %18 %79 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFDiv %78 %81 
                                 Private f32* %85 = OpAccessChain %74 %83 
                                                      OpStore %85 %82 
                                 Private f32* %86 = OpAccessChain %74 %83 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpExtInst %1 8 %87 
                                 Private f32* %89 = OpAccessChain %74 %83 
                                                      OpStore %89 %88 
                                 Private f32* %90 = OpAccessChain %74 %83 
                                          f32 %91 = OpLoad %90 
                                 Uniform f32* %92 = OpAccessChain %18 %79 
                                          f32 %93 = OpLoad %92 
                                          f32 %94 = OpFMul %91 %93 
                                 Private f32* %95 = OpAccessChain %9 %83 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFAdd %94 %96 
                                 Private f32* %98 = OpAccessChain %9 %83 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %9 %75 
                                         f32 %100 = OpLoad %99 
                                Private f32* %101 = OpAccessChain %9 %83 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFAdd %100 %102 
                                Private f32* %104 = OpAccessChain %9 %83 
                                                      OpStore %104 %103 
                                Private f32* %106 = OpAccessChain %9 %83 
                                         f32 %107 = OpLoad %106 
                                         f32 %109 = OpFAdd %107 %108 
                                                      OpStore %105 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_4 %112 = OpVectorShuffle %111 %111 0 0 0 0 
                                       f32_4 %118 = OpFMul %112 %117 
                                                      OpStore %110 %118 
                                       f32_4 %119 = OpLoad %110 
                                       f32_4 %120 = OpExtInst %1 13 %119 
                                                      OpStore %110 %120 
                                       f32_4 %121 = OpLoad %110 
                                       f32_4 %124 = OpFMul %121 %123 
                                                      OpStore %110 %124 
                                       f32_4 %125 = OpLoad %110 
                                       f32_4 %126 = OpExtInst %1 10 %125 
                                                      OpStore %110 %126 
                                       f32_4 %127 = OpLoad %110 
                                       f32_2 %128 = OpVectorShuffle %127 %127 2 3 
                                       f32_2 %131 = OpFAdd %128 %130 
                                                      OpStore %74 %131 
                                         f32 %133 = OpLoad %105 
                                       f32_2 %134 = OpCompositeConstruct %133 %133 
                                       f32_2 %136 = OpFMul %134 %135 
                                                      OpStore %132 %136 
                                       f32_2 %137 = OpLoad %132 
                                       f32_2 %138 = OpExtInst %1 13 %137 
                                                      OpStore %132 %138 
                                       f32_2 %139 = OpLoad %132 
                                       f32_2 %141 = OpFMul %139 %140 
                                                      OpStore %132 %141 
                                       f32_2 %142 = OpLoad %132 
                                       f32_2 %143 = OpExtInst %1 10 %142 
                                                      OpStore %132 %143 
                                       f32_2 %144 = OpLoad %132 
                                       f32_2 %145 = OpFAdd %144 %130 
                                                      OpStore %132 %145 
                                       f32_4 %150 = OpLoad %110 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 1 0 0 
                                Uniform f32* %153 = OpAccessChain %18 %152 
                                         f32 %154 = OpLoad %153 
                                Uniform f32* %156 = OpAccessChain %18 %155 
                                         f32 %157 = OpLoad %156 
                                Uniform f32* %158 = OpAccessChain %18 %152 
                                         f32 %159 = OpLoad %158 
                                Uniform f32* %160 = OpAccessChain %18 %152 
                                         f32 %161 = OpLoad %160 
                                       f32_4 %162 = OpCompositeConstruct %154 %157 %159 %161 
                                      bool_4 %164 = OpFOrdLessThan %151 %162 
                                      bool_2 %165 = OpVectorShuffle %164 %164 0 1 
                                                      OpStore %149 %165 
                                Uniform f32* %170 = OpAccessChain %18 %169 
                                         f32 %171 = OpLoad %170 
                                Uniform f32* %173 = OpAccessChain %18 %172 
                                         f32 %174 = OpLoad %173 
                                Uniform f32* %176 = OpAccessChain %18 %175 
                                         f32 %177 = OpLoad %176 
                                Uniform f32* %178 = OpAccessChain %18 %169 
                                         f32 %179 = OpLoad %178 
                                       f32_4 %180 = OpCompositeConstruct %171 %174 %177 %179 
                                      bool_4 %184 = OpFOrdEqual %180 %183 
                                      bool_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                                      OpStore %168 %185 
                                      bool_2 %186 = OpLoad %149 
                                        bool %187 = OpCompositeExtract %186 0 
                                      bool_3 %188 = OpLoad %168 
                                        bool %189 = OpCompositeExtract %188 0 
                                        bool %190 = OpLogicalAnd %187 %189 
                                      bool_2 %191 = OpLoad %149 
                                      bool_2 %192 = OpCompositeInsert %190 %191 0 
                                                      OpStore %149 %192 
                                      bool_2 %193 = OpLoad %149 
                                        bool %194 = OpCompositeExtract %193 1 
                                      bool_3 %195 = OpLoad %168 
                                        bool %196 = OpCompositeExtract %195 2 
                                        bool %197 = OpLogicalAnd %194 %196 
                                      bool_2 %198 = OpLoad %149 
                                      bool_2 %199 = OpCompositeInsert %197 %198 1 
                                                      OpStore %149 %199 
                                Private f32* %200 = OpAccessChain %132 %75 
                                         f32 %201 = OpLoad %200 
                                         f32 %203 = OpFMul %201 %202 
                                         f32 %205 = OpFAdd %203 %204 
                                                      OpStore %105 %205 
                                  Input f32* %209 = OpAccessChain %207 %75 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpLoad %105 
                                         f32 %212 = OpFDiv %210 %211 
                                                      OpStore %105 %212 
                                         f32 %213 = OpLoad %105 
                                         f32 %214 = OpExtInst %1 8 %213 
                                                      OpStore %105 %214 
                                Private f32* %216 = OpAccessChain %9 %83 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFNegate %217 
                                         f32 %219 = OpLoad %105 
                                         f32 %220 = OpFAdd %218 %219 
                                                      OpStore %215 %220 
                                Private f32* %221 = OpAccessChain %9 %83 
                                         f32 %222 = OpLoad %221 
                                         f32 %223 = OpLoad %105 
                                         f32 %224 = OpFAdd %222 %223 
                                Private f32* %225 = OpAccessChain %9 %83 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %9 %83 
                                         f32 %227 = OpLoad %226 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %9 %83 
                                                      OpStore %230 %229 
                                         f32 %231 = OpLoad %215 
                                         f32 %233 = OpFMul %231 %232 
                                Private f32* %234 = OpAccessChain %9 %83 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFAdd %233 %235 
                                Private f32* %237 = OpAccessChain %9 %83 
                                                      OpStore %237 %236 
                                Private f32* %238 = OpAccessChain %9 %83 
                                         f32 %239 = OpLoad %238 
                                         f32 %240 = OpExtInst %1 13 %239 
                                Private f32* %241 = OpAccessChain %9 %83 
                                                      OpStore %241 %240 
                                Private f32* %242 = OpAccessChain %9 %83 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFMul %243 %122 
                                Private f32* %245 = OpAccessChain %9 %83 
                                                      OpStore %245 %244 
                                Private f32* %246 = OpAccessChain %9 %83 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpExtInst %1 10 %247 
                                Private f32* %249 = OpAccessChain %9 %83 
                                                      OpStore %249 %248 
                                Private f32* %250 = OpAccessChain %9 %83 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFAdd %251 %129 
                                Private f32* %253 = OpAccessChain %9 %83 
                                                      OpStore %253 %252 
                                Private f32* %254 = OpAccessChain %9 %83 
                                         f32 %255 = OpLoad %254 
                                Uniform f32* %257 = OpAccessChain %18 %256 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFMul %255 %258 
                                  Input f32* %260 = OpAccessChain %207 %83 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpFAdd %259 %261 
                                Private f32* %263 = OpAccessChain %9 %83 
                                                      OpStore %263 %262 
                                Private f32* %266 = OpAccessChain %9 %83 
                                         f32 %267 = OpLoad %266 
                                Private f32* %268 = OpAccessChain %9 %83 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                        bool %271 = OpFOrdGreaterThanEqual %267 %270 
                                                      OpStore %265 %271 
                                Private f32* %272 = OpAccessChain %9 %83 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpExtInst %1 4 %273 
                                         f32 %275 = OpExtInst %1 10 %274 
                                                      OpStore %215 %275 
                                        bool %278 = OpLoad %265 
                                                      OpSelectionMerge %280 None 
                                                      OpBranchConditional %278 %279 %282 
                                             %279 = OpLabel 
                                         f32 %281 = OpLoad %215 
                                                      OpStore %277 %281 
                                                      OpBranch %280 
                                             %282 = OpLabel 
                                         f32 %283 = OpLoad %215 
                                         f32 %284 = OpFNegate %283 
                                                      OpStore %277 %284 
                                                      OpBranch %280 
                                             %280 = OpLabel 
                                         f32 %285 = OpLoad %277 
                                                      OpStore %105 %285 
                                Private f32* %286 = OpAccessChain %9 %83 
                                         f32 %287 = OpLoad %286 
                                Private f32* %288 = OpAccessChain %9 %83 
                                                      OpStore %288 %287 
                                Private f32* %289 = OpAccessChain %9 %83 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpExtInst %1 43 %290 %182 %181 
                                Private f32* %292 = OpAccessChain %9 %83 
                                                      OpStore %292 %291 
                                      bool_3 %294 = OpLoad %168 
                                        bool %295 = OpCompositeExtract %294 1 
                                                      OpSelectionMerge %297 None 
                                                      OpBranchConditional %295 %296 %299 
                                             %296 = OpLabel 
                                         f32 %298 = OpLoad %105 
                                                      OpStore %293 %298 
                                                      OpBranch %297 
                                             %299 = OpLabel 
                                Private f32* %300 = OpAccessChain %9 %83 
                                         f32 %301 = OpLoad %300 
                                                      OpStore %293 %301 
                                                      OpBranch %297 
                                             %297 = OpLabel 
                                         f32 %302 = OpLoad %293 
                                Private f32* %303 = OpAccessChain %9 %83 
                                                      OpStore %303 %302 
                                      bool_2 %305 = OpLoad %149 
                                        bool %306 = OpCompositeExtract %305 0 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %306 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %9 %83 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %304 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                  Input f32* %312 = OpAccessChain %207 %83 
                                         f32 %313 = OpLoad %312 
                                                      OpStore %304 %313 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %314 = OpLoad %304 
                                Private f32* %315 = OpAccessChain %9 %83 
                                                      OpStore %315 %314 
                                  Input f32* %316 = OpAccessChain %207 %75 
                                         f32 %317 = OpLoad %316 
                                Private f32* %318 = OpAccessChain %9 %75 
                                                      OpStore %318 %317 
                  read_only Texture2DSampled %324 = OpLoad %323 
                                       f32_4 %325 = OpLoad %9 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_4 %327 = OpImageSampleImplicitLod %324 %326 
                                                      OpStore %319 %327 
                                       f32_2 %329 = OpLoad %74 
                                Uniform f32* %331 = OpAccessChain %18 %330 
                                         f32 %332 = OpLoad %331 
                                Uniform f32* %333 = OpAccessChain %18 %330 
                                         f32 %334 = OpLoad %333 
                                       f32_2 %335 = OpCompositeConstruct %332 %334 
                                         f32 %336 = OpCompositeExtract %335 0 
                                         f32 %337 = OpCompositeExtract %335 1 
                                       f32_2 %338 = OpCompositeConstruct %336 %337 
                                       f32_2 %339 = OpFMul %329 %338 
                                       f32_4 %340 = OpLoad %9 
                                       f32_2 %341 = OpVectorShuffle %340 %340 0 0 
                                       f32_2 %342 = OpFAdd %339 %341 
                                       f32_4 %343 = OpLoad %328 
                                       f32_4 %344 = OpVectorShuffle %343 %342 4 5 2 3 
                                                      OpStore %328 %344 
                                       f32_2 %345 = OpLoad %74 
                                Uniform f32* %346 = OpAccessChain %18 %330 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %348 = OpAccessChain %18 %330 
                                         f32 %349 = OpLoad %348 
                                       f32_2 %350 = OpCompositeConstruct %347 %349 
                                         f32 %351 = OpCompositeExtract %350 0 
                                         f32 %352 = OpCompositeExtract %350 1 
                                       f32_2 %353 = OpCompositeConstruct %351 %352 
                                       f32_2 %354 = OpFMul %345 %353 
                                       f32_2 %355 = OpLoad %207 
                                       f32_2 %356 = OpVectorShuffle %355 %355 1 1 
                                       f32_2 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %328 
                                       f32_4 %359 = OpVectorShuffle %358 %357 0 1 4 5 
                                                      OpStore %328 %359 
                  read_only Texture2DSampled %360 = OpLoad %323 
                                       f32_4 %361 = OpLoad %328 
                                       f32_2 %362 = OpVectorShuffle %361 %361 0 2 
                                       f32_4 %363 = OpImageSampleImplicitLod %360 %362 
                                       f32_2 %364 = OpVectorShuffle %363 %363 0 3 
                                       f32_4 %365 = OpLoad %9 
                                       f32_4 %366 = OpVectorShuffle %365 %364 0 4 5 3 
                                                      OpStore %9 %366 
                  read_only Texture2DSampled %368 = OpLoad %323 
                                       f32_4 %369 = OpLoad %328 
                                       f32_2 %370 = OpVectorShuffle %369 %369 1 3 
                                       f32_4 %371 = OpImageSampleImplicitLod %368 %370 
                                       f32_2 %372 = OpVectorShuffle %371 %371 1 3 
                                       f32_4 %373 = OpLoad %367 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 1 2 5 
                                                      OpStore %367 %374 
                                Private f32* %375 = OpAccessChain %132 %83 
                                         f32 %376 = OpLoad %375 
                                Uniform f32* %377 = OpAccessChain %18 %330 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpFMul %376 %378 
                                Private f32* %380 = OpAccessChain %9 %83 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFAdd %379 %381 
                                Private f32* %383 = OpAccessChain %328 %83 
                                                      OpStore %383 %382 
                                Private f32* %384 = OpAccessChain %132 %83 
                                         f32 %385 = OpLoad %384 
                                Uniform f32* %386 = OpAccessChain %18 %330 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpFMul %385 %387 
                                  Input f32* %389 = OpAccessChain %207 %75 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpFAdd %388 %390 
                                Private f32* %392 = OpAccessChain %328 %75 
                                                      OpStore %392 %391 
                  read_only Texture2DSampled %393 = OpLoad %323 
                                       f32_4 %394 = OpLoad %328 
                                       f32_2 %395 = OpVectorShuffle %394 %394 0 1 
                                       f32_4 %396 = OpImageSampleImplicitLod %393 %395 
                                       f32_2 %397 = OpVectorShuffle %396 %396 2 3 
                                       f32_4 %398 = OpLoad %9 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 1 2 5 
                                                      OpStore %9 %399 
                                Private f32* %402 = OpAccessChain %9 %401 
                                         f32 %403 = OpLoad %402 
                                Private f32* %405 = OpAccessChain %367 %404 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFAdd %403 %406 
                                                      OpStore %400 %407 
                                Private f32* %408 = OpAccessChain %9 %404 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpLoad %400 
                                         f32 %411 = OpFAdd %409 %410 
                                                      OpStore %400 %411 
                                         f32 %412 = OpLoad %400 
                                         f32 %414 = OpFMul %412 %413 
                                                      OpStore %400 %414 
                                      bool_2 %417 = OpLoad %149 
                                        bool %418 = OpCompositeExtract %417 1 
                                                      OpSelectionMerge %420 None 
                                                      OpBranchConditional %418 %419 %423 
                                             %419 = OpLabel 
                                Private f32* %421 = OpAccessChain %367 %83 
                                         f32 %422 = OpLoad %421 
                                                      OpStore %416 %422 
                                                      OpBranch %420 
                                             %423 = OpLabel 
                                Private f32* %424 = OpAccessChain %319 %75 
                                         f32 %425 = OpLoad %424 
                                                      OpStore %416 %425 
                                                      OpBranch %420 
                                             %420 = OpLabel 
                                         f32 %426 = OpLoad %416 
                                Private f32* %427 = OpAccessChain %415 %75 
                                                      OpStore %427 %426 
                                      bool_2 %430 = OpLoad %149 
                                        bool %431 = OpCompositeExtract %430 1 
                                                      OpSelectionMerge %433 None 
                                                      OpBranchConditional %431 %432 %436 
                                             %432 = OpLabel 
                                       f32_4 %434 = OpLoad %9 
                                       f32_2 %435 = OpVectorShuffle %434 %434 1 0 
                                                      OpStore %429 %435 
                                                      OpBranch %433 
                                             %436 = OpLabel 
                                       f32_4 %437 = OpLoad %319 
                                       f32_2 %438 = OpVectorShuffle %437 %437 0 2 
                                                      OpStore %429 %438 
                                                      OpBranch %433 
                                             %433 = OpLabel 
                                       f32_2 %439 = OpLoad %429 
                                       f32_4 %440 = OpLoad %415 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 1 5 3 
                                                      OpStore %415 %441 
                                      bool_2 %443 = OpLoad %149 
                                        bool %444 = OpCompositeExtract %443 1 
                                                      OpSelectionMerge %446 None 
                                                      OpBranchConditional %444 %445 %448 
                                             %445 = OpLabel 
                                         f32 %447 = OpLoad %400 
                                                      OpStore %442 %447 
                                                      OpBranch %446 
                                             %448 = OpLabel 
                                Private f32* %449 = OpAccessChain %319 %404 
                                         f32 %450 = OpLoad %449 
                                                      OpStore %442 %450 
                                                      OpBranch %446 
                                             %446 = OpLabel 
                                         f32 %451 = OpLoad %442 
                                Private f32* %452 = OpAccessChain %415 %404 
                                                      OpStore %452 %451 
                                       f32_4 %454 = OpLoad %415 
                                       f32_4 %457 = OpLoad %456 
                                       f32_4 %458 = OpFMul %454 %457 
                                                      OpStore %453 %458 
                                Private f32* %459 = OpAccessChain %415 %404 
                                         f32 %460 = OpLoad %459 
                                  Input f32* %461 = OpAccessChain %456 %404 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFMul %460 %462 
                                         f32 %465 = OpFAdd %463 %464 
                                                      OpStore %400 %465 
                                         f32 %466 = OpLoad %400 
                                        bool %467 = OpFOrdLessThan %466 %182 
                                      bool_2 %468 = OpLoad %149 
                                      bool_2 %469 = OpCompositeInsert %467 %468 0 
                                                      OpStore %149 %469 
                                      bool_2 %470 = OpLoad %149 
                                        bool %471 = OpCompositeExtract %470 0 
                                         i32 %472 = OpSelect %471 %28 %35 
                                         i32 %474 = OpIMul %472 %473 
                                        bool %475 = OpINotEqual %474 %35 
                                                      OpSelectionMerge %477 None 
                                                      OpBranchConditional %475 %476 %477 
                                             %476 = OpLabel 
                                                      OpKill
                                             %477 = OpLabel 
                                Private f32* %479 = OpAccessChain %415 %404 
                                         f32 %480 = OpLoad %479 
                                  Input f32* %481 = OpAccessChain %456 %404 
                                         f32 %482 = OpLoad %481 
                                         f32 %483 = OpFMul %480 %482 
                                Uniform f32* %485 = OpAccessChain %18 %484 
                                         f32 %486 = OpLoad %485 
                                         f32 %487 = OpFNegate %486 
                                         f32 %488 = OpFAdd %483 %487 
                                                      OpStore %400 %488 
                                         f32 %489 = OpLoad %400 
                                        bool %490 = OpFOrdLessThan %489 %182 
                                      bool_2 %491 = OpLoad %149 
                                      bool_2 %492 = OpCompositeInsert %490 %491 0 
                                                      OpStore %149 %492 
                                      bool_2 %493 = OpLoad %149 
                                        bool %494 = OpCompositeExtract %493 0 
                                         i32 %495 = OpSelect %494 %28 %35 
                                         i32 %496 = OpIMul %495 %473 
                                        bool %497 = OpINotEqual %496 %35 
                                                      OpSelectionMerge %499 None 
                                                      OpBranchConditional %497 %498 %499 
                                             %498 = OpLabel 
                                                      OpKill
                                             %499 = OpLabel 
                                       f32_3 %503 = OpLoad %502 
                                       f32_3 %504 = OpFNegate %503 
                              Uniform f32_3* %506 = OpAccessChain %18 %28 
                                       f32_3 %507 = OpLoad %506 
                                       f32_3 %508 = OpFAdd %504 %507 
                                       f32_4 %509 = OpLoad %110 
                                       f32_4 %510 = OpVectorShuffle %509 %508 4 5 6 3 
                                                      OpStore %110 %510 
                                Uniform f32* %511 = OpAccessChain %18 %27 %35 %401 
                                         f32 %512 = OpLoad %511 
                                Private f32* %513 = OpAccessChain %319 %83 
                                                      OpStore %513 %512 
                                Uniform f32* %514 = OpAccessChain %18 %27 %28 %401 
                                         f32 %515 = OpLoad %514 
                                Private f32* %516 = OpAccessChain %319 %75 
                                                      OpStore %516 %515 
                                Uniform f32* %517 = OpAccessChain %18 %27 %48 %401 
                                         f32 %518 = OpLoad %517 
                                Private f32* %519 = OpAccessChain %319 %401 
                                                      OpStore %519 %518 
                                       f32_4 %520 = OpLoad %110 
                                       f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
                                       f32_4 %522 = OpLoad %319 
                                       f32_3 %523 = OpVectorShuffle %522 %522 0 1 2 
                                         f32 %524 = OpDot %521 %523 
                                Private f32* %525 = OpAccessChain %110 %83 
                                                      OpStore %525 %524 
                                       f32_3 %528 = OpLoad %502 
                              Uniform f32_4* %530 = OpAccessChain %18 %529 
                                       f32_4 %531 = OpLoad %530 
                                       f32_3 %532 = OpVectorShuffle %531 %531 0 1 2 
                                       f32_3 %533 = OpFNegate %532 
                                       f32_3 %534 = OpFAdd %528 %533 
                                                      OpStore %527 %534 
                                       f32_3 %535 = OpLoad %527 
                                       f32_3 %536 = OpLoad %527 
                                         f32 %537 = OpDot %535 %536 
                                Private f32* %538 = OpAccessChain %527 %83 
                                                      OpStore %538 %537 
                                Private f32* %539 = OpAccessChain %527 %83 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpExtInst %1 31 %540 
                                Private f32* %542 = OpAccessChain %527 %83 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %110 %83 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFNegate %544 
                                Private f32* %546 = OpAccessChain %527 %83 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpFAdd %545 %547 
                                Private f32* %549 = OpAccessChain %527 %83 
                                                      OpStore %549 %548 
                                Uniform f32* %550 = OpAccessChain %18 %529 %404 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %527 %83 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                Private f32* %555 = OpAccessChain %110 %83 
                                         f32 %556 = OpLoad %555 
                                         f32 %557 = OpFAdd %554 %556 
                                Private f32* %558 = OpAccessChain %110 %83 
                                                      OpStore %558 %557 
                                Private f32* %559 = OpAccessChain %110 %83 
                                         f32 %560 = OpLoad %559 
                                Uniform f32* %561 = OpAccessChain %18 %21 %401 
                                         f32 %562 = OpLoad %561 
                                         f32 %563 = OpFMul %560 %562 
                                Uniform f32* %564 = OpAccessChain %18 %21 %404 
                                         f32 %565 = OpLoad %564 
                                         f32 %566 = OpFAdd %563 %565 
                                Private f32* %567 = OpAccessChain %110 %83 
                                                      OpStore %567 %566 
                                Private f32* %568 = OpAccessChain %110 %83 
                                         f32 %569 = OpLoad %568 
                                         f32 %570 = OpExtInst %1 43 %569 %182 %181 
                                Private f32* %571 = OpAccessChain %110 %83 
                                                      OpStore %571 %570 
                                Uniform f32* %574 = OpAccessChain %18 %573 %83 
                                         f32 %575 = OpLoad %574 
                                        bool %576 = OpFOrdEqual %575 %181 
                                                      OpStore %572 %576 
                                                      OpSelectionMerge %579 None 
                                                      OpBranchConditional %577 %578 %579 
                                             %578 = OpLabel 
                                        bool %580 = OpLoad %572 
                                                      OpSelectionMerge %582 None 
                                                      OpBranchConditional %580 %581 %582 
                                             %581 = OpLabel 
                                                      OpBranch %582 
                                             %582 = OpLabel 
                                                      OpBranch %579 
                                             %579 = OpLabel 
                                                      OpSelectionMerge %585 None 
                                                      OpBranchConditional %583 %584 %685 
                                             %584 = OpLabel 
                                Uniform f32* %587 = OpAccessChain %18 %573 %75 
                                         f32 %588 = OpLoad %587 
                                        bool %589 = OpFOrdEqual %588 %181 
                                                      OpStore %586 %589 
                                       f32_3 %590 = OpLoad %502 
                                       f32_3 %591 = OpVectorShuffle %590 %590 1 1 1 
                              Uniform f32_4* %593 = OpAccessChain %18 %592 %28 
                                       f32_4 %594 = OpLoad %593 
                                       f32_3 %595 = OpVectorShuffle %594 %594 0 1 2 
                                       f32_3 %596 = OpFMul %591 %595 
                                       f32_4 %597 = OpLoad %319 
                                       f32_4 %598 = OpVectorShuffle %597 %596 4 5 6 3 
                                                      OpStore %319 %598 
                              Uniform f32_4* %599 = OpAccessChain %18 %592 %35 
                                       f32_4 %600 = OpLoad %599 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_3 %602 = OpLoad %502 
                                       f32_3 %603 = OpVectorShuffle %602 %602 0 0 0 
                                       f32_3 %604 = OpFMul %601 %603 
                                       f32_4 %605 = OpLoad %319 
                                       f32_3 %606 = OpVectorShuffle %605 %605 0 1 2 
                                       f32_3 %607 = OpFAdd %604 %606 
                                       f32_4 %608 = OpLoad %319 
                                       f32_4 %609 = OpVectorShuffle %608 %607 4 5 6 3 
                                                      OpStore %319 %609 
                              Uniform f32_4* %610 = OpAccessChain %18 %592 %48 
                                       f32_4 %611 = OpLoad %610 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 1 2 
                                       f32_3 %613 = OpLoad %502 
                                       f32_3 %614 = OpVectorShuffle %613 %613 2 2 2 
                                       f32_3 %615 = OpFMul %612 %614 
                                       f32_4 %616 = OpLoad %319 
                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
                                       f32_3 %618 = OpFAdd %615 %617 
                                       f32_4 %619 = OpLoad %319 
                                       f32_4 %620 = OpVectorShuffle %619 %618 4 5 6 3 
                                                      OpStore %319 %620 
                                       f32_4 %621 = OpLoad %319 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
                              Uniform f32_4* %623 = OpAccessChain %18 %592 %21 
                                       f32_4 %624 = OpLoad %623 
                                       f32_3 %625 = OpVectorShuffle %624 %624 0 1 2 
                                       f32_3 %626 = OpFAdd %622 %625 
                                       f32_4 %627 = OpLoad %319 
                                       f32_4 %628 = OpVectorShuffle %627 %626 4 5 6 3 
                                                      OpStore %319 %628 
                                        bool %631 = OpLoad %586 
                                                      OpSelectionMerge %633 None 
                                                      OpBranchConditional %631 %632 %636 
                                             %632 = OpLabel 
                                       f32_4 %634 = OpLoad %319 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                                      OpStore %630 %635 
                                                      OpBranch %633 
                                             %636 = OpLabel 
                                       f32_3 %637 = OpLoad %502 
                                                      OpStore %630 %637 
                                                      OpBranch %633 
                                             %633 = OpLabel 
                                       f32_3 %638 = OpLoad %630 
                                       f32_4 %639 = OpLoad %319 
                                       f32_4 %640 = OpVectorShuffle %639 %638 4 5 6 3 
                                                      OpStore %319 %640 
                                       f32_4 %641 = OpLoad %319 
                                       f32_3 %642 = OpVectorShuffle %641 %641 0 1 2 
                              Uniform f32_3* %644 = OpAccessChain %18 %643 
                                       f32_3 %645 = OpLoad %644 
                                       f32_3 %646 = OpFNegate %645 
                                       f32_3 %647 = OpFAdd %642 %646 
                                       f32_4 %648 = OpLoad %319 
                                       f32_4 %649 = OpVectorShuffle %648 %647 4 5 6 3 
                                                      OpStore %319 %649 
                                       f32_4 %650 = OpLoad %319 
                                       f32_3 %651 = OpVectorShuffle %650 %650 0 1 2 
                              Uniform f32_3* %653 = OpAccessChain %18 %652 
                                       f32_3 %654 = OpLoad %653 
                                       f32_3 %655 = OpFMul %651 %654 
                                       f32_4 %656 = OpLoad %319 
                                       f32_4 %657 = OpVectorShuffle %656 %655 0 4 5 6 
                                                      OpStore %319 %657 
                                Private f32* %658 = OpAccessChain %319 %75 
                                         f32 %659 = OpLoad %658 
                                         f32 %661 = OpFMul %659 %660 
                                         f32 %663 = OpFAdd %661 %662 
                                Private f32* %664 = OpAccessChain %132 %83 
                                                      OpStore %664 %663 
                                Uniform f32* %665 = OpAccessChain %18 %573 %401 
                                         f32 %666 = OpLoad %665 
                                         f32 %668 = OpFMul %666 %667 
                                         f32 %669 = OpFAdd %668 %662 
                                                      OpStore %215 %669 
                                         f32 %670 = OpLoad %215 
                                Private f32* %671 = OpAccessChain %132 %83 
                                         f32 %672 = OpLoad %671 
                                         f32 %673 = OpExtInst %1 40 %670 %672 
                                Private f32* %674 = OpAccessChain %319 %83 
                                                      OpStore %674 %673 
                  read_only Texture3DSampled %679 = OpLoad %678 
                                       f32_4 %680 = OpLoad %319 
                                       f32_3 %681 = OpVectorShuffle %680 %680 0 2 3 
                                       f32_4 %682 = OpImageSampleImplicitLod %679 %681 
                                                      OpStore %319 %682 
                                       f32_4 %684 = OpLoad %319 
                                                      OpStore %683 %684 
                                                      OpBranch %585 
                                             %685 = OpLabel 
                                Private f32* %686 = OpAccessChain %683 %83 
                                                      OpStore %686 %181 
                                Private f32* %687 = OpAccessChain %683 %75 
                                                      OpStore %687 %181 
                                Private f32* %688 = OpAccessChain %683 %401 
                                                      OpStore %688 %181 
                                Private f32* %689 = OpAccessChain %683 %404 
                                                      OpStore %689 %181 
                                                      OpBranch %585 
                                             %585 = OpLabel 
                                       f32_4 %690 = OpLoad %683 
                              Uniform f32_4* %691 = OpAccessChain %18 %48 
                                       f32_4 %692 = OpLoad %691 
                                         f32 %693 = OpDot %690 %692 
                                                      OpStore %400 %693 
                                         f32 %694 = OpLoad %400 
                                         f32 %695 = OpExtInst %1 43 %694 %182 %181 
                                                      OpStore %400 %695 
                                       f32_4 %697 = OpLoad %696 
                                       f32_2 %698 = OpVectorShuffle %697 %697 0 1 
                                       f32_4 %699 = OpLoad %696 
                                       f32_2 %700 = OpVectorShuffle %699 %699 3 3 
                                       f32_2 %701 = OpFDiv %698 %700 
                                                      OpStore %132 %701 
                  read_only Texture2DSampled %704 = OpLoad %703 
                                       f32_2 %705 = OpLoad %132 
                                       f32_4 %706 = OpImageSampleImplicitLod %704 %705 
                                         f32 %707 = OpCompositeExtract %706 0 
                                                      OpStore %702 %707 
                                Private f32* %709 = OpAccessChain %110 %83 
                                         f32 %710 = OpLoad %709 
                                         f32 %711 = OpLoad %702 
                                         f32 %712 = OpFAdd %710 %711 
                                Private f32* %713 = OpAccessChain %708 %83 
                                                      OpStore %713 %712 
                                Private f32* %714 = OpAccessChain %708 %83 
                                         f32 %715 = OpLoad %714 
                                         f32 %716 = OpExtInst %1 43 %715 %182 %181 
                                Private f32* %717 = OpAccessChain %708 %83 
                                                      OpStore %717 %716 
                                Private f32* %718 = OpAccessChain %708 %83 
                                         f32 %719 = OpLoad %718 
                                         f32 %720 = OpLoad %400 
                                         f32 %721 = OpExtInst %1 37 %719 %720 
                                                      OpStore %400 %721 
                                        bool %723 = OpLoad %572 
                                                      OpSelectionMerge %725 None 
                                                      OpBranchConditional %723 %724 %727 
                                             %724 = OpLabel 
                                         f32 %726 = OpLoad %400 
                                                      OpStore %722 %726 
                                                      OpBranch %725 
                                             %727 = OpLabel 
                                Private f32* %728 = OpAccessChain %708 %83 
                                         f32 %729 = OpLoad %728 
                                                      OpStore %722 %729 
                                                      OpBranch %725 
                                             %725 = OpLabel 
                                         f32 %730 = OpLoad %722 
                                                      OpStore %400 %730 
                                       f32_4 %732 = OpLoad %453 
                                       f32_3 %733 = OpVectorShuffle %732 %732 0 1 2 
                                       f32_3 %735 = OpLoad %734 
                                       f32_3 %736 = OpFMul %733 %735 
                                       f32_4 %737 = OpLoad %731 
                                       f32_4 %738 = OpVectorShuffle %737 %736 4 5 6 3 
                                                      OpStore %731 %738 
                                       f32_4 %739 = OpLoad %453 
                                       f32_3 %740 = OpVectorShuffle %739 %739 0 1 2 
                              Uniform f32_4* %742 = OpAccessChain %18 %741 
                                       f32_4 %743 = OpLoad %742 
                                       f32_3 %744 = OpVectorShuffle %743 %743 0 1 2 
                                       f32_3 %745 = OpFMul %740 %744 
                                                      OpStore %708 %745 
                                         f32 %746 = OpLoad %400 
                                       f32_3 %747 = OpCompositeConstruct %746 %746 %746 
                                       f32_3 %748 = OpLoad %708 
                                       f32_3 %749 = OpFMul %747 %748 
                                       f32_4 %750 = OpLoad %453 
                                       f32_4 %751 = OpVectorShuffle %750 %749 4 5 6 3 
                                                      OpStore %453 %751 
                                Private f32* %752 = OpAccessChain %731 %404 
                                                      OpStore %752 %182 
                                       f32_4 %755 = OpLoad %453 
                                       f32_4 %756 = OpLoad %731 
                                       f32_4 %757 = OpFAdd %755 %756 
                                                      OpStore %754 %757 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat16;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat5 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat5 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = max(u_xlat2, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat2 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlitchInterval;
uniform 	float _DispIntensity;
uniform 	float _DispProbability;
uniform 	float _ColorIntensity;
uniform 	float _ColorProbability;
uniform 	float _DispGlitchOn;
uniform 	float _ColorGlitchOn;
uniform 	float _WrapDispCoords;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat16_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat10_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
vec2 u_xlat11;
float u_xlat16;
void main()
{
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].ww + u_xlat0.xy;
    u_xlat10.x = _Time.y / _GlitchInterval;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat5.x = u_xlat0.x + 2.79299998;
    u_xlat1 = u_xlat0.xxxx * vec4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
    u_xlat1 = sin(u_xlat1);
    u_xlat1 = u_xlat1 * vec4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
    u_xlat1 = fract(u_xlat1);
    u_xlat10.xy = u_xlat1.zw + vec2(-0.5, -0.5);
    u_xlat11.xy = u_xlat5.xx * vec2(-91.2228012, 91.2228012);
    u_xlat11.xy = sin(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy * vec2(43758.5469, 43758.5469);
    u_xlat11.xy = fract(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
    u_xlatb1.xy = lessThan(u_xlat1.xyxx, vec4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
    u_xlatb2.xyz = equal(vec4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), vec4(1.0, 1.0, 1.0, 0.0)).xyz;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
    u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
    u_xlat5.x = vs_TEXCOORD0.y / u_xlat5.x;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * 78.2330017;
    u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 43758.5469;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat0.x = u_xlat0.x * _DispIntensity + vs_TEXCOORD0.x;
    u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat16 = fract(abs(u_xlat0.x));
    u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : vs_TEXCOORD0.x;
    u_xlat0.y = vs_TEXCOORD0.y;
    u_xlat2 = texture(_MainTex, u_xlat0.xy);
    u_xlat3.xy = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
    u_xlat3.zw = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + vs_TEXCOORD0.yy;
    u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
    u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
    u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
    u_xlat0.y = u_xlat11.x * _ColorIntensity + vs_TEXCOORD0.y;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
    u_xlat1.x = u_xlat0.w + u_xlat16_1;
    u_xlat0.w = u_xlat1.x * 0.333333343;
    u_xlat0.x = u_xlat10_4.x;
    u_xlat0.y = u_xlat10_3.y;
    u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
    u_xlat1 = u_xlat0 * vs_COLOR0;
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + -0.100000001;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb0){
        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat5.x = u_xlat0.y * 0.25 + 0.75;
        u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat0.x = max(u_xlat5.x, u_xlat2.x);
        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
    } else {
        u_xlat0.x = float(1.0);
        u_xlat0.y = float(1.0);
        u_xlat0.z = float(1.0);
        u_xlat0.w = float(1.0);
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0, unity_OcclusionMaskSelector);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 321
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %49 %121 %133 %134 %148 %185 %188 %191 %192 %194 %311 %314 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 RelaxedPrecision 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 RelaxedPrecision 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %49 Location 49 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %133 Location 133 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate %185 Location 185 
                                                      OpDecorate %188 Location 188 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %191 Location 191 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 Location 192 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 Location 194 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %311 Location 311 
                                                      OpDecorate %314 Location 314 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeStruct %7 %7 %7 %7 %12 %14 %15 %16 %6 %6 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 9 
                                              %22 = OpTypePointer Uniform %6 
                                          f32 %25 = OpConstant 3.674022E-40 
                                          u32 %27 = OpConstant 0 
                                              %28 = OpTypePointer Private %6 
                                          i32 %32 = OpConstant 8 
                                          f32 %39 = OpConstant 3.674022E-40 
                                 Private f32* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                              %48 = OpTypePointer Input %7 
                                 Input f32_4* %49 = OpVariable Input 
                                          u32 %50 = OpConstant 1 
                                              %51 = OpTypePointer Input %6 
                                          i32 %62 = OpConstant 5 
                                          i32 %63 = OpConstant 1 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %68 = OpConstant 0 
                                          i32 %76 = OpConstant 2 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                               Private f32_4* %97 = OpVariable Private 
                                         i32 %100 = OpConstant 7 
                                             %118 = OpTypeArray %6 %50 
                                             %119 = OpTypeStruct %7 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %129 = OpTypePointer Output %7 
                                             %131 = OpTypeVector %6 2 
                                             %132 = OpTypePointer Output %131 
                               Output f32_2* %133 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                                         i32 %137 = OpConstant 10 
                                             %146 = OpTypeVector %6 3 
                                             %147 = OpTypePointer Input %146 
                                Input f32_3* %148 = OpVariable Input 
                                         i32 %150 = OpConstant 6 
                                         u32 %167 = OpConstant 2 
                                Private f32* %169 = OpVariable Private 
                                             %184 = OpTypePointer Output %146 
                               Output f32_3* %185 = OpVariable Output 
                               Output f32_3* %188 = OpVariable Output 
                               Output f32_4* %191 = OpVariable Output 
                                Input f32_4* %192 = OpVariable Input 
                               Output f32_4* %194 = OpVariable Output 
                              Private f32_4* %202 = OpVariable Private 
                              Private f32_4* %210 = OpVariable Private 
                                         f32 %246 = OpConstant 3.674022E-40 
                                       f32_4 %247 = OpConstantComposite %246 %246 %246 %246 
                                       f32_4 %255 = OpConstantComposite %46 %46 %46 %46 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_4 %264 = OpConstantComposite %263 %263 %263 %263 
                                         i32 %271 = OpConstant 4 
                               Output f32_3* %311 = OpVariable Output 
                               Output f32_4* %314 = OpVariable Output 
                                             %315 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %23 = OpAccessChain %19 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %26 = OpFAdd %24 %25 
                                 Private f32* %29 = OpAccessChain %9 %27 
                                                      OpStore %29 %26 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                          f32 %31 = OpLoad %30 
                                 Uniform f32* %33 = OpAccessChain %19 %32 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFMul %31 %34 
                                 Private f32* %36 = OpAccessChain %9 %27 
                                                      OpStore %36 %35 
                                 Private f32* %37 = OpAccessChain %9 %27 
                                          f32 %38 = OpLoad %37 
                                          f32 %40 = OpFMul %38 %39 
                                 Private f32* %41 = OpAccessChain %9 %27 
                                                      OpStore %41 %40 
                                 Uniform f32* %43 = OpAccessChain %19 %32 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                                      OpStore %42 %47 
                                   Input f32* %52 = OpAccessChain %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %42 
                                          f32 %55 = OpFMul %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %27 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpFAdd %55 %57 
                                 Private f32* %59 = OpAccessChain %9 %27 
                                                      OpStore %59 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_4 %61 = OpVectorShuffle %60 %60 0 0 0 0 
                               Uniform f32_4* %65 = OpAccessChain %19 %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpFMul %61 %66 
                                                      OpStore %9 %67 
                               Uniform f32_4* %69 = OpAccessChain %19 %62 %68 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %49 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %77 = OpAccessChain %19 %62 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %49 
                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %9 %83 
                                        f32_4 %85 = OpLoad %9 
                               Uniform f32_4* %87 = OpAccessChain %19 %62 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpFAdd %85 %88 
                                                      OpStore %84 %89 
                               Uniform f32_4* %90 = OpAccessChain %19 %62 %86 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpLoad %49 
                                        f32_4 %93 = OpVectorShuffle %92 %92 3 3 3 3 
                                        f32_4 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_4 %96 = OpFAdd %94 %95 
                                                      OpStore %9 %96 
                                        f32_4 %98 = OpLoad %84 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %19 %100 %63 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %99 %102 
                                                      OpStore %97 %103 
                              Uniform f32_4* %104 = OpAccessChain %19 %100 %68 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %84 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %97 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %97 %110 
                              Uniform f32_4* %111 = OpAccessChain %19 %100 %76 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %84 
                                       f32_4 %114 = OpVectorShuffle %113 %113 2 2 2 2 
                                       f32_4 %115 = OpFMul %112 %114 
                                       f32_4 %116 = OpLoad %97 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %97 %117 
                              Uniform f32_4* %122 = OpAccessChain %19 %100 %86 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %84 
                                       f32_4 %125 = OpVectorShuffle %124 %124 3 3 3 3 
                                       f32_4 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %97 
                                       f32_4 %128 = OpFAdd %126 %127 
                               Output f32_4* %130 = OpAccessChain %121 %68 
                                                      OpStore %130 %128 
                                       f32_4 %135 = OpLoad %134 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              Uniform f32_4* %138 = OpAccessChain %19 %137 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_2 %141 = OpFMul %136 %140 
                              Uniform f32_4* %142 = OpAccessChain %19 %137 
                                       f32_4 %143 = OpLoad %142 
                                       f32_2 %144 = OpVectorShuffle %143 %143 2 3 
                                       f32_2 %145 = OpFAdd %141 %144 
                                                      OpStore %133 %145 
                                       f32_3 %149 = OpLoad %148 
                              Uniform f32_4* %151 = OpAccessChain %19 %150 %68 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %149 %153 
                                Private f32* %155 = OpAccessChain %84 %27 
                                                      OpStore %155 %154 
                                       f32_3 %156 = OpLoad %148 
                              Uniform f32_4* %157 = OpAccessChain %19 %150 %63 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %156 %159 
                                Private f32* %161 = OpAccessChain %84 %50 
                                                      OpStore %161 %160 
                                       f32_3 %162 = OpLoad %148 
                              Uniform f32_4* %163 = OpAccessChain %19 %150 %76 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %168 = OpAccessChain %84 %167 
                                                      OpStore %168 %166 
                                       f32_4 %170 = OpLoad %84 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_4 %172 = OpLoad %84 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %171 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %169 %176 
                                         f32 %177 = OpLoad %169 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_4 %179 = OpLoad %84 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_4 %182 = OpLoad %84 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
                                                      OpStore %84 %183 
                                       f32_4 %186 = OpLoad %84 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                                      OpStore %185 %187 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                                      OpStore %188 %190 
                                       f32_4 %193 = OpLoad %192 
                                                      OpStore %191 %193 
                                       f32_4 %195 = OpLoad %9 
                                                      OpStore %194 %195 
                                       f32_4 %196 = OpLoad %9 
                                       f32_4 %197 = OpVectorShuffle %196 %196 1 1 1 1 
                                       f32_4 %198 = OpFNegate %197 
                              Uniform f32_4* %199 = OpAccessChain %19 %63 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpFAdd %198 %200 
                                                      OpStore %97 %201 
                                       f32_4 %203 = OpLoad %84 
                                       f32_4 %204 = OpVectorShuffle %203 %203 1 1 1 1 
                                       f32_4 %205 = OpLoad %97 
                                       f32_4 %206 = OpFMul %204 %205 
                                                      OpStore %202 %206 
                                       f32_4 %207 = OpLoad %97 
                                       f32_4 %208 = OpLoad %97 
                                       f32_4 %209 = OpFMul %207 %208 
                                                      OpStore %97 %209 
                                       f32_4 %211 = OpLoad %9 
                                       f32_4 %212 = OpVectorShuffle %211 %211 0 0 0 0 
                                       f32_4 %213 = OpFNegate %212 
                              Uniform f32_4* %214 = OpAccessChain %19 %68 
                                       f32_4 %215 = OpLoad %214 
                                       f32_4 %216 = OpFAdd %213 %215 
                                                      OpStore %210 %216 
                                       f32_4 %217 = OpLoad %9 
                                       f32_4 %218 = OpVectorShuffle %217 %217 2 2 2 2 
                                       f32_4 %219 = OpFNegate %218 
                              Uniform f32_4* %220 = OpAccessChain %19 %76 
                                       f32_4 %221 = OpLoad %220 
                                       f32_4 %222 = OpFAdd %219 %221 
                                                      OpStore %9 %222 
                                       f32_4 %223 = OpLoad %210 
                                       f32_4 %224 = OpLoad %84 
                                       f32_4 %225 = OpVectorShuffle %224 %224 0 0 0 0 
                                       f32_4 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %202 
                                       f32_4 %228 = OpFAdd %226 %227 
                                                      OpStore %202 %228 
                                       f32_4 %229 = OpLoad %210 
                                       f32_4 %230 = OpLoad %210 
                                       f32_4 %231 = OpFMul %229 %230 
                                       f32_4 %232 = OpLoad %97 
                                       f32_4 %233 = OpFAdd %231 %232 
                                                      OpStore %97 %233 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpFMul %234 %235 
                                       f32_4 %237 = OpLoad %97 
                                       f32_4 %238 = OpFAdd %236 %237 
                                                      OpStore %97 %238 
                                       f32_4 %239 = OpLoad %9 
                                       f32_4 %240 = OpLoad %84 
                                       f32_4 %241 = OpVectorShuffle %240 %240 2 2 2 2 
                                       f32_4 %242 = OpFMul %239 %241 
                                       f32_4 %243 = OpLoad %202 
                                       f32_4 %244 = OpFAdd %242 %243 
                                                      OpStore %9 %244 
                                       f32_4 %245 = OpLoad %97 
                                       f32_4 %248 = OpExtInst %1 40 %245 %247 
                                                      OpStore %84 %248 
                                       f32_4 %249 = OpLoad %84 
                                       f32_4 %250 = OpExtInst %1 32 %249 
                                                      OpStore %97 %250 
                                       f32_4 %251 = OpLoad %84 
                              Uniform f32_4* %252 = OpAccessChain %19 %86 
                                       f32_4 %253 = OpLoad %252 
                                       f32_4 %254 = OpFMul %251 %253 
                                       f32_4 %256 = OpFAdd %254 %255 
                                                      OpStore %84 %256 
                                       f32_4 %257 = OpLoad %84 
                                       f32_4 %258 = OpFDiv %255 %257 
                                                      OpStore %84 %258 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpLoad %97 
                                       f32_4 %261 = OpFMul %259 %260 
                                                      OpStore %9 %261 
                                       f32_4 %262 = OpLoad %9 
                                       f32_4 %265 = OpExtInst %1 40 %262 %264 
                                                      OpStore %9 %265 
                                       f32_4 %266 = OpLoad %84 
                                       f32_4 %267 = OpLoad %9 
                                       f32_4 %268 = OpFMul %266 %267 
                                                      OpStore %9 %268 
                                       f32_4 %269 = OpLoad %9 
                                       f32_3 %270 = OpVectorShuffle %269 %269 1 1 1 
                              Uniform f32_4* %272 = OpAccessChain %19 %271 %63 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %275 = OpFMul %270 %274 
                                       f32_4 %276 = OpLoad %84 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 6 3 
                                                      OpStore %84 %277 
                              Uniform f32_4* %278 = OpAccessChain %19 %271 %68 
                                       f32_4 %279 = OpLoad %278 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_4 %281 = OpLoad %9 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 0 0 
                                       f32_3 %283 = OpFMul %280 %282 
                                       f32_4 %284 = OpLoad %84 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpFAdd %283 %285 
                                       f32_4 %287 = OpLoad %84 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
                                                      OpStore %84 %288 
                              Uniform f32_4* %289 = OpAccessChain %19 %271 %76 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_4 %292 = OpLoad %9 
                                       f32_3 %293 = OpVectorShuffle %292 %292 2 2 2 
                                       f32_3 %294 = OpFMul %291 %293 
                                       f32_4 %295 = OpLoad %84 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpFAdd %294 %296 
                                       f32_4 %298 = OpLoad %9 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %9 %299 
                              Uniform f32_4* %300 = OpAccessChain %19 %271 %86 
                                       f32_4 %301 = OpLoad %300 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_4 %303 = OpLoad %9 
                                       f32_3 %304 = OpVectorShuffle %303 %303 3 3 3 
                                       f32_3 %305 = OpFMul %302 %304 
                                       f32_4 %306 = OpLoad %9 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFAdd %305 %307 
                                       f32_4 %309 = OpLoad %9 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %9 %310 
                                       f32_4 %312 = OpLoad %9 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                                      OpStore %311 %313 
                                                      OpStore %314 %264 
                                 Output f32* %316 = OpAccessChain %121 %68 %50 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFNegate %317 
                                 Output f32* %319 = OpAccessChain %121 %68 %50 
                                                      OpStore %319 %318 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 650
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %205 %454 %523 %624 %645 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 RelaxedPrecision 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 RelaxedPrecision 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpMemberDecorate %16 14 Offset 16 
                                                      OpMemberDecorate %16 15 Offset 16 
                                                      OpMemberDecorate %16 16 Offset 16 
                                                      OpMemberDecorate %16 17 RelaxedPrecision 
                                                      OpMemberDecorate %16 17 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %205 Location 205 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %321 DescriptorSet 321 
                                                      OpDecorate %321 Binding 321 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %454 Location 454 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %512 SpecId 512 
                                                      OpDecorate %523 Location 523 
                                                      OpDecorate %604 DescriptorSet 604 
                                                      OpDecorate %604 Binding 604 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %624 Location 624 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %639 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %645 Location 645 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeStruct %7 %7 %12 %13 %7 %14 %15 %15 %7 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %18 = OpVariable Uniform 
                                              %19 = OpTypeInt 32 1 
                                          i32 %20 = OpConstant 2 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypeVector %6 2 
                                              %23 = OpTypePointer Uniform %7 
                                          i32 %27 = OpConstant 1 
                                          i32 %34 = OpConstant 0 
                                              %71 = OpTypePointer Private %22 
                               Private f32_2* %72 = OpVariable Private 
                                          u32 %73 = OpConstant 1 
                                              %74 = OpTypePointer Uniform %6 
                                          i32 %77 = OpConstant 9 
                                          u32 %81 = OpConstant 0 
                                              %82 = OpTypePointer Private %6 
                                Private f32* %103 = OpVariable Private 
                                         f32 %106 = OpConstant 3.674022E-40 
                              Private f32_4* %108 = OpVariable Private 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %112 = OpConstant 3.674022E-40 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %114 = OpConstant 3.674022E-40 
                                       f32_4 %115 = OpConstantComposite %111 %112 %113 %114 
                                         f32 %120 = OpConstant 3.674022E-40 
                                       f32_4 %121 = OpConstantComposite %120 %120 %120 %120 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_2 %128 = OpConstantComposite %127 %127 
                              Private f32_2* %130 = OpVariable Private 
                                       f32_2 %133 = OpConstantComposite %114 %112 
                                       f32_2 %138 = OpConstantComposite %120 %120 
                                             %144 = OpTypeBool 
                                             %145 = OpTypeVector %144 2 
                                             %146 = OpTypePointer Private %145 
                             Private bool_2* %147 = OpVariable Private 
                                         i32 %150 = OpConstant 11 
                                         i32 %153 = OpConstant 13 
                                             %161 = OpTypeVector %144 4 
                                             %164 = OpTypeVector %144 3 
                                             %165 = OpTypePointer Private %164 
                             Private bool_3* %166 = OpVariable Private 
                                         i32 %167 = OpConstant 14 
                                         i32 %170 = OpConstant 16 
                                         i32 %173 = OpConstant 15 
                                         f32 %179 = OpConstant 3.674022E-40 
                                         f32 %180 = OpConstant 3.674022E-40 
                                       f32_4 %181 = OpConstantComposite %179 %179 %179 %180 
                                         f32 %200 = OpConstant 3.674022E-40 
                                         f32 %202 = OpConstant 3.674022E-40 
                                             %204 = OpTypePointer Input %22 
                                Input f32_2* %205 = OpVariable Input 
                                             %206 = OpTypePointer Input %6 
                                Private f32* %213 = OpVariable Private 
                                         f32 %226 = OpConstant 3.674022E-40 
                                         f32 %230 = OpConstant 3.674022E-40 
                                         i32 %254 = OpConstant 10 
                                             %262 = OpTypePointer Private %144 
                               Private bool* %263 = OpVariable Private 
                                             %274 = OpTypePointer Function %6 
                              Private f32_4* %317 = OpVariable Private 
                                             %318 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %319 = OpTypeSampledImage %318 
                                             %320 = OpTypePointer UniformConstant %319 
 UniformConstant read_only Texture2DSampled* %321 = OpVariable UniformConstant 
                              Private f32_4* %326 = OpVariable Private 
                                         i32 %328 = OpConstant 12 
                              Private f32_4* %365 = OpVariable Private 
                                Private f32* %398 = OpVariable Private 
                                         u32 %399 = OpConstant 2 
                                         u32 %402 = OpConstant 3 
                                         f32 %411 = OpConstant 3.674022E-40 
                              Private f32_4* %413 = OpVariable Private 
                                             %426 = OpTypePointer Function %22 
                              Private f32_4* %451 = OpVariable Private 
                                             %453 = OpTypePointer Input %7 
                                Input f32_4* %454 = OpVariable Input 
                                         f32 %462 = OpConstant 3.674022E-40 
                                         i32 %471 = OpConstant -1 
                                         i32 %482 = OpConstant 17 
                                         i32 %499 = OpConstant 4 
                                        bool %505 = OpConstantFalse 
                                        bool %512 = OpSpecConstantFalse 
                                             %520 = OpTypePointer Private %15 
                              Private f32_3* %521 = OpVariable Private 
                                             %522 = OpTypePointer Input %15 
                                Input f32_3* %523 = OpVariable Input 
                                         i32 %526 = OpConstant 5 
                                             %552 = OpTypePointer Function %15 
                                         i32 %566 = OpConstant 7 
                                             %567 = OpTypePointer Uniform %15 
                                         i32 %576 = OpConstant 6 
                                         f32 %584 = OpConstant 3.674022E-40 
                                         f32 %586 = OpConstant 3.674022E-40 
                                         f32 %591 = OpConstant 3.674022E-40 
                                             %601 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %602 = OpTypeSampledImage %601 
                                             %603 = OpTypePointer UniformConstant %602 
 UniformConstant read_only Texture3DSampled* %604 = OpVariable UniformConstant 
                              Private f32_4* %609 = OpVariable Private 
                                Input f32_3* %624 = OpVariable Input 
                              Private f32_3* %629 = OpVariable Private 
                                         i32 %632 = OpConstant 8 
                                             %644 = OpTypePointer Output %7 
                               Output f32_4* %645 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %275 = OpVariable Function 
                               Function f32* %291 = OpVariable Function 
                               Function f32* %302 = OpVariable Function 
                               Function f32* %414 = OpVariable Function 
                             Function f32_2* %427 = OpVariable Function 
                               Function f32* %440 = OpVariable Function 
                             Function f32_3* %553 = OpVariable Function 
                               Uniform f32_4* %24 = OpAccessChain %18 %20 %21 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 1 1 
                               Uniform f32_4* %28 = OpAccessChain %18 %21 %27 
                                        f32_4 %29 = OpLoad %28 
                                        f32_2 %30 = OpVectorShuffle %29 %29 0 1 
                                        f32_2 %31 = OpFMul %26 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 2 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %35 = OpAccessChain %18 %21 %34 
                                        f32_4 %36 = OpLoad %35 
                                        f32_2 %37 = OpVectorShuffle %36 %36 0 1 
                               Uniform f32_4* %38 = OpAccessChain %18 %20 %21 
                                        f32_4 %39 = OpLoad %38 
                                        f32_2 %40 = OpVectorShuffle %39 %39 0 0 
                                        f32_2 %41 = OpFMul %37 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_2 %44 = OpFAdd %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpVectorShuffle %45 %44 4 5 2 3 
                                                      OpStore %9 %46 
                               Uniform f32_4* %47 = OpAccessChain %18 %21 %20 
                                        f32_4 %48 = OpLoad %47 
                                        f32_2 %49 = OpVectorShuffle %48 %48 0 1 
                               Uniform f32_4* %50 = OpAccessChain %18 %20 %21 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 2 
                                        f32_2 %53 = OpFMul %49 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                                        f32_2 %56 = OpFAdd %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %56 4 5 2 3 
                                                      OpStore %9 %58 
                               Uniform f32_4* %59 = OpAccessChain %18 %21 %21 
                                        f32_4 %60 = OpLoad %59 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                               Uniform f32_4* %62 = OpAccessChain %18 %20 %21 
                                        f32_4 %63 = OpLoad %62 
                                        f32_2 %64 = OpVectorShuffle %63 %63 3 3 
                                        f32_2 %65 = OpFMul %61 %64 
                                        f32_4 %66 = OpLoad %9 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_2 %68 = OpFAdd %65 %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpVectorShuffle %69 %68 4 5 2 3 
                                                      OpStore %9 %70 
                                 Uniform f32* %75 = OpAccessChain %18 %34 %73 
                                          f32 %76 = OpLoad %75 
                                 Uniform f32* %78 = OpAccessChain %18 %77 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFDiv %76 %79 
                                 Private f32* %83 = OpAccessChain %72 %81 
                                                      OpStore %83 %80 
                                 Private f32* %84 = OpAccessChain %72 %81 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpExtInst %1 8 %85 
                                 Private f32* %87 = OpAccessChain %72 %81 
                                                      OpStore %87 %86 
                                 Private f32* %88 = OpAccessChain %72 %81 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %90 = OpAccessChain %18 %77 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %89 %91 
                                 Private f32* %93 = OpAccessChain %9 %81 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %81 
                                                      OpStore %96 %95 
                                 Private f32* %97 = OpAccessChain %9 %73 
                                          f32 %98 = OpLoad %97 
                                 Private f32* %99 = OpAccessChain %9 %81 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFAdd %98 %100 
                                Private f32* %102 = OpAccessChain %9 %81 
                                                      OpStore %102 %101 
                                Private f32* %104 = OpAccessChain %9 %81 
                                         f32 %105 = OpLoad %104 
                                         f32 %107 = OpFAdd %105 %106 
                                                      OpStore %103 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_4 %110 = OpVectorShuffle %109 %109 0 0 0 0 
                                       f32_4 %116 = OpFMul %110 %115 
                                                      OpStore %108 %116 
                                       f32_4 %117 = OpLoad %108 
                                       f32_4 %118 = OpExtInst %1 13 %117 
                                                      OpStore %108 %118 
                                       f32_4 %119 = OpLoad %108 
                                       f32_4 %122 = OpFMul %119 %121 
                                                      OpStore %108 %122 
                                       f32_4 %123 = OpLoad %108 
                                       f32_4 %124 = OpExtInst %1 10 %123 
                                                      OpStore %108 %124 
                                       f32_4 %125 = OpLoad %108 
                                       f32_2 %126 = OpVectorShuffle %125 %125 2 3 
                                       f32_2 %129 = OpFAdd %126 %128 
                                                      OpStore %72 %129 
                                         f32 %131 = OpLoad %103 
                                       f32_2 %132 = OpCompositeConstruct %131 %131 
                                       f32_2 %134 = OpFMul %132 %133 
                                                      OpStore %130 %134 
                                       f32_2 %135 = OpLoad %130 
                                       f32_2 %136 = OpExtInst %1 13 %135 
                                                      OpStore %130 %136 
                                       f32_2 %137 = OpLoad %130 
                                       f32_2 %139 = OpFMul %137 %138 
                                                      OpStore %130 %139 
                                       f32_2 %140 = OpLoad %130 
                                       f32_2 %141 = OpExtInst %1 10 %140 
                                                      OpStore %130 %141 
                                       f32_2 %142 = OpLoad %130 
                                       f32_2 %143 = OpFAdd %142 %128 
                                                      OpStore %130 %143 
                                       f32_4 %148 = OpLoad %108 
                                       f32_4 %149 = OpVectorShuffle %148 %148 0 1 0 0 
                                Uniform f32* %151 = OpAccessChain %18 %150 
                                         f32 %152 = OpLoad %151 
                                Uniform f32* %154 = OpAccessChain %18 %153 
                                         f32 %155 = OpLoad %154 
                                Uniform f32* %156 = OpAccessChain %18 %150 
                                         f32 %157 = OpLoad %156 
                                Uniform f32* %158 = OpAccessChain %18 %150 
                                         f32 %159 = OpLoad %158 
                                       f32_4 %160 = OpCompositeConstruct %152 %155 %157 %159 
                                      bool_4 %162 = OpFOrdLessThan %149 %160 
                                      bool_2 %163 = OpVectorShuffle %162 %162 0 1 
                                                      OpStore %147 %163 
                                Uniform f32* %168 = OpAccessChain %18 %167 
                                         f32 %169 = OpLoad %168 
                                Uniform f32* %171 = OpAccessChain %18 %170 
                                         f32 %172 = OpLoad %171 
                                Uniform f32* %174 = OpAccessChain %18 %173 
                                         f32 %175 = OpLoad %174 
                                Uniform f32* %176 = OpAccessChain %18 %167 
                                         f32 %177 = OpLoad %176 
                                       f32_4 %178 = OpCompositeConstruct %169 %172 %175 %177 
                                      bool_4 %182 = OpFOrdEqual %178 %181 
                                      bool_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                                      OpStore %166 %183 
                                      bool_2 %184 = OpLoad %147 
                                        bool %185 = OpCompositeExtract %184 0 
                                      bool_3 %186 = OpLoad %166 
                                        bool %187 = OpCompositeExtract %186 0 
                                        bool %188 = OpLogicalAnd %185 %187 
                                      bool_2 %189 = OpLoad %147 
                                      bool_2 %190 = OpCompositeInsert %188 %189 0 
                                                      OpStore %147 %190 
                                      bool_2 %191 = OpLoad %147 
                                        bool %192 = OpCompositeExtract %191 1 
                                      bool_3 %193 = OpLoad %166 
                                        bool %194 = OpCompositeExtract %193 2 
                                        bool %195 = OpLogicalAnd %192 %194 
                                      bool_2 %196 = OpLoad %147 
                                      bool_2 %197 = OpCompositeInsert %195 %196 1 
                                                      OpStore %147 %197 
                                Private f32* %198 = OpAccessChain %130 %73 
                                         f32 %199 = OpLoad %198 
                                         f32 %201 = OpFMul %199 %200 
                                         f32 %203 = OpFAdd %201 %202 
                                                      OpStore %103 %203 
                                  Input f32* %207 = OpAccessChain %205 %73 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpLoad %103 
                                         f32 %210 = OpFDiv %208 %209 
                                                      OpStore %103 %210 
                                         f32 %211 = OpLoad %103 
                                         f32 %212 = OpExtInst %1 8 %211 
                                                      OpStore %103 %212 
                                Private f32* %214 = OpAccessChain %9 %81 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFNegate %215 
                                         f32 %217 = OpLoad %103 
                                         f32 %218 = OpFAdd %216 %217 
                                                      OpStore %213 %218 
                                Private f32* %219 = OpAccessChain %9 %81 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpLoad %103 
                                         f32 %222 = OpFAdd %220 %221 
                                Private f32* %223 = OpAccessChain %9 %81 
                                                      OpStore %223 %222 
                                Private f32* %224 = OpAccessChain %9 %81 
                                         f32 %225 = OpLoad %224 
                                         f32 %227 = OpFMul %225 %226 
                                Private f32* %228 = OpAccessChain %9 %81 
                                                      OpStore %228 %227 
                                         f32 %229 = OpLoad %213 
                                         f32 %231 = OpFMul %229 %230 
                                Private f32* %232 = OpAccessChain %9 %81 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                Private f32* %235 = OpAccessChain %9 %81 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %9 %81 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 13 %237 
                                Private f32* %239 = OpAccessChain %9 %81 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %9 %81 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %241 %120 
                                Private f32* %243 = OpAccessChain %9 %81 
                                                      OpStore %243 %242 
                                Private f32* %244 = OpAccessChain %9 %81 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpExtInst %1 10 %245 
                                Private f32* %247 = OpAccessChain %9 %81 
                                                      OpStore %247 %246 
                                Private f32* %248 = OpAccessChain %9 %81 
                                         f32 %249 = OpLoad %248 
                                         f32 %250 = OpFAdd %249 %127 
                                Private f32* %251 = OpAccessChain %9 %81 
                                                      OpStore %251 %250 
                                Private f32* %252 = OpAccessChain %9 %81 
                                         f32 %253 = OpLoad %252 
                                Uniform f32* %255 = OpAccessChain %18 %254 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFMul %253 %256 
                                  Input f32* %258 = OpAccessChain %205 %81 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFAdd %257 %259 
                                Private f32* %261 = OpAccessChain %9 %81 
                                                      OpStore %261 %260 
                                Private f32* %264 = OpAccessChain %9 %81 
                                         f32 %265 = OpLoad %264 
                                Private f32* %266 = OpAccessChain %9 %81 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFNegate %267 
                                        bool %269 = OpFOrdGreaterThanEqual %265 %268 
                                                      OpStore %263 %269 
                                Private f32* %270 = OpAccessChain %9 %81 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpExtInst %1 4 %271 
                                         f32 %273 = OpExtInst %1 10 %272 
                                                      OpStore %213 %273 
                                        bool %276 = OpLoad %263 
                                                      OpSelectionMerge %278 None 
                                                      OpBranchConditional %276 %277 %280 
                                             %277 = OpLabel 
                                         f32 %279 = OpLoad %213 
                                                      OpStore %275 %279 
                                                      OpBranch %278 
                                             %280 = OpLabel 
                                         f32 %281 = OpLoad %213 
                                         f32 %282 = OpFNegate %281 
                                                      OpStore %275 %282 
                                                      OpBranch %278 
                                             %278 = OpLabel 
                                         f32 %283 = OpLoad %275 
                                                      OpStore %103 %283 
                                Private f32* %284 = OpAccessChain %9 %81 
                                         f32 %285 = OpLoad %284 
                                Private f32* %286 = OpAccessChain %9 %81 
                                                      OpStore %286 %285 
                                Private f32* %287 = OpAccessChain %9 %81 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 43 %288 %180 %179 
                                Private f32* %290 = OpAccessChain %9 %81 
                                                      OpStore %290 %289 
                                      bool_3 %292 = OpLoad %166 
                                        bool %293 = OpCompositeExtract %292 1 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %297 
                                             %294 = OpLabel 
                                         f32 %296 = OpLoad %103 
                                                      OpStore %291 %296 
                                                      OpBranch %295 
                                             %297 = OpLabel 
                                Private f32* %298 = OpAccessChain %9 %81 
                                         f32 %299 = OpLoad %298 
                                                      OpStore %291 %299 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                         f32 %300 = OpLoad %291 
                                Private f32* %301 = OpAccessChain %9 %81 
                                                      OpStore %301 %300 
                                      bool_2 %303 = OpLoad %147 
                                        bool %304 = OpCompositeExtract %303 0 
                                                      OpSelectionMerge %306 None 
                                                      OpBranchConditional %304 %305 %309 
                                             %305 = OpLabel 
                                Private f32* %307 = OpAccessChain %9 %81 
                                         f32 %308 = OpLoad %307 
                                                      OpStore %302 %308 
                                                      OpBranch %306 
                                             %309 = OpLabel 
                                  Input f32* %310 = OpAccessChain %205 %81 
                                         f32 %311 = OpLoad %310 
                                                      OpStore %302 %311 
                                                      OpBranch %306 
                                             %306 = OpLabel 
                                         f32 %312 = OpLoad %302 
                                Private f32* %313 = OpAccessChain %9 %81 
                                                      OpStore %313 %312 
                                  Input f32* %314 = OpAccessChain %205 %73 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %9 %73 
                                                      OpStore %316 %315 
                  read_only Texture2DSampled %322 = OpLoad %321 
                                       f32_4 %323 = OpLoad %9 
                                       f32_2 %324 = OpVectorShuffle %323 %323 0 1 
                                       f32_4 %325 = OpImageSampleImplicitLod %322 %324 
                                                      OpStore %317 %325 
                                       f32_2 %327 = OpLoad %72 
                                Uniform f32* %329 = OpAccessChain %18 %328 
                                         f32 %330 = OpLoad %329 
                                Uniform f32* %331 = OpAccessChain %18 %328 
                                         f32 %332 = OpLoad %331 
                                       f32_2 %333 = OpCompositeConstruct %330 %332 
                                         f32 %334 = OpCompositeExtract %333 0 
                                         f32 %335 = OpCompositeExtract %333 1 
                                       f32_2 %336 = OpCompositeConstruct %334 %335 
                                       f32_2 %337 = OpFMul %327 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_2 %339 = OpVectorShuffle %338 %338 0 0 
                                       f32_2 %340 = OpFAdd %337 %339 
                                       f32_4 %341 = OpLoad %326 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 2 3 
                                                      OpStore %326 %342 
                                       f32_2 %343 = OpLoad %72 
                                Uniform f32* %344 = OpAccessChain %18 %328 
                                         f32 %345 = OpLoad %344 
                                Uniform f32* %346 = OpAccessChain %18 %328 
                                         f32 %347 = OpLoad %346 
                                       f32_2 %348 = OpCompositeConstruct %345 %347 
                                         f32 %349 = OpCompositeExtract %348 0 
                                         f32 %350 = OpCompositeExtract %348 1 
                                       f32_2 %351 = OpCompositeConstruct %349 %350 
                                       f32_2 %352 = OpFMul %343 %351 
                                       f32_2 %353 = OpLoad %205 
                                       f32_2 %354 = OpVectorShuffle %353 %353 1 1 
                                       f32_2 %355 = OpFAdd %352 %354 
                                       f32_4 %356 = OpLoad %326 
                                       f32_4 %357 = OpVectorShuffle %356 %355 0 1 4 5 
                                                      OpStore %326 %357 
                  read_only Texture2DSampled %358 = OpLoad %321 
                                       f32_4 %359 = OpLoad %326 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpImageSampleImplicitLod %358 %360 
                                       f32_2 %362 = OpVectorShuffle %361 %361 0 3 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %362 0 4 5 3 
                                                      OpStore %9 %364 
                  read_only Texture2DSampled %366 = OpLoad %321 
                                       f32_4 %367 = OpLoad %326 
                                       f32_2 %368 = OpVectorShuffle %367 %367 1 3 
                                       f32_4 %369 = OpImageSampleImplicitLod %366 %368 
                                       f32_2 %370 = OpVectorShuffle %369 %369 1 3 
                                       f32_4 %371 = OpLoad %365 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 1 2 5 
                                                      OpStore %365 %372 
                                Private f32* %373 = OpAccessChain %130 %81 
                                         f32 %374 = OpLoad %373 
                                Uniform f32* %375 = OpAccessChain %18 %328 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                Private f32* %378 = OpAccessChain %9 %81 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFAdd %377 %379 
                                Private f32* %381 = OpAccessChain %326 %81 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %130 %81 
                                         f32 %383 = OpLoad %382 
                                Uniform f32* %384 = OpAccessChain %18 %328 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFMul %383 %385 
                                  Input f32* %387 = OpAccessChain %205 %73 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFAdd %386 %388 
                                Private f32* %390 = OpAccessChain %326 %73 
                                                      OpStore %390 %389 
                  read_only Texture2DSampled %391 = OpLoad %321 
                                       f32_4 %392 = OpLoad %326 
                                       f32_2 %393 = OpVectorShuffle %392 %392 0 1 
                                       f32_4 %394 = OpImageSampleImplicitLod %391 %393 
                                       f32_2 %395 = OpVectorShuffle %394 %394 2 3 
                                       f32_4 %396 = OpLoad %9 
                                       f32_4 %397 = OpVectorShuffle %396 %395 4 1 2 5 
                                                      OpStore %9 %397 
                                Private f32* %400 = OpAccessChain %9 %399 
                                         f32 %401 = OpLoad %400 
                                Private f32* %403 = OpAccessChain %365 %402 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %401 %404 
                                                      OpStore %398 %405 
                                Private f32* %406 = OpAccessChain %9 %402 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpLoad %398 
                                         f32 %409 = OpFAdd %407 %408 
                                                      OpStore %398 %409 
                                         f32 %410 = OpLoad %398 
                                         f32 %412 = OpFMul %410 %411 
                                                      OpStore %398 %412 
                                      bool_2 %415 = OpLoad %147 
                                        bool %416 = OpCompositeExtract %415 1 
                                                      OpSelectionMerge %418 None 
                                                      OpBranchConditional %416 %417 %421 
                                             %417 = OpLabel 
                                Private f32* %419 = OpAccessChain %365 %81 
                                         f32 %420 = OpLoad %419 
                                                      OpStore %414 %420 
                                                      OpBranch %418 
                                             %421 = OpLabel 
                                Private f32* %422 = OpAccessChain %317 %73 
                                         f32 %423 = OpLoad %422 
                                                      OpStore %414 %423 
                                                      OpBranch %418 
                                             %418 = OpLabel 
                                         f32 %424 = OpLoad %414 
                                Private f32* %425 = OpAccessChain %413 %73 
                                                      OpStore %425 %424 
                                      bool_2 %428 = OpLoad %147 
                                        bool %429 = OpCompositeExtract %428 1 
                                                      OpSelectionMerge %431 None 
                                                      OpBranchConditional %429 %430 %434 
                                             %430 = OpLabel 
                                       f32_4 %432 = OpLoad %9 
                                       f32_2 %433 = OpVectorShuffle %432 %432 1 0 
                                                      OpStore %427 %433 
                                                      OpBranch %431 
                                             %434 = OpLabel 
                                       f32_4 %435 = OpLoad %317 
                                       f32_2 %436 = OpVectorShuffle %435 %435 0 2 
                                                      OpStore %427 %436 
                                                      OpBranch %431 
                                             %431 = OpLabel 
                                       f32_2 %437 = OpLoad %427 
                                       f32_4 %438 = OpLoad %413 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 1 5 3 
                                                      OpStore %413 %439 
                                      bool_2 %441 = OpLoad %147 
                                        bool %442 = OpCompositeExtract %441 1 
                                                      OpSelectionMerge %444 None 
                                                      OpBranchConditional %442 %443 %446 
                                             %443 = OpLabel 
                                         f32 %445 = OpLoad %398 
                                                      OpStore %440 %445 
                                                      OpBranch %444 
                                             %446 = OpLabel 
                                Private f32* %447 = OpAccessChain %317 %402 
                                         f32 %448 = OpLoad %447 
                                                      OpStore %440 %448 
                                                      OpBranch %444 
                                             %444 = OpLabel 
                                         f32 %449 = OpLoad %440 
                                Private f32* %450 = OpAccessChain %413 %402 
                                                      OpStore %450 %449 
                                       f32_4 %452 = OpLoad %413 
                                       f32_4 %455 = OpLoad %454 
                                       f32_4 %456 = OpFMul %452 %455 
                                                      OpStore %451 %456 
                                Private f32* %457 = OpAccessChain %413 %402 
                                         f32 %458 = OpLoad %457 
                                  Input f32* %459 = OpAccessChain %454 %402 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpFMul %458 %460 
                                         f32 %463 = OpFAdd %461 %462 
                                                      OpStore %398 %463 
                                         f32 %464 = OpLoad %398 
                                        bool %465 = OpFOrdLessThan %464 %180 
                                      bool_2 %466 = OpLoad %147 
                                      bool_2 %467 = OpCompositeInsert %465 %466 0 
                                                      OpStore %147 %467 
                                      bool_2 %468 = OpLoad %147 
                                        bool %469 = OpCompositeExtract %468 0 
                                         i32 %470 = OpSelect %469 %27 %34 
                                         i32 %472 = OpIMul %470 %471 
                                        bool %473 = OpINotEqual %472 %34 
                                                      OpSelectionMerge %475 None 
                                                      OpBranchConditional %473 %474 %475 
                                             %474 = OpLabel 
                                                      OpKill
                                             %475 = OpLabel 
                                Private f32* %477 = OpAccessChain %413 %402 
                                         f32 %478 = OpLoad %477 
                                  Input f32* %479 = OpAccessChain %454 %402 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFMul %478 %480 
                                Uniform f32* %483 = OpAccessChain %18 %482 
                                         f32 %484 = OpLoad %483 
                                         f32 %485 = OpFNegate %484 
                                         f32 %486 = OpFAdd %481 %485 
                                                      OpStore %398 %486 
                                         f32 %487 = OpLoad %398 
                                        bool %488 = OpFOrdLessThan %487 %180 
                                      bool_2 %489 = OpLoad %147 
                                      bool_2 %490 = OpCompositeInsert %488 %489 0 
                                                      OpStore %147 %490 
                                      bool_2 %491 = OpLoad %147 
                                        bool %492 = OpCompositeExtract %491 0 
                                         i32 %493 = OpSelect %492 %27 %34 
                                         i32 %494 = OpIMul %493 %471 
                                        bool %495 = OpINotEqual %494 %34 
                                                      OpSelectionMerge %497 None 
                                                      OpBranchConditional %495 %496 %497 
                                             %496 = OpLabel 
                                                      OpKill
                                             %497 = OpLabel 
                                Uniform f32* %500 = OpAccessChain %18 %499 %81 
                                         f32 %501 = OpLoad %500 
                                        bool %502 = OpFOrdEqual %501 %179 
                                      bool_2 %503 = OpLoad %147 
                                      bool_2 %504 = OpCompositeInsert %502 %503 0 
                                                      OpStore %147 %504 
                                                      OpSelectionMerge %507 None 
                                                      OpBranchConditional %505 %506 %507 
                                             %506 = OpLabel 
                                      bool_2 %508 = OpLoad %147 
                                        bool %509 = OpCompositeExtract %508 0 
                                                      OpSelectionMerge %511 None 
                                                      OpBranchConditional %509 %510 %511 
                                             %510 = OpLabel 
                                                      OpBranch %511 
                                             %511 = OpLabel 
                                                      OpBranch %507 
                                             %507 = OpLabel 
                                                      OpSelectionMerge %514 None 
                                                      OpBranchConditional %512 %513 %611 
                                             %513 = OpLabel 
                                Uniform f32* %515 = OpAccessChain %18 %499 %73 
                                         f32 %516 = OpLoad %515 
                                        bool %517 = OpFOrdEqual %516 %179 
                                      bool_2 %518 = OpLoad %147 
                                      bool_2 %519 = OpCompositeInsert %517 %518 0 
                                                      OpStore %147 %519 
                                       f32_3 %524 = OpLoad %523 
                                       f32_3 %525 = OpVectorShuffle %524 %524 1 1 1 
                              Uniform f32_4* %527 = OpAccessChain %18 %526 %27 
                                       f32_4 %528 = OpLoad %527 
                                       f32_3 %529 = OpVectorShuffle %528 %528 0 1 2 
                                       f32_3 %530 = OpFMul %525 %529 
                                                      OpStore %521 %530 
                              Uniform f32_4* %531 = OpAccessChain %18 %526 %34 
                                       f32_4 %532 = OpLoad %531 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpLoad %523 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 0 0 
                                       f32_3 %536 = OpFMul %533 %535 
                                       f32_3 %537 = OpLoad %521 
                                       f32_3 %538 = OpFAdd %536 %537 
                                                      OpStore %521 %538 
                              Uniform f32_4* %539 = OpAccessChain %18 %526 %20 
                                       f32_4 %540 = OpLoad %539 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                       f32_3 %542 = OpLoad %523 
                                       f32_3 %543 = OpVectorShuffle %542 %542 2 2 2 
                                       f32_3 %544 = OpFMul %541 %543 
                                       f32_3 %545 = OpLoad %521 
                                       f32_3 %546 = OpFAdd %544 %545 
                                                      OpStore %521 %546 
                                       f32_3 %547 = OpLoad %521 
                              Uniform f32_4* %548 = OpAccessChain %18 %526 %21 
                                       f32_4 %549 = OpLoad %548 
                                       f32_3 %550 = OpVectorShuffle %549 %549 0 1 2 
                                       f32_3 %551 = OpFAdd %547 %550 
                                                      OpStore %521 %551 
                                      bool_2 %554 = OpLoad %147 
                                        bool %555 = OpCompositeExtract %554 0 
                                                      OpSelectionMerge %557 None 
                                                      OpBranchConditional %555 %556 %559 
                                             %556 = OpLabel 
                                       f32_3 %558 = OpLoad %521 
                                                      OpStore %553 %558 
                                                      OpBranch %557 
                                             %559 = OpLabel 
                                       f32_3 %560 = OpLoad %523 
                                                      OpStore %553 %560 
                                                      OpBranch %557 
                                             %557 = OpLabel 
                                       f32_3 %561 = OpLoad %553 
                                       f32_4 %562 = OpLoad %108 
                                       f32_4 %563 = OpVectorShuffle %562 %561 4 5 6 3 
                                                      OpStore %108 %563 
                                       f32_4 %564 = OpLoad %108 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                              Uniform f32_3* %568 = OpAccessChain %18 %566 
                                       f32_3 %569 = OpLoad %568 
                                       f32_3 %570 = OpFNegate %569 
                                       f32_3 %571 = OpFAdd %565 %570 
                                       f32_4 %572 = OpLoad %108 
                                       f32_4 %573 = OpVectorShuffle %572 %571 4 5 6 3 
                                                      OpStore %108 %573 
                                       f32_4 %574 = OpLoad %108 
                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
                              Uniform f32_3* %577 = OpAccessChain %18 %576 
                                       f32_3 %578 = OpLoad %577 
                                       f32_3 %579 = OpFMul %575 %578 
                                       f32_4 %580 = OpLoad %108 
                                       f32_4 %581 = OpVectorShuffle %580 %579 0 4 5 6 
                                                      OpStore %108 %581 
                                Private f32* %582 = OpAccessChain %108 %73 
                                         f32 %583 = OpLoad %582 
                                         f32 %585 = OpFMul %583 %584 
                                         f32 %587 = OpFAdd %585 %586 
                                Private f32* %588 = OpAccessChain %521 %81 
                                                      OpStore %588 %587 
                                Uniform f32* %589 = OpAccessChain %18 %499 %399 
                                         f32 %590 = OpLoad %589 
                                         f32 %592 = OpFMul %590 %591 
                                         f32 %593 = OpFAdd %592 %586 
                                Private f32* %594 = OpAccessChain %317 %81 
                                                      OpStore %594 %593 
                                Private f32* %595 = OpAccessChain %521 %81 
                                         f32 %596 = OpLoad %595 
                                Private f32* %597 = OpAccessChain %317 %81 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpExtInst %1 40 %596 %598 
                                Private f32* %600 = OpAccessChain %108 %81 
                                                      OpStore %600 %599 
                  read_only Texture3DSampled %605 = OpLoad %604 
                                       f32_4 %606 = OpLoad %108 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 2 3 
                                       f32_4 %608 = OpImageSampleImplicitLod %605 %607 
                                                      OpStore %108 %608 
                                       f32_4 %610 = OpLoad %108 
                                                      OpStore %609 %610 
                                                      OpBranch %514 
                                             %611 = OpLabel 
                                Private f32* %612 = OpAccessChain %609 %81 
                                                      OpStore %612 %179 
                                Private f32* %613 = OpAccessChain %609 %73 
                                                      OpStore %613 %179 
                                Private f32* %614 = OpAccessChain %609 %399 
                                                      OpStore %614 %179 
                                Private f32* %615 = OpAccessChain %609 %402 
                                                      OpStore %615 %179 
                                                      OpBranch %514 
                                             %514 = OpLabel 
                                       f32_4 %616 = OpLoad %609 
                              Uniform f32_4* %617 = OpAccessChain %18 %27 
                                       f32_4 %618 = OpLoad %617 
                                         f32 %619 = OpDot %616 %618 
                                                      OpStore %398 %619 
                                         f32 %620 = OpLoad %398 
                                         f32 %621 = OpExtInst %1 43 %620 %180 %179 
                                                      OpStore %398 %621 
                                       f32_4 %622 = OpLoad %451 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                                       f32_3 %625 = OpLoad %624 
                                       f32_3 %626 = OpFMul %623 %625 
                                       f32_4 %627 = OpLoad %609 
                                       f32_4 %628 = OpVectorShuffle %627 %626 4 5 6 3 
                                                      OpStore %609 %628 
                                       f32_4 %630 = OpLoad %451 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
                              Uniform f32_4* %633 = OpAccessChain %18 %632 
                                       f32_4 %634 = OpLoad %633 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                       f32_3 %636 = OpFMul %631 %635 
                                                      OpStore %629 %636 
                                         f32 %637 = OpLoad %398 
                                       f32_3 %638 = OpCompositeConstruct %637 %637 %637 
                                       f32_3 %639 = OpLoad %629 
                                       f32_3 %640 = OpFMul %638 %639 
                                       f32_4 %641 = OpLoad %451 
                                       f32_4 %642 = OpVectorShuffle %641 %640 4 5 6 3 
                                                      OpStore %451 %642 
                                Private f32* %643 = OpAccessChain %609 %402 
                                                      OpStore %643 %180 
                                       f32_4 %646 = OpLoad %451 
                                       f32_4 %647 = OpLoad %609 
                                       f32_4 %648 = OpFAdd %646 %647 
                                                      OpStore %645 %648 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat6 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat6 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat3 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat1 = max(u_xlat3, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlitchInterval;
uniform 	float _DispIntensity;
uniform 	float _DispProbability;
uniform 	float _ColorIntensity;
uniform 	float _ColorProbability;
uniform 	float _DispGlitchOn;
uniform 	float _ColorGlitchOn;
uniform 	float _WrapDispCoords;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat16_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat10_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
vec2 u_xlat11;
float u_xlat16;
void main()
{
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].ww + u_xlat0.xy;
    u_xlat10.x = _Time.y / _GlitchInterval;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat5.x = u_xlat0.x + 2.79299998;
    u_xlat1 = u_xlat0.xxxx * vec4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
    u_xlat1 = sin(u_xlat1);
    u_xlat1 = u_xlat1 * vec4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
    u_xlat1 = fract(u_xlat1);
    u_xlat10.xy = u_xlat1.zw + vec2(-0.5, -0.5);
    u_xlat11.xy = u_xlat5.xx * vec2(-91.2228012, 91.2228012);
    u_xlat11.xy = sin(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy * vec2(43758.5469, 43758.5469);
    u_xlat11.xy = fract(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
    u_xlatb1.xy = lessThan(u_xlat1.xyxx, vec4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
    u_xlatb2.xyz = equal(vec4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), vec4(1.0, 1.0, 1.0, 0.0)).xyz;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
    u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
    u_xlat5.x = vs_TEXCOORD0.y / u_xlat5.x;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * 78.2330017;
    u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 43758.5469;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat0.x = u_xlat0.x * _DispIntensity + vs_TEXCOORD0.x;
    u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat16 = fract(abs(u_xlat0.x));
    u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : vs_TEXCOORD0.x;
    u_xlat0.y = vs_TEXCOORD0.y;
    u_xlat2 = texture(_MainTex, u_xlat0.xy);
    u_xlat3.xy = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
    u_xlat3.zw = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + vs_TEXCOORD0.yy;
    u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
    u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
    u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
    u_xlat0.y = u_xlat11.x * _ColorIntensity + vs_TEXCOORD0.y;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
    u_xlat1.x = u_xlat0.w + u_xlat16_1;
    u_xlat0.w = u_xlat1.x * 0.333333343;
    u_xlat0.x = u_xlat10_4.x;
    u_xlat0.y = u_xlat10_3.y;
    u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
    u_xlat1 = u_xlat0 * vs_COLOR0;
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + -0.100000001;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb0){
        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat5.x = u_xlat0.y * 0.25 + 0.75;
        u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat0.x = max(u_xlat5.x, u_xlat2.x);
        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
    } else {
        u_xlat0.x = float(1.0);
        u_xlat0.y = float(1.0);
        u_xlat0.z = float(1.0);
        u_xlat0.w = float(1.0);
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0, unity_OcclusionMaskSelector);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 423
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %49 %121 %133 %134 %148 %185 %188 %191 %192 %194 %413 %416 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 RelaxedPrecision 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 RelaxedPrecision 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 RelaxedPrecision 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 RelaxedPrecision 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 RelaxedPrecision 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 RelaxedPrecision 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 RelaxedPrecision 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 RelaxedPrecision 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpMemberDecorate %17 13 Offset 17 
                                                      OpMemberDecorate %17 14 Offset 17 
                                                      OpMemberDecorate %17 15 Offset 17 
                                                      OpMemberDecorate %17 16 Offset 17 
                                                      OpMemberDecorate %17 17 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %49 Location 49 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %133 Location 133 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate %185 Location 185 
                                                      OpDecorate %188 Location 188 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %191 Location 191 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 Location 192 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 Location 194 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %413 Location 413 
                                                      OpDecorate %416 Location 416 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeStruct %7 %7 %7 %7 %12 %7 %7 %7 %7 %7 %7 %7 %14 %15 %16 %6 %6 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 16 
                                              %22 = OpTypePointer Uniform %6 
                                          f32 %25 = OpConstant 3.674022E-40 
                                          u32 %27 = OpConstant 0 
                                              %28 = OpTypePointer Private %6 
                                          i32 %32 = OpConstant 15 
                                          f32 %39 = OpConstant 3.674022E-40 
                                 Private f32* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                              %48 = OpTypePointer Input %7 
                                 Input f32_4* %49 = OpVariable Input 
                                          u32 %50 = OpConstant 1 
                                              %51 = OpTypePointer Input %6 
                                          i32 %62 = OpConstant 12 
                                          i32 %63 = OpConstant 1 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %68 = OpConstant 0 
                                          i32 %76 = OpConstant 2 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                               Private f32_4* %97 = OpVariable Private 
                                         i32 %100 = OpConstant 14 
                                             %118 = OpTypeArray %6 %50 
                                             %119 = OpTypeStruct %7 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %129 = OpTypePointer Output %7 
                                             %131 = OpTypeVector %6 2 
                                             %132 = OpTypePointer Output %131 
                               Output f32_2* %133 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                                         i32 %137 = OpConstant 17 
                                             %146 = OpTypeVector %6 3 
                                             %147 = OpTypePointer Input %146 
                                Input f32_3* %148 = OpVariable Input 
                                         i32 %150 = OpConstant 13 
                                         u32 %167 = OpConstant 2 
                                Private f32* %169 = OpVariable Private 
                                             %184 = OpTypePointer Output %146 
                               Output f32_3* %185 = OpVariable Output 
                               Output f32_3* %188 = OpVariable Output 
                               Output f32_4* %191 = OpVariable Output 
                                Input f32_4* %192 = OpVariable Input 
                               Output f32_4* %194 = OpVariable Output 
                                             %196 = OpTypePointer Private %146 
                              Private f32_3* %197 = OpVariable Private 
                              Private f32_4* %214 = OpVariable Private 
                              Private f32_3* %220 = OpVariable Private 
                                         i32 %221 = OpConstant 8 
                                         i32 %227 = OpConstant 9 
                                         i32 %233 = OpConstant 10 
                                         i32 %239 = OpConstant 11 
                                         u32 %248 = OpConstant 3 
                                         i32 %250 = OpConstant 5 
                                         i32 %256 = OpConstant 6 
                                         i32 %262 = OpConstant 7 
                                         f32 %272 = OpConstant 3.674022E-40 
                                       f32_3 %273 = OpConstantComposite %272 %272 %272 
                              Private f32_3* %275 = OpVariable Private 
                                         f32 %279 = OpConstant 3.674022E-40 
                                       f32_3 %280 = OpConstantComposite %279 %279 %279 
                                         f32 %285 = OpConstant 3.674022E-40 
                                       f32_3 %286 = OpConstantComposite %285 %285 %285 
                                         f32 %288 = OpConstant 3.674022E-40 
                                       f32_3 %289 = OpConstantComposite %288 %288 %288 
                              Private f32_4* %299 = OpVariable Private 
                              Private f32_4* %307 = OpVariable Private 
                                         f32 %343 = OpConstant 3.674022E-40 
                                       f32_4 %344 = OpConstantComposite %343 %343 %343 %343 
                                       f32_4 %352 = OpConstantComposite %46 %46 %46 %46 
                                       f32_4 %360 = OpConstantComposite %272 %272 %272 %272 
                                         i32 %367 = OpConstant 4 
                               Output f32_3* %413 = OpVariable Output 
                               Output f32_4* %416 = OpVariable Output 
                                             %417 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %23 = OpAccessChain %19 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %26 = OpFAdd %24 %25 
                                 Private f32* %29 = OpAccessChain %9 %27 
                                                      OpStore %29 %26 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                          f32 %31 = OpLoad %30 
                                 Uniform f32* %33 = OpAccessChain %19 %32 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFMul %31 %34 
                                 Private f32* %36 = OpAccessChain %9 %27 
                                                      OpStore %36 %35 
                                 Private f32* %37 = OpAccessChain %9 %27 
                                          f32 %38 = OpLoad %37 
                                          f32 %40 = OpFMul %38 %39 
                                 Private f32* %41 = OpAccessChain %9 %27 
                                                      OpStore %41 %40 
                                 Uniform f32* %43 = OpAccessChain %19 %32 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                                      OpStore %42 %47 
                                   Input f32* %52 = OpAccessChain %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %42 
                                          f32 %55 = OpFMul %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %27 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpFAdd %55 %57 
                                 Private f32* %59 = OpAccessChain %9 %27 
                                                      OpStore %59 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_4 %61 = OpVectorShuffle %60 %60 0 0 0 0 
                               Uniform f32_4* %65 = OpAccessChain %19 %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpFMul %61 %66 
                                                      OpStore %9 %67 
                               Uniform f32_4* %69 = OpAccessChain %19 %62 %68 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %49 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %77 = OpAccessChain %19 %62 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %49 
                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %9 %83 
                                        f32_4 %85 = OpLoad %9 
                               Uniform f32_4* %87 = OpAccessChain %19 %62 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpFAdd %85 %88 
                                                      OpStore %84 %89 
                               Uniform f32_4* %90 = OpAccessChain %19 %62 %86 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpLoad %49 
                                        f32_4 %93 = OpVectorShuffle %92 %92 3 3 3 3 
                                        f32_4 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_4 %96 = OpFAdd %94 %95 
                                                      OpStore %9 %96 
                                        f32_4 %98 = OpLoad %84 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %19 %100 %63 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %99 %102 
                                                      OpStore %97 %103 
                              Uniform f32_4* %104 = OpAccessChain %19 %100 %68 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %84 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %97 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %97 %110 
                              Uniform f32_4* %111 = OpAccessChain %19 %100 %76 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %84 
                                       f32_4 %114 = OpVectorShuffle %113 %113 2 2 2 2 
                                       f32_4 %115 = OpFMul %112 %114 
                                       f32_4 %116 = OpLoad %97 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %97 %117 
                              Uniform f32_4* %122 = OpAccessChain %19 %100 %86 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %84 
                                       f32_4 %125 = OpVectorShuffle %124 %124 3 3 3 3 
                                       f32_4 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %97 
                                       f32_4 %128 = OpFAdd %126 %127 
                               Output f32_4* %130 = OpAccessChain %121 %68 
                                                      OpStore %130 %128 
                                       f32_4 %135 = OpLoad %134 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              Uniform f32_4* %138 = OpAccessChain %19 %137 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_2 %141 = OpFMul %136 %140 
                              Uniform f32_4* %142 = OpAccessChain %19 %137 
                                       f32_4 %143 = OpLoad %142 
                                       f32_2 %144 = OpVectorShuffle %143 %143 2 3 
                                       f32_2 %145 = OpFAdd %141 %144 
                                                      OpStore %133 %145 
                                       f32_3 %149 = OpLoad %148 
                              Uniform f32_4* %151 = OpAccessChain %19 %150 %68 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %149 %153 
                                Private f32* %155 = OpAccessChain %84 %27 
                                                      OpStore %155 %154 
                                       f32_3 %156 = OpLoad %148 
                              Uniform f32_4* %157 = OpAccessChain %19 %150 %63 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %156 %159 
                                Private f32* %161 = OpAccessChain %84 %50 
                                                      OpStore %161 %160 
                                       f32_3 %162 = OpLoad %148 
                              Uniform f32_4* %163 = OpAccessChain %19 %150 %76 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %168 = OpAccessChain %84 %167 
                                                      OpStore %168 %166 
                                       f32_4 %170 = OpLoad %84 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_4 %172 = OpLoad %84 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %171 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %169 %176 
                                         f32 %177 = OpLoad %169 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_4 %179 = OpLoad %84 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_4 %182 = OpLoad %84 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
                                                      OpStore %84 %183 
                                       f32_4 %186 = OpLoad %84 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                                      OpStore %185 %187 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                                      OpStore %188 %190 
                                       f32_4 %193 = OpLoad %192 
                                                      OpStore %191 %193 
                                       f32_4 %195 = OpLoad %9 
                                                      OpStore %194 %195 
                                Private f32* %198 = OpAccessChain %84 %50 
                                         f32 %199 = OpLoad %198 
                                Private f32* %200 = OpAccessChain %84 %50 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFMul %199 %201 
                                Private f32* %203 = OpAccessChain %197 %27 
                                                      OpStore %203 %202 
                                Private f32* %204 = OpAccessChain %84 %27 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %84 %27 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %205 %207 
                                Private f32* %209 = OpAccessChain %197 %27 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFNegate %210 
                                         f32 %212 = OpFAdd %208 %211 
                                Private f32* %213 = OpAccessChain %197 %27 
                                                      OpStore %213 %212 
                                       f32_4 %215 = OpLoad %84 
                                       f32_4 %216 = OpVectorShuffle %215 %215 1 2 2 0 
                                       f32_4 %217 = OpLoad %84 
                                       f32_4 %218 = OpVectorShuffle %217 %217 0 1 2 2 
                                       f32_4 %219 = OpFMul %216 %218 
                                                      OpStore %214 %219 
                              Uniform f32_4* %222 = OpAccessChain %19 %221 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %214 
                                         f32 %225 = OpDot %223 %224 
                                Private f32* %226 = OpAccessChain %220 %27 
                                                      OpStore %226 %225 
                              Uniform f32_4* %228 = OpAccessChain %19 %227 
                                       f32_4 %229 = OpLoad %228 
                                       f32_4 %230 = OpLoad %214 
                                         f32 %231 = OpDot %229 %230 
                                Private f32* %232 = OpAccessChain %220 %50 
                                                      OpStore %232 %231 
                              Uniform f32_4* %234 = OpAccessChain %19 %233 
                                       f32_4 %235 = OpLoad %234 
                                       f32_4 %236 = OpLoad %214 
                                         f32 %237 = OpDot %235 %236 
                                Private f32* %238 = OpAccessChain %220 %167 
                                                      OpStore %238 %237 
                              Uniform f32_4* %240 = OpAccessChain %19 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpLoad %197 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 0 0 
                                       f32_3 %245 = OpFMul %242 %244 
                                       f32_3 %246 = OpLoad %220 
                                       f32_3 %247 = OpFAdd %245 %246 
                                                      OpStore %197 %247 
                                Private f32* %249 = OpAccessChain %84 %248 
                                                      OpStore %249 %46 
                              Uniform f32_4* %251 = OpAccessChain %19 %250 
                                       f32_4 %252 = OpLoad %251 
                                       f32_4 %253 = OpLoad %84 
                                         f32 %254 = OpDot %252 %253 
                                Private f32* %255 = OpAccessChain %220 %27 
                                                      OpStore %255 %254 
                              Uniform f32_4* %257 = OpAccessChain %19 %256 
                                       f32_4 %258 = OpLoad %257 
                                       f32_4 %259 = OpLoad %84 
                                         f32 %260 = OpDot %258 %259 
                                Private f32* %261 = OpAccessChain %220 %50 
                                                      OpStore %261 %260 
                              Uniform f32_4* %263 = OpAccessChain %19 %262 
                                       f32_4 %264 = OpLoad %263 
                                       f32_4 %265 = OpLoad %84 
                                         f32 %266 = OpDot %264 %265 
                                Private f32* %267 = OpAccessChain %220 %167 
                                                      OpStore %267 %266 
                                       f32_3 %268 = OpLoad %197 
                                       f32_3 %269 = OpLoad %220 
                                       f32_3 %270 = OpFAdd %268 %269 
                                                      OpStore %197 %270 
                                       f32_3 %271 = OpLoad %197 
                                       f32_3 %274 = OpExtInst %1 40 %271 %273 
                                                      OpStore %197 %274 
                                       f32_3 %276 = OpLoad %197 
                                       f32_3 %277 = OpExtInst %1 30 %276 
                                                      OpStore %275 %277 
                                       f32_3 %278 = OpLoad %275 
                                       f32_3 %281 = OpFMul %278 %280 
                                                      OpStore %275 %281 
                                       f32_3 %282 = OpLoad %275 
                                       f32_3 %283 = OpExtInst %1 29 %282 
                                                      OpStore %275 %283 
                                       f32_3 %284 = OpLoad %275 
                                       f32_3 %287 = OpFMul %284 %286 
                                       f32_3 %290 = OpFAdd %287 %289 
                                                      OpStore %275 %290 
                                       f32_3 %291 = OpLoad %275 
                                       f32_3 %292 = OpExtInst %1 40 %291 %273 
                                                      OpStore %275 %292 
                                       f32_4 %293 = OpLoad %9 
                                       f32_4 %294 = OpVectorShuffle %293 %293 1 1 1 1 
                                       f32_4 %295 = OpFNegate %294 
                              Uniform f32_4* %296 = OpAccessChain %19 %63 
                                       f32_4 %297 = OpLoad %296 
                                       f32_4 %298 = OpFAdd %295 %297 
                                                      OpStore %97 %298 
                                       f32_4 %300 = OpLoad %84 
                                       f32_4 %301 = OpVectorShuffle %300 %300 1 1 1 1 
                                       f32_4 %302 = OpLoad %97 
                                       f32_4 %303 = OpFMul %301 %302 
                                                      OpStore %299 %303 
                                       f32_4 %304 = OpLoad %97 
                                       f32_4 %305 = OpLoad %97 
                                       f32_4 %306 = OpFMul %304 %305 
                                                      OpStore %97 %306 
                                       f32_4 %308 = OpLoad %9 
                                       f32_4 %309 = OpVectorShuffle %308 %308 0 0 0 0 
                                       f32_4 %310 = OpFNegate %309 
                              Uniform f32_4* %311 = OpAccessChain %19 %68 
                                       f32_4 %312 = OpLoad %311 
                                       f32_4 %313 = OpFAdd %310 %312 
                                                      OpStore %307 %313 
                                       f32_4 %314 = OpLoad %9 
                                       f32_4 %315 = OpVectorShuffle %314 %314 2 2 2 2 
                                       f32_4 %316 = OpFNegate %315 
                              Uniform f32_4* %317 = OpAccessChain %19 %76 
                                       f32_4 %318 = OpLoad %317 
                                       f32_4 %319 = OpFAdd %316 %318 
                                                      OpStore %9 %319 
                                       f32_4 %320 = OpLoad %307 
                                       f32_4 %321 = OpLoad %84 
                                       f32_4 %322 = OpVectorShuffle %321 %321 0 0 0 0 
                                       f32_4 %323 = OpFMul %320 %322 
                                       f32_4 %324 = OpLoad %299 
                                       f32_4 %325 = OpFAdd %323 %324 
                                                      OpStore %299 %325 
                                       f32_4 %326 = OpLoad %307 
                                       f32_4 %327 = OpLoad %307 
                                       f32_4 %328 = OpFMul %326 %327 
                                       f32_4 %329 = OpLoad %97 
                                       f32_4 %330 = OpFAdd %328 %329 
                                                      OpStore %97 %330 
                                       f32_4 %331 = OpLoad %9 
                                       f32_4 %332 = OpLoad %9 
                                       f32_4 %333 = OpFMul %331 %332 
                                       f32_4 %334 = OpLoad %97 
                                       f32_4 %335 = OpFAdd %333 %334 
                                                      OpStore %97 %335 
                                       f32_4 %336 = OpLoad %9 
                                       f32_4 %337 = OpLoad %84 
                                       f32_4 %338 = OpVectorShuffle %337 %337 2 2 2 2 
                                       f32_4 %339 = OpFMul %336 %338 
                                       f32_4 %340 = OpLoad %299 
                                       f32_4 %341 = OpFAdd %339 %340 
                                                      OpStore %9 %341 
                                       f32_4 %342 = OpLoad %97 
                                       f32_4 %345 = OpExtInst %1 40 %342 %344 
                                                      OpStore %84 %345 
                                       f32_4 %346 = OpLoad %84 
                                       f32_4 %347 = OpExtInst %1 32 %346 
                                                      OpStore %97 %347 
                                       f32_4 %348 = OpLoad %84 
                              Uniform f32_4* %349 = OpAccessChain %19 %86 
                                       f32_4 %350 = OpLoad %349 
                                       f32_4 %351 = OpFMul %348 %350 
                                       f32_4 %353 = OpFAdd %351 %352 
                                                      OpStore %84 %353 
                                       f32_4 %354 = OpLoad %84 
                                       f32_4 %355 = OpFDiv %352 %354 
                                                      OpStore %84 %355 
                                       f32_4 %356 = OpLoad %9 
                                       f32_4 %357 = OpLoad %97 
                                       f32_4 %358 = OpFMul %356 %357 
                                                      OpStore %9 %358 
                                       f32_4 %359 = OpLoad %9 
                                       f32_4 %361 = OpExtInst %1 40 %359 %360 
                                                      OpStore %9 %361 
                                       f32_4 %362 = OpLoad %84 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpFMul %362 %363 
                                                      OpStore %9 %364 
                                       f32_4 %365 = OpLoad %9 
                                       f32_3 %366 = OpVectorShuffle %365 %365 1 1 1 
                              Uniform f32_4* %368 = OpAccessChain %19 %367 %63 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFMul %366 %370 
                                       f32_4 %372 = OpLoad %84 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %84 %373 
                              Uniform f32_4* %374 = OpAccessChain %19 %367 %68 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_4 %377 = OpLoad %9 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 0 0 
                                       f32_3 %379 = OpFMul %376 %378 
                                       f32_4 %380 = OpLoad %84 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                                       f32_3 %382 = OpFAdd %379 %381 
                                       f32_4 %383 = OpLoad %84 
                                       f32_4 %384 = OpVectorShuffle %383 %382 4 5 6 3 
                                                      OpStore %84 %384 
                              Uniform f32_4* %385 = OpAccessChain %19 %367 %76 
                                       f32_4 %386 = OpLoad %385 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_4 %388 = OpLoad %9 
                                       f32_3 %389 = OpVectorShuffle %388 %388 2 2 2 
                                       f32_3 %390 = OpFMul %387 %389 
                                       f32_4 %391 = OpLoad %84 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                       f32_3 %393 = OpFAdd %390 %392 
                                       f32_4 %394 = OpLoad %9 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
                                                      OpStore %9 %395 
                              Uniform f32_4* %396 = OpAccessChain %19 %367 %86 
                                       f32_4 %397 = OpLoad %396 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 1 2 
                                       f32_4 %399 = OpLoad %9 
                                       f32_3 %400 = OpVectorShuffle %399 %399 3 3 3 
                                       f32_3 %401 = OpFMul %398 %400 
                                       f32_4 %402 = OpLoad %9 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
                                       f32_3 %404 = OpFAdd %401 %403 
                                       f32_4 %405 = OpLoad %9 
                                       f32_4 %406 = OpVectorShuffle %405 %404 4 5 6 3 
                                                      OpStore %9 %406 
                                       f32_4 %407 = OpLoad %9 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_3 %409 = OpLoad %275 
                                       f32_3 %410 = OpFAdd %408 %409 
                                       f32_4 %411 = OpLoad %9 
                                       f32_4 %412 = OpVectorShuffle %411 %410 4 5 6 3 
                                                      OpStore %9 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                                      OpStore %413 %415 
                                                      OpStore %416 %360 
                                 Output f32* %418 = OpAccessChain %121 %68 %50 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFNegate %419 
                                 Output f32* %421 = OpAccessChain %121 %68 %50 
                                                      OpStore %421 %420 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 650
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %205 %454 %523 %624 %645 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 RelaxedPrecision 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 RelaxedPrecision 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpMemberDecorate %16 14 Offset 16 
                                                      OpMemberDecorate %16 15 Offset 16 
                                                      OpMemberDecorate %16 16 Offset 16 
                                                      OpMemberDecorate %16 17 RelaxedPrecision 
                                                      OpMemberDecorate %16 17 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %205 Location 205 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %321 DescriptorSet 321 
                                                      OpDecorate %321 Binding 321 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %454 Location 454 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %512 SpecId 512 
                                                      OpDecorate %523 Location 523 
                                                      OpDecorate %604 DescriptorSet 604 
                                                      OpDecorate %604 Binding 604 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %624 Location 624 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %639 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %645 Location 645 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeStruct %7 %7 %12 %13 %7 %14 %15 %15 %7 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %18 = OpVariable Uniform 
                                              %19 = OpTypeInt 32 1 
                                          i32 %20 = OpConstant 2 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypeVector %6 2 
                                              %23 = OpTypePointer Uniform %7 
                                          i32 %27 = OpConstant 1 
                                          i32 %34 = OpConstant 0 
                                              %71 = OpTypePointer Private %22 
                               Private f32_2* %72 = OpVariable Private 
                                          u32 %73 = OpConstant 1 
                                              %74 = OpTypePointer Uniform %6 
                                          i32 %77 = OpConstant 9 
                                          u32 %81 = OpConstant 0 
                                              %82 = OpTypePointer Private %6 
                                Private f32* %103 = OpVariable Private 
                                         f32 %106 = OpConstant 3.674022E-40 
                              Private f32_4* %108 = OpVariable Private 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %112 = OpConstant 3.674022E-40 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %114 = OpConstant 3.674022E-40 
                                       f32_4 %115 = OpConstantComposite %111 %112 %113 %114 
                                         f32 %120 = OpConstant 3.674022E-40 
                                       f32_4 %121 = OpConstantComposite %120 %120 %120 %120 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_2 %128 = OpConstantComposite %127 %127 
                              Private f32_2* %130 = OpVariable Private 
                                       f32_2 %133 = OpConstantComposite %114 %112 
                                       f32_2 %138 = OpConstantComposite %120 %120 
                                             %144 = OpTypeBool 
                                             %145 = OpTypeVector %144 2 
                                             %146 = OpTypePointer Private %145 
                             Private bool_2* %147 = OpVariable Private 
                                         i32 %150 = OpConstant 11 
                                         i32 %153 = OpConstant 13 
                                             %161 = OpTypeVector %144 4 
                                             %164 = OpTypeVector %144 3 
                                             %165 = OpTypePointer Private %164 
                             Private bool_3* %166 = OpVariable Private 
                                         i32 %167 = OpConstant 14 
                                         i32 %170 = OpConstant 16 
                                         i32 %173 = OpConstant 15 
                                         f32 %179 = OpConstant 3.674022E-40 
                                         f32 %180 = OpConstant 3.674022E-40 
                                       f32_4 %181 = OpConstantComposite %179 %179 %179 %180 
                                         f32 %200 = OpConstant 3.674022E-40 
                                         f32 %202 = OpConstant 3.674022E-40 
                                             %204 = OpTypePointer Input %22 
                                Input f32_2* %205 = OpVariable Input 
                                             %206 = OpTypePointer Input %6 
                                Private f32* %213 = OpVariable Private 
                                         f32 %226 = OpConstant 3.674022E-40 
                                         f32 %230 = OpConstant 3.674022E-40 
                                         i32 %254 = OpConstant 10 
                                             %262 = OpTypePointer Private %144 
                               Private bool* %263 = OpVariable Private 
                                             %274 = OpTypePointer Function %6 
                              Private f32_4* %317 = OpVariable Private 
                                             %318 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %319 = OpTypeSampledImage %318 
                                             %320 = OpTypePointer UniformConstant %319 
 UniformConstant read_only Texture2DSampled* %321 = OpVariable UniformConstant 
                              Private f32_4* %326 = OpVariable Private 
                                         i32 %328 = OpConstant 12 
                              Private f32_4* %365 = OpVariable Private 
                                Private f32* %398 = OpVariable Private 
                                         u32 %399 = OpConstant 2 
                                         u32 %402 = OpConstant 3 
                                         f32 %411 = OpConstant 3.674022E-40 
                              Private f32_4* %413 = OpVariable Private 
                                             %426 = OpTypePointer Function %22 
                              Private f32_4* %451 = OpVariable Private 
                                             %453 = OpTypePointer Input %7 
                                Input f32_4* %454 = OpVariable Input 
                                         f32 %462 = OpConstant 3.674022E-40 
                                         i32 %471 = OpConstant -1 
                                         i32 %482 = OpConstant 17 
                                         i32 %499 = OpConstant 4 
                                        bool %505 = OpConstantFalse 
                                        bool %512 = OpSpecConstantFalse 
                                             %520 = OpTypePointer Private %15 
                              Private f32_3* %521 = OpVariable Private 
                                             %522 = OpTypePointer Input %15 
                                Input f32_3* %523 = OpVariable Input 
                                         i32 %526 = OpConstant 5 
                                             %552 = OpTypePointer Function %15 
                                         i32 %566 = OpConstant 7 
                                             %567 = OpTypePointer Uniform %15 
                                         i32 %576 = OpConstant 6 
                                         f32 %584 = OpConstant 3.674022E-40 
                                         f32 %586 = OpConstant 3.674022E-40 
                                         f32 %591 = OpConstant 3.674022E-40 
                                             %601 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %602 = OpTypeSampledImage %601 
                                             %603 = OpTypePointer UniformConstant %602 
 UniformConstant read_only Texture3DSampled* %604 = OpVariable UniformConstant 
                              Private f32_4* %609 = OpVariable Private 
                                Input f32_3* %624 = OpVariable Input 
                              Private f32_3* %629 = OpVariable Private 
                                         i32 %632 = OpConstant 8 
                                             %644 = OpTypePointer Output %7 
                               Output f32_4* %645 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %275 = OpVariable Function 
                               Function f32* %291 = OpVariable Function 
                               Function f32* %302 = OpVariable Function 
                               Function f32* %414 = OpVariable Function 
                             Function f32_2* %427 = OpVariable Function 
                               Function f32* %440 = OpVariable Function 
                             Function f32_3* %553 = OpVariable Function 
                               Uniform f32_4* %24 = OpAccessChain %18 %20 %21 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 1 1 
                               Uniform f32_4* %28 = OpAccessChain %18 %21 %27 
                                        f32_4 %29 = OpLoad %28 
                                        f32_2 %30 = OpVectorShuffle %29 %29 0 1 
                                        f32_2 %31 = OpFMul %26 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 2 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %35 = OpAccessChain %18 %21 %34 
                                        f32_4 %36 = OpLoad %35 
                                        f32_2 %37 = OpVectorShuffle %36 %36 0 1 
                               Uniform f32_4* %38 = OpAccessChain %18 %20 %21 
                                        f32_4 %39 = OpLoad %38 
                                        f32_2 %40 = OpVectorShuffle %39 %39 0 0 
                                        f32_2 %41 = OpFMul %37 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_2 %44 = OpFAdd %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpVectorShuffle %45 %44 4 5 2 3 
                                                      OpStore %9 %46 
                               Uniform f32_4* %47 = OpAccessChain %18 %21 %20 
                                        f32_4 %48 = OpLoad %47 
                                        f32_2 %49 = OpVectorShuffle %48 %48 0 1 
                               Uniform f32_4* %50 = OpAccessChain %18 %20 %21 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 2 
                                        f32_2 %53 = OpFMul %49 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                                        f32_2 %56 = OpFAdd %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %56 4 5 2 3 
                                                      OpStore %9 %58 
                               Uniform f32_4* %59 = OpAccessChain %18 %21 %21 
                                        f32_4 %60 = OpLoad %59 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                               Uniform f32_4* %62 = OpAccessChain %18 %20 %21 
                                        f32_4 %63 = OpLoad %62 
                                        f32_2 %64 = OpVectorShuffle %63 %63 3 3 
                                        f32_2 %65 = OpFMul %61 %64 
                                        f32_4 %66 = OpLoad %9 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_2 %68 = OpFAdd %65 %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpVectorShuffle %69 %68 4 5 2 3 
                                                      OpStore %9 %70 
                                 Uniform f32* %75 = OpAccessChain %18 %34 %73 
                                          f32 %76 = OpLoad %75 
                                 Uniform f32* %78 = OpAccessChain %18 %77 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFDiv %76 %79 
                                 Private f32* %83 = OpAccessChain %72 %81 
                                                      OpStore %83 %80 
                                 Private f32* %84 = OpAccessChain %72 %81 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpExtInst %1 8 %85 
                                 Private f32* %87 = OpAccessChain %72 %81 
                                                      OpStore %87 %86 
                                 Private f32* %88 = OpAccessChain %72 %81 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %90 = OpAccessChain %18 %77 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %89 %91 
                                 Private f32* %93 = OpAccessChain %9 %81 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %81 
                                                      OpStore %96 %95 
                                 Private f32* %97 = OpAccessChain %9 %73 
                                          f32 %98 = OpLoad %97 
                                 Private f32* %99 = OpAccessChain %9 %81 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFAdd %98 %100 
                                Private f32* %102 = OpAccessChain %9 %81 
                                                      OpStore %102 %101 
                                Private f32* %104 = OpAccessChain %9 %81 
                                         f32 %105 = OpLoad %104 
                                         f32 %107 = OpFAdd %105 %106 
                                                      OpStore %103 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_4 %110 = OpVectorShuffle %109 %109 0 0 0 0 
                                       f32_4 %116 = OpFMul %110 %115 
                                                      OpStore %108 %116 
                                       f32_4 %117 = OpLoad %108 
                                       f32_4 %118 = OpExtInst %1 13 %117 
                                                      OpStore %108 %118 
                                       f32_4 %119 = OpLoad %108 
                                       f32_4 %122 = OpFMul %119 %121 
                                                      OpStore %108 %122 
                                       f32_4 %123 = OpLoad %108 
                                       f32_4 %124 = OpExtInst %1 10 %123 
                                                      OpStore %108 %124 
                                       f32_4 %125 = OpLoad %108 
                                       f32_2 %126 = OpVectorShuffle %125 %125 2 3 
                                       f32_2 %129 = OpFAdd %126 %128 
                                                      OpStore %72 %129 
                                         f32 %131 = OpLoad %103 
                                       f32_2 %132 = OpCompositeConstruct %131 %131 
                                       f32_2 %134 = OpFMul %132 %133 
                                                      OpStore %130 %134 
                                       f32_2 %135 = OpLoad %130 
                                       f32_2 %136 = OpExtInst %1 13 %135 
                                                      OpStore %130 %136 
                                       f32_2 %137 = OpLoad %130 
                                       f32_2 %139 = OpFMul %137 %138 
                                                      OpStore %130 %139 
                                       f32_2 %140 = OpLoad %130 
                                       f32_2 %141 = OpExtInst %1 10 %140 
                                                      OpStore %130 %141 
                                       f32_2 %142 = OpLoad %130 
                                       f32_2 %143 = OpFAdd %142 %128 
                                                      OpStore %130 %143 
                                       f32_4 %148 = OpLoad %108 
                                       f32_4 %149 = OpVectorShuffle %148 %148 0 1 0 0 
                                Uniform f32* %151 = OpAccessChain %18 %150 
                                         f32 %152 = OpLoad %151 
                                Uniform f32* %154 = OpAccessChain %18 %153 
                                         f32 %155 = OpLoad %154 
                                Uniform f32* %156 = OpAccessChain %18 %150 
                                         f32 %157 = OpLoad %156 
                                Uniform f32* %158 = OpAccessChain %18 %150 
                                         f32 %159 = OpLoad %158 
                                       f32_4 %160 = OpCompositeConstruct %152 %155 %157 %159 
                                      bool_4 %162 = OpFOrdLessThan %149 %160 
                                      bool_2 %163 = OpVectorShuffle %162 %162 0 1 
                                                      OpStore %147 %163 
                                Uniform f32* %168 = OpAccessChain %18 %167 
                                         f32 %169 = OpLoad %168 
                                Uniform f32* %171 = OpAccessChain %18 %170 
                                         f32 %172 = OpLoad %171 
                                Uniform f32* %174 = OpAccessChain %18 %173 
                                         f32 %175 = OpLoad %174 
                                Uniform f32* %176 = OpAccessChain %18 %167 
                                         f32 %177 = OpLoad %176 
                                       f32_4 %178 = OpCompositeConstruct %169 %172 %175 %177 
                                      bool_4 %182 = OpFOrdEqual %178 %181 
                                      bool_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                                      OpStore %166 %183 
                                      bool_2 %184 = OpLoad %147 
                                        bool %185 = OpCompositeExtract %184 0 
                                      bool_3 %186 = OpLoad %166 
                                        bool %187 = OpCompositeExtract %186 0 
                                        bool %188 = OpLogicalAnd %185 %187 
                                      bool_2 %189 = OpLoad %147 
                                      bool_2 %190 = OpCompositeInsert %188 %189 0 
                                                      OpStore %147 %190 
                                      bool_2 %191 = OpLoad %147 
                                        bool %192 = OpCompositeExtract %191 1 
                                      bool_3 %193 = OpLoad %166 
                                        bool %194 = OpCompositeExtract %193 2 
                                        bool %195 = OpLogicalAnd %192 %194 
                                      bool_2 %196 = OpLoad %147 
                                      bool_2 %197 = OpCompositeInsert %195 %196 1 
                                                      OpStore %147 %197 
                                Private f32* %198 = OpAccessChain %130 %73 
                                         f32 %199 = OpLoad %198 
                                         f32 %201 = OpFMul %199 %200 
                                         f32 %203 = OpFAdd %201 %202 
                                                      OpStore %103 %203 
                                  Input f32* %207 = OpAccessChain %205 %73 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpLoad %103 
                                         f32 %210 = OpFDiv %208 %209 
                                                      OpStore %103 %210 
                                         f32 %211 = OpLoad %103 
                                         f32 %212 = OpExtInst %1 8 %211 
                                                      OpStore %103 %212 
                                Private f32* %214 = OpAccessChain %9 %81 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFNegate %215 
                                         f32 %217 = OpLoad %103 
                                         f32 %218 = OpFAdd %216 %217 
                                                      OpStore %213 %218 
                                Private f32* %219 = OpAccessChain %9 %81 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpLoad %103 
                                         f32 %222 = OpFAdd %220 %221 
                                Private f32* %223 = OpAccessChain %9 %81 
                                                      OpStore %223 %222 
                                Private f32* %224 = OpAccessChain %9 %81 
                                         f32 %225 = OpLoad %224 
                                         f32 %227 = OpFMul %225 %226 
                                Private f32* %228 = OpAccessChain %9 %81 
                                                      OpStore %228 %227 
                                         f32 %229 = OpLoad %213 
                                         f32 %231 = OpFMul %229 %230 
                                Private f32* %232 = OpAccessChain %9 %81 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                Private f32* %235 = OpAccessChain %9 %81 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %9 %81 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 13 %237 
                                Private f32* %239 = OpAccessChain %9 %81 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %9 %81 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %241 %120 
                                Private f32* %243 = OpAccessChain %9 %81 
                                                      OpStore %243 %242 
                                Private f32* %244 = OpAccessChain %9 %81 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpExtInst %1 10 %245 
                                Private f32* %247 = OpAccessChain %9 %81 
                                                      OpStore %247 %246 
                                Private f32* %248 = OpAccessChain %9 %81 
                                         f32 %249 = OpLoad %248 
                                         f32 %250 = OpFAdd %249 %127 
                                Private f32* %251 = OpAccessChain %9 %81 
                                                      OpStore %251 %250 
                                Private f32* %252 = OpAccessChain %9 %81 
                                         f32 %253 = OpLoad %252 
                                Uniform f32* %255 = OpAccessChain %18 %254 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFMul %253 %256 
                                  Input f32* %258 = OpAccessChain %205 %81 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFAdd %257 %259 
                                Private f32* %261 = OpAccessChain %9 %81 
                                                      OpStore %261 %260 
                                Private f32* %264 = OpAccessChain %9 %81 
                                         f32 %265 = OpLoad %264 
                                Private f32* %266 = OpAccessChain %9 %81 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFNegate %267 
                                        bool %269 = OpFOrdGreaterThanEqual %265 %268 
                                                      OpStore %263 %269 
                                Private f32* %270 = OpAccessChain %9 %81 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpExtInst %1 4 %271 
                                         f32 %273 = OpExtInst %1 10 %272 
                                                      OpStore %213 %273 
                                        bool %276 = OpLoad %263 
                                                      OpSelectionMerge %278 None 
                                                      OpBranchConditional %276 %277 %280 
                                             %277 = OpLabel 
                                         f32 %279 = OpLoad %213 
                                                      OpStore %275 %279 
                                                      OpBranch %278 
                                             %280 = OpLabel 
                                         f32 %281 = OpLoad %213 
                                         f32 %282 = OpFNegate %281 
                                                      OpStore %275 %282 
                                                      OpBranch %278 
                                             %278 = OpLabel 
                                         f32 %283 = OpLoad %275 
                                                      OpStore %103 %283 
                                Private f32* %284 = OpAccessChain %9 %81 
                                         f32 %285 = OpLoad %284 
                                Private f32* %286 = OpAccessChain %9 %81 
                                                      OpStore %286 %285 
                                Private f32* %287 = OpAccessChain %9 %81 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 43 %288 %180 %179 
                                Private f32* %290 = OpAccessChain %9 %81 
                                                      OpStore %290 %289 
                                      bool_3 %292 = OpLoad %166 
                                        bool %293 = OpCompositeExtract %292 1 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %297 
                                             %294 = OpLabel 
                                         f32 %296 = OpLoad %103 
                                                      OpStore %291 %296 
                                                      OpBranch %295 
                                             %297 = OpLabel 
                                Private f32* %298 = OpAccessChain %9 %81 
                                         f32 %299 = OpLoad %298 
                                                      OpStore %291 %299 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                         f32 %300 = OpLoad %291 
                                Private f32* %301 = OpAccessChain %9 %81 
                                                      OpStore %301 %300 
                                      bool_2 %303 = OpLoad %147 
                                        bool %304 = OpCompositeExtract %303 0 
                                                      OpSelectionMerge %306 None 
                                                      OpBranchConditional %304 %305 %309 
                                             %305 = OpLabel 
                                Private f32* %307 = OpAccessChain %9 %81 
                                         f32 %308 = OpLoad %307 
                                                      OpStore %302 %308 
                                                      OpBranch %306 
                                             %309 = OpLabel 
                                  Input f32* %310 = OpAccessChain %205 %81 
                                         f32 %311 = OpLoad %310 
                                                      OpStore %302 %311 
                                                      OpBranch %306 
                                             %306 = OpLabel 
                                         f32 %312 = OpLoad %302 
                                Private f32* %313 = OpAccessChain %9 %81 
                                                      OpStore %313 %312 
                                  Input f32* %314 = OpAccessChain %205 %73 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %9 %73 
                                                      OpStore %316 %315 
                  read_only Texture2DSampled %322 = OpLoad %321 
                                       f32_4 %323 = OpLoad %9 
                                       f32_2 %324 = OpVectorShuffle %323 %323 0 1 
                                       f32_4 %325 = OpImageSampleImplicitLod %322 %324 
                                                      OpStore %317 %325 
                                       f32_2 %327 = OpLoad %72 
                                Uniform f32* %329 = OpAccessChain %18 %328 
                                         f32 %330 = OpLoad %329 
                                Uniform f32* %331 = OpAccessChain %18 %328 
                                         f32 %332 = OpLoad %331 
                                       f32_2 %333 = OpCompositeConstruct %330 %332 
                                         f32 %334 = OpCompositeExtract %333 0 
                                         f32 %335 = OpCompositeExtract %333 1 
                                       f32_2 %336 = OpCompositeConstruct %334 %335 
                                       f32_2 %337 = OpFMul %327 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_2 %339 = OpVectorShuffle %338 %338 0 0 
                                       f32_2 %340 = OpFAdd %337 %339 
                                       f32_4 %341 = OpLoad %326 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 2 3 
                                                      OpStore %326 %342 
                                       f32_2 %343 = OpLoad %72 
                                Uniform f32* %344 = OpAccessChain %18 %328 
                                         f32 %345 = OpLoad %344 
                                Uniform f32* %346 = OpAccessChain %18 %328 
                                         f32 %347 = OpLoad %346 
                                       f32_2 %348 = OpCompositeConstruct %345 %347 
                                         f32 %349 = OpCompositeExtract %348 0 
                                         f32 %350 = OpCompositeExtract %348 1 
                                       f32_2 %351 = OpCompositeConstruct %349 %350 
                                       f32_2 %352 = OpFMul %343 %351 
                                       f32_2 %353 = OpLoad %205 
                                       f32_2 %354 = OpVectorShuffle %353 %353 1 1 
                                       f32_2 %355 = OpFAdd %352 %354 
                                       f32_4 %356 = OpLoad %326 
                                       f32_4 %357 = OpVectorShuffle %356 %355 0 1 4 5 
                                                      OpStore %326 %357 
                  read_only Texture2DSampled %358 = OpLoad %321 
                                       f32_4 %359 = OpLoad %326 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpImageSampleImplicitLod %358 %360 
                                       f32_2 %362 = OpVectorShuffle %361 %361 0 3 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %362 0 4 5 3 
                                                      OpStore %9 %364 
                  read_only Texture2DSampled %366 = OpLoad %321 
                                       f32_4 %367 = OpLoad %326 
                                       f32_2 %368 = OpVectorShuffle %367 %367 1 3 
                                       f32_4 %369 = OpImageSampleImplicitLod %366 %368 
                                       f32_2 %370 = OpVectorShuffle %369 %369 1 3 
                                       f32_4 %371 = OpLoad %365 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 1 2 5 
                                                      OpStore %365 %372 
                                Private f32* %373 = OpAccessChain %130 %81 
                                         f32 %374 = OpLoad %373 
                                Uniform f32* %375 = OpAccessChain %18 %328 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                Private f32* %378 = OpAccessChain %9 %81 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFAdd %377 %379 
                                Private f32* %381 = OpAccessChain %326 %81 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %130 %81 
                                         f32 %383 = OpLoad %382 
                                Uniform f32* %384 = OpAccessChain %18 %328 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFMul %383 %385 
                                  Input f32* %387 = OpAccessChain %205 %73 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFAdd %386 %388 
                                Private f32* %390 = OpAccessChain %326 %73 
                                                      OpStore %390 %389 
                  read_only Texture2DSampled %391 = OpLoad %321 
                                       f32_4 %392 = OpLoad %326 
                                       f32_2 %393 = OpVectorShuffle %392 %392 0 1 
                                       f32_4 %394 = OpImageSampleImplicitLod %391 %393 
                                       f32_2 %395 = OpVectorShuffle %394 %394 2 3 
                                       f32_4 %396 = OpLoad %9 
                                       f32_4 %397 = OpVectorShuffle %396 %395 4 1 2 5 
                                                      OpStore %9 %397 
                                Private f32* %400 = OpAccessChain %9 %399 
                                         f32 %401 = OpLoad %400 
                                Private f32* %403 = OpAccessChain %365 %402 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %401 %404 
                                                      OpStore %398 %405 
                                Private f32* %406 = OpAccessChain %9 %402 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpLoad %398 
                                         f32 %409 = OpFAdd %407 %408 
                                                      OpStore %398 %409 
                                         f32 %410 = OpLoad %398 
                                         f32 %412 = OpFMul %410 %411 
                                                      OpStore %398 %412 
                                      bool_2 %415 = OpLoad %147 
                                        bool %416 = OpCompositeExtract %415 1 
                                                      OpSelectionMerge %418 None 
                                                      OpBranchConditional %416 %417 %421 
                                             %417 = OpLabel 
                                Private f32* %419 = OpAccessChain %365 %81 
                                         f32 %420 = OpLoad %419 
                                                      OpStore %414 %420 
                                                      OpBranch %418 
                                             %421 = OpLabel 
                                Private f32* %422 = OpAccessChain %317 %73 
                                         f32 %423 = OpLoad %422 
                                                      OpStore %414 %423 
                                                      OpBranch %418 
                                             %418 = OpLabel 
                                         f32 %424 = OpLoad %414 
                                Private f32* %425 = OpAccessChain %413 %73 
                                                      OpStore %425 %424 
                                      bool_2 %428 = OpLoad %147 
                                        bool %429 = OpCompositeExtract %428 1 
                                                      OpSelectionMerge %431 None 
                                                      OpBranchConditional %429 %430 %434 
                                             %430 = OpLabel 
                                       f32_4 %432 = OpLoad %9 
                                       f32_2 %433 = OpVectorShuffle %432 %432 1 0 
                                                      OpStore %427 %433 
                                                      OpBranch %431 
                                             %434 = OpLabel 
                                       f32_4 %435 = OpLoad %317 
                                       f32_2 %436 = OpVectorShuffle %435 %435 0 2 
                                                      OpStore %427 %436 
                                                      OpBranch %431 
                                             %431 = OpLabel 
                                       f32_2 %437 = OpLoad %427 
                                       f32_4 %438 = OpLoad %413 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 1 5 3 
                                                      OpStore %413 %439 
                                      bool_2 %441 = OpLoad %147 
                                        bool %442 = OpCompositeExtract %441 1 
                                                      OpSelectionMerge %444 None 
                                                      OpBranchConditional %442 %443 %446 
                                             %443 = OpLabel 
                                         f32 %445 = OpLoad %398 
                                                      OpStore %440 %445 
                                                      OpBranch %444 
                                             %446 = OpLabel 
                                Private f32* %447 = OpAccessChain %317 %402 
                                         f32 %448 = OpLoad %447 
                                                      OpStore %440 %448 
                                                      OpBranch %444 
                                             %444 = OpLabel 
                                         f32 %449 = OpLoad %440 
                                Private f32* %450 = OpAccessChain %413 %402 
                                                      OpStore %450 %449 
                                       f32_4 %452 = OpLoad %413 
                                       f32_4 %455 = OpLoad %454 
                                       f32_4 %456 = OpFMul %452 %455 
                                                      OpStore %451 %456 
                                Private f32* %457 = OpAccessChain %413 %402 
                                         f32 %458 = OpLoad %457 
                                  Input f32* %459 = OpAccessChain %454 %402 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpFMul %458 %460 
                                         f32 %463 = OpFAdd %461 %462 
                                                      OpStore %398 %463 
                                         f32 %464 = OpLoad %398 
                                        bool %465 = OpFOrdLessThan %464 %180 
                                      bool_2 %466 = OpLoad %147 
                                      bool_2 %467 = OpCompositeInsert %465 %466 0 
                                                      OpStore %147 %467 
                                      bool_2 %468 = OpLoad %147 
                                        bool %469 = OpCompositeExtract %468 0 
                                         i32 %470 = OpSelect %469 %27 %34 
                                         i32 %472 = OpIMul %470 %471 
                                        bool %473 = OpINotEqual %472 %34 
                                                      OpSelectionMerge %475 None 
                                                      OpBranchConditional %473 %474 %475 
                                             %474 = OpLabel 
                                                      OpKill
                                             %475 = OpLabel 
                                Private f32* %477 = OpAccessChain %413 %402 
                                         f32 %478 = OpLoad %477 
                                  Input f32* %479 = OpAccessChain %454 %402 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFMul %478 %480 
                                Uniform f32* %483 = OpAccessChain %18 %482 
                                         f32 %484 = OpLoad %483 
                                         f32 %485 = OpFNegate %484 
                                         f32 %486 = OpFAdd %481 %485 
                                                      OpStore %398 %486 
                                         f32 %487 = OpLoad %398 
                                        bool %488 = OpFOrdLessThan %487 %180 
                                      bool_2 %489 = OpLoad %147 
                                      bool_2 %490 = OpCompositeInsert %488 %489 0 
                                                      OpStore %147 %490 
                                      bool_2 %491 = OpLoad %147 
                                        bool %492 = OpCompositeExtract %491 0 
                                         i32 %493 = OpSelect %492 %27 %34 
                                         i32 %494 = OpIMul %493 %471 
                                        bool %495 = OpINotEqual %494 %34 
                                                      OpSelectionMerge %497 None 
                                                      OpBranchConditional %495 %496 %497 
                                             %496 = OpLabel 
                                                      OpKill
                                             %497 = OpLabel 
                                Uniform f32* %500 = OpAccessChain %18 %499 %81 
                                         f32 %501 = OpLoad %500 
                                        bool %502 = OpFOrdEqual %501 %179 
                                      bool_2 %503 = OpLoad %147 
                                      bool_2 %504 = OpCompositeInsert %502 %503 0 
                                                      OpStore %147 %504 
                                                      OpSelectionMerge %507 None 
                                                      OpBranchConditional %505 %506 %507 
                                             %506 = OpLabel 
                                      bool_2 %508 = OpLoad %147 
                                        bool %509 = OpCompositeExtract %508 0 
                                                      OpSelectionMerge %511 None 
                                                      OpBranchConditional %509 %510 %511 
                                             %510 = OpLabel 
                                                      OpBranch %511 
                                             %511 = OpLabel 
                                                      OpBranch %507 
                                             %507 = OpLabel 
                                                      OpSelectionMerge %514 None 
                                                      OpBranchConditional %512 %513 %611 
                                             %513 = OpLabel 
                                Uniform f32* %515 = OpAccessChain %18 %499 %73 
                                         f32 %516 = OpLoad %515 
                                        bool %517 = OpFOrdEqual %516 %179 
                                      bool_2 %518 = OpLoad %147 
                                      bool_2 %519 = OpCompositeInsert %517 %518 0 
                                                      OpStore %147 %519 
                                       f32_3 %524 = OpLoad %523 
                                       f32_3 %525 = OpVectorShuffle %524 %524 1 1 1 
                              Uniform f32_4* %527 = OpAccessChain %18 %526 %27 
                                       f32_4 %528 = OpLoad %527 
                                       f32_3 %529 = OpVectorShuffle %528 %528 0 1 2 
                                       f32_3 %530 = OpFMul %525 %529 
                                                      OpStore %521 %530 
                              Uniform f32_4* %531 = OpAccessChain %18 %526 %34 
                                       f32_4 %532 = OpLoad %531 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpLoad %523 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 0 0 
                                       f32_3 %536 = OpFMul %533 %535 
                                       f32_3 %537 = OpLoad %521 
                                       f32_3 %538 = OpFAdd %536 %537 
                                                      OpStore %521 %538 
                              Uniform f32_4* %539 = OpAccessChain %18 %526 %20 
                                       f32_4 %540 = OpLoad %539 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                       f32_3 %542 = OpLoad %523 
                                       f32_3 %543 = OpVectorShuffle %542 %542 2 2 2 
                                       f32_3 %544 = OpFMul %541 %543 
                                       f32_3 %545 = OpLoad %521 
                                       f32_3 %546 = OpFAdd %544 %545 
                                                      OpStore %521 %546 
                                       f32_3 %547 = OpLoad %521 
                              Uniform f32_4* %548 = OpAccessChain %18 %526 %21 
                                       f32_4 %549 = OpLoad %548 
                                       f32_3 %550 = OpVectorShuffle %549 %549 0 1 2 
                                       f32_3 %551 = OpFAdd %547 %550 
                                                      OpStore %521 %551 
                                      bool_2 %554 = OpLoad %147 
                                        bool %555 = OpCompositeExtract %554 0 
                                                      OpSelectionMerge %557 None 
                                                      OpBranchConditional %555 %556 %559 
                                             %556 = OpLabel 
                                       f32_3 %558 = OpLoad %521 
                                                      OpStore %553 %558 
                                                      OpBranch %557 
                                             %559 = OpLabel 
                                       f32_3 %560 = OpLoad %523 
                                                      OpStore %553 %560 
                                                      OpBranch %557 
                                             %557 = OpLabel 
                                       f32_3 %561 = OpLoad %553 
                                       f32_4 %562 = OpLoad %108 
                                       f32_4 %563 = OpVectorShuffle %562 %561 4 5 6 3 
                                                      OpStore %108 %563 
                                       f32_4 %564 = OpLoad %108 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                              Uniform f32_3* %568 = OpAccessChain %18 %566 
                                       f32_3 %569 = OpLoad %568 
                                       f32_3 %570 = OpFNegate %569 
                                       f32_3 %571 = OpFAdd %565 %570 
                                       f32_4 %572 = OpLoad %108 
                                       f32_4 %573 = OpVectorShuffle %572 %571 4 5 6 3 
                                                      OpStore %108 %573 
                                       f32_4 %574 = OpLoad %108 
                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
                              Uniform f32_3* %577 = OpAccessChain %18 %576 
                                       f32_3 %578 = OpLoad %577 
                                       f32_3 %579 = OpFMul %575 %578 
                                       f32_4 %580 = OpLoad %108 
                                       f32_4 %581 = OpVectorShuffle %580 %579 0 4 5 6 
                                                      OpStore %108 %581 
                                Private f32* %582 = OpAccessChain %108 %73 
                                         f32 %583 = OpLoad %582 
                                         f32 %585 = OpFMul %583 %584 
                                         f32 %587 = OpFAdd %585 %586 
                                Private f32* %588 = OpAccessChain %521 %81 
                                                      OpStore %588 %587 
                                Uniform f32* %589 = OpAccessChain %18 %499 %399 
                                         f32 %590 = OpLoad %589 
                                         f32 %592 = OpFMul %590 %591 
                                         f32 %593 = OpFAdd %592 %586 
                                Private f32* %594 = OpAccessChain %317 %81 
                                                      OpStore %594 %593 
                                Private f32* %595 = OpAccessChain %521 %81 
                                         f32 %596 = OpLoad %595 
                                Private f32* %597 = OpAccessChain %317 %81 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpExtInst %1 40 %596 %598 
                                Private f32* %600 = OpAccessChain %108 %81 
                                                      OpStore %600 %599 
                  read_only Texture3DSampled %605 = OpLoad %604 
                                       f32_4 %606 = OpLoad %108 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 2 3 
                                       f32_4 %608 = OpImageSampleImplicitLod %605 %607 
                                                      OpStore %108 %608 
                                       f32_4 %610 = OpLoad %108 
                                                      OpStore %609 %610 
                                                      OpBranch %514 
                                             %611 = OpLabel 
                                Private f32* %612 = OpAccessChain %609 %81 
                                                      OpStore %612 %179 
                                Private f32* %613 = OpAccessChain %609 %73 
                                                      OpStore %613 %179 
                                Private f32* %614 = OpAccessChain %609 %399 
                                                      OpStore %614 %179 
                                Private f32* %615 = OpAccessChain %609 %402 
                                                      OpStore %615 %179 
                                                      OpBranch %514 
                                             %514 = OpLabel 
                                       f32_4 %616 = OpLoad %609 
                              Uniform f32_4* %617 = OpAccessChain %18 %27 
                                       f32_4 %618 = OpLoad %617 
                                         f32 %619 = OpDot %616 %618 
                                                      OpStore %398 %619 
                                         f32 %620 = OpLoad %398 
                                         f32 %621 = OpExtInst %1 43 %620 %180 %179 
                                                      OpStore %398 %621 
                                       f32_4 %622 = OpLoad %451 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                                       f32_3 %625 = OpLoad %624 
                                       f32_3 %626 = OpFMul %623 %625 
                                       f32_4 %627 = OpLoad %609 
                                       f32_4 %628 = OpVectorShuffle %627 %626 4 5 6 3 
                                                      OpStore %609 %628 
                                       f32_4 %630 = OpLoad %451 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
                              Uniform f32_4* %633 = OpAccessChain %18 %632 
                                       f32_4 %634 = OpLoad %633 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                       f32_3 %636 = OpFMul %631 %635 
                                                      OpStore %629 %636 
                                         f32 %637 = OpLoad %398 
                                       f32_3 %638 = OpCompositeConstruct %637 %637 %637 
                                       f32_3 %639 = OpLoad %629 
                                       f32_3 %640 = OpFMul %638 %639 
                                       f32_4 %641 = OpLoad %451 
                                       f32_4 %642 = OpVectorShuffle %641 %640 4 5 6 3 
                                                      OpStore %451 %642 
                                Private f32* %643 = OpAccessChain %609 %402 
                                                      OpStore %643 %180 
                                       f32_4 %646 = OpLoad %451 
                                       f32_4 %647 = OpLoad %609 
                                       f32_4 %648 = OpFAdd %646 %647 
                                                      OpStore %645 %648 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
float u_xlat20;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat6 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat6 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat3 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = max(u_xlat3, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlitchInterval;
uniform 	float _DispIntensity;
uniform 	float _DispProbability;
uniform 	float _ColorIntensity;
uniform 	float _ColorProbability;
uniform 	float _DispGlitchOn;
uniform 	float _ColorGlitchOn;
uniform 	float _WrapDispCoords;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat16_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat10_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bool u_xlatb10;
vec2 u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].ww + u_xlat0.xy;
    u_xlat10.x = _Time.y / _GlitchInterval;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat5.x = u_xlat0.x + 2.79299998;
    u_xlat1 = u_xlat0.xxxx * vec4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
    u_xlat1 = sin(u_xlat1);
    u_xlat1 = u_xlat1 * vec4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
    u_xlat1 = fract(u_xlat1);
    u_xlat10.xy = u_xlat1.zw + vec2(-0.5, -0.5);
    u_xlat11.xy = u_xlat5.xx * vec2(-91.2228012, 91.2228012);
    u_xlat11.xy = sin(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy * vec2(43758.5469, 43758.5469);
    u_xlat11.xy = fract(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
    u_xlatb1.xy = lessThan(u_xlat1.xyxx, vec4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
    u_xlatb2.xyz = equal(vec4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), vec4(1.0, 1.0, 1.0, 0.0)).xyz;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
    u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
    u_xlat5.x = vs_TEXCOORD0.y / u_xlat5.x;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * 78.2330017;
    u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 43758.5469;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat0.x = u_xlat0.x * _DispIntensity + vs_TEXCOORD0.x;
    u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat16 = fract(abs(u_xlat0.x));
    u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : vs_TEXCOORD0.x;
    u_xlat0.y = vs_TEXCOORD0.y;
    u_xlat2 = texture(_MainTex, u_xlat0.xy);
    u_xlat3.xy = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
    u_xlat3.zw = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + vs_TEXCOORD0.yy;
    u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
    u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
    u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
    u_xlat0.y = u_xlat11.x * _ColorIntensity + vs_TEXCOORD0.y;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
    u_xlat1.x = u_xlat0.w + u_xlat16_1;
    u_xlat0.w = u_xlat1.x * 0.333333343;
    u_xlat0.x = u_xlat10_4.x;
    u_xlat0.y = u_xlat10_3.y;
    u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
    u_xlat1 = u_xlat0 * vs_COLOR0;
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + -0.100000001;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat5.x = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat15 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat15, u_xlat10.x);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat10.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat0.x = u_xlat0.x + u_xlat10_2.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10.x = min(u_xlat0.x, u_xlat10.x);
    u_xlat0.x = (u_xlatb5) ? u_xlat10.x : u_xlat0.x;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 353
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %49 %128 %134 %135 %149 %186 %189 %192 %193 %195 %314 %334 %346 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 RelaxedPrecision 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %49 Location 49 
                                                      OpMemberDecorate %126 0 BuiltIn 126 
                                                      OpMemberDecorate %126 1 BuiltIn 126 
                                                      OpMemberDecorate %126 2 BuiltIn 126 
                                                      OpDecorate %126 Block 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %186 Location 186 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 Location 192 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 Location 195 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %314 Location 314 
                                                      OpDecorate %334 Location 334 
                                                      OpDecorate %346 Location 346 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeStruct %7 %7 %7 %7 %7 %12 %14 %15 %16 %6 %6 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 10 
                                              %22 = OpTypePointer Uniform %6 
                                          f32 %25 = OpConstant 3.674022E-40 
                                          u32 %27 = OpConstant 0 
                                              %28 = OpTypePointer Private %6 
                                          i32 %32 = OpConstant 9 
                                          f32 %39 = OpConstant 3.674022E-40 
                                 Private f32* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                              %48 = OpTypePointer Input %7 
                                 Input f32_4* %49 = OpVariable Input 
                                          u32 %50 = OpConstant 1 
                                              %51 = OpTypePointer Input %6 
                                          i32 %62 = OpConstant 6 
                                          i32 %63 = OpConstant 1 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %68 = OpConstant 0 
                                          i32 %76 = OpConstant 2 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                               Private f32_4* %97 = OpVariable Private 
                                         i32 %100 = OpConstant 8 
                                             %125 = OpTypeArray %6 %50 
                                             %126 = OpTypeStruct %7 %6 %125 
                                             %127 = OpTypePointer Output %126 
        Output struct {f32_4; f32; f32[1];}* %128 = OpVariable Output 
                                             %130 = OpTypePointer Output %7 
                                             %132 = OpTypeVector %6 2 
                                             %133 = OpTypePointer Output %132 
                               Output f32_2* %134 = OpVariable Output 
                                Input f32_4* %135 = OpVariable Input 
                                         i32 %138 = OpConstant 11 
                                             %147 = OpTypeVector %6 3 
                                             %148 = OpTypePointer Input %147 
                                Input f32_3* %149 = OpVariable Input 
                                         i32 %151 = OpConstant 7 
                                         u32 %168 = OpConstant 2 
                                Private f32* %170 = OpVariable Private 
                                             %185 = OpTypePointer Output %147 
                               Output f32_3* %186 = OpVariable Output 
                               Output f32_3* %189 = OpVariable Output 
                               Output f32_4* %192 = OpVariable Output 
                                Input f32_4* %193 = OpVariable Input 
                               Output f32_4* %195 = OpVariable Output 
                              Private f32_4* %197 = OpVariable Private 
                              Private f32_4* %204 = OpVariable Private 
                              Private f32_4* %212 = OpVariable Private 
                                         f32 %248 = OpConstant 3.674022E-40 
                                       f32_4 %249 = OpConstantComposite %248 %248 %248 %248 
                                         i32 %254 = OpConstant 4 
                                       f32_4 %258 = OpConstantComposite %46 %46 %46 %46 
                                         f32 %266 = OpConstant 3.674022E-40 
                                       f32_4 %267 = OpConstantComposite %266 %266 %266 %266 
                                         i32 %274 = OpConstant 5 
                               Output f32_3* %314 = OpVariable Output 
                                         u32 %326 = OpConstant 3 
                                       f32_2 %330 = OpConstantComposite %39 %39 
                               Output f32_4* %334 = OpVariable Output 
                               Output f32_4* %346 = OpVariable Output 
                                             %347 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %23 = OpAccessChain %19 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %26 = OpFAdd %24 %25 
                                 Private f32* %29 = OpAccessChain %9 %27 
                                                      OpStore %29 %26 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                          f32 %31 = OpLoad %30 
                                 Uniform f32* %33 = OpAccessChain %19 %32 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFMul %31 %34 
                                 Private f32* %36 = OpAccessChain %9 %27 
                                                      OpStore %36 %35 
                                 Private f32* %37 = OpAccessChain %9 %27 
                                          f32 %38 = OpLoad %37 
                                          f32 %40 = OpFMul %38 %39 
                                 Private f32* %41 = OpAccessChain %9 %27 
                                                      OpStore %41 %40 
                                 Uniform f32* %43 = OpAccessChain %19 %32 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                                      OpStore %42 %47 
                                   Input f32* %52 = OpAccessChain %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %42 
                                          f32 %55 = OpFMul %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %27 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpFAdd %55 %57 
                                 Private f32* %59 = OpAccessChain %9 %27 
                                                      OpStore %59 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_4 %61 = OpVectorShuffle %60 %60 0 0 0 0 
                               Uniform f32_4* %65 = OpAccessChain %19 %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpFMul %61 %66 
                                                      OpStore %9 %67 
                               Uniform f32_4* %69 = OpAccessChain %19 %62 %68 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %49 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %77 = OpAccessChain %19 %62 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %49 
                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %9 %83 
                                        f32_4 %85 = OpLoad %9 
                               Uniform f32_4* %87 = OpAccessChain %19 %62 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpFAdd %85 %88 
                                                      OpStore %84 %89 
                               Uniform f32_4* %90 = OpAccessChain %19 %62 %86 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpLoad %49 
                                        f32_4 %93 = OpVectorShuffle %92 %92 3 3 3 3 
                                        f32_4 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_4 %96 = OpFAdd %94 %95 
                                                      OpStore %9 %96 
                                        f32_4 %98 = OpLoad %84 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %19 %100 %63 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %99 %102 
                                                      OpStore %97 %103 
                              Uniform f32_4* %104 = OpAccessChain %19 %100 %68 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %84 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %97 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %97 %110 
                              Uniform f32_4* %111 = OpAccessChain %19 %100 %76 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %84 
                                       f32_4 %114 = OpVectorShuffle %113 %113 2 2 2 2 
                                       f32_4 %115 = OpFMul %112 %114 
                                       f32_4 %116 = OpLoad %97 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %97 %117 
                              Uniform f32_4* %118 = OpAccessChain %19 %100 %86 
                                       f32_4 %119 = OpLoad %118 
                                       f32_4 %120 = OpLoad %84 
                                       f32_4 %121 = OpVectorShuffle %120 %120 3 3 3 3 
                                       f32_4 %122 = OpFMul %119 %121 
                                       f32_4 %123 = OpLoad %97 
                                       f32_4 %124 = OpFAdd %122 %123 
                                                      OpStore %84 %124 
                                       f32_4 %129 = OpLoad %84 
                               Output f32_4* %131 = OpAccessChain %128 %68 
                                                      OpStore %131 %129 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                              Uniform f32_4* %139 = OpAccessChain %19 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                              Uniform f32_4* %143 = OpAccessChain %19 %138 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 2 3 
                                       f32_2 %146 = OpFAdd %142 %145 
                                                      OpStore %134 %146 
                                       f32_3 %150 = OpLoad %149 
                              Uniform f32_4* %152 = OpAccessChain %19 %151 %68 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                         f32 %155 = OpDot %150 %154 
                                Private f32* %156 = OpAccessChain %97 %27 
                                                      OpStore %156 %155 
                                       f32_3 %157 = OpLoad %149 
                              Uniform f32_4* %158 = OpAccessChain %19 %151 %63 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                         f32 %161 = OpDot %157 %160 
                                Private f32* %162 = OpAccessChain %97 %50 
                                                      OpStore %162 %161 
                                       f32_3 %163 = OpLoad %149 
                              Uniform f32_4* %164 = OpAccessChain %19 %151 %76 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %163 %166 
                                Private f32* %169 = OpAccessChain %97 %168 
                                                      OpStore %169 %167 
                                       f32_4 %171 = OpLoad %97 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_4 %173 = OpLoad %97 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %172 %174 
                                                      OpStore %170 %175 
                                         f32 %176 = OpLoad %170 
                                         f32 %177 = OpExtInst %1 32 %176 
                                                      OpStore %170 %177 
                                         f32 %178 = OpLoad %170 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %97 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %97 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 6 3 
                                                      OpStore %97 %184 
                                       f32_4 %187 = OpLoad %97 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                                      OpStore %186 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                                      OpStore %189 %191 
                                       f32_4 %194 = OpLoad %193 
                                                      OpStore %192 %194 
                                       f32_4 %196 = OpLoad %9 
                                                      OpStore %195 %196 
                                       f32_4 %198 = OpLoad %9 
                                       f32_4 %199 = OpVectorShuffle %198 %198 1 1 1 1 
                                       f32_4 %200 = OpFNegate %199 
                              Uniform f32_4* %201 = OpAccessChain %19 %76 
                                       f32_4 %202 = OpLoad %201 
                                       f32_4 %203 = OpFAdd %200 %202 
                                                      OpStore %197 %203 
                                       f32_4 %205 = OpLoad %97 
                                       f32_4 %206 = OpVectorShuffle %205 %205 1 1 1 1 
                                       f32_4 %207 = OpLoad %197 
                                       f32_4 %208 = OpFMul %206 %207 
                                                      OpStore %204 %208 
                                       f32_4 %209 = OpLoad %197 
                                       f32_4 %210 = OpLoad %197 
                                       f32_4 %211 = OpFMul %209 %210 
                                                      OpStore %197 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_4 %214 = OpVectorShuffle %213 %213 0 0 0 0 
                                       f32_4 %215 = OpFNegate %214 
                              Uniform f32_4* %216 = OpAccessChain %19 %63 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpFAdd %215 %217 
                                                      OpStore %212 %218 
                                       f32_4 %219 = OpLoad %9 
                                       f32_4 %220 = OpVectorShuffle %219 %219 2 2 2 2 
                                       f32_4 %221 = OpFNegate %220 
                              Uniform f32_4* %222 = OpAccessChain %19 %86 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpFAdd %221 %223 
                                                      OpStore %9 %224 
                                       f32_4 %225 = OpLoad %212 
                                       f32_4 %226 = OpLoad %97 
                                       f32_4 %227 = OpVectorShuffle %226 %226 0 0 0 0 
                                       f32_4 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %204 
                                       f32_4 %230 = OpFAdd %228 %229 
                                                      OpStore %204 %230 
                                       f32_4 %231 = OpLoad %212 
                                       f32_4 %232 = OpLoad %212 
                                       f32_4 %233 = OpFMul %231 %232 
                                       f32_4 %234 = OpLoad %197 
                                       f32_4 %235 = OpFAdd %233 %234 
                                                      OpStore %197 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_4 %237 = OpLoad %9 
                                       f32_4 %238 = OpFMul %236 %237 
                                       f32_4 %239 = OpLoad %197 
                                       f32_4 %240 = OpFAdd %238 %239 
                                                      OpStore %197 %240 
                                       f32_4 %241 = OpLoad %9 
                                       f32_4 %242 = OpLoad %97 
                                       f32_4 %243 = OpVectorShuffle %242 %242 2 2 2 2 
                                       f32_4 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %204 
                                       f32_4 %246 = OpFAdd %244 %245 
                                                      OpStore %9 %246 
                                       f32_4 %247 = OpLoad %197 
                                       f32_4 %250 = OpExtInst %1 40 %247 %249 
                                                      OpStore %97 %250 
                                       f32_4 %251 = OpLoad %97 
                                       f32_4 %252 = OpExtInst %1 32 %251 
                                                      OpStore %197 %252 
                                       f32_4 %253 = OpLoad %97 
                              Uniform f32_4* %255 = OpAccessChain %19 %254 
                                       f32_4 %256 = OpLoad %255 
                                       f32_4 %257 = OpFMul %253 %256 
                                       f32_4 %259 = OpFAdd %257 %258 
                                                      OpStore %97 %259 
                                       f32_4 %260 = OpLoad %97 
                                       f32_4 %261 = OpFDiv %258 %260 
                                                      OpStore %97 %261 
                                       f32_4 %262 = OpLoad %9 
                                       f32_4 %263 = OpLoad %197 
                                       f32_4 %264 = OpFMul %262 %263 
                                                      OpStore %9 %264 
                                       f32_4 %265 = OpLoad %9 
                                       f32_4 %268 = OpExtInst %1 40 %265 %267 
                                                      OpStore %9 %268 
                                       f32_4 %269 = OpLoad %97 
                                       f32_4 %270 = OpLoad %9 
                                       f32_4 %271 = OpFMul %269 %270 
                                                      OpStore %9 %271 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 1 1 1 
                              Uniform f32_4* %275 = OpAccessChain %19 %274 %63 
                                       f32_4 %276 = OpLoad %275 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFMul %273 %277 
                                       f32_4 %279 = OpLoad %97 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %97 %280 
                              Uniform f32_4* %281 = OpAccessChain %19 %274 %68 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpFMul %283 %285 
                                       f32_4 %287 = OpLoad %97 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFAdd %286 %288 
                                       f32_4 %290 = OpLoad %97 
                                       f32_4 %291 = OpVectorShuffle %290 %289 4 5 6 3 
                                                      OpStore %97 %291 
                              Uniform f32_4* %292 = OpAccessChain %19 %274 %76 
                                       f32_4 %293 = OpLoad %292 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                                       f32_4 %295 = OpLoad %9 
                                       f32_3 %296 = OpVectorShuffle %295 %295 2 2 2 
                                       f32_3 %297 = OpFMul %294 %296 
                                       f32_4 %298 = OpLoad %97 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpFAdd %297 %299 
                                       f32_4 %301 = OpLoad %9 
                                       f32_4 %302 = OpVectorShuffle %301 %300 4 5 6 3 
                                                      OpStore %9 %302 
                              Uniform f32_4* %303 = OpAccessChain %19 %274 %86 
                                       f32_4 %304 = OpLoad %303 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_4 %306 = OpLoad %9 
                                       f32_3 %307 = OpVectorShuffle %306 %306 3 3 3 
                                       f32_3 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %9 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_3 %311 = OpFAdd %308 %310 
                                       f32_4 %312 = OpLoad %9 
                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
                                                      OpStore %9 %313 
                                       f32_4 %315 = OpLoad %9 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                                      OpStore %314 %316 
                                Private f32* %317 = OpAccessChain %84 %50 
                                         f32 %318 = OpLoad %317 
                                Uniform f32* %319 = OpAccessChain %19 %68 %27 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFMul %318 %320 
                                Private f32* %322 = OpAccessChain %9 %27 
                                                      OpStore %322 %321 
                                Private f32* %323 = OpAccessChain %9 %27 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFMul %324 %39 
                                Private f32* %327 = OpAccessChain %9 %326 
                                                      OpStore %327 %325 
                                       f32_4 %328 = OpLoad %84 
                                       f32_2 %329 = OpVectorShuffle %328 %328 0 3 
                                       f32_2 %331 = OpFMul %329 %330 
                                       f32_4 %332 = OpLoad %9 
                                       f32_4 %333 = OpVectorShuffle %332 %331 4 1 5 3 
                                                      OpStore %9 %333 
                                       f32_4 %335 = OpLoad %84 
                                       f32_2 %336 = OpVectorShuffle %335 %335 2 3 
                                       f32_4 %337 = OpLoad %334 
                                       f32_4 %338 = OpVectorShuffle %337 %336 0 1 4 5 
                                                      OpStore %334 %338 
                                       f32_4 %339 = OpLoad %9 
                                       f32_2 %340 = OpVectorShuffle %339 %339 2 2 
                                       f32_4 %341 = OpLoad %9 
                                       f32_2 %342 = OpVectorShuffle %341 %341 0 3 
                                       f32_2 %343 = OpFAdd %340 %342 
                                       f32_4 %344 = OpLoad %334 
                                       f32_4 %345 = OpVectorShuffle %344 %343 4 5 2 3 
                                                      OpStore %334 %345 
                                                      OpStore %346 %267 
                                 Output f32* %348 = OpAccessChain %128 %68 %50 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFNegate %349 
                                 Output f32* %351 = OpAccessChain %128 %68 %50 
                                                      OpStore %351 %350 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 759
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %207 %456 %502 %696 %734 %754 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 RelaxedPrecision 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 RelaxedPrecision 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 RelaxedPrecision 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpMemberDecorate %16 14 Offset 16 
                                                      OpMemberDecorate %16 15 Offset 16 
                                                      OpMemberDecorate %16 16 Offset 16 
                                                      OpMemberDecorate %16 17 Offset 16 
                                                      OpMemberDecorate %16 18 Offset 16 
                                                      OpMemberDecorate %16 19 Offset 16 
                                                      OpMemberDecorate %16 20 RelaxedPrecision 
                                                      OpMemberDecorate %16 20 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %323 DescriptorSet 323 
                                                      OpDecorate %323 Binding 323 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %456 Location 456 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %502 Location 502 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %583 SpecId 583 
                                                      OpDecorate %678 DescriptorSet 678 
                                                      OpDecorate %678 Binding 678 
                                                      OpDecorate %683 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %692 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %694 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %696 Location 696 
                                                      OpDecorate %702 RelaxedPrecision 
                                                      OpDecorate %703 RelaxedPrecision 
                                                      OpDecorate %703 DescriptorSet 703 
                                                      OpDecorate %703 Binding 703 
                                                      OpDecorate %704 RelaxedPrecision 
                                                      OpDecorate %707 RelaxedPrecision 
                                                      OpDecorate %708 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %719 RelaxedPrecision 
                                                      OpDecorate %720 RelaxedPrecision 
                                                      OpDecorate %721 RelaxedPrecision 
                                                      OpDecorate %726 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %732 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %734 Location 734 
                                                      OpDecorate %735 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %740 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                                      OpDecorate %749 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %754 Location 754 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %757 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeArray %7 %12 
                                              %16 = OpTypeStruct %7 %10 %7 %7 %7 %13 %14 %7 %15 %10 %10 %7 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %18 = OpVariable Uniform 
                                              %19 = OpTypeInt 32 1 
                                          i32 %20 = OpConstant 5 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypeVector %6 2 
                                              %23 = OpTypePointer Uniform %7 
                                          i32 %27 = OpConstant 6 
                                          i32 %28 = OpConstant 1 
                                          i32 %35 = OpConstant 0 
                                          i32 %48 = OpConstant 2 
                                              %73 = OpTypePointer Private %22 
                               Private f32_2* %74 = OpVariable Private 
                                          u32 %75 = OpConstant 1 
                                              %76 = OpTypePointer Uniform %6 
                                          i32 %79 = OpConstant 12 
                                          u32 %83 = OpConstant 0 
                                              %84 = OpTypePointer Private %6 
                                Private f32* %105 = OpVariable Private 
                                         f32 %108 = OpConstant 3.674022E-40 
                              Private f32_4* %110 = OpVariable Private 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %114 = OpConstant 3.674022E-40 
                                         f32 %115 = OpConstant 3.674022E-40 
                                         f32 %116 = OpConstant 3.674022E-40 
                                       f32_4 %117 = OpConstantComposite %113 %114 %115 %116 
                                         f32 %122 = OpConstant 3.674022E-40 
                                       f32_4 %123 = OpConstantComposite %122 %122 %122 %122 
                                         f32 %129 = OpConstant 3.674022E-40 
                                       f32_2 %130 = OpConstantComposite %129 %129 
                              Private f32_2* %132 = OpVariable Private 
                                       f32_2 %135 = OpConstantComposite %116 %114 
                                       f32_2 %140 = OpConstantComposite %122 %122 
                                             %146 = OpTypeBool 
                                             %147 = OpTypeVector %146 2 
                                             %148 = OpTypePointer Private %147 
                             Private bool_2* %149 = OpVariable Private 
                                         i32 %152 = OpConstant 14 
                                         i32 %155 = OpConstant 16 
                                             %163 = OpTypeVector %146 4 
                                             %166 = OpTypeVector %146 3 
                                             %167 = OpTypePointer Private %166 
                             Private bool_3* %168 = OpVariable Private 
                                         i32 %169 = OpConstant 17 
                                         i32 %172 = OpConstant 19 
                                         i32 %175 = OpConstant 18 
                                         f32 %181 = OpConstant 3.674022E-40 
                                         f32 %182 = OpConstant 3.674022E-40 
                                       f32_4 %183 = OpConstantComposite %181 %181 %181 %182 
                                         f32 %202 = OpConstant 3.674022E-40 
                                         f32 %204 = OpConstant 3.674022E-40 
                                             %206 = OpTypePointer Input %22 
                                Input f32_2* %207 = OpVariable Input 
                                             %208 = OpTypePointer Input %6 
                                Private f32* %215 = OpVariable Private 
                                         f32 %228 = OpConstant 3.674022E-40 
                                         f32 %232 = OpConstant 3.674022E-40 
                                         i32 %256 = OpConstant 13 
                                             %264 = OpTypePointer Private %146 
                               Private bool* %265 = OpVariable Private 
                                             %276 = OpTypePointer Function %6 
                              Private f32_4* %319 = OpVariable Private 
                                             %320 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %321 = OpTypeSampledImage %320 
                                             %322 = OpTypePointer UniformConstant %321 
 UniformConstant read_only Texture2DSampled* %323 = OpVariable UniformConstant 
                              Private f32_4* %328 = OpVariable Private 
                                         i32 %330 = OpConstant 15 
                              Private f32_4* %367 = OpVariable Private 
                                Private f32* %400 = OpVariable Private 
                                         u32 %401 = OpConstant 2 
                                         u32 %404 = OpConstant 3 
                                         f32 %413 = OpConstant 3.674022E-40 
                              Private f32_4* %415 = OpVariable Private 
                                             %428 = OpTypePointer Function %22 
                              Private f32_4* %453 = OpVariable Private 
                                             %455 = OpTypePointer Input %7 
                                Input f32_4* %456 = OpVariable Input 
                                         f32 %464 = OpConstant 3.674022E-40 
                                         i32 %473 = OpConstant -1 
                                         i32 %484 = OpConstant 20 
                                             %501 = OpTypePointer Input %10 
                                Input f32_3* %502 = OpVariable Input 
                                             %505 = OpTypePointer Uniform %10 
                                             %526 = OpTypePointer Private %10 
                              Private f32_3* %527 = OpVariable Private 
                                         i32 %529 = OpConstant 4 
                               Private bool* %572 = OpVariable Private 
                                         i32 %573 = OpConstant 7 
                                        bool %577 = OpConstantFalse 
                                        bool %583 = OpSpecConstantFalse 
                               Private bool* %586 = OpVariable Private 
                                         i32 %592 = OpConstant 8 
                                             %629 = OpTypePointer Function %10 
                                         i32 %643 = OpConstant 10 
                                         i32 %652 = OpConstant 9 
                                         f32 %660 = OpConstant 3.674022E-40 
                                         f32 %662 = OpConstant 3.674022E-40 
                                         f32 %667 = OpConstant 3.674022E-40 
                                             %675 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %676 = OpTypeSampledImage %675 
                                             %677 = OpTypePointer UniformConstant %676 
 UniformConstant read_only Texture3DSampled* %678 = OpVariable UniformConstant 
                              Private f32_4* %683 = OpVariable Private 
                                Input f32_4* %696 = OpVariable Input 
                                Private f32* %702 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %703 = OpVariable UniformConstant 
                              Private f32_3* %708 = OpVariable Private 
                              Private f32_4* %731 = OpVariable Private 
                                Input f32_3* %734 = OpVariable Input 
                                         i32 %741 = OpConstant 11 
                                             %753 = OpTypePointer Output %7 
                               Output f32_4* %754 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %277 = OpVariable Function 
                               Function f32* %293 = OpVariable Function 
                               Function f32* %304 = OpVariable Function 
                               Function f32* %416 = OpVariable Function 
                             Function f32_2* %429 = OpVariable Function 
                               Function f32* %442 = OpVariable Function 
                             Function f32_3* %630 = OpVariable Function 
                               Function f32* %722 = OpVariable Function 
                               Uniform f32_4* %24 = OpAccessChain %18 %20 %21 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 1 1 
                               Uniform f32_4* %29 = OpAccessChain %18 %27 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                                        f32_2 %32 = OpFMul %26 %31 
                                        f32_4 %33 = OpLoad %9 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 2 3 
                                                      OpStore %9 %34 
                               Uniform f32_4* %36 = OpAccessChain %18 %27 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                               Uniform f32_4* %39 = OpAccessChain %18 %20 %21 
                                        f32_4 %40 = OpLoad %39 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 0 
                                        f32_2 %42 = OpFMul %38 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_2 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 2 3 
                                                      OpStore %9 %47 
                               Uniform f32_4* %49 = OpAccessChain %18 %27 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                               Uniform f32_4* %52 = OpAccessChain %18 %20 %21 
                                        f32_4 %53 = OpLoad %52 
                                        f32_2 %54 = OpVectorShuffle %53 %53 2 2 
                                        f32_2 %55 = OpFMul %51 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_2 %57 = OpVectorShuffle %56 %56 0 1 
                                        f32_2 %58 = OpFAdd %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_4 %60 = OpVectorShuffle %59 %58 4 5 2 3 
                                                      OpStore %9 %60 
                               Uniform f32_4* %61 = OpAccessChain %18 %27 %21 
                                        f32_4 %62 = OpLoad %61 
                                        f32_2 %63 = OpVectorShuffle %62 %62 0 1 
                               Uniform f32_4* %64 = OpAccessChain %18 %20 %21 
                                        f32_4 %65 = OpLoad %64 
                                        f32_2 %66 = OpVectorShuffle %65 %65 3 3 
                                        f32_2 %67 = OpFMul %63 %66 
                                        f32_4 %68 = OpLoad %9 
                                        f32_2 %69 = OpVectorShuffle %68 %68 0 1 
                                        f32_2 %70 = OpFAdd %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %70 4 5 2 3 
                                                      OpStore %9 %72 
                                 Uniform f32* %77 = OpAccessChain %18 %35 %75 
                                          f32 %78 = OpLoad %77 
                                 Uniform f32* %80 = OpAccessChain %18 %79 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFDiv %78 %81 
                                 Private f32* %85 = OpAccessChain %74 %83 
                                                      OpStore %85 %82 
                                 Private f32* %86 = OpAccessChain %74 %83 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpExtInst %1 8 %87 
                                 Private f32* %89 = OpAccessChain %74 %83 
                                                      OpStore %89 %88 
                                 Private f32* %90 = OpAccessChain %74 %83 
                                          f32 %91 = OpLoad %90 
                                 Uniform f32* %92 = OpAccessChain %18 %79 
                                          f32 %93 = OpLoad %92 
                                          f32 %94 = OpFMul %91 %93 
                                 Private f32* %95 = OpAccessChain %9 %83 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFAdd %94 %96 
                                 Private f32* %98 = OpAccessChain %9 %83 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %9 %75 
                                         f32 %100 = OpLoad %99 
                                Private f32* %101 = OpAccessChain %9 %83 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFAdd %100 %102 
                                Private f32* %104 = OpAccessChain %9 %83 
                                                      OpStore %104 %103 
                                Private f32* %106 = OpAccessChain %9 %83 
                                         f32 %107 = OpLoad %106 
                                         f32 %109 = OpFAdd %107 %108 
                                                      OpStore %105 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_4 %112 = OpVectorShuffle %111 %111 0 0 0 0 
                                       f32_4 %118 = OpFMul %112 %117 
                                                      OpStore %110 %118 
                                       f32_4 %119 = OpLoad %110 
                                       f32_4 %120 = OpExtInst %1 13 %119 
                                                      OpStore %110 %120 
                                       f32_4 %121 = OpLoad %110 
                                       f32_4 %124 = OpFMul %121 %123 
                                                      OpStore %110 %124 
                                       f32_4 %125 = OpLoad %110 
                                       f32_4 %126 = OpExtInst %1 10 %125 
                                                      OpStore %110 %126 
                                       f32_4 %127 = OpLoad %110 
                                       f32_2 %128 = OpVectorShuffle %127 %127 2 3 
                                       f32_2 %131 = OpFAdd %128 %130 
                                                      OpStore %74 %131 
                                         f32 %133 = OpLoad %105 
                                       f32_2 %134 = OpCompositeConstruct %133 %133 
                                       f32_2 %136 = OpFMul %134 %135 
                                                      OpStore %132 %136 
                                       f32_2 %137 = OpLoad %132 
                                       f32_2 %138 = OpExtInst %1 13 %137 
                                                      OpStore %132 %138 
                                       f32_2 %139 = OpLoad %132 
                                       f32_2 %141 = OpFMul %139 %140 
                                                      OpStore %132 %141 
                                       f32_2 %142 = OpLoad %132 
                                       f32_2 %143 = OpExtInst %1 10 %142 
                                                      OpStore %132 %143 
                                       f32_2 %144 = OpLoad %132 
                                       f32_2 %145 = OpFAdd %144 %130 
                                                      OpStore %132 %145 
                                       f32_4 %150 = OpLoad %110 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 1 0 0 
                                Uniform f32* %153 = OpAccessChain %18 %152 
                                         f32 %154 = OpLoad %153 
                                Uniform f32* %156 = OpAccessChain %18 %155 
                                         f32 %157 = OpLoad %156 
                                Uniform f32* %158 = OpAccessChain %18 %152 
                                         f32 %159 = OpLoad %158 
                                Uniform f32* %160 = OpAccessChain %18 %152 
                                         f32 %161 = OpLoad %160 
                                       f32_4 %162 = OpCompositeConstruct %154 %157 %159 %161 
                                      bool_4 %164 = OpFOrdLessThan %151 %162 
                                      bool_2 %165 = OpVectorShuffle %164 %164 0 1 
                                                      OpStore %149 %165 
                                Uniform f32* %170 = OpAccessChain %18 %169 
                                         f32 %171 = OpLoad %170 
                                Uniform f32* %173 = OpAccessChain %18 %172 
                                         f32 %174 = OpLoad %173 
                                Uniform f32* %176 = OpAccessChain %18 %175 
                                         f32 %177 = OpLoad %176 
                                Uniform f32* %178 = OpAccessChain %18 %169 
                                         f32 %179 = OpLoad %178 
                                       f32_4 %180 = OpCompositeConstruct %171 %174 %177 %179 
                                      bool_4 %184 = OpFOrdEqual %180 %183 
                                      bool_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                                      OpStore %168 %185 
                                      bool_2 %186 = OpLoad %149 
                                        bool %187 = OpCompositeExtract %186 0 
                                      bool_3 %188 = OpLoad %168 
                                        bool %189 = OpCompositeExtract %188 0 
                                        bool %190 = OpLogicalAnd %187 %189 
                                      bool_2 %191 = OpLoad %149 
                                      bool_2 %192 = OpCompositeInsert %190 %191 0 
                                                      OpStore %149 %192 
                                      bool_2 %193 = OpLoad %149 
                                        bool %194 = OpCompositeExtract %193 1 
                                      bool_3 %195 = OpLoad %168 
                                        bool %196 = OpCompositeExtract %195 2 
                                        bool %197 = OpLogicalAnd %194 %196 
                                      bool_2 %198 = OpLoad %149 
                                      bool_2 %199 = OpCompositeInsert %197 %198 1 
                                                      OpStore %149 %199 
                                Private f32* %200 = OpAccessChain %132 %75 
                                         f32 %201 = OpLoad %200 
                                         f32 %203 = OpFMul %201 %202 
                                         f32 %205 = OpFAdd %203 %204 
                                                      OpStore %105 %205 
                                  Input f32* %209 = OpAccessChain %207 %75 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpLoad %105 
                                         f32 %212 = OpFDiv %210 %211 
                                                      OpStore %105 %212 
                                         f32 %213 = OpLoad %105 
                                         f32 %214 = OpExtInst %1 8 %213 
                                                      OpStore %105 %214 
                                Private f32* %216 = OpAccessChain %9 %83 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFNegate %217 
                                         f32 %219 = OpLoad %105 
                                         f32 %220 = OpFAdd %218 %219 
                                                      OpStore %215 %220 
                                Private f32* %221 = OpAccessChain %9 %83 
                                         f32 %222 = OpLoad %221 
                                         f32 %223 = OpLoad %105 
                                         f32 %224 = OpFAdd %222 %223 
                                Private f32* %225 = OpAccessChain %9 %83 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %9 %83 
                                         f32 %227 = OpLoad %226 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %9 %83 
                                                      OpStore %230 %229 
                                         f32 %231 = OpLoad %215 
                                         f32 %233 = OpFMul %231 %232 
                                Private f32* %234 = OpAccessChain %9 %83 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFAdd %233 %235 
                                Private f32* %237 = OpAccessChain %9 %83 
                                                      OpStore %237 %236 
                                Private f32* %238 = OpAccessChain %9 %83 
                                         f32 %239 = OpLoad %238 
                                         f32 %240 = OpExtInst %1 13 %239 
                                Private f32* %241 = OpAccessChain %9 %83 
                                                      OpStore %241 %240 
                                Private f32* %242 = OpAccessChain %9 %83 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFMul %243 %122 
                                Private f32* %245 = OpAccessChain %9 %83 
                                                      OpStore %245 %244 
                                Private f32* %246 = OpAccessChain %9 %83 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpExtInst %1 10 %247 
                                Private f32* %249 = OpAccessChain %9 %83 
                                                      OpStore %249 %248 
                                Private f32* %250 = OpAccessChain %9 %83 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFAdd %251 %129 
                                Private f32* %253 = OpAccessChain %9 %83 
                                                      OpStore %253 %252 
                                Private f32* %254 = OpAccessChain %9 %83 
                                         f32 %255 = OpLoad %254 
                                Uniform f32* %257 = OpAccessChain %18 %256 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFMul %255 %258 
                                  Input f32* %260 = OpAccessChain %207 %83 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpFAdd %259 %261 
                                Private f32* %263 = OpAccessChain %9 %83 
                                                      OpStore %263 %262 
                                Private f32* %266 = OpAccessChain %9 %83 
                                         f32 %267 = OpLoad %266 
                                Private f32* %268 = OpAccessChain %9 %83 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                        bool %271 = OpFOrdGreaterThanEqual %267 %270 
                                                      OpStore %265 %271 
                                Private f32* %272 = OpAccessChain %9 %83 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpExtInst %1 4 %273 
                                         f32 %275 = OpExtInst %1 10 %274 
                                                      OpStore %215 %275 
                                        bool %278 = OpLoad %265 
                                                      OpSelectionMerge %280 None 
                                                      OpBranchConditional %278 %279 %282 
                                             %279 = OpLabel 
                                         f32 %281 = OpLoad %215 
                                                      OpStore %277 %281 
                                                      OpBranch %280 
                                             %282 = OpLabel 
                                         f32 %283 = OpLoad %215 
                                         f32 %284 = OpFNegate %283 
                                                      OpStore %277 %284 
                                                      OpBranch %280 
                                             %280 = OpLabel 
                                         f32 %285 = OpLoad %277 
                                                      OpStore %105 %285 
                                Private f32* %286 = OpAccessChain %9 %83 
                                         f32 %287 = OpLoad %286 
                                Private f32* %288 = OpAccessChain %9 %83 
                                                      OpStore %288 %287 
                                Private f32* %289 = OpAccessChain %9 %83 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpExtInst %1 43 %290 %182 %181 
                                Private f32* %292 = OpAccessChain %9 %83 
                                                      OpStore %292 %291 
                                      bool_3 %294 = OpLoad %168 
                                        bool %295 = OpCompositeExtract %294 1 
                                                      OpSelectionMerge %297 None 
                                                      OpBranchConditional %295 %296 %299 
                                             %296 = OpLabel 
                                         f32 %298 = OpLoad %105 
                                                      OpStore %293 %298 
                                                      OpBranch %297 
                                             %299 = OpLabel 
                                Private f32* %300 = OpAccessChain %9 %83 
                                         f32 %301 = OpLoad %300 
                                                      OpStore %293 %301 
                                                      OpBranch %297 
                                             %297 = OpLabel 
                                         f32 %302 = OpLoad %293 
                                Private f32* %303 = OpAccessChain %9 %83 
                                                      OpStore %303 %302 
                                      bool_2 %305 = OpLoad %149 
                                        bool %306 = OpCompositeExtract %305 0 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %306 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %9 %83 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %304 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                  Input f32* %312 = OpAccessChain %207 %83 
                                         f32 %313 = OpLoad %312 
                                                      OpStore %304 %313 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %314 = OpLoad %304 
                                Private f32* %315 = OpAccessChain %9 %83 
                                                      OpStore %315 %314 
                                  Input f32* %316 = OpAccessChain %207 %75 
                                         f32 %317 = OpLoad %316 
                                Private f32* %318 = OpAccessChain %9 %75 
                                                      OpStore %318 %317 
                  read_only Texture2DSampled %324 = OpLoad %323 
                                       f32_4 %325 = OpLoad %9 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_4 %327 = OpImageSampleImplicitLod %324 %326 
                                                      OpStore %319 %327 
                                       f32_2 %329 = OpLoad %74 
                                Uniform f32* %331 = OpAccessChain %18 %330 
                                         f32 %332 = OpLoad %331 
                                Uniform f32* %333 = OpAccessChain %18 %330 
                                         f32 %334 = OpLoad %333 
                                       f32_2 %335 = OpCompositeConstruct %332 %334 
                                         f32 %336 = OpCompositeExtract %335 0 
                                         f32 %337 = OpCompositeExtract %335 1 
                                       f32_2 %338 = OpCompositeConstruct %336 %337 
                                       f32_2 %339 = OpFMul %329 %338 
                                       f32_4 %340 = OpLoad %9 
                                       f32_2 %341 = OpVectorShuffle %340 %340 0 0 
                                       f32_2 %342 = OpFAdd %339 %341 
                                       f32_4 %343 = OpLoad %328 
                                       f32_4 %344 = OpVectorShuffle %343 %342 4 5 2 3 
                                                      OpStore %328 %344 
                                       f32_2 %345 = OpLoad %74 
                                Uniform f32* %346 = OpAccessChain %18 %330 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %348 = OpAccessChain %18 %330 
                                         f32 %349 = OpLoad %348 
                                       f32_2 %350 = OpCompositeConstruct %347 %349 
                                         f32 %351 = OpCompositeExtract %350 0 
                                         f32 %352 = OpCompositeExtract %350 1 
                                       f32_2 %353 = OpCompositeConstruct %351 %352 
                                       f32_2 %354 = OpFMul %345 %353 
                                       f32_2 %355 = OpLoad %207 
                                       f32_2 %356 = OpVectorShuffle %355 %355 1 1 
                                       f32_2 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %328 
                                       f32_4 %359 = OpVectorShuffle %358 %357 0 1 4 5 
                                                      OpStore %328 %359 
                  read_only Texture2DSampled %360 = OpLoad %323 
                                       f32_4 %361 = OpLoad %328 
                                       f32_2 %362 = OpVectorShuffle %361 %361 0 2 
                                       f32_4 %363 = OpImageSampleImplicitLod %360 %362 
                                       f32_2 %364 = OpVectorShuffle %363 %363 0 3 
                                       f32_4 %365 = OpLoad %9 
                                       f32_4 %366 = OpVectorShuffle %365 %364 0 4 5 3 
                                                      OpStore %9 %366 
                  read_only Texture2DSampled %368 = OpLoad %323 
                                       f32_4 %369 = OpLoad %328 
                                       f32_2 %370 = OpVectorShuffle %369 %369 1 3 
                                       f32_4 %371 = OpImageSampleImplicitLod %368 %370 
                                       f32_2 %372 = OpVectorShuffle %371 %371 1 3 
                                       f32_4 %373 = OpLoad %367 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 1 2 5 
                                                      OpStore %367 %374 
                                Private f32* %375 = OpAccessChain %132 %83 
                                         f32 %376 = OpLoad %375 
                                Uniform f32* %377 = OpAccessChain %18 %330 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpFMul %376 %378 
                                Private f32* %380 = OpAccessChain %9 %83 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFAdd %379 %381 
                                Private f32* %383 = OpAccessChain %328 %83 
                                                      OpStore %383 %382 
                                Private f32* %384 = OpAccessChain %132 %83 
                                         f32 %385 = OpLoad %384 
                                Uniform f32* %386 = OpAccessChain %18 %330 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpFMul %385 %387 
                                  Input f32* %389 = OpAccessChain %207 %75 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpFAdd %388 %390 
                                Private f32* %392 = OpAccessChain %328 %75 
                                                      OpStore %392 %391 
                  read_only Texture2DSampled %393 = OpLoad %323 
                                       f32_4 %394 = OpLoad %328 
                                       f32_2 %395 = OpVectorShuffle %394 %394 0 1 
                                       f32_4 %396 = OpImageSampleImplicitLod %393 %395 
                                       f32_2 %397 = OpVectorShuffle %396 %396 2 3 
                                       f32_4 %398 = OpLoad %9 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 1 2 5 
                                                      OpStore %9 %399 
                                Private f32* %402 = OpAccessChain %9 %401 
                                         f32 %403 = OpLoad %402 
                                Private f32* %405 = OpAccessChain %367 %404 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFAdd %403 %406 
                                                      OpStore %400 %407 
                                Private f32* %408 = OpAccessChain %9 %404 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpLoad %400 
                                         f32 %411 = OpFAdd %409 %410 
                                                      OpStore %400 %411 
                                         f32 %412 = OpLoad %400 
                                         f32 %414 = OpFMul %412 %413 
                                                      OpStore %400 %414 
                                      bool_2 %417 = OpLoad %149 
                                        bool %418 = OpCompositeExtract %417 1 
                                                      OpSelectionMerge %420 None 
                                                      OpBranchConditional %418 %419 %423 
                                             %419 = OpLabel 
                                Private f32* %421 = OpAccessChain %367 %83 
                                         f32 %422 = OpLoad %421 
                                                      OpStore %416 %422 
                                                      OpBranch %420 
                                             %423 = OpLabel 
                                Private f32* %424 = OpAccessChain %319 %75 
                                         f32 %425 = OpLoad %424 
                                                      OpStore %416 %425 
                                                      OpBranch %420 
                                             %420 = OpLabel 
                                         f32 %426 = OpLoad %416 
                                Private f32* %427 = OpAccessChain %415 %75 
                                                      OpStore %427 %426 
                                      bool_2 %430 = OpLoad %149 
                                        bool %431 = OpCompositeExtract %430 1 
                                                      OpSelectionMerge %433 None 
                                                      OpBranchConditional %431 %432 %436 
                                             %432 = OpLabel 
                                       f32_4 %434 = OpLoad %9 
                                       f32_2 %435 = OpVectorShuffle %434 %434 1 0 
                                                      OpStore %429 %435 
                                                      OpBranch %433 
                                             %436 = OpLabel 
                                       f32_4 %437 = OpLoad %319 
                                       f32_2 %438 = OpVectorShuffle %437 %437 0 2 
                                                      OpStore %429 %438 
                                                      OpBranch %433 
                                             %433 = OpLabel 
                                       f32_2 %439 = OpLoad %429 
                                       f32_4 %440 = OpLoad %415 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 1 5 3 
                                                      OpStore %415 %441 
                                      bool_2 %443 = OpLoad %149 
                                        bool %444 = OpCompositeExtract %443 1 
                                                      OpSelectionMerge %446 None 
                                                      OpBranchConditional %444 %445 %448 
                                             %445 = OpLabel 
                                         f32 %447 = OpLoad %400 
                                                      OpStore %442 %447 
                                                      OpBranch %446 
                                             %448 = OpLabel 
                                Private f32* %449 = OpAccessChain %319 %404 
                                         f32 %450 = OpLoad %449 
                                                      OpStore %442 %450 
                                                      OpBranch %446 
                                             %446 = OpLabel 
                                         f32 %451 = OpLoad %442 
                                Private f32* %452 = OpAccessChain %415 %404 
                                                      OpStore %452 %451 
                                       f32_4 %454 = OpLoad %415 
                                       f32_4 %457 = OpLoad %456 
                                       f32_4 %458 = OpFMul %454 %457 
                                                      OpStore %453 %458 
                                Private f32* %459 = OpAccessChain %415 %404 
                                         f32 %460 = OpLoad %459 
                                  Input f32* %461 = OpAccessChain %456 %404 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFMul %460 %462 
                                         f32 %465 = OpFAdd %463 %464 
                                                      OpStore %400 %465 
                                         f32 %466 = OpLoad %400 
                                        bool %467 = OpFOrdLessThan %466 %182 
                                      bool_2 %468 = OpLoad %149 
                                      bool_2 %469 = OpCompositeInsert %467 %468 0 
                                                      OpStore %149 %469 
                                      bool_2 %470 = OpLoad %149 
                                        bool %471 = OpCompositeExtract %470 0 
                                         i32 %472 = OpSelect %471 %28 %35 
                                         i32 %474 = OpIMul %472 %473 
                                        bool %475 = OpINotEqual %474 %35 
                                                      OpSelectionMerge %477 None 
                                                      OpBranchConditional %475 %476 %477 
                                             %476 = OpLabel 
                                                      OpKill
                                             %477 = OpLabel 
                                Private f32* %479 = OpAccessChain %415 %404 
                                         f32 %480 = OpLoad %479 
                                  Input f32* %481 = OpAccessChain %456 %404 
                                         f32 %482 = OpLoad %481 
                                         f32 %483 = OpFMul %480 %482 
                                Uniform f32* %485 = OpAccessChain %18 %484 
                                         f32 %486 = OpLoad %485 
                                         f32 %487 = OpFNegate %486 
                                         f32 %488 = OpFAdd %483 %487 
                                                      OpStore %400 %488 
                                         f32 %489 = OpLoad %400 
                                        bool %490 = OpFOrdLessThan %489 %182 
                                      bool_2 %491 = OpLoad %149 
                                      bool_2 %492 = OpCompositeInsert %490 %491 0 
                                                      OpStore %149 %492 
                                      bool_2 %493 = OpLoad %149 
                                        bool %494 = OpCompositeExtract %493 0 
                                         i32 %495 = OpSelect %494 %28 %35 
                                         i32 %496 = OpIMul %495 %473 
                                        bool %497 = OpINotEqual %496 %35 
                                                      OpSelectionMerge %499 None 
                                                      OpBranchConditional %497 %498 %499 
                                             %498 = OpLabel 
                                                      OpKill
                                             %499 = OpLabel 
                                       f32_3 %503 = OpLoad %502 
                                       f32_3 %504 = OpFNegate %503 
                              Uniform f32_3* %506 = OpAccessChain %18 %28 
                                       f32_3 %507 = OpLoad %506 
                                       f32_3 %508 = OpFAdd %504 %507 
                                       f32_4 %509 = OpLoad %110 
                                       f32_4 %510 = OpVectorShuffle %509 %508 4 5 6 3 
                                                      OpStore %110 %510 
                                Uniform f32* %511 = OpAccessChain %18 %27 %35 %401 
                                         f32 %512 = OpLoad %511 
                                Private f32* %513 = OpAccessChain %319 %83 
                                                      OpStore %513 %512 
                                Uniform f32* %514 = OpAccessChain %18 %27 %28 %401 
                                         f32 %515 = OpLoad %514 
                                Private f32* %516 = OpAccessChain %319 %75 
                                                      OpStore %516 %515 
                                Uniform f32* %517 = OpAccessChain %18 %27 %48 %401 
                                         f32 %518 = OpLoad %517 
                                Private f32* %519 = OpAccessChain %319 %401 
                                                      OpStore %519 %518 
                                       f32_4 %520 = OpLoad %110 
                                       f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
                                       f32_4 %522 = OpLoad %319 
                                       f32_3 %523 = OpVectorShuffle %522 %522 0 1 2 
                                         f32 %524 = OpDot %521 %523 
                                Private f32* %525 = OpAccessChain %110 %83 
                                                      OpStore %525 %524 
                                       f32_3 %528 = OpLoad %502 
                              Uniform f32_4* %530 = OpAccessChain %18 %529 
                                       f32_4 %531 = OpLoad %530 
                                       f32_3 %532 = OpVectorShuffle %531 %531 0 1 2 
                                       f32_3 %533 = OpFNegate %532 
                                       f32_3 %534 = OpFAdd %528 %533 
                                                      OpStore %527 %534 
                                       f32_3 %535 = OpLoad %527 
                                       f32_3 %536 = OpLoad %527 
                                         f32 %537 = OpDot %535 %536 
                                Private f32* %538 = OpAccessChain %527 %83 
                                                      OpStore %538 %537 
                                Private f32* %539 = OpAccessChain %527 %83 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpExtInst %1 31 %540 
                                Private f32* %542 = OpAccessChain %527 %83 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %110 %83 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFNegate %544 
                                Private f32* %546 = OpAccessChain %527 %83 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpFAdd %545 %547 
                                Private f32* %549 = OpAccessChain %527 %83 
                                                      OpStore %549 %548 
                                Uniform f32* %550 = OpAccessChain %18 %529 %404 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %527 %83 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                Private f32* %555 = OpAccessChain %110 %83 
                                         f32 %556 = OpLoad %555 
                                         f32 %557 = OpFAdd %554 %556 
                                Private f32* %558 = OpAccessChain %110 %83 
                                                      OpStore %558 %557 
                                Private f32* %559 = OpAccessChain %110 %83 
                                         f32 %560 = OpLoad %559 
                                Uniform f32* %561 = OpAccessChain %18 %21 %401 
                                         f32 %562 = OpLoad %561 
                                         f32 %563 = OpFMul %560 %562 
                                Uniform f32* %564 = OpAccessChain %18 %21 %404 
                                         f32 %565 = OpLoad %564 
                                         f32 %566 = OpFAdd %563 %565 
                                Private f32* %567 = OpAccessChain %110 %83 
                                                      OpStore %567 %566 
                                Private f32* %568 = OpAccessChain %110 %83 
                                         f32 %569 = OpLoad %568 
                                         f32 %570 = OpExtInst %1 43 %569 %182 %181 
                                Private f32* %571 = OpAccessChain %110 %83 
                                                      OpStore %571 %570 
                                Uniform f32* %574 = OpAccessChain %18 %573 %83 
                                         f32 %575 = OpLoad %574 
                                        bool %576 = OpFOrdEqual %575 %181 
                                                      OpStore %572 %576 
                                                      OpSelectionMerge %579 None 
                                                      OpBranchConditional %577 %578 %579 
                                             %578 = OpLabel 
                                        bool %580 = OpLoad %572 
                                                      OpSelectionMerge %582 None 
                                                      OpBranchConditional %580 %581 %582 
                                             %581 = OpLabel 
                                                      OpBranch %582 
                                             %582 = OpLabel 
                                                      OpBranch %579 
                                             %579 = OpLabel 
                                                      OpSelectionMerge %585 None 
                                                      OpBranchConditional %583 %584 %685 
                                             %584 = OpLabel 
                                Uniform f32* %587 = OpAccessChain %18 %573 %75 
                                         f32 %588 = OpLoad %587 
                                        bool %589 = OpFOrdEqual %588 %181 
                                                      OpStore %586 %589 
                                       f32_3 %590 = OpLoad %502 
                                       f32_3 %591 = OpVectorShuffle %590 %590 1 1 1 
                              Uniform f32_4* %593 = OpAccessChain %18 %592 %28 
                                       f32_4 %594 = OpLoad %593 
                                       f32_3 %595 = OpVectorShuffle %594 %594 0 1 2 
                                       f32_3 %596 = OpFMul %591 %595 
                                       f32_4 %597 = OpLoad %319 
                                       f32_4 %598 = OpVectorShuffle %597 %596 4 5 6 3 
                                                      OpStore %319 %598 
                              Uniform f32_4* %599 = OpAccessChain %18 %592 %35 
                                       f32_4 %600 = OpLoad %599 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_3 %602 = OpLoad %502 
                                       f32_3 %603 = OpVectorShuffle %602 %602 0 0 0 
                                       f32_3 %604 = OpFMul %601 %603 
                                       f32_4 %605 = OpLoad %319 
                                       f32_3 %606 = OpVectorShuffle %605 %605 0 1 2 
                                       f32_3 %607 = OpFAdd %604 %606 
                                       f32_4 %608 = OpLoad %319 
                                       f32_4 %609 = OpVectorShuffle %608 %607 4 5 6 3 
                                                      OpStore %319 %609 
                              Uniform f32_4* %610 = OpAccessChain %18 %592 %48 
                                       f32_4 %611 = OpLoad %610 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 1 2 
                                       f32_3 %613 = OpLoad %502 
                                       f32_3 %614 = OpVectorShuffle %613 %613 2 2 2 
                                       f32_3 %615 = OpFMul %612 %614 
                                       f32_4 %616 = OpLoad %319 
                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
                                       f32_3 %618 = OpFAdd %615 %617 
                                       f32_4 %619 = OpLoad %319 
                                       f32_4 %620 = OpVectorShuffle %619 %618 4 5 6 3 
                                                      OpStore %319 %620 
                                       f32_4 %621 = OpLoad %319 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
                              Uniform f32_4* %623 = OpAccessChain %18 %592 %21 
                                       f32_4 %624 = OpLoad %623 
                                       f32_3 %625 = OpVectorShuffle %624 %624 0 1 2 
                                       f32_3 %626 = OpFAdd %622 %625 
                                       f32_4 %627 = OpLoad %319 
                                       f32_4 %628 = OpVectorShuffle %627 %626 4 5 6 3 
                                                      OpStore %319 %628 
                                        bool %631 = OpLoad %586 
                                                      OpSelectionMerge %633 None 
                                                      OpBranchConditional %631 %632 %636 
                                             %632 = OpLabel 
                                       f32_4 %634 = OpLoad %319 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                                      OpStore %630 %635 
                                                      OpBranch %633 
                                             %636 = OpLabel 
                                       f32_3 %637 = OpLoad %502 
                                                      OpStore %630 %637 
                                                      OpBranch %633 
                                             %633 = OpLabel 
                                       f32_3 %638 = OpLoad %630 
                                       f32_4 %639 = OpLoad %319 
                                       f32_4 %640 = OpVectorShuffle %639 %638 4 5 6 3 
                                                      OpStore %319 %640 
                                       f32_4 %641 = OpLoad %319 
                                       f32_3 %642 = OpVectorShuffle %641 %641 0 1 2 
                              Uniform f32_3* %644 = OpAccessChain %18 %643 
                                       f32_3 %645 = OpLoad %644 
                                       f32_3 %646 = OpFNegate %645 
                                       f32_3 %647 = OpFAdd %642 %646 
                                       f32_4 %648 = OpLoad %319 
                                       f32_4 %649 = OpVectorShuffle %648 %647 4 5 6 3 
                                                      OpStore %319 %649 
                                       f32_4 %650 = OpLoad %319 
                                       f32_3 %651 = OpVectorShuffle %650 %650 0 1 2 
                              Uniform f32_3* %653 = OpAccessChain %18 %652 
                                       f32_3 %654 = OpLoad %653 
                                       f32_3 %655 = OpFMul %651 %654 
                                       f32_4 %656 = OpLoad %319 
                                       f32_4 %657 = OpVectorShuffle %656 %655 0 4 5 6 
                                                      OpStore %319 %657 
                                Private f32* %658 = OpAccessChain %319 %75 
                                         f32 %659 = OpLoad %658 
                                         f32 %661 = OpFMul %659 %660 
                                         f32 %663 = OpFAdd %661 %662 
                                Private f32* %664 = OpAccessChain %132 %83 
                                                      OpStore %664 %663 
                                Uniform f32* %665 = OpAccessChain %18 %573 %401 
                                         f32 %666 = OpLoad %665 
                                         f32 %668 = OpFMul %666 %667 
                                         f32 %669 = OpFAdd %668 %662 
                                                      OpStore %215 %669 
                                         f32 %670 = OpLoad %215 
                                Private f32* %671 = OpAccessChain %132 %83 
                                         f32 %672 = OpLoad %671 
                                         f32 %673 = OpExtInst %1 40 %670 %672 
                                Private f32* %674 = OpAccessChain %319 %83 
                                                      OpStore %674 %673 
                  read_only Texture3DSampled %679 = OpLoad %678 
                                       f32_4 %680 = OpLoad %319 
                                       f32_3 %681 = OpVectorShuffle %680 %680 0 2 3 
                                       f32_4 %682 = OpImageSampleImplicitLod %679 %681 
                                                      OpStore %319 %682 
                                       f32_4 %684 = OpLoad %319 
                                                      OpStore %683 %684 
                                                      OpBranch %585 
                                             %685 = OpLabel 
                                Private f32* %686 = OpAccessChain %683 %83 
                                                      OpStore %686 %181 
                                Private f32* %687 = OpAccessChain %683 %75 
                                                      OpStore %687 %181 
                                Private f32* %688 = OpAccessChain %683 %401 
                                                      OpStore %688 %181 
                                Private f32* %689 = OpAccessChain %683 %404 
                                                      OpStore %689 %181 
                                                      OpBranch %585 
                                             %585 = OpLabel 
                                       f32_4 %690 = OpLoad %683 
                              Uniform f32_4* %691 = OpAccessChain %18 %48 
                                       f32_4 %692 = OpLoad %691 
                                         f32 %693 = OpDot %690 %692 
                                                      OpStore %400 %693 
                                         f32 %694 = OpLoad %400 
                                         f32 %695 = OpExtInst %1 43 %694 %182 %181 
                                                      OpStore %400 %695 
                                       f32_4 %697 = OpLoad %696 
                                       f32_2 %698 = OpVectorShuffle %697 %697 0 1 
                                       f32_4 %699 = OpLoad %696 
                                       f32_2 %700 = OpVectorShuffle %699 %699 3 3 
                                       f32_2 %701 = OpFDiv %698 %700 
                                                      OpStore %132 %701 
                  read_only Texture2DSampled %704 = OpLoad %703 
                                       f32_2 %705 = OpLoad %132 
                                       f32_4 %706 = OpImageSampleImplicitLod %704 %705 
                                         f32 %707 = OpCompositeExtract %706 0 
                                                      OpStore %702 %707 
                                Private f32* %709 = OpAccessChain %110 %83 
                                         f32 %710 = OpLoad %709 
                                         f32 %711 = OpLoad %702 
                                         f32 %712 = OpFAdd %710 %711 
                                Private f32* %713 = OpAccessChain %708 %83 
                                                      OpStore %713 %712 
                                Private f32* %714 = OpAccessChain %708 %83 
                                         f32 %715 = OpLoad %714 
                                         f32 %716 = OpExtInst %1 43 %715 %182 %181 
                                Private f32* %717 = OpAccessChain %708 %83 
                                                      OpStore %717 %716 
                                Private f32* %718 = OpAccessChain %708 %83 
                                         f32 %719 = OpLoad %718 
                                         f32 %720 = OpLoad %400 
                                         f32 %721 = OpExtInst %1 37 %719 %720 
                                                      OpStore %400 %721 
                                        bool %723 = OpLoad %572 
                                                      OpSelectionMerge %725 None 
                                                      OpBranchConditional %723 %724 %727 
                                             %724 = OpLabel 
                                         f32 %726 = OpLoad %400 
                                                      OpStore %722 %726 
                                                      OpBranch %725 
                                             %727 = OpLabel 
                                Private f32* %728 = OpAccessChain %708 %83 
                                         f32 %729 = OpLoad %728 
                                                      OpStore %722 %729 
                                                      OpBranch %725 
                                             %725 = OpLabel 
                                         f32 %730 = OpLoad %722 
                                                      OpStore %400 %730 
                                       f32_4 %732 = OpLoad %453 
                                       f32_3 %733 = OpVectorShuffle %732 %732 0 1 2 
                                       f32_3 %735 = OpLoad %734 
                                       f32_3 %736 = OpFMul %733 %735 
                                       f32_4 %737 = OpLoad %731 
                                       f32_4 %738 = OpVectorShuffle %737 %736 4 5 6 3 
                                                      OpStore %731 %738 
                                       f32_4 %739 = OpLoad %453 
                                       f32_3 %740 = OpVectorShuffle %739 %739 0 1 2 
                              Uniform f32_4* %742 = OpAccessChain %18 %741 
                                       f32_4 %743 = OpLoad %742 
                                       f32_3 %744 = OpVectorShuffle %743 %743 0 1 2 
                                       f32_3 %745 = OpFMul %740 %744 
                                                      OpStore %708 %745 
                                         f32 %746 = OpLoad %400 
                                       f32_3 %747 = OpCompositeConstruct %746 %746 %746 
                                       f32_3 %748 = OpLoad %708 
                                       f32_3 %749 = OpFMul %747 %748 
                                       f32_4 %750 = OpLoad %453 
                                       f32_4 %751 = OpVectorShuffle %750 %749 4 5 6 3 
                                                      OpStore %453 %751 
                                Private f32* %752 = OpAccessChain %731 %404 
                                                      OpStore %752 %182 
                                       f32_4 %755 = OpLoad %453 
                                       f32_4 %756 = OpLoad %731 
                                       f32_4 %757 = OpFAdd %755 %756 
                                                      OpStore %754 %757 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
float u_xlat21;
float u_xlat23;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat7 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat7 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat21 = u_xlat2.y * u_xlat2.y;
    u_xlat21 = u_xlat2.x * u_xlat2.x + (-u_xlat21);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat2);
    u_xlat4.y = dot(unity_SHAg, u_xlat2);
    u_xlat4.z = dot(unity_SHAb, u_xlat2);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat4 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = u_xlat0 * u_xlat2.zzzz + u_xlat5;
    u_xlat2 = max(u_xlat4, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlitchInterval;
uniform 	float _DispIntensity;
uniform 	float _DispProbability;
uniform 	float _ColorIntensity;
uniform 	float _ColorProbability;
uniform 	float _DispGlitchOn;
uniform 	float _ColorGlitchOn;
uniform 	float _WrapDispCoords;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat16_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat10_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bool u_xlatb10;
vec2 u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].ww + u_xlat0.xy;
    u_xlat10.x = _Time.y / _GlitchInterval;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat5.x = u_xlat0.x + 2.79299998;
    u_xlat1 = u_xlat0.xxxx * vec4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
    u_xlat1 = sin(u_xlat1);
    u_xlat1 = u_xlat1 * vec4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
    u_xlat1 = fract(u_xlat1);
    u_xlat10.xy = u_xlat1.zw + vec2(-0.5, -0.5);
    u_xlat11.xy = u_xlat5.xx * vec2(-91.2228012, 91.2228012);
    u_xlat11.xy = sin(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy * vec2(43758.5469, 43758.5469);
    u_xlat11.xy = fract(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
    u_xlatb1.xy = lessThan(u_xlat1.xyxx, vec4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
    u_xlatb2.xyz = equal(vec4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), vec4(1.0, 1.0, 1.0, 0.0)).xyz;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
    u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
    u_xlat5.x = vs_TEXCOORD0.y / u_xlat5.x;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * 78.2330017;
    u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 43758.5469;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat0.x = u_xlat0.x * _DispIntensity + vs_TEXCOORD0.x;
    u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat16 = fract(abs(u_xlat0.x));
    u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : vs_TEXCOORD0.x;
    u_xlat0.y = vs_TEXCOORD0.y;
    u_xlat2 = texture(_MainTex, u_xlat0.xy);
    u_xlat3.xy = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
    u_xlat3.zw = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + vs_TEXCOORD0.yy;
    u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
    u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
    u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
    u_xlat0.y = u_xlat11.x * _ColorIntensity + vs_TEXCOORD0.y;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
    u_xlat1.x = u_xlat0.w + u_xlat16_1;
    u_xlat0.w = u_xlat1.x * 0.333333343;
    u_xlat0.x = u_xlat10_4.x;
    u_xlat0.y = u_xlat10_3.y;
    u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
    u_xlat1 = u_xlat0 * vs_COLOR0;
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + -0.100000001;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat5.x = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat15 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat15, u_xlat10.x);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat10.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat0.x = u_xlat0.x + u_xlat10_2.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10.x = min(u_xlat0.x, u_xlat10.x);
    u_xlat0.x = (u_xlatb5) ? u_xlat10.x : u_xlat0.x;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 455
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %49 %128 %134 %135 %149 %186 %189 %192 %193 %195 %417 %436 %448 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 RelaxedPrecision 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 RelaxedPrecision 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 RelaxedPrecision 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 RelaxedPrecision 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 RelaxedPrecision 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 RelaxedPrecision 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 RelaxedPrecision 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 RelaxedPrecision 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpMemberDecorate %17 13 Offset 17 
                                                      OpMemberDecorate %17 14 Offset 17 
                                                      OpMemberDecorate %17 15 Offset 17 
                                                      OpMemberDecorate %17 16 Offset 17 
                                                      OpMemberDecorate %17 17 Offset 17 
                                                      OpMemberDecorate %17 18 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %49 Location 49 
                                                      OpMemberDecorate %126 0 BuiltIn 126 
                                                      OpMemberDecorate %126 1 BuiltIn 126 
                                                      OpMemberDecorate %126 2 BuiltIn 126 
                                                      OpDecorate %126 Block 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %186 Location 186 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 Location 192 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 Location 195 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %417 Location 417 
                                                      OpDecorate %436 Location 436 
                                                      OpDecorate %448 Location 448 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeStruct %7 %7 %7 %7 %7 %12 %7 %7 %7 %7 %7 %7 %7 %14 %15 %16 %6 %6 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 17 
                                              %22 = OpTypePointer Uniform %6 
                                          f32 %25 = OpConstant 3.674022E-40 
                                          u32 %27 = OpConstant 0 
                                              %28 = OpTypePointer Private %6 
                                          i32 %32 = OpConstant 16 
                                          f32 %39 = OpConstant 3.674022E-40 
                                 Private f32* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                              %48 = OpTypePointer Input %7 
                                 Input f32_4* %49 = OpVariable Input 
                                          u32 %50 = OpConstant 1 
                                              %51 = OpTypePointer Input %6 
                                          i32 %62 = OpConstant 13 
                                          i32 %63 = OpConstant 1 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %68 = OpConstant 0 
                                          i32 %76 = OpConstant 2 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                               Private f32_4* %97 = OpVariable Private 
                                         i32 %100 = OpConstant 15 
                                             %125 = OpTypeArray %6 %50 
                                             %126 = OpTypeStruct %7 %6 %125 
                                             %127 = OpTypePointer Output %126 
        Output struct {f32_4; f32; f32[1];}* %128 = OpVariable Output 
                                             %130 = OpTypePointer Output %7 
                                             %132 = OpTypeVector %6 2 
                                             %133 = OpTypePointer Output %132 
                               Output f32_2* %134 = OpVariable Output 
                                Input f32_4* %135 = OpVariable Input 
                                         i32 %138 = OpConstant 18 
                                             %147 = OpTypeVector %6 3 
                                             %148 = OpTypePointer Input %147 
                                Input f32_3* %149 = OpVariable Input 
                                         i32 %151 = OpConstant 14 
                                         u32 %168 = OpConstant 2 
                                Private f32* %170 = OpVariable Private 
                                             %185 = OpTypePointer Output %147 
                               Output f32_3* %186 = OpVariable Output 
                               Output f32_3* %189 = OpVariable Output 
                               Output f32_4* %192 = OpVariable Output 
                                Input f32_4* %193 = OpVariable Input 
                               Output f32_4* %195 = OpVariable Output 
                                             %197 = OpTypePointer Private %147 
                              Private f32_3* %198 = OpVariable Private 
                              Private f32_4* %215 = OpVariable Private 
                              Private f32_3* %221 = OpVariable Private 
                                         i32 %222 = OpConstant 9 
                                         i32 %228 = OpConstant 10 
                                         i32 %234 = OpConstant 11 
                                         i32 %240 = OpConstant 12 
                                         u32 %249 = OpConstant 3 
                                         i32 %251 = OpConstant 6 
                                         i32 %257 = OpConstant 7 
                                         i32 %263 = OpConstant 8 
                                         f32 %274 = OpConstant 3.674022E-40 
                                       f32_3 %275 = OpConstantComposite %274 %274 %274 
                              Private f32_3* %277 = OpVariable Private 
                                         f32 %281 = OpConstant 3.674022E-40 
                                       f32_3 %282 = OpConstantComposite %281 %281 %281 
                                         f32 %287 = OpConstant 3.674022E-40 
                                       f32_3 %288 = OpConstantComposite %287 %287 %287 
                                         f32 %290 = OpConstant 3.674022E-40 
                                       f32_3 %291 = OpConstantComposite %290 %290 %290 
                              Private f32_4* %295 = OpVariable Private 
                              Private f32_4* %302 = OpVariable Private 
                              Private f32_4* %310 = OpVariable Private 
                                         f32 %346 = OpConstant 3.674022E-40 
                                       f32_4 %347 = OpConstantComposite %346 %346 %346 %346 
                                         i32 %352 = OpConstant 4 
                                       f32_4 %356 = OpConstantComposite %46 %46 %46 %46 
                                       f32_4 %364 = OpConstantComposite %274 %274 %274 %274 
                                         i32 %371 = OpConstant 5 
                               Output f32_3* %417 = OpVariable Output 
                                       f32_2 %432 = OpConstantComposite %39 %39 
                               Output f32_4* %436 = OpVariable Output 
                               Output f32_4* %448 = OpVariable Output 
                                             %449 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %23 = OpAccessChain %19 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %26 = OpFAdd %24 %25 
                                 Private f32* %29 = OpAccessChain %9 %27 
                                                      OpStore %29 %26 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                          f32 %31 = OpLoad %30 
                                 Uniform f32* %33 = OpAccessChain %19 %32 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFMul %31 %34 
                                 Private f32* %36 = OpAccessChain %9 %27 
                                                      OpStore %36 %35 
                                 Private f32* %37 = OpAccessChain %9 %27 
                                          f32 %38 = OpLoad %37 
                                          f32 %40 = OpFMul %38 %39 
                                 Private f32* %41 = OpAccessChain %9 %27 
                                                      OpStore %41 %40 
                                 Uniform f32* %43 = OpAccessChain %19 %32 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                                      OpStore %42 %47 
                                   Input f32* %52 = OpAccessChain %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %42 
                                          f32 %55 = OpFMul %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %27 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpFAdd %55 %57 
                                 Private f32* %59 = OpAccessChain %9 %27 
                                                      OpStore %59 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_4 %61 = OpVectorShuffle %60 %60 0 0 0 0 
                               Uniform f32_4* %65 = OpAccessChain %19 %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpFMul %61 %66 
                                                      OpStore %9 %67 
                               Uniform f32_4* %69 = OpAccessChain %19 %62 %68 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %49 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %77 = OpAccessChain %19 %62 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %49 
                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %9 %83 
                                        f32_4 %85 = OpLoad %9 
                               Uniform f32_4* %87 = OpAccessChain %19 %62 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpFAdd %85 %88 
                                                      OpStore %84 %89 
                               Uniform f32_4* %90 = OpAccessChain %19 %62 %86 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpLoad %49 
                                        f32_4 %93 = OpVectorShuffle %92 %92 3 3 3 3 
                                        f32_4 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_4 %96 = OpFAdd %94 %95 
                                                      OpStore %9 %96 
                                        f32_4 %98 = OpLoad %84 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %19 %100 %63 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %99 %102 
                                                      OpStore %97 %103 
                              Uniform f32_4* %104 = OpAccessChain %19 %100 %68 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %84 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %97 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %97 %110 
                              Uniform f32_4* %111 = OpAccessChain %19 %100 %76 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %84 
                                       f32_4 %114 = OpVectorShuffle %113 %113 2 2 2 2 
                                       f32_4 %115 = OpFMul %112 %114 
                                       f32_4 %116 = OpLoad %97 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %97 %117 
                              Uniform f32_4* %118 = OpAccessChain %19 %100 %86 
                                       f32_4 %119 = OpLoad %118 
                                       f32_4 %120 = OpLoad %84 
                                       f32_4 %121 = OpVectorShuffle %120 %120 3 3 3 3 
                                       f32_4 %122 = OpFMul %119 %121 
                                       f32_4 %123 = OpLoad %97 
                                       f32_4 %124 = OpFAdd %122 %123 
                                                      OpStore %84 %124 
                                       f32_4 %129 = OpLoad %84 
                               Output f32_4* %131 = OpAccessChain %128 %68 
                                                      OpStore %131 %129 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                              Uniform f32_4* %139 = OpAccessChain %19 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                              Uniform f32_4* %143 = OpAccessChain %19 %138 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 2 3 
                                       f32_2 %146 = OpFAdd %142 %145 
                                                      OpStore %134 %146 
                                       f32_3 %150 = OpLoad %149 
                              Uniform f32_4* %152 = OpAccessChain %19 %151 %68 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                         f32 %155 = OpDot %150 %154 
                                Private f32* %156 = OpAccessChain %97 %27 
                                                      OpStore %156 %155 
                                       f32_3 %157 = OpLoad %149 
                              Uniform f32_4* %158 = OpAccessChain %19 %151 %63 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                         f32 %161 = OpDot %157 %160 
                                Private f32* %162 = OpAccessChain %97 %50 
                                                      OpStore %162 %161 
                                       f32_3 %163 = OpLoad %149 
                              Uniform f32_4* %164 = OpAccessChain %19 %151 %76 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %163 %166 
                                Private f32* %169 = OpAccessChain %97 %168 
                                                      OpStore %169 %167 
                                       f32_4 %171 = OpLoad %97 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_4 %173 = OpLoad %97 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %172 %174 
                                                      OpStore %170 %175 
                                         f32 %176 = OpLoad %170 
                                         f32 %177 = OpExtInst %1 32 %176 
                                                      OpStore %170 %177 
                                         f32 %178 = OpLoad %170 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %97 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %97 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 6 3 
                                                      OpStore %97 %184 
                                       f32_4 %187 = OpLoad %97 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                                      OpStore %186 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                                      OpStore %189 %191 
                                       f32_4 %194 = OpLoad %193 
                                                      OpStore %192 %194 
                                       f32_4 %196 = OpLoad %9 
                                                      OpStore %195 %196 
                                Private f32* %199 = OpAccessChain %97 %50 
                                         f32 %200 = OpLoad %199 
                                Private f32* %201 = OpAccessChain %97 %50 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFMul %200 %202 
                                Private f32* %204 = OpAccessChain %198 %27 
                                                      OpStore %204 %203 
                                Private f32* %205 = OpAccessChain %97 %27 
                                         f32 %206 = OpLoad %205 
                                Private f32* %207 = OpAccessChain %97 %27 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFMul %206 %208 
                                Private f32* %210 = OpAccessChain %198 %27 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFNegate %211 
                                         f32 %213 = OpFAdd %209 %212 
                                Private f32* %214 = OpAccessChain %198 %27 
                                                      OpStore %214 %213 
                                       f32_4 %216 = OpLoad %97 
                                       f32_4 %217 = OpVectorShuffle %216 %216 1 2 2 0 
                                       f32_4 %218 = OpLoad %97 
                                       f32_4 %219 = OpVectorShuffle %218 %218 0 1 2 2 
                                       f32_4 %220 = OpFMul %217 %219 
                                                      OpStore %215 %220 
                              Uniform f32_4* %223 = OpAccessChain %19 %222 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %215 
                                         f32 %226 = OpDot %224 %225 
                                Private f32* %227 = OpAccessChain %221 %27 
                                                      OpStore %227 %226 
                              Uniform f32_4* %229 = OpAccessChain %19 %228 
                                       f32_4 %230 = OpLoad %229 
                                       f32_4 %231 = OpLoad %215 
                                         f32 %232 = OpDot %230 %231 
                                Private f32* %233 = OpAccessChain %221 %50 
                                                      OpStore %233 %232 
                              Uniform f32_4* %235 = OpAccessChain %19 %234 
                                       f32_4 %236 = OpLoad %235 
                                       f32_4 %237 = OpLoad %215 
                                         f32 %238 = OpDot %236 %237 
                                Private f32* %239 = OpAccessChain %221 %168 
                                                      OpStore %239 %238 
                              Uniform f32_4* %241 = OpAccessChain %19 %240 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpLoad %198 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 0 0 
                                       f32_3 %246 = OpFMul %243 %245 
                                       f32_3 %247 = OpLoad %221 
                                       f32_3 %248 = OpFAdd %246 %247 
                                                      OpStore %198 %248 
                                Private f32* %250 = OpAccessChain %97 %249 
                                                      OpStore %250 %46 
                              Uniform f32_4* %252 = OpAccessChain %19 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_4 %254 = OpLoad %97 
                                         f32 %255 = OpDot %253 %254 
                                Private f32* %256 = OpAccessChain %215 %27 
                                                      OpStore %256 %255 
                              Uniform f32_4* %258 = OpAccessChain %19 %257 
                                       f32_4 %259 = OpLoad %258 
                                       f32_4 %260 = OpLoad %97 
                                         f32 %261 = OpDot %259 %260 
                                Private f32* %262 = OpAccessChain %215 %50 
                                                      OpStore %262 %261 
                              Uniform f32_4* %264 = OpAccessChain %19 %263 
                                       f32_4 %265 = OpLoad %264 
                                       f32_4 %266 = OpLoad %97 
                                         f32 %267 = OpDot %265 %266 
                                Private f32* %268 = OpAccessChain %215 %168 
                                                      OpStore %268 %267 
                                       f32_3 %269 = OpLoad %198 
                                       f32_4 %270 = OpLoad %215 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_3 %272 = OpFAdd %269 %271 
                                                      OpStore %198 %272 
                                       f32_3 %273 = OpLoad %198 
                                       f32_3 %276 = OpExtInst %1 40 %273 %275 
                                                      OpStore %198 %276 
                                       f32_3 %278 = OpLoad %198 
                                       f32_3 %279 = OpExtInst %1 30 %278 
                                                      OpStore %277 %279 
                                       f32_3 %280 = OpLoad %277 
                                       f32_3 %283 = OpFMul %280 %282 
                                                      OpStore %277 %283 
                                       f32_3 %284 = OpLoad %277 
                                       f32_3 %285 = OpExtInst %1 29 %284 
                                                      OpStore %277 %285 
                                       f32_3 %286 = OpLoad %277 
                                       f32_3 %289 = OpFMul %286 %288 
                                       f32_3 %292 = OpFAdd %289 %291 
                                                      OpStore %277 %292 
                                       f32_3 %293 = OpLoad %277 
                                       f32_3 %294 = OpExtInst %1 40 %293 %275 
                                                      OpStore %277 %294 
                                       f32_4 %296 = OpLoad %9 
                                       f32_4 %297 = OpVectorShuffle %296 %296 1 1 1 1 
                                       f32_4 %298 = OpFNegate %297 
                              Uniform f32_4* %299 = OpAccessChain %19 %76 
                                       f32_4 %300 = OpLoad %299 
                                       f32_4 %301 = OpFAdd %298 %300 
                                                      OpStore %295 %301 
                                       f32_4 %303 = OpLoad %97 
                                       f32_4 %304 = OpVectorShuffle %303 %303 1 1 1 1 
                                       f32_4 %305 = OpLoad %295 
                                       f32_4 %306 = OpFMul %304 %305 
                                                      OpStore %302 %306 
                                       f32_4 %307 = OpLoad %295 
                                       f32_4 %308 = OpLoad %295 
                                       f32_4 %309 = OpFMul %307 %308 
                                                      OpStore %295 %309 
                                       f32_4 %311 = OpLoad %9 
                                       f32_4 %312 = OpVectorShuffle %311 %311 0 0 0 0 
                                       f32_4 %313 = OpFNegate %312 
                              Uniform f32_4* %314 = OpAccessChain %19 %63 
                                       f32_4 %315 = OpLoad %314 
                                       f32_4 %316 = OpFAdd %313 %315 
                                                      OpStore %310 %316 
                                       f32_4 %317 = OpLoad %9 
                                       f32_4 %318 = OpVectorShuffle %317 %317 2 2 2 2 
                                       f32_4 %319 = OpFNegate %318 
                              Uniform f32_4* %320 = OpAccessChain %19 %86 
                                       f32_4 %321 = OpLoad %320 
                                       f32_4 %322 = OpFAdd %319 %321 
                                                      OpStore %9 %322 
                                       f32_4 %323 = OpLoad %310 
                                       f32_4 %324 = OpLoad %97 
                                       f32_4 %325 = OpVectorShuffle %324 %324 0 0 0 0 
                                       f32_4 %326 = OpFMul %323 %325 
                                       f32_4 %327 = OpLoad %302 
                                       f32_4 %328 = OpFAdd %326 %327 
                                                      OpStore %302 %328 
                                       f32_4 %329 = OpLoad %310 
                                       f32_4 %330 = OpLoad %310 
                                       f32_4 %331 = OpFMul %329 %330 
                                       f32_4 %332 = OpLoad %295 
                                       f32_4 %333 = OpFAdd %331 %332 
                                                      OpStore %295 %333 
                                       f32_4 %334 = OpLoad %9 
                                       f32_4 %335 = OpLoad %9 
                                       f32_4 %336 = OpFMul %334 %335 
                                       f32_4 %337 = OpLoad %295 
                                       f32_4 %338 = OpFAdd %336 %337 
                                                      OpStore %295 %338 
                                       f32_4 %339 = OpLoad %9 
                                       f32_4 %340 = OpLoad %97 
                                       f32_4 %341 = OpVectorShuffle %340 %340 2 2 2 2 
                                       f32_4 %342 = OpFMul %339 %341 
                                       f32_4 %343 = OpLoad %302 
                                       f32_4 %344 = OpFAdd %342 %343 
                                                      OpStore %9 %344 
                                       f32_4 %345 = OpLoad %295 
                                       f32_4 %348 = OpExtInst %1 40 %345 %347 
                                                      OpStore %97 %348 
                                       f32_4 %349 = OpLoad %97 
                                       f32_4 %350 = OpExtInst %1 32 %349 
                                                      OpStore %295 %350 
                                       f32_4 %351 = OpLoad %97 
                              Uniform f32_4* %353 = OpAccessChain %19 %352 
                                       f32_4 %354 = OpLoad %353 
                                       f32_4 %355 = OpFMul %351 %354 
                                       f32_4 %357 = OpFAdd %355 %356 
                                                      OpStore %97 %357 
                                       f32_4 %358 = OpLoad %97 
                                       f32_4 %359 = OpFDiv %356 %358 
                                                      OpStore %97 %359 
                                       f32_4 %360 = OpLoad %9 
                                       f32_4 %361 = OpLoad %295 
                                       f32_4 %362 = OpFMul %360 %361 
                                                      OpStore %9 %362 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %365 = OpExtInst %1 40 %363 %364 
                                                      OpStore %9 %365 
                                       f32_4 %366 = OpLoad %97 
                                       f32_4 %367 = OpLoad %9 
                                       f32_4 %368 = OpFMul %366 %367 
                                                      OpStore %9 %368 
                                       f32_4 %369 = OpLoad %9 
                                       f32_3 %370 = OpVectorShuffle %369 %369 1 1 1 
                              Uniform f32_4* %372 = OpAccessChain %19 %371 %63 
                                       f32_4 %373 = OpLoad %372 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFMul %370 %374 
                                       f32_4 %376 = OpLoad %97 
                                       f32_4 %377 = OpVectorShuffle %376 %375 4 5 6 3 
                                                      OpStore %97 %377 
                              Uniform f32_4* %378 = OpAccessChain %19 %371 %68 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_4 %381 = OpLoad %9 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 0 0 
                                       f32_3 %383 = OpFMul %380 %382 
                                       f32_4 %384 = OpLoad %97 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpFAdd %383 %385 
                                       f32_4 %387 = OpLoad %97 
                                       f32_4 %388 = OpVectorShuffle %387 %386 4 5 6 3 
                                                      OpStore %97 %388 
                              Uniform f32_4* %389 = OpAccessChain %19 %371 %76 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_4 %392 = OpLoad %9 
                                       f32_3 %393 = OpVectorShuffle %392 %392 2 2 2 
                                       f32_3 %394 = OpFMul %391 %393 
                                       f32_4 %395 = OpLoad %97 
                                       f32_3 %396 = OpVectorShuffle %395 %395 0 1 2 
                                       f32_3 %397 = OpFAdd %394 %396 
                                       f32_4 %398 = OpLoad %9 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 5 6 3 
                                                      OpStore %9 %399 
                              Uniform f32_4* %400 = OpAccessChain %19 %371 %86 
                                       f32_4 %401 = OpLoad %400 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_4 %403 = OpLoad %9 
                                       f32_3 %404 = OpVectorShuffle %403 %403 3 3 3 
                                       f32_3 %405 = OpFMul %402 %404 
                                       f32_4 %406 = OpLoad %9 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_3 %408 = OpFAdd %405 %407 
                                       f32_4 %409 = OpLoad %9 
                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
                                                      OpStore %9 %410 
                                       f32_4 %411 = OpLoad %9 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                       f32_3 %413 = OpLoad %277 
                                       f32_3 %414 = OpFAdd %412 %413 
                                       f32_4 %415 = OpLoad %9 
                                       f32_4 %416 = OpVectorShuffle %415 %414 4 5 6 3 
                                                      OpStore %9 %416 
                                       f32_4 %418 = OpLoad %9 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                                      OpStore %417 %419 
                                Private f32* %420 = OpAccessChain %84 %50 
                                         f32 %421 = OpLoad %420 
                                Uniform f32* %422 = OpAccessChain %19 %68 %27 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFMul %421 %423 
                                Private f32* %425 = OpAccessChain %9 %27 
                                                      OpStore %425 %424 
                                Private f32* %426 = OpAccessChain %9 %27 
                                         f32 %427 = OpLoad %426 
                                         f32 %428 = OpFMul %427 %39 
                                Private f32* %429 = OpAccessChain %9 %249 
                                                      OpStore %429 %428 
                                       f32_4 %430 = OpLoad %84 
                                       f32_2 %431 = OpVectorShuffle %430 %430 0 3 
                                       f32_2 %433 = OpFMul %431 %432 
                                       f32_4 %434 = OpLoad %9 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 1 5 3 
                                                      OpStore %9 %435 
                                       f32_4 %437 = OpLoad %84 
                                       f32_2 %438 = OpVectorShuffle %437 %437 2 3 
                                       f32_4 %439 = OpLoad %436 
                                       f32_4 %440 = OpVectorShuffle %439 %438 0 1 4 5 
                                                      OpStore %436 %440 
                                       f32_4 %441 = OpLoad %9 
                                       f32_2 %442 = OpVectorShuffle %441 %441 2 2 
                                       f32_4 %443 = OpLoad %9 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 3 
                                       f32_2 %445 = OpFAdd %442 %444 
                                       f32_4 %446 = OpLoad %436 
                                       f32_4 %447 = OpVectorShuffle %446 %445 4 5 2 3 
                                                      OpStore %436 %447 
                                                      OpStore %448 %364 
                                 Output f32* %450 = OpAccessChain %128 %68 %50 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFNegate %451 
                                 Output f32* %453 = OpAccessChain %128 %68 %50 
                                                      OpStore %453 %452 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 759
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %207 %456 %502 %696 %734 %754 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 RelaxedPrecision 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 RelaxedPrecision 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 RelaxedPrecision 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpMemberDecorate %16 14 Offset 16 
                                                      OpMemberDecorate %16 15 Offset 16 
                                                      OpMemberDecorate %16 16 Offset 16 
                                                      OpMemberDecorate %16 17 Offset 16 
                                                      OpMemberDecorate %16 18 Offset 16 
                                                      OpMemberDecorate %16 19 Offset 16 
                                                      OpMemberDecorate %16 20 RelaxedPrecision 
                                                      OpMemberDecorate %16 20 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %323 DescriptorSet 323 
                                                      OpDecorate %323 Binding 323 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %456 Location 456 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %502 Location 502 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %583 SpecId 583 
                                                      OpDecorate %678 DescriptorSet 678 
                                                      OpDecorate %678 Binding 678 
                                                      OpDecorate %683 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %692 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %694 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %696 Location 696 
                                                      OpDecorate %702 RelaxedPrecision 
                                                      OpDecorate %703 RelaxedPrecision 
                                                      OpDecorate %703 DescriptorSet 703 
                                                      OpDecorate %703 Binding 703 
                                                      OpDecorate %704 RelaxedPrecision 
                                                      OpDecorate %707 RelaxedPrecision 
                                                      OpDecorate %708 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %719 RelaxedPrecision 
                                                      OpDecorate %720 RelaxedPrecision 
                                                      OpDecorate %721 RelaxedPrecision 
                                                      OpDecorate %726 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %732 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %734 Location 734 
                                                      OpDecorate %735 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %740 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                                      OpDecorate %749 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %754 Location 754 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %757 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeArray %7 %12 
                                              %16 = OpTypeStruct %7 %10 %7 %7 %7 %13 %14 %7 %15 %10 %10 %7 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %18 = OpVariable Uniform 
                                              %19 = OpTypeInt 32 1 
                                          i32 %20 = OpConstant 5 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypeVector %6 2 
                                              %23 = OpTypePointer Uniform %7 
                                          i32 %27 = OpConstant 6 
                                          i32 %28 = OpConstant 1 
                                          i32 %35 = OpConstant 0 
                                          i32 %48 = OpConstant 2 
                                              %73 = OpTypePointer Private %22 
                               Private f32_2* %74 = OpVariable Private 
                                          u32 %75 = OpConstant 1 
                                              %76 = OpTypePointer Uniform %6 
                                          i32 %79 = OpConstant 12 
                                          u32 %83 = OpConstant 0 
                                              %84 = OpTypePointer Private %6 
                                Private f32* %105 = OpVariable Private 
                                         f32 %108 = OpConstant 3.674022E-40 
                              Private f32_4* %110 = OpVariable Private 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %114 = OpConstant 3.674022E-40 
                                         f32 %115 = OpConstant 3.674022E-40 
                                         f32 %116 = OpConstant 3.674022E-40 
                                       f32_4 %117 = OpConstantComposite %113 %114 %115 %116 
                                         f32 %122 = OpConstant 3.674022E-40 
                                       f32_4 %123 = OpConstantComposite %122 %122 %122 %122 
                                         f32 %129 = OpConstant 3.674022E-40 
                                       f32_2 %130 = OpConstantComposite %129 %129 
                              Private f32_2* %132 = OpVariable Private 
                                       f32_2 %135 = OpConstantComposite %116 %114 
                                       f32_2 %140 = OpConstantComposite %122 %122 
                                             %146 = OpTypeBool 
                                             %147 = OpTypeVector %146 2 
                                             %148 = OpTypePointer Private %147 
                             Private bool_2* %149 = OpVariable Private 
                                         i32 %152 = OpConstant 14 
                                         i32 %155 = OpConstant 16 
                                             %163 = OpTypeVector %146 4 
                                             %166 = OpTypeVector %146 3 
                                             %167 = OpTypePointer Private %166 
                             Private bool_3* %168 = OpVariable Private 
                                         i32 %169 = OpConstant 17 
                                         i32 %172 = OpConstant 19 
                                         i32 %175 = OpConstant 18 
                                         f32 %181 = OpConstant 3.674022E-40 
                                         f32 %182 = OpConstant 3.674022E-40 
                                       f32_4 %183 = OpConstantComposite %181 %181 %181 %182 
                                         f32 %202 = OpConstant 3.674022E-40 
                                         f32 %204 = OpConstant 3.674022E-40 
                                             %206 = OpTypePointer Input %22 
                                Input f32_2* %207 = OpVariable Input 
                                             %208 = OpTypePointer Input %6 
                                Private f32* %215 = OpVariable Private 
                                         f32 %228 = OpConstant 3.674022E-40 
                                         f32 %232 = OpConstant 3.674022E-40 
                                         i32 %256 = OpConstant 13 
                                             %264 = OpTypePointer Private %146 
                               Private bool* %265 = OpVariable Private 
                                             %276 = OpTypePointer Function %6 
                              Private f32_4* %319 = OpVariable Private 
                                             %320 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %321 = OpTypeSampledImage %320 
                                             %322 = OpTypePointer UniformConstant %321 
 UniformConstant read_only Texture2DSampled* %323 = OpVariable UniformConstant 
                              Private f32_4* %328 = OpVariable Private 
                                         i32 %330 = OpConstant 15 
                              Private f32_4* %367 = OpVariable Private 
                                Private f32* %400 = OpVariable Private 
                                         u32 %401 = OpConstant 2 
                                         u32 %404 = OpConstant 3 
                                         f32 %413 = OpConstant 3.674022E-40 
                              Private f32_4* %415 = OpVariable Private 
                                             %428 = OpTypePointer Function %22 
                              Private f32_4* %453 = OpVariable Private 
                                             %455 = OpTypePointer Input %7 
                                Input f32_4* %456 = OpVariable Input 
                                         f32 %464 = OpConstant 3.674022E-40 
                                         i32 %473 = OpConstant -1 
                                         i32 %484 = OpConstant 20 
                                             %501 = OpTypePointer Input %10 
                                Input f32_3* %502 = OpVariable Input 
                                             %505 = OpTypePointer Uniform %10 
                                             %526 = OpTypePointer Private %10 
                              Private f32_3* %527 = OpVariable Private 
                                         i32 %529 = OpConstant 4 
                               Private bool* %572 = OpVariable Private 
                                         i32 %573 = OpConstant 7 
                                        bool %577 = OpConstantFalse 
                                        bool %583 = OpSpecConstantFalse 
                               Private bool* %586 = OpVariable Private 
                                         i32 %592 = OpConstant 8 
                                             %629 = OpTypePointer Function %10 
                                         i32 %643 = OpConstant 10 
                                         i32 %652 = OpConstant 9 
                                         f32 %660 = OpConstant 3.674022E-40 
                                         f32 %662 = OpConstant 3.674022E-40 
                                         f32 %667 = OpConstant 3.674022E-40 
                                             %675 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %676 = OpTypeSampledImage %675 
                                             %677 = OpTypePointer UniformConstant %676 
 UniformConstant read_only Texture3DSampled* %678 = OpVariable UniformConstant 
                              Private f32_4* %683 = OpVariable Private 
                                Input f32_4* %696 = OpVariable Input 
                                Private f32* %702 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %703 = OpVariable UniformConstant 
                              Private f32_3* %708 = OpVariable Private 
                              Private f32_4* %731 = OpVariable Private 
                                Input f32_3* %734 = OpVariable Input 
                                         i32 %741 = OpConstant 11 
                                             %753 = OpTypePointer Output %7 
                               Output f32_4* %754 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %277 = OpVariable Function 
                               Function f32* %293 = OpVariable Function 
                               Function f32* %304 = OpVariable Function 
                               Function f32* %416 = OpVariable Function 
                             Function f32_2* %429 = OpVariable Function 
                               Function f32* %442 = OpVariable Function 
                             Function f32_3* %630 = OpVariable Function 
                               Function f32* %722 = OpVariable Function 
                               Uniform f32_4* %24 = OpAccessChain %18 %20 %21 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 1 1 
                               Uniform f32_4* %29 = OpAccessChain %18 %27 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                                        f32_2 %32 = OpFMul %26 %31 
                                        f32_4 %33 = OpLoad %9 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 2 3 
                                                      OpStore %9 %34 
                               Uniform f32_4* %36 = OpAccessChain %18 %27 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                               Uniform f32_4* %39 = OpAccessChain %18 %20 %21 
                                        f32_4 %40 = OpLoad %39 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 0 
                                        f32_2 %42 = OpFMul %38 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_2 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 2 3 
                                                      OpStore %9 %47 
                               Uniform f32_4* %49 = OpAccessChain %18 %27 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                               Uniform f32_4* %52 = OpAccessChain %18 %20 %21 
                                        f32_4 %53 = OpLoad %52 
                                        f32_2 %54 = OpVectorShuffle %53 %53 2 2 
                                        f32_2 %55 = OpFMul %51 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_2 %57 = OpVectorShuffle %56 %56 0 1 
                                        f32_2 %58 = OpFAdd %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_4 %60 = OpVectorShuffle %59 %58 4 5 2 3 
                                                      OpStore %9 %60 
                               Uniform f32_4* %61 = OpAccessChain %18 %27 %21 
                                        f32_4 %62 = OpLoad %61 
                                        f32_2 %63 = OpVectorShuffle %62 %62 0 1 
                               Uniform f32_4* %64 = OpAccessChain %18 %20 %21 
                                        f32_4 %65 = OpLoad %64 
                                        f32_2 %66 = OpVectorShuffle %65 %65 3 3 
                                        f32_2 %67 = OpFMul %63 %66 
                                        f32_4 %68 = OpLoad %9 
                                        f32_2 %69 = OpVectorShuffle %68 %68 0 1 
                                        f32_2 %70 = OpFAdd %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %70 4 5 2 3 
                                                      OpStore %9 %72 
                                 Uniform f32* %77 = OpAccessChain %18 %35 %75 
                                          f32 %78 = OpLoad %77 
                                 Uniform f32* %80 = OpAccessChain %18 %79 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFDiv %78 %81 
                                 Private f32* %85 = OpAccessChain %74 %83 
                                                      OpStore %85 %82 
                                 Private f32* %86 = OpAccessChain %74 %83 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpExtInst %1 8 %87 
                                 Private f32* %89 = OpAccessChain %74 %83 
                                                      OpStore %89 %88 
                                 Private f32* %90 = OpAccessChain %74 %83 
                                          f32 %91 = OpLoad %90 
                                 Uniform f32* %92 = OpAccessChain %18 %79 
                                          f32 %93 = OpLoad %92 
                                          f32 %94 = OpFMul %91 %93 
                                 Private f32* %95 = OpAccessChain %9 %83 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFAdd %94 %96 
                                 Private f32* %98 = OpAccessChain %9 %83 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %9 %75 
                                         f32 %100 = OpLoad %99 
                                Private f32* %101 = OpAccessChain %9 %83 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFAdd %100 %102 
                                Private f32* %104 = OpAccessChain %9 %83 
                                                      OpStore %104 %103 
                                Private f32* %106 = OpAccessChain %9 %83 
                                         f32 %107 = OpLoad %106 
                                         f32 %109 = OpFAdd %107 %108 
                                                      OpStore %105 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_4 %112 = OpVectorShuffle %111 %111 0 0 0 0 
                                       f32_4 %118 = OpFMul %112 %117 
                                                      OpStore %110 %118 
                                       f32_4 %119 = OpLoad %110 
                                       f32_4 %120 = OpExtInst %1 13 %119 
                                                      OpStore %110 %120 
                                       f32_4 %121 = OpLoad %110 
                                       f32_4 %124 = OpFMul %121 %123 
                                                      OpStore %110 %124 
                                       f32_4 %125 = OpLoad %110 
                                       f32_4 %126 = OpExtInst %1 10 %125 
                                                      OpStore %110 %126 
                                       f32_4 %127 = OpLoad %110 
                                       f32_2 %128 = OpVectorShuffle %127 %127 2 3 
                                       f32_2 %131 = OpFAdd %128 %130 
                                                      OpStore %74 %131 
                                         f32 %133 = OpLoad %105 
                                       f32_2 %134 = OpCompositeConstruct %133 %133 
                                       f32_2 %136 = OpFMul %134 %135 
                                                      OpStore %132 %136 
                                       f32_2 %137 = OpLoad %132 
                                       f32_2 %138 = OpExtInst %1 13 %137 
                                                      OpStore %132 %138 
                                       f32_2 %139 = OpLoad %132 
                                       f32_2 %141 = OpFMul %139 %140 
                                                      OpStore %132 %141 
                                       f32_2 %142 = OpLoad %132 
                                       f32_2 %143 = OpExtInst %1 10 %142 
                                                      OpStore %132 %143 
                                       f32_2 %144 = OpLoad %132 
                                       f32_2 %145 = OpFAdd %144 %130 
                                                      OpStore %132 %145 
                                       f32_4 %150 = OpLoad %110 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 1 0 0 
                                Uniform f32* %153 = OpAccessChain %18 %152 
                                         f32 %154 = OpLoad %153 
                                Uniform f32* %156 = OpAccessChain %18 %155 
                                         f32 %157 = OpLoad %156 
                                Uniform f32* %158 = OpAccessChain %18 %152 
                                         f32 %159 = OpLoad %158 
                                Uniform f32* %160 = OpAccessChain %18 %152 
                                         f32 %161 = OpLoad %160 
                                       f32_4 %162 = OpCompositeConstruct %154 %157 %159 %161 
                                      bool_4 %164 = OpFOrdLessThan %151 %162 
                                      bool_2 %165 = OpVectorShuffle %164 %164 0 1 
                                                      OpStore %149 %165 
                                Uniform f32* %170 = OpAccessChain %18 %169 
                                         f32 %171 = OpLoad %170 
                                Uniform f32* %173 = OpAccessChain %18 %172 
                                         f32 %174 = OpLoad %173 
                                Uniform f32* %176 = OpAccessChain %18 %175 
                                         f32 %177 = OpLoad %176 
                                Uniform f32* %178 = OpAccessChain %18 %169 
                                         f32 %179 = OpLoad %178 
                                       f32_4 %180 = OpCompositeConstruct %171 %174 %177 %179 
                                      bool_4 %184 = OpFOrdEqual %180 %183 
                                      bool_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                                      OpStore %168 %185 
                                      bool_2 %186 = OpLoad %149 
                                        bool %187 = OpCompositeExtract %186 0 
                                      bool_3 %188 = OpLoad %168 
                                        bool %189 = OpCompositeExtract %188 0 
                                        bool %190 = OpLogicalAnd %187 %189 
                                      bool_2 %191 = OpLoad %149 
                                      bool_2 %192 = OpCompositeInsert %190 %191 0 
                                                      OpStore %149 %192 
                                      bool_2 %193 = OpLoad %149 
                                        bool %194 = OpCompositeExtract %193 1 
                                      bool_3 %195 = OpLoad %168 
                                        bool %196 = OpCompositeExtract %195 2 
                                        bool %197 = OpLogicalAnd %194 %196 
                                      bool_2 %198 = OpLoad %149 
                                      bool_2 %199 = OpCompositeInsert %197 %198 1 
                                                      OpStore %149 %199 
                                Private f32* %200 = OpAccessChain %132 %75 
                                         f32 %201 = OpLoad %200 
                                         f32 %203 = OpFMul %201 %202 
                                         f32 %205 = OpFAdd %203 %204 
                                                      OpStore %105 %205 
                                  Input f32* %209 = OpAccessChain %207 %75 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpLoad %105 
                                         f32 %212 = OpFDiv %210 %211 
                                                      OpStore %105 %212 
                                         f32 %213 = OpLoad %105 
                                         f32 %214 = OpExtInst %1 8 %213 
                                                      OpStore %105 %214 
                                Private f32* %216 = OpAccessChain %9 %83 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFNegate %217 
                                         f32 %219 = OpLoad %105 
                                         f32 %220 = OpFAdd %218 %219 
                                                      OpStore %215 %220 
                                Private f32* %221 = OpAccessChain %9 %83 
                                         f32 %222 = OpLoad %221 
                                         f32 %223 = OpLoad %105 
                                         f32 %224 = OpFAdd %222 %223 
                                Private f32* %225 = OpAccessChain %9 %83 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %9 %83 
                                         f32 %227 = OpLoad %226 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %9 %83 
                                                      OpStore %230 %229 
                                         f32 %231 = OpLoad %215 
                                         f32 %233 = OpFMul %231 %232 
                                Private f32* %234 = OpAccessChain %9 %83 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFAdd %233 %235 
                                Private f32* %237 = OpAccessChain %9 %83 
                                                      OpStore %237 %236 
                                Private f32* %238 = OpAccessChain %9 %83 
                                         f32 %239 = OpLoad %238 
                                         f32 %240 = OpExtInst %1 13 %239 
                                Private f32* %241 = OpAccessChain %9 %83 
                                                      OpStore %241 %240 
                                Private f32* %242 = OpAccessChain %9 %83 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFMul %243 %122 
                                Private f32* %245 = OpAccessChain %9 %83 
                                                      OpStore %245 %244 
                                Private f32* %246 = OpAccessChain %9 %83 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpExtInst %1 10 %247 
                                Private f32* %249 = OpAccessChain %9 %83 
                                                      OpStore %249 %248 
                                Private f32* %250 = OpAccessChain %9 %83 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFAdd %251 %129 
                                Private f32* %253 = OpAccessChain %9 %83 
                                                      OpStore %253 %252 
                                Private f32* %254 = OpAccessChain %9 %83 
                                         f32 %255 = OpLoad %254 
                                Uniform f32* %257 = OpAccessChain %18 %256 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFMul %255 %258 
                                  Input f32* %260 = OpAccessChain %207 %83 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpFAdd %259 %261 
                                Private f32* %263 = OpAccessChain %9 %83 
                                                      OpStore %263 %262 
                                Private f32* %266 = OpAccessChain %9 %83 
                                         f32 %267 = OpLoad %266 
                                Private f32* %268 = OpAccessChain %9 %83 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                        bool %271 = OpFOrdGreaterThanEqual %267 %270 
                                                      OpStore %265 %271 
                                Private f32* %272 = OpAccessChain %9 %83 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpExtInst %1 4 %273 
                                         f32 %275 = OpExtInst %1 10 %274 
                                                      OpStore %215 %275 
                                        bool %278 = OpLoad %265 
                                                      OpSelectionMerge %280 None 
                                                      OpBranchConditional %278 %279 %282 
                                             %279 = OpLabel 
                                         f32 %281 = OpLoad %215 
                                                      OpStore %277 %281 
                                                      OpBranch %280 
                                             %282 = OpLabel 
                                         f32 %283 = OpLoad %215 
                                         f32 %284 = OpFNegate %283 
                                                      OpStore %277 %284 
                                                      OpBranch %280 
                                             %280 = OpLabel 
                                         f32 %285 = OpLoad %277 
                                                      OpStore %105 %285 
                                Private f32* %286 = OpAccessChain %9 %83 
                                         f32 %287 = OpLoad %286 
                                Private f32* %288 = OpAccessChain %9 %83 
                                                      OpStore %288 %287 
                                Private f32* %289 = OpAccessChain %9 %83 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpExtInst %1 43 %290 %182 %181 
                                Private f32* %292 = OpAccessChain %9 %83 
                                                      OpStore %292 %291 
                                      bool_3 %294 = OpLoad %168 
                                        bool %295 = OpCompositeExtract %294 1 
                                                      OpSelectionMerge %297 None 
                                                      OpBranchConditional %295 %296 %299 
                                             %296 = OpLabel 
                                         f32 %298 = OpLoad %105 
                                                      OpStore %293 %298 
                                                      OpBranch %297 
                                             %299 = OpLabel 
                                Private f32* %300 = OpAccessChain %9 %83 
                                         f32 %301 = OpLoad %300 
                                                      OpStore %293 %301 
                                                      OpBranch %297 
                                             %297 = OpLabel 
                                         f32 %302 = OpLoad %293 
                                Private f32* %303 = OpAccessChain %9 %83 
                                                      OpStore %303 %302 
                                      bool_2 %305 = OpLoad %149 
                                        bool %306 = OpCompositeExtract %305 0 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %306 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %9 %83 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %304 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                  Input f32* %312 = OpAccessChain %207 %83 
                                         f32 %313 = OpLoad %312 
                                                      OpStore %304 %313 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %314 = OpLoad %304 
                                Private f32* %315 = OpAccessChain %9 %83 
                                                      OpStore %315 %314 
                                  Input f32* %316 = OpAccessChain %207 %75 
                                         f32 %317 = OpLoad %316 
                                Private f32* %318 = OpAccessChain %9 %75 
                                                      OpStore %318 %317 
                  read_only Texture2DSampled %324 = OpLoad %323 
                                       f32_4 %325 = OpLoad %9 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_4 %327 = OpImageSampleImplicitLod %324 %326 
                                                      OpStore %319 %327 
                                       f32_2 %329 = OpLoad %74 
                                Uniform f32* %331 = OpAccessChain %18 %330 
                                         f32 %332 = OpLoad %331 
                                Uniform f32* %333 = OpAccessChain %18 %330 
                                         f32 %334 = OpLoad %333 
                                       f32_2 %335 = OpCompositeConstruct %332 %334 
                                         f32 %336 = OpCompositeExtract %335 0 
                                         f32 %337 = OpCompositeExtract %335 1 
                                       f32_2 %338 = OpCompositeConstruct %336 %337 
                                       f32_2 %339 = OpFMul %329 %338 
                                       f32_4 %340 = OpLoad %9 
                                       f32_2 %341 = OpVectorShuffle %340 %340 0 0 
                                       f32_2 %342 = OpFAdd %339 %341 
                                       f32_4 %343 = OpLoad %328 
                                       f32_4 %344 = OpVectorShuffle %343 %342 4 5 2 3 
                                                      OpStore %328 %344 
                                       f32_2 %345 = OpLoad %74 
                                Uniform f32* %346 = OpAccessChain %18 %330 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %348 = OpAccessChain %18 %330 
                                         f32 %349 = OpLoad %348 
                                       f32_2 %350 = OpCompositeConstruct %347 %349 
                                         f32 %351 = OpCompositeExtract %350 0 
                                         f32 %352 = OpCompositeExtract %350 1 
                                       f32_2 %353 = OpCompositeConstruct %351 %352 
                                       f32_2 %354 = OpFMul %345 %353 
                                       f32_2 %355 = OpLoad %207 
                                       f32_2 %356 = OpVectorShuffle %355 %355 1 1 
                                       f32_2 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %328 
                                       f32_4 %359 = OpVectorShuffle %358 %357 0 1 4 5 
                                                      OpStore %328 %359 
                  read_only Texture2DSampled %360 = OpLoad %323 
                                       f32_4 %361 = OpLoad %328 
                                       f32_2 %362 = OpVectorShuffle %361 %361 0 2 
                                       f32_4 %363 = OpImageSampleImplicitLod %360 %362 
                                       f32_2 %364 = OpVectorShuffle %363 %363 0 3 
                                       f32_4 %365 = OpLoad %9 
                                       f32_4 %366 = OpVectorShuffle %365 %364 0 4 5 3 
                                                      OpStore %9 %366 
                  read_only Texture2DSampled %368 = OpLoad %323 
                                       f32_4 %369 = OpLoad %328 
                                       f32_2 %370 = OpVectorShuffle %369 %369 1 3 
                                       f32_4 %371 = OpImageSampleImplicitLod %368 %370 
                                       f32_2 %372 = OpVectorShuffle %371 %371 1 3 
                                       f32_4 %373 = OpLoad %367 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 1 2 5 
                                                      OpStore %367 %374 
                                Private f32* %375 = OpAccessChain %132 %83 
                                         f32 %376 = OpLoad %375 
                                Uniform f32* %377 = OpAccessChain %18 %330 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpFMul %376 %378 
                                Private f32* %380 = OpAccessChain %9 %83 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFAdd %379 %381 
                                Private f32* %383 = OpAccessChain %328 %83 
                                                      OpStore %383 %382 
                                Private f32* %384 = OpAccessChain %132 %83 
                                         f32 %385 = OpLoad %384 
                                Uniform f32* %386 = OpAccessChain %18 %330 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpFMul %385 %387 
                                  Input f32* %389 = OpAccessChain %207 %75 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpFAdd %388 %390 
                                Private f32* %392 = OpAccessChain %328 %75 
                                                      OpStore %392 %391 
                  read_only Texture2DSampled %393 = OpLoad %323 
                                       f32_4 %394 = OpLoad %328 
                                       f32_2 %395 = OpVectorShuffle %394 %394 0 1 
                                       f32_4 %396 = OpImageSampleImplicitLod %393 %395 
                                       f32_2 %397 = OpVectorShuffle %396 %396 2 3 
                                       f32_4 %398 = OpLoad %9 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 1 2 5 
                                                      OpStore %9 %399 
                                Private f32* %402 = OpAccessChain %9 %401 
                                         f32 %403 = OpLoad %402 
                                Private f32* %405 = OpAccessChain %367 %404 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFAdd %403 %406 
                                                      OpStore %400 %407 
                                Private f32* %408 = OpAccessChain %9 %404 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpLoad %400 
                                         f32 %411 = OpFAdd %409 %410 
                                                      OpStore %400 %411 
                                         f32 %412 = OpLoad %400 
                                         f32 %414 = OpFMul %412 %413 
                                                      OpStore %400 %414 
                                      bool_2 %417 = OpLoad %149 
                                        bool %418 = OpCompositeExtract %417 1 
                                                      OpSelectionMerge %420 None 
                                                      OpBranchConditional %418 %419 %423 
                                             %419 = OpLabel 
                                Private f32* %421 = OpAccessChain %367 %83 
                                         f32 %422 = OpLoad %421 
                                                      OpStore %416 %422 
                                                      OpBranch %420 
                                             %423 = OpLabel 
                                Private f32* %424 = OpAccessChain %319 %75 
                                         f32 %425 = OpLoad %424 
                                                      OpStore %416 %425 
                                                      OpBranch %420 
                                             %420 = OpLabel 
                                         f32 %426 = OpLoad %416 
                                Private f32* %427 = OpAccessChain %415 %75 
                                                      OpStore %427 %426 
                                      bool_2 %430 = OpLoad %149 
                                        bool %431 = OpCompositeExtract %430 1 
                                                      OpSelectionMerge %433 None 
                                                      OpBranchConditional %431 %432 %436 
                                             %432 = OpLabel 
                                       f32_4 %434 = OpLoad %9 
                                       f32_2 %435 = OpVectorShuffle %434 %434 1 0 
                                                      OpStore %429 %435 
                                                      OpBranch %433 
                                             %436 = OpLabel 
                                       f32_4 %437 = OpLoad %319 
                                       f32_2 %438 = OpVectorShuffle %437 %437 0 2 
                                                      OpStore %429 %438 
                                                      OpBranch %433 
                                             %433 = OpLabel 
                                       f32_2 %439 = OpLoad %429 
                                       f32_4 %440 = OpLoad %415 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 1 5 3 
                                                      OpStore %415 %441 
                                      bool_2 %443 = OpLoad %149 
                                        bool %444 = OpCompositeExtract %443 1 
                                                      OpSelectionMerge %446 None 
                                                      OpBranchConditional %444 %445 %448 
                                             %445 = OpLabel 
                                         f32 %447 = OpLoad %400 
                                                      OpStore %442 %447 
                                                      OpBranch %446 
                                             %448 = OpLabel 
                                Private f32* %449 = OpAccessChain %319 %404 
                                         f32 %450 = OpLoad %449 
                                                      OpStore %442 %450 
                                                      OpBranch %446 
                                             %446 = OpLabel 
                                         f32 %451 = OpLoad %442 
                                Private f32* %452 = OpAccessChain %415 %404 
                                                      OpStore %452 %451 
                                       f32_4 %454 = OpLoad %415 
                                       f32_4 %457 = OpLoad %456 
                                       f32_4 %458 = OpFMul %454 %457 
                                                      OpStore %453 %458 
                                Private f32* %459 = OpAccessChain %415 %404 
                                         f32 %460 = OpLoad %459 
                                  Input f32* %461 = OpAccessChain %456 %404 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFMul %460 %462 
                                         f32 %465 = OpFAdd %463 %464 
                                                      OpStore %400 %465 
                                         f32 %466 = OpLoad %400 
                                        bool %467 = OpFOrdLessThan %466 %182 
                                      bool_2 %468 = OpLoad %149 
                                      bool_2 %469 = OpCompositeInsert %467 %468 0 
                                                      OpStore %149 %469 
                                      bool_2 %470 = OpLoad %149 
                                        bool %471 = OpCompositeExtract %470 0 
                                         i32 %472 = OpSelect %471 %28 %35 
                                         i32 %474 = OpIMul %472 %473 
                                        bool %475 = OpINotEqual %474 %35 
                                                      OpSelectionMerge %477 None 
                                                      OpBranchConditional %475 %476 %477 
                                             %476 = OpLabel 
                                                      OpKill
                                             %477 = OpLabel 
                                Private f32* %479 = OpAccessChain %415 %404 
                                         f32 %480 = OpLoad %479 
                                  Input f32* %481 = OpAccessChain %456 %404 
                                         f32 %482 = OpLoad %481 
                                         f32 %483 = OpFMul %480 %482 
                                Uniform f32* %485 = OpAccessChain %18 %484 
                                         f32 %486 = OpLoad %485 
                                         f32 %487 = OpFNegate %486 
                                         f32 %488 = OpFAdd %483 %487 
                                                      OpStore %400 %488 
                                         f32 %489 = OpLoad %400 
                                        bool %490 = OpFOrdLessThan %489 %182 
                                      bool_2 %491 = OpLoad %149 
                                      bool_2 %492 = OpCompositeInsert %490 %491 0 
                                                      OpStore %149 %492 
                                      bool_2 %493 = OpLoad %149 
                                        bool %494 = OpCompositeExtract %493 0 
                                         i32 %495 = OpSelect %494 %28 %35 
                                         i32 %496 = OpIMul %495 %473 
                                        bool %497 = OpINotEqual %496 %35 
                                                      OpSelectionMerge %499 None 
                                                      OpBranchConditional %497 %498 %499 
                                             %498 = OpLabel 
                                                      OpKill
                                             %499 = OpLabel 
                                       f32_3 %503 = OpLoad %502 
                                       f32_3 %504 = OpFNegate %503 
                              Uniform f32_3* %506 = OpAccessChain %18 %28 
                                       f32_3 %507 = OpLoad %506 
                                       f32_3 %508 = OpFAdd %504 %507 
                                       f32_4 %509 = OpLoad %110 
                                       f32_4 %510 = OpVectorShuffle %509 %508 4 5 6 3 
                                                      OpStore %110 %510 
                                Uniform f32* %511 = OpAccessChain %18 %27 %35 %401 
                                         f32 %512 = OpLoad %511 
                                Private f32* %513 = OpAccessChain %319 %83 
                                                      OpStore %513 %512 
                                Uniform f32* %514 = OpAccessChain %18 %27 %28 %401 
                                         f32 %515 = OpLoad %514 
                                Private f32* %516 = OpAccessChain %319 %75 
                                                      OpStore %516 %515 
                                Uniform f32* %517 = OpAccessChain %18 %27 %48 %401 
                                         f32 %518 = OpLoad %517 
                                Private f32* %519 = OpAccessChain %319 %401 
                                                      OpStore %519 %518 
                                       f32_4 %520 = OpLoad %110 
                                       f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
                                       f32_4 %522 = OpLoad %319 
                                       f32_3 %523 = OpVectorShuffle %522 %522 0 1 2 
                                         f32 %524 = OpDot %521 %523 
                                Private f32* %525 = OpAccessChain %110 %83 
                                                      OpStore %525 %524 
                                       f32_3 %528 = OpLoad %502 
                              Uniform f32_4* %530 = OpAccessChain %18 %529 
                                       f32_4 %531 = OpLoad %530 
                                       f32_3 %532 = OpVectorShuffle %531 %531 0 1 2 
                                       f32_3 %533 = OpFNegate %532 
                                       f32_3 %534 = OpFAdd %528 %533 
                                                      OpStore %527 %534 
                                       f32_3 %535 = OpLoad %527 
                                       f32_3 %536 = OpLoad %527 
                                         f32 %537 = OpDot %535 %536 
                                Private f32* %538 = OpAccessChain %527 %83 
                                                      OpStore %538 %537 
                                Private f32* %539 = OpAccessChain %527 %83 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpExtInst %1 31 %540 
                                Private f32* %542 = OpAccessChain %527 %83 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %110 %83 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFNegate %544 
                                Private f32* %546 = OpAccessChain %527 %83 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpFAdd %545 %547 
                                Private f32* %549 = OpAccessChain %527 %83 
                                                      OpStore %549 %548 
                                Uniform f32* %550 = OpAccessChain %18 %529 %404 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %527 %83 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                Private f32* %555 = OpAccessChain %110 %83 
                                         f32 %556 = OpLoad %555 
                                         f32 %557 = OpFAdd %554 %556 
                                Private f32* %558 = OpAccessChain %110 %83 
                                                      OpStore %558 %557 
                                Private f32* %559 = OpAccessChain %110 %83 
                                         f32 %560 = OpLoad %559 
                                Uniform f32* %561 = OpAccessChain %18 %21 %401 
                                         f32 %562 = OpLoad %561 
                                         f32 %563 = OpFMul %560 %562 
                                Uniform f32* %564 = OpAccessChain %18 %21 %404 
                                         f32 %565 = OpLoad %564 
                                         f32 %566 = OpFAdd %563 %565 
                                Private f32* %567 = OpAccessChain %110 %83 
                                                      OpStore %567 %566 
                                Private f32* %568 = OpAccessChain %110 %83 
                                         f32 %569 = OpLoad %568 
                                         f32 %570 = OpExtInst %1 43 %569 %182 %181 
                                Private f32* %571 = OpAccessChain %110 %83 
                                                      OpStore %571 %570 
                                Uniform f32* %574 = OpAccessChain %18 %573 %83 
                                         f32 %575 = OpLoad %574 
                                        bool %576 = OpFOrdEqual %575 %181 
                                                      OpStore %572 %576 
                                                      OpSelectionMerge %579 None 
                                                      OpBranchConditional %577 %578 %579 
                                             %578 = OpLabel 
                                        bool %580 = OpLoad %572 
                                                      OpSelectionMerge %582 None 
                                                      OpBranchConditional %580 %581 %582 
                                             %581 = OpLabel 
                                                      OpBranch %582 
                                             %582 = OpLabel 
                                                      OpBranch %579 
                                             %579 = OpLabel 
                                                      OpSelectionMerge %585 None 
                                                      OpBranchConditional %583 %584 %685 
                                             %584 = OpLabel 
                                Uniform f32* %587 = OpAccessChain %18 %573 %75 
                                         f32 %588 = OpLoad %587 
                                        bool %589 = OpFOrdEqual %588 %181 
                                                      OpStore %586 %589 
                                       f32_3 %590 = OpLoad %502 
                                       f32_3 %591 = OpVectorShuffle %590 %590 1 1 1 
                              Uniform f32_4* %593 = OpAccessChain %18 %592 %28 
                                       f32_4 %594 = OpLoad %593 
                                       f32_3 %595 = OpVectorShuffle %594 %594 0 1 2 
                                       f32_3 %596 = OpFMul %591 %595 
                                       f32_4 %597 = OpLoad %319 
                                       f32_4 %598 = OpVectorShuffle %597 %596 4 5 6 3 
                                                      OpStore %319 %598 
                              Uniform f32_4* %599 = OpAccessChain %18 %592 %35 
                                       f32_4 %600 = OpLoad %599 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_3 %602 = OpLoad %502 
                                       f32_3 %603 = OpVectorShuffle %602 %602 0 0 0 
                                       f32_3 %604 = OpFMul %601 %603 
                                       f32_4 %605 = OpLoad %319 
                                       f32_3 %606 = OpVectorShuffle %605 %605 0 1 2 
                                       f32_3 %607 = OpFAdd %604 %606 
                                       f32_4 %608 = OpLoad %319 
                                       f32_4 %609 = OpVectorShuffle %608 %607 4 5 6 3 
                                                      OpStore %319 %609 
                              Uniform f32_4* %610 = OpAccessChain %18 %592 %48 
                                       f32_4 %611 = OpLoad %610 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 1 2 
                                       f32_3 %613 = OpLoad %502 
                                       f32_3 %614 = OpVectorShuffle %613 %613 2 2 2 
                                       f32_3 %615 = OpFMul %612 %614 
                                       f32_4 %616 = OpLoad %319 
                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
                                       f32_3 %618 = OpFAdd %615 %617 
                                       f32_4 %619 = OpLoad %319 
                                       f32_4 %620 = OpVectorShuffle %619 %618 4 5 6 3 
                                                      OpStore %319 %620 
                                       f32_4 %621 = OpLoad %319 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
                              Uniform f32_4* %623 = OpAccessChain %18 %592 %21 
                                       f32_4 %624 = OpLoad %623 
                                       f32_3 %625 = OpVectorShuffle %624 %624 0 1 2 
                                       f32_3 %626 = OpFAdd %622 %625 
                                       f32_4 %627 = OpLoad %319 
                                       f32_4 %628 = OpVectorShuffle %627 %626 4 5 6 3 
                                                      OpStore %319 %628 
                                        bool %631 = OpLoad %586 
                                                      OpSelectionMerge %633 None 
                                                      OpBranchConditional %631 %632 %636 
                                             %632 = OpLabel 
                                       f32_4 %634 = OpLoad %319 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                                      OpStore %630 %635 
                                                      OpBranch %633 
                                             %636 = OpLabel 
                                       f32_3 %637 = OpLoad %502 
                                                      OpStore %630 %637 
                                                      OpBranch %633 
                                             %633 = OpLabel 
                                       f32_3 %638 = OpLoad %630 
                                       f32_4 %639 = OpLoad %319 
                                       f32_4 %640 = OpVectorShuffle %639 %638 4 5 6 3 
                                                      OpStore %319 %640 
                                       f32_4 %641 = OpLoad %319 
                                       f32_3 %642 = OpVectorShuffle %641 %641 0 1 2 
                              Uniform f32_3* %644 = OpAccessChain %18 %643 
                                       f32_3 %645 = OpLoad %644 
                                       f32_3 %646 = OpFNegate %645 
                                       f32_3 %647 = OpFAdd %642 %646 
                                       f32_4 %648 = OpLoad %319 
                                       f32_4 %649 = OpVectorShuffle %648 %647 4 5 6 3 
                                                      OpStore %319 %649 
                                       f32_4 %650 = OpLoad %319 
                                       f32_3 %651 = OpVectorShuffle %650 %650 0 1 2 
                              Uniform f32_3* %653 = OpAccessChain %18 %652 
                                       f32_3 %654 = OpLoad %653 
                                       f32_3 %655 = OpFMul %651 %654 
                                       f32_4 %656 = OpLoad %319 
                                       f32_4 %657 = OpVectorShuffle %656 %655 0 4 5 6 
                                                      OpStore %319 %657 
                                Private f32* %658 = OpAccessChain %319 %75 
                                         f32 %659 = OpLoad %658 
                                         f32 %661 = OpFMul %659 %660 
                                         f32 %663 = OpFAdd %661 %662 
                                Private f32* %664 = OpAccessChain %132 %83 
                                                      OpStore %664 %663 
                                Uniform f32* %665 = OpAccessChain %18 %573 %401 
                                         f32 %666 = OpLoad %665 
                                         f32 %668 = OpFMul %666 %667 
                                         f32 %669 = OpFAdd %668 %662 
                                                      OpStore %215 %669 
                                         f32 %670 = OpLoad %215 
                                Private f32* %671 = OpAccessChain %132 %83 
                                         f32 %672 = OpLoad %671 
                                         f32 %673 = OpExtInst %1 40 %670 %672 
                                Private f32* %674 = OpAccessChain %319 %83 
                                                      OpStore %674 %673 
                  read_only Texture3DSampled %679 = OpLoad %678 
                                       f32_4 %680 = OpLoad %319 
                                       f32_3 %681 = OpVectorShuffle %680 %680 0 2 3 
                                       f32_4 %682 = OpImageSampleImplicitLod %679 %681 
                                                      OpStore %319 %682 
                                       f32_4 %684 = OpLoad %319 
                                                      OpStore %683 %684 
                                                      OpBranch %585 
                                             %685 = OpLabel 
                                Private f32* %686 = OpAccessChain %683 %83 
                                                      OpStore %686 %181 
                                Private f32* %687 = OpAccessChain %683 %75 
                                                      OpStore %687 %181 
                                Private f32* %688 = OpAccessChain %683 %401 
                                                      OpStore %688 %181 
                                Private f32* %689 = OpAccessChain %683 %404 
                                                      OpStore %689 %181 
                                                      OpBranch %585 
                                             %585 = OpLabel 
                                       f32_4 %690 = OpLoad %683 
                              Uniform f32_4* %691 = OpAccessChain %18 %48 
                                       f32_4 %692 = OpLoad %691 
                                         f32 %693 = OpDot %690 %692 
                                                      OpStore %400 %693 
                                         f32 %694 = OpLoad %400 
                                         f32 %695 = OpExtInst %1 43 %694 %182 %181 
                                                      OpStore %400 %695 
                                       f32_4 %697 = OpLoad %696 
                                       f32_2 %698 = OpVectorShuffle %697 %697 0 1 
                                       f32_4 %699 = OpLoad %696 
                                       f32_2 %700 = OpVectorShuffle %699 %699 3 3 
                                       f32_2 %701 = OpFDiv %698 %700 
                                                      OpStore %132 %701 
                  read_only Texture2DSampled %704 = OpLoad %703 
                                       f32_2 %705 = OpLoad %132 
                                       f32_4 %706 = OpImageSampleImplicitLod %704 %705 
                                         f32 %707 = OpCompositeExtract %706 0 
                                                      OpStore %702 %707 
                                Private f32* %709 = OpAccessChain %110 %83 
                                         f32 %710 = OpLoad %709 
                                         f32 %711 = OpLoad %702 
                                         f32 %712 = OpFAdd %710 %711 
                                Private f32* %713 = OpAccessChain %708 %83 
                                                      OpStore %713 %712 
                                Private f32* %714 = OpAccessChain %708 %83 
                                         f32 %715 = OpLoad %714 
                                         f32 %716 = OpExtInst %1 43 %715 %182 %181 
                                Private f32* %717 = OpAccessChain %708 %83 
                                                      OpStore %717 %716 
                                Private f32* %718 = OpAccessChain %708 %83 
                                         f32 %719 = OpLoad %718 
                                         f32 %720 = OpLoad %400 
                                         f32 %721 = OpExtInst %1 37 %719 %720 
                                                      OpStore %400 %721 
                                        bool %723 = OpLoad %572 
                                                      OpSelectionMerge %725 None 
                                                      OpBranchConditional %723 %724 %727 
                                             %724 = OpLabel 
                                         f32 %726 = OpLoad %400 
                                                      OpStore %722 %726 
                                                      OpBranch %725 
                                             %727 = OpLabel 
                                Private f32* %728 = OpAccessChain %708 %83 
                                         f32 %729 = OpLoad %728 
                                                      OpStore %722 %729 
                                                      OpBranch %725 
                                             %725 = OpLabel 
                                         f32 %730 = OpLoad %722 
                                                      OpStore %400 %730 
                                       f32_4 %732 = OpLoad %453 
                                       f32_3 %733 = OpVectorShuffle %732 %732 0 1 2 
                                       f32_3 %735 = OpLoad %734 
                                       f32_3 %736 = OpFMul %733 %735 
                                       f32_4 %737 = OpLoad %731 
                                       f32_4 %738 = OpVectorShuffle %737 %736 4 5 6 3 
                                                      OpStore %731 %738 
                                       f32_4 %739 = OpLoad %453 
                                       f32_3 %740 = OpVectorShuffle %739 %739 0 1 2 
                              Uniform f32_4* %742 = OpAccessChain %18 %741 
                                       f32_4 %743 = OpLoad %742 
                                       f32_3 %744 = OpVectorShuffle %743 %743 0 1 2 
                                       f32_3 %745 = OpFMul %740 %744 
                                                      OpStore %708 %745 
                                         f32 %746 = OpLoad %400 
                                       f32_3 %747 = OpCompositeConstruct %746 %746 %746 
                                       f32_3 %748 = OpLoad %708 
                                       f32_3 %749 = OpFMul %747 %748 
                                       f32_4 %750 = OpLoad %453 
                                       f32_4 %751 = OpVectorShuffle %750 %749 4 5 6 3 
                                                      OpStore %453 %751 
                                Private f32* %752 = OpAccessChain %731 %404 
                                                      OpStore %752 %182 
                                       f32_4 %755 = OpLoad %453 
                                       f32_4 %756 = OpLoad %731 
                                       f32_4 %757 = OpFAdd %755 %756 
                                                      OpStore %754 %757 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Blend One One, One One
  ColorMask RGB 0
  ZWrite Off
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 111830
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat10;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat3 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat3 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _GlitchInterval;
uniform 	float _DispIntensity;
uniform 	float _DispProbability;
uniform 	float _ColorIntensity;
uniform 	float _ColorProbability;
uniform 	float _DispGlitchOn;
uniform 	float _ColorGlitchOn;
uniform 	float _WrapDispCoords;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat16_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat10_4;
vec3 u_xlat5;
bool u_xlatb5;
float u_xlat7;
vec2 u_xlat10;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].ww + u_xlat0.xy;
    u_xlat10.x = _Time.y / _GlitchInterval;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat5.x = u_xlat0.x + 2.79299998;
    u_xlat1 = u_xlat0.xxxx * vec4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
    u_xlat1 = sin(u_xlat1);
    u_xlat1 = u_xlat1 * vec4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
    u_xlat1 = fract(u_xlat1);
    u_xlat10.xy = u_xlat1.zw + vec2(-0.5, -0.5);
    u_xlat11.xy = u_xlat5.xx * vec2(-91.2228012, 91.2228012);
    u_xlat11.xy = sin(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy * vec2(43758.5469, 43758.5469);
    u_xlat11.xy = fract(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
    u_xlatb1.xy = lessThan(u_xlat1.xyxx, vec4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
    u_xlatb2.xyz = equal(vec4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), vec4(1.0, 1.0, 1.0, 0.0)).xyz;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
    u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
    u_xlat5.x = vs_TEXCOORD0.y / u_xlat5.x;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * 78.2330017;
    u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 43758.5469;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat0.x = u_xlat0.x * _DispIntensity + vs_TEXCOORD0.x;
    u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat16 = fract(abs(u_xlat0.x));
    u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : vs_TEXCOORD0.x;
    u_xlat0.y = vs_TEXCOORD0.y;
    u_xlat2 = texture(_MainTex, u_xlat0.xy);
    u_xlat3.xy = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
    u_xlat3.zw = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + vs_TEXCOORD0.yy;
    u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
    u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
    u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
    u_xlat0.y = u_xlat11.x * _ColorIntensity + vs_TEXCOORD0.y;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
    u_xlat1.x = u_xlat0.w + u_xlat16_1;
    u_xlat0.w = u_xlat1.x * 0.333333343;
    u_xlat0.x = u_xlat10_4.x;
    u_xlat0.y = u_xlat10_3.y;
    u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
    u_xlat1 = u_xlat0 * vs_COLOR0;
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + -0.100000001;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat15 = u_xlat2.y * 0.25 + 0.75;
        u_xlat7 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat15, u_xlat7);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat15 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10_2 = texture(_LightTexture0, u_xlat0.xx);
    u_xlat0.x = u_xlat15 * u_xlat10_2.w;
    u_xlat5.xyz = u_xlat1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat5.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %116 %128 %129 %143 %172 %178 %181 %183 %184 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %143 Location 143 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %181 Location 181 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate %185 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 3 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                               Private f32_4* %93 = OpVariable Private 
                                             %113 = OpTypeArray %6 %48 
                                             %114 = OpTypeStruct %7 %6 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %7 
                                             %126 = OpTypeVector %6 2 
                                             %127 = OpTypePointer Output %126 
                               Output f32_2* %128 = OpVariable Output 
                                Input f32_4* %129 = OpVariable Input 
                                         i32 %132 = OpConstant 5 
                                             %141 = OpTypeVector %6 3 
                                             %142 = OpTypePointer Input %141 
                                Input f32_3* %143 = OpVariable Input 
                                         u32 %161 = OpConstant 2 
                                Private f32* %163 = OpVariable Private 
                                             %171 = OpTypePointer Output %141 
                               Output f32_3* %172 = OpVariable Output 
                               Output f32_3* %178 = OpVariable Output 
                               Output f32_4* %181 = OpVariable Output 
                               Output f32_4* %183 = OpVariable Output 
                                Input f32_4* %184 = OpVariable Input 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %30 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %86 = OpAccessChain %17 %60 %30 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %9 %92 
                                        f32_4 %94 = OpLoad %81 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                               Uniform f32_4* %96 = OpAccessChain %17 %73 %61 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpFMul %95 %97 
                                                      OpStore %93 %98 
                               Uniform f32_4* %99 = OpAccessChain %17 %73 %60 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %101 0 0 0 0 
                                       f32_4 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %93 
                                       f32_4 %105 = OpFAdd %103 %104 
                                                      OpStore %93 %105 
                              Uniform f32_4* %106 = OpAccessChain %17 %73 %73 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %81 
                                       f32_4 %109 = OpVectorShuffle %108 %108 2 2 2 2 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %93 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %93 %112 
                              Uniform f32_4* %117 = OpAccessChain %17 %73 %30 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %81 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %93 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %60 
                                                      OpStore %125 %123 
                                       f32_4 %130 = OpLoad %129 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %133 = OpAccessChain %17 %132 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFMul %131 %135 
                              Uniform f32_4* %137 = OpAccessChain %17 %132 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 2 3 
                                       f32_2 %140 = OpFAdd %136 %139 
                                                      OpStore %128 %140 
                                       f32_3 %144 = OpLoad %143 
                              Uniform f32_4* %145 = OpAccessChain %17 %61 %60 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %144 %147 
                                Private f32* %149 = OpAccessChain %81 %25 
                                                      OpStore %149 %148 
                                       f32_3 %150 = OpLoad %143 
                              Uniform f32_4* %151 = OpAccessChain %17 %61 %61 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %150 %153 
                                Private f32* %155 = OpAccessChain %81 %48 
                                                      OpStore %155 %154 
                                       f32_3 %156 = OpLoad %143 
                              Uniform f32_4* %157 = OpAccessChain %17 %61 %73 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %156 %159 
                                Private f32* %162 = OpAccessChain %81 %161 
                                                      OpStore %162 %160 
                                       f32_4 %164 = OpLoad %81 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_4 %166 = OpLoad %81 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %165 %167 
                                                      OpStore %163 %168 
                                         f32 %169 = OpLoad %163 
                                         f32 %170 = OpExtInst %1 32 %169 
                                                      OpStore %163 %170 
                                         f32 %173 = OpLoad %163 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_4 %175 = OpLoad %81 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFMul %174 %176 
                                                      OpStore %172 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                                      OpStore %178 %180 
                                       f32_4 %182 = OpLoad %9 
                                                      OpStore %181 %182 
                                       f32_4 %185 = OpLoad %184 
                                                      OpStore %183 %185 
                                 Output f32* %187 = OpAccessChain %116 %60 %48 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %116 %60 %48 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 717
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %206 %462 %512 %705 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 RelaxedPrecision 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 RelaxedPrecision 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpMemberDecorate %17 13 Offset 17 
                                                      OpMemberDecorate %17 14 Offset 17 
                                                      OpMemberDecorate %17 15 Offset 17 
                                                      OpMemberDecorate %17 16 Offset 17 
                                                      OpMemberDecorate %17 17 Offset 17 
                                                      OpMemberDecorate %17 18 RelaxedPrecision 
                                                      OpMemberDecorate %17 18 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %206 Location 206 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %322 DescriptorSet 322 
                                                      OpDecorate %322 Binding 322 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %462 Location 462 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %512 Location 512 
                                                      OpDecorate %563 SpecId 563 
                                                      OpDecorate %657 DescriptorSet 657 
                                                      OpDecorate %657 Binding 657 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %669 RelaxedPrecision 
                                                      OpDecorate %671 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %676 RelaxedPrecision 
                                                      OpDecorate %684 DescriptorSet 684 
                                                      OpDecorate %684 Binding 684 
                                                      OpDecorate %692 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %701 RelaxedPrecision 
                                                      OpDecorate %702 RelaxedPrecision 
                                                      OpDecorate %703 RelaxedPrecision 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %705 Location 705 
                                                      OpDecorate %708 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeArray %7 %11 
                                              %17 = OpTypeStruct %7 %7 %12 %13 %7 %14 %15 %15 %7 %16 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 2 
                                          i32 %22 = OpConstant 3 
                                              %23 = OpTypeVector %6 2 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 1 
                                          i32 %35 = OpConstant 0 
                                              %72 = OpTypePointer Private %23 
                               Private f32_2* %73 = OpVariable Private 
                                          u32 %74 = OpConstant 1 
                                              %75 = OpTypePointer Uniform %6 
                                          i32 %78 = OpConstant 10 
                                          u32 %82 = OpConstant 0 
                                              %83 = OpTypePointer Private %6 
                                Private f32* %104 = OpVariable Private 
                                         f32 %107 = OpConstant 3.674022E-40 
                              Private f32_4* %109 = OpVariable Private 
                                         f32 %112 = OpConstant 3.674022E-40 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %114 = OpConstant 3.674022E-40 
                                         f32 %115 = OpConstant 3.674022E-40 
                                       f32_4 %116 = OpConstantComposite %112 %113 %114 %115 
                                         f32 %121 = OpConstant 3.674022E-40 
                                       f32_4 %122 = OpConstantComposite %121 %121 %121 %121 
                                         f32 %128 = OpConstant 3.674022E-40 
                                       f32_2 %129 = OpConstantComposite %128 %128 
                              Private f32_2* %131 = OpVariable Private 
                                       f32_2 %134 = OpConstantComposite %115 %113 
                                       f32_2 %139 = OpConstantComposite %121 %121 
                                             %145 = OpTypeBool 
                                             %146 = OpTypeVector %145 2 
                                             %147 = OpTypePointer Private %146 
                             Private bool_2* %148 = OpVariable Private 
                                         i32 %151 = OpConstant 12 
                                         i32 %154 = OpConstant 14 
                                             %162 = OpTypeVector %145 4 
                                             %165 = OpTypeVector %145 3 
                                             %166 = OpTypePointer Private %165 
                             Private bool_3* %167 = OpVariable Private 
                                         i32 %168 = OpConstant 15 
                                         i32 %171 = OpConstant 17 
                                         i32 %174 = OpConstant 16 
                                         f32 %180 = OpConstant 3.674022E-40 
                                         f32 %181 = OpConstant 3.674022E-40 
                                       f32_4 %182 = OpConstantComposite %180 %180 %180 %181 
                                         f32 %201 = OpConstant 3.674022E-40 
                                         f32 %203 = OpConstant 3.674022E-40 
                                             %205 = OpTypePointer Input %23 
                                Input f32_2* %206 = OpVariable Input 
                                             %207 = OpTypePointer Input %6 
                                Private f32* %214 = OpVariable Private 
                                         f32 %227 = OpConstant 3.674022E-40 
                                         f32 %231 = OpConstant 3.674022E-40 
                                         i32 %255 = OpConstant 11 
                                             %263 = OpTypePointer Private %145 
                               Private bool* %264 = OpVariable Private 
                                             %275 = OpTypePointer Function %6 
                              Private f32_4* %318 = OpVariable Private 
                                             %319 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %320 = OpTypeSampledImage %319 
                                             %321 = OpTypePointer UniformConstant %320 
 UniformConstant read_only Texture2DSampled* %322 = OpVariable UniformConstant 
                              Private f32_4* %327 = OpVariable Private 
                                         i32 %329 = OpConstant 13 
                              Private f32_4* %366 = OpVariable Private 
                                             %399 = OpTypePointer Private %15 
                              Private f32_3* %400 = OpVariable Private 
                                         u32 %401 = OpConstant 2 
                                         u32 %404 = OpConstant 3 
                                         f32 %417 = OpConstant 3.674022E-40 
                              Private f32_4* %420 = OpVariable Private 
                                             %433 = OpTypePointer Function %23 
                              Private f32_4* %459 = OpVariable Private 
                                             %461 = OpTypePointer Input %7 
                                Input f32_4* %462 = OpVariable Input 
                                         f32 %470 = OpConstant 3.674022E-40 
                                         i32 %481 = OpConstant -1 
                                         i32 %492 = OpConstant 18 
                                             %511 = OpTypePointer Input %15 
                                Input f32_3* %512 = OpVariable Input 
                                         i32 %515 = OpConstant 9 
                               Private bool* %552 = OpVariable Private 
                                         i32 %553 = OpConstant 4 
                                        bool %557 = OpConstantFalse 
                                        bool %563 = OpSpecConstantFalse 
                                         i32 %571 = OpConstant 5 
                                             %608 = OpTypePointer Function %15 
                                         i32 %622 = OpConstant 7 
                                             %623 = OpTypePointer Uniform %15 
                                         i32 %632 = OpConstant 6 
                                         f32 %640 = OpConstant 3.674022E-40 
                                         f32 %642 = OpConstant 3.674022E-40 
                                Private f32* %644 = OpVariable Private 
                                         f32 %647 = OpConstant 3.674022E-40 
                                             %654 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %655 = OpTypeSampledImage %654 
                                             %656 = OpTypePointer UniformConstant %655 
 UniformConstant read_only Texture3DSampled* %657 = OpVariable UniformConstant 
                              Private f32_4* %662 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %684 = OpVariable UniformConstant 
                                         i32 %699 = OpConstant 8 
                                             %704 = OpTypePointer Output %7 
                               Output f32_4* %705 = OpVariable Output 
                                             %714 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %276 = OpVariable Function 
                               Function f32* %292 = OpVariable Function 
                               Function f32* %303 = OpVariable Function 
                               Function f32* %421 = OpVariable Function 
                             Function f32_2* %434 = OpVariable Function 
                               Function f32* %447 = OpVariable Function 
                             Function f32_3* %609 = OpVariable Function 
                               Uniform f32_4* %25 = OpAccessChain %19 %21 %22 
                                        f32_4 %26 = OpLoad %25 
                                        f32_2 %27 = OpVectorShuffle %26 %26 1 1 
                               Uniform f32_4* %29 = OpAccessChain %19 %22 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                                        f32_2 %32 = OpFMul %27 %31 
                                        f32_4 %33 = OpLoad %9 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 2 3 
                                                      OpStore %9 %34 
                               Uniform f32_4* %36 = OpAccessChain %19 %22 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                               Uniform f32_4* %39 = OpAccessChain %19 %21 %22 
                                        f32_4 %40 = OpLoad %39 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 0 
                                        f32_2 %42 = OpFMul %38 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_2 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 2 3 
                                                      OpStore %9 %47 
                               Uniform f32_4* %48 = OpAccessChain %19 %22 %21 
                                        f32_4 %49 = OpLoad %48 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                               Uniform f32_4* %51 = OpAccessChain %19 %21 %22 
                                        f32_4 %52 = OpLoad %51 
                                        f32_2 %53 = OpVectorShuffle %52 %52 2 2 
                                        f32_2 %54 = OpFMul %50 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                                        f32_2 %57 = OpFAdd %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %57 4 5 2 3 
                                                      OpStore %9 %59 
                               Uniform f32_4* %60 = OpAccessChain %19 %22 %22 
                                        f32_4 %61 = OpLoad %60 
                                        f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                               Uniform f32_4* %63 = OpAccessChain %19 %21 %22 
                                        f32_4 %64 = OpLoad %63 
                                        f32_2 %65 = OpVectorShuffle %64 %64 3 3 
                                        f32_2 %66 = OpFMul %62 %65 
                                        f32_4 %67 = OpLoad %9 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_2 %69 = OpFAdd %66 %68 
                                        f32_4 %70 = OpLoad %9 
                                        f32_4 %71 = OpVectorShuffle %70 %69 4 5 2 3 
                                                      OpStore %9 %71 
                                 Uniform f32* %76 = OpAccessChain %19 %35 %74 
                                          f32 %77 = OpLoad %76 
                                 Uniform f32* %79 = OpAccessChain %19 %78 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFDiv %77 %80 
                                 Private f32* %84 = OpAccessChain %73 %82 
                                                      OpStore %84 %81 
                                 Private f32* %85 = OpAccessChain %73 %82 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpExtInst %1 8 %86 
                                 Private f32* %88 = OpAccessChain %73 %82 
                                                      OpStore %88 %87 
                                 Private f32* %89 = OpAccessChain %73 %82 
                                          f32 %90 = OpLoad %89 
                                 Uniform f32* %91 = OpAccessChain %19 %78 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFMul %90 %92 
                                 Private f32* %94 = OpAccessChain %9 %82 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %82 
                                                      OpStore %97 %96 
                                 Private f32* %98 = OpAccessChain %9 %74 
                                          f32 %99 = OpLoad %98 
                                Private f32* %100 = OpAccessChain %9 %82 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFAdd %99 %101 
                                Private f32* %103 = OpAccessChain %9 %82 
                                                      OpStore %103 %102 
                                Private f32* %105 = OpAccessChain %9 %82 
                                         f32 %106 = OpLoad %105 
                                         f32 %108 = OpFAdd %106 %107 
                                                      OpStore %104 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_4 %111 = OpVectorShuffle %110 %110 0 0 0 0 
                                       f32_4 %117 = OpFMul %111 %116 
                                                      OpStore %109 %117 
                                       f32_4 %118 = OpLoad %109 
                                       f32_4 %119 = OpExtInst %1 13 %118 
                                                      OpStore %109 %119 
                                       f32_4 %120 = OpLoad %109 
                                       f32_4 %123 = OpFMul %120 %122 
                                                      OpStore %109 %123 
                                       f32_4 %124 = OpLoad %109 
                                       f32_4 %125 = OpExtInst %1 10 %124 
                                                      OpStore %109 %125 
                                       f32_4 %126 = OpLoad %109 
                                       f32_2 %127 = OpVectorShuffle %126 %126 2 3 
                                       f32_2 %130 = OpFAdd %127 %129 
                                                      OpStore %73 %130 
                                         f32 %132 = OpLoad %104 
                                       f32_2 %133 = OpCompositeConstruct %132 %132 
                                       f32_2 %135 = OpFMul %133 %134 
                                                      OpStore %131 %135 
                                       f32_2 %136 = OpLoad %131 
                                       f32_2 %137 = OpExtInst %1 13 %136 
                                                      OpStore %131 %137 
                                       f32_2 %138 = OpLoad %131 
                                       f32_2 %140 = OpFMul %138 %139 
                                                      OpStore %131 %140 
                                       f32_2 %141 = OpLoad %131 
                                       f32_2 %142 = OpExtInst %1 10 %141 
                                                      OpStore %131 %142 
                                       f32_2 %143 = OpLoad %131 
                                       f32_2 %144 = OpFAdd %143 %129 
                                                      OpStore %131 %144 
                                       f32_4 %149 = OpLoad %109 
                                       f32_4 %150 = OpVectorShuffle %149 %149 0 1 0 0 
                                Uniform f32* %152 = OpAccessChain %19 %151 
                                         f32 %153 = OpLoad %152 
                                Uniform f32* %155 = OpAccessChain %19 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %157 = OpAccessChain %19 %151 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %159 = OpAccessChain %19 %151 
                                         f32 %160 = OpLoad %159 
                                       f32_4 %161 = OpCompositeConstruct %153 %156 %158 %160 
                                      bool_4 %163 = OpFOrdLessThan %150 %161 
                                      bool_2 %164 = OpVectorShuffle %163 %163 0 1 
                                                      OpStore %148 %164 
                                Uniform f32* %169 = OpAccessChain %19 %168 
                                         f32 %170 = OpLoad %169 
                                Uniform f32* %172 = OpAccessChain %19 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %19 %174 
                                         f32 %176 = OpLoad %175 
                                Uniform f32* %177 = OpAccessChain %19 %168 
                                         f32 %178 = OpLoad %177 
                                       f32_4 %179 = OpCompositeConstruct %170 %173 %176 %178 
                                      bool_4 %183 = OpFOrdEqual %179 %182 
                                      bool_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                                      OpStore %167 %184 
                                      bool_2 %185 = OpLoad %148 
                                        bool %186 = OpCompositeExtract %185 0 
                                      bool_3 %187 = OpLoad %167 
                                        bool %188 = OpCompositeExtract %187 0 
                                        bool %189 = OpLogicalAnd %186 %188 
                                      bool_2 %190 = OpLoad %148 
                                      bool_2 %191 = OpCompositeInsert %189 %190 0 
                                                      OpStore %148 %191 
                                      bool_2 %192 = OpLoad %148 
                                        bool %193 = OpCompositeExtract %192 1 
                                      bool_3 %194 = OpLoad %167 
                                        bool %195 = OpCompositeExtract %194 2 
                                        bool %196 = OpLogicalAnd %193 %195 
                                      bool_2 %197 = OpLoad %148 
                                      bool_2 %198 = OpCompositeInsert %196 %197 1 
                                                      OpStore %148 %198 
                                Private f32* %199 = OpAccessChain %131 %74 
                                         f32 %200 = OpLoad %199 
                                         f32 %202 = OpFMul %200 %201 
                                         f32 %204 = OpFAdd %202 %203 
                                                      OpStore %104 %204 
                                  Input f32* %208 = OpAccessChain %206 %74 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpLoad %104 
                                         f32 %211 = OpFDiv %209 %210 
                                                      OpStore %104 %211 
                                         f32 %212 = OpLoad %104 
                                         f32 %213 = OpExtInst %1 8 %212 
                                                      OpStore %104 %213 
                                Private f32* %215 = OpAccessChain %9 %82 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpLoad %104 
                                         f32 %219 = OpFAdd %217 %218 
                                                      OpStore %214 %219 
                                Private f32* %220 = OpAccessChain %9 %82 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpLoad %104 
                                         f32 %223 = OpFAdd %221 %222 
                                Private f32* %224 = OpAccessChain %9 %82 
                                                      OpStore %224 %223 
                                Private f32* %225 = OpAccessChain %9 %82 
                                         f32 %226 = OpLoad %225 
                                         f32 %228 = OpFMul %226 %227 
                                Private f32* %229 = OpAccessChain %9 %82 
                                                      OpStore %229 %228 
                                         f32 %230 = OpLoad %214 
                                         f32 %232 = OpFMul %230 %231 
                                Private f32* %233 = OpAccessChain %9 %82 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFAdd %232 %234 
                                Private f32* %236 = OpAccessChain %9 %82 
                                                      OpStore %236 %235 
                                Private f32* %237 = OpAccessChain %9 %82 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpExtInst %1 13 %238 
                                Private f32* %240 = OpAccessChain %9 %82 
                                                      OpStore %240 %239 
                                Private f32* %241 = OpAccessChain %9 %82 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFMul %242 %121 
                                Private f32* %244 = OpAccessChain %9 %82 
                                                      OpStore %244 %243 
                                Private f32* %245 = OpAccessChain %9 %82 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpExtInst %1 10 %246 
                                Private f32* %248 = OpAccessChain %9 %82 
                                                      OpStore %248 %247 
                                Private f32* %249 = OpAccessChain %9 %82 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFAdd %250 %128 
                                Private f32* %252 = OpAccessChain %9 %82 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %9 %82 
                                         f32 %254 = OpLoad %253 
                                Uniform f32* %256 = OpAccessChain %19 %255 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %254 %257 
                                  Input f32* %259 = OpAccessChain %206 %82 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFAdd %258 %260 
                                Private f32* %262 = OpAccessChain %9 %82 
                                                      OpStore %262 %261 
                                Private f32* %265 = OpAccessChain %9 %82 
                                         f32 %266 = OpLoad %265 
                                Private f32* %267 = OpAccessChain %9 %82 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                        bool %270 = OpFOrdGreaterThanEqual %266 %269 
                                                      OpStore %264 %270 
                                Private f32* %271 = OpAccessChain %9 %82 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 4 %272 
                                         f32 %274 = OpExtInst %1 10 %273 
                                                      OpStore %214 %274 
                                        bool %277 = OpLoad %264 
                                                      OpSelectionMerge %279 None 
                                                      OpBranchConditional %277 %278 %281 
                                             %278 = OpLabel 
                                         f32 %280 = OpLoad %214 
                                                      OpStore %276 %280 
                                                      OpBranch %279 
                                             %281 = OpLabel 
                                         f32 %282 = OpLoad %214 
                                         f32 %283 = OpFNegate %282 
                                                      OpStore %276 %283 
                                                      OpBranch %279 
                                             %279 = OpLabel 
                                         f32 %284 = OpLoad %276 
                                                      OpStore %104 %284 
                                Private f32* %285 = OpAccessChain %9 %82 
                                         f32 %286 = OpLoad %285 
                                Private f32* %287 = OpAccessChain %9 %82 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %9 %82 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpExtInst %1 43 %289 %181 %180 
                                Private f32* %291 = OpAccessChain %9 %82 
                                                      OpStore %291 %290 
                                      bool_3 %293 = OpLoad %167 
                                        bool %294 = OpCompositeExtract %293 1 
                                                      OpSelectionMerge %296 None 
                                                      OpBranchConditional %294 %295 %298 
                                             %295 = OpLabel 
                                         f32 %297 = OpLoad %104 
                                                      OpStore %292 %297 
                                                      OpBranch %296 
                                             %298 = OpLabel 
                                Private f32* %299 = OpAccessChain %9 %82 
                                         f32 %300 = OpLoad %299 
                                                      OpStore %292 %300 
                                                      OpBranch %296 
                                             %296 = OpLabel 
                                         f32 %301 = OpLoad %292 
                                Private f32* %302 = OpAccessChain %9 %82 
                                                      OpStore %302 %301 
                                      bool_2 %304 = OpLoad %148 
                                        bool %305 = OpCompositeExtract %304 0 
                                                      OpSelectionMerge %307 None 
                                                      OpBranchConditional %305 %306 %310 
                                             %306 = OpLabel 
                                Private f32* %308 = OpAccessChain %9 %82 
                                         f32 %309 = OpLoad %308 
                                                      OpStore %303 %309 
                                                      OpBranch %307 
                                             %310 = OpLabel 
                                  Input f32* %311 = OpAccessChain %206 %82 
                                         f32 %312 = OpLoad %311 
                                                      OpStore %303 %312 
                                                      OpBranch %307 
                                             %307 = OpLabel 
                                         f32 %313 = OpLoad %303 
                                Private f32* %314 = OpAccessChain %9 %82 
                                                      OpStore %314 %313 
                                  Input f32* %315 = OpAccessChain %206 %74 
                                         f32 %316 = OpLoad %315 
                                Private f32* %317 = OpAccessChain %9 %74 
                                                      OpStore %317 %316 
                  read_only Texture2DSampled %323 = OpLoad %322 
                                       f32_4 %324 = OpLoad %9 
                                       f32_2 %325 = OpVectorShuffle %324 %324 0 1 
                                       f32_4 %326 = OpImageSampleImplicitLod %323 %325 
                                                      OpStore %318 %326 
                                       f32_2 %328 = OpLoad %73 
                                Uniform f32* %330 = OpAccessChain %19 %329 
                                         f32 %331 = OpLoad %330 
                                Uniform f32* %332 = OpAccessChain %19 %329 
                                         f32 %333 = OpLoad %332 
                                       f32_2 %334 = OpCompositeConstruct %331 %333 
                                         f32 %335 = OpCompositeExtract %334 0 
                                         f32 %336 = OpCompositeExtract %334 1 
                                       f32_2 %337 = OpCompositeConstruct %335 %336 
                                       f32_2 %338 = OpFMul %328 %337 
                                       f32_4 %339 = OpLoad %9 
                                       f32_2 %340 = OpVectorShuffle %339 %339 0 0 
                                       f32_2 %341 = OpFAdd %338 %340 
                                       f32_4 %342 = OpLoad %327 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 2 3 
                                                      OpStore %327 %343 
                                       f32_2 %344 = OpLoad %73 
                                Uniform f32* %345 = OpAccessChain %19 %329 
                                         f32 %346 = OpLoad %345 
                                Uniform f32* %347 = OpAccessChain %19 %329 
                                         f32 %348 = OpLoad %347 
                                       f32_2 %349 = OpCompositeConstruct %346 %348 
                                         f32 %350 = OpCompositeExtract %349 0 
                                         f32 %351 = OpCompositeExtract %349 1 
                                       f32_2 %352 = OpCompositeConstruct %350 %351 
                                       f32_2 %353 = OpFMul %344 %352 
                                       f32_2 %354 = OpLoad %206 
                                       f32_2 %355 = OpVectorShuffle %354 %354 1 1 
                                       f32_2 %356 = OpFAdd %353 %355 
                                       f32_4 %357 = OpLoad %327 
                                       f32_4 %358 = OpVectorShuffle %357 %356 0 1 4 5 
                                                      OpStore %327 %358 
                  read_only Texture2DSampled %359 = OpLoad %322 
                                       f32_4 %360 = OpLoad %327 
                                       f32_2 %361 = OpVectorShuffle %360 %360 0 2 
                                       f32_4 %362 = OpImageSampleImplicitLod %359 %361 
                                       f32_2 %363 = OpVectorShuffle %362 %362 0 3 
                                       f32_4 %364 = OpLoad %9 
                                       f32_4 %365 = OpVectorShuffle %364 %363 0 4 5 3 
                                                      OpStore %9 %365 
                  read_only Texture2DSampled %367 = OpLoad %322 
                                       f32_4 %368 = OpLoad %327 
                                       f32_2 %369 = OpVectorShuffle %368 %368 1 3 
                                       f32_4 %370 = OpImageSampleImplicitLod %367 %369 
                                       f32_2 %371 = OpVectorShuffle %370 %370 1 3 
                                       f32_4 %372 = OpLoad %366 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 1 2 5 
                                                      OpStore %366 %373 
                                Private f32* %374 = OpAccessChain %131 %82 
                                         f32 %375 = OpLoad %374 
                                Uniform f32* %376 = OpAccessChain %19 %329 
                                         f32 %377 = OpLoad %376 
                                         f32 %378 = OpFMul %375 %377 
                                Private f32* %379 = OpAccessChain %9 %82 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFAdd %378 %380 
                                Private f32* %382 = OpAccessChain %327 %82 
                                                      OpStore %382 %381 
                                Private f32* %383 = OpAccessChain %131 %82 
                                         f32 %384 = OpLoad %383 
                                Uniform f32* %385 = OpAccessChain %19 %329 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %384 %386 
                                  Input f32* %388 = OpAccessChain %206 %74 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFAdd %387 %389 
                                Private f32* %391 = OpAccessChain %327 %74 
                                                      OpStore %391 %390 
                  read_only Texture2DSampled %392 = OpLoad %322 
                                       f32_4 %393 = OpLoad %327 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                                       f32_4 %395 = OpImageSampleImplicitLod %392 %394 
                                       f32_2 %396 = OpVectorShuffle %395 %395 2 3 
                                       f32_4 %397 = OpLoad %9 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 1 2 5 
                                                      OpStore %9 %398 
                                Private f32* %402 = OpAccessChain %9 %401 
                                         f32 %403 = OpLoad %402 
                                Private f32* %405 = OpAccessChain %366 %404 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFAdd %403 %406 
                                Private f32* %408 = OpAccessChain %400 %82 
                                                      OpStore %408 %407 
                                Private f32* %409 = OpAccessChain %9 %404 
                                         f32 %410 = OpLoad %409 
                                Private f32* %411 = OpAccessChain %400 %82 
                                         f32 %412 = OpLoad %411 
                                         f32 %413 = OpFAdd %410 %412 
                                Private f32* %414 = OpAccessChain %400 %82 
                                                      OpStore %414 %413 
                                Private f32* %415 = OpAccessChain %400 %82 
                                         f32 %416 = OpLoad %415 
                                         f32 %418 = OpFMul %416 %417 
                                Private f32* %419 = OpAccessChain %400 %82 
                                                      OpStore %419 %418 
                                      bool_2 %422 = OpLoad %148 
                                        bool %423 = OpCompositeExtract %422 1 
                                                      OpSelectionMerge %425 None 
                                                      OpBranchConditional %423 %424 %428 
                                             %424 = OpLabel 
                                Private f32* %426 = OpAccessChain %366 %82 
                                         f32 %427 = OpLoad %426 
                                                      OpStore %421 %427 
                                                      OpBranch %425 
                                             %428 = OpLabel 
                                Private f32* %429 = OpAccessChain %318 %74 
                                         f32 %430 = OpLoad %429 
                                                      OpStore %421 %430 
                                                      OpBranch %425 
                                             %425 = OpLabel 
                                         f32 %431 = OpLoad %421 
                                Private f32* %432 = OpAccessChain %420 %74 
                                                      OpStore %432 %431 
                                      bool_2 %435 = OpLoad %148 
                                        bool %436 = OpCompositeExtract %435 1 
                                                      OpSelectionMerge %438 None 
                                                      OpBranchConditional %436 %437 %441 
                                             %437 = OpLabel 
                                       f32_4 %439 = OpLoad %9 
                                       f32_2 %440 = OpVectorShuffle %439 %439 1 0 
                                                      OpStore %434 %440 
                                                      OpBranch %438 
                                             %441 = OpLabel 
                                       f32_4 %442 = OpLoad %318 
                                       f32_2 %443 = OpVectorShuffle %442 %442 0 2 
                                                      OpStore %434 %443 
                                                      OpBranch %438 
                                             %438 = OpLabel 
                                       f32_2 %444 = OpLoad %434 
                                       f32_4 %445 = OpLoad %420 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 1 5 3 
                                                      OpStore %420 %446 
                                      bool_2 %448 = OpLoad %148 
                                        bool %449 = OpCompositeExtract %448 1 
                                                      OpSelectionMerge %451 None 
                                                      OpBranchConditional %449 %450 %454 
                                             %450 = OpLabel 
                                Private f32* %452 = OpAccessChain %400 %82 
                                         f32 %453 = OpLoad %452 
                                                      OpStore %447 %453 
                                                      OpBranch %451 
                                             %454 = OpLabel 
                                Private f32* %455 = OpAccessChain %318 %404 
                                         f32 %456 = OpLoad %455 
                                                      OpStore %447 %456 
                                                      OpBranch %451 
                                             %451 = OpLabel 
                                         f32 %457 = OpLoad %447 
                                Private f32* %458 = OpAccessChain %420 %404 
                                                      OpStore %458 %457 
                                       f32_4 %460 = OpLoad %420 
                                       f32_4 %463 = OpLoad %462 
                                       f32_4 %464 = OpFMul %460 %463 
                                                      OpStore %459 %464 
                                Private f32* %465 = OpAccessChain %420 %404 
                                         f32 %466 = OpLoad %465 
                                  Input f32* %467 = OpAccessChain %462 %404 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFMul %466 %468 
                                         f32 %471 = OpFAdd %469 %470 
                                Private f32* %472 = OpAccessChain %400 %82 
                                                      OpStore %472 %471 
                                Private f32* %473 = OpAccessChain %400 %82 
                                         f32 %474 = OpLoad %473 
                                        bool %475 = OpFOrdLessThan %474 %181 
                                      bool_2 %476 = OpLoad %148 
                                      bool_2 %477 = OpCompositeInsert %475 %476 0 
                                                      OpStore %148 %477 
                                      bool_2 %478 = OpLoad %148 
                                        bool %479 = OpCompositeExtract %478 0 
                                         i32 %480 = OpSelect %479 %28 %35 
                                         i32 %482 = OpIMul %480 %481 
                                        bool %483 = OpINotEqual %482 %35 
                                                      OpSelectionMerge %485 None 
                                                      OpBranchConditional %483 %484 %485 
                                             %484 = OpLabel 
                                                      OpKill
                                             %485 = OpLabel 
                                Private f32* %487 = OpAccessChain %420 %404 
                                         f32 %488 = OpLoad %487 
                                  Input f32* %489 = OpAccessChain %462 %404 
                                         f32 %490 = OpLoad %489 
                                         f32 %491 = OpFMul %488 %490 
                                Uniform f32* %493 = OpAccessChain %19 %492 
                                         f32 %494 = OpLoad %493 
                                         f32 %495 = OpFNegate %494 
                                         f32 %496 = OpFAdd %491 %495 
                                Private f32* %497 = OpAccessChain %400 %82 
                                                      OpStore %497 %496 
                                Private f32* %498 = OpAccessChain %400 %82 
                                         f32 %499 = OpLoad %498 
                                        bool %500 = OpFOrdLessThan %499 %181 
                                      bool_2 %501 = OpLoad %148 
                                      bool_2 %502 = OpCompositeInsert %500 %501 0 
                                                      OpStore %148 %502 
                                      bool_2 %503 = OpLoad %148 
                                        bool %504 = OpCompositeExtract %503 0 
                                         i32 %505 = OpSelect %504 %28 %35 
                                         i32 %506 = OpIMul %505 %481 
                                        bool %507 = OpINotEqual %506 %35 
                                                      OpSelectionMerge %509 None 
                                                      OpBranchConditional %507 %508 %509 
                                             %508 = OpLabel 
                                                      OpKill
                                             %509 = OpLabel 
                                       f32_3 %513 = OpLoad %512 
                                       f32_3 %514 = OpVectorShuffle %513 %513 1 1 1 
                              Uniform f32_4* %516 = OpAccessChain %19 %515 %28 
                                       f32_4 %517 = OpLoad %516 
                                       f32_3 %518 = OpVectorShuffle %517 %517 0 1 2 
                                       f32_3 %519 = OpFMul %514 %518 
                                       f32_4 %520 = OpLoad %109 
                                       f32_4 %521 = OpVectorShuffle %520 %519 4 5 6 3 
                                                      OpStore %109 %521 
                              Uniform f32_4* %522 = OpAccessChain %19 %515 %35 
                                       f32_4 %523 = OpLoad %522 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                       f32_3 %525 = OpLoad %512 
                                       f32_3 %526 = OpVectorShuffle %525 %525 0 0 0 
                                       f32_3 %527 = OpFMul %524 %526 
                                       f32_4 %528 = OpLoad %109 
                                       f32_3 %529 = OpVectorShuffle %528 %528 0 1 2 
                                       f32_3 %530 = OpFAdd %527 %529 
                                       f32_4 %531 = OpLoad %109 
                                       f32_4 %532 = OpVectorShuffle %531 %530 4 5 6 3 
                                                      OpStore %109 %532 
                              Uniform f32_4* %533 = OpAccessChain %19 %515 %21 
                                       f32_4 %534 = OpLoad %533 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 1 2 
                                       f32_3 %536 = OpLoad %512 
                                       f32_3 %537 = OpVectorShuffle %536 %536 2 2 2 
                                       f32_3 %538 = OpFMul %535 %537 
                                       f32_4 %539 = OpLoad %109 
                                       f32_3 %540 = OpVectorShuffle %539 %539 0 1 2 
                                       f32_3 %541 = OpFAdd %538 %540 
                                       f32_4 %542 = OpLoad %109 
                                       f32_4 %543 = OpVectorShuffle %542 %541 4 5 6 3 
                                                      OpStore %109 %543 
                                       f32_4 %544 = OpLoad %109 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                              Uniform f32_4* %546 = OpAccessChain %19 %515 %22 
                                       f32_4 %547 = OpLoad %546 
                                       f32_3 %548 = OpVectorShuffle %547 %547 0 1 2 
                                       f32_3 %549 = OpFAdd %545 %548 
                                       f32_4 %550 = OpLoad %109 
                                       f32_4 %551 = OpVectorShuffle %550 %549 4 5 6 3 
                                                      OpStore %109 %551 
                                Uniform f32* %554 = OpAccessChain %19 %553 %82 
                                         f32 %555 = OpLoad %554 
                                        bool %556 = OpFOrdEqual %555 %180 
                                                      OpStore %552 %556 
                                                      OpSelectionMerge %559 None 
                                                      OpBranchConditional %557 %558 %559 
                                             %558 = OpLabel 
                                        bool %560 = OpLoad %552 
                                                      OpSelectionMerge %562 None 
                                                      OpBranchConditional %560 %561 %562 
                                             %561 = OpLabel 
                                                      OpBranch %562 
                                             %562 = OpLabel 
                                                      OpBranch %559 
                                             %559 = OpLabel 
                                                      OpSelectionMerge %565 None 
                                                      OpBranchConditional %563 %564 %664 
                                             %564 = OpLabel 
                                Uniform f32* %566 = OpAccessChain %19 %553 %74 
                                         f32 %567 = OpLoad %566 
                                        bool %568 = OpFOrdEqual %567 %180 
                                                      OpStore %552 %568 
                                       f32_3 %569 = OpLoad %512 
                                       f32_3 %570 = OpVectorShuffle %569 %569 1 1 1 
                              Uniform f32_4* %572 = OpAccessChain %19 %571 %28 
                                       f32_4 %573 = OpLoad %572 
                                       f32_3 %574 = OpVectorShuffle %573 %573 0 1 2 
                                       f32_3 %575 = OpFMul %570 %574 
                                       f32_4 %576 = OpLoad %318 
                                       f32_4 %577 = OpVectorShuffle %576 %575 4 5 6 3 
                                                      OpStore %318 %577 
                              Uniform f32_4* %578 = OpAccessChain %19 %571 %35 
                                       f32_4 %579 = OpLoad %578 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                                       f32_3 %581 = OpLoad %512 
                                       f32_3 %582 = OpVectorShuffle %581 %581 0 0 0 
                                       f32_3 %583 = OpFMul %580 %582 
                                       f32_4 %584 = OpLoad %318 
                                       f32_3 %585 = OpVectorShuffle %584 %584 0 1 2 
                                       f32_3 %586 = OpFAdd %583 %585 
                                       f32_4 %587 = OpLoad %318 
                                       f32_4 %588 = OpVectorShuffle %587 %586 4 5 6 3 
                                                      OpStore %318 %588 
                              Uniform f32_4* %589 = OpAccessChain %19 %571 %21 
                                       f32_4 %590 = OpLoad %589 
                                       f32_3 %591 = OpVectorShuffle %590 %590 0 1 2 
                                       f32_3 %592 = OpLoad %512 
                                       f32_3 %593 = OpVectorShuffle %592 %592 2 2 2 
                                       f32_3 %594 = OpFMul %591 %593 
                                       f32_4 %595 = OpLoad %318 
                                       f32_3 %596 = OpVectorShuffle %595 %595 0 1 2 
                                       f32_3 %597 = OpFAdd %594 %596 
                                       f32_4 %598 = OpLoad %318 
                                       f32_4 %599 = OpVectorShuffle %598 %597 4 5 6 3 
                                                      OpStore %318 %599 
                                       f32_4 %600 = OpLoad %318 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                              Uniform f32_4* %602 = OpAccessChain %19 %571 %22 
                                       f32_4 %603 = OpLoad %602 
                                       f32_3 %604 = OpVectorShuffle %603 %603 0 1 2 
                                       f32_3 %605 = OpFAdd %601 %604 
                                       f32_4 %606 = OpLoad %318 
                                       f32_4 %607 = OpVectorShuffle %606 %605 4 5 6 3 
                                                      OpStore %318 %607 
                                        bool %610 = OpLoad %552 
                                                      OpSelectionMerge %612 None 
                                                      OpBranchConditional %610 %611 %615 
                                             %611 = OpLabel 
                                       f32_4 %613 = OpLoad %318 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                                      OpStore %609 %614 
                                                      OpBranch %612 
                                             %615 = OpLabel 
                                       f32_3 %616 = OpLoad %512 
                                                      OpStore %609 %616 
                                                      OpBranch %612 
                                             %612 = OpLabel 
                                       f32_3 %617 = OpLoad %609 
                                       f32_4 %618 = OpLoad %318 
                                       f32_4 %619 = OpVectorShuffle %618 %617 4 5 6 3 
                                                      OpStore %318 %619 
                                       f32_4 %620 = OpLoad %318 
                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
                              Uniform f32_3* %624 = OpAccessChain %19 %622 
                                       f32_3 %625 = OpLoad %624 
                                       f32_3 %626 = OpFNegate %625 
                                       f32_3 %627 = OpFAdd %621 %626 
                                       f32_4 %628 = OpLoad %318 
                                       f32_4 %629 = OpVectorShuffle %628 %627 4 5 6 3 
                                                      OpStore %318 %629 
                                       f32_4 %630 = OpLoad %318 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
                              Uniform f32_3* %633 = OpAccessChain %19 %632 
                                       f32_3 %634 = OpLoad %633 
                                       f32_3 %635 = OpFMul %631 %634 
                                       f32_4 %636 = OpLoad %318 
                                       f32_4 %637 = OpVectorShuffle %636 %635 0 4 5 6 
                                                      OpStore %318 %637 
                                Private f32* %638 = OpAccessChain %318 %74 
                                         f32 %639 = OpLoad %638 
                                         f32 %641 = OpFMul %639 %640 
                                         f32 %643 = OpFAdd %641 %642 
                                                      OpStore %214 %643 
                                Uniform f32* %645 = OpAccessChain %19 %553 %401 
                                         f32 %646 = OpLoad %645 
                                         f32 %648 = OpFMul %646 %647 
                                         f32 %649 = OpFAdd %648 %642 
                                                      OpStore %644 %649 
                                         f32 %650 = OpLoad %214 
                                         f32 %651 = OpLoad %644 
                                         f32 %652 = OpExtInst %1 40 %650 %651 
                                Private f32* %653 = OpAccessChain %318 %82 
                                                      OpStore %653 %652 
                  read_only Texture3DSampled %658 = OpLoad %657 
                                       f32_4 %659 = OpLoad %318 
                                       f32_3 %660 = OpVectorShuffle %659 %659 0 2 3 
                                       f32_4 %661 = OpImageSampleImplicitLod %658 %660 
                                                      OpStore %318 %661 
                                       f32_4 %663 = OpLoad %318 
                                                      OpStore %662 %663 
                                                      OpBranch %565 
                                             %664 = OpLabel 
                                Private f32* %665 = OpAccessChain %662 %82 
                                                      OpStore %665 %180 
                                Private f32* %666 = OpAccessChain %662 %74 
                                                      OpStore %666 %180 
                                Private f32* %667 = OpAccessChain %662 %401 
                                                      OpStore %667 %180 
                                Private f32* %668 = OpAccessChain %662 %404 
                                                      OpStore %668 %180 
                                                      OpBranch %565 
                                             %565 = OpLabel 
                                       f32_4 %669 = OpLoad %662 
                              Uniform f32_4* %670 = OpAccessChain %19 %28 
                                       f32_4 %671 = OpLoad %670 
                                         f32 %672 = OpDot %669 %671 
                                Private f32* %673 = OpAccessChain %400 %82 
                                                      OpStore %673 %672 
                                Private f32* %674 = OpAccessChain %400 %82 
                                         f32 %675 = OpLoad %674 
                                         f32 %676 = OpExtInst %1 43 %675 %181 %180 
                                Private f32* %677 = OpAccessChain %400 %82 
                                                      OpStore %677 %676 
                                       f32_4 %678 = OpLoad %109 
                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
                                       f32_4 %680 = OpLoad %109 
                                       f32_3 %681 = OpVectorShuffle %680 %680 0 1 2 
                                         f32 %682 = OpDot %679 %681 
                                Private f32* %683 = OpAccessChain %109 %82 
                                                      OpStore %683 %682 
                  read_only Texture2DSampled %685 = OpLoad %684 
                                       f32_4 %686 = OpLoad %109 
                                       f32_2 %687 = OpVectorShuffle %686 %686 0 0 
                                       f32_4 %688 = OpImageSampleImplicitLod %685 %687 
                                         f32 %689 = OpCompositeExtract %688 3 
                                Private f32* %690 = OpAccessChain %109 %82 
                                                      OpStore %690 %689 
                                Private f32* %691 = OpAccessChain %400 %82 
                                         f32 %692 = OpLoad %691 
                                Private f32* %693 = OpAccessChain %109 %82 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpFMul %692 %694 
                                Private f32* %696 = OpAccessChain %109 %82 
                                                      OpStore %696 %695 
                                       f32_4 %697 = OpLoad %459 
                                       f32_3 %698 = OpVectorShuffle %697 %697 0 1 2 
                              Uniform f32_4* %700 = OpAccessChain %19 %699 
                                       f32_4 %701 = OpLoad %700 
                                       f32_3 %702 = OpVectorShuffle %701 %701 0 1 2 
                                       f32_3 %703 = OpFMul %698 %702 
                                                      OpStore %400 %703 
                                       f32_4 %706 = OpLoad %109 
                                       f32_3 %707 = OpVectorShuffle %706 %706 0 0 0 
                                       f32_3 %708 = OpLoad %400 
                                       f32_3 %709 = OpFMul %707 %708 
                                       f32_4 %710 = OpLoad %705 
                                       f32_4 %711 = OpVectorShuffle %710 %709 4 5 6 3 
                                                      OpStore %705 %711 
                                Private f32* %712 = OpAccessChain %459 %404 
                                         f32 %713 = OpLoad %712 
                                 Output f32* %715 = OpAccessChain %705 %404 
                                                      OpStore %715 %713 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat10;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat3 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat3 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlitchInterval;
uniform 	float _DispIntensity;
uniform 	float _DispProbability;
uniform 	float _ColorIntensity;
uniform 	float _ColorProbability;
uniform 	float _DispGlitchOn;
uniform 	float _ColorGlitchOn;
uniform 	float _WrapDispCoords;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat16_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat10_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
vec2 u_xlat11;
float u_xlat16;
void main()
{
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].ww + u_xlat0.xy;
    u_xlat10.x = _Time.y / _GlitchInterval;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat5.x = u_xlat0.x + 2.79299998;
    u_xlat1 = u_xlat0.xxxx * vec4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
    u_xlat1 = sin(u_xlat1);
    u_xlat1 = u_xlat1 * vec4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
    u_xlat1 = fract(u_xlat1);
    u_xlat10.xy = u_xlat1.zw + vec2(-0.5, -0.5);
    u_xlat11.xy = u_xlat5.xx * vec2(-91.2228012, 91.2228012);
    u_xlat11.xy = sin(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy * vec2(43758.5469, 43758.5469);
    u_xlat11.xy = fract(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
    u_xlatb1.xy = lessThan(u_xlat1.xyxx, vec4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
    u_xlatb2.xyz = equal(vec4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), vec4(1.0, 1.0, 1.0, 0.0)).xyz;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
    u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
    u_xlat5.x = vs_TEXCOORD0.y / u_xlat5.x;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * 78.2330017;
    u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 43758.5469;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat0.x = u_xlat0.x * _DispIntensity + vs_TEXCOORD0.x;
    u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat16 = fract(abs(u_xlat0.x));
    u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : vs_TEXCOORD0.x;
    u_xlat0.y = vs_TEXCOORD0.y;
    u_xlat2 = texture(_MainTex, u_xlat0.xy);
    u_xlat3.xy = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
    u_xlat3.zw = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + vs_TEXCOORD0.yy;
    u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
    u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
    u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
    u_xlat0.y = u_xlat11.x * _ColorIntensity + vs_TEXCOORD0.y;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
    u_xlat1.x = u_xlat0.w + u_xlat16_1;
    u_xlat0.w = u_xlat1.x * 0.333333343;
    u_xlat0.x = u_xlat10_4.x;
    u_xlat0.y = u_xlat10_3.y;
    u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
    u_xlat1 = u_xlat0 * vs_COLOR0;
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + -0.100000001;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb0){
        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat5.x = u_xlat0.y * 0.25 + 0.75;
        u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat0.x = max(u_xlat5.x, u_xlat2.x);
        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
    } else {
        u_xlat0.x = float(1.0);
        u_xlat0.y = float(1.0);
        u_xlat0.z = float(1.0);
        u_xlat0.w = float(1.0);
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0, unity_OcclusionMaskSelector);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat5.xyz = u_xlat1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat5.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %116 %128 %129 %143 %172 %178 %181 %183 %184 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %143 Location 143 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %181 Location 181 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate %185 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 3 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                               Private f32_4* %93 = OpVariable Private 
                                             %113 = OpTypeArray %6 %48 
                                             %114 = OpTypeStruct %7 %6 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %7 
                                             %126 = OpTypeVector %6 2 
                                             %127 = OpTypePointer Output %126 
                               Output f32_2* %128 = OpVariable Output 
                                Input f32_4* %129 = OpVariable Input 
                                         i32 %132 = OpConstant 5 
                                             %141 = OpTypeVector %6 3 
                                             %142 = OpTypePointer Input %141 
                                Input f32_3* %143 = OpVariable Input 
                                         u32 %161 = OpConstant 2 
                                Private f32* %163 = OpVariable Private 
                                             %171 = OpTypePointer Output %141 
                               Output f32_3* %172 = OpVariable Output 
                               Output f32_3* %178 = OpVariable Output 
                               Output f32_4* %181 = OpVariable Output 
                               Output f32_4* %183 = OpVariable Output 
                                Input f32_4* %184 = OpVariable Input 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %30 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %86 = OpAccessChain %17 %60 %30 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %9 %92 
                                        f32_4 %94 = OpLoad %81 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                               Uniform f32_4* %96 = OpAccessChain %17 %73 %61 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpFMul %95 %97 
                                                      OpStore %93 %98 
                               Uniform f32_4* %99 = OpAccessChain %17 %73 %60 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %101 0 0 0 0 
                                       f32_4 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %93 
                                       f32_4 %105 = OpFAdd %103 %104 
                                                      OpStore %93 %105 
                              Uniform f32_4* %106 = OpAccessChain %17 %73 %73 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %81 
                                       f32_4 %109 = OpVectorShuffle %108 %108 2 2 2 2 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %93 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %93 %112 
                              Uniform f32_4* %117 = OpAccessChain %17 %73 %30 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %81 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %93 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %60 
                                                      OpStore %125 %123 
                                       f32_4 %130 = OpLoad %129 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %133 = OpAccessChain %17 %132 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFMul %131 %135 
                              Uniform f32_4* %137 = OpAccessChain %17 %132 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 2 3 
                                       f32_2 %140 = OpFAdd %136 %139 
                                                      OpStore %128 %140 
                                       f32_3 %144 = OpLoad %143 
                              Uniform f32_4* %145 = OpAccessChain %17 %61 %60 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %144 %147 
                                Private f32* %149 = OpAccessChain %81 %25 
                                                      OpStore %149 %148 
                                       f32_3 %150 = OpLoad %143 
                              Uniform f32_4* %151 = OpAccessChain %17 %61 %61 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %150 %153 
                                Private f32* %155 = OpAccessChain %81 %48 
                                                      OpStore %155 %154 
                                       f32_3 %156 = OpLoad %143 
                              Uniform f32_4* %157 = OpAccessChain %17 %61 %73 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %156 %159 
                                Private f32* %162 = OpAccessChain %81 %161 
                                                      OpStore %162 %160 
                                       f32_4 %164 = OpLoad %81 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_4 %166 = OpLoad %81 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %165 %167 
                                                      OpStore %163 %168 
                                         f32 %169 = OpLoad %163 
                                         f32 %170 = OpExtInst %1 32 %169 
                                                      OpStore %163 %170 
                                         f32 %173 = OpLoad %163 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_4 %175 = OpLoad %81 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFMul %174 %176 
                                                      OpStore %172 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                                      OpStore %178 %180 
                                       f32_4 %182 = OpLoad %9 
                                                      OpStore %181 %182 
                                       f32_4 %185 = OpLoad %184 
                                                      OpStore %183 %185 
                                 Output f32* %187 = OpAccessChain %116 %60 %48 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %116 %60 %48 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 643
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %205 %454 %523 %631 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 RelaxedPrecision 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 RelaxedPrecision 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpMemberDecorate %16 14 Offset 16 
                                                      OpMemberDecorate %16 15 Offset 16 
                                                      OpMemberDecorate %16 16 Offset 16 
                                                      OpMemberDecorate %16 17 RelaxedPrecision 
                                                      OpMemberDecorate %16 17 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %205 Location 205 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %321 DescriptorSet 321 
                                                      OpDecorate %321 Binding 321 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %454 Location 454 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %512 SpecId 512 
                                                      OpDecorate %523 Location 523 
                                                      OpDecorate %604 DescriptorSet 604 
                                                      OpDecorate %604 Binding 604 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %631 Location 631 
                                                      OpDecorate %632 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %639 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeStruct %7 %7 %12 %13 %7 %14 %15 %15 %7 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %18 = OpVariable Uniform 
                                              %19 = OpTypeInt 32 1 
                                          i32 %20 = OpConstant 2 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypeVector %6 2 
                                              %23 = OpTypePointer Uniform %7 
                                          i32 %27 = OpConstant 1 
                                          i32 %34 = OpConstant 0 
                                              %71 = OpTypePointer Private %22 
                               Private f32_2* %72 = OpVariable Private 
                                          u32 %73 = OpConstant 1 
                                              %74 = OpTypePointer Uniform %6 
                                          i32 %77 = OpConstant 9 
                                          u32 %81 = OpConstant 0 
                                              %82 = OpTypePointer Private %6 
                                Private f32* %103 = OpVariable Private 
                                         f32 %106 = OpConstant 3.674022E-40 
                              Private f32_4* %108 = OpVariable Private 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %112 = OpConstant 3.674022E-40 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %114 = OpConstant 3.674022E-40 
                                       f32_4 %115 = OpConstantComposite %111 %112 %113 %114 
                                         f32 %120 = OpConstant 3.674022E-40 
                                       f32_4 %121 = OpConstantComposite %120 %120 %120 %120 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_2 %128 = OpConstantComposite %127 %127 
                              Private f32_2* %130 = OpVariable Private 
                                       f32_2 %133 = OpConstantComposite %114 %112 
                                       f32_2 %138 = OpConstantComposite %120 %120 
                                             %144 = OpTypeBool 
                                             %145 = OpTypeVector %144 2 
                                             %146 = OpTypePointer Private %145 
                             Private bool_2* %147 = OpVariable Private 
                                         i32 %150 = OpConstant 11 
                                         i32 %153 = OpConstant 13 
                                             %161 = OpTypeVector %144 4 
                                             %164 = OpTypeVector %144 3 
                                             %165 = OpTypePointer Private %164 
                             Private bool_3* %166 = OpVariable Private 
                                         i32 %167 = OpConstant 14 
                                         i32 %170 = OpConstant 16 
                                         i32 %173 = OpConstant 15 
                                         f32 %179 = OpConstant 3.674022E-40 
                                         f32 %180 = OpConstant 3.674022E-40 
                                       f32_4 %181 = OpConstantComposite %179 %179 %179 %180 
                                         f32 %200 = OpConstant 3.674022E-40 
                                         f32 %202 = OpConstant 3.674022E-40 
                                             %204 = OpTypePointer Input %22 
                                Input f32_2* %205 = OpVariable Input 
                                             %206 = OpTypePointer Input %6 
                                Private f32* %213 = OpVariable Private 
                                         f32 %226 = OpConstant 3.674022E-40 
                                         f32 %230 = OpConstant 3.674022E-40 
                                         i32 %254 = OpConstant 10 
                                             %262 = OpTypePointer Private %144 
                               Private bool* %263 = OpVariable Private 
                                             %274 = OpTypePointer Function %6 
                              Private f32_4* %317 = OpVariable Private 
                                             %318 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %319 = OpTypeSampledImage %318 
                                             %320 = OpTypePointer UniformConstant %319 
 UniformConstant read_only Texture2DSampled* %321 = OpVariable UniformConstant 
                              Private f32_4* %326 = OpVariable Private 
                                         i32 %328 = OpConstant 12 
                              Private f32_4* %365 = OpVariable Private 
                                Private f32* %398 = OpVariable Private 
                                         u32 %399 = OpConstant 2 
                                         u32 %402 = OpConstant 3 
                                         f32 %411 = OpConstant 3.674022E-40 
                              Private f32_4* %413 = OpVariable Private 
                                             %426 = OpTypePointer Function %22 
                              Private f32_4* %451 = OpVariable Private 
                                             %453 = OpTypePointer Input %7 
                                Input f32_4* %454 = OpVariable Input 
                                         f32 %462 = OpConstant 3.674022E-40 
                                         i32 %471 = OpConstant -1 
                                         i32 %482 = OpConstant 17 
                                         i32 %499 = OpConstant 4 
                                        bool %505 = OpConstantFalse 
                                        bool %512 = OpSpecConstantFalse 
                                             %520 = OpTypePointer Private %15 
                              Private f32_3* %521 = OpVariable Private 
                                             %522 = OpTypePointer Input %15 
                                Input f32_3* %523 = OpVariable Input 
                                         i32 %526 = OpConstant 5 
                                             %552 = OpTypePointer Function %15 
                                         i32 %566 = OpConstant 7 
                                             %567 = OpTypePointer Uniform %15 
                                         i32 %576 = OpConstant 6 
                                         f32 %584 = OpConstant 3.674022E-40 
                                         f32 %586 = OpConstant 3.674022E-40 
                                         f32 %591 = OpConstant 3.674022E-40 
                                             %601 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %602 = OpTypeSampledImage %601 
                                             %603 = OpTypePointer UniformConstant %602 
 UniformConstant read_only Texture3DSampled* %604 = OpVariable UniformConstant 
                              Private f32_4* %609 = OpVariable Private 
                              Private f32_3* %622 = OpVariable Private 
                                         i32 %625 = OpConstant 8 
                                             %630 = OpTypePointer Output %7 
                               Output f32_4* %631 = OpVariable Output 
                                             %640 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %275 = OpVariable Function 
                               Function f32* %291 = OpVariable Function 
                               Function f32* %302 = OpVariable Function 
                               Function f32* %414 = OpVariable Function 
                             Function f32_2* %427 = OpVariable Function 
                               Function f32* %440 = OpVariable Function 
                             Function f32_3* %553 = OpVariable Function 
                               Uniform f32_4* %24 = OpAccessChain %18 %20 %21 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 1 1 
                               Uniform f32_4* %28 = OpAccessChain %18 %21 %27 
                                        f32_4 %29 = OpLoad %28 
                                        f32_2 %30 = OpVectorShuffle %29 %29 0 1 
                                        f32_2 %31 = OpFMul %26 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 2 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %35 = OpAccessChain %18 %21 %34 
                                        f32_4 %36 = OpLoad %35 
                                        f32_2 %37 = OpVectorShuffle %36 %36 0 1 
                               Uniform f32_4* %38 = OpAccessChain %18 %20 %21 
                                        f32_4 %39 = OpLoad %38 
                                        f32_2 %40 = OpVectorShuffle %39 %39 0 0 
                                        f32_2 %41 = OpFMul %37 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_2 %44 = OpFAdd %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpVectorShuffle %45 %44 4 5 2 3 
                                                      OpStore %9 %46 
                               Uniform f32_4* %47 = OpAccessChain %18 %21 %20 
                                        f32_4 %48 = OpLoad %47 
                                        f32_2 %49 = OpVectorShuffle %48 %48 0 1 
                               Uniform f32_4* %50 = OpAccessChain %18 %20 %21 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 2 
                                        f32_2 %53 = OpFMul %49 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                                        f32_2 %56 = OpFAdd %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %56 4 5 2 3 
                                                      OpStore %9 %58 
                               Uniform f32_4* %59 = OpAccessChain %18 %21 %21 
                                        f32_4 %60 = OpLoad %59 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                               Uniform f32_4* %62 = OpAccessChain %18 %20 %21 
                                        f32_4 %63 = OpLoad %62 
                                        f32_2 %64 = OpVectorShuffle %63 %63 3 3 
                                        f32_2 %65 = OpFMul %61 %64 
                                        f32_4 %66 = OpLoad %9 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_2 %68 = OpFAdd %65 %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpVectorShuffle %69 %68 4 5 2 3 
                                                      OpStore %9 %70 
                                 Uniform f32* %75 = OpAccessChain %18 %34 %73 
                                          f32 %76 = OpLoad %75 
                                 Uniform f32* %78 = OpAccessChain %18 %77 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFDiv %76 %79 
                                 Private f32* %83 = OpAccessChain %72 %81 
                                                      OpStore %83 %80 
                                 Private f32* %84 = OpAccessChain %72 %81 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpExtInst %1 8 %85 
                                 Private f32* %87 = OpAccessChain %72 %81 
                                                      OpStore %87 %86 
                                 Private f32* %88 = OpAccessChain %72 %81 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %90 = OpAccessChain %18 %77 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %89 %91 
                                 Private f32* %93 = OpAccessChain %9 %81 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %81 
                                                      OpStore %96 %95 
                                 Private f32* %97 = OpAccessChain %9 %73 
                                          f32 %98 = OpLoad %97 
                                 Private f32* %99 = OpAccessChain %9 %81 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFAdd %98 %100 
                                Private f32* %102 = OpAccessChain %9 %81 
                                                      OpStore %102 %101 
                                Private f32* %104 = OpAccessChain %9 %81 
                                         f32 %105 = OpLoad %104 
                                         f32 %107 = OpFAdd %105 %106 
                                                      OpStore %103 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_4 %110 = OpVectorShuffle %109 %109 0 0 0 0 
                                       f32_4 %116 = OpFMul %110 %115 
                                                      OpStore %108 %116 
                                       f32_4 %117 = OpLoad %108 
                                       f32_4 %118 = OpExtInst %1 13 %117 
                                                      OpStore %108 %118 
                                       f32_4 %119 = OpLoad %108 
                                       f32_4 %122 = OpFMul %119 %121 
                                                      OpStore %108 %122 
                                       f32_4 %123 = OpLoad %108 
                                       f32_4 %124 = OpExtInst %1 10 %123 
                                                      OpStore %108 %124 
                                       f32_4 %125 = OpLoad %108 
                                       f32_2 %126 = OpVectorShuffle %125 %125 2 3 
                                       f32_2 %129 = OpFAdd %126 %128 
                                                      OpStore %72 %129 
                                         f32 %131 = OpLoad %103 
                                       f32_2 %132 = OpCompositeConstruct %131 %131 
                                       f32_2 %134 = OpFMul %132 %133 
                                                      OpStore %130 %134 
                                       f32_2 %135 = OpLoad %130 
                                       f32_2 %136 = OpExtInst %1 13 %135 
                                                      OpStore %130 %136 
                                       f32_2 %137 = OpLoad %130 
                                       f32_2 %139 = OpFMul %137 %138 
                                                      OpStore %130 %139 
                                       f32_2 %140 = OpLoad %130 
                                       f32_2 %141 = OpExtInst %1 10 %140 
                                                      OpStore %130 %141 
                                       f32_2 %142 = OpLoad %130 
                                       f32_2 %143 = OpFAdd %142 %128 
                                                      OpStore %130 %143 
                                       f32_4 %148 = OpLoad %108 
                                       f32_4 %149 = OpVectorShuffle %148 %148 0 1 0 0 
                                Uniform f32* %151 = OpAccessChain %18 %150 
                                         f32 %152 = OpLoad %151 
                                Uniform f32* %154 = OpAccessChain %18 %153 
                                         f32 %155 = OpLoad %154 
                                Uniform f32* %156 = OpAccessChain %18 %150 
                                         f32 %157 = OpLoad %156 
                                Uniform f32* %158 = OpAccessChain %18 %150 
                                         f32 %159 = OpLoad %158 
                                       f32_4 %160 = OpCompositeConstruct %152 %155 %157 %159 
                                      bool_4 %162 = OpFOrdLessThan %149 %160 
                                      bool_2 %163 = OpVectorShuffle %162 %162 0 1 
                                                      OpStore %147 %163 
                                Uniform f32* %168 = OpAccessChain %18 %167 
                                         f32 %169 = OpLoad %168 
                                Uniform f32* %171 = OpAccessChain %18 %170 
                                         f32 %172 = OpLoad %171 
                                Uniform f32* %174 = OpAccessChain %18 %173 
                                         f32 %175 = OpLoad %174 
                                Uniform f32* %176 = OpAccessChain %18 %167 
                                         f32 %177 = OpLoad %176 
                                       f32_4 %178 = OpCompositeConstruct %169 %172 %175 %177 
                                      bool_4 %182 = OpFOrdEqual %178 %181 
                                      bool_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                                      OpStore %166 %183 
                                      bool_2 %184 = OpLoad %147 
                                        bool %185 = OpCompositeExtract %184 0 
                                      bool_3 %186 = OpLoad %166 
                                        bool %187 = OpCompositeExtract %186 0 
                                        bool %188 = OpLogicalAnd %185 %187 
                                      bool_2 %189 = OpLoad %147 
                                      bool_2 %190 = OpCompositeInsert %188 %189 0 
                                                      OpStore %147 %190 
                                      bool_2 %191 = OpLoad %147 
                                        bool %192 = OpCompositeExtract %191 1 
                                      bool_3 %193 = OpLoad %166 
                                        bool %194 = OpCompositeExtract %193 2 
                                        bool %195 = OpLogicalAnd %192 %194 
                                      bool_2 %196 = OpLoad %147 
                                      bool_2 %197 = OpCompositeInsert %195 %196 1 
                                                      OpStore %147 %197 
                                Private f32* %198 = OpAccessChain %130 %73 
                                         f32 %199 = OpLoad %198 
                                         f32 %201 = OpFMul %199 %200 
                                         f32 %203 = OpFAdd %201 %202 
                                                      OpStore %103 %203 
                                  Input f32* %207 = OpAccessChain %205 %73 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpLoad %103 
                                         f32 %210 = OpFDiv %208 %209 
                                                      OpStore %103 %210 
                                         f32 %211 = OpLoad %103 
                                         f32 %212 = OpExtInst %1 8 %211 
                                                      OpStore %103 %212 
                                Private f32* %214 = OpAccessChain %9 %81 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFNegate %215 
                                         f32 %217 = OpLoad %103 
                                         f32 %218 = OpFAdd %216 %217 
                                                      OpStore %213 %218 
                                Private f32* %219 = OpAccessChain %9 %81 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpLoad %103 
                                         f32 %222 = OpFAdd %220 %221 
                                Private f32* %223 = OpAccessChain %9 %81 
                                                      OpStore %223 %222 
                                Private f32* %224 = OpAccessChain %9 %81 
                                         f32 %225 = OpLoad %224 
                                         f32 %227 = OpFMul %225 %226 
                                Private f32* %228 = OpAccessChain %9 %81 
                                                      OpStore %228 %227 
                                         f32 %229 = OpLoad %213 
                                         f32 %231 = OpFMul %229 %230 
                                Private f32* %232 = OpAccessChain %9 %81 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                Private f32* %235 = OpAccessChain %9 %81 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %9 %81 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 13 %237 
                                Private f32* %239 = OpAccessChain %9 %81 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %9 %81 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %241 %120 
                                Private f32* %243 = OpAccessChain %9 %81 
                                                      OpStore %243 %242 
                                Private f32* %244 = OpAccessChain %9 %81 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpExtInst %1 10 %245 
                                Private f32* %247 = OpAccessChain %9 %81 
                                                      OpStore %247 %246 
                                Private f32* %248 = OpAccessChain %9 %81 
                                         f32 %249 = OpLoad %248 
                                         f32 %250 = OpFAdd %249 %127 
                                Private f32* %251 = OpAccessChain %9 %81 
                                                      OpStore %251 %250 
                                Private f32* %252 = OpAccessChain %9 %81 
                                         f32 %253 = OpLoad %252 
                                Uniform f32* %255 = OpAccessChain %18 %254 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFMul %253 %256 
                                  Input f32* %258 = OpAccessChain %205 %81 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFAdd %257 %259 
                                Private f32* %261 = OpAccessChain %9 %81 
                                                      OpStore %261 %260 
                                Private f32* %264 = OpAccessChain %9 %81 
                                         f32 %265 = OpLoad %264 
                                Private f32* %266 = OpAccessChain %9 %81 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFNegate %267 
                                        bool %269 = OpFOrdGreaterThanEqual %265 %268 
                                                      OpStore %263 %269 
                                Private f32* %270 = OpAccessChain %9 %81 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpExtInst %1 4 %271 
                                         f32 %273 = OpExtInst %1 10 %272 
                                                      OpStore %213 %273 
                                        bool %276 = OpLoad %263 
                                                      OpSelectionMerge %278 None 
                                                      OpBranchConditional %276 %277 %280 
                                             %277 = OpLabel 
                                         f32 %279 = OpLoad %213 
                                                      OpStore %275 %279 
                                                      OpBranch %278 
                                             %280 = OpLabel 
                                         f32 %281 = OpLoad %213 
                                         f32 %282 = OpFNegate %281 
                                                      OpStore %275 %282 
                                                      OpBranch %278 
                                             %278 = OpLabel 
                                         f32 %283 = OpLoad %275 
                                                      OpStore %103 %283 
                                Private f32* %284 = OpAccessChain %9 %81 
                                         f32 %285 = OpLoad %284 
                                Private f32* %286 = OpAccessChain %9 %81 
                                                      OpStore %286 %285 
                                Private f32* %287 = OpAccessChain %9 %81 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 43 %288 %180 %179 
                                Private f32* %290 = OpAccessChain %9 %81 
                                                      OpStore %290 %289 
                                      bool_3 %292 = OpLoad %166 
                                        bool %293 = OpCompositeExtract %292 1 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %297 
                                             %294 = OpLabel 
                                         f32 %296 = OpLoad %103 
                                                      OpStore %291 %296 
                                                      OpBranch %295 
                                             %297 = OpLabel 
                                Private f32* %298 = OpAccessChain %9 %81 
                                         f32 %299 = OpLoad %298 
                                                      OpStore %291 %299 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                         f32 %300 = OpLoad %291 
                                Private f32* %301 = OpAccessChain %9 %81 
                                                      OpStore %301 %300 
                                      bool_2 %303 = OpLoad %147 
                                        bool %304 = OpCompositeExtract %303 0 
                                                      OpSelectionMerge %306 None 
                                                      OpBranchConditional %304 %305 %309 
                                             %305 = OpLabel 
                                Private f32* %307 = OpAccessChain %9 %81 
                                         f32 %308 = OpLoad %307 
                                                      OpStore %302 %308 
                                                      OpBranch %306 
                                             %309 = OpLabel 
                                  Input f32* %310 = OpAccessChain %205 %81 
                                         f32 %311 = OpLoad %310 
                                                      OpStore %302 %311 
                                                      OpBranch %306 
                                             %306 = OpLabel 
                                         f32 %312 = OpLoad %302 
                                Private f32* %313 = OpAccessChain %9 %81 
                                                      OpStore %313 %312 
                                  Input f32* %314 = OpAccessChain %205 %73 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %9 %73 
                                                      OpStore %316 %315 
                  read_only Texture2DSampled %322 = OpLoad %321 
                                       f32_4 %323 = OpLoad %9 
                                       f32_2 %324 = OpVectorShuffle %323 %323 0 1 
                                       f32_4 %325 = OpImageSampleImplicitLod %322 %324 
                                                      OpStore %317 %325 
                                       f32_2 %327 = OpLoad %72 
                                Uniform f32* %329 = OpAccessChain %18 %328 
                                         f32 %330 = OpLoad %329 
                                Uniform f32* %331 = OpAccessChain %18 %328 
                                         f32 %332 = OpLoad %331 
                                       f32_2 %333 = OpCompositeConstruct %330 %332 
                                         f32 %334 = OpCompositeExtract %333 0 
                                         f32 %335 = OpCompositeExtract %333 1 
                                       f32_2 %336 = OpCompositeConstruct %334 %335 
                                       f32_2 %337 = OpFMul %327 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_2 %339 = OpVectorShuffle %338 %338 0 0 
                                       f32_2 %340 = OpFAdd %337 %339 
                                       f32_4 %341 = OpLoad %326 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 2 3 
                                                      OpStore %326 %342 
                                       f32_2 %343 = OpLoad %72 
                                Uniform f32* %344 = OpAccessChain %18 %328 
                                         f32 %345 = OpLoad %344 
                                Uniform f32* %346 = OpAccessChain %18 %328 
                                         f32 %347 = OpLoad %346 
                                       f32_2 %348 = OpCompositeConstruct %345 %347 
                                         f32 %349 = OpCompositeExtract %348 0 
                                         f32 %350 = OpCompositeExtract %348 1 
                                       f32_2 %351 = OpCompositeConstruct %349 %350 
                                       f32_2 %352 = OpFMul %343 %351 
                                       f32_2 %353 = OpLoad %205 
                                       f32_2 %354 = OpVectorShuffle %353 %353 1 1 
                                       f32_2 %355 = OpFAdd %352 %354 
                                       f32_4 %356 = OpLoad %326 
                                       f32_4 %357 = OpVectorShuffle %356 %355 0 1 4 5 
                                                      OpStore %326 %357 
                  read_only Texture2DSampled %358 = OpLoad %321 
                                       f32_4 %359 = OpLoad %326 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpImageSampleImplicitLod %358 %360 
                                       f32_2 %362 = OpVectorShuffle %361 %361 0 3 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %362 0 4 5 3 
                                                      OpStore %9 %364 
                  read_only Texture2DSampled %366 = OpLoad %321 
                                       f32_4 %367 = OpLoad %326 
                                       f32_2 %368 = OpVectorShuffle %367 %367 1 3 
                                       f32_4 %369 = OpImageSampleImplicitLod %366 %368 
                                       f32_2 %370 = OpVectorShuffle %369 %369 1 3 
                                       f32_4 %371 = OpLoad %365 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 1 2 5 
                                                      OpStore %365 %372 
                                Private f32* %373 = OpAccessChain %130 %81 
                                         f32 %374 = OpLoad %373 
                                Uniform f32* %375 = OpAccessChain %18 %328 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                Private f32* %378 = OpAccessChain %9 %81 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFAdd %377 %379 
                                Private f32* %381 = OpAccessChain %326 %81 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %130 %81 
                                         f32 %383 = OpLoad %382 
                                Uniform f32* %384 = OpAccessChain %18 %328 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFMul %383 %385 
                                  Input f32* %387 = OpAccessChain %205 %73 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFAdd %386 %388 
                                Private f32* %390 = OpAccessChain %326 %73 
                                                      OpStore %390 %389 
                  read_only Texture2DSampled %391 = OpLoad %321 
                                       f32_4 %392 = OpLoad %326 
                                       f32_2 %393 = OpVectorShuffle %392 %392 0 1 
                                       f32_4 %394 = OpImageSampleImplicitLod %391 %393 
                                       f32_2 %395 = OpVectorShuffle %394 %394 2 3 
                                       f32_4 %396 = OpLoad %9 
                                       f32_4 %397 = OpVectorShuffle %396 %395 4 1 2 5 
                                                      OpStore %9 %397 
                                Private f32* %400 = OpAccessChain %9 %399 
                                         f32 %401 = OpLoad %400 
                                Private f32* %403 = OpAccessChain %365 %402 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %401 %404 
                                                      OpStore %398 %405 
                                Private f32* %406 = OpAccessChain %9 %402 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpLoad %398 
                                         f32 %409 = OpFAdd %407 %408 
                                                      OpStore %398 %409 
                                         f32 %410 = OpLoad %398 
                                         f32 %412 = OpFMul %410 %411 
                                                      OpStore %398 %412 
                                      bool_2 %415 = OpLoad %147 
                                        bool %416 = OpCompositeExtract %415 1 
                                                      OpSelectionMerge %418 None 
                                                      OpBranchConditional %416 %417 %421 
                                             %417 = OpLabel 
                                Private f32* %419 = OpAccessChain %365 %81 
                                         f32 %420 = OpLoad %419 
                                                      OpStore %414 %420 
                                                      OpBranch %418 
                                             %421 = OpLabel 
                                Private f32* %422 = OpAccessChain %317 %73 
                                         f32 %423 = OpLoad %422 
                                                      OpStore %414 %423 
                                                      OpBranch %418 
                                             %418 = OpLabel 
                                         f32 %424 = OpLoad %414 
                                Private f32* %425 = OpAccessChain %413 %73 
                                                      OpStore %425 %424 
                                      bool_2 %428 = OpLoad %147 
                                        bool %429 = OpCompositeExtract %428 1 
                                                      OpSelectionMerge %431 None 
                                                      OpBranchConditional %429 %430 %434 
                                             %430 = OpLabel 
                                       f32_4 %432 = OpLoad %9 
                                       f32_2 %433 = OpVectorShuffle %432 %432 1 0 
                                                      OpStore %427 %433 
                                                      OpBranch %431 
                                             %434 = OpLabel 
                                       f32_4 %435 = OpLoad %317 
                                       f32_2 %436 = OpVectorShuffle %435 %435 0 2 
                                                      OpStore %427 %436 
                                                      OpBranch %431 
                                             %431 = OpLabel 
                                       f32_2 %437 = OpLoad %427 
                                       f32_4 %438 = OpLoad %413 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 1 5 3 
                                                      OpStore %413 %439 
                                      bool_2 %441 = OpLoad %147 
                                        bool %442 = OpCompositeExtract %441 1 
                                                      OpSelectionMerge %444 None 
                                                      OpBranchConditional %442 %443 %446 
                                             %443 = OpLabel 
                                         f32 %445 = OpLoad %398 
                                                      OpStore %440 %445 
                                                      OpBranch %444 
                                             %446 = OpLabel 
                                Private f32* %447 = OpAccessChain %317 %402 
                                         f32 %448 = OpLoad %447 
                                                      OpStore %440 %448 
                                                      OpBranch %444 
                                             %444 = OpLabel 
                                         f32 %449 = OpLoad %440 
                                Private f32* %450 = OpAccessChain %413 %402 
                                                      OpStore %450 %449 
                                       f32_4 %452 = OpLoad %413 
                                       f32_4 %455 = OpLoad %454 
                                       f32_4 %456 = OpFMul %452 %455 
                                                      OpStore %451 %456 
                                Private f32* %457 = OpAccessChain %413 %402 
                                         f32 %458 = OpLoad %457 
                                  Input f32* %459 = OpAccessChain %454 %402 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpFMul %458 %460 
                                         f32 %463 = OpFAdd %461 %462 
                                                      OpStore %398 %463 
                                         f32 %464 = OpLoad %398 
                                        bool %465 = OpFOrdLessThan %464 %180 
                                      bool_2 %466 = OpLoad %147 
                                      bool_2 %467 = OpCompositeInsert %465 %466 0 
                                                      OpStore %147 %467 
                                      bool_2 %468 = OpLoad %147 
                                        bool %469 = OpCompositeExtract %468 0 
                                         i32 %470 = OpSelect %469 %27 %34 
                                         i32 %472 = OpIMul %470 %471 
                                        bool %473 = OpINotEqual %472 %34 
                                                      OpSelectionMerge %475 None 
                                                      OpBranchConditional %473 %474 %475 
                                             %474 = OpLabel 
                                                      OpKill
                                             %475 = OpLabel 
                                Private f32* %477 = OpAccessChain %413 %402 
                                         f32 %478 = OpLoad %477 
                                  Input f32* %479 = OpAccessChain %454 %402 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFMul %478 %480 
                                Uniform f32* %483 = OpAccessChain %18 %482 
                                         f32 %484 = OpLoad %483 
                                         f32 %485 = OpFNegate %484 
                                         f32 %486 = OpFAdd %481 %485 
                                                      OpStore %398 %486 
                                         f32 %487 = OpLoad %398 
                                        bool %488 = OpFOrdLessThan %487 %180 
                                      bool_2 %489 = OpLoad %147 
                                      bool_2 %490 = OpCompositeInsert %488 %489 0 
                                                      OpStore %147 %490 
                                      bool_2 %491 = OpLoad %147 
                                        bool %492 = OpCompositeExtract %491 0 
                                         i32 %493 = OpSelect %492 %27 %34 
                                         i32 %494 = OpIMul %493 %471 
                                        bool %495 = OpINotEqual %494 %34 
                                                      OpSelectionMerge %497 None 
                                                      OpBranchConditional %495 %496 %497 
                                             %496 = OpLabel 
                                                      OpKill
                                             %497 = OpLabel 
                                Uniform f32* %500 = OpAccessChain %18 %499 %81 
                                         f32 %501 = OpLoad %500 
                                        bool %502 = OpFOrdEqual %501 %179 
                                      bool_2 %503 = OpLoad %147 
                                      bool_2 %504 = OpCompositeInsert %502 %503 0 
                                                      OpStore %147 %504 
                                                      OpSelectionMerge %507 None 
                                                      OpBranchConditional %505 %506 %507 
                                             %506 = OpLabel 
                                      bool_2 %508 = OpLoad %147 
                                        bool %509 = OpCompositeExtract %508 0 
                                                      OpSelectionMerge %511 None 
                                                      OpBranchConditional %509 %510 %511 
                                             %510 = OpLabel 
                                                      OpBranch %511 
                                             %511 = OpLabel 
                                                      OpBranch %507 
                                             %507 = OpLabel 
                                                      OpSelectionMerge %514 None 
                                                      OpBranchConditional %512 %513 %611 
                                             %513 = OpLabel 
                                Uniform f32* %515 = OpAccessChain %18 %499 %73 
                                         f32 %516 = OpLoad %515 
                                        bool %517 = OpFOrdEqual %516 %179 
                                      bool_2 %518 = OpLoad %147 
                                      bool_2 %519 = OpCompositeInsert %517 %518 0 
                                                      OpStore %147 %519 
                                       f32_3 %524 = OpLoad %523 
                                       f32_3 %525 = OpVectorShuffle %524 %524 1 1 1 
                              Uniform f32_4* %527 = OpAccessChain %18 %526 %27 
                                       f32_4 %528 = OpLoad %527 
                                       f32_3 %529 = OpVectorShuffle %528 %528 0 1 2 
                                       f32_3 %530 = OpFMul %525 %529 
                                                      OpStore %521 %530 
                              Uniform f32_4* %531 = OpAccessChain %18 %526 %34 
                                       f32_4 %532 = OpLoad %531 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpLoad %523 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 0 0 
                                       f32_3 %536 = OpFMul %533 %535 
                                       f32_3 %537 = OpLoad %521 
                                       f32_3 %538 = OpFAdd %536 %537 
                                                      OpStore %521 %538 
                              Uniform f32_4* %539 = OpAccessChain %18 %526 %20 
                                       f32_4 %540 = OpLoad %539 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                       f32_3 %542 = OpLoad %523 
                                       f32_3 %543 = OpVectorShuffle %542 %542 2 2 2 
                                       f32_3 %544 = OpFMul %541 %543 
                                       f32_3 %545 = OpLoad %521 
                                       f32_3 %546 = OpFAdd %544 %545 
                                                      OpStore %521 %546 
                                       f32_3 %547 = OpLoad %521 
                              Uniform f32_4* %548 = OpAccessChain %18 %526 %21 
                                       f32_4 %549 = OpLoad %548 
                                       f32_3 %550 = OpVectorShuffle %549 %549 0 1 2 
                                       f32_3 %551 = OpFAdd %547 %550 
                                                      OpStore %521 %551 
                                      bool_2 %554 = OpLoad %147 
                                        bool %555 = OpCompositeExtract %554 0 
                                                      OpSelectionMerge %557 None 
                                                      OpBranchConditional %555 %556 %559 
                                             %556 = OpLabel 
                                       f32_3 %558 = OpLoad %521 
                                                      OpStore %553 %558 
                                                      OpBranch %557 
                                             %559 = OpLabel 
                                       f32_3 %560 = OpLoad %523 
                                                      OpStore %553 %560 
                                                      OpBranch %557 
                                             %557 = OpLabel 
                                       f32_3 %561 = OpLoad %553 
                                       f32_4 %562 = OpLoad %108 
                                       f32_4 %563 = OpVectorShuffle %562 %561 4 5 6 3 
                                                      OpStore %108 %563 
                                       f32_4 %564 = OpLoad %108 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                              Uniform f32_3* %568 = OpAccessChain %18 %566 
                                       f32_3 %569 = OpLoad %568 
                                       f32_3 %570 = OpFNegate %569 
                                       f32_3 %571 = OpFAdd %565 %570 
                                       f32_4 %572 = OpLoad %108 
                                       f32_4 %573 = OpVectorShuffle %572 %571 4 5 6 3 
                                                      OpStore %108 %573 
                                       f32_4 %574 = OpLoad %108 
                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
                              Uniform f32_3* %577 = OpAccessChain %18 %576 
                                       f32_3 %578 = OpLoad %577 
                                       f32_3 %579 = OpFMul %575 %578 
                                       f32_4 %580 = OpLoad %108 
                                       f32_4 %581 = OpVectorShuffle %580 %579 0 4 5 6 
                                                      OpStore %108 %581 
                                Private f32* %582 = OpAccessChain %108 %73 
                                         f32 %583 = OpLoad %582 
                                         f32 %585 = OpFMul %583 %584 
                                         f32 %587 = OpFAdd %585 %586 
                                Private f32* %588 = OpAccessChain %521 %81 
                                                      OpStore %588 %587 
                                Uniform f32* %589 = OpAccessChain %18 %499 %399 
                                         f32 %590 = OpLoad %589 
                                         f32 %592 = OpFMul %590 %591 
                                         f32 %593 = OpFAdd %592 %586 
                                Private f32* %594 = OpAccessChain %317 %81 
                                                      OpStore %594 %593 
                                Private f32* %595 = OpAccessChain %521 %81 
                                         f32 %596 = OpLoad %595 
                                Private f32* %597 = OpAccessChain %317 %81 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpExtInst %1 40 %596 %598 
                                Private f32* %600 = OpAccessChain %108 %81 
                                                      OpStore %600 %599 
                  read_only Texture3DSampled %605 = OpLoad %604 
                                       f32_4 %606 = OpLoad %108 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 2 3 
                                       f32_4 %608 = OpImageSampleImplicitLod %605 %607 
                                                      OpStore %108 %608 
                                       f32_4 %610 = OpLoad %108 
                                                      OpStore %609 %610 
                                                      OpBranch %514 
                                             %611 = OpLabel 
                                Private f32* %612 = OpAccessChain %609 %81 
                                                      OpStore %612 %179 
                                Private f32* %613 = OpAccessChain %609 %73 
                                                      OpStore %613 %179 
                                Private f32* %614 = OpAccessChain %609 %399 
                                                      OpStore %614 %179 
                                Private f32* %615 = OpAccessChain %609 %402 
                                                      OpStore %615 %179 
                                                      OpBranch %514 
                                             %514 = OpLabel 
                                       f32_4 %616 = OpLoad %609 
                              Uniform f32_4* %617 = OpAccessChain %18 %27 
                                       f32_4 %618 = OpLoad %617 
                                         f32 %619 = OpDot %616 %618 
                                                      OpStore %398 %619 
                                         f32 %620 = OpLoad %398 
                                         f32 %621 = OpExtInst %1 43 %620 %180 %179 
                                                      OpStore %398 %621 
                                       f32_4 %623 = OpLoad %451 
                                       f32_3 %624 = OpVectorShuffle %623 %623 0 1 2 
                              Uniform f32_4* %626 = OpAccessChain %18 %625 
                                       f32_4 %627 = OpLoad %626 
                                       f32_3 %628 = OpVectorShuffle %627 %627 0 1 2 
                                       f32_3 %629 = OpFMul %624 %628 
                                                      OpStore %622 %629 
                                         f32 %632 = OpLoad %398 
                                       f32_3 %633 = OpCompositeConstruct %632 %632 %632 
                                       f32_3 %634 = OpLoad %622 
                                       f32_3 %635 = OpFMul %633 %634 
                                       f32_4 %636 = OpLoad %631 
                                       f32_4 %637 = OpVectorShuffle %636 %635 4 5 6 3 
                                                      OpStore %631 %637 
                                Private f32* %638 = OpAccessChain %451 %402 
                                         f32 %639 = OpLoad %638 
                                 Output f32* %641 = OpAccessChain %631 %402 
                                                      OpStore %641 %639 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat10;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat3 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat3 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _GlitchInterval;
uniform 	float _DispIntensity;
uniform 	float _DispProbability;
uniform 	float _ColorIntensity;
uniform 	float _ColorProbability;
uniform 	float _DispGlitchOn;
uniform 	float _ColorGlitchOn;
uniform 	float _WrapDispCoords;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat16_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat10_4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat7;
bool u_xlatb7;
vec2 u_xlat10;
vec2 u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].ww + u_xlat0.xy;
    u_xlat10.x = _Time.y / _GlitchInterval;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat5.x = u_xlat0.x + 2.79299998;
    u_xlat1 = u_xlat0.xxxx * vec4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
    u_xlat1 = sin(u_xlat1);
    u_xlat1 = u_xlat1 * vec4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
    u_xlat1 = fract(u_xlat1);
    u_xlat10.xy = u_xlat1.zw + vec2(-0.5, -0.5);
    u_xlat11.xy = u_xlat5.xx * vec2(-91.2228012, 91.2228012);
    u_xlat11.xy = sin(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy * vec2(43758.5469, 43758.5469);
    u_xlat11.xy = fract(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
    u_xlatb1.xy = lessThan(u_xlat1.xyxx, vec4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
    u_xlatb2.xyz = equal(vec4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), vec4(1.0, 1.0, 1.0, 0.0)).xyz;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
    u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
    u_xlat5.x = vs_TEXCOORD0.y / u_xlat5.x;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * 78.2330017;
    u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 43758.5469;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat0.x = u_xlat0.x * _DispIntensity + vs_TEXCOORD0.x;
    u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat16 = fract(abs(u_xlat0.x));
    u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : vs_TEXCOORD0.x;
    u_xlat0.y = vs_TEXCOORD0.y;
    u_xlat2 = texture(_MainTex, u_xlat0.xy);
    u_xlat3.xy = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
    u_xlat3.zw = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + vs_TEXCOORD0.yy;
    u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
    u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
    u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
    u_xlat0.y = u_xlat11.x * _ColorIntensity + vs_TEXCOORD0.y;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
    u_xlat1.x = u_xlat0.w + u_xlat16_1;
    u_xlat0.w = u_xlat1.x * 0.333333343;
    u_xlat0.x = u_xlat10_4.x;
    u_xlat0.y = u_xlat10_3.y;
    u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
    u_xlat1 = u_xlat0 * vs_COLOR0;
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + -0.100000001;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb2.x = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2.x){
        u_xlatb2.x = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (u_xlatb2.x) ? u_xlat7.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat7.x, u_xlat3.x);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat2.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb7 = 0.0<u_xlat0.z;
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat12.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
    u_xlat10_3 = texture(_LightTexture0, u_xlat12.xy);
    u_xlat15 = u_xlat7.x * u_xlat10_3.w;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10_3 = texture(_LightTextureB0, u_xlat0.xx);
    u_xlat0.x = u_xlat15 * u_xlat10_3.w;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xyz = u_xlat1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat5.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %116 %128 %129 %143 %172 %178 %181 %183 %184 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %143 Location 143 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %181 Location 181 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate %185 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 3 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                               Private f32_4* %93 = OpVariable Private 
                                             %113 = OpTypeArray %6 %48 
                                             %114 = OpTypeStruct %7 %6 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %7 
                                             %126 = OpTypeVector %6 2 
                                             %127 = OpTypePointer Output %126 
                               Output f32_2* %128 = OpVariable Output 
                                Input f32_4* %129 = OpVariable Input 
                                         i32 %132 = OpConstant 5 
                                             %141 = OpTypeVector %6 3 
                                             %142 = OpTypePointer Input %141 
                                Input f32_3* %143 = OpVariable Input 
                                         u32 %161 = OpConstant 2 
                                Private f32* %163 = OpVariable Private 
                                             %171 = OpTypePointer Output %141 
                               Output f32_3* %172 = OpVariable Output 
                               Output f32_3* %178 = OpVariable Output 
                               Output f32_4* %181 = OpVariable Output 
                               Output f32_4* %183 = OpVariable Output 
                                Input f32_4* %184 = OpVariable Input 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %30 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %86 = OpAccessChain %17 %60 %30 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %9 %92 
                                        f32_4 %94 = OpLoad %81 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                               Uniform f32_4* %96 = OpAccessChain %17 %73 %61 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpFMul %95 %97 
                                                      OpStore %93 %98 
                               Uniform f32_4* %99 = OpAccessChain %17 %73 %60 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %101 0 0 0 0 
                                       f32_4 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %93 
                                       f32_4 %105 = OpFAdd %103 %104 
                                                      OpStore %93 %105 
                              Uniform f32_4* %106 = OpAccessChain %17 %73 %73 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %81 
                                       f32_4 %109 = OpVectorShuffle %108 %108 2 2 2 2 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %93 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %93 %112 
                              Uniform f32_4* %117 = OpAccessChain %17 %73 %30 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %81 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %93 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %60 
                                                      OpStore %125 %123 
                                       f32_4 %130 = OpLoad %129 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %133 = OpAccessChain %17 %132 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFMul %131 %135 
                              Uniform f32_4* %137 = OpAccessChain %17 %132 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 2 3 
                                       f32_2 %140 = OpFAdd %136 %139 
                                                      OpStore %128 %140 
                                       f32_3 %144 = OpLoad %143 
                              Uniform f32_4* %145 = OpAccessChain %17 %61 %60 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %144 %147 
                                Private f32* %149 = OpAccessChain %81 %25 
                                                      OpStore %149 %148 
                                       f32_3 %150 = OpLoad %143 
                              Uniform f32_4* %151 = OpAccessChain %17 %61 %61 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %150 %153 
                                Private f32* %155 = OpAccessChain %81 %48 
                                                      OpStore %155 %154 
                                       f32_3 %156 = OpLoad %143 
                              Uniform f32_4* %157 = OpAccessChain %17 %61 %73 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %156 %159 
                                Private f32* %162 = OpAccessChain %81 %161 
                                                      OpStore %162 %160 
                                       f32_4 %164 = OpLoad %81 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_4 %166 = OpLoad %81 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %165 %167 
                                                      OpStore %163 %168 
                                         f32 %169 = OpLoad %163 
                                         f32 %170 = OpExtInst %1 32 %169 
                                                      OpStore %163 %170 
                                         f32 %173 = OpLoad %163 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_4 %175 = OpLoad %81 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFMul %174 %176 
                                                      OpStore %172 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                                      OpStore %178 %180 
                                       f32_4 %182 = OpLoad %9 
                                                      OpStore %181 %182 
                                       f32_4 %185 = OpLoad %184 
                                                      OpStore %183 %185 
                                 Output f32* %187 = OpAccessChain %116 %60 %48 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %116 %60 %48 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 721
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %206 %455 %501 %709 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 RelaxedPrecision 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 RelaxedPrecision 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpMemberDecorate %17 13 Offset 17 
                                                      OpMemberDecorate %17 14 Offset 17 
                                                      OpMemberDecorate %17 15 Offset 17 
                                                      OpMemberDecorate %17 16 Offset 17 
                                                      OpMemberDecorate %17 17 Offset 17 
                                                      OpMemberDecorate %17 18 RelaxedPrecision 
                                                      OpMemberDecorate %17 18 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %206 Location 206 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %322 DescriptorSet 322 
                                                      OpDecorate %322 Binding 322 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %455 Location 455 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %501 Location 501 
                                                      OpDecorate %539 SpecId 539 
                                                      OpDecorate %630 DescriptorSet 630 
                                                      OpDecorate %630 Binding 630 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %668 DescriptorSet 668 
                                                      OpDecorate %668 Binding 668 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %684 DescriptorSet 684 
                                                      OpDecorate %684 Binding 684 
                                                      OpDecorate %694 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %699 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %701 RelaxedPrecision 
                                                      OpDecorate %702 RelaxedPrecision 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %706 RelaxedPrecision 
                                                      OpDecorate %707 RelaxedPrecision 
                                                      OpDecorate %709 RelaxedPrecision 
                                                      OpDecorate %709 Location 709 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeArray %7 %11 
                                              %17 = OpTypeStruct %7 %7 %12 %13 %7 %14 %15 %15 %7 %16 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 2 
                                          i32 %22 = OpConstant 3 
                                              %23 = OpTypeVector %6 2 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 1 
                                          i32 %35 = OpConstant 0 
                                              %72 = OpTypePointer Private %23 
                               Private f32_2* %73 = OpVariable Private 
                                          u32 %74 = OpConstant 1 
                                              %75 = OpTypePointer Uniform %6 
                                          i32 %78 = OpConstant 10 
                                          u32 %82 = OpConstant 0 
                                              %83 = OpTypePointer Private %6 
                                Private f32* %104 = OpVariable Private 
                                         f32 %107 = OpConstant 3.674022E-40 
                              Private f32_4* %109 = OpVariable Private 
                                         f32 %112 = OpConstant 3.674022E-40 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %114 = OpConstant 3.674022E-40 
                                         f32 %115 = OpConstant 3.674022E-40 
                                       f32_4 %116 = OpConstantComposite %112 %113 %114 %115 
                                         f32 %121 = OpConstant 3.674022E-40 
                                       f32_4 %122 = OpConstantComposite %121 %121 %121 %121 
                                         f32 %128 = OpConstant 3.674022E-40 
                                       f32_2 %129 = OpConstantComposite %128 %128 
                              Private f32_2* %131 = OpVariable Private 
                                       f32_2 %134 = OpConstantComposite %115 %113 
                                       f32_2 %139 = OpConstantComposite %121 %121 
                                             %145 = OpTypeBool 
                                             %146 = OpTypeVector %145 2 
                                             %147 = OpTypePointer Private %146 
                             Private bool_2* %148 = OpVariable Private 
                                         i32 %151 = OpConstant 12 
                                         i32 %154 = OpConstant 14 
                                             %162 = OpTypeVector %145 4 
                                             %165 = OpTypeVector %145 3 
                                             %166 = OpTypePointer Private %165 
                             Private bool_3* %167 = OpVariable Private 
                                         i32 %168 = OpConstant 15 
                                         i32 %171 = OpConstant 17 
                                         i32 %174 = OpConstant 16 
                                         f32 %180 = OpConstant 3.674022E-40 
                                         f32 %181 = OpConstant 3.674022E-40 
                                       f32_4 %182 = OpConstantComposite %180 %180 %180 %181 
                                         f32 %201 = OpConstant 3.674022E-40 
                                         f32 %203 = OpConstant 3.674022E-40 
                                             %205 = OpTypePointer Input %23 
                                Input f32_2* %206 = OpVariable Input 
                                             %207 = OpTypePointer Input %6 
                                Private f32* %214 = OpVariable Private 
                                         f32 %227 = OpConstant 3.674022E-40 
                                         f32 %231 = OpConstant 3.674022E-40 
                                         i32 %255 = OpConstant 11 
                                             %263 = OpTypePointer Private %145 
                               Private bool* %264 = OpVariable Private 
                                             %275 = OpTypePointer Function %6 
                              Private f32_4* %318 = OpVariable Private 
                                             %319 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %320 = OpTypeSampledImage %319 
                                             %321 = OpTypePointer UniformConstant %320 
 UniformConstant read_only Texture2DSampled* %322 = OpVariable UniformConstant 
                              Private f32_4* %327 = OpVariable Private 
                                         i32 %329 = OpConstant 13 
                              Private f32_4* %366 = OpVariable Private 
                                Private f32* %399 = OpVariable Private 
                                         u32 %400 = OpConstant 2 
                                         u32 %403 = OpConstant 3 
                                         f32 %412 = OpConstant 3.674022E-40 
                              Private f32_4* %414 = OpVariable Private 
                                             %427 = OpTypePointer Function %23 
                              Private f32_4* %452 = OpVariable Private 
                                             %454 = OpTypePointer Input %7 
                                Input f32_4* %455 = OpVariable Input 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         i32 %472 = OpConstant -1 
                                         i32 %483 = OpConstant 18 
                                             %500 = OpTypePointer Input %15 
                                Input f32_3* %501 = OpVariable Input 
                                         i32 %504 = OpConstant 9 
                                         i32 %526 = OpConstant 4 
                                        bool %532 = OpConstantFalse 
                                        bool %539 = OpSpecConstantFalse 
                                             %547 = OpTypePointer Private %15 
                              Private f32_3* %548 = OpVariable Private 
                                         i32 %551 = OpConstant 5 
                                             %577 = OpTypePointer Function %15 
                                         i32 %591 = OpConstant 7 
                                             %592 = OpTypePointer Uniform %15 
                                         i32 %601 = OpConstant 6 
                                         f32 %609 = OpConstant 3.674022E-40 
                                         f32 %611 = OpConstant 3.674022E-40 
                              Private f32_2* %614 = OpVariable Private 
                                         f32 %617 = OpConstant 3.674022E-40 
                                             %627 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %628 = OpTypeSampledImage %627 
                                             %629 = OpTypePointer UniformConstant %628 
 UniformConstant read_only Texture3DSampled* %630 = OpVariable UniformConstant 
                              Private f32_4* %635 = OpVariable Private 
                               Private bool* %648 = OpVariable Private 
                              Private f32_3* %652 = OpVariable Private 
                                       f32_2 %666 = OpConstantComposite %617 %617 
 UniformConstant read_only Texture2DSampled* %668 = OpVariable UniformConstant 
 UniformConstant read_only Texture2DSampled* %684 = OpVariable UniformConstant 
                                         i32 %703 = OpConstant 8 
                                             %708 = OpTypePointer Output %7 
                               Output f32_4* %709 = OpVariable Output 
                                             %718 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %276 = OpVariable Function 
                               Function f32* %292 = OpVariable Function 
                               Function f32* %303 = OpVariable Function 
                               Function f32* %415 = OpVariable Function 
                             Function f32_2* %428 = OpVariable Function 
                               Function f32* %441 = OpVariable Function 
                             Function f32_3* %578 = OpVariable Function 
                               Function f32* %653 = OpVariable Function 
                               Uniform f32_4* %25 = OpAccessChain %19 %21 %22 
                                        f32_4 %26 = OpLoad %25 
                                        f32_2 %27 = OpVectorShuffle %26 %26 1 1 
                               Uniform f32_4* %29 = OpAccessChain %19 %22 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                                        f32_2 %32 = OpFMul %27 %31 
                                        f32_4 %33 = OpLoad %9 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 2 3 
                                                      OpStore %9 %34 
                               Uniform f32_4* %36 = OpAccessChain %19 %22 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                               Uniform f32_4* %39 = OpAccessChain %19 %21 %22 
                                        f32_4 %40 = OpLoad %39 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 0 
                                        f32_2 %42 = OpFMul %38 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_2 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 2 3 
                                                      OpStore %9 %47 
                               Uniform f32_4* %48 = OpAccessChain %19 %22 %21 
                                        f32_4 %49 = OpLoad %48 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                               Uniform f32_4* %51 = OpAccessChain %19 %21 %22 
                                        f32_4 %52 = OpLoad %51 
                                        f32_2 %53 = OpVectorShuffle %52 %52 2 2 
                                        f32_2 %54 = OpFMul %50 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                                        f32_2 %57 = OpFAdd %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %57 4 5 2 3 
                                                      OpStore %9 %59 
                               Uniform f32_4* %60 = OpAccessChain %19 %22 %22 
                                        f32_4 %61 = OpLoad %60 
                                        f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                               Uniform f32_4* %63 = OpAccessChain %19 %21 %22 
                                        f32_4 %64 = OpLoad %63 
                                        f32_2 %65 = OpVectorShuffle %64 %64 3 3 
                                        f32_2 %66 = OpFMul %62 %65 
                                        f32_4 %67 = OpLoad %9 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_2 %69 = OpFAdd %66 %68 
                                        f32_4 %70 = OpLoad %9 
                                        f32_4 %71 = OpVectorShuffle %70 %69 4 5 2 3 
                                                      OpStore %9 %71 
                                 Uniform f32* %76 = OpAccessChain %19 %35 %74 
                                          f32 %77 = OpLoad %76 
                                 Uniform f32* %79 = OpAccessChain %19 %78 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFDiv %77 %80 
                                 Private f32* %84 = OpAccessChain %73 %82 
                                                      OpStore %84 %81 
                                 Private f32* %85 = OpAccessChain %73 %82 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpExtInst %1 8 %86 
                                 Private f32* %88 = OpAccessChain %73 %82 
                                                      OpStore %88 %87 
                                 Private f32* %89 = OpAccessChain %73 %82 
                                          f32 %90 = OpLoad %89 
                                 Uniform f32* %91 = OpAccessChain %19 %78 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFMul %90 %92 
                                 Private f32* %94 = OpAccessChain %9 %82 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %82 
                                                      OpStore %97 %96 
                                 Private f32* %98 = OpAccessChain %9 %74 
                                          f32 %99 = OpLoad %98 
                                Private f32* %100 = OpAccessChain %9 %82 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFAdd %99 %101 
                                Private f32* %103 = OpAccessChain %9 %82 
                                                      OpStore %103 %102 
                                Private f32* %105 = OpAccessChain %9 %82 
                                         f32 %106 = OpLoad %105 
                                         f32 %108 = OpFAdd %106 %107 
                                                      OpStore %104 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_4 %111 = OpVectorShuffle %110 %110 0 0 0 0 
                                       f32_4 %117 = OpFMul %111 %116 
                                                      OpStore %109 %117 
                                       f32_4 %118 = OpLoad %109 
                                       f32_4 %119 = OpExtInst %1 13 %118 
                                                      OpStore %109 %119 
                                       f32_4 %120 = OpLoad %109 
                                       f32_4 %123 = OpFMul %120 %122 
                                                      OpStore %109 %123 
                                       f32_4 %124 = OpLoad %109 
                                       f32_4 %125 = OpExtInst %1 10 %124 
                                                      OpStore %109 %125 
                                       f32_4 %126 = OpLoad %109 
                                       f32_2 %127 = OpVectorShuffle %126 %126 2 3 
                                       f32_2 %130 = OpFAdd %127 %129 
                                                      OpStore %73 %130 
                                         f32 %132 = OpLoad %104 
                                       f32_2 %133 = OpCompositeConstruct %132 %132 
                                       f32_2 %135 = OpFMul %133 %134 
                                                      OpStore %131 %135 
                                       f32_2 %136 = OpLoad %131 
                                       f32_2 %137 = OpExtInst %1 13 %136 
                                                      OpStore %131 %137 
                                       f32_2 %138 = OpLoad %131 
                                       f32_2 %140 = OpFMul %138 %139 
                                                      OpStore %131 %140 
                                       f32_2 %141 = OpLoad %131 
                                       f32_2 %142 = OpExtInst %1 10 %141 
                                                      OpStore %131 %142 
                                       f32_2 %143 = OpLoad %131 
                                       f32_2 %144 = OpFAdd %143 %129 
                                                      OpStore %131 %144 
                                       f32_4 %149 = OpLoad %109 
                                       f32_4 %150 = OpVectorShuffle %149 %149 0 1 0 0 
                                Uniform f32* %152 = OpAccessChain %19 %151 
                                         f32 %153 = OpLoad %152 
                                Uniform f32* %155 = OpAccessChain %19 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %157 = OpAccessChain %19 %151 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %159 = OpAccessChain %19 %151 
                                         f32 %160 = OpLoad %159 
                                       f32_4 %161 = OpCompositeConstruct %153 %156 %158 %160 
                                      bool_4 %163 = OpFOrdLessThan %150 %161 
                                      bool_2 %164 = OpVectorShuffle %163 %163 0 1 
                                                      OpStore %148 %164 
                                Uniform f32* %169 = OpAccessChain %19 %168 
                                         f32 %170 = OpLoad %169 
                                Uniform f32* %172 = OpAccessChain %19 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %19 %174 
                                         f32 %176 = OpLoad %175 
                                Uniform f32* %177 = OpAccessChain %19 %168 
                                         f32 %178 = OpLoad %177 
                                       f32_4 %179 = OpCompositeConstruct %170 %173 %176 %178 
                                      bool_4 %183 = OpFOrdEqual %179 %182 
                                      bool_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                                      OpStore %167 %184 
                                      bool_2 %185 = OpLoad %148 
                                        bool %186 = OpCompositeExtract %185 0 
                                      bool_3 %187 = OpLoad %167 
                                        bool %188 = OpCompositeExtract %187 0 
                                        bool %189 = OpLogicalAnd %186 %188 
                                      bool_2 %190 = OpLoad %148 
                                      bool_2 %191 = OpCompositeInsert %189 %190 0 
                                                      OpStore %148 %191 
                                      bool_2 %192 = OpLoad %148 
                                        bool %193 = OpCompositeExtract %192 1 
                                      bool_3 %194 = OpLoad %167 
                                        bool %195 = OpCompositeExtract %194 2 
                                        bool %196 = OpLogicalAnd %193 %195 
                                      bool_2 %197 = OpLoad %148 
                                      bool_2 %198 = OpCompositeInsert %196 %197 1 
                                                      OpStore %148 %198 
                                Private f32* %199 = OpAccessChain %131 %74 
                                         f32 %200 = OpLoad %199 
                                         f32 %202 = OpFMul %200 %201 
                                         f32 %204 = OpFAdd %202 %203 
                                                      OpStore %104 %204 
                                  Input f32* %208 = OpAccessChain %206 %74 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpLoad %104 
                                         f32 %211 = OpFDiv %209 %210 
                                                      OpStore %104 %211 
                                         f32 %212 = OpLoad %104 
                                         f32 %213 = OpExtInst %1 8 %212 
                                                      OpStore %104 %213 
                                Private f32* %215 = OpAccessChain %9 %82 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpLoad %104 
                                         f32 %219 = OpFAdd %217 %218 
                                                      OpStore %214 %219 
                                Private f32* %220 = OpAccessChain %9 %82 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpLoad %104 
                                         f32 %223 = OpFAdd %221 %222 
                                Private f32* %224 = OpAccessChain %9 %82 
                                                      OpStore %224 %223 
                                Private f32* %225 = OpAccessChain %9 %82 
                                         f32 %226 = OpLoad %225 
                                         f32 %228 = OpFMul %226 %227 
                                Private f32* %229 = OpAccessChain %9 %82 
                                                      OpStore %229 %228 
                                         f32 %230 = OpLoad %214 
                                         f32 %232 = OpFMul %230 %231 
                                Private f32* %233 = OpAccessChain %9 %82 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFAdd %232 %234 
                                Private f32* %236 = OpAccessChain %9 %82 
                                                      OpStore %236 %235 
                                Private f32* %237 = OpAccessChain %9 %82 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpExtInst %1 13 %238 
                                Private f32* %240 = OpAccessChain %9 %82 
                                                      OpStore %240 %239 
                                Private f32* %241 = OpAccessChain %9 %82 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFMul %242 %121 
                                Private f32* %244 = OpAccessChain %9 %82 
                                                      OpStore %244 %243 
                                Private f32* %245 = OpAccessChain %9 %82 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpExtInst %1 10 %246 
                                Private f32* %248 = OpAccessChain %9 %82 
                                                      OpStore %248 %247 
                                Private f32* %249 = OpAccessChain %9 %82 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFAdd %250 %128 
                                Private f32* %252 = OpAccessChain %9 %82 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %9 %82 
                                         f32 %254 = OpLoad %253 
                                Uniform f32* %256 = OpAccessChain %19 %255 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %254 %257 
                                  Input f32* %259 = OpAccessChain %206 %82 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFAdd %258 %260 
                                Private f32* %262 = OpAccessChain %9 %82 
                                                      OpStore %262 %261 
                                Private f32* %265 = OpAccessChain %9 %82 
                                         f32 %266 = OpLoad %265 
                                Private f32* %267 = OpAccessChain %9 %82 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                        bool %270 = OpFOrdGreaterThanEqual %266 %269 
                                                      OpStore %264 %270 
                                Private f32* %271 = OpAccessChain %9 %82 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 4 %272 
                                         f32 %274 = OpExtInst %1 10 %273 
                                                      OpStore %214 %274 
                                        bool %277 = OpLoad %264 
                                                      OpSelectionMerge %279 None 
                                                      OpBranchConditional %277 %278 %281 
                                             %278 = OpLabel 
                                         f32 %280 = OpLoad %214 
                                                      OpStore %276 %280 
                                                      OpBranch %279 
                                             %281 = OpLabel 
                                         f32 %282 = OpLoad %214 
                                         f32 %283 = OpFNegate %282 
                                                      OpStore %276 %283 
                                                      OpBranch %279 
                                             %279 = OpLabel 
                                         f32 %284 = OpLoad %276 
                                                      OpStore %104 %284 
                                Private f32* %285 = OpAccessChain %9 %82 
                                         f32 %286 = OpLoad %285 
                                Private f32* %287 = OpAccessChain %9 %82 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %9 %82 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpExtInst %1 43 %289 %181 %180 
                                Private f32* %291 = OpAccessChain %9 %82 
                                                      OpStore %291 %290 
                                      bool_3 %293 = OpLoad %167 
                                        bool %294 = OpCompositeExtract %293 1 
                                                      OpSelectionMerge %296 None 
                                                      OpBranchConditional %294 %295 %298 
                                             %295 = OpLabel 
                                         f32 %297 = OpLoad %104 
                                                      OpStore %292 %297 
                                                      OpBranch %296 
                                             %298 = OpLabel 
                                Private f32* %299 = OpAccessChain %9 %82 
                                         f32 %300 = OpLoad %299 
                                                      OpStore %292 %300 
                                                      OpBranch %296 
                                             %296 = OpLabel 
                                         f32 %301 = OpLoad %292 
                                Private f32* %302 = OpAccessChain %9 %82 
                                                      OpStore %302 %301 
                                      bool_2 %304 = OpLoad %148 
                                        bool %305 = OpCompositeExtract %304 0 
                                                      OpSelectionMerge %307 None 
                                                      OpBranchConditional %305 %306 %310 
                                             %306 = OpLabel 
                                Private f32* %308 = OpAccessChain %9 %82 
                                         f32 %309 = OpLoad %308 
                                                      OpStore %303 %309 
                                                      OpBranch %307 
                                             %310 = OpLabel 
                                  Input f32* %311 = OpAccessChain %206 %82 
                                         f32 %312 = OpLoad %311 
                                                      OpStore %303 %312 
                                                      OpBranch %307 
                                             %307 = OpLabel 
                                         f32 %313 = OpLoad %303 
                                Private f32* %314 = OpAccessChain %9 %82 
                                                      OpStore %314 %313 
                                  Input f32* %315 = OpAccessChain %206 %74 
                                         f32 %316 = OpLoad %315 
                                Private f32* %317 = OpAccessChain %9 %74 
                                                      OpStore %317 %316 
                  read_only Texture2DSampled %323 = OpLoad %322 
                                       f32_4 %324 = OpLoad %9 
                                       f32_2 %325 = OpVectorShuffle %324 %324 0 1 
                                       f32_4 %326 = OpImageSampleImplicitLod %323 %325 
                                                      OpStore %318 %326 
                                       f32_2 %328 = OpLoad %73 
                                Uniform f32* %330 = OpAccessChain %19 %329 
                                         f32 %331 = OpLoad %330 
                                Uniform f32* %332 = OpAccessChain %19 %329 
                                         f32 %333 = OpLoad %332 
                                       f32_2 %334 = OpCompositeConstruct %331 %333 
                                         f32 %335 = OpCompositeExtract %334 0 
                                         f32 %336 = OpCompositeExtract %334 1 
                                       f32_2 %337 = OpCompositeConstruct %335 %336 
                                       f32_2 %338 = OpFMul %328 %337 
                                       f32_4 %339 = OpLoad %9 
                                       f32_2 %340 = OpVectorShuffle %339 %339 0 0 
                                       f32_2 %341 = OpFAdd %338 %340 
                                       f32_4 %342 = OpLoad %327 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 2 3 
                                                      OpStore %327 %343 
                                       f32_2 %344 = OpLoad %73 
                                Uniform f32* %345 = OpAccessChain %19 %329 
                                         f32 %346 = OpLoad %345 
                                Uniform f32* %347 = OpAccessChain %19 %329 
                                         f32 %348 = OpLoad %347 
                                       f32_2 %349 = OpCompositeConstruct %346 %348 
                                         f32 %350 = OpCompositeExtract %349 0 
                                         f32 %351 = OpCompositeExtract %349 1 
                                       f32_2 %352 = OpCompositeConstruct %350 %351 
                                       f32_2 %353 = OpFMul %344 %352 
                                       f32_2 %354 = OpLoad %206 
                                       f32_2 %355 = OpVectorShuffle %354 %354 1 1 
                                       f32_2 %356 = OpFAdd %353 %355 
                                       f32_4 %357 = OpLoad %327 
                                       f32_4 %358 = OpVectorShuffle %357 %356 0 1 4 5 
                                                      OpStore %327 %358 
                  read_only Texture2DSampled %359 = OpLoad %322 
                                       f32_4 %360 = OpLoad %327 
                                       f32_2 %361 = OpVectorShuffle %360 %360 0 2 
                                       f32_4 %362 = OpImageSampleImplicitLod %359 %361 
                                       f32_2 %363 = OpVectorShuffle %362 %362 0 3 
                                       f32_4 %364 = OpLoad %9 
                                       f32_4 %365 = OpVectorShuffle %364 %363 0 4 5 3 
                                                      OpStore %9 %365 
                  read_only Texture2DSampled %367 = OpLoad %322 
                                       f32_4 %368 = OpLoad %327 
                                       f32_2 %369 = OpVectorShuffle %368 %368 1 3 
                                       f32_4 %370 = OpImageSampleImplicitLod %367 %369 
                                       f32_2 %371 = OpVectorShuffle %370 %370 1 3 
                                       f32_4 %372 = OpLoad %366 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 1 2 5 
                                                      OpStore %366 %373 
                                Private f32* %374 = OpAccessChain %131 %82 
                                         f32 %375 = OpLoad %374 
                                Uniform f32* %376 = OpAccessChain %19 %329 
                                         f32 %377 = OpLoad %376 
                                         f32 %378 = OpFMul %375 %377 
                                Private f32* %379 = OpAccessChain %9 %82 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFAdd %378 %380 
                                Private f32* %382 = OpAccessChain %327 %82 
                                                      OpStore %382 %381 
                                Private f32* %383 = OpAccessChain %131 %82 
                                         f32 %384 = OpLoad %383 
                                Uniform f32* %385 = OpAccessChain %19 %329 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %384 %386 
                                  Input f32* %388 = OpAccessChain %206 %74 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFAdd %387 %389 
                                Private f32* %391 = OpAccessChain %327 %74 
                                                      OpStore %391 %390 
                  read_only Texture2DSampled %392 = OpLoad %322 
                                       f32_4 %393 = OpLoad %327 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                                       f32_4 %395 = OpImageSampleImplicitLod %392 %394 
                                       f32_2 %396 = OpVectorShuffle %395 %395 2 3 
                                       f32_4 %397 = OpLoad %9 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 1 2 5 
                                                      OpStore %9 %398 
                                Private f32* %401 = OpAccessChain %9 %400 
                                         f32 %402 = OpLoad %401 
                                Private f32* %404 = OpAccessChain %366 %403 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFAdd %402 %405 
                                                      OpStore %399 %406 
                                Private f32* %407 = OpAccessChain %9 %403 
                                         f32 %408 = OpLoad %407 
                                         f32 %409 = OpLoad %399 
                                         f32 %410 = OpFAdd %408 %409 
                                                      OpStore %399 %410 
                                         f32 %411 = OpLoad %399 
                                         f32 %413 = OpFMul %411 %412 
                                                      OpStore %399 %413 
                                      bool_2 %416 = OpLoad %148 
                                        bool %417 = OpCompositeExtract %416 1 
                                                      OpSelectionMerge %419 None 
                                                      OpBranchConditional %417 %418 %422 
                                             %418 = OpLabel 
                                Private f32* %420 = OpAccessChain %366 %82 
                                         f32 %421 = OpLoad %420 
                                                      OpStore %415 %421 
                                                      OpBranch %419 
                                             %422 = OpLabel 
                                Private f32* %423 = OpAccessChain %318 %74 
                                         f32 %424 = OpLoad %423 
                                                      OpStore %415 %424 
                                                      OpBranch %419 
                                             %419 = OpLabel 
                                         f32 %425 = OpLoad %415 
                                Private f32* %426 = OpAccessChain %414 %74 
                                                      OpStore %426 %425 
                                      bool_2 %429 = OpLoad %148 
                                        bool %430 = OpCompositeExtract %429 1 
                                                      OpSelectionMerge %432 None 
                                                      OpBranchConditional %430 %431 %435 
                                             %431 = OpLabel 
                                       f32_4 %433 = OpLoad %9 
                                       f32_2 %434 = OpVectorShuffle %433 %433 1 0 
                                                      OpStore %428 %434 
                                                      OpBranch %432 
                                             %435 = OpLabel 
                                       f32_4 %436 = OpLoad %318 
                                       f32_2 %437 = OpVectorShuffle %436 %436 0 2 
                                                      OpStore %428 %437 
                                                      OpBranch %432 
                                             %432 = OpLabel 
                                       f32_2 %438 = OpLoad %428 
                                       f32_4 %439 = OpLoad %414 
                                       f32_4 %440 = OpVectorShuffle %439 %438 4 1 5 3 
                                                      OpStore %414 %440 
                                      bool_2 %442 = OpLoad %148 
                                        bool %443 = OpCompositeExtract %442 1 
                                                      OpSelectionMerge %445 None 
                                                      OpBranchConditional %443 %444 %447 
                                             %444 = OpLabel 
                                         f32 %446 = OpLoad %399 
                                                      OpStore %441 %446 
                                                      OpBranch %445 
                                             %447 = OpLabel 
                                Private f32* %448 = OpAccessChain %318 %403 
                                         f32 %449 = OpLoad %448 
                                                      OpStore %441 %449 
                                                      OpBranch %445 
                                             %445 = OpLabel 
                                         f32 %450 = OpLoad %441 
                                Private f32* %451 = OpAccessChain %414 %403 
                                                      OpStore %451 %450 
                                       f32_4 %453 = OpLoad %414 
                                       f32_4 %456 = OpLoad %455 
                                       f32_4 %457 = OpFMul %453 %456 
                                                      OpStore %452 %457 
                                Private f32* %458 = OpAccessChain %414 %403 
                                         f32 %459 = OpLoad %458 
                                  Input f32* %460 = OpAccessChain %455 %403 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpFMul %459 %461 
                                         f32 %464 = OpFAdd %462 %463 
                                                      OpStore %399 %464 
                                         f32 %465 = OpLoad %399 
                                        bool %466 = OpFOrdLessThan %465 %181 
                                      bool_2 %467 = OpLoad %148 
                                      bool_2 %468 = OpCompositeInsert %466 %467 0 
                                                      OpStore %148 %468 
                                      bool_2 %469 = OpLoad %148 
                                        bool %470 = OpCompositeExtract %469 0 
                                         i32 %471 = OpSelect %470 %28 %35 
                                         i32 %473 = OpIMul %471 %472 
                                        bool %474 = OpINotEqual %473 %35 
                                                      OpSelectionMerge %476 None 
                                                      OpBranchConditional %474 %475 %476 
                                             %475 = OpLabel 
                                                      OpKill
                                             %476 = OpLabel 
                                Private f32* %478 = OpAccessChain %414 %403 
                                         f32 %479 = OpLoad %478 
                                  Input f32* %480 = OpAccessChain %455 %403 
                                         f32 %481 = OpLoad %480 
                                         f32 %482 = OpFMul %479 %481 
                                Uniform f32* %484 = OpAccessChain %19 %483 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFNegate %485 
                                         f32 %487 = OpFAdd %482 %486 
                                                      OpStore %399 %487 
                                         f32 %488 = OpLoad %399 
                                        bool %489 = OpFOrdLessThan %488 %181 
                                      bool_2 %490 = OpLoad %148 
                                      bool_2 %491 = OpCompositeInsert %489 %490 0 
                                                      OpStore %148 %491 
                                      bool_2 %492 = OpLoad %148 
                                        bool %493 = OpCompositeExtract %492 0 
                                         i32 %494 = OpSelect %493 %28 %35 
                                         i32 %495 = OpIMul %494 %472 
                                        bool %496 = OpINotEqual %495 %35 
                                                      OpSelectionMerge %498 None 
                                                      OpBranchConditional %496 %497 %498 
                                             %497 = OpLabel 
                                                      OpKill
                                             %498 = OpLabel 
                                       f32_3 %502 = OpLoad %501 
                                       f32_4 %503 = OpVectorShuffle %502 %502 1 1 1 1 
                              Uniform f32_4* %505 = OpAccessChain %19 %504 %28 
                                       f32_4 %506 = OpLoad %505 
                                       f32_4 %507 = OpFMul %503 %506 
                                                      OpStore %109 %507 
                              Uniform f32_4* %508 = OpAccessChain %19 %504 %35 
                                       f32_4 %509 = OpLoad %508 
                                       f32_3 %510 = OpLoad %501 
                                       f32_4 %511 = OpVectorShuffle %510 %510 0 0 0 0 
                                       f32_4 %512 = OpFMul %509 %511 
                                       f32_4 %513 = OpLoad %109 
                                       f32_4 %514 = OpFAdd %512 %513 
                                                      OpStore %109 %514 
                              Uniform f32_4* %515 = OpAccessChain %19 %504 %21 
                                       f32_4 %516 = OpLoad %515 
                                       f32_3 %517 = OpLoad %501 
                                       f32_4 %518 = OpVectorShuffle %517 %517 2 2 2 2 
                                       f32_4 %519 = OpFMul %516 %518 
                                       f32_4 %520 = OpLoad %109 
                                       f32_4 %521 = OpFAdd %519 %520 
                                                      OpStore %109 %521 
                                       f32_4 %522 = OpLoad %109 
                              Uniform f32_4* %523 = OpAccessChain %19 %504 %22 
                                       f32_4 %524 = OpLoad %523 
                                       f32_4 %525 = OpFAdd %522 %524 
                                                      OpStore %109 %525 
                                Uniform f32* %527 = OpAccessChain %19 %526 %82 
                                         f32 %528 = OpLoad %527 
                                        bool %529 = OpFOrdEqual %528 %180 
                                      bool_3 %530 = OpLoad %167 
                                      bool_3 %531 = OpCompositeInsert %529 %530 0 
                                                      OpStore %167 %531 
                                                      OpSelectionMerge %534 None 
                                                      OpBranchConditional %532 %533 %534 
                                             %533 = OpLabel 
                                      bool_3 %535 = OpLoad %167 
                                        bool %536 = OpCompositeExtract %535 0 
                                                      OpSelectionMerge %538 None 
                                                      OpBranchConditional %536 %537 %538 
                                             %537 = OpLabel 
                                                      OpBranch %538 
                                             %538 = OpLabel 
                                                      OpBranch %534 
                                             %534 = OpLabel 
                                                      OpSelectionMerge %541 None 
                                                      OpBranchConditional %539 %540 %637 
                                             %540 = OpLabel 
                                Uniform f32* %542 = OpAccessChain %19 %526 %74 
                                         f32 %543 = OpLoad %542 
                                        bool %544 = OpFOrdEqual %543 %180 
                                      bool_3 %545 = OpLoad %167 
                                      bool_3 %546 = OpCompositeInsert %544 %545 0 
                                                      OpStore %167 %546 
                                       f32_3 %549 = OpLoad %501 
                                       f32_3 %550 = OpVectorShuffle %549 %549 1 1 1 
                              Uniform f32_4* %552 = OpAccessChain %19 %551 %28 
                                       f32_4 %553 = OpLoad %552 
                                       f32_3 %554 = OpVectorShuffle %553 %553 0 1 2 
                                       f32_3 %555 = OpFMul %550 %554 
                                                      OpStore %548 %555 
                              Uniform f32_4* %556 = OpAccessChain %19 %551 %35 
                                       f32_4 %557 = OpLoad %556 
                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 2 
                                       f32_3 %559 = OpLoad %501 
                                       f32_3 %560 = OpVectorShuffle %559 %559 0 0 0 
                                       f32_3 %561 = OpFMul %558 %560 
                                       f32_3 %562 = OpLoad %548 
                                       f32_3 %563 = OpFAdd %561 %562 
                                                      OpStore %548 %563 
                              Uniform f32_4* %564 = OpAccessChain %19 %551 %21 
                                       f32_4 %565 = OpLoad %564 
                                       f32_3 %566 = OpVectorShuffle %565 %565 0 1 2 
                                       f32_3 %567 = OpLoad %501 
                                       f32_3 %568 = OpVectorShuffle %567 %567 2 2 2 
                                       f32_3 %569 = OpFMul %566 %568 
                                       f32_3 %570 = OpLoad %548 
                                       f32_3 %571 = OpFAdd %569 %570 
                                                      OpStore %548 %571 
                                       f32_3 %572 = OpLoad %548 
                              Uniform f32_4* %573 = OpAccessChain %19 %551 %22 
                                       f32_4 %574 = OpLoad %573 
                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
                                       f32_3 %576 = OpFAdd %572 %575 
                                                      OpStore %548 %576 
                                      bool_3 %579 = OpLoad %167 
                                        bool %580 = OpCompositeExtract %579 0 
                                                      OpSelectionMerge %582 None 
                                                      OpBranchConditional %580 %581 %584 
                                             %581 = OpLabel 
                                       f32_3 %583 = OpLoad %548 
                                                      OpStore %578 %583 
                                                      OpBranch %582 
                                             %584 = OpLabel 
                                       f32_3 %585 = OpLoad %501 
                                                      OpStore %578 %585 
                                                      OpBranch %582 
                                             %582 = OpLabel 
                                       f32_3 %586 = OpLoad %578 
                                       f32_4 %587 = OpLoad %318 
                                       f32_4 %588 = OpVectorShuffle %587 %586 4 5 6 3 
                                                      OpStore %318 %588 
                                       f32_4 %589 = OpLoad %318 
                                       f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
                              Uniform f32_3* %593 = OpAccessChain %19 %591 
                                       f32_3 %594 = OpLoad %593 
                                       f32_3 %595 = OpFNegate %594 
                                       f32_3 %596 = OpFAdd %590 %595 
                                       f32_4 %597 = OpLoad %318 
                                       f32_4 %598 = OpVectorShuffle %597 %596 4 5 6 3 
                                                      OpStore %318 %598 
                                       f32_4 %599 = OpLoad %318 
                                       f32_3 %600 = OpVectorShuffle %599 %599 0 1 2 
                              Uniform f32_3* %602 = OpAccessChain %19 %601 
                                       f32_3 %603 = OpLoad %602 
                                       f32_3 %604 = OpFMul %600 %603 
                                       f32_4 %605 = OpLoad %318 
                                       f32_4 %606 = OpVectorShuffle %605 %604 0 4 5 6 
                                                      OpStore %318 %606 
                                Private f32* %607 = OpAccessChain %318 %74 
                                         f32 %608 = OpLoad %607 
                                         f32 %610 = OpFMul %608 %609 
                                         f32 %612 = OpFAdd %610 %611 
                                Private f32* %613 = OpAccessChain %548 %82 
                                                      OpStore %613 %612 
                                Uniform f32* %615 = OpAccessChain %19 %526 %400 
                                         f32 %616 = OpLoad %615 
                                         f32 %618 = OpFMul %616 %617 
                                         f32 %619 = OpFAdd %618 %611 
                                Private f32* %620 = OpAccessChain %614 %82 
                                                      OpStore %620 %619 
                                Private f32* %621 = OpAccessChain %548 %82 
                                         f32 %622 = OpLoad %621 
                                Private f32* %623 = OpAccessChain %614 %82 
                                         f32 %624 = OpLoad %623 
                                         f32 %625 = OpExtInst %1 40 %622 %624 
                                Private f32* %626 = OpAccessChain %318 %82 
                                                      OpStore %626 %625 
                  read_only Texture3DSampled %631 = OpLoad %630 
                                       f32_4 %632 = OpLoad %318 
                                       f32_3 %633 = OpVectorShuffle %632 %632 0 2 3 
                                       f32_4 %634 = OpImageSampleImplicitLod %631 %633 
                                                      OpStore %318 %634 
                                       f32_4 %636 = OpLoad %318 
                                                      OpStore %635 %636 
                                                      OpBranch %541 
                                             %637 = OpLabel 
                                Private f32* %638 = OpAccessChain %635 %82 
                                                      OpStore %638 %180 
                                Private f32* %639 = OpAccessChain %635 %74 
                                                      OpStore %639 %180 
                                Private f32* %640 = OpAccessChain %635 %400 
                                                      OpStore %640 %180 
                                Private f32* %641 = OpAccessChain %635 %403 
                                                      OpStore %641 %180 
                                                      OpBranch %541 
                                             %541 = OpLabel 
                                       f32_4 %642 = OpLoad %635 
                              Uniform f32_4* %643 = OpAccessChain %19 %28 
                                       f32_4 %644 = OpLoad %643 
                                         f32 %645 = OpDot %642 %644 
                                                      OpStore %399 %645 
                                         f32 %646 = OpLoad %399 
                                         f32 %647 = OpExtInst %1 43 %646 %181 %180 
                                                      OpStore %399 %647 
                                Private f32* %649 = OpAccessChain %109 %400 
                                         f32 %650 = OpLoad %649 
                                        bool %651 = OpFOrdLessThan %181 %650 
                                                      OpStore %648 %651 
                                        bool %654 = OpLoad %648 
                                                      OpSelectionMerge %656 None 
                                                      OpBranchConditional %654 %655 %657 
                                             %655 = OpLabel 
                                                      OpStore %653 %180 
                                                      OpBranch %656 
                                             %657 = OpLabel 
                                                      OpStore %653 %181 
                                                      OpBranch %656 
                                             %656 = OpLabel 
                                         f32 %658 = OpLoad %653 
                                Private f32* %659 = OpAccessChain %652 %82 
                                                      OpStore %659 %658 
                                       f32_4 %660 = OpLoad %109 
                                       f32_2 %661 = OpVectorShuffle %660 %660 0 1 
                                       f32_4 %662 = OpLoad %109 
                                       f32_2 %663 = OpVectorShuffle %662 %662 3 3 
                                       f32_2 %664 = OpFDiv %661 %663 
                                                      OpStore %614 %664 
                                       f32_2 %665 = OpLoad %614 
                                       f32_2 %667 = OpFAdd %665 %666 
                                                      OpStore %614 %667 
                  read_only Texture2DSampled %669 = OpLoad %668 
                                       f32_2 %670 = OpLoad %614 
                                       f32_4 %671 = OpImageSampleImplicitLod %669 %670 
                                         f32 %672 = OpCompositeExtract %671 3 
                                                      OpStore %214 %672 
                                         f32 %673 = OpLoad %214 
                                Private f32* %674 = OpAccessChain %652 %82 
                                         f32 %675 = OpLoad %674 
                                         f32 %676 = OpFMul %673 %675 
                                Private f32* %677 = OpAccessChain %652 %82 
                                                      OpStore %677 %676 
                                       f32_4 %678 = OpLoad %109 
                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
                                       f32_4 %680 = OpLoad %109 
                                       f32_3 %681 = OpVectorShuffle %680 %680 0 1 2 
                                         f32 %682 = OpDot %679 %681 
                                Private f32* %683 = OpAccessChain %109 %82 
                                                      OpStore %683 %682 
                  read_only Texture2DSampled %685 = OpLoad %684 
                                       f32_4 %686 = OpLoad %109 
                                       f32_2 %687 = OpVectorShuffle %686 %686 0 0 
                                       f32_4 %688 = OpImageSampleImplicitLod %685 %687 
                                         f32 %689 = OpCompositeExtract %688 3 
                                Private f32* %690 = OpAccessChain %109 %82 
                                                      OpStore %690 %689 
                                Private f32* %691 = OpAccessChain %109 %82 
                                         f32 %692 = OpLoad %691 
                                Private f32* %693 = OpAccessChain %652 %82 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpFMul %692 %694 
                                Private f32* %696 = OpAccessChain %652 %82 
                                                      OpStore %696 %695 
                                         f32 %697 = OpLoad %399 
                                Private f32* %698 = OpAccessChain %652 %82 
                                         f32 %699 = OpLoad %698 
                                         f32 %700 = OpFMul %697 %699 
                                                      OpStore %399 %700 
                                       f32_4 %701 = OpLoad %452 
                                       f32_3 %702 = OpVectorShuffle %701 %701 0 1 2 
                              Uniform f32_4* %704 = OpAccessChain %19 %703 
                                       f32_4 %705 = OpLoad %704 
                                       f32_3 %706 = OpVectorShuffle %705 %705 0 1 2 
                                       f32_3 %707 = OpFMul %702 %706 
                                                      OpStore %652 %707 
                                         f32 %710 = OpLoad %399 
                                       f32_3 %711 = OpCompositeConstruct %710 %710 %710 
                                       f32_3 %712 = OpLoad %652 
                                       f32_3 %713 = OpFMul %711 %712 
                                       f32_4 %714 = OpLoad %709 
                                       f32_4 %715 = OpVectorShuffle %714 %713 4 5 6 3 
                                                      OpStore %709 %715 
                                Private f32* %716 = OpAccessChain %452 %403 
                                         f32 %717 = OpLoad %716 
                                 Output f32* %719 = OpAccessChain %709 %403 
                                                      OpStore %719 %717 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat10;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat3 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat3 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _GlitchInterval;
uniform 	float _DispIntensity;
uniform 	float _DispProbability;
uniform 	float _ColorIntensity;
uniform 	float _ColorProbability;
uniform 	float _DispGlitchOn;
uniform 	float _ColorGlitchOn;
uniform 	float _WrapDispCoords;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat16_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat10_4;
vec3 u_xlat5;
bool u_xlatb5;
float u_xlat7;
vec2 u_xlat10;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].ww + u_xlat0.xy;
    u_xlat10.x = _Time.y / _GlitchInterval;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat5.x = u_xlat0.x + 2.79299998;
    u_xlat1 = u_xlat0.xxxx * vec4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
    u_xlat1 = sin(u_xlat1);
    u_xlat1 = u_xlat1 * vec4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
    u_xlat1 = fract(u_xlat1);
    u_xlat10.xy = u_xlat1.zw + vec2(-0.5, -0.5);
    u_xlat11.xy = u_xlat5.xx * vec2(-91.2228012, 91.2228012);
    u_xlat11.xy = sin(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy * vec2(43758.5469, 43758.5469);
    u_xlat11.xy = fract(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
    u_xlatb1.xy = lessThan(u_xlat1.xyxx, vec4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
    u_xlatb2.xyz = equal(vec4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), vec4(1.0, 1.0, 1.0, 0.0)).xyz;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
    u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
    u_xlat5.x = vs_TEXCOORD0.y / u_xlat5.x;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * 78.2330017;
    u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 43758.5469;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat0.x = u_xlat0.x * _DispIntensity + vs_TEXCOORD0.x;
    u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat16 = fract(abs(u_xlat0.x));
    u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : vs_TEXCOORD0.x;
    u_xlat0.y = vs_TEXCOORD0.y;
    u_xlat2 = texture(_MainTex, u_xlat0.xy);
    u_xlat3.xy = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
    u_xlat3.zw = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + vs_TEXCOORD0.yy;
    u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
    u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
    u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
    u_xlat0.y = u_xlat11.x * _ColorIntensity + vs_TEXCOORD0.y;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
    u_xlat1.x = u_xlat0.w + u_xlat16_1;
    u_xlat0.w = u_xlat1.x * 0.333333343;
    u_xlat0.x = u_xlat10_4.x;
    u_xlat0.y = u_xlat10_3.y;
    u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
    u_xlat1 = u_xlat0 * vs_COLOR0;
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + -0.100000001;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat15 = u_xlat2.y * 0.25 + 0.75;
        u_xlat7 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat15, u_xlat7);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat15 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat2.xx);
    u_xlat10_3 = texture(_LightTexture0, u_xlat0.xyz);
    u_xlat16_0 = u_xlat10_2.w * u_xlat10_3.w;
    u_xlat0.x = u_xlat15 * u_xlat16_0;
    u_xlat5.xyz = u_xlat1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat5.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %116 %128 %129 %143 %172 %178 %181 %183 %184 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %143 Location 143 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %181 Location 181 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate %185 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 3 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                               Private f32_4* %93 = OpVariable Private 
                                             %113 = OpTypeArray %6 %48 
                                             %114 = OpTypeStruct %7 %6 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %7 
                                             %126 = OpTypeVector %6 2 
                                             %127 = OpTypePointer Output %126 
                               Output f32_2* %128 = OpVariable Output 
                                Input f32_4* %129 = OpVariable Input 
                                         i32 %132 = OpConstant 5 
                                             %141 = OpTypeVector %6 3 
                                             %142 = OpTypePointer Input %141 
                                Input f32_3* %143 = OpVariable Input 
                                         u32 %161 = OpConstant 2 
                                Private f32* %163 = OpVariable Private 
                                             %171 = OpTypePointer Output %141 
                               Output f32_3* %172 = OpVariable Output 
                               Output f32_3* %178 = OpVariable Output 
                               Output f32_4* %181 = OpVariable Output 
                               Output f32_4* %183 = OpVariable Output 
                                Input f32_4* %184 = OpVariable Input 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %30 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %86 = OpAccessChain %17 %60 %30 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %9 %92 
                                        f32_4 %94 = OpLoad %81 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                               Uniform f32_4* %96 = OpAccessChain %17 %73 %61 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpFMul %95 %97 
                                                      OpStore %93 %98 
                               Uniform f32_4* %99 = OpAccessChain %17 %73 %60 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %101 0 0 0 0 
                                       f32_4 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %93 
                                       f32_4 %105 = OpFAdd %103 %104 
                                                      OpStore %93 %105 
                              Uniform f32_4* %106 = OpAccessChain %17 %73 %73 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %81 
                                       f32_4 %109 = OpVectorShuffle %108 %108 2 2 2 2 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %93 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %93 %112 
                              Uniform f32_4* %117 = OpAccessChain %17 %73 %30 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %81 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %93 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %60 
                                                      OpStore %125 %123 
                                       f32_4 %130 = OpLoad %129 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %133 = OpAccessChain %17 %132 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFMul %131 %135 
                              Uniform f32_4* %137 = OpAccessChain %17 %132 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 2 3 
                                       f32_2 %140 = OpFAdd %136 %139 
                                                      OpStore %128 %140 
                                       f32_3 %144 = OpLoad %143 
                              Uniform f32_4* %145 = OpAccessChain %17 %61 %60 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %144 %147 
                                Private f32* %149 = OpAccessChain %81 %25 
                                                      OpStore %149 %148 
                                       f32_3 %150 = OpLoad %143 
                              Uniform f32_4* %151 = OpAccessChain %17 %61 %61 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %150 %153 
                                Private f32* %155 = OpAccessChain %81 %48 
                                                      OpStore %155 %154 
                                       f32_3 %156 = OpLoad %143 
                              Uniform f32_4* %157 = OpAccessChain %17 %61 %73 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %156 %159 
                                Private f32* %162 = OpAccessChain %81 %161 
                                                      OpStore %162 %160 
                                       f32_4 %164 = OpLoad %81 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_4 %166 = OpLoad %81 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %165 %167 
                                                      OpStore %163 %168 
                                         f32 %169 = OpLoad %163 
                                         f32 %170 = OpExtInst %1 32 %169 
                                                      OpStore %163 %170 
                                         f32 %173 = OpLoad %163 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_4 %175 = OpLoad %81 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFMul %174 %176 
                                                      OpStore %172 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                                      OpStore %178 %180 
                                       f32_4 %182 = OpLoad %9 
                                                      OpStore %181 %182 
                                       f32_4 %185 = OpLoad %184 
                                                      OpStore %183 %185 
                                 Output f32* %187 = OpAccessChain %116 %60 %48 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %116 %60 %48 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 730
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %206 %462 %512 %718 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 RelaxedPrecision 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 RelaxedPrecision 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpMemberDecorate %17 13 Offset 17 
                                                      OpMemberDecorate %17 14 Offset 17 
                                                      OpMemberDecorate %17 15 Offset 17 
                                                      OpMemberDecorate %17 16 Offset 17 
                                                      OpMemberDecorate %17 17 Offset 17 
                                                      OpMemberDecorate %17 18 RelaxedPrecision 
                                                      OpMemberDecorate %17 18 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %206 Location 206 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %322 DescriptorSet 322 
                                                      OpDecorate %322 Binding 322 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %462 Location 462 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %512 Location 512 
                                                      OpDecorate %563 SpecId 563 
                                                      OpDecorate %657 DescriptorSet 657 
                                                      OpDecorate %657 Binding 657 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %669 RelaxedPrecision 
                                                      OpDecorate %671 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %676 RelaxedPrecision 
                                                      OpDecorate %683 DescriptorSet 683 
                                                      OpDecorate %683 Binding 683 
                                                      OpDecorate %692 DescriptorSet 692 
                                                      OpDecorate %692 Binding 692 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %718 Location 718 
                                                      OpDecorate %721 RelaxedPrecision 
                                                      OpDecorate %726 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeArray %7 %11 
                                              %17 = OpTypeStruct %7 %7 %12 %13 %7 %14 %15 %15 %7 %16 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 2 
                                          i32 %22 = OpConstant 3 
                                              %23 = OpTypeVector %6 2 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 1 
                                          i32 %35 = OpConstant 0 
                                              %72 = OpTypePointer Private %23 
                               Private f32_2* %73 = OpVariable Private 
                                          u32 %74 = OpConstant 1 
                                              %75 = OpTypePointer Uniform %6 
                                          i32 %78 = OpConstant 10 
                                          u32 %82 = OpConstant 0 
                                              %83 = OpTypePointer Private %6 
                                Private f32* %104 = OpVariable Private 
                                         f32 %107 = OpConstant 3.674022E-40 
                              Private f32_4* %109 = OpVariable Private 
                                         f32 %112 = OpConstant 3.674022E-40 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %114 = OpConstant 3.674022E-40 
                                         f32 %115 = OpConstant 3.674022E-40 
                                       f32_4 %116 = OpConstantComposite %112 %113 %114 %115 
                                         f32 %121 = OpConstant 3.674022E-40 
                                       f32_4 %122 = OpConstantComposite %121 %121 %121 %121 
                                         f32 %128 = OpConstant 3.674022E-40 
                                       f32_2 %129 = OpConstantComposite %128 %128 
                              Private f32_2* %131 = OpVariable Private 
                                       f32_2 %134 = OpConstantComposite %115 %113 
                                       f32_2 %139 = OpConstantComposite %121 %121 
                                             %145 = OpTypeBool 
                                             %146 = OpTypeVector %145 2 
                                             %147 = OpTypePointer Private %146 
                             Private bool_2* %148 = OpVariable Private 
                                         i32 %151 = OpConstant 12 
                                         i32 %154 = OpConstant 14 
                                             %162 = OpTypeVector %145 4 
                                             %165 = OpTypeVector %145 3 
                                             %166 = OpTypePointer Private %165 
                             Private bool_3* %167 = OpVariable Private 
                                         i32 %168 = OpConstant 15 
                                         i32 %171 = OpConstant 17 
                                         i32 %174 = OpConstant 16 
                                         f32 %180 = OpConstant 3.674022E-40 
                                         f32 %181 = OpConstant 3.674022E-40 
                                       f32_4 %182 = OpConstantComposite %180 %180 %180 %181 
                                         f32 %201 = OpConstant 3.674022E-40 
                                         f32 %203 = OpConstant 3.674022E-40 
                                             %205 = OpTypePointer Input %23 
                                Input f32_2* %206 = OpVariable Input 
                                             %207 = OpTypePointer Input %6 
                                Private f32* %214 = OpVariable Private 
                                         f32 %227 = OpConstant 3.674022E-40 
                                         f32 %231 = OpConstant 3.674022E-40 
                                         i32 %255 = OpConstant 11 
                                             %263 = OpTypePointer Private %145 
                               Private bool* %264 = OpVariable Private 
                                             %275 = OpTypePointer Function %6 
                              Private f32_4* %318 = OpVariable Private 
                                             %319 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %320 = OpTypeSampledImage %319 
                                             %321 = OpTypePointer UniformConstant %320 
 UniformConstant read_only Texture2DSampled* %322 = OpVariable UniformConstant 
                              Private f32_4* %327 = OpVariable Private 
                                         i32 %329 = OpConstant 13 
                              Private f32_4* %366 = OpVariable Private 
                                             %399 = OpTypePointer Private %15 
                              Private f32_3* %400 = OpVariable Private 
                                         u32 %401 = OpConstant 2 
                                         u32 %404 = OpConstant 3 
                                         f32 %417 = OpConstant 3.674022E-40 
                              Private f32_4* %420 = OpVariable Private 
                                             %433 = OpTypePointer Function %23 
                              Private f32_4* %459 = OpVariable Private 
                                             %461 = OpTypePointer Input %7 
                                Input f32_4* %462 = OpVariable Input 
                                         f32 %470 = OpConstant 3.674022E-40 
                                         i32 %481 = OpConstant -1 
                                         i32 %492 = OpConstant 18 
                                             %511 = OpTypePointer Input %15 
                                Input f32_3* %512 = OpVariable Input 
                                         i32 %515 = OpConstant 9 
                               Private bool* %552 = OpVariable Private 
                                         i32 %553 = OpConstant 4 
                                        bool %557 = OpConstantFalse 
                                        bool %563 = OpSpecConstantFalse 
                                         i32 %571 = OpConstant 5 
                                             %608 = OpTypePointer Function %15 
                                         i32 %622 = OpConstant 7 
                                             %623 = OpTypePointer Uniform %15 
                                         i32 %632 = OpConstant 6 
                                         f32 %640 = OpConstant 3.674022E-40 
                                         f32 %642 = OpConstant 3.674022E-40 
                                Private f32* %644 = OpVariable Private 
                                         f32 %647 = OpConstant 3.674022E-40 
                                             %654 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %655 = OpTypeSampledImage %654 
                                             %656 = OpTypePointer UniformConstant %655 
 UniformConstant read_only Texture3DSampled* %657 = OpVariable UniformConstant 
                              Private f32_4* %662 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %683 = OpVariable UniformConstant 
                                             %689 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %690 = OpTypeSampledImage %689 
                                             %691 = OpTypePointer UniformConstant %690 
UniformConstant read_only TextureCubeSampled* %692 = OpVariable UniformConstant 
                                         i32 %712 = OpConstant 8 
                                             %717 = OpTypePointer Output %7 
                               Output f32_4* %718 = OpVariable Output 
                                             %727 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %276 = OpVariable Function 
                               Function f32* %292 = OpVariable Function 
                               Function f32* %303 = OpVariable Function 
                               Function f32* %421 = OpVariable Function 
                             Function f32_2* %434 = OpVariable Function 
                               Function f32* %447 = OpVariable Function 
                             Function f32_3* %609 = OpVariable Function 
                               Uniform f32_4* %25 = OpAccessChain %19 %21 %22 
                                        f32_4 %26 = OpLoad %25 
                                        f32_2 %27 = OpVectorShuffle %26 %26 1 1 
                               Uniform f32_4* %29 = OpAccessChain %19 %22 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                                        f32_2 %32 = OpFMul %27 %31 
                                        f32_4 %33 = OpLoad %9 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 2 3 
                                                      OpStore %9 %34 
                               Uniform f32_4* %36 = OpAccessChain %19 %22 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                               Uniform f32_4* %39 = OpAccessChain %19 %21 %22 
                                        f32_4 %40 = OpLoad %39 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 0 
                                        f32_2 %42 = OpFMul %38 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_2 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 2 3 
                                                      OpStore %9 %47 
                               Uniform f32_4* %48 = OpAccessChain %19 %22 %21 
                                        f32_4 %49 = OpLoad %48 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                               Uniform f32_4* %51 = OpAccessChain %19 %21 %22 
                                        f32_4 %52 = OpLoad %51 
                                        f32_2 %53 = OpVectorShuffle %52 %52 2 2 
                                        f32_2 %54 = OpFMul %50 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                                        f32_2 %57 = OpFAdd %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %57 4 5 2 3 
                                                      OpStore %9 %59 
                               Uniform f32_4* %60 = OpAccessChain %19 %22 %22 
                                        f32_4 %61 = OpLoad %60 
                                        f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                               Uniform f32_4* %63 = OpAccessChain %19 %21 %22 
                                        f32_4 %64 = OpLoad %63 
                                        f32_2 %65 = OpVectorShuffle %64 %64 3 3 
                                        f32_2 %66 = OpFMul %62 %65 
                                        f32_4 %67 = OpLoad %9 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_2 %69 = OpFAdd %66 %68 
                                        f32_4 %70 = OpLoad %9 
                                        f32_4 %71 = OpVectorShuffle %70 %69 4 5 2 3 
                                                      OpStore %9 %71 
                                 Uniform f32* %76 = OpAccessChain %19 %35 %74 
                                          f32 %77 = OpLoad %76 
                                 Uniform f32* %79 = OpAccessChain %19 %78 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFDiv %77 %80 
                                 Private f32* %84 = OpAccessChain %73 %82 
                                                      OpStore %84 %81 
                                 Private f32* %85 = OpAccessChain %73 %82 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpExtInst %1 8 %86 
                                 Private f32* %88 = OpAccessChain %73 %82 
                                                      OpStore %88 %87 
                                 Private f32* %89 = OpAccessChain %73 %82 
                                          f32 %90 = OpLoad %89 
                                 Uniform f32* %91 = OpAccessChain %19 %78 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFMul %90 %92 
                                 Private f32* %94 = OpAccessChain %9 %82 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %82 
                                                      OpStore %97 %96 
                                 Private f32* %98 = OpAccessChain %9 %74 
                                          f32 %99 = OpLoad %98 
                                Private f32* %100 = OpAccessChain %9 %82 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFAdd %99 %101 
                                Private f32* %103 = OpAccessChain %9 %82 
                                                      OpStore %103 %102 
                                Private f32* %105 = OpAccessChain %9 %82 
                                         f32 %106 = OpLoad %105 
                                         f32 %108 = OpFAdd %106 %107 
                                                      OpStore %104 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_4 %111 = OpVectorShuffle %110 %110 0 0 0 0 
                                       f32_4 %117 = OpFMul %111 %116 
                                                      OpStore %109 %117 
                                       f32_4 %118 = OpLoad %109 
                                       f32_4 %119 = OpExtInst %1 13 %118 
                                                      OpStore %109 %119 
                                       f32_4 %120 = OpLoad %109 
                                       f32_4 %123 = OpFMul %120 %122 
                                                      OpStore %109 %123 
                                       f32_4 %124 = OpLoad %109 
                                       f32_4 %125 = OpExtInst %1 10 %124 
                                                      OpStore %109 %125 
                                       f32_4 %126 = OpLoad %109 
                                       f32_2 %127 = OpVectorShuffle %126 %126 2 3 
                                       f32_2 %130 = OpFAdd %127 %129 
                                                      OpStore %73 %130 
                                         f32 %132 = OpLoad %104 
                                       f32_2 %133 = OpCompositeConstruct %132 %132 
                                       f32_2 %135 = OpFMul %133 %134 
                                                      OpStore %131 %135 
                                       f32_2 %136 = OpLoad %131 
                                       f32_2 %137 = OpExtInst %1 13 %136 
                                                      OpStore %131 %137 
                                       f32_2 %138 = OpLoad %131 
                                       f32_2 %140 = OpFMul %138 %139 
                                                      OpStore %131 %140 
                                       f32_2 %141 = OpLoad %131 
                                       f32_2 %142 = OpExtInst %1 10 %141 
                                                      OpStore %131 %142 
                                       f32_2 %143 = OpLoad %131 
                                       f32_2 %144 = OpFAdd %143 %129 
                                                      OpStore %131 %144 
                                       f32_4 %149 = OpLoad %109 
                                       f32_4 %150 = OpVectorShuffle %149 %149 0 1 0 0 
                                Uniform f32* %152 = OpAccessChain %19 %151 
                                         f32 %153 = OpLoad %152 
                                Uniform f32* %155 = OpAccessChain %19 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %157 = OpAccessChain %19 %151 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %159 = OpAccessChain %19 %151 
                                         f32 %160 = OpLoad %159 
                                       f32_4 %161 = OpCompositeConstruct %153 %156 %158 %160 
                                      bool_4 %163 = OpFOrdLessThan %150 %161 
                                      bool_2 %164 = OpVectorShuffle %163 %163 0 1 
                                                      OpStore %148 %164 
                                Uniform f32* %169 = OpAccessChain %19 %168 
                                         f32 %170 = OpLoad %169 
                                Uniform f32* %172 = OpAccessChain %19 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %19 %174 
                                         f32 %176 = OpLoad %175 
                                Uniform f32* %177 = OpAccessChain %19 %168 
                                         f32 %178 = OpLoad %177 
                                       f32_4 %179 = OpCompositeConstruct %170 %173 %176 %178 
                                      bool_4 %183 = OpFOrdEqual %179 %182 
                                      bool_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                                      OpStore %167 %184 
                                      bool_2 %185 = OpLoad %148 
                                        bool %186 = OpCompositeExtract %185 0 
                                      bool_3 %187 = OpLoad %167 
                                        bool %188 = OpCompositeExtract %187 0 
                                        bool %189 = OpLogicalAnd %186 %188 
                                      bool_2 %190 = OpLoad %148 
                                      bool_2 %191 = OpCompositeInsert %189 %190 0 
                                                      OpStore %148 %191 
                                      bool_2 %192 = OpLoad %148 
                                        bool %193 = OpCompositeExtract %192 1 
                                      bool_3 %194 = OpLoad %167 
                                        bool %195 = OpCompositeExtract %194 2 
                                        bool %196 = OpLogicalAnd %193 %195 
                                      bool_2 %197 = OpLoad %148 
                                      bool_2 %198 = OpCompositeInsert %196 %197 1 
                                                      OpStore %148 %198 
                                Private f32* %199 = OpAccessChain %131 %74 
                                         f32 %200 = OpLoad %199 
                                         f32 %202 = OpFMul %200 %201 
                                         f32 %204 = OpFAdd %202 %203 
                                                      OpStore %104 %204 
                                  Input f32* %208 = OpAccessChain %206 %74 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpLoad %104 
                                         f32 %211 = OpFDiv %209 %210 
                                                      OpStore %104 %211 
                                         f32 %212 = OpLoad %104 
                                         f32 %213 = OpExtInst %1 8 %212 
                                                      OpStore %104 %213 
                                Private f32* %215 = OpAccessChain %9 %82 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpLoad %104 
                                         f32 %219 = OpFAdd %217 %218 
                                                      OpStore %214 %219 
                                Private f32* %220 = OpAccessChain %9 %82 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpLoad %104 
                                         f32 %223 = OpFAdd %221 %222 
                                Private f32* %224 = OpAccessChain %9 %82 
                                                      OpStore %224 %223 
                                Private f32* %225 = OpAccessChain %9 %82 
                                         f32 %226 = OpLoad %225 
                                         f32 %228 = OpFMul %226 %227 
                                Private f32* %229 = OpAccessChain %9 %82 
                                                      OpStore %229 %228 
                                         f32 %230 = OpLoad %214 
                                         f32 %232 = OpFMul %230 %231 
                                Private f32* %233 = OpAccessChain %9 %82 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFAdd %232 %234 
                                Private f32* %236 = OpAccessChain %9 %82 
                                                      OpStore %236 %235 
                                Private f32* %237 = OpAccessChain %9 %82 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpExtInst %1 13 %238 
                                Private f32* %240 = OpAccessChain %9 %82 
                                                      OpStore %240 %239 
                                Private f32* %241 = OpAccessChain %9 %82 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFMul %242 %121 
                                Private f32* %244 = OpAccessChain %9 %82 
                                                      OpStore %244 %243 
                                Private f32* %245 = OpAccessChain %9 %82 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpExtInst %1 10 %246 
                                Private f32* %248 = OpAccessChain %9 %82 
                                                      OpStore %248 %247 
                                Private f32* %249 = OpAccessChain %9 %82 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFAdd %250 %128 
                                Private f32* %252 = OpAccessChain %9 %82 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %9 %82 
                                         f32 %254 = OpLoad %253 
                                Uniform f32* %256 = OpAccessChain %19 %255 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %254 %257 
                                  Input f32* %259 = OpAccessChain %206 %82 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFAdd %258 %260 
                                Private f32* %262 = OpAccessChain %9 %82 
                                                      OpStore %262 %261 
                                Private f32* %265 = OpAccessChain %9 %82 
                                         f32 %266 = OpLoad %265 
                                Private f32* %267 = OpAccessChain %9 %82 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                        bool %270 = OpFOrdGreaterThanEqual %266 %269 
                                                      OpStore %264 %270 
                                Private f32* %271 = OpAccessChain %9 %82 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 4 %272 
                                         f32 %274 = OpExtInst %1 10 %273 
                                                      OpStore %214 %274 
                                        bool %277 = OpLoad %264 
                                                      OpSelectionMerge %279 None 
                                                      OpBranchConditional %277 %278 %281 
                                             %278 = OpLabel 
                                         f32 %280 = OpLoad %214 
                                                      OpStore %276 %280 
                                                      OpBranch %279 
                                             %281 = OpLabel 
                                         f32 %282 = OpLoad %214 
                                         f32 %283 = OpFNegate %282 
                                                      OpStore %276 %283 
                                                      OpBranch %279 
                                             %279 = OpLabel 
                                         f32 %284 = OpLoad %276 
                                                      OpStore %104 %284 
                                Private f32* %285 = OpAccessChain %9 %82 
                                         f32 %286 = OpLoad %285 
                                Private f32* %287 = OpAccessChain %9 %82 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %9 %82 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpExtInst %1 43 %289 %181 %180 
                                Private f32* %291 = OpAccessChain %9 %82 
                                                      OpStore %291 %290 
                                      bool_3 %293 = OpLoad %167 
                                        bool %294 = OpCompositeExtract %293 1 
                                                      OpSelectionMerge %296 None 
                                                      OpBranchConditional %294 %295 %298 
                                             %295 = OpLabel 
                                         f32 %297 = OpLoad %104 
                                                      OpStore %292 %297 
                                                      OpBranch %296 
                                             %298 = OpLabel 
                                Private f32* %299 = OpAccessChain %9 %82 
                                         f32 %300 = OpLoad %299 
                                                      OpStore %292 %300 
                                                      OpBranch %296 
                                             %296 = OpLabel 
                                         f32 %301 = OpLoad %292 
                                Private f32* %302 = OpAccessChain %9 %82 
                                                      OpStore %302 %301 
                                      bool_2 %304 = OpLoad %148 
                                        bool %305 = OpCompositeExtract %304 0 
                                                      OpSelectionMerge %307 None 
                                                      OpBranchConditional %305 %306 %310 
                                             %306 = OpLabel 
                                Private f32* %308 = OpAccessChain %9 %82 
                                         f32 %309 = OpLoad %308 
                                                      OpStore %303 %309 
                                                      OpBranch %307 
                                             %310 = OpLabel 
                                  Input f32* %311 = OpAccessChain %206 %82 
                                         f32 %312 = OpLoad %311 
                                                      OpStore %303 %312 
                                                      OpBranch %307 
                                             %307 = OpLabel 
                                         f32 %313 = OpLoad %303 
                                Private f32* %314 = OpAccessChain %9 %82 
                                                      OpStore %314 %313 
                                  Input f32* %315 = OpAccessChain %206 %74 
                                         f32 %316 = OpLoad %315 
                                Private f32* %317 = OpAccessChain %9 %74 
                                                      OpStore %317 %316 
                  read_only Texture2DSampled %323 = OpLoad %322 
                                       f32_4 %324 = OpLoad %9 
                                       f32_2 %325 = OpVectorShuffle %324 %324 0 1 
                                       f32_4 %326 = OpImageSampleImplicitLod %323 %325 
                                                      OpStore %318 %326 
                                       f32_2 %328 = OpLoad %73 
                                Uniform f32* %330 = OpAccessChain %19 %329 
                                         f32 %331 = OpLoad %330 
                                Uniform f32* %332 = OpAccessChain %19 %329 
                                         f32 %333 = OpLoad %332 
                                       f32_2 %334 = OpCompositeConstruct %331 %333 
                                         f32 %335 = OpCompositeExtract %334 0 
                                         f32 %336 = OpCompositeExtract %334 1 
                                       f32_2 %337 = OpCompositeConstruct %335 %336 
                                       f32_2 %338 = OpFMul %328 %337 
                                       f32_4 %339 = OpLoad %9 
                                       f32_2 %340 = OpVectorShuffle %339 %339 0 0 
                                       f32_2 %341 = OpFAdd %338 %340 
                                       f32_4 %342 = OpLoad %327 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 2 3 
                                                      OpStore %327 %343 
                                       f32_2 %344 = OpLoad %73 
                                Uniform f32* %345 = OpAccessChain %19 %329 
                                         f32 %346 = OpLoad %345 
                                Uniform f32* %347 = OpAccessChain %19 %329 
                                         f32 %348 = OpLoad %347 
                                       f32_2 %349 = OpCompositeConstruct %346 %348 
                                         f32 %350 = OpCompositeExtract %349 0 
                                         f32 %351 = OpCompositeExtract %349 1 
                                       f32_2 %352 = OpCompositeConstruct %350 %351 
                                       f32_2 %353 = OpFMul %344 %352 
                                       f32_2 %354 = OpLoad %206 
                                       f32_2 %355 = OpVectorShuffle %354 %354 1 1 
                                       f32_2 %356 = OpFAdd %353 %355 
                                       f32_4 %357 = OpLoad %327 
                                       f32_4 %358 = OpVectorShuffle %357 %356 0 1 4 5 
                                                      OpStore %327 %358 
                  read_only Texture2DSampled %359 = OpLoad %322 
                                       f32_4 %360 = OpLoad %327 
                                       f32_2 %361 = OpVectorShuffle %360 %360 0 2 
                                       f32_4 %362 = OpImageSampleImplicitLod %359 %361 
                                       f32_2 %363 = OpVectorShuffle %362 %362 0 3 
                                       f32_4 %364 = OpLoad %9 
                                       f32_4 %365 = OpVectorShuffle %364 %363 0 4 5 3 
                                                      OpStore %9 %365 
                  read_only Texture2DSampled %367 = OpLoad %322 
                                       f32_4 %368 = OpLoad %327 
                                       f32_2 %369 = OpVectorShuffle %368 %368 1 3 
                                       f32_4 %370 = OpImageSampleImplicitLod %367 %369 
                                       f32_2 %371 = OpVectorShuffle %370 %370 1 3 
                                       f32_4 %372 = OpLoad %366 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 1 2 5 
                                                      OpStore %366 %373 
                                Private f32* %374 = OpAccessChain %131 %82 
                                         f32 %375 = OpLoad %374 
                                Uniform f32* %376 = OpAccessChain %19 %329 
                                         f32 %377 = OpLoad %376 
                                         f32 %378 = OpFMul %375 %377 
                                Private f32* %379 = OpAccessChain %9 %82 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFAdd %378 %380 
                                Private f32* %382 = OpAccessChain %327 %82 
                                                      OpStore %382 %381 
                                Private f32* %383 = OpAccessChain %131 %82 
                                         f32 %384 = OpLoad %383 
                                Uniform f32* %385 = OpAccessChain %19 %329 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %384 %386 
                                  Input f32* %388 = OpAccessChain %206 %74 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFAdd %387 %389 
                                Private f32* %391 = OpAccessChain %327 %74 
                                                      OpStore %391 %390 
                  read_only Texture2DSampled %392 = OpLoad %322 
                                       f32_4 %393 = OpLoad %327 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                                       f32_4 %395 = OpImageSampleImplicitLod %392 %394 
                                       f32_2 %396 = OpVectorShuffle %395 %395 2 3 
                                       f32_4 %397 = OpLoad %9 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 1 2 5 
                                                      OpStore %9 %398 
                                Private f32* %402 = OpAccessChain %9 %401 
                                         f32 %403 = OpLoad %402 
                                Private f32* %405 = OpAccessChain %366 %404 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFAdd %403 %406 
                                Private f32* %408 = OpAccessChain %400 %82 
                                                      OpStore %408 %407 
                                Private f32* %409 = OpAccessChain %9 %404 
                                         f32 %410 = OpLoad %409 
                                Private f32* %411 = OpAccessChain %400 %82 
                                         f32 %412 = OpLoad %411 
                                         f32 %413 = OpFAdd %410 %412 
                                Private f32* %414 = OpAccessChain %400 %82 
                                                      OpStore %414 %413 
                                Private f32* %415 = OpAccessChain %400 %82 
                                         f32 %416 = OpLoad %415 
                                         f32 %418 = OpFMul %416 %417 
                                Private f32* %419 = OpAccessChain %400 %82 
                                                      OpStore %419 %418 
                                      bool_2 %422 = OpLoad %148 
                                        bool %423 = OpCompositeExtract %422 1 
                                                      OpSelectionMerge %425 None 
                                                      OpBranchConditional %423 %424 %428 
                                             %424 = OpLabel 
                                Private f32* %426 = OpAccessChain %366 %82 
                                         f32 %427 = OpLoad %426 
                                                      OpStore %421 %427 
                                                      OpBranch %425 
                                             %428 = OpLabel 
                                Private f32* %429 = OpAccessChain %318 %74 
                                         f32 %430 = OpLoad %429 
                                                      OpStore %421 %430 
                                                      OpBranch %425 
                                             %425 = OpLabel 
                                         f32 %431 = OpLoad %421 
                                Private f32* %432 = OpAccessChain %420 %74 
                                                      OpStore %432 %431 
                                      bool_2 %435 = OpLoad %148 
                                        bool %436 = OpCompositeExtract %435 1 
                                                      OpSelectionMerge %438 None 
                                                      OpBranchConditional %436 %437 %441 
                                             %437 = OpLabel 
                                       f32_4 %439 = OpLoad %9 
                                       f32_2 %440 = OpVectorShuffle %439 %439 1 0 
                                                      OpStore %434 %440 
                                                      OpBranch %438 
                                             %441 = OpLabel 
                                       f32_4 %442 = OpLoad %318 
                                       f32_2 %443 = OpVectorShuffle %442 %442 0 2 
                                                      OpStore %434 %443 
                                                      OpBranch %438 
                                             %438 = OpLabel 
                                       f32_2 %444 = OpLoad %434 
                                       f32_4 %445 = OpLoad %420 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 1 5 3 
                                                      OpStore %420 %446 
                                      bool_2 %448 = OpLoad %148 
                                        bool %449 = OpCompositeExtract %448 1 
                                                      OpSelectionMerge %451 None 
                                                      OpBranchConditional %449 %450 %454 
                                             %450 = OpLabel 
                                Private f32* %452 = OpAccessChain %400 %82 
                                         f32 %453 = OpLoad %452 
                                                      OpStore %447 %453 
                                                      OpBranch %451 
                                             %454 = OpLabel 
                                Private f32* %455 = OpAccessChain %318 %404 
                                         f32 %456 = OpLoad %455 
                                                      OpStore %447 %456 
                                                      OpBranch %451 
                                             %451 = OpLabel 
                                         f32 %457 = OpLoad %447 
                                Private f32* %458 = OpAccessChain %420 %404 
                                                      OpStore %458 %457 
                                       f32_4 %460 = OpLoad %420 
                                       f32_4 %463 = OpLoad %462 
                                       f32_4 %464 = OpFMul %460 %463 
                                                      OpStore %459 %464 
                                Private f32* %465 = OpAccessChain %420 %404 
                                         f32 %466 = OpLoad %465 
                                  Input f32* %467 = OpAccessChain %462 %404 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFMul %466 %468 
                                         f32 %471 = OpFAdd %469 %470 
                                Private f32* %472 = OpAccessChain %400 %82 
                                                      OpStore %472 %471 
                                Private f32* %473 = OpAccessChain %400 %82 
                                         f32 %474 = OpLoad %473 
                                        bool %475 = OpFOrdLessThan %474 %181 
                                      bool_2 %476 = OpLoad %148 
                                      bool_2 %477 = OpCompositeInsert %475 %476 0 
                                                      OpStore %148 %477 
                                      bool_2 %478 = OpLoad %148 
                                        bool %479 = OpCompositeExtract %478 0 
                                         i32 %480 = OpSelect %479 %28 %35 
                                         i32 %482 = OpIMul %480 %481 
                                        bool %483 = OpINotEqual %482 %35 
                                                      OpSelectionMerge %485 None 
                                                      OpBranchConditional %483 %484 %485 
                                             %484 = OpLabel 
                                                      OpKill
                                             %485 = OpLabel 
                                Private f32* %487 = OpAccessChain %420 %404 
                                         f32 %488 = OpLoad %487 
                                  Input f32* %489 = OpAccessChain %462 %404 
                                         f32 %490 = OpLoad %489 
                                         f32 %491 = OpFMul %488 %490 
                                Uniform f32* %493 = OpAccessChain %19 %492 
                                         f32 %494 = OpLoad %493 
                                         f32 %495 = OpFNegate %494 
                                         f32 %496 = OpFAdd %491 %495 
                                Private f32* %497 = OpAccessChain %400 %82 
                                                      OpStore %497 %496 
                                Private f32* %498 = OpAccessChain %400 %82 
                                         f32 %499 = OpLoad %498 
                                        bool %500 = OpFOrdLessThan %499 %181 
                                      bool_2 %501 = OpLoad %148 
                                      bool_2 %502 = OpCompositeInsert %500 %501 0 
                                                      OpStore %148 %502 
                                      bool_2 %503 = OpLoad %148 
                                        bool %504 = OpCompositeExtract %503 0 
                                         i32 %505 = OpSelect %504 %28 %35 
                                         i32 %506 = OpIMul %505 %481 
                                        bool %507 = OpINotEqual %506 %35 
                                                      OpSelectionMerge %509 None 
                                                      OpBranchConditional %507 %508 %509 
                                             %508 = OpLabel 
                                                      OpKill
                                             %509 = OpLabel 
                                       f32_3 %513 = OpLoad %512 
                                       f32_3 %514 = OpVectorShuffle %513 %513 1 1 1 
                              Uniform f32_4* %516 = OpAccessChain %19 %515 %28 
                                       f32_4 %517 = OpLoad %516 
                                       f32_3 %518 = OpVectorShuffle %517 %517 0 1 2 
                                       f32_3 %519 = OpFMul %514 %518 
                                       f32_4 %520 = OpLoad %109 
                                       f32_4 %521 = OpVectorShuffle %520 %519 4 5 6 3 
                                                      OpStore %109 %521 
                              Uniform f32_4* %522 = OpAccessChain %19 %515 %35 
                                       f32_4 %523 = OpLoad %522 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                       f32_3 %525 = OpLoad %512 
                                       f32_3 %526 = OpVectorShuffle %525 %525 0 0 0 
                                       f32_3 %527 = OpFMul %524 %526 
                                       f32_4 %528 = OpLoad %109 
                                       f32_3 %529 = OpVectorShuffle %528 %528 0 1 2 
                                       f32_3 %530 = OpFAdd %527 %529 
                                       f32_4 %531 = OpLoad %109 
                                       f32_4 %532 = OpVectorShuffle %531 %530 4 5 6 3 
                                                      OpStore %109 %532 
                              Uniform f32_4* %533 = OpAccessChain %19 %515 %21 
                                       f32_4 %534 = OpLoad %533 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 1 2 
                                       f32_3 %536 = OpLoad %512 
                                       f32_3 %537 = OpVectorShuffle %536 %536 2 2 2 
                                       f32_3 %538 = OpFMul %535 %537 
                                       f32_4 %539 = OpLoad %109 
                                       f32_3 %540 = OpVectorShuffle %539 %539 0 1 2 
                                       f32_3 %541 = OpFAdd %538 %540 
                                       f32_4 %542 = OpLoad %109 
                                       f32_4 %543 = OpVectorShuffle %542 %541 4 5 6 3 
                                                      OpStore %109 %543 
                                       f32_4 %544 = OpLoad %109 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                              Uniform f32_4* %546 = OpAccessChain %19 %515 %22 
                                       f32_4 %547 = OpLoad %546 
                                       f32_3 %548 = OpVectorShuffle %547 %547 0 1 2 
                                       f32_3 %549 = OpFAdd %545 %548 
                                       f32_4 %550 = OpLoad %109 
                                       f32_4 %551 = OpVectorShuffle %550 %549 4 5 6 3 
                                                      OpStore %109 %551 
                                Uniform f32* %554 = OpAccessChain %19 %553 %82 
                                         f32 %555 = OpLoad %554 
                                        bool %556 = OpFOrdEqual %555 %180 
                                                      OpStore %552 %556 
                                                      OpSelectionMerge %559 None 
                                                      OpBranchConditional %557 %558 %559 
                                             %558 = OpLabel 
                                        bool %560 = OpLoad %552 
                                                      OpSelectionMerge %562 None 
                                                      OpBranchConditional %560 %561 %562 
                                             %561 = OpLabel 
                                                      OpBranch %562 
                                             %562 = OpLabel 
                                                      OpBranch %559 
                                             %559 = OpLabel 
                                                      OpSelectionMerge %565 None 
                                                      OpBranchConditional %563 %564 %664 
                                             %564 = OpLabel 
                                Uniform f32* %566 = OpAccessChain %19 %553 %74 
                                         f32 %567 = OpLoad %566 
                                        bool %568 = OpFOrdEqual %567 %180 
                                                      OpStore %552 %568 
                                       f32_3 %569 = OpLoad %512 
                                       f32_3 %570 = OpVectorShuffle %569 %569 1 1 1 
                              Uniform f32_4* %572 = OpAccessChain %19 %571 %28 
                                       f32_4 %573 = OpLoad %572 
                                       f32_3 %574 = OpVectorShuffle %573 %573 0 1 2 
                                       f32_3 %575 = OpFMul %570 %574 
                                       f32_4 %576 = OpLoad %318 
                                       f32_4 %577 = OpVectorShuffle %576 %575 4 5 6 3 
                                                      OpStore %318 %577 
                              Uniform f32_4* %578 = OpAccessChain %19 %571 %35 
                                       f32_4 %579 = OpLoad %578 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                                       f32_3 %581 = OpLoad %512 
                                       f32_3 %582 = OpVectorShuffle %581 %581 0 0 0 
                                       f32_3 %583 = OpFMul %580 %582 
                                       f32_4 %584 = OpLoad %318 
                                       f32_3 %585 = OpVectorShuffle %584 %584 0 1 2 
                                       f32_3 %586 = OpFAdd %583 %585 
                                       f32_4 %587 = OpLoad %318 
                                       f32_4 %588 = OpVectorShuffle %587 %586 4 5 6 3 
                                                      OpStore %318 %588 
                              Uniform f32_4* %589 = OpAccessChain %19 %571 %21 
                                       f32_4 %590 = OpLoad %589 
                                       f32_3 %591 = OpVectorShuffle %590 %590 0 1 2 
                                       f32_3 %592 = OpLoad %512 
                                       f32_3 %593 = OpVectorShuffle %592 %592 2 2 2 
                                       f32_3 %594 = OpFMul %591 %593 
                                       f32_4 %595 = OpLoad %318 
                                       f32_3 %596 = OpVectorShuffle %595 %595 0 1 2 
                                       f32_3 %597 = OpFAdd %594 %596 
                                       f32_4 %598 = OpLoad %318 
                                       f32_4 %599 = OpVectorShuffle %598 %597 4 5 6 3 
                                                      OpStore %318 %599 
                                       f32_4 %600 = OpLoad %318 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                              Uniform f32_4* %602 = OpAccessChain %19 %571 %22 
                                       f32_4 %603 = OpLoad %602 
                                       f32_3 %604 = OpVectorShuffle %603 %603 0 1 2 
                                       f32_3 %605 = OpFAdd %601 %604 
                                       f32_4 %606 = OpLoad %318 
                                       f32_4 %607 = OpVectorShuffle %606 %605 4 5 6 3 
                                                      OpStore %318 %607 
                                        bool %610 = OpLoad %552 
                                                      OpSelectionMerge %612 None 
                                                      OpBranchConditional %610 %611 %615 
                                             %611 = OpLabel 
                                       f32_4 %613 = OpLoad %318 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                                      OpStore %609 %614 
                                                      OpBranch %612 
                                             %615 = OpLabel 
                                       f32_3 %616 = OpLoad %512 
                                                      OpStore %609 %616 
                                                      OpBranch %612 
                                             %612 = OpLabel 
                                       f32_3 %617 = OpLoad %609 
                                       f32_4 %618 = OpLoad %318 
                                       f32_4 %619 = OpVectorShuffle %618 %617 4 5 6 3 
                                                      OpStore %318 %619 
                                       f32_4 %620 = OpLoad %318 
                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
                              Uniform f32_3* %624 = OpAccessChain %19 %622 
                                       f32_3 %625 = OpLoad %624 
                                       f32_3 %626 = OpFNegate %625 
                                       f32_3 %627 = OpFAdd %621 %626 
                                       f32_4 %628 = OpLoad %318 
                                       f32_4 %629 = OpVectorShuffle %628 %627 4 5 6 3 
                                                      OpStore %318 %629 
                                       f32_4 %630 = OpLoad %318 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
                              Uniform f32_3* %633 = OpAccessChain %19 %632 
                                       f32_3 %634 = OpLoad %633 
                                       f32_3 %635 = OpFMul %631 %634 
                                       f32_4 %636 = OpLoad %318 
                                       f32_4 %637 = OpVectorShuffle %636 %635 0 4 5 6 
                                                      OpStore %318 %637 
                                Private f32* %638 = OpAccessChain %318 %74 
                                         f32 %639 = OpLoad %638 
                                         f32 %641 = OpFMul %639 %640 
                                         f32 %643 = OpFAdd %641 %642 
                                                      OpStore %214 %643 
                                Uniform f32* %645 = OpAccessChain %19 %553 %401 
                                         f32 %646 = OpLoad %645 
                                         f32 %648 = OpFMul %646 %647 
                                         f32 %649 = OpFAdd %648 %642 
                                                      OpStore %644 %649 
                                         f32 %650 = OpLoad %214 
                                         f32 %651 = OpLoad %644 
                                         f32 %652 = OpExtInst %1 40 %650 %651 
                                Private f32* %653 = OpAccessChain %318 %82 
                                                      OpStore %653 %652 
                  read_only Texture3DSampled %658 = OpLoad %657 
                                       f32_4 %659 = OpLoad %318 
                                       f32_3 %660 = OpVectorShuffle %659 %659 0 2 3 
                                       f32_4 %661 = OpImageSampleImplicitLod %658 %660 
                                                      OpStore %318 %661 
                                       f32_4 %663 = OpLoad %318 
                                                      OpStore %662 %663 
                                                      OpBranch %565 
                                             %664 = OpLabel 
                                Private f32* %665 = OpAccessChain %662 %82 
                                                      OpStore %665 %180 
                                Private f32* %666 = OpAccessChain %662 %74 
                                                      OpStore %666 %180 
                                Private f32* %667 = OpAccessChain %662 %401 
                                                      OpStore %667 %180 
                                Private f32* %668 = OpAccessChain %662 %404 
                                                      OpStore %668 %180 
                                                      OpBranch %565 
                                             %565 = OpLabel 
                                       f32_4 %669 = OpLoad %662 
                              Uniform f32_4* %670 = OpAccessChain %19 %28 
                                       f32_4 %671 = OpLoad %670 
                                         f32 %672 = OpDot %669 %671 
                                Private f32* %673 = OpAccessChain %400 %82 
                                                      OpStore %673 %672 
                                Private f32* %674 = OpAccessChain %400 %82 
                                         f32 %675 = OpLoad %674 
                                         f32 %676 = OpExtInst %1 43 %675 %181 %180 
                                Private f32* %677 = OpAccessChain %400 %82 
                                                      OpStore %677 %676 
                                       f32_4 %678 = OpLoad %109 
                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
                                       f32_4 %680 = OpLoad %109 
                                       f32_3 %681 = OpVectorShuffle %680 %680 0 1 2 
                                         f32 %682 = OpDot %679 %681 
                                                      OpStore %214 %682 
                  read_only Texture2DSampled %684 = OpLoad %683 
                                         f32 %685 = OpLoad %214 
                                       f32_2 %686 = OpCompositeConstruct %685 %685 
                                       f32_4 %687 = OpImageSampleImplicitLod %684 %686 
                                         f32 %688 = OpCompositeExtract %687 3 
                                                      OpStore %214 %688 
                read_only TextureCubeSampled %693 = OpLoad %692 
                                       f32_4 %694 = OpLoad %109 
                                       f32_3 %695 = OpVectorShuffle %694 %694 0 1 2 
                                       f32_4 %696 = OpImageSampleImplicitLod %693 %695 
                                         f32 %697 = OpCompositeExtract %696 3 
                                Private f32* %698 = OpAccessChain %109 %82 
                                                      OpStore %698 %697 
                                Private f32* %699 = OpAccessChain %109 %82 
                                         f32 %700 = OpLoad %699 
                                         f32 %701 = OpLoad %214 
                                         f32 %702 = OpFMul %700 %701 
                                Private f32* %703 = OpAccessChain %109 %82 
                                                      OpStore %703 %702 
                                Private f32* %704 = OpAccessChain %400 %82 
                                         f32 %705 = OpLoad %704 
                                Private f32* %706 = OpAccessChain %109 %82 
                                         f32 %707 = OpLoad %706 
                                         f32 %708 = OpFMul %705 %707 
                                Private f32* %709 = OpAccessChain %109 %82 
                                                      OpStore %709 %708 
                                       f32_4 %710 = OpLoad %459 
                                       f32_3 %711 = OpVectorShuffle %710 %710 0 1 2 
                              Uniform f32_4* %713 = OpAccessChain %19 %712 
                                       f32_4 %714 = OpLoad %713 
                                       f32_3 %715 = OpVectorShuffle %714 %714 0 1 2 
                                       f32_3 %716 = OpFMul %711 %715 
                                                      OpStore %400 %716 
                                       f32_4 %719 = OpLoad %109 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 0 0 
                                       f32_3 %721 = OpLoad %400 
                                       f32_3 %722 = OpFMul %720 %721 
                                       f32_4 %723 = OpLoad %718 
                                       f32_4 %724 = OpVectorShuffle %723 %722 4 5 6 3 
                                                      OpStore %718 %724 
                                Private f32* %725 = OpAccessChain %459 %404 
                                         f32 %726 = OpLoad %725 
                                 Output f32* %728 = OpAccessChain %718 %404 
                                                      OpStore %728 %726 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat10;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat3 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat3 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _GlitchInterval;
uniform 	float _DispIntensity;
uniform 	float _DispProbability;
uniform 	float _ColorIntensity;
uniform 	float _ColorProbability;
uniform 	float _DispGlitchOn;
uniform 	float _ColorGlitchOn;
uniform 	float _WrapDispCoords;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat16_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat10_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bool u_xlatb10;
vec2 u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].ww + u_xlat0.xy;
    u_xlat10.x = _Time.y / _GlitchInterval;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat5.x = u_xlat0.x + 2.79299998;
    u_xlat1 = u_xlat0.xxxx * vec4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
    u_xlat1 = sin(u_xlat1);
    u_xlat1 = u_xlat1 * vec4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
    u_xlat1 = fract(u_xlat1);
    u_xlat10.xy = u_xlat1.zw + vec2(-0.5, -0.5);
    u_xlat11.xy = u_xlat5.xx * vec2(-91.2228012, 91.2228012);
    u_xlat11.xy = sin(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy * vec2(43758.5469, 43758.5469);
    u_xlat11.xy = fract(u_xlat11.xy);
    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
    u_xlatb1.xy = lessThan(u_xlat1.xyxx, vec4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
    u_xlatb2.xyz = equal(vec4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), vec4(1.0, 1.0, 1.0, 0.0)).xyz;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
    u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
    u_xlat5.x = vs_TEXCOORD0.y / u_xlat5.x;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * 78.2330017;
    u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 43758.5469;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat0.x = u_xlat0.x * _DispIntensity + vs_TEXCOORD0.x;
    u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat16 = fract(abs(u_xlat0.x));
    u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : vs_TEXCOORD0.x;
    u_xlat0.y = vs_TEXCOORD0.y;
    u_xlat2 = texture(_MainTex, u_xlat0.xy);
    u_xlat3.xy = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
    u_xlat3.zw = u_xlat10.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + vs_TEXCOORD0.yy;
    u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
    u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
    u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
    u_xlat0.y = u_xlat11.x * _ColorIntensity + vs_TEXCOORD0.y;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
    u_xlat1.x = u_xlat0.w + u_xlat16_1;
    u_xlat0.w = u_xlat1.x * 0.333333343;
    u_xlat0.x = u_xlat10_4.x;
    u_xlat0.y = u_xlat10_3.y;
    u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
    u_xlat1 = u_xlat0 * vs_COLOR0;
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + -0.100000001;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb10 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat15 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat15, u_xlat10.x);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat10.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat10_2 = texture(_LightTexture0, u_xlat0.xy);
    u_xlat0.x = u_xlat10.x * u_xlat10_2.w;
    u_xlat5.xyz = u_xlat1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat5.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %116 %128 %129 %143 %172 %178 %181 %183 %184 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %143 Location 143 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %181 Location 181 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate %185 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 3 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                               Private f32_4* %93 = OpVariable Private 
                                             %113 = OpTypeArray %6 %48 
                                             %114 = OpTypeStruct %7 %6 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %7 
                                             %126 = OpTypeVector %6 2 
                                             %127 = OpTypePointer Output %126 
                               Output f32_2* %128 = OpVariable Output 
                                Input f32_4* %129 = OpVariable Input 
                                         i32 %132 = OpConstant 5 
                                             %141 = OpTypeVector %6 3 
                                             %142 = OpTypePointer Input %141 
                                Input f32_3* %143 = OpVariable Input 
                                         u32 %161 = OpConstant 2 
                                Private f32* %163 = OpVariable Private 
                                             %171 = OpTypePointer Output %141 
                               Output f32_3* %172 = OpVariable Output 
                               Output f32_3* %178 = OpVariable Output 
                               Output f32_4* %181 = OpVariable Output 
                               Output f32_4* %183 = OpVariable Output 
                                Input f32_4* %184 = OpVariable Input 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %30 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %86 = OpAccessChain %17 %60 %30 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %9 %92 
                                        f32_4 %94 = OpLoad %81 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                               Uniform f32_4* %96 = OpAccessChain %17 %73 %61 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpFMul %95 %97 
                                                      OpStore %93 %98 
                               Uniform f32_4* %99 = OpAccessChain %17 %73 %60 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %101 0 0 0 0 
                                       f32_4 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %93 
                                       f32_4 %105 = OpFAdd %103 %104 
                                                      OpStore %93 %105 
                              Uniform f32_4* %106 = OpAccessChain %17 %73 %73 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %81 
                                       f32_4 %109 = OpVectorShuffle %108 %108 2 2 2 2 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %93 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %93 %112 
                              Uniform f32_4* %117 = OpAccessChain %17 %73 %30 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %81 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %93 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %60 
                                                      OpStore %125 %123 
                                       f32_4 %130 = OpLoad %129 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %133 = OpAccessChain %17 %132 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFMul %131 %135 
                              Uniform f32_4* %137 = OpAccessChain %17 %132 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 2 3 
                                       f32_2 %140 = OpFAdd %136 %139 
                                                      OpStore %128 %140 
                                       f32_3 %144 = OpLoad %143 
                              Uniform f32_4* %145 = OpAccessChain %17 %61 %60 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %144 %147 
                                Private f32* %149 = OpAccessChain %81 %25 
                                                      OpStore %149 %148 
                                       f32_3 %150 = OpLoad %143 
                              Uniform f32_4* %151 = OpAccessChain %17 %61 %61 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %150 %153 
                                Private f32* %155 = OpAccessChain %81 %48 
                                                      OpStore %155 %154 
                                       f32_3 %156 = OpLoad %143 
                              Uniform f32_4* %157 = OpAccessChain %17 %61 %73 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %156 %159 
                                Private f32* %162 = OpAccessChain %81 %161 
                                                      OpStore %162 %160 
                                       f32_4 %164 = OpLoad %81 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_4 %166 = OpLoad %81 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %165 %167 
                                                      OpStore %163 %168 
                                         f32 %169 = OpLoad %163 
                                         f32 %170 = OpExtInst %1 32 %169 
                                                      OpStore %163 %170 
                                         f32 %173 = OpLoad %163 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_4 %175 = OpLoad %81 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFMul %174 %176 
                                                      OpStore %172 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                                      OpStore %178 %180 
                                       f32_4 %182 = OpLoad %9 
                                                      OpStore %181 %182 
                                       f32_4 %185 = OpLoad %184 
                                                      OpStore %183 %185 
                                 Output f32* %187 = OpAccessChain %116 %60 %48 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %116 %60 %48 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 712
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %206 %462 %512 %700 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 RelaxedPrecision 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 RelaxedPrecision 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpMemberDecorate %17 13 Offset 17 
                                                      OpMemberDecorate %17 14 Offset 17 
                                                      OpMemberDecorate %17 15 Offset 17 
                                                      OpMemberDecorate %17 16 Offset 17 
                                                      OpMemberDecorate %17 17 Offset 17 
                                                      OpMemberDecorate %17 18 RelaxedPrecision 
                                                      OpMemberDecorate %17 18 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %206 Location 206 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %322 DescriptorSet 322 
                                                      OpDecorate %322 Binding 322 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %462 Location 462 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %512 Location 512 
                                                      OpDecorate %563 SpecId 563 
                                                      OpDecorate %658 DescriptorSet 658 
                                                      OpDecorate %658 Binding 658 
                                                      OpDecorate %663 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %673 RelaxedPrecision 
                                                      OpDecorate %676 RelaxedPrecision 
                                                      OpDecorate %677 RelaxedPrecision 
                                                      OpDecorate %679 DescriptorSet 679 
                                                      OpDecorate %679 Binding 679 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %692 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %696 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %700 Location 700 
                                                      OpDecorate %703 RelaxedPrecision 
                                                      OpDecorate %708 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeArray %7 %11 
                                              %17 = OpTypeStruct %7 %7 %12 %13 %7 %14 %15 %15 %7 %16 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 2 
                                          i32 %22 = OpConstant 3 
                                              %23 = OpTypeVector %6 2 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 1 
                                          i32 %35 = OpConstant 0 
                                              %72 = OpTypePointer Private %23 
                               Private f32_2* %73 = OpVariable Private 
                                          u32 %74 = OpConstant 1 
                                              %75 = OpTypePointer Uniform %6 
                                          i32 %78 = OpConstant 10 
                                          u32 %82 = OpConstant 0 
                                              %83 = OpTypePointer Private %6 
                                Private f32* %104 = OpVariable Private 
                                         f32 %107 = OpConstant 3.674022E-40 
                              Private f32_4* %109 = OpVariable Private 
                                         f32 %112 = OpConstant 3.674022E-40 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %114 = OpConstant 3.674022E-40 
                                         f32 %115 = OpConstant 3.674022E-40 
                                       f32_4 %116 = OpConstantComposite %112 %113 %114 %115 
                                         f32 %121 = OpConstant 3.674022E-40 
                                       f32_4 %122 = OpConstantComposite %121 %121 %121 %121 
                                         f32 %128 = OpConstant 3.674022E-40 
                                       f32_2 %129 = OpConstantComposite %128 %128 
                              Private f32_2* %131 = OpVariable Private 
                                       f32_2 %134 = OpConstantComposite %115 %113 
                                       f32_2 %139 = OpConstantComposite %121 %121 
                                             %145 = OpTypeBool 
                                             %146 = OpTypeVector %145 2 
                                             %147 = OpTypePointer Private %146 
                             Private bool_2* %148 = OpVariable Private 
                                         i32 %151 = OpConstant 12 
                                         i32 %154 = OpConstant 14 
                                             %162 = OpTypeVector %145 4 
                                             %165 = OpTypeVector %145 3 
                                             %166 = OpTypePointer Private %165 
                             Private bool_3* %167 = OpVariable Private 
                                         i32 %168 = OpConstant 15 
                                         i32 %171 = OpConstant 17 
                                         i32 %174 = OpConstant 16 
                                         f32 %180 = OpConstant 3.674022E-40 
                                         f32 %181 = OpConstant 3.674022E-40 
                                       f32_4 %182 = OpConstantComposite %180 %180 %180 %181 
                                         f32 %201 = OpConstant 3.674022E-40 
                                         f32 %203 = OpConstant 3.674022E-40 
                                             %205 = OpTypePointer Input %23 
                                Input f32_2* %206 = OpVariable Input 
                                             %207 = OpTypePointer Input %6 
                                Private f32* %214 = OpVariable Private 
                                         f32 %227 = OpConstant 3.674022E-40 
                                         f32 %231 = OpConstant 3.674022E-40 
                                         i32 %255 = OpConstant 11 
                                             %263 = OpTypePointer Private %145 
                               Private bool* %264 = OpVariable Private 
                                             %275 = OpTypePointer Function %6 
                              Private f32_4* %318 = OpVariable Private 
                                             %319 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %320 = OpTypeSampledImage %319 
                                             %321 = OpTypePointer UniformConstant %320 
 UniformConstant read_only Texture2DSampled* %322 = OpVariable UniformConstant 
                              Private f32_4* %327 = OpVariable Private 
                                         i32 %329 = OpConstant 13 
                              Private f32_4* %366 = OpVariable Private 
                                             %399 = OpTypePointer Private %15 
                              Private f32_3* %400 = OpVariable Private 
                                         u32 %401 = OpConstant 2 
                                         u32 %404 = OpConstant 3 
                                         f32 %417 = OpConstant 3.674022E-40 
                              Private f32_4* %420 = OpVariable Private 
                                             %433 = OpTypePointer Function %23 
                              Private f32_4* %459 = OpVariable Private 
                                             %461 = OpTypePointer Input %7 
                                Input f32_4* %462 = OpVariable Input 
                                         f32 %470 = OpConstant 3.674022E-40 
                                         i32 %481 = OpConstant -1 
                                         i32 %492 = OpConstant 18 
                                             %511 = OpTypePointer Input %15 
                                Input f32_3* %512 = OpVariable Input 
                                         i32 %515 = OpConstant 9 
                               Private bool* %552 = OpVariable Private 
                                         i32 %553 = OpConstant 4 
                                        bool %557 = OpConstantFalse 
                                        bool %563 = OpSpecConstantFalse 
                                         i32 %571 = OpConstant 5 
                                             %608 = OpTypePointer Function %15 
                                         i32 %622 = OpConstant 7 
                                             %623 = OpTypePointer Uniform %15 
                                         i32 %632 = OpConstant 6 
                                         f32 %640 = OpConstant 3.674022E-40 
                                         f32 %642 = OpConstant 3.674022E-40 
                                         f32 %647 = OpConstant 3.674022E-40 
                                             %655 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %656 = OpTypeSampledImage %655 
                                             %657 = OpTypePointer UniformConstant %656 
 UniformConstant read_only Texture3DSampled* %658 = OpVariable UniformConstant 
                              Private f32_4* %663 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %679 = OpVariable UniformConstant 
                                         i32 %694 = OpConstant 8 
                                             %699 = OpTypePointer Output %7 
                               Output f32_4* %700 = OpVariable Output 
                                             %709 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %276 = OpVariable Function 
                               Function f32* %292 = OpVariable Function 
                               Function f32* %303 = OpVariable Function 
                               Function f32* %421 = OpVariable Function 
                             Function f32_2* %434 = OpVariable Function 
                               Function f32* %447 = OpVariable Function 
                             Function f32_3* %609 = OpVariable Function 
                               Uniform f32_4* %25 = OpAccessChain %19 %21 %22 
                                        f32_4 %26 = OpLoad %25 
                                        f32_2 %27 = OpVectorShuffle %26 %26 1 1 
                               Uniform f32_4* %29 = OpAccessChain %19 %22 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                                        f32_2 %32 = OpFMul %27 %31 
                                        f32_4 %33 = OpLoad %9 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 2 3 
                                                      OpStore %9 %34 
                               Uniform f32_4* %36 = OpAccessChain %19 %22 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                               Uniform f32_4* %39 = OpAccessChain %19 %21 %22 
                                        f32_4 %40 = OpLoad %39 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 0 
                                        f32_2 %42 = OpFMul %38 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_2 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 2 3 
                                                      OpStore %9 %47 
                               Uniform f32_4* %48 = OpAccessChain %19 %22 %21 
                                        f32_4 %49 = OpLoad %48 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                               Uniform f32_4* %51 = OpAccessChain %19 %21 %22 
                                        f32_4 %52 = OpLoad %51 
                                        f32_2 %53 = OpVectorShuffle %52 %52 2 2 
                                        f32_2 %54 = OpFMul %50 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                                        f32_2 %57 = OpFAdd %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %57 4 5 2 3 
                                                      OpStore %9 %59 
                               Uniform f32_4* %60 = OpAccessChain %19 %22 %22 
                                        f32_4 %61 = OpLoad %60 
                                        f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                               Uniform f32_4* %63 = OpAccessChain %19 %21 %22 
                                        f32_4 %64 = OpLoad %63 
                                        f32_2 %65 = OpVectorShuffle %64 %64 3 3 
                                        f32_2 %66 = OpFMul %62 %65 
                                        f32_4 %67 = OpLoad %9 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_2 %69 = OpFAdd %66 %68 
                                        f32_4 %70 = OpLoad %9 
                                        f32_4 %71 = OpVectorShuffle %70 %69 4 5 2 3 
                                                      OpStore %9 %71 
                                 Uniform f32* %76 = OpAccessChain %19 %35 %74 
                                          f32 %77 = OpLoad %76 
                                 Uniform f32* %79 = OpAccessChain %19 %78 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFDiv %77 %80 
                                 Private f32* %84 = OpAccessChain %73 %82 
                                                      OpStore %84 %81 
                                 Private f32* %85 = OpAccessChain %73 %82 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpExtInst %1 8 %86 
                                 Private f32* %88 = OpAccessChain %73 %82 
                                                      OpStore %88 %87 
                                 Private f32* %89 = OpAccessChain %73 %82 
                                          f32 %90 = OpLoad %89 
                                 Uniform f32* %91 = OpAccessChain %19 %78 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFMul %90 %92 
                                 Private f32* %94 = OpAccessChain %9 %82 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %82 
                                                      OpStore %97 %96 
                                 Private f32* %98 = OpAccessChain %9 %74 
                                          f32 %99 = OpLoad %98 
                                Private f32* %100 = OpAccessChain %9 %82 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFAdd %99 %101 
                                Private f32* %103 = OpAccessChain %9 %82 
                                                      OpStore %103 %102 
                                Private f32* %105 = OpAccessChain %9 %82 
                                         f32 %106 = OpLoad %105 
                                         f32 %108 = OpFAdd %106 %107 
                                                      OpStore %104 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_4 %111 = OpVectorShuffle %110 %110 0 0 0 0 
                                       f32_4 %117 = OpFMul %111 %116 
                                                      OpStore %109 %117 
                                       f32_4 %118 = OpLoad %109 
                                       f32_4 %119 = OpExtInst %1 13 %118 
                                                      OpStore %109 %119 
                                       f32_4 %120 = OpLoad %109 
                                       f32_4 %123 = OpFMul %120 %122 
                                                      OpStore %109 %123 
                                       f32_4 %124 = OpLoad %109 
                                       f32_4 %125 = OpExtInst %1 10 %124 
                                                      OpStore %109 %125 
                                       f32_4 %126 = OpLoad %109 
                                       f32_2 %127 = OpVectorShuffle %126 %126 2 3 
                                       f32_2 %130 = OpFAdd %127 %129 
                                                      OpStore %73 %130 
                                         f32 %132 = OpLoad %104 
                                       f32_2 %133 = OpCompositeConstruct %132 %132 
                                       f32_2 %135 = OpFMul %133 %134 
                                                      OpStore %131 %135 
                                       f32_2 %136 = OpLoad %131 
                                       f32_2 %137 = OpExtInst %1 13 %136 
                                                      OpStore %131 %137 
                                       f32_2 %138 = OpLoad %131 
                                       f32_2 %140 = OpFMul %138 %139 
                                                      OpStore %131 %140 
                                       f32_2 %141 = OpLoad %131 
                                       f32_2 %142 = OpExtInst %1 10 %141 
                                                      OpStore %131 %142 
                                       f32_2 %143 = OpLoad %131 
                                       f32_2 %144 = OpFAdd %143 %129 
                                                      OpStore %131 %144 
                                       f32_4 %149 = OpLoad %109 
                                       f32_4 %150 = OpVectorShuffle %149 %149 0 1 0 0 
                                Uniform f32* %152 = OpAccessChain %19 %151 
                                         f32 %153 = OpLoad %152 
                                Uniform f32* %155 = OpAccessChain %19 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %157 = OpAccessChain %19 %151 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %159 = OpAccessChain %19 %151 
                                         f32 %160 = OpLoad %159 
                                       f32_4 %161 = OpCompositeConstruct %153 %156 %158 %160 
                                      bool_4 %163 = OpFOrdLessThan %150 %161 
                                      bool_2 %164 = OpVectorShuffle %163 %163 0 1 
                                                      OpStore %148 %164 
                                Uniform f32* %169 = OpAccessChain %19 %168 
                                         f32 %170 = OpLoad %169 
                                Uniform f32* %172 = OpAccessChain %19 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %19 %174 
                                         f32 %176 = OpLoad %175 
                                Uniform f32* %177 = OpAccessChain %19 %168 
                                         f32 %178 = OpLoad %177 
                                       f32_4 %179 = OpCompositeConstruct %170 %173 %176 %178 
                                      bool_4 %183 = OpFOrdEqual %179 %182 
                                      bool_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                                      OpStore %167 %184 
                                      bool_2 %185 = OpLoad %148 
                                        bool %186 = OpCompositeExtract %185 0 
                                      bool_3 %187 = OpLoad %167 
                                        bool %188 = OpCompositeExtract %187 0 
                                        bool %189 = OpLogicalAnd %186 %188 
                                      bool_2 %190 = OpLoad %148 
                                      bool_2 %191 = OpCompositeInsert %189 %190 0 
                                                      OpStore %148 %191 
                                      bool_2 %192 = OpLoad %148 
                                        bool %193 = OpCompositeExtract %192 1 
                                      bool_3 %194 = OpLoad %167 
                                        bool %195 = OpCompositeExtract %194 2 
                                        bool %196 = OpLogicalAnd %193 %195 
                                      bool_2 %197 = OpLoad %148 
                                      bool_2 %198 = OpCompositeInsert %196 %197 1 
                                                      OpStore %148 %198 
                                Private f32* %199 = OpAccessChain %131 %74 
                                         f32 %200 = OpLoad %199 
                                         f32 %202 = OpFMul %200 %201 
                                         f32 %204 = OpFAdd %202 %203 
                                                      OpStore %104 %204 
                                  Input f32* %208 = OpAccessChain %206 %74 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpLoad %104 
                                         f32 %211 = OpFDiv %209 %210 
                                                      OpStore %104 %211 
                                         f32 %212 = OpLoad %104 
                                         f32 %213 = OpExtInst %1 8 %212 
                                                      OpStore %104 %213 
                                Private f32* %215 = OpAccessChain %9 %82 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpLoad %104 
                                         f32 %219 = OpFAdd %217 %218 
                                                      OpStore %214 %219 
                                Private f32* %220 = OpAccessChain %9 %82 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpLoad %104 
                                         f32 %223 = OpFAdd %221 %222 
                                Private f32* %224 = OpAccessChain %9 %82 
                                                      OpStore %224 %223 
                                Private f32* %225 = OpAccessChain %9 %82 
                                         f32 %226 = OpLoad %225 
                                         f32 %228 = OpFMul %226 %227 
                                Private f32* %229 = OpAccessChain %9 %82 
                                                      OpStore %229 %228 
                                         f32 %230 = OpLoad %214 
                                         f32 %232 = OpFMul %230 %231 
                                Private f32* %233 = OpAccessChain %9 %82 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFAdd %232 %234 
                                Private f32* %236 = OpAccessChain %9 %82 
                                                      OpStore %236 %235 
                                Private f32* %237 = OpAccessChain %9 %82 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpExtInst %1 13 %238 
                                Private f32* %240 = OpAccessChain %9 %82 
                                                      OpStore %240 %239 
                                Private f32* %241 = OpAccessChain %9 %82 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFMul %242 %121 
                                Private f32* %244 = OpAccessChain %9 %82 
                                                      OpStore %244 %243 
                                Private f32* %245 = OpAccessChain %9 %82 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpExtInst %1 10 %246 
                                Private f32* %248 = OpAccessChain %9 %82 
                                                      OpStore %248 %247 
                                Private f32* %249 = OpAccessChain %9 %82 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFAdd %250 %128 
                                Private f32* %252 = OpAccessChain %9 %82 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %9 %82 
                                         f32 %254 = OpLoad %253 
                                Uniform f32* %256 = OpAccessChain %19 %255 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %254 %257 
                                  Input f32* %259 = OpAccessChain %206 %82 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFAdd %258 %260 
                                Private f32* %262 = OpAccessChain %9 %82 
                                                      OpStore %262 %261 
                                Private f32* %265 = OpAccessChain %9 %82 
                                         f32 %266 = OpLoad %265 
                                Private f32* %267 = OpAccessChain %9 %82 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                        bool %270 = OpFOrdGreaterThanEqual %266 %269 
                                                      OpStore %264 %270 
                                Private f32* %271 = OpAccessChain %9 %82 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 4 %272 
                                         f32 %274 = OpExtInst %1 10 %273 
                                                      OpStore %214 %274 
                                        bool %277 = OpLoad %264 
                                                      OpSelectionMerge %279 None 
                                                      OpBranchConditional %277 %278 %281 
                                             %278 = OpLabel 
                                         f32 %280 = OpLoad %214 
                                                      OpStore %276 %280 
                                                      OpBranch %279 
                                             %281 = OpLabel 
                                         f32 %282 = OpLoad %214 
                                         f32 %283 = OpFNegate %282 
                                                      OpStore %276 %283 
                                                      OpBranch %279 
                                             %279 = OpLabel 
                                         f32 %284 = OpLoad %276 
                                                      OpStore %104 %284 
                                Private f32* %285 = OpAccessChain %9 %82 
                                         f32 %286 = OpLoad %285 
                                Private f32* %287 = OpAccessChain %9 %82 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %9 %82 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpExtInst %1 43 %289 %181 %180 
                                Private f32* %291 = OpAccessChain %9 %82 
                                                      OpStore %291 %290 
                                      bool_3 %293 = OpLoad %167 
                                        bool %294 = OpCompositeExtract %293 1 
                                                      OpSelectionMerge %296 None 
                                                      OpBranchConditional %294 %295 %298 
                                             %295 = OpLabel 
                                         f32 %297 = OpLoad %104 
                                                      OpStore %292 %297 
                                                      OpBranch %296 
                                             %298 = OpLabel 
                                Private f32* %299 = OpAccessChain %9 %82 
                                         f32 %300 = OpLoad %299 
                                                      OpStore %292 %300 
                                                      OpBranch %296 
                                             %296 = OpLabel 
                                         f32 %301 = OpLoad %292 
                                Private f32* %302 = OpAccessChain %9 %82 
                                                      OpStore %302 %301 
                                      bool_2 %304 = OpLoad %148 
                                        bool %305 = OpCompositeExtract %304 0 
                                                      OpSelectionMerge %307 None 
                                                      OpBranchConditional %305 %306 %310 
                                             %306 = OpLabel 
                                Private f32* %308 = OpAccessChain %9 %82 
                                         f32 %309 = OpLoad %308 
                                                      OpStore %303 %309 
                                                      OpBranch %307 
                                             %310 = OpLabel 
                                  Input f32* %311 = OpAccessChain %206 %82 
                                         f32 %312 = OpLoad %311 
                                                      OpStore %303 %312 
                                                      OpBranch %307 
                                             %307 = OpLabel 
                                         f32 %313 = OpLoad %303 
                                Private f32* %314 = OpAccessChain %9 %82 
                                                      OpStore %314 %313 
                                  Input f32* %315 = OpAccessChain %206 %74 
                                         f32 %316 = OpLoad %315 
                                Private f32* %317 = OpAccessChain %9 %74 
                                                      OpStore %317 %316 
                  read_only Texture2DSampled %323 = OpLoad %322 
                                       f32_4 %324 = OpLoad %9 
                                       f32_2 %325 = OpVectorShuffle %324 %324 0 1 
                                       f32_4 %326 = OpImageSampleImplicitLod %323 %325 
                                                      OpStore %318 %326 
                                       f32_2 %328 = OpLoad %73 
                                Uniform f32* %330 = OpAccessChain %19 %329 
                                         f32 %331 = OpLoad %330 
                                Uniform f32* %332 = OpAccessChain %19 %329 
                                         f32 %333 = OpLoad %332 
                                       f32_2 %334 = OpCompositeConstruct %331 %333 
                                         f32 %335 = OpCompositeExtract %334 0 
                                         f32 %336 = OpCompositeExtract %334 1 
                                       f32_2 %337 = OpCompositeConstruct %335 %336 
                                       f32_2 %338 = OpFMul %328 %337 
                                       f32_4 %339 = OpLoad %9 
                                       f32_2 %340 = OpVectorShuffle %339 %339 0 0 
                                       f32_2 %341 = OpFAdd %338 %340 
                                       f32_4 %342 = OpLoad %327 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 2 3 
                                                      OpStore %327 %343 
                                       f32_2 %344 = OpLoad %73 
                                Uniform f32* %345 = OpAccessChain %19 %329 
                                         f32 %346 = OpLoad %345 
                                Uniform f32* %347 = OpAccessChain %19 %329 
                                         f32 %348 = OpLoad %347 
                                       f32_2 %349 = OpCompositeConstruct %346 %348 
                                         f32 %350 = OpCompositeExtract %349 0 
                                         f32 %351 = OpCompositeExtract %349 1 
                                       f32_2 %352 = OpCompositeConstruct %350 %351 
                                       f32_2 %353 = OpFMul %344 %352 
                                       f32_2 %354 = OpLoad %206 
                                       f32_2 %355 = OpVectorShuffle %354 %354 1 1 
                                       f32_2 %356 = OpFAdd %353 %355 
                                       f32_4 %357 = OpLoad %327 
                                       f32_4 %358 = OpVectorShuffle %357 %356 0 1 4 5 
                                                      OpStore %327 %358 
                  read_only Texture2DSampled %359 = OpLoad %322 
                                       f32_4 %360 = OpLoad %327 
                                       f32_2 %361 = OpVectorShuffle %360 %360 0 2 
                                       f32_4 %362 = OpImageSampleImplicitLod %359 %361 
                                       f32_2 %363 = OpVectorShuffle %362 %362 0 3 
                                       f32_4 %364 = OpLoad %9 
                                       f32_4 %365 = OpVectorShuffle %364 %363 0 4 5 3 
                                                      OpStore %9 %365 
                  read_only Texture2DSampled %367 = OpLoad %322 
                                       f32_4 %368 = OpLoad %327 
                                       f32_2 %369 = OpVectorShuffle %368 %368 1 3 
                                       f32_4 %370 = OpImageSampleImplicitLod %367 %369 
                                       f32_2 %371 = OpVectorShuffle %370 %370 1 3 
                                       f32_4 %372 = OpLoad %366 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 1 2 5 
                                                      OpStore %366 %373 
                                Private f32* %374 = OpAccessChain %131 %82 
                                         f32 %375 = OpLoad %374 
                                Uniform f32* %376 = OpAccessChain %19 %329 
                                         f32 %377 = OpLoad %376 
                                         f32 %378 = OpFMul %375 %377 
                                Private f32* %379 = OpAccessChain %9 %82 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFAdd %378 %380 
                                Private f32* %382 = OpAccessChain %327 %82 
                                                      OpStore %382 %381 
                                Private f32* %383 = OpAccessChain %131 %82 
                                         f32 %384 = OpLoad %383 
                                Uniform f32* %385 = OpAccessChain %19 %329 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %384 %386 
                                  Input f32* %388 = OpAccessChain %206 %74 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFAdd %387 %389 
                                Private f32* %391 = OpAccessChain %327 %74 
                                                      OpStore %391 %390 
                  read_only Texture2DSampled %392 = OpLoad %322 
                                       f32_4 %393 = OpLoad %327 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                                       f32_4 %395 = OpImageSampleImplicitLod %392 %394 
                                       f32_2 %396 = OpVectorShuffle %395 %395 2 3 
                                       f32_4 %397 = OpLoad %9 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 1 2 5 
                                                      OpStore %9 %398 
                                Private f32* %402 = OpAccessChain %9 %401 
                                         f32 %403 = OpLoad %402 
                                Private f32* %405 = OpAccessChain %366 %404 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFAdd %403 %406 
                                Private f32* %408 = OpAccessChain %400 %82 
                                                      OpStore %408 %407 
                                Private f32* %409 = OpAccessChain %9 %404 
                                         f32 %410 = OpLoad %409 
                                Private f32* %411 = OpAccessChain %400 %82 
                                         f32 %412 = OpLoad %411 
                                         f32 %413 = OpFAdd %410 %412 
                                Private f32* %414 = OpAccessChain %400 %82 
                                                      OpStore %414 %413 
                                Private f32* %415 = OpAccessChain %400 %82 
                                         f32 %416 = OpLoad %415 
                                         f32 %418 = OpFMul %416 %417 
                                Private f32* %419 = OpAccessChain %400 %82 
                                                      OpStore %419 %418 
                                      bool_2 %422 = OpLoad %148 
                                        bool %423 = OpCompositeExtract %422 1 
                                                      OpSelectionMerge %425 None 
                                                      OpBranchConditional %423 %424 %428 
                                             %424 = OpLabel 
                                Private f32* %426 = OpAccessChain %366 %82 
                                         f32 %427 = OpLoad %426 
                                                      OpStore %421 %427 
                                                      OpBranch %425 
                                             %428 = OpLabel 
                                Private f32* %429 = OpAccessChain %318 %74 
                                         f32 %430 = OpLoad %429 
                                                      OpStore %421 %430 
                                                      OpBranch %425 
                                             %425 = OpLabel 
                                         f32 %431 = OpLoad %421 
                                Private f32* %432 = OpAccessChain %420 %74 
                                                      OpStore %432 %431 
                                      bool_2 %435 = OpLoad %148 
                                        bool %436 = OpCompositeExtract %435 1 
                                                      OpSelectionMerge %438 None 
                                                      OpBranchConditional %436 %437 %441 
                                             %437 = OpLabel 
                                       f32_4 %439 = OpLoad %9 
                                       f32_2 %440 = OpVectorShuffle %439 %439 1 0 
                                                      OpStore %434 %440 
                                                      OpBranch %438 
                                             %441 = OpLabel 
                                       f32_4 %442 = OpLoad %318 
                                       f32_2 %443 = OpVectorShuffle %442 %442 0 2 
                                                      OpStore %434 %443 
                                                      OpBranch %438 
                                             %438 = OpLabel 
                                       f32_2 %444 = OpLoad %434 
                                       f32_4 %445 = OpLoad %420 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 1 5 3 
                                                      OpStore %420 %446 
                                      bool_2 %448 = OpLoad %148 
                                        bool %449 = OpCompositeExtract %448 1 
                                                      OpSelectionMerge %451 None 
                                                      OpBranchConditional %449 %450 %454 
                                             %450 = OpLabel 
                                Private f32* %452 = OpAccessChain %400 %82 
                                         f32 %453 = OpLoad %452 
                                                      OpStore %447 %453 
                                                      OpBranch %451 
                                             %454 = OpLabel 
                                Private f32* %455 = OpAccessChain %318 %404 
                                         f32 %456 = OpLoad %455 
                                                      OpStore %447 %456 
                                                      OpBranch %451 
                                             %451 = OpLabel 
                                         f32 %457 = OpLoad %447 
                                Private f32* %458 = OpAccessChain %420 %404 
                                                      OpStore %458 %457 
                                       f32_4 %460 = OpLoad %420 
                                       f32_4 %463 = OpLoad %462 
                                       f32_4 %464 = OpFMul %460 %463 
                                                      OpStore %459 %464 
                                Private f32* %465 = OpAccessChain %420 %404 
                                         f32 %466 = OpLoad %465 
                                  Input f32* %467 = OpAccessChain %462 %404 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFMul %466 %468 
                                         f32 %471 = OpFAdd %469 %470 
                                Private f32* %472 = OpAccessChain %400 %82 
                                                      OpStore %472 %471 
                                Private f32* %473 = OpAccessChain %400 %82 
                                         f32 %474 = OpLoad %473 
                                        bool %475 = OpFOrdLessThan %474 %181 
                                      bool_2 %476 = OpLoad %148 
                                      bool_2 %477 = OpCompositeInsert %475 %476 0 
                                                      OpStore %148 %477 
                                      bool_2 %478 = OpLoad %148 
                                        bool %479 = OpCompositeExtract %478 0 
                                         i32 %480 = OpSelect %479 %28 %35 
                                         i32 %482 = OpIMul %480 %481 
                                        bool %483 = OpINotEqual %482 %35 
                                                      OpSelectionMerge %485 None 
                                                      OpBranchConditional %483 %484 %485 
                                             %484 = OpLabel 
                                                      OpKill
                                             %485 = OpLabel 
                                Private f32* %487 = OpAccessChain %420 %404 
                                         f32 %488 = OpLoad %487 
                                  Input f32* %489 = OpAccessChain %462 %404 
                                         f32 %490 = OpLoad %489 
                                         f32 %491 = OpFMul %488 %490 
                                Uniform f32* %493 = OpAccessChain %19 %492 
                                         f32 %494 = OpLoad %493 
                                         f32 %495 = OpFNegate %494 
                                         f32 %496 = OpFAdd %491 %495 
                                Private f32* %497 = OpAccessChain %400 %82 
                                                      OpStore %497 %496 
                                Private f32* %498 = OpAccessChain %400 %82 
                                         f32 %499 = OpLoad %498 
                                        bool %500 = OpFOrdLessThan %499 %181 
                                      bool_2 %501 = OpLoad %148 
                                      bool_2 %502 = OpCompositeInsert %500 %501 0 
                                                      OpStore %148 %502 
                                      bool_2 %503 = OpLoad %148 
                                        bool %504 = OpCompositeExtract %503 0 
                                         i32 %505 = OpSelect %504 %28 %35 
                                         i32 %506 = OpIMul %505 %481 
                                        bool %507 = OpINotEqual %506 %35 
                                                      OpSelectionMerge %509 None 
                                                      OpBranchConditional %507 %508 %509 
                                             %508 = OpLabel 
                                                      OpKill
                                             %509 = OpLabel 
                                       f32_3 %513 = OpLoad %512 
                                       f32_2 %514 = OpVectorShuffle %513 %513 1 1 
                              Uniform f32_4* %516 = OpAccessChain %19 %515 %28 
                                       f32_4 %517 = OpLoad %516 
                                       f32_2 %518 = OpVectorShuffle %517 %517 0 1 
                                       f32_2 %519 = OpFMul %514 %518 
                                       f32_4 %520 = OpLoad %109 
                                       f32_4 %521 = OpVectorShuffle %520 %519 4 5 2 3 
                                                      OpStore %109 %521 
                              Uniform f32_4* %522 = OpAccessChain %19 %515 %35 
                                       f32_4 %523 = OpLoad %522 
                                       f32_2 %524 = OpVectorShuffle %523 %523 0 1 
                                       f32_3 %525 = OpLoad %512 
                                       f32_2 %526 = OpVectorShuffle %525 %525 0 0 
                                       f32_2 %527 = OpFMul %524 %526 
                                       f32_4 %528 = OpLoad %109 
                                       f32_2 %529 = OpVectorShuffle %528 %528 0 1 
                                       f32_2 %530 = OpFAdd %527 %529 
                                       f32_4 %531 = OpLoad %109 
                                       f32_4 %532 = OpVectorShuffle %531 %530 4 5 2 3 
                                                      OpStore %109 %532 
                              Uniform f32_4* %533 = OpAccessChain %19 %515 %21 
                                       f32_4 %534 = OpLoad %533 
                                       f32_2 %535 = OpVectorShuffle %534 %534 0 1 
                                       f32_3 %536 = OpLoad %512 
                                       f32_2 %537 = OpVectorShuffle %536 %536 2 2 
                                       f32_2 %538 = OpFMul %535 %537 
                                       f32_4 %539 = OpLoad %109 
                                       f32_2 %540 = OpVectorShuffle %539 %539 0 1 
                                       f32_2 %541 = OpFAdd %538 %540 
                                       f32_4 %542 = OpLoad %109 
                                       f32_4 %543 = OpVectorShuffle %542 %541 4 5 2 3 
                                                      OpStore %109 %543 
                                       f32_4 %544 = OpLoad %109 
                                       f32_2 %545 = OpVectorShuffle %544 %544 0 1 
                              Uniform f32_4* %546 = OpAccessChain %19 %515 %22 
                                       f32_4 %547 = OpLoad %546 
                                       f32_2 %548 = OpVectorShuffle %547 %547 0 1 
                                       f32_2 %549 = OpFAdd %545 %548 
                                       f32_4 %550 = OpLoad %109 
                                       f32_4 %551 = OpVectorShuffle %550 %549 4 5 2 3 
                                                      OpStore %109 %551 
                                Uniform f32* %554 = OpAccessChain %19 %553 %82 
                                         f32 %555 = OpLoad %554 
                                        bool %556 = OpFOrdEqual %555 %180 
                                                      OpStore %552 %556 
                                                      OpSelectionMerge %559 None 
                                                      OpBranchConditional %557 %558 %559 
                                             %558 = OpLabel 
                                        bool %560 = OpLoad %552 
                                                      OpSelectionMerge %562 None 
                                                      OpBranchConditional %560 %561 %562 
                                             %561 = OpLabel 
                                                      OpBranch %562 
                                             %562 = OpLabel 
                                                      OpBranch %559 
                                             %559 = OpLabel 
                                                      OpSelectionMerge %565 None 
                                                      OpBranchConditional %563 %564 %665 
                                             %564 = OpLabel 
                                Uniform f32* %566 = OpAccessChain %19 %553 %74 
                                         f32 %567 = OpLoad %566 
                                        bool %568 = OpFOrdEqual %567 %180 
                                                      OpStore %552 %568 
                                       f32_3 %569 = OpLoad %512 
                                       f32_3 %570 = OpVectorShuffle %569 %569 1 1 1 
                              Uniform f32_4* %572 = OpAccessChain %19 %571 %28 
                                       f32_4 %573 = OpLoad %572 
                                       f32_3 %574 = OpVectorShuffle %573 %573 0 1 2 
                                       f32_3 %575 = OpFMul %570 %574 
                                       f32_4 %576 = OpLoad %318 
                                       f32_4 %577 = OpVectorShuffle %576 %575 4 5 6 3 
                                                      OpStore %318 %577 
                              Uniform f32_4* %578 = OpAccessChain %19 %571 %35 
                                       f32_4 %579 = OpLoad %578 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                                       f32_3 %581 = OpLoad %512 
                                       f32_3 %582 = OpVectorShuffle %581 %581 0 0 0 
                                       f32_3 %583 = OpFMul %580 %582 
                                       f32_4 %584 = OpLoad %318 
                                       f32_3 %585 = OpVectorShuffle %584 %584 0 1 2 
                                       f32_3 %586 = OpFAdd %583 %585 
                                       f32_4 %587 = OpLoad %318 
                                       f32_4 %588 = OpVectorShuffle %587 %586 4 5 6 3 
                                                      OpStore %318 %588 
                              Uniform f32_4* %589 = OpAccessChain %19 %571 %21 
                                       f32_4 %590 = OpLoad %589 
                                       f32_3 %591 = OpVectorShuffle %590 %590 0 1 2 
                                       f32_3 %592 = OpLoad %512 
                                       f32_3 %593 = OpVectorShuffle %592 %592 2 2 2 
                                       f32_3 %594 = OpFMul %591 %593 
                                       f32_4 %595 = OpLoad %318 
                                       f32_3 %596 = OpVectorShuffle %595 %595 0 1 2 
                                       f32_3 %597 = OpFAdd %594 %596 
                                       f32_4 %598 = OpLoad %318 
                                       f32_4 %599 = OpVectorShuffle %598 %597 4 5 6 3 
                                                      OpStore %318 %599 
                                       f32_4 %600 = OpLoad %318 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                              Uniform f32_4* %602 = OpAccessChain %19 %571 %22 
                                       f32_4 %603 = OpLoad %602 
                                       f32_3 %604 = OpVectorShuffle %603 %603 0 1 2 
                                       f32_3 %605 = OpFAdd %601 %604 
                                       f32_4 %606 = OpLoad %318 
                                       f32_4 %607 = OpVectorShuffle %606 %605 4 5 6 3 
                                                      OpStore %318 %607 
                                        bool %610 = OpLoad %552 
                                                      OpSelectionMerge %612 None 
                                                      OpBranchConditional %610 %611 %615 
                                             %611 = OpLabel 
                                       f32_4 %613 = OpLoad %318 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                                      OpStore %609 %614 
                                                      OpBranch %612 
                                             %615 = OpLabel 
                                       f32_3 %616 = OpLoad %512 
                                                      OpStore %609 %616 
                                                      OpBranch %612 
                                             %612 = OpLabel 
                                       f32_3 %617 = OpLoad %609 
                                       f32_4 %618 = OpLoad %318 
                                       f32_4 %619 = OpVectorShuffle %618 %617 4 5 6 3 
                                                      OpStore %318 %619 
                                       f32_4 %620 = OpLoad %318 
                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
                              Uniform f32_3* %624 = OpAccessChain %19 %622 
                                       f32_3 %625 = OpLoad %624 
                                       f32_3 %626 = OpFNegate %625 
                                       f32_3 %627 = OpFAdd %621 %626 
                                       f32_4 %628 = OpLoad %318 
                                       f32_4 %629 = OpVectorShuffle %628 %627 4 5 6 3 
                                                      OpStore %318 %629 
                                       f32_4 %630 = OpLoad %318 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
                              Uniform f32_3* %633 = OpAccessChain %19 %632 
                                       f32_3 %634 = OpLoad %633 
                                       f32_3 %635 = OpFMul %631 %634 
                                       f32_4 %636 = OpLoad %318 
                                       f32_4 %637 = OpVectorShuffle %636 %635 0 4 5 6 
                                                      OpStore %318 %637 
                                Private f32* %638 = OpAccessChain %318 %74 
                                         f32 %639 = OpLoad %638 
                                         f32 %641 = OpFMul %639 %640 
                                         f32 %643 = OpFAdd %641 %642 
                                Private f32* %644 = OpAccessChain %131 %82 
                                                      OpStore %644 %643 
                                Uniform f32* %645 = OpAccessChain %19 %553 %401 
                                         f32 %646 = OpLoad %645 
                                         f32 %648 = OpFMul %646 %647 
                                         f32 %649 = OpFAdd %648 %642 
                                                      OpStore %214 %649 
                                         f32 %650 = OpLoad %214 
                                Private f32* %651 = OpAccessChain %131 %82 
                                         f32 %652 = OpLoad %651 
                                         f32 %653 = OpExtInst %1 40 %650 %652 
                                Private f32* %654 = OpAccessChain %318 %82 
                                                      OpStore %654 %653 
                  read_only Texture3DSampled %659 = OpLoad %658 
                                       f32_4 %660 = OpLoad %318 
                                       f32_3 %661 = OpVectorShuffle %660 %660 0 2 3 
                                       f32_4 %662 = OpImageSampleImplicitLod %659 %661 
                                                      OpStore %318 %662 
                                       f32_4 %664 = OpLoad %318 
                                                      OpStore %663 %664 
                                                      OpBranch %565 
                                             %665 = OpLabel 
                                Private f32* %666 = OpAccessChain %663 %82 
                                                      OpStore %666 %180 
                                Private f32* %667 = OpAccessChain %663 %74 
                                                      OpStore %667 %180 
                                Private f32* %668 = OpAccessChain %663 %401 
                                                      OpStore %668 %180 
                                Private f32* %669 = OpAccessChain %663 %404 
                                                      OpStore %669 %180 
                                                      OpBranch %565 
                                             %565 = OpLabel 
                                       f32_4 %670 = OpLoad %663 
                              Uniform f32_4* %671 = OpAccessChain %19 %28 
                                       f32_4 %672 = OpLoad %671 
                                         f32 %673 = OpDot %670 %672 
                                Private f32* %674 = OpAccessChain %400 %82 
                                                      OpStore %674 %673 
                                Private f32* %675 = OpAccessChain %400 %82 
                                         f32 %676 = OpLoad %675 
                                         f32 %677 = OpExtInst %1 43 %676 %181 %180 
                                Private f32* %678 = OpAccessChain %400 %82 
                                                      OpStore %678 %677 
                  read_only Texture2DSampled %680 = OpLoad %679 
                                       f32_4 %681 = OpLoad %109 
                                       f32_2 %682 = OpVectorShuffle %681 %681 0 1 
                                       f32_4 %683 = OpImageSampleImplicitLod %680 %682 
                                         f32 %684 = OpCompositeExtract %683 3 
                                Private f32* %685 = OpAccessChain %109 %82 
                                                      OpStore %685 %684 
                                Private f32* %686 = OpAccessChain %400 %82 
                                         f32 %687 = OpLoad %686 
                                Private f32* %688 = OpAccessChain %109 %82 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFMul %687 %689 
                                Private f32* %691 = OpAccessChain %109 %82 
                                                      OpStore %691 %690 
                                       f32_4 %692 = OpLoad %459 
                                       f32_3 %693 = OpVectorShuffle %692 %692 0 1 2 
                              Uniform f32_4* %695 = OpAccessChain %19 %694 
                                       f32_4 %696 = OpLoad %695 
                                       f32_3 %697 = OpVectorShuffle %696 %696 0 1 2 
                                       f32_3 %698 = OpFMul %693 %697 
                                                      OpStore %400 %698 
                                       f32_4 %701 = OpLoad %109 
                                       f32_3 %702 = OpVectorShuffle %701 %701 0 0 0 
                                       f32_3 %703 = OpLoad %400 
                                       f32_3 %704 = OpFMul %702 %703 
                                       f32_4 %705 = OpLoad %700 
                                       f32_4 %706 = OpVectorShuffle %705 %704 4 5 6 3 
                                                      OpStore %700 %706 
                                Private f32* %707 = OpAccessChain %459 %404 
                                         f32 %708 = OpLoad %707 
                                 Output f32* %710 = OpAccessChain %700 %404 
                                                      OpStore %710 %708 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "META"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 140136
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
bool u_xlatb2;
bool u_xlatb6;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.y = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlatb6 = 0.0<in_POSITION0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xz = in_POSITION0.xz;
    u_xlat0.xzw = (unity_MetaVertexControl.x) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlatb2 = 0.0<u_xlat0.w;
    u_xlat1.z = u_xlatb2 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xzw;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _GlitchInterval;
uniform 	float _DispIntensity;
uniform 	float _DispProbability;
uniform 	float _ColorIntensity;
uniform 	float _ColorProbability;
uniform 	float _DispGlitchOn;
uniform 	float _ColorGlitchOn;
uniform 	float _WrapDispCoords;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat16_0;
vec4 u_xlat1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec2 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec2 u_xlat5;
float u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.x = _Time.y / _GlitchInterval;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat5.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].xx + u_xlat5.xy;
    u_xlat5.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].zz + u_xlat5.xy;
    u_xlat5.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[3].ww + u_xlat5.xy;
    u_xlat0.x = u_xlat0.x * _GlitchInterval + u_xlat5.x;
    u_xlat0.x = u_xlat5.y + u_xlat0.x;
    u_xlat5.x = u_xlat0.x + 2.79299998;
    u_xlat5.xy = u_xlat5.xx * vec2(-91.2228012, 91.2228012);
    u_xlat5.xy = sin(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(43758.5469, 43758.5469);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat10 = u_xlat5.y * 0.0199999996 + 0.200000003;
    u_xlat10 = vs_TEXCOORD0.y / u_xlat10;
    u_xlat10 = floor(u_xlat10);
    u_xlat15 = u_xlat0.x + u_xlat10;
    u_xlat10 = (-u_xlat0.x) + u_xlat10;
    u_xlat1 = u_xlat0.xxxx * vec4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
    u_xlat1 = sin(u_xlat1);
    u_xlat1 = u_xlat1 * vec4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
    u_xlat1 = fract(u_xlat1);
    u_xlat0.x = u_xlat15 * 78.2330017;
    u_xlat0.x = u_xlat10 * 12.9898005 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 43758.5469;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat0.x = u_xlat0.x * _DispIntensity + vs_TEXCOORD0.x;
    u_xlatb10.x = u_xlat0.x>=(-u_xlat0.x);
    u_xlat15 = fract(abs(u_xlat0.x));
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10 = (u_xlatb10.x) ? u_xlat15 : (-u_xlat15);
    u_xlatb2.xyz = equal(vec4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), vec4(1.0, 1.0, 1.0, 0.0)).xyz;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat10 : u_xlat0.x;
    u_xlatb10.xy = lessThan(u_xlat1.xyxy, vec4(_DispProbability, _ColorProbability, _DispProbability, _ColorProbability)).xy;
    u_xlat1.xy = u_xlat1.zw + vec2(-0.5, -0.5);
    u_xlatb10.x = u_xlatb2.x && u_xlatb10.x;
    u_xlatb10.y = u_xlatb2.z && u_xlatb10.y;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat0.x : vs_TEXCOORD0.x;
    u_xlat3.x = u_xlat5.x * _ColorIntensity + u_xlat2.x;
    u_xlat3.y = u_xlat5.x * _ColorIntensity + vs_TEXCOORD0.y;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat4.xy = u_xlat1.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + u_xlat2.xx;
    u_xlat4.zw = u_xlat1.xy * vec2(vec2(_ColorIntensity, _ColorIntensity)) + vs_TEXCOORD0.yy;
    u_xlat10_1 = texture(_MainTex, u_xlat4.xz);
    u_xlat10_4 = texture(_MainTex, u_xlat4.yw);
    u_xlat16_0 = u_xlat10_1.w + u_xlat10_4.w;
    u_xlat3.x = u_xlat10_1.x;
    u_xlat3.y = u_xlat10_4.y;
    u_xlat0.x = u_xlat3.w + u_xlat16_0;
    u_xlat3.w = u_xlat0.x * 0.333333343;
    u_xlat2.y = vs_TEXCOORD0.y;
    u_xlat1 = texture(_MainTex, u_xlat2.xy);
    u_xlat0 = (u_xlatb10.y) ? u_xlat3 : u_xlat1;
    u_xlat1.x = u_xlat0.w * vs_COLOR0.w + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat15 = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlatb15 = u_xlat15<0.0;
    if((int(u_xlatb15) * int(0xffffffffu))!=0){discard;}
    u_xlat15 = unity_OneOverOutputBoost;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 264
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %76 %138 %159 %232 %242 %243 %255 %256 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %76 Location 76 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %159 Location 159 
                                                      OpMemberDecorate %230 0 BuiltIn 230 
                                                      OpMemberDecorate %230 1 BuiltIn 230 
                                                      OpMemberDecorate %230 2 BuiltIn 230 
                                                      OpDecorate %230 Block 
                                                      OpDecorate %242 Location 242 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %255 Location 255 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %256 Location 256 
                                                      OpDecorate %257 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeVector %10 4 
                                              %15 = OpTypeStruct %12 %13 %7 %7 %6 %6 %14 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; u32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 5 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 4 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                              %58 = OpTypeBool 
                                              %59 = OpTypePointer Private %58 
                                Private bool* %60 = OpVariable Private 
                                          f32 %61 = OpConstant 3.674022E-40 
                                          u32 %62 = OpConstant 2 
                               Private f32_4* %66 = OpVariable Private 
                                              %67 = OpTypePointer Function %6 
                                          f32 %72 = OpConstant 3.674022E-40 
                                 Input f32_4* %76 = OpVariable Input 
                                              %77 = OpTypeVector %6 2 
                                          i32 %80 = OpConstant 2 
                                              %81 = OpTypePointer Uniform %7 
                                              %96 = OpTypeVector %6 3 
                                              %97 = OpTypePointer Function %96 
                                          i32 %99 = OpConstant 6 
                                             %100 = OpTypeVector %58 4 
                                             %101 = OpTypePointer Uniform %14 
                                         i32 %118 = OpConstant 0 
                                         i32 %119 = OpConstant 1 
                                             %137 = OpTypePointer Output %7 
                               Output f32_4* %138 = OpVariable Output 
                                         i32 %139 = OpConstant 3 
                               Private bool* %147 = OpVariable Private 
                                         u32 %148 = OpConstant 3 
                                Input f32_4* %159 = OpVariable Input 
                                             %229 = OpTypeArray %6 %48 
                                             %230 = OpTypeStruct %7 %6 %229 
                                             %231 = OpTypePointer Output %230 
        Output struct {f32_4; f32; f32[1];}* %232 = OpVariable Output 
                                             %241 = OpTypePointer Output %77 
                               Output f32_2* %242 = OpVariable Output 
                                Input f32_4* %243 = OpVariable Input 
                                         i32 %246 = OpConstant 7 
                               Output f32_4* %255 = OpVariable Output 
                                Input f32_4* %256 = OpVariable Input 
                                             %258 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %68 = OpVariable Function 
                              Function f32_3* %98 = OpVariable Function 
                               Function f32* %152 = OpVariable Function 
                             Function f32_3* %172 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %48 
                                                      OpStore %57 %56 
                                   Input f32* %63 = OpAccessChain %47 %62 
                                          f32 %64 = OpLoad %63 
                                         bool %65 = OpFOrdLessThan %61 %64 
                                                      OpStore %60 %65 
                                         bool %69 = OpLoad %60 
                                                      OpSelectionMerge %71 None 
                                                      OpBranchConditional %69 %70 %73 
                                              %70 = OpLabel 
                                                      OpStore %68 %72 
                                                      OpBranch %71 
                                              %73 = OpLabel 
                                                      OpStore %68 %61 
                                                      OpBranch %71 
                                              %71 = OpLabel 
                                          f32 %74 = OpLoad %68 
                                 Private f32* %75 = OpAccessChain %66 %62 
                                                      OpStore %75 %74 
                                        f32_4 %78 = OpLoad %76 
                                        f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                               Uniform f32_4* %82 = OpAccessChain %17 %80 
                                        f32_4 %83 = OpLoad %82 
                                        f32_2 %84 = OpVectorShuffle %83 %83 0 1 
                                        f32_2 %85 = OpFMul %79 %84 
                               Uniform f32_4* %86 = OpAccessChain %17 %80 
                                        f32_4 %87 = OpLoad %86 
                                        f32_2 %88 = OpVectorShuffle %87 %87 2 3 
                                        f32_2 %89 = OpFAdd %85 %88 
                                        f32_4 %90 = OpLoad %66 
                                        f32_4 %91 = OpVectorShuffle %90 %89 4 5 2 3 
                                                      OpStore %66 %91 
                                        f32_4 %92 = OpLoad %47 
                                        f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                                        f32_4 %94 = OpLoad %9 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 1 5 3 
                                                      OpStore %9 %95 
                              Uniform u32_4* %102 = OpAccessChain %17 %99 
                                       u32_4 %103 = OpLoad %102 
                                         u32 %104 = OpCompositeExtract %103 0 
                                        bool %105 = OpINotEqual %104 %25 
                                                      OpSelectionMerge %107 None 
                                                      OpBranchConditional %105 %106 %110 
                                             %106 = OpLabel 
                                       f32_4 %108 = OpLoad %66 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                                      OpStore %98 %109 
                                                      OpBranch %107 
                                             %110 = OpLabel 
                                       f32_4 %111 = OpLoad %9 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                                      OpStore %98 %112 
                                                      OpBranch %107 
                                             %107 = OpLabel 
                                       f32_3 %113 = OpLoad %98 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 1 5 6 
                                                      OpStore %9 %115 
                                       f32_4 %116 = OpLoad %9 
                                       f32_4 %117 = OpVectorShuffle %116 %116 1 1 1 1 
                              Uniform f32_4* %120 = OpAccessChain %17 %118 %119 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFMul %117 %121 
                                                      OpStore %66 %122 
                              Uniform f32_4* %123 = OpAccessChain %17 %118 %118 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %47 
                                       f32_4 %126 = OpVectorShuffle %125 %125 0 0 0 0 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %66 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %66 %129 
                              Uniform f32_4* %130 = OpAccessChain %17 %118 %80 
                                       f32_4 %131 = OpLoad %130 
                                       f32_4 %132 = OpLoad %47 
                                       f32_4 %133 = OpVectorShuffle %132 %132 2 2 2 2 
                                       f32_4 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %66 
                                       f32_4 %136 = OpFAdd %134 %135 
                                                      OpStore %66 %136 
                              Uniform f32_4* %140 = OpAccessChain %17 %118 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpLoad %47 
                                       f32_4 %143 = OpVectorShuffle %142 %142 3 3 3 3 
                                       f32_4 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %66 
                                       f32_4 %146 = OpFAdd %144 %145 
                                                      OpStore %138 %146 
                                Private f32* %149 = OpAccessChain %9 %148 
                                         f32 %150 = OpLoad %149 
                                        bool %151 = OpFOrdLessThan %61 %150 
                                                      OpStore %147 %151 
                                        bool %153 = OpLoad %147 
                                                      OpSelectionMerge %155 None 
                                                      OpBranchConditional %153 %154 %156 
                                             %154 = OpLabel 
                                                      OpStore %152 %72 
                                                      OpBranch %155 
                                             %156 = OpLabel 
                                                      OpStore %152 %61 
                                                      OpBranch %155 
                                             %155 = OpLabel 
                                         f32 %157 = OpLoad %152 
                                Private f32* %158 = OpAccessChain %66 %62 
                                                      OpStore %158 %157 
                                       f32_4 %160 = OpLoad %159 
                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
                              Uniform f32_4* %162 = OpAccessChain %17 %139 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                                       f32_2 %165 = OpFMul %161 %164 
                              Uniform f32_4* %166 = OpAccessChain %17 %139 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
                                       f32_2 %169 = OpFAdd %165 %168 
                                       f32_4 %170 = OpLoad %66 
                                       f32_4 %171 = OpVectorShuffle %170 %169 4 5 2 3 
                                                      OpStore %66 %171 
                              Uniform u32_4* %173 = OpAccessChain %17 %99 
                                       u32_4 %174 = OpLoad %173 
                                         u32 %175 = OpCompositeExtract %174 1 
                                        bool %176 = OpINotEqual %175 %25 
                                                      OpSelectionMerge %178 None 
                                                      OpBranchConditional %176 %177 %181 
                                             %177 = OpLabel 
                                       f32_4 %179 = OpLoad %66 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                                      OpStore %172 %180 
                                                      OpBranch %178 
                                             %181 = OpLabel 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 2 3 
                                                      OpStore %172 %183 
                                                      OpBranch %178 
                                             %178 = OpLabel 
                                       f32_3 %184 = OpLoad %172 
                                       f32_4 %185 = OpLoad %9 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
                                                      OpStore %9 %186 
                                       f32_4 %187 = OpLoad %9 
                                       f32_4 %188 = OpVectorShuffle %187 %187 1 1 1 1 
                              Uniform f32_4* %189 = OpAccessChain %17 %118 %119 
                                       f32_4 %190 = OpLoad %189 
                                       f32_4 %191 = OpFMul %188 %190 
                                                      OpStore %66 %191 
                              Uniform f32_4* %192 = OpAccessChain %17 %118 %118 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpLoad %9 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 0 0 0 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %66 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %66 %198 
                              Uniform f32_4* %199 = OpAccessChain %17 %118 %80 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpLoad %9 
                                       f32_4 %202 = OpVectorShuffle %201 %201 2 2 2 2 
                                       f32_4 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %66 
                                       f32_4 %205 = OpFAdd %203 %204 
                                                      OpStore %9 %205 
                                       f32_4 %206 = OpLoad %9 
                              Uniform f32_4* %207 = OpAccessChain %17 %118 %139 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpFAdd %206 %208 
                                                      OpStore %9 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %211 = OpVectorShuffle %210 %210 1 1 1 1 
                              Uniform f32_4* %212 = OpAccessChain %17 %119 %119 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpFMul %211 %213 
                                                      OpStore %66 %214 
                              Uniform f32_4* %215 = OpAccessChain %17 %119 %118 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %9 
                                       f32_4 %218 = OpVectorShuffle %217 %217 0 0 0 0 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %66 
                                       f32_4 %221 = OpFAdd %219 %220 
                                                      OpStore %66 %221 
                              Uniform f32_4* %222 = OpAccessChain %17 %119 %80 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %9 
                                       f32_4 %225 = OpVectorShuffle %224 %224 2 2 2 2 
                                       f32_4 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %66 
                                       f32_4 %228 = OpFAdd %226 %227 
                                                      OpStore %66 %228 
                              Uniform f32_4* %233 = OpAccessChain %17 %119 %139 
                                       f32_4 %234 = OpLoad %233 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpVectorShuffle %235 %235 3 3 3 3 
                                       f32_4 %237 = OpFMul %234 %236 
                                       f32_4 %238 = OpLoad %66 
                                       f32_4 %239 = OpFAdd %237 %238 
                               Output f32_4* %240 = OpAccessChain %232 %118 
                                                      OpStore %240 %239 
                                       f32_4 %244 = OpLoad %243 
                                       f32_2 %245 = OpVectorShuffle %244 %244 0 1 
                              Uniform f32_4* %247 = OpAccessChain %17 %246 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                                       f32_2 %250 = OpFMul %245 %249 
                              Uniform f32_4* %251 = OpAccessChain %17 %246 
                                       f32_4 %252 = OpLoad %251 
                                       f32_2 %253 = OpVectorShuffle %252 %252 2 3 
                                       f32_2 %254 = OpFAdd %250 %253 
                                                      OpStore %242 %254 
                                       f32_4 %257 = OpLoad %256 
                                                      OpStore %255 %257 
                                 Output f32* %259 = OpAccessChain %232 %118 %48 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFNegate %260 
                                 Output f32* %262 = OpAccessChain %232 %118 %48 
                                                      OpStore %262 %261 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 565
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %122 %423 %551 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpMemberDecorate %16 14 RelaxedPrecision 
                                                      OpMemberDecorate %16 14 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %329 DescriptorSet 329 
                                                      OpDecorate %329 Binding 329 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %423 Location 423 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %551 Location 551 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %563 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeArray %10 %12 
                                              %15 = OpTypeVector %11 4 
                                              %16 = OpTypeStruct %10 %13 %14 %6 %6 %6 %6 %6 %6 %6 %6 %15 %6 %6 %6 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; u32_4; f32; f32; f32;}* %18 = OpVariable Uniform 
                                              %19 = OpTypeInt 32 1 
                                          i32 %20 = OpConstant 0 
                                          u32 %21 = OpConstant 1 
                                              %22 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 3 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %36 = OpTypeVector %6 2 
                                              %37 = OpTypePointer Private %36 
                               Private f32_2* %38 = OpVariable Private 
                                          i32 %39 = OpConstant 1 
                                              %40 = OpTypePointer Uniform %10 
                                          i32 %44 = OpConstant 2 
                                          f32 %93 = OpConstant 3.674022E-40 
                                          f32 %98 = OpConstant 3.674022E-40 
                                          f32 %99 = OpConstant 3.674022E-40 
                                       f32_2 %100 = OpConstantComposite %98 %99 
                                         f32 %105 = OpConstant 3.674022E-40 
                                       f32_2 %106 = OpConstantComposite %105 %105 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_2 %112 = OpConstantComposite %111 %111 
                                Private f32* %114 = OpVariable Private 
                                         f32 %117 = OpConstant 3.674022E-40 
                                         f32 %119 = OpConstant 3.674022E-40 
                                             %121 = OpTypePointer Input %36 
                                Input f32_2* %122 = OpVariable Input 
                                             %123 = OpTypePointer Input %6 
                                Private f32* %130 = OpVariable Private 
                                             %140 = OpTypePointer Private %10 
                              Private f32_4* %141 = OpVariable Private 
                                         f32 %144 = OpConstant 3.674022E-40 
                                         f32 %145 = OpConstant 3.674022E-40 
                                       f32_4 %146 = OpConstantComposite %144 %99 %145 %98 
                                       f32_4 %151 = OpConstantComposite %105 %105 %105 %105 
                                         f32 %156 = OpConstant 3.674022E-40 
                                         f32 %160 = OpConstant 3.674022E-40 
                                         i32 %184 = OpConstant 4 
                                             %192 = OpTypeBool 
                                             %193 = OpTypeVector %192 2 
                                             %194 = OpTypePointer Private %193 
                             Private bool_2* %195 = OpVariable Private 
                                         f32 %213 = OpConstant 3.674022E-40 
                                         f32 %214 = OpConstant 3.674022E-40 
                                             %217 = OpTypePointer Function %6 
                                             %228 = OpTypeVector %192 3 
                                             %229 = OpTypePointer Private %228 
                             Private bool_3* %230 = OpVariable Private 
                                         i32 %231 = OpConstant 8 
                                         i32 %234 = OpConstant 10 
                                         i32 %237 = OpConstant 9 
                                       f32_4 %243 = OpConstantComposite %214 %214 %214 %213 
                                             %244 = OpTypeVector %192 4 
                                         i32 %260 = OpConstant 5 
                                         i32 %263 = OpConstant 7 
                              Private f32_4* %292 = OpVariable Private 
                              Private f32_4* %305 = OpVariable Private 
                                         i32 %308 = OpConstant 6 
                              Private f32_2* %325 = OpVariable Private 
                                             %326 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %327 = OpTypeSampledImage %326 
                                             %328 = OpTypePointer UniformConstant %327 
 UniformConstant read_only Texture2DSampled* %329 = OpVariable UniformConstant 
                              Private f32_3* %381 = OpVariable Private 
                                         u32 %382 = OpConstant 3 
                                         f32 %397 = OpConstant 3.674022E-40 
                                Private f32* %419 = OpVariable Private 
                                             %422 = OpTypePointer Input %10 
                                Input f32_4* %423 = OpVariable Input 
                                         f32 %427 = OpConstant 3.674022E-40 
                                         i32 %434 = OpConstant 14 
                                             %440 = OpTypePointer Private %192 
                               Private bool* %441 = OpVariable Private 
                                         i32 %447 = OpConstant -1 
                                             %462 = OpTypePointer Function %36 
                                         u32 %484 = OpConstant 2 
                              Private f32_4* %493 = OpVariable Private 
                                         i32 %498 = OpConstant 12 
                                         i32 %511 = OpConstant 13 
                                             %524 = OpTypePointer Function %7 
                                         i32 %526 = OpConstant 11 
                                             %527 = OpTypePointer Uniform %15 
                                       f32_3 %536 = OpConstantComposite %213 %213 %213 
                                             %550 = OpTypePointer Output %10 
                               Output f32_4* %551 = OpVariable Output 
                                             %552 = OpTypePointer Function %10 
                                       f32_4 %560 = OpConstantComposite %213 %213 %213 %214 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %218 = OpVariable Function 
                               Function f32* %247 = OpVariable Function 
                               Function f32* %293 = OpVariable Function 
                               Function f32* %407 = OpVariable Function 
                             Function f32_2* %463 = OpVariable Function 
                               Function f32* %476 = OpVariable Function 
                             Function f32_3* %525 = OpVariable Function 
                               Function f32* %540 = OpVariable Function 
                             Function f32_4* %553 = OpVariable Function 
                                 Uniform f32* %23 = OpAccessChain %18 %20 %21 
                                          f32 %24 = OpLoad %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 8 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                               Uniform f32_4* %41 = OpAccessChain %18 %39 %25 
                                        f32_4 %42 = OpLoad %41 
                                        f32_2 %43 = OpVectorShuffle %42 %42 1 1 
                               Uniform f32_4* %45 = OpAccessChain %18 %44 %39 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_2 %48 = OpFMul %43 %47 
                                                      OpStore %38 %48 
                               Uniform f32_4* %49 = OpAccessChain %18 %44 %20 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                               Uniform f32_4* %52 = OpAccessChain %18 %39 %25 
                                        f32_4 %53 = OpLoad %52 
                                        f32_2 %54 = OpVectorShuffle %53 %53 0 0 
                                        f32_2 %55 = OpFMul %51 %54 
                                        f32_2 %56 = OpLoad %38 
                                        f32_2 %57 = OpFAdd %55 %56 
                                                      OpStore %38 %57 
                               Uniform f32_4* %58 = OpAccessChain %18 %44 %44 
                                        f32_4 %59 = OpLoad %58 
                                        f32_2 %60 = OpVectorShuffle %59 %59 0 1 
                               Uniform f32_4* %61 = OpAccessChain %18 %39 %25 
                                        f32_4 %62 = OpLoad %61 
                                        f32_2 %63 = OpVectorShuffle %62 %62 2 2 
                                        f32_2 %64 = OpFMul %60 %63 
                                        f32_2 %65 = OpLoad %38 
                                        f32_2 %66 = OpFAdd %64 %65 
                                                      OpStore %38 %66 
                               Uniform f32_4* %67 = OpAccessChain %18 %44 %25 
                                        f32_4 %68 = OpLoad %67 
                                        f32_2 %69 = OpVectorShuffle %68 %68 0 1 
                               Uniform f32_4* %70 = OpAccessChain %18 %39 %25 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 3 3 
                                        f32_2 %73 = OpFMul %69 %72 
                                        f32_2 %74 = OpLoad %38 
                                        f32_2 %75 = OpFAdd %73 %74 
                                                      OpStore %38 %75 
                                 Private f32* %76 = OpAccessChain %9 %29 
                                          f32 %77 = OpLoad %76 
                                 Uniform f32* %78 = OpAccessChain %18 %25 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFMul %77 %79 
                                 Private f32* %81 = OpAccessChain %38 %29 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFAdd %80 %82 
                                 Private f32* %84 = OpAccessChain %9 %29 
                                                      OpStore %84 %83 
                                 Private f32* %85 = OpAccessChain %38 %21 
                                          f32 %86 = OpLoad %85 
                                 Private f32* %87 = OpAccessChain %9 %29 
                                          f32 %88 = OpLoad %87 
                                          f32 %89 = OpFAdd %86 %88 
                                 Private f32* %90 = OpAccessChain %9 %29 
                                                      OpStore %90 %89 
                                 Private f32* %91 = OpAccessChain %9 %29 
                                          f32 %92 = OpLoad %91 
                                          f32 %94 = OpFAdd %92 %93 
                                 Private f32* %95 = OpAccessChain %38 %29 
                                                      OpStore %95 %94 
                                        f32_2 %96 = OpLoad %38 
                                        f32_2 %97 = OpVectorShuffle %96 %96 0 0 
                                       f32_2 %101 = OpFMul %97 %100 
                                                      OpStore %38 %101 
                                       f32_2 %102 = OpLoad %38 
                                       f32_2 %103 = OpExtInst %1 13 %102 
                                                      OpStore %38 %103 
                                       f32_2 %104 = OpLoad %38 
                                       f32_2 %107 = OpFMul %104 %106 
                                                      OpStore %38 %107 
                                       f32_2 %108 = OpLoad %38 
                                       f32_2 %109 = OpExtInst %1 10 %108 
                                                      OpStore %38 %109 
                                       f32_2 %110 = OpLoad %38 
                                       f32_2 %113 = OpFAdd %110 %112 
                                                      OpStore %38 %113 
                                Private f32* %115 = OpAccessChain %38 %21 
                                         f32 %116 = OpLoad %115 
                                         f32 %118 = OpFMul %116 %117 
                                         f32 %120 = OpFAdd %118 %119 
                                                      OpStore %114 %120 
                                  Input f32* %124 = OpAccessChain %122 %21 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpLoad %114 
                                         f32 %127 = OpFDiv %125 %126 
                                                      OpStore %114 %127 
                                         f32 %128 = OpLoad %114 
                                         f32 %129 = OpExtInst %1 8 %128 
                                                      OpStore %114 %129 
                                Private f32* %131 = OpAccessChain %9 %29 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpLoad %114 
                                         f32 %134 = OpFAdd %132 %133 
                                                      OpStore %130 %134 
                                Private f32* %135 = OpAccessChain %9 %29 
                                         f32 %136 = OpLoad %135 
                                         f32 %137 = OpFNegate %136 
                                         f32 %138 = OpLoad %114 
                                         f32 %139 = OpFAdd %137 %138 
                                                      OpStore %114 %139 
                                       f32_3 %142 = OpLoad %9 
                                       f32_4 %143 = OpVectorShuffle %142 %142 0 0 0 0 
                                       f32_4 %147 = OpFMul %143 %146 
                                                      OpStore %141 %147 
                                       f32_4 %148 = OpLoad %141 
                                       f32_4 %149 = OpExtInst %1 13 %148 
                                                      OpStore %141 %149 
                                       f32_4 %150 = OpLoad %141 
                                       f32_4 %152 = OpFMul %150 %151 
                                                      OpStore %141 %152 
                                       f32_4 %153 = OpLoad %141 
                                       f32_4 %154 = OpExtInst %1 10 %153 
                                                      OpStore %141 %154 
                                         f32 %155 = OpLoad %130 
                                         f32 %157 = OpFMul %155 %156 
                                Private f32* %158 = OpAccessChain %9 %29 
                                                      OpStore %158 %157 
                                         f32 %159 = OpLoad %114 
                                         f32 %161 = OpFMul %159 %160 
                                Private f32* %162 = OpAccessChain %9 %29 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFAdd %161 %163 
                                Private f32* %165 = OpAccessChain %9 %29 
                                                      OpStore %165 %164 
                                Private f32* %166 = OpAccessChain %9 %29 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpExtInst %1 13 %167 
                                Private f32* %169 = OpAccessChain %9 %29 
                                                      OpStore %169 %168 
                                Private f32* %170 = OpAccessChain %9 %29 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFMul %171 %105 
                                Private f32* %173 = OpAccessChain %9 %29 
                                                      OpStore %173 %172 
                                Private f32* %174 = OpAccessChain %9 %29 
                                         f32 %175 = OpLoad %174 
                                         f32 %176 = OpExtInst %1 10 %175 
                                Private f32* %177 = OpAccessChain %9 %29 
                                                      OpStore %177 %176 
                                Private f32* %178 = OpAccessChain %9 %29 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFAdd %179 %111 
                                Private f32* %181 = OpAccessChain %9 %29 
                                                      OpStore %181 %180 
                                Private f32* %182 = OpAccessChain %9 %29 
                                         f32 %183 = OpLoad %182 
                                Uniform f32* %185 = OpAccessChain %18 %184 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %183 %186 
                                  Input f32* %188 = OpAccessChain %122 %29 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFAdd %187 %189 
                                Private f32* %191 = OpAccessChain %9 %29 
                                                      OpStore %191 %190 
                                Private f32* %196 = OpAccessChain %9 %29 
                                         f32 %197 = OpLoad %196 
                                Private f32* %198 = OpAccessChain %9 %29 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                        bool %201 = OpFOrdGreaterThanEqual %197 %200 
                                      bool_2 %202 = OpLoad %195 
                                      bool_2 %203 = OpCompositeInsert %201 %202 0 
                                                      OpStore %195 %203 
                                Private f32* %204 = OpAccessChain %9 %29 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpExtInst %1 4 %205 
                                         f32 %207 = OpExtInst %1 10 %206 
                                                      OpStore %130 %207 
                                Private f32* %208 = OpAccessChain %9 %29 
                                         f32 %209 = OpLoad %208 
                                Private f32* %210 = OpAccessChain %9 %29 
                                                      OpStore %210 %209 
                                Private f32* %211 = OpAccessChain %9 %29 
                                         f32 %212 = OpLoad %211 
                                         f32 %215 = OpExtInst %1 43 %212 %213 %214 
                                Private f32* %216 = OpAccessChain %9 %29 
                                                      OpStore %216 %215 
                                      bool_2 %219 = OpLoad %195 
                                        bool %220 = OpCompositeExtract %219 0 
                                                      OpSelectionMerge %222 None 
                                                      OpBranchConditional %220 %221 %224 
                                             %221 = OpLabel 
                                         f32 %223 = OpLoad %130 
                                                      OpStore %218 %223 
                                                      OpBranch %222 
                                             %224 = OpLabel 
                                         f32 %225 = OpLoad %130 
                                         f32 %226 = OpFNegate %225 
                                                      OpStore %218 %226 
                                                      OpBranch %222 
                                             %222 = OpLabel 
                                         f32 %227 = OpLoad %218 
                                                      OpStore %114 %227 
                                Uniform f32* %232 = OpAccessChain %18 %231 
                                         f32 %233 = OpLoad %232 
                                Uniform f32* %235 = OpAccessChain %18 %234 
                                         f32 %236 = OpLoad %235 
                                Uniform f32* %238 = OpAccessChain %18 %237 
                                         f32 %239 = OpLoad %238 
                                Uniform f32* %240 = OpAccessChain %18 %231 
                                         f32 %241 = OpLoad %240 
                                       f32_4 %242 = OpCompositeConstruct %233 %236 %239 %241 
                                      bool_4 %245 = OpFOrdEqual %242 %243 
                                      bool_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                                      OpStore %230 %246 
                                      bool_3 %248 = OpLoad %230 
                                        bool %249 = OpCompositeExtract %248 1 
                                                      OpSelectionMerge %251 None 
                                                      OpBranchConditional %249 %250 %253 
                                             %250 = OpLabel 
                                         f32 %252 = OpLoad %114 
                                                      OpStore %247 %252 
                                                      OpBranch %251 
                                             %253 = OpLabel 
                                Private f32* %254 = OpAccessChain %9 %29 
                                         f32 %255 = OpLoad %254 
                                                      OpStore %247 %255 
                                                      OpBranch %251 
                                             %251 = OpLabel 
                                         f32 %256 = OpLoad %247 
                                Private f32* %257 = OpAccessChain %9 %29 
                                                      OpStore %257 %256 
                                       f32_4 %258 = OpLoad %141 
                                       f32_4 %259 = OpVectorShuffle %258 %258 0 1 0 1 
                                Uniform f32* %261 = OpAccessChain %18 %260 
                                         f32 %262 = OpLoad %261 
                                Uniform f32* %264 = OpAccessChain %18 %263 
                                         f32 %265 = OpLoad %264 
                                Uniform f32* %266 = OpAccessChain %18 %260 
                                         f32 %267 = OpLoad %266 
                                Uniform f32* %268 = OpAccessChain %18 %263 
                                         f32 %269 = OpLoad %268 
                                       f32_4 %270 = OpCompositeConstruct %262 %265 %267 %269 
                                      bool_4 %271 = OpFOrdLessThan %259 %270 
                                      bool_2 %272 = OpVectorShuffle %271 %271 0 1 
                                                      OpStore %195 %272 
                                       f32_4 %273 = OpLoad %141 
                                       f32_2 %274 = OpVectorShuffle %273 %273 2 3 
                                       f32_2 %275 = OpFAdd %274 %112 
                                       f32_4 %276 = OpLoad %141 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 2 3 
                                                      OpStore %141 %277 
                                      bool_3 %278 = OpLoad %230 
                                        bool %279 = OpCompositeExtract %278 0 
                                      bool_2 %280 = OpLoad %195 
                                        bool %281 = OpCompositeExtract %280 0 
                                        bool %282 = OpLogicalAnd %279 %281 
                                      bool_2 %283 = OpLoad %195 
                                      bool_2 %284 = OpCompositeInsert %282 %283 0 
                                                      OpStore %195 %284 
                                      bool_3 %285 = OpLoad %230 
                                        bool %286 = OpCompositeExtract %285 2 
                                      bool_2 %287 = OpLoad %195 
                                        bool %288 = OpCompositeExtract %287 1 
                                        bool %289 = OpLogicalAnd %286 %288 
                                      bool_2 %290 = OpLoad %195 
                                      bool_2 %291 = OpCompositeInsert %289 %290 1 
                                                      OpStore %195 %291 
                                      bool_2 %294 = OpLoad %195 
                                        bool %295 = OpCompositeExtract %294 0 
                                                      OpSelectionMerge %297 None 
                                                      OpBranchConditional %295 %296 %300 
                                             %296 = OpLabel 
                                Private f32* %298 = OpAccessChain %9 %29 
                                         f32 %299 = OpLoad %298 
                                                      OpStore %293 %299 
                                                      OpBranch %297 
                                             %300 = OpLabel 
                                  Input f32* %301 = OpAccessChain %122 %29 
                                         f32 %302 = OpLoad %301 
                                                      OpStore %293 %302 
                                                      OpBranch %297 
                                             %297 = OpLabel 
                                         f32 %303 = OpLoad %293 
                                Private f32* %304 = OpAccessChain %292 %29 
                                                      OpStore %304 %303 
                                Private f32* %306 = OpAccessChain %38 %29 
                                         f32 %307 = OpLoad %306 
                                Uniform f32* %309 = OpAccessChain %18 %308 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFMul %307 %310 
                                Private f32* %312 = OpAccessChain %292 %29 
                                         f32 %313 = OpLoad %312 
                                         f32 %314 = OpFAdd %311 %313 
                                Private f32* %315 = OpAccessChain %305 %29 
                                                      OpStore %315 %314 
                                Private f32* %316 = OpAccessChain %38 %29 
                                         f32 %317 = OpLoad %316 
                                Uniform f32* %318 = OpAccessChain %18 %308 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFMul %317 %319 
                                  Input f32* %321 = OpAccessChain %122 %21 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFAdd %320 %322 
                                Private f32* %324 = OpAccessChain %305 %21 
                                                      OpStore %324 %323 
                  read_only Texture2DSampled %330 = OpLoad %329 
                                       f32_4 %331 = OpLoad %305 
                                       f32_2 %332 = OpVectorShuffle %331 %331 0 1 
                                       f32_4 %333 = OpImageSampleImplicitLod %330 %332 
                                       f32_2 %334 = OpVectorShuffle %333 %333 2 3 
                                                      OpStore %325 %334 
                                       f32_4 %335 = OpLoad %141 
                                       f32_2 %336 = OpVectorShuffle %335 %335 0 1 
                                Uniform f32* %337 = OpAccessChain %18 %308 
                                         f32 %338 = OpLoad %337 
                                Uniform f32* %339 = OpAccessChain %18 %308 
                                         f32 %340 = OpLoad %339 
                                       f32_2 %341 = OpCompositeConstruct %338 %340 
                                         f32 %342 = OpCompositeExtract %341 0 
                                         f32 %343 = OpCompositeExtract %341 1 
                                       f32_2 %344 = OpCompositeConstruct %342 %343 
                                       f32_2 %345 = OpFMul %336 %344 
                                       f32_2 %346 = OpLoad %122 
                                       f32_2 %347 = OpVectorShuffle %346 %346 1 1 
                                       f32_2 %348 = OpFAdd %345 %347 
                                       f32_4 %349 = OpLoad %305 
                                       f32_4 %350 = OpVectorShuffle %349 %348 0 1 4 5 
                                                      OpStore %305 %350 
                                       f32_4 %351 = OpLoad %141 
                                       f32_2 %352 = OpVectorShuffle %351 %351 0 1 
                                Uniform f32* %353 = OpAccessChain %18 %308 
                                         f32 %354 = OpLoad %353 
                                Uniform f32* %355 = OpAccessChain %18 %308 
                                         f32 %356 = OpLoad %355 
                                       f32_2 %357 = OpCompositeConstruct %354 %356 
                                         f32 %358 = OpCompositeExtract %357 0 
                                         f32 %359 = OpCompositeExtract %357 1 
                                       f32_2 %360 = OpCompositeConstruct %358 %359 
                                       f32_2 %361 = OpFMul %352 %360 
                                       f32_4 %362 = OpLoad %292 
                                       f32_2 %363 = OpVectorShuffle %362 %362 0 0 
                                       f32_2 %364 = OpFAdd %361 %363 
                                       f32_4 %365 = OpLoad %305 
                                       f32_4 %366 = OpVectorShuffle %365 %364 4 5 2 3 
                                                      OpStore %305 %366 
                  read_only Texture2DSampled %367 = OpLoad %329 
                                       f32_4 %368 = OpLoad %305 
                                       f32_2 %369 = OpVectorShuffle %368 %368 0 2 
                                       f32_4 %370 = OpImageSampleImplicitLod %367 %369 
                                       f32_2 %371 = OpVectorShuffle %370 %370 0 3 
                                       f32_4 %372 = OpLoad %141 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 2 3 
                                                      OpStore %141 %373 
                  read_only Texture2DSampled %374 = OpLoad %329 
                                       f32_4 %375 = OpLoad %305 
                                       f32_2 %376 = OpVectorShuffle %375 %375 1 3 
                                       f32_4 %377 = OpImageSampleImplicitLod %374 %376 
                                       f32_2 %378 = OpVectorShuffle %377 %377 1 3 
                                       f32_4 %379 = OpLoad %141 
                                       f32_4 %380 = OpVectorShuffle %379 %378 0 1 4 5 
                                                      OpStore %141 %380 
                                Private f32* %383 = OpAccessChain %141 %382 
                                         f32 %384 = OpLoad %383 
                                Private f32* %385 = OpAccessChain %141 %21 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFAdd %384 %386 
                                Private f32* %388 = OpAccessChain %381 %29 
                                                      OpStore %388 %387 
                                Private f32* %389 = OpAccessChain %325 %21 
                                         f32 %390 = OpLoad %389 
                                Private f32* %391 = OpAccessChain %381 %29 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFAdd %390 %392 
                                Private f32* %394 = OpAccessChain %381 %29 
                                                      OpStore %394 %393 
                                Private f32* %395 = OpAccessChain %381 %29 
                                         f32 %396 = OpLoad %395 
                                         f32 %398 = OpFMul %396 %397 
                                Private f32* %399 = OpAccessChain %381 %29 
                                                      OpStore %399 %398 
                                  Input f32* %400 = OpAccessChain %122 %21 
                                         f32 %401 = OpLoad %400 
                                Private f32* %402 = OpAccessChain %292 %21 
                                                      OpStore %402 %401 
                  read_only Texture2DSampled %403 = OpLoad %329 
                                       f32_4 %404 = OpLoad %292 
                                       f32_2 %405 = OpVectorShuffle %404 %404 0 1 
                                       f32_4 %406 = OpImageSampleImplicitLod %403 %405 
                                                      OpStore %292 %406 
                                      bool_2 %408 = OpLoad %195 
                                        bool %409 = OpCompositeExtract %408 1 
                                                      OpSelectionMerge %411 None 
                                                      OpBranchConditional %409 %410 %414 
                                             %410 = OpLabel 
                                Private f32* %412 = OpAccessChain %381 %29 
                                         f32 %413 = OpLoad %412 
                                                      OpStore %407 %413 
                                                      OpBranch %411 
                                             %414 = OpLabel 
                                Private f32* %415 = OpAccessChain %292 %382 
                                         f32 %416 = OpLoad %415 
                                                      OpStore %407 %416 
                                                      OpBranch %411 
                                             %411 = OpLabel 
                                         f32 %417 = OpLoad %407 
                                Private f32* %418 = OpAccessChain %381 %29 
                                                      OpStore %418 %417 
                                Private f32* %420 = OpAccessChain %381 %29 
                                         f32 %421 = OpLoad %420 
                                  Input f32* %424 = OpAccessChain %423 %382 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpFMul %421 %425 
                                         f32 %428 = OpFAdd %426 %427 
                                                      OpStore %419 %428 
                                Private f32* %429 = OpAccessChain %381 %29 
                                         f32 %430 = OpLoad %429 
                                  Input f32* %431 = OpAccessChain %423 %382 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpFMul %430 %432 
                                Uniform f32* %435 = OpAccessChain %18 %434 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpFNegate %436 
                                         f32 %438 = OpFAdd %433 %437 
                                Private f32* %439 = OpAccessChain %381 %29 
                                                      OpStore %439 %438 
                                Private f32* %442 = OpAccessChain %381 %29 
                                         f32 %443 = OpLoad %442 
                                        bool %444 = OpFOrdLessThan %443 %213 
                                                      OpStore %441 %444 
                                        bool %445 = OpLoad %441 
                                         i32 %446 = OpSelect %445 %39 %20 
                                         i32 %448 = OpIMul %446 %447 
                                        bool %449 = OpINotEqual %448 %20 
                                                      OpSelectionMerge %451 None 
                                                      OpBranchConditional %449 %450 %451 
                                             %450 = OpLabel 
                                                      OpKill
                                             %451 = OpLabel 
                                         f32 %453 = OpLoad %419 
                                        bool %454 = OpFOrdLessThan %453 %213 
                                                      OpStore %441 %454 
                                        bool %455 = OpLoad %441 
                                         i32 %456 = OpSelect %455 %39 %20 
                                         i32 %457 = OpIMul %456 %447 
                                        bool %458 = OpINotEqual %457 %20 
                                                      OpSelectionMerge %460 None 
                                                      OpBranchConditional %458 %459 %460 
                                             %459 = OpLabel 
                                                      OpKill
                                             %460 = OpLabel 
                                      bool_2 %464 = OpLoad %195 
                                        bool %465 = OpCompositeExtract %464 1 
                                                      OpSelectionMerge %467 None 
                                                      OpBranchConditional %465 %466 %470 
                                             %466 = OpLabel 
                                       f32_4 %468 = OpLoad %141 
                                       f32_2 %469 = OpVectorShuffle %468 %468 0 2 
                                                      OpStore %463 %469 
                                                      OpBranch %467 
                                             %470 = OpLabel 
                                       f32_4 %471 = OpLoad %292 
                                       f32_2 %472 = OpVectorShuffle %471 %471 0 1 
                                                      OpStore %463 %472 
                                                      OpBranch %467 
                                             %467 = OpLabel 
                                       f32_2 %473 = OpLoad %463 
                                       f32_3 %474 = OpLoad %381 
                                       f32_3 %475 = OpVectorShuffle %474 %473 3 4 2 
                                                      OpStore %381 %475 
                                      bool_2 %477 = OpLoad %195 
                                        bool %478 = OpCompositeExtract %477 1 
                                                      OpSelectionMerge %480 None 
                                                      OpBranchConditional %478 %479 %483 
                                             %479 = OpLabel 
                                Private f32* %481 = OpAccessChain %325 %29 
                                         f32 %482 = OpLoad %481 
                                                      OpStore %476 %482 
                                                      OpBranch %480 
                                             %483 = OpLabel 
                                Private f32* %485 = OpAccessChain %292 %484 
                                         f32 %486 = OpLoad %485 
                                                      OpStore %476 %486 
                                                      OpBranch %480 
                                             %480 = OpLabel 
                                         f32 %487 = OpLoad %476 
                                Private f32* %488 = OpAccessChain %381 %484 
                                                      OpStore %488 %487 
                                       f32_3 %489 = OpLoad %381 
                                       f32_4 %490 = OpLoad %423 
                                       f32_3 %491 = OpVectorShuffle %490 %490 0 1 2 
                                       f32_3 %492 = OpFMul %489 %491 
                                                      OpStore %381 %492 
                                       f32_3 %494 = OpLoad %381 
                                       f32_3 %495 = OpExtInst %1 30 %494 
                                       f32_4 %496 = OpLoad %493 
                                       f32_4 %497 = OpVectorShuffle %496 %495 4 5 6 3 
                                                      OpStore %493 %497 
                                Uniform f32* %499 = OpAccessChain %18 %498 
                                         f32 %500 = OpLoad %499 
                                                      OpStore %130 %500 
                                         f32 %501 = OpLoad %130 
                                         f32 %502 = OpExtInst %1 43 %501 %213 %214 
                                                      OpStore %130 %502 
                                       f32_4 %503 = OpLoad %493 
                                       f32_3 %504 = OpVectorShuffle %503 %503 0 1 2 
                                         f32 %505 = OpLoad %130 
                                       f32_3 %506 = OpCompositeConstruct %505 %505 %505 
                                       f32_3 %507 = OpFMul %504 %506 
                                                      OpStore %9 %507 
                                       f32_3 %508 = OpLoad %9 
                                       f32_3 %509 = OpExtInst %1 29 %508 
                                                      OpStore %9 %509 
                                       f32_3 %510 = OpLoad %9 
                                Uniform f32* %512 = OpAccessChain %18 %511 
                                         f32 %513 = OpLoad %512 
                                Uniform f32* %514 = OpAccessChain %18 %511 
                                         f32 %515 = OpLoad %514 
                                Uniform f32* %516 = OpAccessChain %18 %511 
                                         f32 %517 = OpLoad %516 
                                       f32_3 %518 = OpCompositeConstruct %513 %515 %517 
                                         f32 %519 = OpCompositeExtract %518 0 
                                         f32 %520 = OpCompositeExtract %518 1 
                                         f32 %521 = OpCompositeExtract %518 2 
                                       f32_3 %522 = OpCompositeConstruct %519 %520 %521 
                                       f32_3 %523 = OpExtInst %1 37 %510 %522 
                                                      OpStore %9 %523 
                              Uniform u32_4* %528 = OpAccessChain %18 %526 
                                       u32_4 %529 = OpLoad %528 
                                         u32 %530 = OpCompositeExtract %529 0 
                                        bool %531 = OpINotEqual %530 %29 
                                                      OpSelectionMerge %533 None 
                                                      OpBranchConditional %531 %532 %535 
                                             %532 = OpLabel 
                                       f32_3 %534 = OpLoad %9 
                                                      OpStore %525 %534 
                                                      OpBranch %533 
                                             %535 = OpLabel 
                                                      OpStore %525 %536 
                                                      OpBranch %533 
                                             %533 = OpLabel 
                                       f32_3 %537 = OpLoad %525 
                                       f32_4 %538 = OpLoad %493 
                                       f32_4 %539 = OpVectorShuffle %538 %537 4 5 6 3 
                                                      OpStore %493 %539 
                              Uniform u32_4* %541 = OpAccessChain %18 %526 
                                       u32_4 %542 = OpLoad %541 
                                         u32 %543 = OpCompositeExtract %542 0 
                                        bool %544 = OpINotEqual %543 %29 
                                                      OpSelectionMerge %546 None 
                                                      OpBranchConditional %544 %545 %547 
                                             %545 = OpLabel 
                                                      OpStore %540 %214 
                                                      OpBranch %546 
                                             %547 = OpLabel 
                                                      OpStore %540 %213 
                                                      OpBranch %546 
                                             %546 = OpLabel 
                                         f32 %548 = OpLoad %540 
                                Private f32* %549 = OpAccessChain %493 %382 
                                                      OpStore %549 %548 
                              Uniform u32_4* %554 = OpAccessChain %18 %526 
                                       u32_4 %555 = OpLoad %554 
                                         u32 %556 = OpCompositeExtract %555 1 
                                        bool %557 = OpINotEqual %556 %29 
                                                      OpSelectionMerge %559 None 
                                                      OpBranchConditional %557 %558 %561 
                                             %558 = OpLabel 
                                                      OpStore %553 %560 
                                                      OpBranch %559 
                                             %561 = OpLabel 
                                       f32_4 %562 = OpLoad %493 
                                                      OpStore %553 %562 
                                                      OpBranch %559 
                                             %559 = OpLabel 
                                       f32_4 %563 = OpLoad %553 
                                                      OpStore %551 %563 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
}
Fallback "tk2d/CutoutVertexColor"
}