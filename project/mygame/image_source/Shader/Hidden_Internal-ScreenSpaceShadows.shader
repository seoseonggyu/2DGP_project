//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/Internal-ScreenSpaceShadows" {
Properties {
_ShadowMapTexture ("", any) = "" { }
}
SubShader {
 Tags { "ShadowmapFilter" = "HardShadow" }
 Pass {
  Tags { "ShadowmapFilter" = "HardShadow" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 13895
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
float u_xlat4;
float u_xlat8;
void main()
{
    u_xlat10_0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat4 = _ZBufferParams.x * u_xlat10_0.x + _ZBufferParams.y;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat8 = (-u_xlat4) + u_xlat10_0.x;
    u_xlat4 = unity_OrthoParams.w * u_xlat8 + u_xlat4;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat10_0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat4) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat4) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);
    u_xlat1 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb1));
    u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + u_xlat1.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat4 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat10_0.xxxx * vec4(u_xlat4) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 402
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %71 %74 %88 %390 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %28 ArrayStride 28 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpMemberDecorate %31 5 Offset 31 
                                                      OpMemberDecorate %31 6 RelaxedPrecision 
                                                      OpMemberDecorate %31 6 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %71 Location 71 
                                                      OpDecorate %74 Location 74 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %379 DescriptorSet 379 
                                                      OpDecorate %379 Binding 379 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %390 Location 390 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %401 DescriptorSet 401 
                                                      OpDecorate %401 Binding 401 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %26 = OpVariable Private 
                                          u32 %27 = OpConstant 4 
                                              %28 = OpTypeArray %7 %27 
                                          u32 %29 = OpConstant 16 
                                              %30 = OpTypeArray %7 %29 
                                              %31 = OpTypeStruct %7 %7 %28 %7 %7 %30 %7 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Uniform %6 
                                          u32 %42 = OpConstant 1 
                                          f32 %46 = OpConstant 3.674022E-40 
                                 Private f32* %49 = OpVariable Private 
                                          i32 %55 = OpConstant 1 
                                          u32 %56 = OpConstant 3 
                               Private f32_4* %68 = OpVariable Private 
                                              %69 = OpTypeVector %6 3 
                                              %70 = OpTypePointer Input %69 
                                 Input f32_3* %71 = OpVariable Input 
                                 Input f32_3* %74 = OpVariable Input 
                                 Input f32_3* %88 = OpVariable Input 
                                             %105 = OpTypePointer Uniform %7 
                                             %117 = OpTypeBool 
                                             %118 = OpTypeVector %117 4 
                                             %119 = OpTypePointer Private %118 
                             Private bool_4* %120 = OpVariable Private 
                                         i32 %123 = OpConstant 3 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_4 %128 = OpConstantComposite %127 %127 %127 %127 
                                       f32_4 %129 = OpConstantComposite %46 %46 %46 %46 
                             Private bool_4* %133 = OpVariable Private 
                                         i32 %136 = OpConstant 4 
                              Private f32_4* %140 = OpVariable Private 
                              Private f32_4* %144 = OpVariable Private 
                                         i32 %150 = OpConstant 2 
                                         i32 %174 = OpConstant 5 
                                         i32 %192 = OpConstant 6 
                                         i32 %204 = OpConstant 7 
                                             %223 = OpTypePointer Private %69 
                              Private f32_3* %224 = OpVariable Private 
                                         i32 %266 = OpConstant 9 
                                         i32 %271 = OpConstant 8 
                                         i32 %280 = OpConstant 10 
                                         i32 %289 = OpConstant 11 
                                         i32 %309 = OpConstant 13 
                                         i32 %314 = OpConstant 12 
                                         i32 %323 = OpConstant 14 
                                         i32 %334 = OpConstant 15 
                                Private f32* %356 = OpVariable Private 
                                         u32 %361 = OpConstant 2 
                                             %367 = OpTypePointer Function %69 
                                Private f32* %375 = OpVariable Private 
                                             %376 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %377 = OpTypeSampledImage %376 
                                             %378 = OpTypePointer UniformConstant %377 
 UniformConstant read_only Texture2DSampled* %379 = OpVariable UniformConstant 
                                Private f32* %384 = OpVariable Private 
                                             %389 = OpTypePointer Output %7 
                               Output f32_4* %390 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %401 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %368 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Uniform f32* %37 = OpAccessChain %33 %35 %22 
                                          f32 %38 = OpLoad %37 
                                 Private f32* %39 = OpAccessChain %9 %22 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFMul %38 %40 
                                 Uniform f32* %43 = OpAccessChain %33 %35 %42 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFAdd %41 %44 
                                                      OpStore %26 %45 
                                          f32 %47 = OpLoad %26 
                                          f32 %48 = OpFDiv %46 %47 
                                                      OpStore %26 %48 
                                          f32 %50 = OpLoad %26 
                                          f32 %51 = OpFNegate %50 
                                 Private f32* %52 = OpAccessChain %9 %22 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFAdd %51 %53 
                                                      OpStore %49 %54 
                                 Uniform f32* %57 = OpAccessChain %33 %55 %56 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpLoad %49 
                                          f32 %60 = OpFMul %58 %59 
                                          f32 %61 = OpLoad %26 
                                          f32 %62 = OpFAdd %60 %61 
                                                      OpStore %26 %62 
                                 Private f32* %63 = OpAccessChain %9 %22 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFNegate %64 
                                          f32 %66 = OpFAdd %65 %46 
                                 Private f32* %67 = OpAccessChain %9 %22 
                                                      OpStore %67 %66 
                                        f32_3 %72 = OpLoad %71 
                                        f32_3 %73 = OpFNegate %72 
                                        f32_3 %75 = OpLoad %74 
                                        f32_3 %76 = OpFAdd %73 %75 
                                        f32_4 %77 = OpLoad %68 
                                        f32_4 %78 = OpVectorShuffle %77 %76 4 5 6 3 
                                                      OpStore %68 %78 
                                        f32_4 %79 = OpLoad %9 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 0 0 
                                        f32_4 %81 = OpLoad %68 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpFMul %80 %82 
                                        f32_3 %84 = OpLoad %71 
                                        f32_3 %85 = OpFAdd %83 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpVectorShuffle %86 %85 4 1 5 6 
                                                      OpStore %9 %87 
                                        f32_3 %89 = OpLoad %88 
                                        f32_3 %90 = OpFNegate %89 
                                          f32 %91 = OpLoad %26 
                                        f32_3 %92 = OpCompositeConstruct %91 %91 %91 
                                        f32_3 %93 = OpFMul %90 %92 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 2 3 
                                        f32_3 %96 = OpFAdd %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 1 5 6 
                                                      OpStore %9 %98 
                                          f32 %99 = OpLoad %26 
                                       f32_3 %100 = OpCompositeConstruct %99 %99 %99 
                                       f32_3 %101 = OpLoad %88 
                                       f32_3 %102 = OpFMul %100 %101 
                                       f32_4 %103 = OpLoad %68 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %68 %104 
                              Uniform f32_4* %106 = OpAccessChain %33 %55 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 3 3 3 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 2 3 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %68 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFAdd %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %9 %116 
                                       f32_4 %121 = OpLoad %9 
                                       f32_4 %122 = OpVectorShuffle %121 %121 2 2 2 2 
                              Uniform f32_4* %124 = OpAccessChain %33 %123 
                                       f32_4 %125 = OpLoad %124 
                                      bool_4 %126 = OpFOrdGreaterThanEqual %122 %125 
                                                      OpStore %120 %126 
                                      bool_4 %130 = OpLoad %120 
                                       f32_4 %131 = OpSelect %130 %129 %128 
                                       f32_4 %132 = OpExtInst %1 46 %128 %129 %131 
                                                      OpStore %68 %132 
                                       f32_4 %134 = OpLoad %9 
                                       f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
                              Uniform f32_4* %137 = OpAccessChain %33 %136 
                                       f32_4 %138 = OpLoad %137 
                                      bool_4 %139 = OpFOrdLessThan %135 %138 
                                                      OpStore %133 %139 
                                      bool_4 %141 = OpLoad %133 
                                       f32_4 %142 = OpSelect %141 %129 %128 
                                       f32_4 %143 = OpExtInst %1 46 %128 %129 %142 
                                                      OpStore %140 %143 
                                       f32_4 %145 = OpLoad %68 
                                       f32_4 %146 = OpLoad %140 
                                       f32_4 %147 = OpFMul %145 %146 
                                                      OpStore %144 %147 
                                       f32_4 %148 = OpLoad %9 
                                       f32_4 %149 = OpVectorShuffle %148 %148 1 1 1 1 
                              Uniform f32_4* %151 = OpAccessChain %33 %150 %55 
                                       f32_4 %152 = OpLoad %151 
                                       f32_4 %153 = OpFMul %149 %152 
                                                      OpStore %140 %153 
                              Uniform f32_4* %154 = OpAccessChain %33 %150 %35 
                                       f32_4 %155 = OpLoad %154 
                                       f32_4 %156 = OpLoad %9 
                                       f32_4 %157 = OpVectorShuffle %156 %156 0 0 0 0 
                                       f32_4 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %140 
                                       f32_4 %160 = OpFAdd %158 %159 
                                                      OpStore %140 %160 
                              Uniform f32_4* %161 = OpAccessChain %33 %150 %150 
                                       f32_4 %162 = OpLoad %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %163 2 2 2 2 
                                       f32_4 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %140 
                                       f32_4 %167 = OpFAdd %165 %166 
                                                      OpStore %9 %167 
                                       f32_4 %168 = OpLoad %9 
                              Uniform f32_4* %169 = OpAccessChain %33 %150 %123 
                                       f32_4 %170 = OpLoad %169 
                                       f32_4 %171 = OpFAdd %168 %170 
                                                      OpStore %9 %171 
                                       f32_4 %172 = OpLoad %9 
                                       f32_3 %173 = OpVectorShuffle %172 %172 1 1 1 
                              Uniform f32_4* %175 = OpAccessChain %33 %174 %174 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %173 %177 
                                       f32_4 %179 = OpLoad %140 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %140 %180 
                              Uniform f32_4* %181 = OpAccessChain %33 %174 %136 
                                       f32_4 %182 = OpLoad %181 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 0 0 
                                       f32_3 %186 = OpFMul %183 %185 
                                       f32_4 %187 = OpLoad %140 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFAdd %186 %188 
                                       f32_4 %190 = OpLoad %140 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %140 %191 
                              Uniform f32_4* %193 = OpAccessChain %33 %174 %192 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_4 %196 = OpLoad %9 
                                       f32_3 %197 = OpVectorShuffle %196 %196 2 2 2 
                                       f32_3 %198 = OpFMul %195 %197 
                                       f32_4 %199 = OpLoad %140 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_3 %201 = OpFAdd %198 %200 
                                       f32_4 %202 = OpLoad %140 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %140 %203 
                              Uniform f32_4* %205 = OpAccessChain %33 %174 %204 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 3 3 3 
                                       f32_3 %210 = OpFMul %207 %209 
                                       f32_4 %211 = OpLoad %140 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFAdd %210 %212 
                                       f32_4 %214 = OpLoad %140 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 6 3 
                                                      OpStore %140 %215 
                                       f32_4 %216 = OpLoad %144 
                                       f32_3 %217 = OpVectorShuffle %216 %216 1 1 1 
                                       f32_4 %218 = OpLoad %140 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFMul %217 %219 
                                       f32_4 %221 = OpLoad %140 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
                                                      OpStore %140 %222 
                                       f32_4 %225 = OpLoad %9 
                                       f32_3 %226 = OpVectorShuffle %225 %225 1 1 1 
                              Uniform f32_4* %227 = OpAccessChain %33 %174 %55 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFMul %226 %229 
                                                      OpStore %224 %230 
                              Uniform f32_4* %231 = OpAccessChain %33 %174 %35 
                                       f32_4 %232 = OpLoad %231 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
                                       f32_3 %236 = OpFMul %233 %235 
                                       f32_3 %237 = OpLoad %224 
                                       f32_3 %238 = OpFAdd %236 %237 
                                                      OpStore %224 %238 
                              Uniform f32_4* %239 = OpAccessChain %33 %174 %150 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_4 %242 = OpLoad %9 
                                       f32_3 %243 = OpVectorShuffle %242 %242 2 2 2 
                                       f32_3 %244 = OpFMul %241 %243 
                                       f32_3 %245 = OpLoad %224 
                                       f32_3 %246 = OpFAdd %244 %245 
                                                      OpStore %224 %246 
                              Uniform f32_4* %247 = OpAccessChain %33 %174 %123 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_4 %250 = OpLoad %9 
                                       f32_3 %251 = OpVectorShuffle %250 %250 3 3 3 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_3 %253 = OpLoad %224 
                                       f32_3 %254 = OpFAdd %252 %253 
                                                      OpStore %224 %254 
                                       f32_3 %255 = OpLoad %224 
                                       f32_4 %256 = OpLoad %144 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 0 0 
                                       f32_3 %258 = OpFMul %255 %257 
                                       f32_4 %259 = OpLoad %140 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpFAdd %258 %260 
                                       f32_4 %262 = OpLoad %140 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %140 %263 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 1 1 1 
                              Uniform f32_4* %267 = OpAccessChain %33 %174 %266 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFMul %265 %269 
                                                      OpStore %224 %270 
                              Uniform f32_4* %272 = OpAccessChain %33 %174 %271 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_4 %275 = OpLoad %9 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 0 0 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %278 = OpLoad %224 
                                       f32_3 %279 = OpFAdd %277 %278 
                                                      OpStore %224 %279 
                              Uniform f32_4* %281 = OpAccessChain %33 %174 %280 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 2 2 2 
                                       f32_3 %286 = OpFMul %283 %285 
                                       f32_3 %287 = OpLoad %224 
                                       f32_3 %288 = OpFAdd %286 %287 
                                                      OpStore %224 %288 
                              Uniform f32_4* %290 = OpAccessChain %33 %174 %289 
                                       f32_4 %291 = OpLoad %290 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_4 %293 = OpLoad %9 
                                       f32_3 %294 = OpVectorShuffle %293 %293 3 3 3 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_3 %296 = OpLoad %224 
                                       f32_3 %297 = OpFAdd %295 %296 
                                                      OpStore %224 %297 
                                       f32_3 %298 = OpLoad %224 
                                       f32_4 %299 = OpLoad %144 
                                       f32_3 %300 = OpVectorShuffle %299 %299 2 2 2 
                                       f32_3 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %140 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_3 %304 = OpFAdd %301 %303 
                                       f32_4 %305 = OpLoad %140 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
                                                      OpStore %140 %306 
                                       f32_4 %307 = OpLoad %9 
                                       f32_3 %308 = OpVectorShuffle %307 %307 1 1 1 
                              Uniform f32_4* %310 = OpAccessChain %33 %174 %309 
                                       f32_4 %311 = OpLoad %310 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %313 = OpFMul %308 %312 
                                                      OpStore %224 %313 
                              Uniform f32_4* %315 = OpAccessChain %33 %174 %314 
                                       f32_4 %316 = OpLoad %315 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_4 %318 = OpLoad %9 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 0 0 
                                       f32_3 %320 = OpFMul %317 %319 
                                       f32_3 %321 = OpLoad %224 
                                       f32_3 %322 = OpFAdd %320 %321 
                                                      OpStore %224 %322 
                              Uniform f32_4* %324 = OpAccessChain %33 %174 %323 
                                       f32_4 %325 = OpLoad %324 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_4 %327 = OpLoad %9 
                                       f32_3 %328 = OpVectorShuffle %327 %327 2 2 2 
                                       f32_3 %329 = OpFMul %326 %328 
                                       f32_3 %330 = OpLoad %224 
                                       f32_3 %331 = OpFAdd %329 %330 
                                       f32_4 %332 = OpLoad %9 
                                       f32_4 %333 = OpVectorShuffle %332 %331 4 5 6 3 
                                                      OpStore %9 %333 
                              Uniform f32_4* %335 = OpAccessChain %33 %174 %334 
                                       f32_4 %336 = OpLoad %335 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 3 3 3 
                                       f32_3 %340 = OpFMul %337 %339 
                                       f32_4 %341 = OpLoad %9 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFAdd %340 %342 
                                       f32_4 %344 = OpLoad %9 
                                       f32_4 %345 = OpVectorShuffle %344 %343 4 5 6 3 
                                                      OpStore %9 %345 
                                       f32_4 %346 = OpLoad %9 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_4 %348 = OpLoad %144 
                                       f32_3 %349 = OpVectorShuffle %348 %348 3 3 3 
                                       f32_3 %350 = OpFMul %347 %349 
                                       f32_4 %351 = OpLoad %140 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpFAdd %350 %352 
                                       f32_4 %354 = OpLoad %9 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %9 %355 
                                       f32_4 %357 = OpLoad %144 
                                         f32 %358 = OpDot %357 %129 
                                                      OpStore %356 %358 
                                         f32 %359 = OpLoad %356 
                                         f32 %360 = OpFNegate %359 
                                Private f32* %362 = OpAccessChain %9 %361 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFAdd %360 %363 
                                                      OpStore %49 %364 
                                         f32 %365 = OpLoad %49 
                                         f32 %366 = OpFAdd %365 %46 
                                                      OpStore %49 %366 
                                       f32_4 %369 = OpLoad %9 
                                       f32_2 %370 = OpVectorShuffle %369 %369 0 1 
                                         f32 %371 = OpLoad %49 
                                         f32 %372 = OpCompositeExtract %370 0 
                                         f32 %373 = OpCompositeExtract %370 1 
                                       f32_3 %374 = OpCompositeConstruct %372 %373 %371 
                                                      OpStore %368 %374 
                  read_only Texture2DSampled %380 = OpLoad %379 
                                       f32_3 %381 = OpLoad %368 
                                         f32 %382 = OpCompositeExtract %381 2 
                                         f32 %383 = OpImageSampleDrefExplicitLod %380 %381 %382 Lod %6 
                                                      OpStore %375 %383 
                                Uniform f32* %385 = OpAccessChain %33 %192 %22 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFNegate %386 
                                         f32 %388 = OpFAdd %387 %46 
                                                      OpStore %384 %388 
                                         f32 %391 = OpLoad %375 
                                       f32_4 %392 = OpCompositeConstruct %391 %391 %391 %391 
                                         f32 %393 = OpLoad %384 
                                       f32_4 %394 = OpCompositeConstruct %393 %393 %393 %393 
                                       f32_4 %395 = OpFMul %392 %394 
                              Uniform f32_4* %396 = OpAccessChain %33 %192 
                                       f32_4 %397 = OpLoad %396 
                                       f32_4 %398 = OpVectorShuffle %397 %397 0 0 0 0 
                                       f32_4 %399 = OpFAdd %395 %398 
                                                      OpStore %390 %399 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
float u_xlat8;
void main()
{
    u_xlat10_0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat4 = _ZBufferParams.x * u_xlat10_0.x + _ZBufferParams.y;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat8 = (-u_xlat4) + u_xlat10_0.x;
    u_xlat4 = unity_OrthoParams.w * u_xlat8 + u_xlat4;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat10_0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat4) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat4) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat2.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat2.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat2.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb1));
    u_xlat5.xyz = u_xlat2.xyz + u_xlat1.yzw;
    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat5.yyy + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.zzz + u_xlat1.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat4 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat10_0.xxxx * vec4(u_xlat4) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 455
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %72 %75 %89 %443 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %28 ArrayStride 28 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpDecorate %31 ArrayStride 31 
                                                      OpMemberDecorate %32 0 Offset 32 
                                                      OpMemberDecorate %32 1 Offset 32 
                                                      OpMemberDecorate %32 2 Offset 32 
                                                      OpMemberDecorate %32 3 Offset 32 
                                                      OpMemberDecorate %32 4 Offset 32 
                                                      OpMemberDecorate %32 5 Offset 32 
                                                      OpMemberDecorate %32 6 RelaxedPrecision 
                                                      OpMemberDecorate %32 6 Offset 32 
                                                      OpDecorate %32 Block 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate %75 Location 75 
                                                      OpDecorate %89 Location 89 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %432 DescriptorSet 432 
                                                      OpDecorate %432 Binding 432 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %443 Location 443 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %454 DescriptorSet 454 
                                                      OpDecorate %454 Binding 454 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %26 = OpVariable Private 
                                          u32 %27 = OpConstant 4 
                                              %28 = OpTypeArray %7 %27 
                                              %29 = OpTypeArray %7 %27 
                                          u32 %30 = OpConstant 16 
                                              %31 = OpTypeArray %7 %30 
                                              %32 = OpTypeStruct %7 %7 %28 %29 %7 %31 %7 
                                              %33 = OpTypePointer Uniform %32 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4;}* %34 = OpVariable Uniform 
                                              %35 = OpTypeInt 32 1 
                                          i32 %36 = OpConstant 0 
                                              %37 = OpTypePointer Uniform %6 
                                          u32 %43 = OpConstant 1 
                                          f32 %47 = OpConstant 3.674022E-40 
                                 Private f32* %50 = OpVariable Private 
                                          i32 %56 = OpConstant 1 
                                          u32 %57 = OpConstant 3 
                               Private f32_4* %69 = OpVariable Private 
                                              %70 = OpTypeVector %6 3 
                                              %71 = OpTypePointer Input %70 
                                 Input f32_3* %72 = OpVariable Input 
                                 Input f32_3* %75 = OpVariable Input 
                                 Input f32_3* %89 = OpVariable Input 
                                             %106 = OpTypePointer Uniform %7 
                                         i32 %120 = OpConstant 2 
                                         i32 %139 = OpConstant 3 
                                             %158 = OpTypePointer Private %70 
                              Private f32_3* %159 = OpVariable Private 
                                         u32 %181 = OpConstant 2 
                                             %194 = OpTypeBool 
                                             %195 = OpTypeVector %194 4 
                                             %196 = OpTypePointer Private %195 
                             Private bool_4* %197 = OpVariable Private 
                                         i32 %199 = OpConstant 4 
                              Private f32_3* %203 = OpVariable Private 
                                             %204 = OpTypePointer Function %6 
                                         f32 %210 = OpConstant 3.674022E-40 
                                         f32 %212 = OpConstant 3.674022E-40 
                                         f32 %231 = OpConstant 3.674022E-40 
                                       f32_4 %232 = OpConstantComposite %231 %231 %231 %231 
                                       f32_4 %233 = OpConstantComposite %47 %47 %47 %47 
                              Private f32_3* %241 = OpVariable Private 
                                       f32_3 %243 = OpConstantComposite %231 %231 %231 
                                         i32 %247 = OpConstant 5 
                                         i32 %260 = OpConstant 6 
                                         i32 %269 = OpConstant 7 
                              Private f32_3* %282 = OpVariable Private 
                                         i32 %321 = OpConstant 9 
                                         i32 %326 = OpConstant 8 
                                         i32 %335 = OpConstant 10 
                                         i32 %344 = OpConstant 11 
                                         i32 %361 = OpConstant 13 
                                         i32 %366 = OpConstant 12 
                                         i32 %375 = OpConstant 14 
                                         i32 %386 = OpConstant 15 
                                Private f32* %410 = OpVariable Private 
                                             %420 = OpTypePointer Function %70 
                                Private f32* %428 = OpVariable Private 
                                             %429 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %430 = OpTypeSampledImage %429 
                                             %431 = OpTypePointer UniformConstant %430 
 UniformConstant read_only Texture2DSampled* %432 = OpVariable UniformConstant 
                                             %442 = OpTypePointer Output %7 
                               Output f32_4* %443 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %454 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %205 = OpVariable Function 
                               Function f32* %215 = OpVariable Function 
                               Function f32* %223 = OpVariable Function 
                             Function f32_3* %421 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Uniform f32* %38 = OpAccessChain %34 %36 %22 
                                          f32 %39 = OpLoad %38 
                                 Private f32* %40 = OpAccessChain %9 %22 
                                          f32 %41 = OpLoad %40 
                                          f32 %42 = OpFMul %39 %41 
                                 Uniform f32* %44 = OpAccessChain %34 %36 %43 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFAdd %42 %45 
                                                      OpStore %26 %46 
                                          f32 %48 = OpLoad %26 
                                          f32 %49 = OpFDiv %47 %48 
                                                      OpStore %26 %49 
                                          f32 %51 = OpLoad %26 
                                          f32 %52 = OpFNegate %51 
                                 Private f32* %53 = OpAccessChain %9 %22 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFAdd %52 %54 
                                                      OpStore %50 %55 
                                 Uniform f32* %58 = OpAccessChain %34 %56 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpLoad %50 
                                          f32 %61 = OpFMul %59 %60 
                                          f32 %62 = OpLoad %26 
                                          f32 %63 = OpFAdd %61 %62 
                                                      OpStore %26 %63 
                                 Private f32* %64 = OpAccessChain %9 %22 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFNegate %65 
                                          f32 %67 = OpFAdd %66 %47 
                                 Private f32* %68 = OpAccessChain %9 %22 
                                                      OpStore %68 %67 
                                        f32_3 %73 = OpLoad %72 
                                        f32_3 %74 = OpFNegate %73 
                                        f32_3 %76 = OpLoad %75 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %69 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %69 %79 
                                        f32_4 %80 = OpLoad %9 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 0 0 
                                        f32_4 %82 = OpLoad %69 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                        f32_3 %84 = OpFMul %81 %83 
                                        f32_3 %85 = OpLoad %72 
                                        f32_3 %86 = OpFAdd %84 %85 
                                        f32_4 %87 = OpLoad %9 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 1 5 6 
                                                      OpStore %9 %88 
                                        f32_3 %90 = OpLoad %89 
                                        f32_3 %91 = OpFNegate %90 
                                          f32 %92 = OpLoad %26 
                                        f32_3 %93 = OpCompositeConstruct %92 %92 %92 
                                        f32_3 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 2 3 
                                        f32_3 %97 = OpFAdd %94 %96 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 1 5 6 
                                                      OpStore %9 %99 
                                         f32 %100 = OpLoad %26 
                                       f32_3 %101 = OpCompositeConstruct %100 %100 %100 
                                       f32_3 %102 = OpLoad %89 
                                       f32_3 %103 = OpFMul %101 %102 
                                       f32_4 %104 = OpLoad %69 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 6 3 
                                                      OpStore %69 %105 
                              Uniform f32_4* %107 = OpAccessChain %34 %56 
                                       f32_4 %108 = OpLoad %107 
                                       f32_3 %109 = OpVectorShuffle %108 %108 3 3 3 
                                       f32_4 %110 = OpLoad %9 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 2 3 
                                       f32_3 %112 = OpFMul %109 %111 
                                       f32_4 %113 = OpLoad %69 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_3 %115 = OpFAdd %112 %114 
                                       f32_4 %116 = OpLoad %9 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %121 = OpAccessChain %34 %120 %56 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpFMul %119 %122 
                                                      OpStore %69 %123 
                              Uniform f32_4* %124 = OpAccessChain %34 %120 %36 
                                       f32_4 %125 = OpLoad %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpVectorShuffle %126 %126 0 0 0 0 
                                       f32_4 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %69 
                                       f32_4 %130 = OpFAdd %128 %129 
                                                      OpStore %69 %130 
                              Uniform f32_4* %131 = OpAccessChain %34 %120 %120 
                                       f32_4 %132 = OpLoad %131 
                                       f32_4 %133 = OpLoad %9 
                                       f32_4 %134 = OpVectorShuffle %133 %133 2 2 2 2 
                                       f32_4 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %69 
                                       f32_4 %137 = OpFAdd %135 %136 
                                                      OpStore %9 %137 
                                       f32_4 %138 = OpLoad %9 
                              Uniform f32_4* %140 = OpAccessChain %34 %120 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpFAdd %138 %141 
                                                      OpStore %9 %142 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                              Uniform f32_4* %145 = OpAccessChain %34 %139 %36 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFNegate %147 
                                       f32_3 %149 = OpFAdd %144 %148 
                                       f32_4 %150 = OpLoad %69 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %69 %151 
                                       f32_4 %152 = OpLoad %69 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_4 %154 = OpLoad %69 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                         f32 %156 = OpDot %153 %155 
                                Private f32* %157 = OpAccessChain %69 %22 
                                                      OpStore %157 %156 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                              Uniform f32_4* %162 = OpAccessChain %34 %139 %56 
                                       f32_4 %163 = OpLoad %162 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                       f32_3 %165 = OpFNegate %164 
                                       f32_3 %166 = OpFAdd %161 %165 
                                                      OpStore %159 %166 
                                       f32_3 %167 = OpLoad %159 
                                       f32_3 %168 = OpLoad %159 
                                         f32 %169 = OpDot %167 %168 
                                Private f32* %170 = OpAccessChain %69 %43 
                                                      OpStore %170 %169 
                                       f32_4 %171 = OpLoad %9 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                              Uniform f32_4* %173 = OpAccessChain %34 %139 %120 
                                       f32_4 %174 = OpLoad %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFNegate %175 
                                       f32_3 %177 = OpFAdd %172 %176 
                                                      OpStore %159 %177 
                                       f32_3 %178 = OpLoad %159 
                                       f32_3 %179 = OpLoad %159 
                                         f32 %180 = OpDot %178 %179 
                                Private f32* %182 = OpAccessChain %69 %181 
                                                      OpStore %182 %180 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                              Uniform f32_4* %185 = OpAccessChain %34 %139 %139 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                       f32_3 %188 = OpFNegate %187 
                                       f32_3 %189 = OpFAdd %184 %188 
                                                      OpStore %159 %189 
                                       f32_3 %190 = OpLoad %159 
                                       f32_3 %191 = OpLoad %159 
                                         f32 %192 = OpDot %190 %191 
                                Private f32* %193 = OpAccessChain %69 %57 
                                                      OpStore %193 %192 
                                       f32_4 %198 = OpLoad %69 
                              Uniform f32_4* %200 = OpAccessChain %34 %199 
                                       f32_4 %201 = OpLoad %200 
                                      bool_4 %202 = OpFOrdLessThan %198 %201 
                                                      OpStore %197 %202 
                                      bool_4 %206 = OpLoad %197 
                                        bool %207 = OpCompositeExtract %206 0 
                                                      OpSelectionMerge %209 None 
                                                      OpBranchConditional %207 %208 %211 
                                             %208 = OpLabel 
                                                      OpStore %205 %210 
                                                      OpBranch %209 
                                             %211 = OpLabel 
                                                      OpStore %205 %212 
                                                      OpBranch %209 
                                             %209 = OpLabel 
                                         f32 %213 = OpLoad %205 
                                Private f32* %214 = OpAccessChain %203 %22 
                                                      OpStore %214 %213 
                                      bool_4 %216 = OpLoad %197 
                                        bool %217 = OpCompositeExtract %216 1 
                                                      OpSelectionMerge %219 None 
                                                      OpBranchConditional %217 %218 %220 
                                             %218 = OpLabel 
                                                      OpStore %215 %210 
                                                      OpBranch %219 
                                             %220 = OpLabel 
                                                      OpStore %215 %212 
                                                      OpBranch %219 
                                             %219 = OpLabel 
                                         f32 %221 = OpLoad %215 
                                Private f32* %222 = OpAccessChain %203 %43 
                                                      OpStore %222 %221 
                                      bool_4 %224 = OpLoad %197 
                                        bool %225 = OpCompositeExtract %224 2 
                                                      OpSelectionMerge %227 None 
                                                      OpBranchConditional %225 %226 %228 
                                             %226 = OpLabel 
                                                      OpStore %223 %210 
                                                      OpBranch %227 
                                             %228 = OpLabel 
                                                      OpStore %223 %212 
                                                      OpBranch %227 
                                             %227 = OpLabel 
                                         f32 %229 = OpLoad %223 
                                Private f32* %230 = OpAccessChain %203 %181 
                                                      OpStore %230 %229 
                                      bool_4 %234 = OpLoad %197 
                                       f32_4 %235 = OpSelect %234 %233 %232 
                                       f32_4 %236 = OpExtInst %1 46 %232 %233 %235 
                                                      OpStore %69 %236 
                                       f32_3 %237 = OpLoad %203 
                                       f32_4 %238 = OpLoad %69 
                                       f32_3 %239 = OpVectorShuffle %238 %238 1 2 3 
                                       f32_3 %240 = OpFAdd %237 %239 
                                                      OpStore %203 %240 
                                       f32_3 %242 = OpLoad %203 
                                       f32_3 %244 = OpExtInst %1 40 %242 %243 
                                                      OpStore %241 %244 
                                       f32_4 %245 = OpLoad %9 
                                       f32_3 %246 = OpVectorShuffle %245 %245 1 1 1 
                              Uniform f32_4* %248 = OpAccessChain %34 %247 %247 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpFMul %246 %250 
                                                      OpStore %159 %251 
                              Uniform f32_4* %252 = OpAccessChain %34 %247 %199 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_4 %255 = OpLoad %9 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 0 0 
                                       f32_3 %257 = OpFMul %254 %256 
                                       f32_3 %258 = OpLoad %159 
                                       f32_3 %259 = OpFAdd %257 %258 
                                                      OpStore %159 %259 
                              Uniform f32_4* %261 = OpAccessChain %34 %247 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 2 2 2 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %267 = OpLoad %159 
                                       f32_3 %268 = OpFAdd %266 %267 
                                                      OpStore %159 %268 
                              Uniform f32_4* %270 = OpAccessChain %34 %247 %269 
                                       f32_4 %271 = OpLoad %270 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 3 3 3 
                                       f32_3 %275 = OpFMul %272 %274 
                                       f32_3 %276 = OpLoad %159 
                                       f32_3 %277 = OpFAdd %275 %276 
                                                      OpStore %159 %277 
                                       f32_3 %278 = OpLoad %241 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 0 0 
                                       f32_3 %280 = OpLoad %159 
                                       f32_3 %281 = OpFMul %279 %280 
                                                      OpStore %159 %281 
                                       f32_4 %283 = OpLoad %9 
                                       f32_3 %284 = OpVectorShuffle %283 %283 1 1 1 
                              Uniform f32_4* %285 = OpAccessChain %34 %247 %56 
                                       f32_4 %286 = OpLoad %285 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpFMul %284 %287 
                                                      OpStore %282 %288 
                              Uniform f32_4* %289 = OpAccessChain %34 %247 %36 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_4 %292 = OpLoad %9 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 0 0 
                                       f32_3 %294 = OpFMul %291 %293 
                                       f32_3 %295 = OpLoad %282 
                                       f32_3 %296 = OpFAdd %294 %295 
                                                      OpStore %282 %296 
                              Uniform f32_4* %297 = OpAccessChain %34 %247 %120 
                                       f32_4 %298 = OpLoad %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_4 %300 = OpLoad %9 
                                       f32_3 %301 = OpVectorShuffle %300 %300 2 2 2 
                                       f32_3 %302 = OpFMul %299 %301 
                                       f32_3 %303 = OpLoad %282 
                                       f32_3 %304 = OpFAdd %302 %303 
                                                      OpStore %282 %304 
                              Uniform f32_4* %305 = OpAccessChain %34 %247 %139 
                                       f32_4 %306 = OpLoad %305 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_4 %308 = OpLoad %9 
                                       f32_3 %309 = OpVectorShuffle %308 %308 3 3 3 
                                       f32_3 %310 = OpFMul %307 %309 
                                       f32_3 %311 = OpLoad %282 
                                       f32_3 %312 = OpFAdd %310 %311 
                                                      OpStore %282 %312 
                                       f32_3 %313 = OpLoad %282 
                                       f32_4 %314 = OpLoad %69 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 0 0 
                                       f32_3 %316 = OpFMul %313 %315 
                                       f32_3 %317 = OpLoad %159 
                                       f32_3 %318 = OpFAdd %316 %317 
                                                      OpStore %159 %318 
                                       f32_4 %319 = OpLoad %9 
                                       f32_3 %320 = OpVectorShuffle %319 %319 1 1 1 
                              Uniform f32_4* %322 = OpAccessChain %34 %247 %321 
                                       f32_4 %323 = OpLoad %322 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                                       f32_3 %325 = OpFMul %320 %324 
                                                      OpStore %282 %325 
                              Uniform f32_4* %327 = OpAccessChain %34 %247 %326 
                                       f32_4 %328 = OpLoad %327 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                       f32_4 %330 = OpLoad %9 
                                       f32_3 %331 = OpVectorShuffle %330 %330 0 0 0 
                                       f32_3 %332 = OpFMul %329 %331 
                                       f32_3 %333 = OpLoad %282 
                                       f32_3 %334 = OpFAdd %332 %333 
                                                      OpStore %282 %334 
                              Uniform f32_4* %336 = OpAccessChain %34 %247 %335 
                                       f32_4 %337 = OpLoad %336 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_4 %339 = OpLoad %9 
                                       f32_3 %340 = OpVectorShuffle %339 %339 2 2 2 
                                       f32_3 %341 = OpFMul %338 %340 
                                       f32_3 %342 = OpLoad %282 
                                       f32_3 %343 = OpFAdd %341 %342 
                                                      OpStore %282 %343 
                              Uniform f32_4* %345 = OpAccessChain %34 %247 %344 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_4 %348 = OpLoad %9 
                                       f32_3 %349 = OpVectorShuffle %348 %348 3 3 3 
                                       f32_3 %350 = OpFMul %347 %349 
                                       f32_3 %351 = OpLoad %282 
                                       f32_3 %352 = OpFAdd %350 %351 
                                                      OpStore %282 %352 
                                       f32_3 %353 = OpLoad %282 
                                       f32_3 %354 = OpLoad %241 
                                       f32_3 %355 = OpVectorShuffle %354 %354 1 1 1 
                                       f32_3 %356 = OpFMul %353 %355 
                                       f32_3 %357 = OpLoad %159 
                                       f32_3 %358 = OpFAdd %356 %357 
                                                      OpStore %159 %358 
                                       f32_4 %359 = OpLoad %9 
                                       f32_3 %360 = OpVectorShuffle %359 %359 1 1 1 
                              Uniform f32_4* %362 = OpAccessChain %34 %247 %361 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_3 %365 = OpFMul %360 %364 
                                                      OpStore %282 %365 
                              Uniform f32_4* %367 = OpAccessChain %34 %247 %366 
                                       f32_4 %368 = OpLoad %367 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_4 %370 = OpLoad %9 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 0 0 
                                       f32_3 %372 = OpFMul %369 %371 
                                       f32_3 %373 = OpLoad %282 
                                       f32_3 %374 = OpFAdd %372 %373 
                                                      OpStore %282 %374 
                              Uniform f32_4* %376 = OpAccessChain %34 %247 %375 
                                       f32_4 %377 = OpLoad %376 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 2 2 2 
                                       f32_3 %381 = OpFMul %378 %380 
                                       f32_3 %382 = OpLoad %282 
                                       f32_3 %383 = OpFAdd %381 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %9 %385 
                              Uniform f32_4* %387 = OpAccessChain %34 %247 %386 
                                       f32_4 %388 = OpLoad %387 
                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
                                       f32_4 %390 = OpLoad %9 
                                       f32_3 %391 = OpVectorShuffle %390 %390 3 3 3 
                                       f32_3 %392 = OpFMul %389 %391 
                                       f32_4 %393 = OpLoad %9 
                                       f32_3 %394 = OpVectorShuffle %393 %393 0 1 2 
                                       f32_3 %395 = OpFAdd %392 %394 
                                       f32_4 %396 = OpLoad %9 
                                       f32_4 %397 = OpVectorShuffle %396 %395 4 5 6 3 
                                                      OpStore %9 %397 
                                       f32_4 %398 = OpLoad %9 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                       f32_3 %400 = OpLoad %241 
                                       f32_3 %401 = OpVectorShuffle %400 %400 2 2 2 
                                       f32_3 %402 = OpFMul %399 %401 
                                       f32_3 %403 = OpLoad %159 
                                       f32_3 %404 = OpFAdd %402 %403 
                                       f32_4 %405 = OpLoad %9 
                                       f32_4 %406 = OpVectorShuffle %405 %404 4 5 6 3 
                                                      OpStore %9 %406 
                                       f32_3 %407 = OpLoad %241 
                                       f32_4 %408 = OpLoad %69 
                                       f32_4 %409 = OpVectorShuffle %408 %407 0 4 5 6 
                                                      OpStore %69 %409 
                                       f32_4 %411 = OpLoad %69 
                                         f32 %412 = OpDot %411 %233 
                                                      OpStore %410 %412 
                                         f32 %413 = OpLoad %410 
                                         f32 %414 = OpFNegate %413 
                                Private f32* %415 = OpAccessChain %9 %181 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpFAdd %414 %416 
                                                      OpStore %50 %417 
                                         f32 %418 = OpLoad %50 
                                         f32 %419 = OpFAdd %418 %47 
                                                      OpStore %50 %419 
                                       f32_4 %422 = OpLoad %9 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                         f32 %424 = OpLoad %50 
                                         f32 %425 = OpCompositeExtract %423 0 
                                         f32 %426 = OpCompositeExtract %423 1 
                                       f32_3 %427 = OpCompositeConstruct %425 %426 %424 
                                                      OpStore %421 %427 
                  read_only Texture2DSampled %433 = OpLoad %432 
                                       f32_3 %434 = OpLoad %421 
                                         f32 %435 = OpCompositeExtract %434 2 
                                         f32 %436 = OpImageSampleDrefExplicitLod %433 %434 %435 Lod %6 
                                                      OpStore %428 %436 
                                Uniform f32* %437 = OpAccessChain %34 %260 %22 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpFNegate %438 
                                         f32 %440 = OpFAdd %439 %47 
                                Private f32* %441 = OpAccessChain %203 %22 
                                                      OpStore %441 %440 
                                         f32 %444 = OpLoad %428 
                                       f32_4 %445 = OpCompositeConstruct %444 %444 %444 %444 
                                       f32_3 %446 = OpLoad %203 
                                       f32_4 %447 = OpVectorShuffle %446 %446 0 0 0 0 
                                       f32_4 %448 = OpFMul %445 %447 
                              Uniform f32_4* %449 = OpAccessChain %34 %260 
                                       f32_4 %450 = OpLoad %449 
                                       f32_4 %451 = OpVectorShuffle %450 %450 0 0 0 0 
                                       f32_4 %452 = OpFAdd %448 %451 
                                                      OpStore %443 %452 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat4;
void main()
{
    u_xlat10_0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat2 = _ZBufferParams.x * u_xlat10_0.x + _ZBufferParams.y;
    u_xlat2 = float(1.0) / u_xlat2;
    u_xlat4 = (-u_xlat2) + u_xlat10_0.x;
    u_xlat2 = unity_OrthoParams.w * u_xlat4 + u_xlat2;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat10_0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat10_0.xxxx * vec4(u_xlat2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %71 %74 %88 %210 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %28 ArrayStride 28 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %71 Location 71 
                                                      OpDecorate %74 Location 74 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %197 DescriptorSet 197 
                                                      OpDecorate %197 Binding 197 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %210 Location 210 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %221 DescriptorSet 221 
                                                      OpDecorate %221 Binding 221 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %26 = OpVariable Private 
                                          u32 %27 = OpConstant 4 
                                              %28 = OpTypeArray %7 %27 
                                          u32 %29 = OpConstant 16 
                                              %30 = OpTypeArray %7 %29 
                                              %31 = OpTypeStruct %7 %7 %28 %30 %7 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Uniform %6 
                                          u32 %42 = OpConstant 1 
                                          f32 %46 = OpConstant 3.674022E-40 
                                 Private f32* %49 = OpVariable Private 
                                          i32 %55 = OpConstant 1 
                                          u32 %56 = OpConstant 3 
                               Private f32_4* %68 = OpVariable Private 
                                              %69 = OpTypeVector %6 3 
                                              %70 = OpTypePointer Input %69 
                                 Input f32_3* %71 = OpVariable Input 
                                 Input f32_3* %74 = OpVariable Input 
                                 Input f32_3* %88 = OpVariable Input 
                                             %105 = OpTypePointer Uniform %7 
                                         i32 %119 = OpConstant 2 
                                         i32 %138 = OpConstant 3 
                                             %183 = OpTypePointer Function %69 
                                         u32 %187 = OpConstant 2 
                                Private f32* %193 = OpVariable Private 
                                             %194 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %195 = OpTypeSampledImage %194 
                                             %196 = OpTypePointer UniformConstant %195 
 UniformConstant read_only Texture2DSampled* %197 = OpVariable UniformConstant 
                                         f32 %200 = OpConstant 3.674022E-40 
                                Private f32* %203 = OpVariable Private 
                                         i32 %204 = OpConstant 4 
                                             %209 = OpTypePointer Output %7 
                               Output f32_4* %210 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %221 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %184 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Uniform f32* %37 = OpAccessChain %33 %35 %22 
                                          f32 %38 = OpLoad %37 
                                 Private f32* %39 = OpAccessChain %9 %22 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFMul %38 %40 
                                 Uniform f32* %43 = OpAccessChain %33 %35 %42 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFAdd %41 %44 
                                                      OpStore %26 %45 
                                          f32 %47 = OpLoad %26 
                                          f32 %48 = OpFDiv %46 %47 
                                                      OpStore %26 %48 
                                          f32 %50 = OpLoad %26 
                                          f32 %51 = OpFNegate %50 
                                 Private f32* %52 = OpAccessChain %9 %22 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFAdd %51 %53 
                                                      OpStore %49 %54 
                                 Uniform f32* %57 = OpAccessChain %33 %55 %56 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpLoad %49 
                                          f32 %60 = OpFMul %58 %59 
                                          f32 %61 = OpLoad %26 
                                          f32 %62 = OpFAdd %60 %61 
                                                      OpStore %26 %62 
                                 Private f32* %63 = OpAccessChain %9 %22 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFNegate %64 
                                          f32 %66 = OpFAdd %65 %46 
                                 Private f32* %67 = OpAccessChain %9 %22 
                                                      OpStore %67 %66 
                                        f32_3 %72 = OpLoad %71 
                                        f32_3 %73 = OpFNegate %72 
                                        f32_3 %75 = OpLoad %74 
                                        f32_3 %76 = OpFAdd %73 %75 
                                        f32_4 %77 = OpLoad %68 
                                        f32_4 %78 = OpVectorShuffle %77 %76 4 5 6 3 
                                                      OpStore %68 %78 
                                        f32_4 %79 = OpLoad %9 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 0 0 
                                        f32_4 %81 = OpLoad %68 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpFMul %80 %82 
                                        f32_3 %84 = OpLoad %71 
                                        f32_3 %85 = OpFAdd %83 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpVectorShuffle %86 %85 4 1 5 6 
                                                      OpStore %9 %87 
                                        f32_3 %89 = OpLoad %88 
                                        f32_3 %90 = OpFNegate %89 
                                          f32 %91 = OpLoad %26 
                                        f32_3 %92 = OpCompositeConstruct %91 %91 %91 
                                        f32_3 %93 = OpFMul %90 %92 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 2 3 
                                        f32_3 %96 = OpFAdd %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 1 5 6 
                                                      OpStore %9 %98 
                                          f32 %99 = OpLoad %26 
                                       f32_3 %100 = OpCompositeConstruct %99 %99 %99 
                                       f32_3 %101 = OpLoad %88 
                                       f32_3 %102 = OpFMul %100 %101 
                                       f32_4 %103 = OpLoad %68 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %68 %104 
                              Uniform f32_4* %106 = OpAccessChain %33 %55 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 3 3 3 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 2 3 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %68 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFAdd %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %117 1 1 1 1 
                              Uniform f32_4* %120 = OpAccessChain %33 %119 %55 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFMul %118 %121 
                                                      OpStore %68 %122 
                              Uniform f32_4* %123 = OpAccessChain %33 %119 %35 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_4 %126 = OpVectorShuffle %125 %125 0 0 0 0 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %68 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %68 %129 
                              Uniform f32_4* %130 = OpAccessChain %33 %119 %119 
                                       f32_4 %131 = OpLoad %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %132 2 2 2 2 
                                       f32_4 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %68 
                                       f32_4 %136 = OpFAdd %134 %135 
                                                      OpStore %9 %136 
                                       f32_4 %137 = OpLoad %9 
                              Uniform f32_4* %139 = OpAccessChain %33 %119 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFAdd %137 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                                       f32_3 %143 = OpVectorShuffle %142 %142 1 1 1 
                              Uniform f32_4* %144 = OpAccessChain %33 %138 %55 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %143 %146 
                                       f32_4 %148 = OpLoad %68 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %68 %149 
                              Uniform f32_4* %150 = OpAccessChain %33 %138 %35 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 0 0 
                                       f32_3 %155 = OpFMul %152 %154 
                                       f32_4 %156 = OpLoad %68 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFAdd %155 %157 
                                       f32_4 %159 = OpLoad %68 
                                       f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                                      OpStore %68 %160 
                              Uniform f32_4* %161 = OpAccessChain %33 %138 %119 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 2 2 2 
                                       f32_3 %166 = OpFMul %163 %165 
                                       f32_4 %167 = OpLoad %68 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFAdd %166 %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_4 %171 = OpVectorShuffle %170 %169 4 5 6 3 
                                                      OpStore %9 %171 
                              Uniform f32_4* %172 = OpAccessChain %33 %138 %138 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_4 %175 = OpLoad %9 
                                       f32_3 %176 = OpVectorShuffle %175 %175 3 3 3 
                                       f32_3 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %9 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFAdd %177 %179 
                                       f32_4 %181 = OpLoad %9 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %9 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_2 %186 = OpVectorShuffle %185 %185 0 1 
                                Private f32* %188 = OpAccessChain %9 %187 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpCompositeExtract %186 0 
                                         f32 %191 = OpCompositeExtract %186 1 
                                       f32_3 %192 = OpCompositeConstruct %190 %191 %189 
                                                      OpStore %184 %192 
                  read_only Texture2DSampled %198 = OpLoad %197 
                                       f32_3 %199 = OpLoad %184 
                                         f32 %201 = OpCompositeExtract %199 2 
                                         f32 %202 = OpImageSampleDrefExplicitLod %198 %199 %201 Lod %6 
                                                      OpStore %193 %202 
                                Uniform f32* %205 = OpAccessChain %33 %204 %22 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFNegate %206 
                                         f32 %208 = OpFAdd %207 %46 
                                                      OpStore %203 %208 
                                         f32 %211 = OpLoad %193 
                                       f32_4 %212 = OpCompositeConstruct %211 %211 %211 %211 
                                         f32 %213 = OpLoad %203 
                                       f32_4 %214 = OpCompositeConstruct %213 %213 %213 %213 
                                       f32_4 %215 = OpFMul %212 %214 
                              Uniform f32_4* %216 = OpAccessChain %33 %204 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpVectorShuffle %217 %217 0 0 0 0 
                                       f32_4 %219 = OpFAdd %215 %218 
                                                      OpStore %210 %219 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat4;
void main()
{
    u_xlat10_0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat2 = _ZBufferParams.x * u_xlat10_0.x + _ZBufferParams.y;
    u_xlat2 = float(1.0) / u_xlat2;
    u_xlat4 = (-u_xlat2) + u_xlat10_0.x;
    u_xlat2 = unity_OrthoParams.w * u_xlat4 + u_xlat2;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat10_0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat10_0.xxxx * vec4(u_xlat2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %71 %74 %88 %210 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %28 ArrayStride 28 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %71 Location 71 
                                                      OpDecorate %74 Location 74 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %197 DescriptorSet 197 
                                                      OpDecorate %197 Binding 197 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %210 Location 210 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %221 DescriptorSet 221 
                                                      OpDecorate %221 Binding 221 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %26 = OpVariable Private 
                                          u32 %27 = OpConstant 4 
                                              %28 = OpTypeArray %7 %27 
                                          u32 %29 = OpConstant 16 
                                              %30 = OpTypeArray %7 %29 
                                              %31 = OpTypeStruct %7 %7 %28 %30 %7 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Uniform %6 
                                          u32 %42 = OpConstant 1 
                                          f32 %46 = OpConstant 3.674022E-40 
                                 Private f32* %49 = OpVariable Private 
                                          i32 %55 = OpConstant 1 
                                          u32 %56 = OpConstant 3 
                               Private f32_4* %68 = OpVariable Private 
                                              %69 = OpTypeVector %6 3 
                                              %70 = OpTypePointer Input %69 
                                 Input f32_3* %71 = OpVariable Input 
                                 Input f32_3* %74 = OpVariable Input 
                                 Input f32_3* %88 = OpVariable Input 
                                             %105 = OpTypePointer Uniform %7 
                                         i32 %119 = OpConstant 2 
                                         i32 %138 = OpConstant 3 
                                             %183 = OpTypePointer Function %69 
                                         u32 %187 = OpConstant 2 
                                Private f32* %193 = OpVariable Private 
                                             %194 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %195 = OpTypeSampledImage %194 
                                             %196 = OpTypePointer UniformConstant %195 
 UniformConstant read_only Texture2DSampled* %197 = OpVariable UniformConstant 
                                         f32 %200 = OpConstant 3.674022E-40 
                                Private f32* %203 = OpVariable Private 
                                         i32 %204 = OpConstant 4 
                                             %209 = OpTypePointer Output %7 
                               Output f32_4* %210 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %221 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %184 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Uniform f32* %37 = OpAccessChain %33 %35 %22 
                                          f32 %38 = OpLoad %37 
                                 Private f32* %39 = OpAccessChain %9 %22 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFMul %38 %40 
                                 Uniform f32* %43 = OpAccessChain %33 %35 %42 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFAdd %41 %44 
                                                      OpStore %26 %45 
                                          f32 %47 = OpLoad %26 
                                          f32 %48 = OpFDiv %46 %47 
                                                      OpStore %26 %48 
                                          f32 %50 = OpLoad %26 
                                          f32 %51 = OpFNegate %50 
                                 Private f32* %52 = OpAccessChain %9 %22 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFAdd %51 %53 
                                                      OpStore %49 %54 
                                 Uniform f32* %57 = OpAccessChain %33 %55 %56 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpLoad %49 
                                          f32 %60 = OpFMul %58 %59 
                                          f32 %61 = OpLoad %26 
                                          f32 %62 = OpFAdd %60 %61 
                                                      OpStore %26 %62 
                                 Private f32* %63 = OpAccessChain %9 %22 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFNegate %64 
                                          f32 %66 = OpFAdd %65 %46 
                                 Private f32* %67 = OpAccessChain %9 %22 
                                                      OpStore %67 %66 
                                        f32_3 %72 = OpLoad %71 
                                        f32_3 %73 = OpFNegate %72 
                                        f32_3 %75 = OpLoad %74 
                                        f32_3 %76 = OpFAdd %73 %75 
                                        f32_4 %77 = OpLoad %68 
                                        f32_4 %78 = OpVectorShuffle %77 %76 4 5 6 3 
                                                      OpStore %68 %78 
                                        f32_4 %79 = OpLoad %9 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 0 0 
                                        f32_4 %81 = OpLoad %68 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpFMul %80 %82 
                                        f32_3 %84 = OpLoad %71 
                                        f32_3 %85 = OpFAdd %83 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpVectorShuffle %86 %85 4 1 5 6 
                                                      OpStore %9 %87 
                                        f32_3 %89 = OpLoad %88 
                                        f32_3 %90 = OpFNegate %89 
                                          f32 %91 = OpLoad %26 
                                        f32_3 %92 = OpCompositeConstruct %91 %91 %91 
                                        f32_3 %93 = OpFMul %90 %92 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 2 3 
                                        f32_3 %96 = OpFAdd %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 1 5 6 
                                                      OpStore %9 %98 
                                          f32 %99 = OpLoad %26 
                                       f32_3 %100 = OpCompositeConstruct %99 %99 %99 
                                       f32_3 %101 = OpLoad %88 
                                       f32_3 %102 = OpFMul %100 %101 
                                       f32_4 %103 = OpLoad %68 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %68 %104 
                              Uniform f32_4* %106 = OpAccessChain %33 %55 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 3 3 3 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 2 3 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %68 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFAdd %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %117 1 1 1 1 
                              Uniform f32_4* %120 = OpAccessChain %33 %119 %55 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFMul %118 %121 
                                                      OpStore %68 %122 
                              Uniform f32_4* %123 = OpAccessChain %33 %119 %35 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_4 %126 = OpVectorShuffle %125 %125 0 0 0 0 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %68 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %68 %129 
                              Uniform f32_4* %130 = OpAccessChain %33 %119 %119 
                                       f32_4 %131 = OpLoad %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %132 2 2 2 2 
                                       f32_4 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %68 
                                       f32_4 %136 = OpFAdd %134 %135 
                                                      OpStore %9 %136 
                                       f32_4 %137 = OpLoad %9 
                              Uniform f32_4* %139 = OpAccessChain %33 %119 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFAdd %137 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                                       f32_3 %143 = OpVectorShuffle %142 %142 1 1 1 
                              Uniform f32_4* %144 = OpAccessChain %33 %138 %55 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %143 %146 
                                       f32_4 %148 = OpLoad %68 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %68 %149 
                              Uniform f32_4* %150 = OpAccessChain %33 %138 %35 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 0 0 
                                       f32_3 %155 = OpFMul %152 %154 
                                       f32_4 %156 = OpLoad %68 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFAdd %155 %157 
                                       f32_4 %159 = OpLoad %68 
                                       f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                                      OpStore %68 %160 
                              Uniform f32_4* %161 = OpAccessChain %33 %138 %119 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 2 2 2 
                                       f32_3 %166 = OpFMul %163 %165 
                                       f32_4 %167 = OpLoad %68 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFAdd %166 %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_4 %171 = OpVectorShuffle %170 %169 4 5 6 3 
                                                      OpStore %9 %171 
                              Uniform f32_4* %172 = OpAccessChain %33 %138 %138 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_4 %175 = OpLoad %9 
                                       f32_3 %176 = OpVectorShuffle %175 %175 3 3 3 
                                       f32_3 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %9 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFAdd %177 %179 
                                       f32_4 %181 = OpLoad %9 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %9 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_2 %186 = OpVectorShuffle %185 %185 0 1 
                                Private f32* %188 = OpAccessChain %9 %187 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpCompositeExtract %186 0 
                                         f32 %191 = OpCompositeExtract %186 1 
                                       f32_3 %192 = OpCompositeConstruct %190 %191 %189 
                                                      OpStore %184 %192 
                  read_only Texture2DSampled %198 = OpLoad %197 
                                       f32_3 %199 = OpLoad %184 
                                         f32 %201 = OpCompositeExtract %199 2 
                                         f32 %202 = OpImageSampleDrefExplicitLod %198 %199 %201 Lod %6 
                                                      OpStore %193 %202 
                                Uniform f32* %205 = OpAccessChain %33 %204 %22 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFNegate %206 
                                         f32 %208 = OpFAdd %207 %46 
                                                      OpStore %203 %208 
                                         f32 %211 = OpLoad %193 
                                       f32_4 %212 = OpCompositeConstruct %211 %211 %211 %211 
                                         f32 %213 = OpLoad %203 
                                       f32_4 %214 = OpCompositeConstruct %213 %213 %213 %213 
                                       f32_4 %215 = OpFMul %212 %214 
                              Uniform f32_4* %216 = OpAccessChain %33 %204 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpVectorShuffle %217 %217 0 0 0 0 
                                       f32_4 %219 = OpFAdd %215 %218 
                                                      OpStore %210 %219 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
""
}
}
}
}
SubShader {
 Tags { "ShadowmapFilter" = "HardShadow_FORCE_INV_PROJECTION_IN_PS" }
 Pass {
  Tags { "ShadowmapFilter" = "HardShadow_FORCE_INV_PROJECTION_IN_PS" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 88231
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat10_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
float u_xlat4;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlatb1 = greaterThanEqual((-u_xlat0.zzzz), _LightSplitsNear);
    u_xlat1 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb1));
    u_xlatb2 = lessThan((-u_xlat0.zzzz), _LightSplitsFar);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + u_xlat1.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat4 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat10_0) * vec4(u_xlat4) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 380
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %368 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %52 ArrayStride 52 
                                                      OpDecorate %53 ArrayStride 53 
                                                      OpDecorate %55 ArrayStride 55 
                                                      OpMemberDecorate %56 0 Offset 56 
                                                      OpMemberDecorate %56 1 Offset 56 
                                                      OpMemberDecorate %56 2 Offset 56 
                                                      OpMemberDecorate %56 3 Offset 56 
                                                      OpMemberDecorate %56 4 Offset 56 
                                                      OpMemberDecorate %56 5 RelaxedPrecision 
                                                      OpMemberDecorate %56 5 Offset 56 
                                                      OpDecorate %56 Block 
                                                      OpDecorate %58 DescriptorSet 58 
                                                      OpDecorate %58 Binding 58 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %356 DescriptorSet 356 
                                                      OpDecorate %356 Binding 356 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %368 Location 368 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %379 DescriptorSet 379 
                                                      OpDecorate %379 Binding 379 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                          u32 %31 = OpConstant 2 
                                              %37 = OpTypeVector %6 3 
                                          f32 %40 = OpConstant 3.674022E-40 
                                        f32_3 %41 = OpConstantComposite %40 %40 %40 
                                          f32 %43 = OpConstant 3.674022E-40 
                                        f32_3 %44 = OpConstantComposite %43 %43 %43 
                               Private f32_4* %48 = OpVariable Private 
                                          u32 %51 = OpConstant 4 
                                              %52 = OpTypeArray %7 %51 
                                              %53 = OpTypeArray %7 %51 
                                          u32 %54 = OpConstant 16 
                                              %55 = OpTypeArray %7 %54 
                                              %56 = OpTypeStruct %52 %53 %7 %7 %55 %7 
                                              %57 = OpTypePointer Uniform %56 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4;}* %58 = OpVariable Uniform 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                                          i32 %82 = OpConstant 3 
                                              %93 = OpTypeBool 
                                              %94 = OpTypeVector %93 4 
                                              %95 = OpTypePointer Private %94 
                              Private bool_4* %96 = OpVariable Private 
                                         f32 %103 = OpConstant 3.674022E-40 
                                       f32_4 %104 = OpConstantComposite %103 %103 %103 %103 
                                       f32_4 %105 = OpConstantComposite %29 %29 %29 %29 
                             Private bool_4* %109 = OpVariable Private 
                              Private f32_4* %116 = OpVariable Private 
                              Private f32_4* %120 = OpVariable Private 
                                         i32 %150 = OpConstant 4 
                                         i32 %151 = OpConstant 5 
                                         i32 %169 = OpConstant 6 
                                         i32 %181 = OpConstant 7 
                                             %200 = OpTypePointer Private %37 
                              Private f32_3* %201 = OpVariable Private 
                                         i32 %243 = OpConstant 9 
                                         i32 %248 = OpConstant 8 
                                         i32 %257 = OpConstant 10 
                                         i32 %266 = OpConstant 11 
                                         i32 %286 = OpConstant 13 
                                         i32 %291 = OpConstant 12 
                                         i32 %300 = OpConstant 14 
                                         i32 %311 = OpConstant 15 
                                Private f32* %333 = OpVariable Private 
                                Private f32* %336 = OpVariable Private 
                                             %344 = OpTypePointer Function %37 
                                Private f32* %352 = OpVariable Private 
                                             %353 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %354 = OpTypeSampledImage %353 
                                             %355 = OpTypePointer UniformConstant %354 
 UniformConstant read_only Texture2DSampled* %356 = OpVariable UniformConstant 
                                Private f32* %361 = OpVariable Private 
                                             %362 = OpTypePointer Uniform %6 
                                             %367 = OpTypePointer Output %7 
                               Output f32_4* %368 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %379 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %345 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %26 = OpAccessChain %9 %22 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFNegate %27 
                                          f32 %30 = OpFAdd %28 %29 
                                 Private f32* %32 = OpAccessChain %9 %31 
                                                      OpStore %32 %30 
                                        f32_4 %33 = OpLoad %16 
                                        f32_2 %34 = OpVectorShuffle %33 %33 2 3 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpVectorShuffle %35 %34 4 5 2 3 
                                                      OpStore %9 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %42 = OpFMul %39 %41 
                                        f32_3 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 6 3 
                                                      OpStore %9 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %58 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %50 %64 
                                                      OpStore %48 %65 
                               Uniform f32_4* %66 = OpAccessChain %58 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %48 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %48 %72 
                               Uniform f32_4* %74 = OpAccessChain %58 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %48 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %81 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %58 %60 %82 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %81 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_4 %88 = OpLoad %9 
                                        f32_3 %89 = OpVectorShuffle %88 %88 3 3 3 
                                        f32_3 %90 = OpFDiv %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %9 %92 
                                        f32_4 %97 = OpLoad %9 
                                        f32_4 %98 = OpVectorShuffle %97 %97 2 2 2 2 
                                        f32_4 %99 = OpFNegate %98 
                              Uniform f32_4* %100 = OpAccessChain %58 %73 
                                       f32_4 %101 = OpLoad %100 
                                      bool_4 %102 = OpFOrdGreaterThanEqual %99 %101 
                                                      OpStore %96 %102 
                                      bool_4 %106 = OpLoad %96 
                                       f32_4 %107 = OpSelect %106 %105 %104 
                                       f32_4 %108 = OpExtInst %1 46 %104 %105 %107 
                                                      OpStore %48 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_4 %111 = OpVectorShuffle %110 %110 2 2 2 2 
                                       f32_4 %112 = OpFNegate %111 
                              Uniform f32_4* %113 = OpAccessChain %58 %82 
                                       f32_4 %114 = OpLoad %113 
                                      bool_4 %115 = OpFOrdLessThan %112 %114 
                                                      OpStore %109 %115 
                                      bool_4 %117 = OpLoad %109 
                                       f32_4 %118 = OpSelect %117 %105 %104 
                                       f32_4 %119 = OpExtInst %1 46 %104 %105 %118 
                                                      OpStore %116 %119 
                                       f32_4 %121 = OpLoad %48 
                                       f32_4 %122 = OpLoad %116 
                                       f32_4 %123 = OpFMul %121 %122 
                                                      OpStore %120 %123 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %124 1 1 1 1 
                              Uniform f32_4* %126 = OpAccessChain %58 %61 %61 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpFMul %125 %127 
                                                      OpStore %116 %128 
                              Uniform f32_4* %129 = OpAccessChain %58 %61 %60 
                                       f32_4 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpVectorShuffle %131 %131 0 0 0 0 
                                       f32_4 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %116 
                                       f32_4 %135 = OpFAdd %133 %134 
                                                      OpStore %116 %135 
                              Uniform f32_4* %136 = OpAccessChain %58 %61 %73 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %9 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 2 2 2 
                                       f32_4 %140 = OpFNegate %139 
                                       f32_4 %141 = OpFMul %137 %140 
                                       f32_4 %142 = OpLoad %116 
                                       f32_4 %143 = OpFAdd %141 %142 
                                                      OpStore %9 %143 
                                       f32_4 %144 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %58 %61 %82 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFAdd %144 %146 
                                                      OpStore %9 %147 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 1 1 1 
                              Uniform f32_4* %152 = OpAccessChain %58 %150 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFMul %149 %154 
                                       f32_4 %156 = OpLoad %116 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %116 %157 
                              Uniform f32_4* %158 = OpAccessChain %58 %150 %150 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_4 %161 = OpLoad %9 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 0 0 
                                       f32_3 %163 = OpFMul %160 %162 
                                       f32_4 %164 = OpLoad %116 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFAdd %163 %165 
                                       f32_4 %167 = OpLoad %116 
                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 6 3 
                                                      OpStore %116 %168 
                              Uniform f32_4* %170 = OpAccessChain %58 %150 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_4 %173 = OpLoad %9 
                                       f32_3 %174 = OpVectorShuffle %173 %173 2 2 2 
                                       f32_3 %175 = OpFMul %172 %174 
                                       f32_4 %176 = OpLoad %116 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFAdd %175 %177 
                                       f32_4 %179 = OpLoad %116 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %116 %180 
                              Uniform f32_4* %182 = OpAccessChain %58 %150 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 3 3 3 
                                       f32_3 %187 = OpFMul %184 %186 
                                       f32_4 %188 = OpLoad %116 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpFAdd %187 %189 
                                       f32_4 %191 = OpLoad %116 
                                       f32_4 %192 = OpVectorShuffle %191 %190 4 5 6 3 
                                                      OpStore %116 %192 
                                       f32_4 %193 = OpLoad %120 
                                       f32_3 %194 = OpVectorShuffle %193 %193 1 1 1 
                                       f32_4 %195 = OpLoad %116 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFMul %194 %196 
                                       f32_4 %198 = OpLoad %116 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %116 %199 
                                       f32_4 %202 = OpLoad %9 
                                       f32_3 %203 = OpVectorShuffle %202 %202 1 1 1 
                              Uniform f32_4* %204 = OpAccessChain %58 %150 %61 
                                       f32_4 %205 = OpLoad %204 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_3 %207 = OpFMul %203 %206 
                                                      OpStore %201 %207 
                              Uniform f32_4* %208 = OpAccessChain %58 %150 %60 
                                       f32_4 %209 = OpLoad %208 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_4 %211 = OpLoad %9 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 0 0 
                                       f32_3 %213 = OpFMul %210 %212 
                                       f32_3 %214 = OpLoad %201 
                                       f32_3 %215 = OpFAdd %213 %214 
                                                      OpStore %201 %215 
                              Uniform f32_4* %216 = OpAccessChain %58 %150 %73 
                                       f32_4 %217 = OpLoad %216 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_4 %219 = OpLoad %9 
                                       f32_3 %220 = OpVectorShuffle %219 %219 2 2 2 
                                       f32_3 %221 = OpFMul %218 %220 
                                       f32_3 %222 = OpLoad %201 
                                       f32_3 %223 = OpFAdd %221 %222 
                                                      OpStore %201 %223 
                              Uniform f32_4* %224 = OpAccessChain %58 %150 %82 
                                       f32_4 %225 = OpLoad %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 3 3 3 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_3 %230 = OpLoad %201 
                                       f32_3 %231 = OpFAdd %229 %230 
                                                      OpStore %201 %231 
                                       f32_3 %232 = OpLoad %201 
                                       f32_4 %233 = OpLoad %120 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 0 0 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_4 %236 = OpLoad %116 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpFAdd %235 %237 
                                       f32_4 %239 = OpLoad %116 
                                       f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                                      OpStore %116 %240 
                                       f32_4 %241 = OpLoad %9 
                                       f32_3 %242 = OpVectorShuffle %241 %241 1 1 1 
                              Uniform f32_4* %244 = OpAccessChain %58 %150 %243 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpFMul %242 %246 
                                                      OpStore %201 %247 
                              Uniform f32_4* %249 = OpAccessChain %58 %150 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_4 %252 = OpLoad %9 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 0 0 
                                       f32_3 %254 = OpFMul %251 %253 
                                       f32_3 %255 = OpLoad %201 
                                       f32_3 %256 = OpFAdd %254 %255 
                                                      OpStore %201 %256 
                              Uniform f32_4* %258 = OpAccessChain %58 %150 %257 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 2 2 2 
                                       f32_3 %263 = OpFMul %260 %262 
                                       f32_3 %264 = OpLoad %201 
                                       f32_3 %265 = OpFAdd %263 %264 
                                                      OpStore %201 %265 
                              Uniform f32_4* %267 = OpAccessChain %58 %150 %266 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_4 %270 = OpLoad %9 
                                       f32_3 %271 = OpVectorShuffle %270 %270 3 3 3 
                                       f32_3 %272 = OpFMul %269 %271 
                                       f32_3 %273 = OpLoad %201 
                                       f32_3 %274 = OpFAdd %272 %273 
                                                      OpStore %201 %274 
                                       f32_3 %275 = OpLoad %201 
                                       f32_4 %276 = OpLoad %120 
                                       f32_3 %277 = OpVectorShuffle %276 %276 2 2 2 
                                       f32_3 %278 = OpFMul %275 %277 
                                       f32_4 %279 = OpLoad %116 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_3 %281 = OpFAdd %278 %280 
                                       f32_4 %282 = OpLoad %116 
                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 6 3 
                                                      OpStore %116 %283 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 1 1 1 
                              Uniform f32_4* %287 = OpAccessChain %58 %150 %286 
                                       f32_4 %288 = OpLoad %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFMul %285 %289 
                                                      OpStore %201 %290 
                              Uniform f32_4* %292 = OpAccessChain %58 %150 %291 
                                       f32_4 %293 = OpLoad %292 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                                       f32_4 %295 = OpLoad %9 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 0 0 
                                       f32_3 %297 = OpFMul %294 %296 
                                       f32_3 %298 = OpLoad %201 
                                       f32_3 %299 = OpFAdd %297 %298 
                                                      OpStore %201 %299 
                              Uniform f32_4* %301 = OpAccessChain %58 %150 %300 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_4 %304 = OpLoad %9 
                                       f32_3 %305 = OpVectorShuffle %304 %304 2 2 2 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_3 %307 = OpLoad %201 
                                       f32_3 %308 = OpFAdd %306 %307 
                                       f32_4 %309 = OpLoad %9 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %9 %310 
                              Uniform f32_4* %312 = OpAccessChain %58 %150 %311 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_4 %315 = OpLoad %9 
                                       f32_3 %316 = OpVectorShuffle %315 %315 3 3 3 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_4 %318 = OpLoad %9 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFAdd %317 %319 
                                       f32_4 %321 = OpLoad %9 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %9 %322 
                                       f32_4 %323 = OpLoad %9 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                                       f32_4 %325 = OpLoad %120 
                                       f32_3 %326 = OpVectorShuffle %325 %325 3 3 3 
                                       f32_3 %327 = OpFMul %324 %326 
                                       f32_4 %328 = OpLoad %116 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                       f32_3 %330 = OpFAdd %327 %329 
                                       f32_4 %331 = OpLoad %9 
                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
                                                      OpStore %9 %332 
                                       f32_4 %334 = OpLoad %120 
                                         f32 %335 = OpDot %334 %105 
                                                      OpStore %333 %335 
                                         f32 %337 = OpLoad %333 
                                         f32 %338 = OpFNegate %337 
                                Private f32* %339 = OpAccessChain %9 %31 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFAdd %338 %340 
                                                      OpStore %336 %341 
                                         f32 %342 = OpLoad %336 
                                         f32 %343 = OpFAdd %342 %29 
                                                      OpStore %336 %343 
                                       f32_4 %346 = OpLoad %9 
                                       f32_2 %347 = OpVectorShuffle %346 %346 0 1 
                                         f32 %348 = OpLoad %336 
                                         f32 %349 = OpCompositeExtract %347 0 
                                         f32 %350 = OpCompositeExtract %347 1 
                                       f32_3 %351 = OpCompositeConstruct %349 %350 %348 
                                                      OpStore %345 %351 
                  read_only Texture2DSampled %357 = OpLoad %356 
                                       f32_3 %358 = OpLoad %345 
                                         f32 %359 = OpCompositeExtract %358 2 
                                         f32 %360 = OpImageSampleDrefExplicitLod %357 %358 %359 Lod %6 
                                                      OpStore %352 %360 
                                Uniform f32* %363 = OpAccessChain %58 %151 %22 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFNegate %364 
                                         f32 %366 = OpFAdd %365 %29 
                                                      OpStore %361 %366 
                                         f32 %369 = OpLoad %352 
                                       f32_4 %370 = OpCompositeConstruct %369 %369 %369 %369 
                                         f32 %371 = OpLoad %361 
                                       f32_4 %372 = OpCompositeConstruct %371 %371 %371 %371 
                                       f32_4 %373 = OpFMul %370 %372 
                              Uniform f32_4* %374 = OpAccessChain %58 %151 
                                       f32_4 %375 = OpLoad %374 
                                       f32_4 %376 = OpVectorShuffle %375 %375 0 0 0 0 
                                       f32_4 %377 = OpFAdd %373 %376 
                                                      OpStore %368 %377 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat10_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat2.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat2.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat2.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb1));
    u_xlat5.xyz = u_xlat2.xyz + u_xlat1.yzw;
    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat5.yyy + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.zzz + u_xlat1.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat4 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat10_0) * vec4(u_xlat4) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 432
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %420 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %52 ArrayStride 52 
                                                      OpDecorate %53 ArrayStride 53 
                                                      OpDecorate %54 ArrayStride 54 
                                                      OpDecorate %56 ArrayStride 56 
                                                      OpMemberDecorate %57 0 Offset 57 
                                                      OpMemberDecorate %57 1 Offset 57 
                                                      OpMemberDecorate %57 2 Offset 57 
                                                      OpMemberDecorate %57 3 Offset 57 
                                                      OpMemberDecorate %57 4 Offset 57 
                                                      OpMemberDecorate %57 5 RelaxedPrecision 
                                                      OpMemberDecorate %57 5 Offset 57 
                                                      OpDecorate %57 Block 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %408 DescriptorSet 408 
                                                      OpDecorate %408 Binding 408 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %420 Location 420 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %431 DescriptorSet 431 
                                                      OpDecorate %431 Binding 431 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                          u32 %31 = OpConstant 2 
                                              %37 = OpTypeVector %6 3 
                                          f32 %40 = OpConstant 3.674022E-40 
                                        f32_3 %41 = OpConstantComposite %40 %40 %40 
                                          f32 %43 = OpConstant 3.674022E-40 
                                        f32_3 %44 = OpConstantComposite %43 %43 %43 
                               Private f32_4* %48 = OpVariable Private 
                                          u32 %51 = OpConstant 4 
                                              %52 = OpTypeArray %7 %51 
                                              %53 = OpTypeArray %7 %51 
                                              %54 = OpTypeArray %7 %51 
                                          u32 %55 = OpConstant 16 
                                              %56 = OpTypeArray %7 %55 
                                              %57 = OpTypeStruct %52 %53 %54 %7 %56 %7 
                                              %58 = OpTypePointer Uniform %57 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4;}* %59 = OpVariable Uniform 
                                              %60 = OpTypeInt 32 1 
                                          i32 %61 = OpConstant 0 
                                          i32 %62 = OpConstant 1 
                                              %63 = OpTypePointer Uniform %7 
                                          i32 %74 = OpConstant 2 
                                          i32 %83 = OpConstant 3 
                                             %133 = OpTypePointer Private %37 
                              Private f32_3* %134 = OpVariable Private 
                                         u32 %145 = OpConstant 1 
                                         u32 %168 = OpConstant 3 
                                             %170 = OpTypeBool 
                                             %171 = OpTypeVector %170 4 
                                             %172 = OpTypePointer Private %171 
                             Private bool_4* %173 = OpVariable Private 
                              Private f32_3* %178 = OpVariable Private 
                                             %179 = OpTypePointer Function %6 
                                         f32 %186 = OpConstant 3.674022E-40 
                                         f32 %205 = OpConstant 3.674022E-40 
                                       f32_4 %206 = OpConstantComposite %205 %205 %205 %205 
                                       f32_4 %207 = OpConstantComposite %29 %29 %29 %29 
                              Private f32_3* %215 = OpVariable Private 
                                       f32_3 %217 = OpConstantComposite %205 %205 %205 
                                         i32 %221 = OpConstant 4 
                                         i32 %222 = OpConstant 5 
                                         i32 %235 = OpConstant 6 
                                         i32 %244 = OpConstant 7 
                              Private f32_3* %257 = OpVariable Private 
                                         i32 %296 = OpConstant 9 
                                         i32 %301 = OpConstant 8 
                                         i32 %310 = OpConstant 10 
                                         i32 %319 = OpConstant 11 
                                         i32 %336 = OpConstant 13 
                                         i32 %341 = OpConstant 12 
                                         i32 %350 = OpConstant 14 
                                         i32 %361 = OpConstant 15 
                                Private f32* %385 = OpVariable Private 
                                Private f32* %388 = OpVariable Private 
                                             %396 = OpTypePointer Function %37 
                                Private f32* %404 = OpVariable Private 
                                             %405 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %406 = OpTypeSampledImage %405 
                                             %407 = OpTypePointer UniformConstant %406 
 UniformConstant read_only Texture2DSampled* %408 = OpVariable UniformConstant 
                                             %413 = OpTypePointer Uniform %6 
                                             %419 = OpTypePointer Output %7 
                               Output f32_4* %420 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %431 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %180 = OpVariable Function 
                               Function f32* %189 = OpVariable Function 
                               Function f32* %197 = OpVariable Function 
                             Function f32_3* %397 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %26 = OpAccessChain %9 %22 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFNegate %27 
                                          f32 %30 = OpFAdd %28 %29 
                                 Private f32* %32 = OpAccessChain %9 %31 
                                                      OpStore %32 %30 
                                        f32_4 %33 = OpLoad %16 
                                        f32_2 %34 = OpVectorShuffle %33 %33 2 3 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpVectorShuffle %35 %34 4 5 2 3 
                                                      OpStore %9 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %42 = OpFMul %39 %41 
                                        f32_3 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 6 3 
                                                      OpStore %9 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %59 %61 %62 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %50 %65 
                                                      OpStore %48 %66 
                               Uniform f32_4* %67 = OpAccessChain %59 %61 %61 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %48 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %48 %73 
                               Uniform f32_4* %75 = OpAccessChain %59 %61 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_4 %78 = OpVectorShuffle %77 %77 2 2 2 2 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %48 
                                        f32_4 %81 = OpFAdd %79 %80 
                                                      OpStore %9 %81 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %84 = OpAccessChain %59 %61 %83 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpFAdd %82 %85 
                                                      OpStore %9 %86 
                                        f32_4 %87 = OpLoad %9 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_4 %89 = OpLoad %9 
                                        f32_3 %90 = OpVectorShuffle %89 %89 3 3 3 
                                        f32_3 %91 = OpFDiv %88 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %9 %93 
                                        f32_4 %94 = OpLoad %9 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                               Uniform f32_4* %96 = OpAccessChain %59 %62 %62 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpFMul %95 %97 
                                                      OpStore %48 %98 
                               Uniform f32_4* %99 = OpAccessChain %59 %62 %61 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpLoad %9 
                                       f32_4 %102 = OpVectorShuffle %101 %101 0 0 0 0 
                                       f32_4 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %48 
                                       f32_4 %105 = OpFAdd %103 %104 
                                                      OpStore %48 %105 
                              Uniform f32_4* %106 = OpAccessChain %59 %62 %74 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpVectorShuffle %108 %108 2 2 2 2 
                                       f32_4 %110 = OpFNegate %109 
                                       f32_4 %111 = OpFMul %107 %110 
                                       f32_4 %112 = OpLoad %48 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %9 %113 
                                       f32_4 %114 = OpLoad %9 
                              Uniform f32_4* %115 = OpAccessChain %59 %62 %83 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpFAdd %114 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                              Uniform f32_4* %120 = OpAccessChain %59 %74 %61 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpFNegate %122 
                                       f32_3 %124 = OpFAdd %119 %123 
                                       f32_4 %125 = OpLoad %48 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %48 %126 
                                       f32_4 %127 = OpLoad %48 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                       f32_4 %129 = OpLoad %48 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %128 %130 
                                Private f32* %132 = OpAccessChain %48 %22 
                                                      OpStore %132 %131 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                              Uniform f32_4* %137 = OpAccessChain %59 %74 %62 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFNegate %139 
                                       f32_3 %141 = OpFAdd %136 %140 
                                                      OpStore %134 %141 
                                       f32_3 %142 = OpLoad %134 
                                       f32_3 %143 = OpLoad %134 
                                         f32 %144 = OpDot %142 %143 
                                Private f32* %146 = OpAccessChain %48 %145 
                                                      OpStore %146 %144 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %59 %74 %74 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFNegate %151 
                                       f32_3 %153 = OpFAdd %148 %152 
                                                      OpStore %134 %153 
                                       f32_3 %154 = OpLoad %134 
                                       f32_3 %155 = OpLoad %134 
                                         f32 %156 = OpDot %154 %155 
                                Private f32* %157 = OpAccessChain %48 %31 
                                                      OpStore %157 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                              Uniform f32_4* %160 = OpAccessChain %59 %74 %83 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFNegate %162 
                                       f32_3 %164 = OpFAdd %159 %163 
                                                      OpStore %134 %164 
                                       f32_3 %165 = OpLoad %134 
                                       f32_3 %166 = OpLoad %134 
                                         f32 %167 = OpDot %165 %166 
                                Private f32* %169 = OpAccessChain %48 %168 
                                                      OpStore %169 %167 
                                       f32_4 %174 = OpLoad %48 
                              Uniform f32_4* %175 = OpAccessChain %59 %83 
                                       f32_4 %176 = OpLoad %175 
                                      bool_4 %177 = OpFOrdLessThan %174 %176 
                                                      OpStore %173 %177 
                                      bool_4 %181 = OpLoad %173 
                                        bool %182 = OpCompositeExtract %181 0 
                                                      OpSelectionMerge %184 None 
                                                      OpBranchConditional %182 %183 %185 
                                             %183 = OpLabel 
                                                      OpStore %180 %43 
                                                      OpBranch %184 
                                             %185 = OpLabel 
                                                      OpStore %180 %186 
                                                      OpBranch %184 
                                             %184 = OpLabel 
                                         f32 %187 = OpLoad %180 
                                Private f32* %188 = OpAccessChain %178 %22 
                                                      OpStore %188 %187 
                                      bool_4 %190 = OpLoad %173 
                                        bool %191 = OpCompositeExtract %190 1 
                                                      OpSelectionMerge %193 None 
                                                      OpBranchConditional %191 %192 %194 
                                             %192 = OpLabel 
                                                      OpStore %189 %43 
                                                      OpBranch %193 
                                             %194 = OpLabel 
                                                      OpStore %189 %186 
                                                      OpBranch %193 
                                             %193 = OpLabel 
                                         f32 %195 = OpLoad %189 
                                Private f32* %196 = OpAccessChain %178 %145 
                                                      OpStore %196 %195 
                                      bool_4 %198 = OpLoad %173 
                                        bool %199 = OpCompositeExtract %198 2 
                                                      OpSelectionMerge %201 None 
                                                      OpBranchConditional %199 %200 %202 
                                             %200 = OpLabel 
                                                      OpStore %197 %43 
                                                      OpBranch %201 
                                             %202 = OpLabel 
                                                      OpStore %197 %186 
                                                      OpBranch %201 
                                             %201 = OpLabel 
                                         f32 %203 = OpLoad %197 
                                Private f32* %204 = OpAccessChain %178 %31 
                                                      OpStore %204 %203 
                                      bool_4 %208 = OpLoad %173 
                                       f32_4 %209 = OpSelect %208 %207 %206 
                                       f32_4 %210 = OpExtInst %1 46 %206 %207 %209 
                                                      OpStore %48 %210 
                                       f32_3 %211 = OpLoad %178 
                                       f32_4 %212 = OpLoad %48 
                                       f32_3 %213 = OpVectorShuffle %212 %212 1 2 3 
                                       f32_3 %214 = OpFAdd %211 %213 
                                                      OpStore %178 %214 
                                       f32_3 %216 = OpLoad %178 
                                       f32_3 %218 = OpExtInst %1 40 %216 %217 
                                                      OpStore %215 %218 
                                       f32_4 %219 = OpLoad %9 
                                       f32_3 %220 = OpVectorShuffle %219 %219 1 1 1 
                              Uniform f32_4* %223 = OpAccessChain %59 %221 %222 
                                       f32_4 %224 = OpLoad %223 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFMul %220 %225 
                                                      OpStore %134 %226 
                              Uniform f32_4* %227 = OpAccessChain %59 %221 %221 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_4 %230 = OpLoad %9 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 0 0 
                                       f32_3 %232 = OpFMul %229 %231 
                                       f32_3 %233 = OpLoad %134 
                                       f32_3 %234 = OpFAdd %232 %233 
                                                      OpStore %134 %234 
                              Uniform f32_4* %236 = OpAccessChain %59 %221 %235 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_4 %239 = OpLoad %9 
                                       f32_3 %240 = OpVectorShuffle %239 %239 2 2 2 
                                       f32_3 %241 = OpFMul %238 %240 
                                       f32_3 %242 = OpLoad %134 
                                       f32_3 %243 = OpFAdd %241 %242 
                                                      OpStore %134 %243 
                              Uniform f32_4* %245 = OpAccessChain %59 %221 %244 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 3 3 3 
                                       f32_3 %250 = OpFMul %247 %249 
                                       f32_3 %251 = OpLoad %134 
                                       f32_3 %252 = OpFAdd %250 %251 
                                                      OpStore %134 %252 
                                       f32_3 %253 = OpLoad %215 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 0 0 
                                       f32_3 %255 = OpLoad %134 
                                       f32_3 %256 = OpFMul %254 %255 
                                                      OpStore %134 %256 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 1 1 1 
                              Uniform f32_4* %260 = OpAccessChain %59 %221 %62 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFMul %259 %262 
                                                      OpStore %257 %263 
                              Uniform f32_4* %264 = OpAccessChain %59 %221 %61 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_4 %267 = OpLoad %9 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 0 0 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_3 %270 = OpLoad %257 
                                       f32_3 %271 = OpFAdd %269 %270 
                                                      OpStore %257 %271 
                              Uniform f32_4* %272 = OpAccessChain %59 %221 %74 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_4 %275 = OpLoad %9 
                                       f32_3 %276 = OpVectorShuffle %275 %275 2 2 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %278 = OpLoad %257 
                                       f32_3 %279 = OpFAdd %277 %278 
                                                      OpStore %257 %279 
                              Uniform f32_4* %280 = OpAccessChain %59 %221 %83 
                                       f32_4 %281 = OpLoad %280 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_4 %283 = OpLoad %9 
                                       f32_3 %284 = OpVectorShuffle %283 %283 3 3 3 
                                       f32_3 %285 = OpFMul %282 %284 
                                       f32_3 %286 = OpLoad %257 
                                       f32_3 %287 = OpFAdd %285 %286 
                                                      OpStore %257 %287 
                                       f32_3 %288 = OpLoad %257 
                                       f32_4 %289 = OpLoad %48 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 0 0 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_3 %292 = OpLoad %134 
                                       f32_3 %293 = OpFAdd %291 %292 
                                                      OpStore %134 %293 
                                       f32_4 %294 = OpLoad %9 
                                       f32_3 %295 = OpVectorShuffle %294 %294 1 1 1 
                              Uniform f32_4* %297 = OpAccessChain %59 %221 %296 
                                       f32_4 %298 = OpLoad %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpFMul %295 %299 
                                                      OpStore %257 %300 
                              Uniform f32_4* %302 = OpAccessChain %59 %221 %301 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_4 %305 = OpLoad %9 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 0 0 
                                       f32_3 %307 = OpFMul %304 %306 
                                       f32_3 %308 = OpLoad %257 
                                       f32_3 %309 = OpFAdd %307 %308 
                                                      OpStore %257 %309 
                              Uniform f32_4* %311 = OpAccessChain %59 %221 %310 
                                       f32_4 %312 = OpLoad %311 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_4 %314 = OpLoad %9 
                                       f32_3 %315 = OpVectorShuffle %314 %314 2 2 2 
                                       f32_3 %316 = OpFMul %313 %315 
                                       f32_3 %317 = OpLoad %257 
                                       f32_3 %318 = OpFAdd %316 %317 
                                                      OpStore %257 %318 
                              Uniform f32_4* %320 = OpAccessChain %59 %221 %319 
                                       f32_4 %321 = OpLoad %320 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_4 %323 = OpLoad %9 
                                       f32_3 %324 = OpVectorShuffle %323 %323 3 3 3 
                                       f32_3 %325 = OpFMul %322 %324 
                                       f32_3 %326 = OpLoad %257 
                                       f32_3 %327 = OpFAdd %325 %326 
                                                      OpStore %257 %327 
                                       f32_3 %328 = OpLoad %257 
                                       f32_3 %329 = OpLoad %215 
                                       f32_3 %330 = OpVectorShuffle %329 %329 1 1 1 
                                       f32_3 %331 = OpFMul %328 %330 
                                       f32_3 %332 = OpLoad %134 
                                       f32_3 %333 = OpFAdd %331 %332 
                                                      OpStore %134 %333 
                                       f32_4 %334 = OpLoad %9 
                                       f32_3 %335 = OpVectorShuffle %334 %334 1 1 1 
                              Uniform f32_4* %337 = OpAccessChain %59 %221 %336 
                                       f32_4 %338 = OpLoad %337 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_3 %340 = OpFMul %335 %339 
                                                      OpStore %257 %340 
                              Uniform f32_4* %342 = OpAccessChain %59 %221 %341 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_4 %345 = OpLoad %9 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 0 0 
                                       f32_3 %347 = OpFMul %344 %346 
                                       f32_3 %348 = OpLoad %257 
                                       f32_3 %349 = OpFAdd %347 %348 
                                                      OpStore %257 %349 
                              Uniform f32_4* %351 = OpAccessChain %59 %221 %350 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_4 %354 = OpLoad %9 
                                       f32_3 %355 = OpVectorShuffle %354 %354 2 2 2 
                                       f32_3 %356 = OpFMul %353 %355 
                                       f32_3 %357 = OpLoad %257 
                                       f32_3 %358 = OpFAdd %356 %357 
                                       f32_4 %359 = OpLoad %9 
                                       f32_4 %360 = OpVectorShuffle %359 %358 4 5 6 3 
                                                      OpStore %9 %360 
                              Uniform f32_4* %362 = OpAccessChain %59 %221 %361 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_4 %365 = OpLoad %9 
                                       f32_3 %366 = OpVectorShuffle %365 %365 3 3 3 
                                       f32_3 %367 = OpFMul %364 %366 
                                       f32_4 %368 = OpLoad %9 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %370 = OpFAdd %367 %369 
                                       f32_4 %371 = OpLoad %9 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 5 6 3 
                                                      OpStore %9 %372 
                                       f32_4 %373 = OpLoad %9 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpLoad %215 
                                       f32_3 %376 = OpVectorShuffle %375 %375 2 2 2 
                                       f32_3 %377 = OpFMul %374 %376 
                                       f32_3 %378 = OpLoad %134 
                                       f32_3 %379 = OpFAdd %377 %378 
                                       f32_4 %380 = OpLoad %9 
                                       f32_4 %381 = OpVectorShuffle %380 %379 4 5 6 3 
                                                      OpStore %9 %381 
                                       f32_3 %382 = OpLoad %215 
                                       f32_4 %383 = OpLoad %48 
                                       f32_4 %384 = OpVectorShuffle %383 %382 0 4 5 6 
                                                      OpStore %48 %384 
                                       f32_4 %386 = OpLoad %48 
                                         f32 %387 = OpDot %386 %207 
                                                      OpStore %385 %387 
                                         f32 %389 = OpLoad %385 
                                         f32 %390 = OpFNegate %389 
                                Private f32* %391 = OpAccessChain %9 %31 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFAdd %390 %392 
                                                      OpStore %388 %393 
                                         f32 %394 = OpLoad %388 
                                         f32 %395 = OpFAdd %394 %29 
                                                      OpStore %388 %395 
                                       f32_4 %398 = OpLoad %9 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                                         f32 %400 = OpLoad %388 
                                         f32 %401 = OpCompositeExtract %399 0 
                                         f32 %402 = OpCompositeExtract %399 1 
                                       f32_3 %403 = OpCompositeConstruct %401 %402 %400 
                                                      OpStore %397 %403 
                  read_only Texture2DSampled %409 = OpLoad %408 
                                       f32_3 %410 = OpLoad %397 
                                         f32 %411 = OpCompositeExtract %410 2 
                                         f32 %412 = OpImageSampleDrefExplicitLod %409 %410 %411 Lod %6 
                                                      OpStore %404 %412 
                                Uniform f32* %414 = OpAccessChain %59 %222 %22 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpFNegate %415 
                                         f32 %417 = OpFAdd %416 %29 
                                Private f32* %418 = OpAccessChain %178 %22 
                                                      OpStore %418 %417 
                                         f32 %421 = OpLoad %404 
                                       f32_4 %422 = OpCompositeConstruct %421 %421 %421 %421 
                                       f32_3 %423 = OpLoad %178 
                                       f32_4 %424 = OpVectorShuffle %423 %423 0 0 0 0 
                                       f32_4 %425 = OpFMul %422 %424 
                              Uniform f32_4* %426 = OpAccessChain %59 %222 
                                       f32_4 %427 = OpLoad %426 
                                       f32_4 %428 = OpVectorShuffle %427 %427 0 0 0 0 
                                       f32_4 %429 = OpFAdd %425 %428 
                                                      OpStore %420 %429 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat10_0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat10_0) * vec4(u_xlat2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 196
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %184 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %52 ArrayStride 52 
                                                      OpDecorate %53 ArrayStride 53 
                                                      OpDecorate %55 ArrayStride 55 
                                                      OpMemberDecorate %56 0 Offset 56 
                                                      OpMemberDecorate %56 1 Offset 56 
                                                      OpMemberDecorate %56 2 Offset 56 
                                                      OpMemberDecorate %56 3 RelaxedPrecision 
                                                      OpMemberDecorate %56 3 Offset 56 
                                                      OpDecorate %56 Block 
                                                      OpDecorate %58 DescriptorSet 58 
                                                      OpDecorate %58 Binding 58 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %171 DescriptorSet 171 
                                                      OpDecorate %171 Binding 171 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %195 DescriptorSet 195 
                                                      OpDecorate %195 Binding 195 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                          u32 %31 = OpConstant 2 
                                              %37 = OpTypeVector %6 3 
                                          f32 %40 = OpConstant 3.674022E-40 
                                        f32_3 %41 = OpConstantComposite %40 %40 %40 
                                          f32 %43 = OpConstant 3.674022E-40 
                                        f32_3 %44 = OpConstantComposite %43 %43 %43 
                               Private f32_4* %48 = OpVariable Private 
                                          u32 %51 = OpConstant 4 
                                              %52 = OpTypeArray %7 %51 
                                              %53 = OpTypeArray %7 %51 
                                          u32 %54 = OpConstant 16 
                                              %55 = OpTypeArray %7 %54 
                                              %56 = OpTypeStruct %52 %53 %55 %7 
                                              %57 = OpTypePointer Uniform %56 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4;}* %58 = OpVariable Uniform 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                                          i32 %82 = OpConstant 3 
                                             %158 = OpTypePointer Function %37 
                                Private f32* %167 = OpVariable Private 
                                             %168 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %169 = OpTypeSampledImage %168 
                                             %170 = OpTypePointer UniformConstant %169 
 UniformConstant read_only Texture2DSampled* %171 = OpVariable UniformConstant 
                                         f32 %174 = OpConstant 3.674022E-40 
                                Private f32* %177 = OpVariable Private 
                                             %178 = OpTypePointer Uniform %6 
                                             %183 = OpTypePointer Output %7 
                               Output f32_4* %184 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %195 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %159 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %26 = OpAccessChain %9 %22 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFNegate %27 
                                          f32 %30 = OpFAdd %28 %29 
                                 Private f32* %32 = OpAccessChain %9 %31 
                                                      OpStore %32 %30 
                                        f32_4 %33 = OpLoad %16 
                                        f32_2 %34 = OpVectorShuffle %33 %33 2 3 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpVectorShuffle %35 %34 4 5 2 3 
                                                      OpStore %9 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %42 = OpFMul %39 %41 
                                        f32_3 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 6 3 
                                                      OpStore %9 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %58 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %50 %64 
                                                      OpStore %48 %65 
                               Uniform f32_4* %66 = OpAccessChain %58 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %48 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %48 %72 
                               Uniform f32_4* %74 = OpAccessChain %58 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %48 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %81 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %58 %60 %82 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %81 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_4 %88 = OpLoad %9 
                                        f32_3 %89 = OpVectorShuffle %88 %88 3 3 3 
                                        f32_3 %90 = OpFDiv %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %9 %92 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %58 %61 %61 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %94 %96 
                                                      OpStore %48 %97 
                               Uniform f32_4* %98 = OpAccessChain %58 %61 %60 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %48 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %48 %104 
                              Uniform f32_4* %105 = OpAccessChain %58 %61 %73 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %9 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFNegate %108 
                                       f32_4 %110 = OpFMul %106 %109 
                                       f32_4 %111 = OpLoad %48 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %9 %112 
                                       f32_4 %113 = OpLoad %9 
                              Uniform f32_4* %114 = OpAccessChain %58 %61 %82 
                                       f32_4 %115 = OpLoad %114 
                                       f32_4 %116 = OpFAdd %113 %115 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_3 %118 = OpVectorShuffle %117 %117 1 1 1 
                              Uniform f32_4* %119 = OpAccessChain %58 %73 %61 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFMul %118 %121 
                                       f32_4 %123 = OpLoad %48 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
                                                      OpStore %48 %124 
                              Uniform f32_4* %125 = OpAccessChain %58 %73 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_4 %128 = OpLoad %9 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 0 0 
                                       f32_3 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %48 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFAdd %130 %132 
                                       f32_4 %134 = OpLoad %48 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %48 %135 
                              Uniform f32_4* %136 = OpAccessChain %58 %73 %73 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 2 2 2 
                                       f32_3 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %48 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFAdd %141 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %9 %146 
                              Uniform f32_4* %147 = OpAccessChain %58 %73 %82 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_4 %150 = OpLoad %9 
                                       f32_3 %151 = OpVectorShuffle %150 %150 3 3 3 
                                       f32_3 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFAdd %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %9 %157 
                                       f32_4 %160 = OpLoad %9 
                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
                                Private f32* %162 = OpAccessChain %9 %31 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpCompositeExtract %161 0 
                                         f32 %165 = OpCompositeExtract %161 1 
                                       f32_3 %166 = OpCompositeConstruct %164 %165 %163 
                                                      OpStore %159 %166 
                  read_only Texture2DSampled %172 = OpLoad %171 
                                       f32_3 %173 = OpLoad %159 
                                         f32 %175 = OpCompositeExtract %173 2 
                                         f32 %176 = OpImageSampleDrefExplicitLod %172 %173 %175 Lod %6 
                                                      OpStore %167 %176 
                                Uniform f32* %179 = OpAccessChain %58 %82 %22 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpFNegate %180 
                                         f32 %182 = OpFAdd %181 %29 
                                                      OpStore %177 %182 
                                         f32 %185 = OpLoad %167 
                                       f32_4 %186 = OpCompositeConstruct %185 %185 %185 %185 
                                         f32 %187 = OpLoad %177 
                                       f32_4 %188 = OpCompositeConstruct %187 %187 %187 %187 
                                       f32_4 %189 = OpFMul %186 %188 
                              Uniform f32_4* %190 = OpAccessChain %58 %82 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpVectorShuffle %191 %191 0 0 0 0 
                                       f32_4 %193 = OpFAdd %189 %192 
                                                      OpStore %184 %193 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat10_0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat10_0) * vec4(u_xlat2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 196
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %184 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %52 ArrayStride 52 
                                                      OpDecorate %53 ArrayStride 53 
                                                      OpDecorate %55 ArrayStride 55 
                                                      OpMemberDecorate %56 0 Offset 56 
                                                      OpMemberDecorate %56 1 Offset 56 
                                                      OpMemberDecorate %56 2 Offset 56 
                                                      OpMemberDecorate %56 3 RelaxedPrecision 
                                                      OpMemberDecorate %56 3 Offset 56 
                                                      OpDecorate %56 Block 
                                                      OpDecorate %58 DescriptorSet 58 
                                                      OpDecorate %58 Binding 58 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %171 DescriptorSet 171 
                                                      OpDecorate %171 Binding 171 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %195 DescriptorSet 195 
                                                      OpDecorate %195 Binding 195 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                          u32 %31 = OpConstant 2 
                                              %37 = OpTypeVector %6 3 
                                          f32 %40 = OpConstant 3.674022E-40 
                                        f32_3 %41 = OpConstantComposite %40 %40 %40 
                                          f32 %43 = OpConstant 3.674022E-40 
                                        f32_3 %44 = OpConstantComposite %43 %43 %43 
                               Private f32_4* %48 = OpVariable Private 
                                          u32 %51 = OpConstant 4 
                                              %52 = OpTypeArray %7 %51 
                                              %53 = OpTypeArray %7 %51 
                                          u32 %54 = OpConstant 16 
                                              %55 = OpTypeArray %7 %54 
                                              %56 = OpTypeStruct %52 %53 %55 %7 
                                              %57 = OpTypePointer Uniform %56 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4;}* %58 = OpVariable Uniform 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                                          i32 %82 = OpConstant 3 
                                             %158 = OpTypePointer Function %37 
                                Private f32* %167 = OpVariable Private 
                                             %168 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %169 = OpTypeSampledImage %168 
                                             %170 = OpTypePointer UniformConstant %169 
 UniformConstant read_only Texture2DSampled* %171 = OpVariable UniformConstant 
                                         f32 %174 = OpConstant 3.674022E-40 
                                Private f32* %177 = OpVariable Private 
                                             %178 = OpTypePointer Uniform %6 
                                             %183 = OpTypePointer Output %7 
                               Output f32_4* %184 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %195 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %159 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %26 = OpAccessChain %9 %22 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFNegate %27 
                                          f32 %30 = OpFAdd %28 %29 
                                 Private f32* %32 = OpAccessChain %9 %31 
                                                      OpStore %32 %30 
                                        f32_4 %33 = OpLoad %16 
                                        f32_2 %34 = OpVectorShuffle %33 %33 2 3 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpVectorShuffle %35 %34 4 5 2 3 
                                                      OpStore %9 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %42 = OpFMul %39 %41 
                                        f32_3 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 6 3 
                                                      OpStore %9 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %58 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %50 %64 
                                                      OpStore %48 %65 
                               Uniform f32_4* %66 = OpAccessChain %58 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %48 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %48 %72 
                               Uniform f32_4* %74 = OpAccessChain %58 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %48 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %81 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %58 %60 %82 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %81 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_4 %88 = OpLoad %9 
                                        f32_3 %89 = OpVectorShuffle %88 %88 3 3 3 
                                        f32_3 %90 = OpFDiv %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %9 %92 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %58 %61 %61 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %94 %96 
                                                      OpStore %48 %97 
                               Uniform f32_4* %98 = OpAccessChain %58 %61 %60 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %48 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %48 %104 
                              Uniform f32_4* %105 = OpAccessChain %58 %61 %73 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %9 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFNegate %108 
                                       f32_4 %110 = OpFMul %106 %109 
                                       f32_4 %111 = OpLoad %48 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %9 %112 
                                       f32_4 %113 = OpLoad %9 
                              Uniform f32_4* %114 = OpAccessChain %58 %61 %82 
                                       f32_4 %115 = OpLoad %114 
                                       f32_4 %116 = OpFAdd %113 %115 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_3 %118 = OpVectorShuffle %117 %117 1 1 1 
                              Uniform f32_4* %119 = OpAccessChain %58 %73 %61 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFMul %118 %121 
                                       f32_4 %123 = OpLoad %48 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
                                                      OpStore %48 %124 
                              Uniform f32_4* %125 = OpAccessChain %58 %73 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_4 %128 = OpLoad %9 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 0 0 
                                       f32_3 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %48 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFAdd %130 %132 
                                       f32_4 %134 = OpLoad %48 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %48 %135 
                              Uniform f32_4* %136 = OpAccessChain %58 %73 %73 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 2 2 2 
                                       f32_3 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %48 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFAdd %141 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %9 %146 
                              Uniform f32_4* %147 = OpAccessChain %58 %73 %82 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_4 %150 = OpLoad %9 
                                       f32_3 %151 = OpVectorShuffle %150 %150 3 3 3 
                                       f32_3 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFAdd %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %9 %157 
                                       f32_4 %160 = OpLoad %9 
                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
                                Private f32* %162 = OpAccessChain %9 %31 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpCompositeExtract %161 0 
                                         f32 %165 = OpCompositeExtract %161 1 
                                       f32_3 %166 = OpCompositeConstruct %164 %165 %163 
                                                      OpStore %159 %166 
                  read_only Texture2DSampled %172 = OpLoad %171 
                                       f32_3 %173 = OpLoad %159 
                                         f32 %175 = OpCompositeExtract %173 2 
                                         f32 %176 = OpImageSampleDrefExplicitLod %172 %173 %175 Lod %6 
                                                      OpStore %167 %176 
                                Uniform f32* %179 = OpAccessChain %58 %82 %22 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpFNegate %180 
                                         f32 %182 = OpFAdd %181 %29 
                                                      OpStore %177 %182 
                                         f32 %185 = OpLoad %167 
                                       f32_4 %186 = OpCompositeConstruct %185 %185 %185 %185 
                                         f32 %187 = OpLoad %177 
                                       f32_4 %188 = OpCompositeConstruct %187 %187 %187 %187 
                                       f32_4 %189 = OpFMul %186 %188 
                              Uniform f32_4* %190 = OpAccessChain %58 %82 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpVectorShuffle %191 %191 0 0 0 0 
                                       f32_4 %193 = OpFAdd %189 %192 
                                                      OpStore %184 %193 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
""
}
}
}
}
SubShader {
 Tags { "ShadowmapFilter" = "PCF_SOFT" }
 Pass {
  Tags { "ShadowmapFilter" = "PCF_SOFT" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 136644
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat10_8;
float u_xlat16;
float u_xlat10_16;
vec2 u_xlat17;
float u_xlat10_17;
float u_xlat10_24;
void main()
{
    u_xlat10_0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat8.x = _ZBufferParams.x * u_xlat10_0.x + _ZBufferParams.y;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat16 = (-u_xlat8.x) + u_xlat10_0.x;
    u_xlat8.x = unity_OrthoParams.w * u_xlat16 + u_xlat8.x;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat10_0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat1.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);
    u_xlat1 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb1));
    u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat4.xy = u_xlat4.yw * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat3.w = u_xlat4.x;
    u_xlat2.w = u_xlat4.y;
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat0.x = u_xlat10_0.x * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat10_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat10_24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat10_16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat10_1 + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 1079
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %78 %81 %95 %1075 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpDecorate %32 ArrayStride 32 
                                                      OpMemberDecorate %33 0 Offset 33 
                                                      OpMemberDecorate %33 1 Offset 33 
                                                      OpMemberDecorate %33 2 Offset 33 
                                                      OpMemberDecorate %33 3 Offset 33 
                                                      OpMemberDecorate %33 4 Offset 33 
                                                      OpMemberDecorate %33 5 Offset 33 
                                                      OpMemberDecorate %33 6 RelaxedPrecision 
                                                      OpMemberDecorate %33 6 Offset 33 
                                                      OpMemberDecorate %33 7 Offset 33 
                                                      OpDecorate %33 Block 
                                                      OpDecorate %35 DescriptorSet 35 
                                                      OpDecorate %35 Binding 35 
                                                      OpDecorate %78 Location 78 
                                                      OpDecorate %81 Location 81 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %620 DescriptorSet 620 
                                                      OpDecorate %620 Binding 620 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %632 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %679 RelaxedPrecision 
                                                      OpDecorate %680 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %760 RelaxedPrecision 
                                                      OpDecorate %795 RelaxedPrecision 
                                                      OpDecorate %806 RelaxedPrecision 
                                                      OpDecorate %812 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %853 RelaxedPrecision 
                                                      OpDecorate %864 RelaxedPrecision 
                                                      OpDecorate %870 RelaxedPrecision 
                                                      OpDecorate %878 RelaxedPrecision 
                                                      OpDecorate %917 RelaxedPrecision 
                                                      OpDecorate %928 RelaxedPrecision 
                                                      OpDecorate %934 RelaxedPrecision 
                                                      OpDecorate %942 RelaxedPrecision 
                                                      OpDecorate %989 RelaxedPrecision 
                                                      OpDecorate %990 RelaxedPrecision 
                                                      OpDecorate %1001 RelaxedPrecision 
                                                      OpDecorate %1012 RelaxedPrecision 
                                                      OpDecorate %1023 RelaxedPrecision 
                                                      OpDecorate %1024 RelaxedPrecision 
                                                      OpDecorate %1030 RelaxedPrecision 
                                                      OpDecorate %1038 RelaxedPrecision 
                                                      OpDecorate %1046 RelaxedPrecision 
                                                      OpDecorate %1054 RelaxedPrecision 
                                                      OpDecorate %1060 RelaxedPrecision 
                                                      OpDecorate %1062 RelaxedPrecision 
                                                      OpDecorate %1063 RelaxedPrecision 
                                                      OpDecorate %1064 RelaxedPrecision 
                                                      OpDecorate %1067 RelaxedPrecision 
                                                      OpDecorate %1071 RelaxedPrecision 
                                                      OpDecorate %1072 RelaxedPrecision 
                                                      OpDecorate %1075 RelaxedPrecision 
                                                      OpDecorate %1075 Location 1075 
                                                      OpDecorate %1078 RelaxedPrecision 
                                                      OpDecorate %1078 DescriptorSet 1078 
                                                      OpDecorate %1078 Binding 1078 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                              %26 = OpTypeVector %6 3 
                                              %27 = OpTypePointer Private %26 
                               Private f32_3* %28 = OpVariable Private 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %7 %29 
                                          u32 %31 = OpConstant 16 
                                              %32 = OpTypeArray %7 %31 
                                              %33 = OpTypeStruct %7 %7 %30 %7 %7 %32 %7 %7 
                                              %34 = OpTypePointer Uniform %33 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4; f32_4;}* %35 = OpVariable Uniform 
                                              %36 = OpTypeInt 32 1 
                                          i32 %37 = OpConstant 0 
                                              %38 = OpTypePointer Uniform %6 
                                          u32 %44 = OpConstant 1 
                                          f32 %49 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %61 = OpConstant 1 
                                          u32 %62 = OpConstant 3 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypePointer Input %26 
                                 Input f32_3* %78 = OpVariable Input 
                                 Input f32_3* %81 = OpVariable Input 
                                 Input f32_3* %95 = OpVariable Input 
                                             %112 = OpTypePointer Uniform %7 
                                             %124 = OpTypeBool 
                                             %125 = OpTypeVector %124 4 
                                             %126 = OpTypePointer Private %125 
                             Private bool_4* %127 = OpVariable Private 
                                         i32 %130 = OpConstant 3 
                                         f32 %134 = OpConstant 3.674022E-40 
                                       f32_4 %135 = OpConstantComposite %134 %134 %134 %134 
                                       f32_4 %136 = OpConstantComposite %49 %49 %49 %49 
                             Private bool_4* %140 = OpVariable Private 
                                         i32 %143 = OpConstant 4 
                              Private f32_4* %147 = OpVariable Private 
                              Private f32_4* %151 = OpVariable Private 
                                         i32 %157 = OpConstant 2 
                                         i32 %181 = OpConstant 5 
                                         i32 %199 = OpConstant 6 
                                         i32 %211 = OpConstant 7 
                              Private f32_4* %230 = OpVariable Private 
                                         i32 %284 = OpConstant 9 
                                         i32 %291 = OpConstant 8 
                                         i32 %303 = OpConstant 10 
                                         i32 %315 = OpConstant 11 
                                         i32 %339 = OpConstant 13 
                                         i32 %346 = OpConstant 12 
                                         i32 %358 = OpConstant 14 
                                         i32 %370 = OpConstant 15 
                                Private f32* %392 = OpVariable Private 
                                         u32 %397 = OpConstant 2 
                                         f32 %409 = OpConstant 3.674022E-40 
                                       f32_2 %410 = OpConstantComposite %409 %409 
                                             %431 = OpTypePointer Private %17 
                              Private f32_2* %432 = OpVariable Private 
                                       f32_2 %436 = OpConstantComposite %49 %49 
                                       f32_2 %440 = OpConstantComposite %134 %134 
                                         f32 %453 = OpConstant 3.674022E-40 
                                       f32_2 %454 = OpConstantComposite %453 %453 
                                         f32 %457 = OpConstant 3.674022E-40 
                                       f32_2 %458 = OpConstantComposite %457 %457 
                              Private f32_4* %468 = OpVariable Private 
                                       f32_4 %471 = OpConstantComposite %409 %49 %409 %49 
                              Private f32_4* %487 = OpVariable Private 
                              Private f32_4* %492 = OpVariable Private 
                                         f32 %506 = OpConstant 3.674022E-40 
                                       f32_2 %507 = OpConstantComposite %506 %506 
                                         f32 %521 = OpConstant 3.674022E-40 
                                       f32_2 %522 = OpConstantComposite %521 %457 
                                         f32 %524 = OpConstant 3.674022E-40 
                                       f32_2 %525 = OpConstantComposite %524 %457 
                                       f32_2 %532 = OpConstantComposite %457 %524 
                                         f32 %549 = OpConstant 3.674022E-40 
                                         f32 %550 = OpConstant 3.674022E-40 
                                         f32 %551 = OpConstant 3.674022E-40 
                                       f32_4 %552 = OpConstantComposite %549 %550 %409 %551 
                              Private f32_4* %590 = OpVariable Private 
                              Private f32_4* %598 = OpVariable Private 
                                             %608 = OpTypePointer Function %26 
                                Private f32* %616 = OpVariable Private 
                                             %617 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %618 = OpTypeSampledImage %617 
                                             %619 = OpTypePointer UniformConstant %618 
 UniformConstant read_only Texture2DSampled* %620 = OpVariable UniformConstant 
                                Private f32* %632 = OpVariable Private 
                                Private f32* %679 = OpVariable Private 
                                Private f32* %745 = OpVariable Private 
                                Private f32* %989 = OpVariable Private 
                               Private f32* %1023 = OpVariable Private 
                               Private f32* %1060 = OpVariable Private 
                                            %1074 = OpTypePointer Output %7 
                              Output f32_4* %1075 = OpVariable Output 
UniformConstant read_only Texture2DSampled* %1078 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %609 = OpVariable Function 
                             Function f32_3* %625 = OpVariable Function 
                             Function f32_3* %673 = OpVariable Function 
                             Function f32_3* %684 = OpVariable Function 
                             Function f32_3* %727 = OpVariable Function 
                             Function f32_3* %738 = OpVariable Function 
                             Function f32_3* %789 = OpVariable Function 
                             Function f32_3* %799 = OpVariable Function 
                             Function f32_3* %846 = OpVariable Function 
                             Function f32_3* %857 = OpVariable Function 
                             Function f32_3* %911 = OpVariable Function 
                             Function f32_3* %921 = OpVariable Function 
                             Function f32_3* %982 = OpVariable Function 
                             Function f32_3* %994 = OpVariable Function 
                            Function f32_3* %1005 = OpVariable Function 
                            Function f32_3* %1016 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Uniform f32* %39 = OpAccessChain %35 %37 %22 
                                          f32 %40 = OpLoad %39 
                                 Private f32* %41 = OpAccessChain %9 %22 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFMul %40 %42 
                                 Uniform f32* %45 = OpAccessChain %35 %37 %44 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFAdd %43 %46 
                                 Private f32* %48 = OpAccessChain %28 %22 
                                                      OpStore %48 %47 
                                 Private f32* %50 = OpAccessChain %28 %22 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFDiv %49 %51 
                                 Private f32* %53 = OpAccessChain %28 %22 
                                                      OpStore %53 %52 
                                 Private f32* %55 = OpAccessChain %28 %22 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFNegate %56 
                                 Private f32* %58 = OpAccessChain %9 %22 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFAdd %57 %59 
                                                      OpStore %54 %60 
                                 Uniform f32* %63 = OpAccessChain %35 %61 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %54 
                                          f32 %66 = OpFMul %64 %65 
                                 Private f32* %67 = OpAccessChain %28 %22 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFAdd %66 %68 
                                 Private f32* %70 = OpAccessChain %28 %22 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %9 %22 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFNegate %72 
                                          f32 %74 = OpFAdd %73 %49 
                                 Private f32* %75 = OpAccessChain %9 %22 
                                                      OpStore %75 %74 
                                        f32_3 %79 = OpLoad %78 
                                        f32_3 %80 = OpFNegate %79 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %80 %82 
                                        f32_4 %84 = OpLoad %76 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %76 %85 
                                        f32_4 %86 = OpLoad %9 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 0 0 
                                        f32_4 %88 = OpLoad %76 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFMul %87 %89 
                                        f32_3 %91 = OpLoad %78 
                                        f32_3 %92 = OpFAdd %90 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpVectorShuffle %93 %92 4 1 5 6 
                                                      OpStore %9 %94 
                                        f32_3 %96 = OpLoad %95 
                                        f32_3 %97 = OpFNegate %96 
                                        f32_3 %98 = OpLoad %28 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %9 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 2 3 
                                       f32_3 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 1 5 6 
                                                      OpStore %9 %105 
                                       f32_3 %106 = OpLoad %28 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 0 0 
                                       f32_3 %108 = OpLoad %95 
                                       f32_3 %109 = OpFMul %107 %108 
                                       f32_4 %110 = OpLoad %76 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 6 3 
                                                      OpStore %76 %111 
                              Uniform f32_4* %113 = OpAccessChain %35 %61 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 3 3 3 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 2 3 
                                       f32_3 %118 = OpFMul %115 %117 
                                       f32_4 %119 = OpLoad %76 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFAdd %118 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %9 %123 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpVectorShuffle %128 %128 2 2 2 2 
                              Uniform f32_4* %131 = OpAccessChain %35 %130 
                                       f32_4 %132 = OpLoad %131 
                                      bool_4 %133 = OpFOrdGreaterThanEqual %129 %132 
                                                      OpStore %127 %133 
                                      bool_4 %137 = OpLoad %127 
                                       f32_4 %138 = OpSelect %137 %136 %135 
                                       f32_4 %139 = OpExtInst %1 46 %135 %136 %138 
                                                      OpStore %76 %139 
                                       f32_4 %141 = OpLoad %9 
                                       f32_4 %142 = OpVectorShuffle %141 %141 2 2 2 2 
                              Uniform f32_4* %144 = OpAccessChain %35 %143 
                                       f32_4 %145 = OpLoad %144 
                                      bool_4 %146 = OpFOrdLessThan %142 %145 
                                                      OpStore %140 %146 
                                      bool_4 %148 = OpLoad %140 
                                       f32_4 %149 = OpSelect %148 %136 %135 
                                       f32_4 %150 = OpExtInst %1 46 %135 %136 %149 
                                                      OpStore %147 %150 
                                       f32_4 %152 = OpLoad %76 
                                       f32_4 %153 = OpLoad %147 
                                       f32_4 %154 = OpFMul %152 %153 
                                                      OpStore %151 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_4 %156 = OpVectorShuffle %155 %155 1 1 1 1 
                              Uniform f32_4* %158 = OpAccessChain %35 %157 %61 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpFMul %156 %159 
                                                      OpStore %147 %160 
                              Uniform f32_4* %161 = OpAccessChain %35 %157 %37 
                                       f32_4 %162 = OpLoad %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %163 0 0 0 0 
                                       f32_4 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %147 
                                       f32_4 %167 = OpFAdd %165 %166 
                                                      OpStore %147 %167 
                              Uniform f32_4* %168 = OpAccessChain %35 %157 %157 
                                       f32_4 %169 = OpLoad %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_4 %171 = OpVectorShuffle %170 %170 2 2 2 2 
                                       f32_4 %172 = OpFMul %169 %171 
                                       f32_4 %173 = OpLoad %147 
                                       f32_4 %174 = OpFAdd %172 %173 
                                                      OpStore %9 %174 
                                       f32_4 %175 = OpLoad %9 
                              Uniform f32_4* %176 = OpAccessChain %35 %157 %130 
                                       f32_4 %177 = OpLoad %176 
                                       f32_4 %178 = OpFAdd %175 %177 
                                                      OpStore %9 %178 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 1 1 1 
                              Uniform f32_4* %182 = OpAccessChain %35 %181 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFMul %180 %184 
                                       f32_4 %186 = OpLoad %147 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %147 %187 
                              Uniform f32_4* %188 = OpAccessChain %35 %181 %143 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %9 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 0 0 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_4 %194 = OpLoad %147 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFAdd %193 %195 
                                       f32_4 %197 = OpLoad %147 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %147 %198 
                              Uniform f32_4* %200 = OpAccessChain %35 %181 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %9 
                                       f32_3 %204 = OpVectorShuffle %203 %203 2 2 2 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %147 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFAdd %205 %207 
                                       f32_4 %209 = OpLoad %147 
                                       f32_4 %210 = OpVectorShuffle %209 %208 4 5 6 3 
                                                      OpStore %147 %210 
                              Uniform f32_4* %212 = OpAccessChain %35 %181 %211 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_4 %215 = OpLoad %9 
                                       f32_3 %216 = OpVectorShuffle %215 %215 3 3 3 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %147 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFAdd %217 %219 
                                       f32_4 %221 = OpLoad %147 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
                                                      OpStore %147 %222 
                                       f32_4 %223 = OpLoad %151 
                                       f32_3 %224 = OpVectorShuffle %223 %223 1 1 1 
                                       f32_4 %225 = OpLoad %147 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_3 %227 = OpFMul %224 %226 
                                       f32_4 %228 = OpLoad %147 
                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
                                                      OpStore %147 %229 
                                       f32_4 %231 = OpLoad %9 
                                       f32_3 %232 = OpVectorShuffle %231 %231 1 1 1 
                              Uniform f32_4* %233 = OpAccessChain %35 %181 %61 
                                       f32_4 %234 = OpLoad %233 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %236 = OpFMul %232 %235 
                                       f32_4 %237 = OpLoad %230 
                                       f32_4 %238 = OpVectorShuffle %237 %236 4 5 6 3 
                                                      OpStore %230 %238 
                              Uniform f32_4* %239 = OpAccessChain %35 %181 %37 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_4 %242 = OpLoad %9 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 0 0 
                                       f32_3 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %230 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpFAdd %244 %246 
                                       f32_4 %248 = OpLoad %230 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
                                                      OpStore %230 %249 
                              Uniform f32_4* %250 = OpAccessChain %35 %181 %157 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_4 %253 = OpLoad %9 
                                       f32_3 %254 = OpVectorShuffle %253 %253 2 2 2 
                                       f32_3 %255 = OpFMul %252 %254 
                                       f32_4 %256 = OpLoad %230 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpFAdd %255 %257 
                                       f32_4 %259 = OpLoad %230 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %230 %260 
                              Uniform f32_4* %261 = OpAccessChain %35 %181 %130 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 3 3 3 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_4 %267 = OpLoad %230 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFAdd %266 %268 
                                       f32_4 %270 = OpLoad %230 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %230 %271 
                                       f32_4 %272 = OpLoad %230 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_4 %274 = OpLoad %151 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 0 0 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_4 %277 = OpLoad %147 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFAdd %276 %278 
                                       f32_4 %280 = OpLoad %147 
                                       f32_4 %281 = OpVectorShuffle %280 %279 4 5 6 3 
                                                      OpStore %147 %281 
                                       f32_4 %282 = OpLoad %9 
                                       f32_3 %283 = OpVectorShuffle %282 %282 1 1 1 
                              Uniform f32_4* %285 = OpAccessChain %35 %181 %284 
                                       f32_4 %286 = OpLoad %285 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpFMul %283 %287 
                                       f32_4 %289 = OpLoad %230 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 6 3 
                                                      OpStore %230 %290 
                              Uniform f32_4* %292 = OpAccessChain %35 %181 %291 
                                       f32_4 %293 = OpLoad %292 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                                       f32_4 %295 = OpLoad %9 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 0 0 
                                       f32_3 %297 = OpFMul %294 %296 
                                       f32_4 %298 = OpLoad %230 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpFAdd %297 %299 
                                       f32_4 %301 = OpLoad %230 
                                       f32_4 %302 = OpVectorShuffle %301 %300 4 5 6 3 
                                                      OpStore %230 %302 
                              Uniform f32_4* %304 = OpAccessChain %35 %181 %303 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_4 %307 = OpLoad %9 
                                       f32_3 %308 = OpVectorShuffle %307 %307 2 2 2 
                                       f32_3 %309 = OpFMul %306 %308 
                                       f32_4 %310 = OpLoad %230 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpFAdd %309 %311 
                                       f32_4 %313 = OpLoad %230 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %230 %314 
                              Uniform f32_4* %316 = OpAccessChain %35 %181 %315 
                                       f32_4 %317 = OpLoad %316 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                       f32_4 %319 = OpLoad %9 
                                       f32_3 %320 = OpVectorShuffle %319 %319 3 3 3 
                                       f32_3 %321 = OpFMul %318 %320 
                                       f32_4 %322 = OpLoad %230 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpFAdd %321 %323 
                                       f32_4 %325 = OpLoad %230 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
                                                      OpStore %230 %326 
                                       f32_4 %327 = OpLoad %230 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_4 %329 = OpLoad %151 
                                       f32_3 %330 = OpVectorShuffle %329 %329 2 2 2 
                                       f32_3 %331 = OpFMul %328 %330 
                                       f32_4 %332 = OpLoad %147 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_3 %334 = OpFAdd %331 %333 
                                       f32_4 %335 = OpLoad %147 
                                       f32_4 %336 = OpVectorShuffle %335 %334 4 5 6 3 
                                                      OpStore %147 %336 
                                       f32_4 %337 = OpLoad %9 
                                       f32_3 %338 = OpVectorShuffle %337 %337 1 1 1 
                              Uniform f32_4* %340 = OpAccessChain %35 %181 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %338 %342 
                                       f32_4 %344 = OpLoad %230 
                                       f32_4 %345 = OpVectorShuffle %344 %343 4 5 6 3 
                                                      OpStore %230 %345 
                              Uniform f32_4* %347 = OpAccessChain %35 %181 %346 
                                       f32_4 %348 = OpLoad %347 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                       f32_4 %350 = OpLoad %9 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 0 0 
                                       f32_3 %352 = OpFMul %349 %351 
                                       f32_4 %353 = OpLoad %230 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                                       f32_3 %355 = OpFAdd %352 %354 
                                       f32_4 %356 = OpLoad %230 
                                       f32_4 %357 = OpVectorShuffle %356 %355 4 5 6 3 
                                                      OpStore %230 %357 
                              Uniform f32_4* %359 = OpAccessChain %35 %181 %358 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_4 %362 = OpLoad %9 
                                       f32_3 %363 = OpVectorShuffle %362 %362 2 2 2 
                                       f32_3 %364 = OpFMul %361 %363 
                                       f32_4 %365 = OpLoad %230 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFAdd %364 %366 
                                       f32_4 %368 = OpLoad %9 
                                       f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
                                                      OpStore %9 %369 
                              Uniform f32_4* %371 = OpAccessChain %35 %181 %370 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 3 3 3 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_4 %377 = OpLoad %9 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_3 %379 = OpFAdd %376 %378 
                                       f32_4 %380 = OpLoad %9 
                                       f32_4 %381 = OpVectorShuffle %380 %379 4 5 6 3 
                                                      OpStore %9 %381 
                                       f32_4 %382 = OpLoad %9 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_4 %384 = OpLoad %151 
                                       f32_3 %385 = OpVectorShuffle %384 %384 3 3 3 
                                       f32_3 %386 = OpFMul %383 %385 
                                       f32_4 %387 = OpLoad %147 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFAdd %386 %388 
                                       f32_4 %390 = OpLoad %9 
                                       f32_4 %391 = OpVectorShuffle %390 %389 4 5 6 3 
                                                      OpStore %9 %391 
                                       f32_4 %393 = OpLoad %151 
                                         f32 %394 = OpDot %393 %136 
                                                      OpStore %392 %394 
                                         f32 %395 = OpLoad %392 
                                         f32 %396 = OpFNegate %395 
                                Private f32* %398 = OpAccessChain %9 %397 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFAdd %396 %399 
                                                      OpStore %54 %400 
                                         f32 %401 = OpLoad %54 
                                         f32 %402 = OpFAdd %401 %49 
                                                      OpStore %54 %402 
                                       f32_4 %403 = OpLoad %9 
                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
                              Uniform f32_4* %405 = OpAccessChain %35 %211 
                                       f32_4 %406 = OpLoad %405 
                                       f32_2 %407 = OpVectorShuffle %406 %406 2 3 
                                       f32_2 %408 = OpFMul %404 %407 
                                       f32_2 %411 = OpFAdd %408 %410 
                                       f32_4 %412 = OpLoad %147 
                                       f32_4 %413 = OpVectorShuffle %412 %411 4 5 2 3 
                                                      OpStore %147 %413 
                                       f32_4 %414 = OpLoad %147 
                                       f32_2 %415 = OpVectorShuffle %414 %414 0 1 
                                       f32_2 %416 = OpExtInst %1 8 %415 
                                       f32_4 %417 = OpLoad %147 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 2 3 
                                                      OpStore %147 %418 
                                       f32_4 %419 = OpLoad %9 
                                       f32_2 %420 = OpVectorShuffle %419 %419 0 1 
                              Uniform f32_4* %421 = OpAccessChain %35 %211 
                                       f32_4 %422 = OpLoad %421 
                                       f32_2 %423 = OpVectorShuffle %422 %422 2 3 
                                       f32_2 %424 = OpFMul %420 %423 
                                       f32_4 %425 = OpLoad %147 
                                       f32_2 %426 = OpVectorShuffle %425 %425 0 1 
                                       f32_2 %427 = OpFNegate %426 
                                       f32_2 %428 = OpFAdd %424 %427 
                                       f32_4 %429 = OpLoad %9 
                                       f32_4 %430 = OpVectorShuffle %429 %428 4 5 2 3 
                                                      OpStore %9 %430 
                                       f32_4 %433 = OpLoad %9 
                                       f32_2 %434 = OpVectorShuffle %433 %433 0 1 
                                       f32_2 %435 = OpFNegate %434 
                                       f32_2 %437 = OpFAdd %435 %436 
                                                      OpStore %432 %437 
                                       f32_4 %438 = OpLoad %9 
                                       f32_2 %439 = OpVectorShuffle %438 %438 0 1 
                                       f32_2 %441 = OpExtInst %1 37 %439 %440 
                                       f32_4 %442 = OpLoad %230 
                                       f32_4 %443 = OpVectorShuffle %442 %441 4 5 2 3 
                                                      OpStore %230 %443 
                                       f32_4 %444 = OpLoad %230 
                                       f32_2 %445 = OpVectorShuffle %444 %444 0 1 
                                       f32_2 %446 = OpFNegate %445 
                                       f32_4 %447 = OpLoad %230 
                                       f32_2 %448 = OpVectorShuffle %447 %447 0 1 
                                       f32_2 %449 = OpFMul %446 %448 
                                       f32_2 %450 = OpLoad %432 
                                       f32_2 %451 = OpFAdd %449 %450 
                                                      OpStore %432 %451 
                                       f32_2 %452 = OpLoad %432 
                                       f32_2 %455 = OpFAdd %452 %454 
                                                      OpStore %432 %455 
                                       f32_2 %456 = OpLoad %432 
                                       f32_2 %459 = OpFMul %456 %458 
                                       f32_4 %460 = OpLoad %76 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 2 3 
                                                      OpStore %76 %461 
                                Private f32* %462 = OpAccessChain %76 %22 
                                         f32 %463 = OpLoad %462 
                                Private f32* %464 = OpAccessChain %230 %44 
                                                      OpStore %464 %463 
                                       f32_4 %465 = OpLoad %9 
                                       f32_2 %466 = OpVectorShuffle %465 %465 0 1 
                                       f32_2 %467 = OpExtInst %1 40 %466 %440 
                                                      OpStore %432 %467 
                                       f32_4 %469 = OpLoad %9 
                                       f32_4 %470 = OpVectorShuffle %469 %469 0 0 1 1 
                                       f32_4 %472 = OpFAdd %470 %471 
                                                      OpStore %468 %472 
                                       f32_2 %473 = OpLoad %432 
                                       f32_2 %474 = OpFNegate %473 
                                       f32_2 %475 = OpLoad %432 
                                       f32_2 %476 = OpFMul %474 %475 
                                       f32_4 %477 = OpLoad %468 
                                       f32_2 %478 = OpVectorShuffle %477 %477 1 3 
                                       f32_2 %479 = OpFAdd %476 %478 
                                                      OpStore %432 %479 
                                       f32_4 %480 = OpLoad %468 
                                       f32_4 %481 = OpVectorShuffle %480 %480 0 0 2 2 
                                       f32_4 %482 = OpLoad %468 
                                       f32_4 %483 = OpVectorShuffle %482 %482 0 0 2 2 
                                       f32_4 %484 = OpFMul %481 %483 
                                                      OpStore %468 %484 
                                       f32_2 %485 = OpLoad %432 
                                       f32_2 %486 = OpFAdd %485 %454 
                                                      OpStore %432 %486 
                                Private f32* %488 = OpAccessChain %432 %22 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpFMul %489 %457 
                                Private f32* %491 = OpAccessChain %487 %397 
                                                      OpStore %491 %490 
                                Private f32* %493 = OpAccessChain %432 %44 
                                         f32 %494 = OpLoad %493 
                                         f32 %495 = OpFMul %494 %457 
                                Private f32* %496 = OpAccessChain %492 %397 
                                                      OpStore %496 %495 
                                       f32_4 %497 = OpLoad %468 
                                       f32_2 %498 = OpVectorShuffle %497 %497 0 2 
                                       f32_2 %499 = OpFMul %498 %410 
                                       f32_4 %500 = OpLoad %9 
                                       f32_2 %501 = OpVectorShuffle %500 %500 0 1 
                                       f32_2 %502 = OpFNegate %501 
                                       f32_2 %503 = OpFAdd %499 %502 
                                                      OpStore %432 %503 
                                       f32_4 %504 = OpLoad %468 
                                       f32_2 %505 = OpVectorShuffle %504 %504 1 3 
                                       f32_2 %508 = OpFMul %505 %507 
                                       f32_4 %509 = OpLoad %468 
                                       f32_4 %510 = OpVectorShuffle %509 %508 4 5 2 3 
                                                      OpStore %468 %510 
                                       f32_2 %511 = OpLoad %432 
                                       f32_2 %512 = OpVectorShuffle %511 %511 1 0 
                                       f32_2 %513 = OpFMul %512 %458 
                                       f32_4 %514 = OpLoad %492 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 5 2 3 
                                                      OpStore %492 %515 
                                Private f32* %516 = OpAccessChain %492 %44 
                                         f32 %517 = OpLoad %516 
                                Private f32* %518 = OpAccessChain %487 %22 
                                                      OpStore %518 %517 
                                       f32_4 %519 = OpLoad %9 
                                       f32_2 %520 = OpVectorShuffle %519 %519 0 0 
                                       f32_2 %523 = OpFMul %520 %522 
                                       f32_2 %526 = OpFAdd %523 %525 
                                       f32_4 %527 = OpLoad %487 
                                       f32_4 %528 = OpVectorShuffle %527 %526 0 4 2 5 
                                                      OpStore %487 %528 
                                       f32_4 %529 = OpLoad %9 
                                       f32_2 %530 = OpVectorShuffle %529 %529 0 0 
                                       f32_2 %531 = OpFMul %530 %522 
                                       f32_2 %533 = OpFAdd %531 %532 
                                       f32_4 %534 = OpLoad %230 
                                       f32_4 %535 = OpVectorShuffle %534 %533 4 1 5 3 
                                                      OpStore %230 %535 
                                Private f32* %536 = OpAccessChain %468 %22 
                                         f32 %537 = OpLoad %536 
                                Private f32* %538 = OpAccessChain %230 %62 
                                                      OpStore %538 %537 
                                Private f32* %539 = OpAccessChain %468 %44 
                                         f32 %540 = OpLoad %539 
                                Private f32* %541 = OpAccessChain %76 %62 
                                                      OpStore %541 %540 
                                       f32_4 %542 = OpLoad %230 
                                       f32_4 %543 = OpLoad %487 
                                       f32_4 %544 = OpFAdd %542 %543 
                                                      OpStore %468 %544 
                                       f32_4 %545 = OpLoad %230 
                                       f32_4 %546 = OpLoad %468 
                                       f32_4 %547 = OpFDiv %545 %546 
                                                      OpStore %230 %547 
                                       f32_4 %548 = OpLoad %230 
                                       f32_4 %553 = OpFAdd %548 %552 
                                                      OpStore %230 %553 
                                       f32_4 %554 = OpLoad %230 
                                       f32_4 %555 = OpVectorShuffle %554 %554 3 0 1 2 
                              Uniform f32_4* %556 = OpAccessChain %35 %211 
                                       f32_4 %557 = OpLoad %556 
                                       f32_4 %558 = OpVectorShuffle %557 %557 0 0 0 0 
                                       f32_4 %559 = OpFMul %555 %558 
                                                      OpStore %230 %559 
                                       f32_4 %560 = OpLoad %9 
                                       f32_2 %561 = OpVectorShuffle %560 %560 1 1 
                                       f32_2 %562 = OpFMul %561 %522 
                                       f32_2 %563 = OpFAdd %562 %525 
                                       f32_4 %564 = OpLoad %492 
                                       f32_4 %565 = OpVectorShuffle %564 %563 0 4 2 5 
                                                      OpStore %492 %565 
                                       f32_4 %566 = OpLoad %9 
                                       f32_2 %567 = OpVectorShuffle %566 %566 1 1 
                                       f32_2 %568 = OpFMul %567 %522 
                                       f32_2 %569 = OpFAdd %568 %532 
                                       f32_4 %570 = OpLoad %76 
                                       f32_4 %571 = OpVectorShuffle %570 %569 4 1 5 3 
                                                      OpStore %76 %571 
                                       f32_4 %572 = OpLoad %76 
                                       f32_4 %573 = OpLoad %492 
                                       f32_4 %574 = OpFAdd %572 %573 
                                                      OpStore %487 %574 
                                       f32_4 %575 = OpLoad %76 
                                       f32_4 %576 = OpLoad %487 
                                       f32_4 %577 = OpFDiv %575 %576 
                                                      OpStore %76 %577 
                                       f32_4 %578 = OpLoad %76 
                                       f32_4 %579 = OpFAdd %578 %552 
                                                      OpStore %76 %579 
                                       f32_4 %580 = OpLoad %76 
                                       f32_4 %581 = OpVectorShuffle %580 %580 0 3 1 2 
                              Uniform f32_4* %582 = OpAccessChain %35 %211 
                                       f32_4 %583 = OpLoad %582 
                                       f32_4 %584 = OpVectorShuffle %583 %583 1 1 1 1 
                                       f32_4 %585 = OpFMul %581 %584 
                                                      OpStore %76 %585 
                                       f32_4 %586 = OpLoad %468 
                                       f32_4 %587 = OpLoad %487 
                                       f32_4 %588 = OpVectorShuffle %587 %587 0 0 0 0 
                                       f32_4 %589 = OpFMul %586 %588 
                                                      OpStore %492 %589 
                                       f32_4 %591 = OpLoad %230 
                                       f32_3 %592 = OpVectorShuffle %591 %591 1 2 3 
                                       f32_4 %593 = OpLoad %590 
                                       f32_4 %594 = OpVectorShuffle %593 %592 4 1 5 6 
                                                      OpStore %590 %594 
                                Private f32* %595 = OpAccessChain %76 %22 
                                         f32 %596 = OpLoad %595 
                                Private f32* %597 = OpAccessChain %590 %44 
                                                      OpStore %597 %596 
                                       f32_4 %599 = OpLoad %147 
                                       f32_4 %600 = OpVectorShuffle %599 %599 0 1 0 1 
                              Uniform f32_4* %601 = OpAccessChain %35 %211 
                                       f32_4 %602 = OpLoad %601 
                                       f32_4 %603 = OpVectorShuffle %602 %602 0 1 0 1 
                                       f32_4 %604 = OpFMul %600 %603 
                                       f32_4 %605 = OpLoad %590 
                                       f32_4 %606 = OpVectorShuffle %605 %605 0 1 2 1 
                                       f32_4 %607 = OpFAdd %604 %606 
                                                      OpStore %598 %607 
                                       f32_4 %610 = OpLoad %598 
                                       f32_2 %611 = OpVectorShuffle %610 %610 0 1 
                                         f32 %612 = OpLoad %54 
                                         f32 %613 = OpCompositeExtract %611 0 
                                         f32 %614 = OpCompositeExtract %611 1 
                                       f32_3 %615 = OpCompositeConstruct %613 %614 %612 
                                                      OpStore %609 %615 
                  read_only Texture2DSampled %621 = OpLoad %620 
                                       f32_3 %622 = OpLoad %609 
                                         f32 %623 = OpCompositeExtract %622 2 
                                         f32 %624 = OpImageSampleDrefExplicitLod %621 %622 %623 Lod %6 
                                                      OpStore %616 %624 
                                       f32_4 %626 = OpLoad %598 
                                       f32_2 %627 = OpVectorShuffle %626 %626 2 3 
                                         f32 %628 = OpLoad %54 
                                         f32 %629 = OpCompositeExtract %627 0 
                                         f32 %630 = OpCompositeExtract %627 1 
                                       f32_3 %631 = OpCompositeConstruct %629 %630 %628 
                                                      OpStore %625 %631 
                  read_only Texture2DSampled %633 = OpLoad %620 
                                       f32_3 %634 = OpLoad %625 
                                         f32 %635 = OpCompositeExtract %634 2 
                                         f32 %636 = OpImageSampleDrefExplicitLod %633 %634 %635 Lod %6 
                                                      OpStore %632 %636 
                                         f32 %637 = OpLoad %632 
                                Private f32* %638 = OpAccessChain %492 %44 
                                         f32 %639 = OpLoad %638 
                                         f32 %640 = OpFMul %637 %639 
                                Private f32* %641 = OpAccessChain %28 %22 
                                                      OpStore %641 %640 
                                Private f32* %642 = OpAccessChain %492 %22 
                                         f32 %643 = OpLoad %642 
                                         f32 %644 = OpLoad %616 
                                         f32 %645 = OpFMul %643 %644 
                                Private f32* %646 = OpAccessChain %28 %22 
                                         f32 %647 = OpLoad %646 
                                         f32 %648 = OpFAdd %645 %647 
                                Private f32* %649 = OpAccessChain %9 %22 
                                                      OpStore %649 %648 
                                       f32_4 %650 = OpLoad %147 
                                       f32_2 %651 = OpVectorShuffle %650 %650 0 1 
                              Uniform f32_4* %652 = OpAccessChain %35 %211 
                                       f32_4 %653 = OpLoad %652 
                                       f32_2 %654 = OpVectorShuffle %653 %653 0 1 
                                       f32_2 %655 = OpFMul %651 %654 
                                       f32_4 %656 = OpLoad %590 
                                       f32_2 %657 = OpVectorShuffle %656 %656 3 1 
                                       f32_2 %658 = OpFAdd %655 %657 
                                       f32_3 %659 = OpLoad %28 
                                       f32_3 %660 = OpVectorShuffle %659 %658 3 1 4 
                                                      OpStore %28 %660 
                                Private f32* %661 = OpAccessChain %590 %44 
                                         f32 %662 = OpLoad %661 
                                Private f32* %663 = OpAccessChain %230 %44 
                                                      OpStore %663 %662 
                                       f32_4 %664 = OpLoad %147 
                                       f32_2 %665 = OpVectorShuffle %664 %664 0 1 
                              Uniform f32_4* %666 = OpAccessChain %35 %211 
                                       f32_4 %667 = OpLoad %666 
                                       f32_2 %668 = OpVectorShuffle %667 %667 0 1 
                                       f32_2 %669 = OpFMul %665 %668 
                                       f32_4 %670 = OpLoad %230 
                                       f32_2 %671 = OpVectorShuffle %670 %670 0 1 
                                       f32_2 %672 = OpFAdd %669 %671 
                                                      OpStore %432 %672 
                                       f32_2 %674 = OpLoad %432 
                                         f32 %675 = OpLoad %54 
                                         f32 %676 = OpCompositeExtract %674 0 
                                         f32 %677 = OpCompositeExtract %674 1 
                                       f32_3 %678 = OpCompositeConstruct %676 %677 %675 
                                                      OpStore %673 %678 
                  read_only Texture2DSampled %680 = OpLoad %620 
                                       f32_3 %681 = OpLoad %673 
                                         f32 %682 = OpCompositeExtract %681 2 
                                         f32 %683 = OpImageSampleDrefExplicitLod %680 %681 %682 Lod %6 
                                                      OpStore %679 %683 
                                       f32_3 %685 = OpLoad %28 
                                       f32_2 %686 = OpVectorShuffle %685 %685 0 2 
                                         f32 %687 = OpLoad %54 
                                         f32 %688 = OpCompositeExtract %686 0 
                                         f32 %689 = OpCompositeExtract %686 1 
                                       f32_3 %690 = OpCompositeConstruct %688 %689 %687 
                                                      OpStore %684 %690 
                  read_only Texture2DSampled %691 = OpLoad %620 
                                       f32_3 %692 = OpLoad %684 
                                         f32 %693 = OpCompositeExtract %692 2 
                                         f32 %694 = OpImageSampleDrefExplicitLod %691 %692 %693 Lod %6 
                                                      OpStore %632 %694 
                                Private f32* %695 = OpAccessChain %492 %397 
                                         f32 %696 = OpLoad %695 
                                         f32 %697 = OpLoad %632 
                                         f32 %698 = OpFMul %696 %697 
                                Private f32* %699 = OpAccessChain %9 %22 
                                         f32 %700 = OpLoad %699 
                                         f32 %701 = OpFAdd %698 %700 
                                Private f32* %702 = OpAccessChain %9 %22 
                                                      OpStore %702 %701 
                                Private f32* %703 = OpAccessChain %492 %62 
                                         f32 %704 = OpLoad %703 
                                         f32 %705 = OpLoad %679 
                                         f32 %706 = OpFMul %704 %705 
                                Private f32* %707 = OpAccessChain %9 %22 
                                         f32 %708 = OpLoad %707 
                                         f32 %709 = OpFAdd %706 %708 
                                Private f32* %710 = OpAccessChain %9 %22 
                                                      OpStore %710 %709 
                                       f32_4 %711 = OpLoad %468 
                                       f32_4 %712 = OpLoad %487 
                                       f32_4 %713 = OpVectorShuffle %712 %712 1 1 1 1 
                                       f32_4 %714 = OpFMul %711 %713 
                                                      OpStore %492 %714 
                                Private f32* %715 = OpAccessChain %76 %397 
                                         f32 %716 = OpLoad %715 
                                Private f32* %717 = OpAccessChain %590 %44 
                                                      OpStore %717 %716 
                                       f32_4 %718 = OpLoad %147 
                                       f32_4 %719 = OpVectorShuffle %718 %718 0 1 0 1 
                              Uniform f32_4* %720 = OpAccessChain %35 %211 
                                       f32_4 %721 = OpLoad %720 
                                       f32_4 %722 = OpVectorShuffle %721 %721 0 1 0 1 
                                       f32_4 %723 = OpFMul %719 %722 
                                       f32_4 %724 = OpLoad %590 
                                       f32_4 %725 = OpVectorShuffle %724 %724 0 1 2 1 
                                       f32_4 %726 = OpFAdd %723 %725 
                                                      OpStore %598 %726 
                                       f32_4 %728 = OpLoad %598 
                                       f32_2 %729 = OpVectorShuffle %728 %728 0 1 
                                         f32 %730 = OpLoad %54 
                                         f32 %731 = OpCompositeExtract %729 0 
                                         f32 %732 = OpCompositeExtract %729 1 
                                       f32_3 %733 = OpCompositeConstruct %731 %732 %730 
                                                      OpStore %727 %733 
                  read_only Texture2DSampled %734 = OpLoad %620 
                                       f32_3 %735 = OpLoad %727 
                                         f32 %736 = OpCompositeExtract %735 2 
                                         f32 %737 = OpImageSampleDrefExplicitLod %734 %735 %736 Lod %6 
                                                      OpStore %632 %737 
                                       f32_4 %739 = OpLoad %598 
                                       f32_2 %740 = OpVectorShuffle %739 %739 2 3 
                                         f32 %741 = OpLoad %54 
                                         f32 %742 = OpCompositeExtract %740 0 
                                         f32 %743 = OpCompositeExtract %740 1 
                                       f32_3 %744 = OpCompositeConstruct %742 %743 %741 
                                                      OpStore %738 %744 
                  read_only Texture2DSampled %746 = OpLoad %620 
                                       f32_3 %747 = OpLoad %738 
                                         f32 %748 = OpCompositeExtract %747 2 
                                         f32 %749 = OpImageSampleDrefExplicitLod %746 %747 %748 Lod %6 
                                                      OpStore %745 %749 
                                Private f32* %750 = OpAccessChain %492 %22 
                                         f32 %751 = OpLoad %750 
                                         f32 %752 = OpLoad %632 
                                         f32 %753 = OpFMul %751 %752 
                                Private f32* %754 = OpAccessChain %9 %22 
                                         f32 %755 = OpLoad %754 
                                         f32 %756 = OpFAdd %753 %755 
                                Private f32* %757 = OpAccessChain %9 %22 
                                                      OpStore %757 %756 
                                Private f32* %758 = OpAccessChain %492 %44 
                                         f32 %759 = OpLoad %758 
                                         f32 %760 = OpLoad %745 
                                         f32 %761 = OpFMul %759 %760 
                                Private f32* %762 = OpAccessChain %9 %22 
                                         f32 %763 = OpLoad %762 
                                         f32 %764 = OpFAdd %761 %763 
                                Private f32* %765 = OpAccessChain %9 %22 
                                                      OpStore %765 %764 
                                       f32_4 %766 = OpLoad %147 
                                       f32_2 %767 = OpVectorShuffle %766 %766 0 1 
                              Uniform f32_4* %768 = OpAccessChain %35 %211 
                                       f32_4 %769 = OpLoad %768 
                                       f32_2 %770 = OpVectorShuffle %769 %769 0 1 
                                       f32_2 %771 = OpFMul %767 %770 
                                       f32_4 %772 = OpLoad %590 
                                       f32_2 %773 = OpVectorShuffle %772 %772 3 1 
                                       f32_2 %774 = OpFAdd %771 %773 
                                       f32_3 %775 = OpLoad %28 
                                       f32_3 %776 = OpVectorShuffle %775 %774 3 1 4 
                                                      OpStore %28 %776 
                                Private f32* %777 = OpAccessChain %590 %44 
                                         f32 %778 = OpLoad %777 
                                Private f32* %779 = OpAccessChain %230 %397 
                                                      OpStore %779 %778 
                                       f32_4 %780 = OpLoad %147 
                                       f32_2 %781 = OpVectorShuffle %780 %780 0 1 
                              Uniform f32_4* %782 = OpAccessChain %35 %211 
                                       f32_4 %783 = OpLoad %782 
                                       f32_2 %784 = OpVectorShuffle %783 %783 0 1 
                                       f32_2 %785 = OpFMul %781 %784 
                                       f32_4 %786 = OpLoad %230 
                                       f32_2 %787 = OpVectorShuffle %786 %786 0 2 
                                       f32_2 %788 = OpFAdd %785 %787 
                                                      OpStore %432 %788 
                                       f32_2 %790 = OpLoad %432 
                                         f32 %791 = OpLoad %54 
                                         f32 %792 = OpCompositeExtract %790 0 
                                         f32 %793 = OpCompositeExtract %790 1 
                                       f32_3 %794 = OpCompositeConstruct %792 %793 %791 
                                                      OpStore %789 %794 
                  read_only Texture2DSampled %795 = OpLoad %620 
                                       f32_3 %796 = OpLoad %789 
                                         f32 %797 = OpCompositeExtract %796 2 
                                         f32 %798 = OpImageSampleDrefExplicitLod %795 %796 %797 Lod %6 
                                                      OpStore %679 %798 
                                       f32_3 %800 = OpLoad %28 
                                       f32_2 %801 = OpVectorShuffle %800 %800 0 2 
                                         f32 %802 = OpLoad %54 
                                         f32 %803 = OpCompositeExtract %801 0 
                                         f32 %804 = OpCompositeExtract %801 1 
                                       f32_3 %805 = OpCompositeConstruct %803 %804 %802 
                                                      OpStore %799 %805 
                  read_only Texture2DSampled %806 = OpLoad %620 
                                       f32_3 %807 = OpLoad %799 
                                         f32 %808 = OpCompositeExtract %807 2 
                                         f32 %809 = OpImageSampleDrefExplicitLod %806 %807 %808 Lod %6 
                                                      OpStore %632 %809 
                                Private f32* %810 = OpAccessChain %492 %397 
                                         f32 %811 = OpLoad %810 
                                         f32 %812 = OpLoad %632 
                                         f32 %813 = OpFMul %811 %812 
                                Private f32* %814 = OpAccessChain %9 %22 
                                         f32 %815 = OpLoad %814 
                                         f32 %816 = OpFAdd %813 %815 
                                Private f32* %817 = OpAccessChain %9 %22 
                                                      OpStore %817 %816 
                                Private f32* %818 = OpAccessChain %492 %62 
                                         f32 %819 = OpLoad %818 
                                         f32 %820 = OpLoad %679 
                                         f32 %821 = OpFMul %819 %820 
                                Private f32* %822 = OpAccessChain %9 %22 
                                         f32 %823 = OpLoad %822 
                                         f32 %824 = OpFAdd %821 %823 
                                Private f32* %825 = OpAccessChain %9 %22 
                                                      OpStore %825 %824 
                                       f32_4 %826 = OpLoad %468 
                                       f32_4 %827 = OpLoad %487 
                                       f32_4 %828 = OpVectorShuffle %827 %827 2 2 2 2 
                                       f32_4 %829 = OpFMul %826 %828 
                                                      OpStore %492 %829 
                                       f32_4 %830 = OpLoad %468 
                                       f32_4 %831 = OpLoad %487 
                                       f32_4 %832 = OpVectorShuffle %831 %831 3 3 3 3 
                                       f32_4 %833 = OpFMul %830 %832 
                                                      OpStore %468 %833 
                                Private f32* %834 = OpAccessChain %76 %62 
                                         f32 %835 = OpLoad %834 
                                Private f32* %836 = OpAccessChain %590 %44 
                                                      OpStore %836 %835 
                                       f32_4 %837 = OpLoad %147 
                                       f32_4 %838 = OpVectorShuffle %837 %837 0 1 0 1 
                              Uniform f32_4* %839 = OpAccessChain %35 %211 
                                       f32_4 %840 = OpLoad %839 
                                       f32_4 %841 = OpVectorShuffle %840 %840 0 1 0 1 
                                       f32_4 %842 = OpFMul %838 %841 
                                       f32_4 %843 = OpLoad %590 
                                       f32_4 %844 = OpVectorShuffle %843 %843 0 1 2 1 
                                       f32_4 %845 = OpFAdd %842 %844 
                                                      OpStore %487 %845 
                                       f32_4 %847 = OpLoad %487 
                                       f32_2 %848 = OpVectorShuffle %847 %847 0 1 
                                         f32 %849 = OpLoad %54 
                                         f32 %850 = OpCompositeExtract %848 0 
                                         f32 %851 = OpCompositeExtract %848 1 
                                       f32_3 %852 = OpCompositeConstruct %850 %851 %849 
                                                      OpStore %846 %852 
                  read_only Texture2DSampled %853 = OpLoad %620 
                                       f32_3 %854 = OpLoad %846 
                                         f32 %855 = OpCompositeExtract %854 2 
                                         f32 %856 = OpImageSampleDrefExplicitLod %853 %854 %855 Lod %6 
                                                      OpStore %632 %856 
                                       f32_4 %858 = OpLoad %487 
                                       f32_2 %859 = OpVectorShuffle %858 %858 2 3 
                                         f32 %860 = OpLoad %54 
                                         f32 %861 = OpCompositeExtract %859 0 
                                         f32 %862 = OpCompositeExtract %859 1 
                                       f32_3 %863 = OpCompositeConstruct %861 %862 %860 
                                                      OpStore %857 %863 
                  read_only Texture2DSampled %864 = OpLoad %620 
                                       f32_3 %865 = OpLoad %857 
                                         f32 %866 = OpCompositeExtract %865 2 
                                         f32 %867 = OpImageSampleDrefExplicitLod %864 %865 %866 Lod %6 
                                                      OpStore %745 %867 
                                Private f32* %868 = OpAccessChain %492 %22 
                                         f32 %869 = OpLoad %868 
                                         f32 %870 = OpLoad %632 
                                         f32 %871 = OpFMul %869 %870 
                                Private f32* %872 = OpAccessChain %9 %22 
                                         f32 %873 = OpLoad %872 
                                         f32 %874 = OpFAdd %871 %873 
                                Private f32* %875 = OpAccessChain %9 %22 
                                                      OpStore %875 %874 
                                Private f32* %876 = OpAccessChain %492 %44 
                                         f32 %877 = OpLoad %876 
                                         f32 %878 = OpLoad %745 
                                         f32 %879 = OpFMul %877 %878 
                                Private f32* %880 = OpAccessChain %9 %22 
                                         f32 %881 = OpLoad %880 
                                         f32 %882 = OpFAdd %879 %881 
                                Private f32* %883 = OpAccessChain %9 %22 
                                                      OpStore %883 %882 
                                       f32_4 %884 = OpLoad %147 
                                       f32_2 %885 = OpVectorShuffle %884 %884 0 1 
                              Uniform f32_4* %886 = OpAccessChain %35 %211 
                                       f32_4 %887 = OpLoad %886 
                                       f32_2 %888 = OpVectorShuffle %887 %887 0 1 
                                       f32_2 %889 = OpFMul %885 %888 
                                       f32_4 %890 = OpLoad %590 
                                       f32_2 %891 = OpVectorShuffle %890 %890 3 1 
                                       f32_2 %892 = OpFAdd %889 %891 
                                       f32_3 %893 = OpLoad %28 
                                       f32_3 %894 = OpVectorShuffle %893 %892 3 1 4 
                                                      OpStore %28 %894 
                                       f32_4 %895 = OpLoad %590 
                                       f32_3 %896 = OpVectorShuffle %895 %895 0 2 3 
                                       f32_4 %897 = OpLoad %76 
                                       f32_4 %898 = OpVectorShuffle %897 %896 4 1 5 6 
                                                      OpStore %76 %898 
                                Private f32* %899 = OpAccessChain %590 %44 
                                         f32 %900 = OpLoad %899 
                                Private f32* %901 = OpAccessChain %230 %62 
                                                      OpStore %901 %900 
                                       f32_4 %902 = OpLoad %147 
                                       f32_2 %903 = OpVectorShuffle %902 %902 0 1 
                              Uniform f32_4* %904 = OpAccessChain %35 %211 
                                       f32_4 %905 = OpLoad %904 
                                       f32_2 %906 = OpVectorShuffle %905 %905 0 1 
                                       f32_2 %907 = OpFMul %903 %906 
                                       f32_4 %908 = OpLoad %230 
                                       f32_2 %909 = OpVectorShuffle %908 %908 0 3 
                                       f32_2 %910 = OpFAdd %907 %909 
                                                      OpStore %432 %910 
                                       f32_2 %912 = OpLoad %432 
                                         f32 %913 = OpLoad %54 
                                         f32 %914 = OpCompositeExtract %912 0 
                                         f32 %915 = OpCompositeExtract %912 1 
                                       f32_3 %916 = OpCompositeConstruct %914 %915 %913 
                                                      OpStore %911 %916 
                  read_only Texture2DSampled %917 = OpLoad %620 
                                       f32_3 %918 = OpLoad %911 
                                         f32 %919 = OpCompositeExtract %918 2 
                                         f32 %920 = OpImageSampleDrefExplicitLod %917 %918 %919 Lod %6 
                                                      OpStore %679 %920 
                                       f32_3 %922 = OpLoad %28 
                                       f32_2 %923 = OpVectorShuffle %922 %922 0 2 
                                         f32 %924 = OpLoad %54 
                                         f32 %925 = OpCompositeExtract %923 0 
                                         f32 %926 = OpCompositeExtract %923 1 
                                       f32_3 %927 = OpCompositeConstruct %925 %926 %924 
                                                      OpStore %921 %927 
                  read_only Texture2DSampled %928 = OpLoad %620 
                                       f32_3 %929 = OpLoad %921 
                                         f32 %930 = OpCompositeExtract %929 2 
                                         f32 %931 = OpImageSampleDrefExplicitLod %928 %929 %930 Lod %6 
                                                      OpStore %632 %931 
                                Private f32* %932 = OpAccessChain %492 %397 
                                         f32 %933 = OpLoad %932 
                                         f32 %934 = OpLoad %632 
                                         f32 %935 = OpFMul %933 %934 
                                Private f32* %936 = OpAccessChain %9 %22 
                                         f32 %937 = OpLoad %936 
                                         f32 %938 = OpFAdd %935 %937 
                                Private f32* %939 = OpAccessChain %9 %22 
                                                      OpStore %939 %938 
                                Private f32* %940 = OpAccessChain %492 %62 
                                         f32 %941 = OpLoad %940 
                                         f32 %942 = OpLoad %679 
                                         f32 %943 = OpFMul %941 %942 
                                Private f32* %944 = OpAccessChain %9 %22 
                                         f32 %945 = OpLoad %944 
                                         f32 %946 = OpFAdd %943 %945 
                                Private f32* %947 = OpAccessChain %9 %22 
                                                      OpStore %947 %946 
                                       f32_4 %948 = OpLoad %147 
                                       f32_4 %949 = OpVectorShuffle %948 %948 0 1 0 1 
                              Uniform f32_4* %950 = OpAccessChain %35 %211 
                                       f32_4 %951 = OpLoad %950 
                                       f32_4 %952 = OpVectorShuffle %951 %951 0 1 0 1 
                                       f32_4 %953 = OpFMul %949 %952 
                                       f32_4 %954 = OpLoad %76 
                                       f32_4 %955 = OpVectorShuffle %954 %954 0 1 2 1 
                                       f32_4 %956 = OpFAdd %953 %955 
                                                      OpStore %487 %956 
                                       f32_4 %957 = OpLoad %147 
                                       f32_2 %958 = OpVectorShuffle %957 %957 0 1 
                              Uniform f32_4* %959 = OpAccessChain %35 %211 
                                       f32_4 %960 = OpLoad %959 
                                       f32_2 %961 = OpVectorShuffle %960 %960 0 1 
                                       f32_2 %962 = OpFMul %958 %961 
                                       f32_4 %963 = OpLoad %76 
                                       f32_2 %964 = OpVectorShuffle %963 %963 3 1 
                                       f32_2 %965 = OpFAdd %962 %964 
                                       f32_3 %966 = OpLoad %28 
                                       f32_3 %967 = OpVectorShuffle %966 %965 3 1 4 
                                                      OpStore %28 %967 
                                Private f32* %968 = OpAccessChain %76 %44 
                                         f32 %969 = OpLoad %968 
                                Private f32* %970 = OpAccessChain %230 %44 
                                                      OpStore %970 %969 
                                       f32_4 %971 = OpLoad %147 
                                       f32_2 %972 = OpVectorShuffle %971 %971 0 1 
                              Uniform f32_4* %973 = OpAccessChain %35 %211 
                                       f32_4 %974 = OpLoad %973 
                                       f32_2 %975 = OpVectorShuffle %974 %974 0 1 
                                       f32_2 %976 = OpFMul %972 %975 
                                       f32_4 %977 = OpLoad %230 
                                       f32_2 %978 = OpVectorShuffle %977 %977 0 1 
                                       f32_2 %979 = OpFAdd %976 %978 
                                       f32_4 %980 = OpLoad %147 
                                       f32_4 %981 = OpVectorShuffle %980 %979 4 5 2 3 
                                                      OpStore %147 %981 
                                       f32_4 %983 = OpLoad %147 
                                       f32_2 %984 = OpVectorShuffle %983 %983 0 1 
                                         f32 %985 = OpLoad %54 
                                         f32 %986 = OpCompositeExtract %984 0 
                                         f32 %987 = OpCompositeExtract %984 1 
                                       f32_3 %988 = OpCompositeConstruct %986 %987 %985 
                                                      OpStore %982 %988 
                  read_only Texture2DSampled %990 = OpLoad %620 
                                       f32_3 %991 = OpLoad %982 
                                         f32 %992 = OpCompositeExtract %991 2 
                                         f32 %993 = OpImageSampleDrefExplicitLod %990 %991 %992 Lod %6 
                                                      OpStore %989 %993 
                                       f32_3 %995 = OpLoad %28 
                                       f32_2 %996 = OpVectorShuffle %995 %995 0 2 
                                         f32 %997 = OpLoad %54 
                                         f32 %998 = OpCompositeExtract %996 0 
                                         f32 %999 = OpCompositeExtract %996 1 
                                      f32_3 %1000 = OpCompositeConstruct %998 %999 %997 
                                                      OpStore %994 %1000 
                 read_only Texture2DSampled %1001 = OpLoad %620 
                                      f32_3 %1002 = OpLoad %994 
                                        f32 %1003 = OpCompositeExtract %1002 2 
                                        f32 %1004 = OpImageSampleDrefExplicitLod %1001 %1002 %1003 Lod %6 
                                                      OpStore %632 %1004 
                                      f32_4 %1006 = OpLoad %487 
                                      f32_2 %1007 = OpVectorShuffle %1006 %1006 0 1 
                                        f32 %1008 = OpLoad %54 
                                        f32 %1009 = OpCompositeExtract %1007 0 
                                        f32 %1010 = OpCompositeExtract %1007 1 
                                      f32_3 %1011 = OpCompositeConstruct %1009 %1010 %1008 
                                                      OpStore %1005 %1011 
                 read_only Texture2DSampled %1012 = OpLoad %620 
                                      f32_3 %1013 = OpLoad %1005 
                                        f32 %1014 = OpCompositeExtract %1013 2 
                                        f32 %1015 = OpImageSampleDrefExplicitLod %1012 %1013 %1014 Lod %6 
                                                      OpStore %745 %1015 
                                      f32_4 %1017 = OpLoad %487 
                                      f32_2 %1018 = OpVectorShuffle %1017 %1017 2 3 
                                        f32 %1019 = OpLoad %54 
                                        f32 %1020 = OpCompositeExtract %1018 0 
                                        f32 %1021 = OpCompositeExtract %1018 1 
                                      f32_3 %1022 = OpCompositeConstruct %1020 %1021 %1019 
                                                      OpStore %1016 %1022 
                 read_only Texture2DSampled %1024 = OpLoad %620 
                                      f32_3 %1025 = OpLoad %1016 
                                        f32 %1026 = OpCompositeExtract %1025 2 
                                        f32 %1027 = OpImageSampleDrefExplicitLod %1024 %1025 %1026 Lod %6 
                                                      OpStore %1023 %1027 
                               Private f32* %1028 = OpAccessChain %468 %22 
                                        f32 %1029 = OpLoad %1028 
                                        f32 %1030 = OpLoad %745 
                                        f32 %1031 = OpFMul %1029 %1030 
                               Private f32* %1032 = OpAccessChain %9 %22 
                                        f32 %1033 = OpLoad %1032 
                                        f32 %1034 = OpFAdd %1031 %1033 
                               Private f32* %1035 = OpAccessChain %9 %22 
                                                      OpStore %1035 %1034 
                               Private f32* %1036 = OpAccessChain %468 %44 
                                        f32 %1037 = OpLoad %1036 
                                        f32 %1038 = OpLoad %1023 
                                        f32 %1039 = OpFMul %1037 %1038 
                               Private f32* %1040 = OpAccessChain %9 %22 
                                        f32 %1041 = OpLoad %1040 
                                        f32 %1042 = OpFAdd %1039 %1041 
                               Private f32* %1043 = OpAccessChain %9 %22 
                                                      OpStore %1043 %1042 
                               Private f32* %1044 = OpAccessChain %468 %397 
                                        f32 %1045 = OpLoad %1044 
                                        f32 %1046 = OpLoad %632 
                                        f32 %1047 = OpFMul %1045 %1046 
                               Private f32* %1048 = OpAccessChain %9 %22 
                                        f32 %1049 = OpLoad %1048 
                                        f32 %1050 = OpFAdd %1047 %1049 
                               Private f32* %1051 = OpAccessChain %9 %22 
                                                      OpStore %1051 %1050 
                               Private f32* %1052 = OpAccessChain %468 %62 
                                        f32 %1053 = OpLoad %1052 
                                        f32 %1054 = OpLoad %989 
                                        f32 %1055 = OpFMul %1053 %1054 
                               Private f32* %1056 = OpAccessChain %9 %22 
                                        f32 %1057 = OpLoad %1056 
                                        f32 %1058 = OpFAdd %1055 %1057 
                               Private f32* %1059 = OpAccessChain %9 %22 
                                                      OpStore %1059 %1058 
                               Uniform f32* %1061 = OpAccessChain %35 %199 %22 
                                        f32 %1062 = OpLoad %1061 
                                        f32 %1063 = OpFNegate %1062 
                                        f32 %1064 = OpFAdd %1063 %49 
                                                      OpStore %1060 %1064 
                                      f32_4 %1065 = OpLoad %9 
                                      f32_4 %1066 = OpVectorShuffle %1065 %1065 0 0 0 0 
                                        f32 %1067 = OpLoad %1060 
                                      f32_4 %1068 = OpCompositeConstruct %1067 %1067 %1067 %1067 
                                      f32_4 %1069 = OpFMul %1066 %1068 
                             Uniform f32_4* %1070 = OpAccessChain %35 %199 
                                      f32_4 %1071 = OpLoad %1070 
                                      f32_4 %1072 = OpVectorShuffle %1071 %1071 0 0 0 0 
                                      f32_4 %1073 = OpFAdd %1069 %1072 
                                                      OpStore %9 %1073 
                                      f32_4 %1076 = OpLoad %9 
                                                      OpStore %1075 %1076 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat10_8;
vec3 u_xlat9;
float u_xlat16;
float u_xlat10_16;
vec2 u_xlat17;
float u_xlat10_17;
float u_xlat10_24;
void main()
{
    u_xlat10_0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat8.x = _ZBufferParams.x * u_xlat10_0.x + _ZBufferParams.y;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat16 = (-u_xlat8.x) + u_xlat10_0.x;
    u_xlat8.x = unity_OrthoParams.w * u_xlat16 + u_xlat8.x;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat10_0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat1.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat2.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat2.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat2.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb1));
    u_xlat9.xyz = u_xlat2.xyz + u_xlat1.yzw;
    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.yyy + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.zzz + u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat4.xy = u_xlat4.yw * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat3.w = u_xlat4.x;
    u_xlat2.w = u_xlat4.y;
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat8.x = u_xlat10_8 * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat10_0.x + u_xlat8.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat10_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat10_24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat10_16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat10_1 + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 1165
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %79 %82 %96 %1161 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpDecorate %31 ArrayStride 31 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpMemberDecorate %34 0 Offset 34 
                                                      OpMemberDecorate %34 1 Offset 34 
                                                      OpMemberDecorate %34 2 Offset 34 
                                                      OpMemberDecorate %34 3 Offset 34 
                                                      OpMemberDecorate %34 4 Offset 34 
                                                      OpMemberDecorate %34 5 Offset 34 
                                                      OpMemberDecorate %34 6 RelaxedPrecision 
                                                      OpMemberDecorate %34 6 Offset 34 
                                                      OpMemberDecorate %34 7 Offset 34 
                                                      OpDecorate %34 Block 
                                                      OpDecorate %36 DescriptorSet 36 
                                                      OpDecorate %36 Binding 36 
                                                      OpDecorate %79 Location 79 
                                                      OpDecorate %82 Location 82 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %702 RelaxedPrecision 
                                                      OpDecorate %706 RelaxedPrecision 
                                                      OpDecorate %706 DescriptorSet 706 
                                                      OpDecorate %706 Binding 706 
                                                      OpDecorate %707 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %719 RelaxedPrecision 
                                                      OpDecorate %723 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %765 RelaxedPrecision 
                                                      OpDecorate %766 RelaxedPrecision 
                                                      OpDecorate %777 RelaxedPrecision 
                                                      OpDecorate %783 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %831 RelaxedPrecision 
                                                      OpDecorate %832 RelaxedPrecision 
                                                      OpDecorate %838 RelaxedPrecision 
                                                      OpDecorate %846 RelaxedPrecision 
                                                      OpDecorate %881 RelaxedPrecision 
                                                      OpDecorate %892 RelaxedPrecision 
                                                      OpDecorate %898 RelaxedPrecision 
                                                      OpDecorate %906 RelaxedPrecision 
                                                      OpDecorate %939 RelaxedPrecision 
                                                      OpDecorate %950 RelaxedPrecision 
                                                      OpDecorate %956 RelaxedPrecision 
                                                      OpDecorate %964 RelaxedPrecision 
                                                      OpDecorate %1003 RelaxedPrecision 
                                                      OpDecorate %1014 RelaxedPrecision 
                                                      OpDecorate %1020 RelaxedPrecision 
                                                      OpDecorate %1028 RelaxedPrecision 
                                                      OpDecorate %1075 RelaxedPrecision 
                                                      OpDecorate %1076 RelaxedPrecision 
                                                      OpDecorate %1087 RelaxedPrecision 
                                                      OpDecorate %1098 RelaxedPrecision 
                                                      OpDecorate %1109 RelaxedPrecision 
                                                      OpDecorate %1110 RelaxedPrecision 
                                                      OpDecorate %1116 RelaxedPrecision 
                                                      OpDecorate %1124 RelaxedPrecision 
                                                      OpDecorate %1132 RelaxedPrecision 
                                                      OpDecorate %1140 RelaxedPrecision 
                                                      OpDecorate %1146 RelaxedPrecision 
                                                      OpDecorate %1148 RelaxedPrecision 
                                                      OpDecorate %1149 RelaxedPrecision 
                                                      OpDecorate %1150 RelaxedPrecision 
                                                      OpDecorate %1153 RelaxedPrecision 
                                                      OpDecorate %1157 RelaxedPrecision 
                                                      OpDecorate %1158 RelaxedPrecision 
                                                      OpDecorate %1161 RelaxedPrecision 
                                                      OpDecorate %1161 Location 1161 
                                                      OpDecorate %1164 RelaxedPrecision 
                                                      OpDecorate %1164 DescriptorSet 1164 
                                                      OpDecorate %1164 Binding 1164 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                              %26 = OpTypeVector %6 3 
                                              %27 = OpTypePointer Private %26 
                               Private f32_3* %28 = OpVariable Private 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %7 %29 
                                              %31 = OpTypeArray %7 %29 
                                          u32 %32 = OpConstant 16 
                                              %33 = OpTypeArray %7 %32 
                                              %34 = OpTypeStruct %7 %7 %30 %31 %7 %33 %7 %7 
                                              %35 = OpTypePointer Uniform %34 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4; f32_4;}* %36 = OpVariable Uniform 
                                              %37 = OpTypeInt 32 1 
                                          i32 %38 = OpConstant 0 
                                              %39 = OpTypePointer Uniform %6 
                                          u32 %45 = OpConstant 1 
                                          f32 %50 = OpConstant 3.674022E-40 
                                 Private f32* %55 = OpVariable Private 
                                          i32 %62 = OpConstant 1 
                                          u32 %63 = OpConstant 3 
                               Private f32_4* %77 = OpVariable Private 
                                              %78 = OpTypePointer Input %26 
                                 Input f32_3* %79 = OpVariable Input 
                                 Input f32_3* %82 = OpVariable Input 
                                 Input f32_3* %96 = OpVariable Input 
                                             %113 = OpTypePointer Uniform %7 
                                         i32 %127 = OpConstant 2 
                                         i32 %146 = OpConstant 3 
                              Private f32_4* %165 = OpVariable Private 
                                         u32 %195 = OpConstant 2 
                                             %212 = OpTypeBool 
                                             %213 = OpTypeVector %212 4 
                                             %214 = OpTypePointer Private %213 
                             Private bool_4* %215 = OpVariable Private 
                                         i32 %217 = OpConstant 4 
                              Private f32_3* %221 = OpVariable Private 
                                             %222 = OpTypePointer Function %6 
                                         f32 %228 = OpConstant 3.674022E-40 
                                         f32 %230 = OpConstant 3.674022E-40 
                                         f32 %249 = OpConstant 3.674022E-40 
                                       f32_4 %250 = OpConstantComposite %249 %249 %249 %249 
                                       f32_4 %251 = OpConstantComposite %50 %50 %50 %50 
                              Private f32_3* %259 = OpVariable Private 
                                       f32_3 %261 = OpConstantComposite %249 %249 %249 
                                         i32 %265 = OpConstant 5 
                                         i32 %283 = OpConstant 6 
                                         i32 %295 = OpConstant 7 
                              Private f32_4* %314 = OpVariable Private 
                                         i32 %368 = OpConstant 9 
                                         i32 %375 = OpConstant 8 
                                         i32 %387 = OpConstant 10 
                                         i32 %399 = OpConstant 11 
                                         i32 %423 = OpConstant 13 
                                         i32 %430 = OpConstant 12 
                                         i32 %442 = OpConstant 14 
                                         i32 %454 = OpConstant 15 
                                Private f32* %479 = OpVariable Private 
                                         f32 %495 = OpConstant 3.674022E-40 
                                       f32_2 %496 = OpConstantComposite %495 %495 
                                             %517 = OpTypePointer Private %17 
                              Private f32_2* %518 = OpVariable Private 
                                       f32_2 %522 = OpConstantComposite %50 %50 
                                       f32_2 %526 = OpConstantComposite %249 %249 
                                         f32 %539 = OpConstant 3.674022E-40 
                                       f32_2 %540 = OpConstantComposite %539 %539 
                                         f32 %543 = OpConstant 3.674022E-40 
                                       f32_2 %544 = OpConstantComposite %543 %543 
                              Private f32_4* %548 = OpVariable Private 
                                       f32_4 %557 = OpConstantComposite %495 %50 %495 %50 
                              Private f32_4* %573 = OpVariable Private 
                              Private f32_4* %578 = OpVariable Private 
                                         f32 %585 = OpConstant 3.674022E-40 
                                       f32_2 %586 = OpConstantComposite %585 %543 
                                         f32 %588 = OpConstant 3.674022E-40 
                                       f32_2 %589 = OpConstantComposite %588 %543 
                                         f32 %602 = OpConstant 3.674022E-40 
                                       f32_2 %603 = OpConstantComposite %602 %602 
                                       f32_2 %618 = OpConstantComposite %543 %588 
                                         f32 %635 = OpConstant 3.674022E-40 
                                         f32 %636 = OpConstant 3.674022E-40 
                                         f32 %637 = OpConstant 3.674022E-40 
                                       f32_4 %638 = OpConstantComposite %635 %636 %495 %637 
                              Private f32_4* %676 = OpVariable Private 
                              Private f32_4* %684 = OpVariable Private 
                                             %694 = OpTypePointer Function %26 
                                Private f32* %702 = OpVariable Private 
                                             %703 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %704 = OpTypeSampledImage %703 
                                             %705 = OpTypePointer UniformConstant %704 
 UniformConstant read_only Texture2DSampled* %706 = OpVariable UniformConstant 
                                Private f32* %718 = OpVariable Private 
                                Private f32* %765 = OpVariable Private 
                                Private f32* %831 = OpVariable Private 
                               Private f32* %1075 = OpVariable Private 
                               Private f32* %1109 = OpVariable Private 
                               Private f32* %1146 = OpVariable Private 
                                            %1160 = OpTypePointer Output %7 
                              Output f32_4* %1161 = OpVariable Output 
UniformConstant read_only Texture2DSampled* %1164 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %223 = OpVariable Function 
                               Function f32* %233 = OpVariable Function 
                               Function f32* %241 = OpVariable Function 
                             Function f32_3* %695 = OpVariable Function 
                             Function f32_3* %711 = OpVariable Function 
                             Function f32_3* %759 = OpVariable Function 
                             Function f32_3* %770 = OpVariable Function 
                             Function f32_3* %813 = OpVariable Function 
                             Function f32_3* %824 = OpVariable Function 
                             Function f32_3* %875 = OpVariable Function 
                             Function f32_3* %885 = OpVariable Function 
                             Function f32_3* %932 = OpVariable Function 
                             Function f32_3* %943 = OpVariable Function 
                             Function f32_3* %997 = OpVariable Function 
                            Function f32_3* %1007 = OpVariable Function 
                            Function f32_3* %1068 = OpVariable Function 
                            Function f32_3* %1080 = OpVariable Function 
                            Function f32_3* %1091 = OpVariable Function 
                            Function f32_3* %1102 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Uniform f32* %40 = OpAccessChain %36 %38 %22 
                                          f32 %41 = OpLoad %40 
                                 Private f32* %42 = OpAccessChain %9 %22 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %41 %43 
                                 Uniform f32* %46 = OpAccessChain %36 %38 %45 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFAdd %44 %47 
                                 Private f32* %49 = OpAccessChain %28 %22 
                                                      OpStore %49 %48 
                                 Private f32* %51 = OpAccessChain %28 %22 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpFDiv %50 %52 
                                 Private f32* %54 = OpAccessChain %28 %22 
                                                      OpStore %54 %53 
                                 Private f32* %56 = OpAccessChain %28 %22 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpFNegate %57 
                                 Private f32* %59 = OpAccessChain %9 %22 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFAdd %58 %60 
                                                      OpStore %55 %61 
                                 Uniform f32* %64 = OpAccessChain %36 %62 %63 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpLoad %55 
                                          f32 %67 = OpFMul %65 %66 
                                 Private f32* %68 = OpAccessChain %28 %22 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFAdd %67 %69 
                                 Private f32* %71 = OpAccessChain %28 %22 
                                                      OpStore %71 %70 
                                 Private f32* %72 = OpAccessChain %9 %22 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %75 = OpFAdd %74 %50 
                                 Private f32* %76 = OpAccessChain %9 %22 
                                                      OpStore %76 %75 
                                        f32_3 %80 = OpLoad %79 
                                        f32_3 %81 = OpFNegate %80 
                                        f32_3 %83 = OpLoad %82 
                                        f32_3 %84 = OpFAdd %81 %83 
                                        f32_4 %85 = OpLoad %77 
                                        f32_4 %86 = OpVectorShuffle %85 %84 4 5 6 3 
                                                      OpStore %77 %86 
                                        f32_4 %87 = OpLoad %9 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 0 0 
                                        f32_4 %89 = OpLoad %77 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %88 %90 
                                        f32_3 %92 = OpLoad %79 
                                        f32_3 %93 = OpFAdd %91 %92 
                                        f32_4 %94 = OpLoad %9 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 1 5 6 
                                                      OpStore %9 %95 
                                        f32_3 %97 = OpLoad %96 
                                        f32_3 %98 = OpFNegate %97 
                                        f32_3 %99 = OpLoad %28 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 0 0 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 2 3 
                                       f32_3 %104 = OpFAdd %101 %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %104 4 1 5 6 
                                                      OpStore %9 %106 
                                       f32_3 %107 = OpLoad %28 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 0 0 
                                       f32_3 %109 = OpLoad %96 
                                       f32_3 %110 = OpFMul %108 %109 
                                       f32_4 %111 = OpLoad %77 
                                       f32_4 %112 = OpVectorShuffle %111 %110 4 5 6 3 
                                                      OpStore %77 %112 
                              Uniform f32_4* %114 = OpAccessChain %36 %62 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 3 3 3 
                                       f32_4 %117 = OpLoad %9 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 2 3 
                                       f32_3 %119 = OpFMul %116 %118 
                                       f32_4 %120 = OpLoad %77 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %119 %121 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
                                                      OpStore %9 %124 
                                       f32_4 %125 = OpLoad %9 
                                       f32_4 %126 = OpVectorShuffle %125 %125 1 1 1 1 
                              Uniform f32_4* %128 = OpAccessChain %36 %127 %62 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpFMul %126 %129 
                                                      OpStore %77 %130 
                              Uniform f32_4* %131 = OpAccessChain %36 %127 %38 
                                       f32_4 %132 = OpLoad %131 
                                       f32_4 %133 = OpLoad %9 
                                       f32_4 %134 = OpVectorShuffle %133 %133 0 0 0 0 
                                       f32_4 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %77 
                                       f32_4 %137 = OpFAdd %135 %136 
                                                      OpStore %77 %137 
                              Uniform f32_4* %138 = OpAccessChain %36 %127 %127 
                                       f32_4 %139 = OpLoad %138 
                                       f32_4 %140 = OpLoad %9 
                                       f32_4 %141 = OpVectorShuffle %140 %140 2 2 2 2 
                                       f32_4 %142 = OpFMul %139 %141 
                                       f32_4 %143 = OpLoad %77 
                                       f32_4 %144 = OpFAdd %142 %143 
                                                      OpStore %9 %144 
                                       f32_4 %145 = OpLoad %9 
                              Uniform f32_4* %147 = OpAccessChain %36 %127 %146 
                                       f32_4 %148 = OpLoad %147 
                                       f32_4 %149 = OpFAdd %145 %148 
                                                      OpStore %9 %149 
                                       f32_4 %150 = OpLoad %9 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                              Uniform f32_4* %152 = OpAccessChain %36 %146 %38 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFNegate %154 
                                       f32_3 %156 = OpFAdd %151 %155 
                                       f32_4 %157 = OpLoad %77 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %77 %158 
                                       f32_4 %159 = OpLoad %77 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_4 %161 = OpLoad %77 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %160 %162 
                                Private f32* %164 = OpAccessChain %77 %22 
                                                      OpStore %164 %163 
                                       f32_4 %166 = OpLoad %9 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                              Uniform f32_4* %168 = OpAccessChain %36 %146 %62 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFNegate %170 
                                       f32_3 %172 = OpFAdd %167 %171 
                                       f32_4 %173 = OpLoad %165 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
                                                      OpStore %165 %174 
                                       f32_4 %175 = OpLoad %165 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %165 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                Private f32* %180 = OpAccessChain %77 %45 
                                                      OpStore %180 %179 
                                       f32_4 %181 = OpLoad %9 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                              Uniform f32_4* %183 = OpAccessChain %36 %146 %127 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFNegate %185 
                                       f32_3 %187 = OpFAdd %182 %186 
                                       f32_4 %188 = OpLoad %165 
                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
                                                      OpStore %165 %189 
                                       f32_4 %190 = OpLoad %165 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %165 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                Private f32* %196 = OpAccessChain %77 %195 
                                                      OpStore %196 %194 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                              Uniform f32_4* %199 = OpAccessChain %36 %146 %146 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFNegate %201 
                                       f32_3 %203 = OpFAdd %198 %202 
                                       f32_4 %204 = OpLoad %165 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %165 %205 
                                       f32_4 %206 = OpLoad %165 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %165 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %207 %209 
                                Private f32* %211 = OpAccessChain %77 %63 
                                                      OpStore %211 %210 
                                       f32_4 %216 = OpLoad %77 
                              Uniform f32_4* %218 = OpAccessChain %36 %217 
                                       f32_4 %219 = OpLoad %218 
                                      bool_4 %220 = OpFOrdLessThan %216 %219 
                                                      OpStore %215 %220 
                                      bool_4 %224 = OpLoad %215 
                                        bool %225 = OpCompositeExtract %224 0 
                                                      OpSelectionMerge %227 None 
                                                      OpBranchConditional %225 %226 %229 
                                             %226 = OpLabel 
                                                      OpStore %223 %228 
                                                      OpBranch %227 
                                             %229 = OpLabel 
                                                      OpStore %223 %230 
                                                      OpBranch %227 
                                             %227 = OpLabel 
                                         f32 %231 = OpLoad %223 
                                Private f32* %232 = OpAccessChain %221 %22 
                                                      OpStore %232 %231 
                                      bool_4 %234 = OpLoad %215 
                                        bool %235 = OpCompositeExtract %234 1 
                                                      OpSelectionMerge %237 None 
                                                      OpBranchConditional %235 %236 %238 
                                             %236 = OpLabel 
                                                      OpStore %233 %228 
                                                      OpBranch %237 
                                             %238 = OpLabel 
                                                      OpStore %233 %230 
                                                      OpBranch %237 
                                             %237 = OpLabel 
                                         f32 %239 = OpLoad %233 
                                Private f32* %240 = OpAccessChain %221 %45 
                                                      OpStore %240 %239 
                                      bool_4 %242 = OpLoad %215 
                                        bool %243 = OpCompositeExtract %242 2 
                                                      OpSelectionMerge %245 None 
                                                      OpBranchConditional %243 %244 %246 
                                             %244 = OpLabel 
                                                      OpStore %241 %228 
                                                      OpBranch %245 
                                             %246 = OpLabel 
                                                      OpStore %241 %230 
                                                      OpBranch %245 
                                             %245 = OpLabel 
                                         f32 %247 = OpLoad %241 
                                Private f32* %248 = OpAccessChain %221 %195 
                                                      OpStore %248 %247 
                                      bool_4 %252 = OpLoad %215 
                                       f32_4 %253 = OpSelect %252 %251 %250 
                                       f32_4 %254 = OpExtInst %1 46 %250 %251 %253 
                                                      OpStore %77 %254 
                                       f32_3 %255 = OpLoad %221 
                                       f32_4 %256 = OpLoad %77 
                                       f32_3 %257 = OpVectorShuffle %256 %256 1 2 3 
                                       f32_3 %258 = OpFAdd %255 %257 
                                                      OpStore %221 %258 
                                       f32_3 %260 = OpLoad %221 
                                       f32_3 %262 = OpExtInst %1 40 %260 %261 
                                                      OpStore %259 %262 
                                       f32_4 %263 = OpLoad %9 
                                       f32_3 %264 = OpVectorShuffle %263 %263 1 1 1 
                              Uniform f32_4* %266 = OpAccessChain %36 %265 %265 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFMul %264 %268 
                                       f32_4 %270 = OpLoad %165 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %165 %271 
                              Uniform f32_4* %272 = OpAccessChain %36 %265 %217 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_4 %275 = OpLoad %9 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 0 0 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_4 %278 = OpLoad %165 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %165 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %165 %282 
                              Uniform f32_4* %284 = OpAccessChain %36 %265 %283 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 2 2 2 
                                       f32_3 %289 = OpFMul %286 %288 
                                       f32_4 %290 = OpLoad %165 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFAdd %289 %291 
                                       f32_4 %293 = OpLoad %165 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 6 3 
                                                      OpStore %165 %294 
                              Uniform f32_4* %296 = OpAccessChain %36 %265 %295 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_4 %299 = OpLoad %9 
                                       f32_3 %300 = OpVectorShuffle %299 %299 3 3 3 
                                       f32_3 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %165 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_3 %304 = OpFAdd %301 %303 
                                       f32_4 %305 = OpLoad %165 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
                                                      OpStore %165 %306 
                                       f32_3 %307 = OpLoad %259 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 0 0 
                                       f32_4 %309 = OpLoad %165 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_3 %311 = OpFMul %308 %310 
                                       f32_4 %312 = OpLoad %165 
                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
                                                      OpStore %165 %313 
                                       f32_4 %315 = OpLoad %9 
                                       f32_3 %316 = OpVectorShuffle %315 %315 1 1 1 
                              Uniform f32_4* %317 = OpAccessChain %36 %265 %62 
                                       f32_4 %318 = OpLoad %317 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFMul %316 %319 
                                       f32_4 %321 = OpLoad %314 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %314 %322 
                              Uniform f32_4* %323 = OpAccessChain %36 %265 %38 
                                       f32_4 %324 = OpLoad %323 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_4 %326 = OpLoad %9 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 0 0 
                                       f32_3 %328 = OpFMul %325 %327 
                                       f32_4 %329 = OpLoad %314 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_3 %331 = OpFAdd %328 %330 
                                       f32_4 %332 = OpLoad %314 
                                       f32_4 %333 = OpVectorShuffle %332 %331 4 5 6 3 
                                                      OpStore %314 %333 
                              Uniform f32_4* %334 = OpAccessChain %36 %265 %127 
                                       f32_4 %335 = OpLoad %334 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                       f32_4 %337 = OpLoad %9 
                                       f32_3 %338 = OpVectorShuffle %337 %337 2 2 2 
                                       f32_3 %339 = OpFMul %336 %338 
                                       f32_4 %340 = OpLoad %314 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                       f32_3 %342 = OpFAdd %339 %341 
                                       f32_4 %343 = OpLoad %314 
                                       f32_4 %344 = OpVectorShuffle %343 %342 4 5 6 3 
                                                      OpStore %314 %344 
                              Uniform f32_4* %345 = OpAccessChain %36 %265 %146 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_4 %348 = OpLoad %9 
                                       f32_3 %349 = OpVectorShuffle %348 %348 3 3 3 
                                       f32_3 %350 = OpFMul %347 %349 
                                       f32_4 %351 = OpLoad %314 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpFAdd %350 %352 
                                       f32_4 %354 = OpLoad %314 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %314 %355 
                                       f32_4 %356 = OpLoad %314 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_4 %358 = OpLoad %77 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 0 0 
                                       f32_3 %360 = OpFMul %357 %359 
                                       f32_4 %361 = OpLoad %165 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                       f32_3 %363 = OpFAdd %360 %362 
                                       f32_4 %364 = OpLoad %165 
                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 6 3 
                                                      OpStore %165 %365 
                                       f32_4 %366 = OpLoad %9 
                                       f32_3 %367 = OpVectorShuffle %366 %366 1 1 1 
                              Uniform f32_4* %369 = OpAccessChain %36 %265 %368 
                                       f32_4 %370 = OpLoad %369 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFMul %367 %371 
                                       f32_4 %373 = OpLoad %314 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 5 6 3 
                                                      OpStore %314 %374 
                              Uniform f32_4* %376 = OpAccessChain %36 %265 %375 
                                       f32_4 %377 = OpLoad %376 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 0 0 
                                       f32_3 %381 = OpFMul %378 %380 
                                       f32_4 %382 = OpLoad %314 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFAdd %381 %383 
                                       f32_4 %385 = OpLoad %314 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
                                                      OpStore %314 %386 
                              Uniform f32_4* %388 = OpAccessChain %36 %265 %387 
                                       f32_4 %389 = OpLoad %388 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_4 %391 = OpLoad %9 
                                       f32_3 %392 = OpVectorShuffle %391 %391 2 2 2 
                                       f32_3 %393 = OpFMul %390 %392 
                                       f32_4 %394 = OpLoad %314 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %396 = OpFAdd %393 %395 
                                       f32_4 %397 = OpLoad %314 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 5 6 3 
                                                      OpStore %314 %398 
                              Uniform f32_4* %400 = OpAccessChain %36 %265 %399 
                                       f32_4 %401 = OpLoad %400 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_4 %403 = OpLoad %9 
                                       f32_3 %404 = OpVectorShuffle %403 %403 3 3 3 
                                       f32_3 %405 = OpFMul %402 %404 
                                       f32_4 %406 = OpLoad %314 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_3 %408 = OpFAdd %405 %407 
                                       f32_4 %409 = OpLoad %314 
                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
                                                      OpStore %314 %410 
                                       f32_4 %411 = OpLoad %314 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                       f32_3 %413 = OpLoad %259 
                                       f32_3 %414 = OpVectorShuffle %413 %413 1 1 1 
                                       f32_3 %415 = OpFMul %412 %414 
                                       f32_4 %416 = OpLoad %165 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                       f32_3 %418 = OpFAdd %415 %417 
                                       f32_4 %419 = OpLoad %165 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
                                                      OpStore %165 %420 
                                       f32_4 %421 = OpLoad %9 
                                       f32_3 %422 = OpVectorShuffle %421 %421 1 1 1 
                              Uniform f32_4* %424 = OpAccessChain %36 %265 %423 
                                       f32_4 %425 = OpLoad %424 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_3 %427 = OpFMul %422 %426 
                                       f32_4 %428 = OpLoad %314 
                                       f32_4 %429 = OpVectorShuffle %428 %427 4 5 6 3 
                                                      OpStore %314 %429 
                              Uniform f32_4* %431 = OpAccessChain %36 %265 %430 
                                       f32_4 %432 = OpLoad %431 
                                       f32_3 %433 = OpVectorShuffle %432 %432 0 1 2 
                                       f32_4 %434 = OpLoad %9 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 0 0 
                                       f32_3 %436 = OpFMul %433 %435 
                                       f32_4 %437 = OpLoad %314 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                       f32_3 %439 = OpFAdd %436 %438 
                                       f32_4 %440 = OpLoad %314 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 5 6 3 
                                                      OpStore %314 %441 
                              Uniform f32_4* %443 = OpAccessChain %36 %265 %442 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %9 
                                       f32_3 %447 = OpVectorShuffle %446 %446 2 2 2 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_4 %449 = OpLoad %314 
                                       f32_3 %450 = OpVectorShuffle %449 %449 0 1 2 
                                       f32_3 %451 = OpFAdd %448 %450 
                                       f32_4 %452 = OpLoad %9 
                                       f32_4 %453 = OpVectorShuffle %452 %451 4 5 6 3 
                                                      OpStore %9 %453 
                              Uniform f32_4* %455 = OpAccessChain %36 %265 %454 
                                       f32_4 %456 = OpLoad %455 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_4 %458 = OpLoad %9 
                                       f32_3 %459 = OpVectorShuffle %458 %458 3 3 3 
                                       f32_3 %460 = OpFMul %457 %459 
                                       f32_4 %461 = OpLoad %9 
                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 2 
                                       f32_3 %463 = OpFAdd %460 %462 
                                       f32_4 %464 = OpLoad %9 
                                       f32_4 %465 = OpVectorShuffle %464 %463 4 5 6 3 
                                                      OpStore %9 %465 
                                       f32_4 %466 = OpLoad %9 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpLoad %259 
                                       f32_3 %469 = OpVectorShuffle %468 %468 2 2 2 
                                       f32_3 %470 = OpFMul %467 %469 
                                       f32_4 %471 = OpLoad %165 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                       f32_3 %473 = OpFAdd %470 %472 
                                       f32_4 %474 = OpLoad %9 
                                       f32_4 %475 = OpVectorShuffle %474 %473 4 5 6 3 
                                                      OpStore %9 %475 
                                       f32_3 %476 = OpLoad %259 
                                       f32_4 %477 = OpLoad %77 
                                       f32_4 %478 = OpVectorShuffle %477 %476 0 4 5 6 
                                                      OpStore %77 %478 
                                       f32_4 %480 = OpLoad %77 
                                         f32 %481 = OpDot %480 %251 
                                                      OpStore %479 %481 
                                         f32 %482 = OpLoad %479 
                                         f32 %483 = OpFNegate %482 
                                Private f32* %484 = OpAccessChain %9 %195 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFAdd %483 %485 
                                                      OpStore %55 %486 
                                         f32 %487 = OpLoad %55 
                                         f32 %488 = OpFAdd %487 %50 
                                                      OpStore %55 %488 
                                       f32_4 %489 = OpLoad %9 
                                       f32_2 %490 = OpVectorShuffle %489 %489 0 1 
                              Uniform f32_4* %491 = OpAccessChain %36 %295 
                                       f32_4 %492 = OpLoad %491 
                                       f32_2 %493 = OpVectorShuffle %492 %492 2 3 
                                       f32_2 %494 = OpFMul %490 %493 
                                       f32_2 %497 = OpFAdd %494 %496 
                                       f32_4 %498 = OpLoad %77 
                                       f32_4 %499 = OpVectorShuffle %498 %497 4 5 2 3 
                                                      OpStore %77 %499 
                                       f32_4 %500 = OpLoad %77 
                                       f32_2 %501 = OpVectorShuffle %500 %500 0 1 
                                       f32_2 %502 = OpExtInst %1 8 %501 
                                       f32_4 %503 = OpLoad %77 
                                       f32_4 %504 = OpVectorShuffle %503 %502 4 5 2 3 
                                                      OpStore %77 %504 
                                       f32_4 %505 = OpLoad %9 
                                       f32_2 %506 = OpVectorShuffle %505 %505 0 1 
                              Uniform f32_4* %507 = OpAccessChain %36 %295 
                                       f32_4 %508 = OpLoad %507 
                                       f32_2 %509 = OpVectorShuffle %508 %508 2 3 
                                       f32_2 %510 = OpFMul %506 %509 
                                       f32_4 %511 = OpLoad %77 
                                       f32_2 %512 = OpVectorShuffle %511 %511 0 1 
                                       f32_2 %513 = OpFNegate %512 
                                       f32_2 %514 = OpFAdd %510 %513 
                                       f32_4 %515 = OpLoad %9 
                                       f32_4 %516 = OpVectorShuffle %515 %514 4 5 2 3 
                                                      OpStore %9 %516 
                                       f32_4 %519 = OpLoad %9 
                                       f32_2 %520 = OpVectorShuffle %519 %519 0 1 
                                       f32_2 %521 = OpFNegate %520 
                                       f32_2 %523 = OpFAdd %521 %522 
                                                      OpStore %518 %523 
                                       f32_4 %524 = OpLoad %9 
                                       f32_2 %525 = OpVectorShuffle %524 %524 0 1 
                                       f32_2 %527 = OpExtInst %1 37 %525 %526 
                                       f32_4 %528 = OpLoad %165 
                                       f32_4 %529 = OpVectorShuffle %528 %527 4 5 2 3 
                                                      OpStore %165 %529 
                                       f32_4 %530 = OpLoad %165 
                                       f32_2 %531 = OpVectorShuffle %530 %530 0 1 
                                       f32_2 %532 = OpFNegate %531 
                                       f32_4 %533 = OpLoad %165 
                                       f32_2 %534 = OpVectorShuffle %533 %533 0 1 
                                       f32_2 %535 = OpFMul %532 %534 
                                       f32_2 %536 = OpLoad %518 
                                       f32_2 %537 = OpFAdd %535 %536 
                                                      OpStore %518 %537 
                                       f32_2 %538 = OpLoad %518 
                                       f32_2 %541 = OpFAdd %538 %540 
                                                      OpStore %518 %541 
                                       f32_2 %542 = OpLoad %518 
                                       f32_2 %545 = OpFMul %542 %544 
                                       f32_4 %546 = OpLoad %165 
                                       f32_4 %547 = OpVectorShuffle %546 %545 4 5 2 3 
                                                      OpStore %165 %547 
                                Private f32* %549 = OpAccessChain %165 %22 
                                         f32 %550 = OpLoad %549 
                                Private f32* %551 = OpAccessChain %548 %45 
                                                      OpStore %551 %550 
                                       f32_4 %552 = OpLoad %9 
                                       f32_2 %553 = OpVectorShuffle %552 %552 0 1 
                                       f32_2 %554 = OpExtInst %1 40 %553 %526 
                                                      OpStore %518 %554 
                                       f32_4 %555 = OpLoad %9 
                                       f32_4 %556 = OpVectorShuffle %555 %555 0 0 1 1 
                                       f32_4 %558 = OpFAdd %556 %557 
                                                      OpStore %314 %558 
                                       f32_2 %559 = OpLoad %518 
                                       f32_2 %560 = OpFNegate %559 
                                       f32_2 %561 = OpLoad %518 
                                       f32_2 %562 = OpFMul %560 %561 
                                       f32_4 %563 = OpLoad %314 
                                       f32_2 %564 = OpVectorShuffle %563 %563 1 3 
                                       f32_2 %565 = OpFAdd %562 %564 
                                                      OpStore %518 %565 
                                       f32_4 %566 = OpLoad %314 
                                       f32_4 %567 = OpVectorShuffle %566 %566 0 0 2 2 
                                       f32_4 %568 = OpLoad %314 
                                       f32_4 %569 = OpVectorShuffle %568 %568 0 0 2 2 
                                       f32_4 %570 = OpFMul %567 %569 
                                                      OpStore %314 %570 
                                       f32_2 %571 = OpLoad %518 
                                       f32_2 %572 = OpFAdd %571 %540 
                                                      OpStore %518 %572 
                                Private f32* %574 = OpAccessChain %518 %22 
                                         f32 %575 = OpLoad %574 
                                         f32 %576 = OpFMul %575 %543 
                                Private f32* %577 = OpAccessChain %573 %195 
                                                      OpStore %577 %576 
                                Private f32* %579 = OpAccessChain %518 %45 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFMul %580 %543 
                                Private f32* %582 = OpAccessChain %578 %195 
                                                      OpStore %582 %581 
                                       f32_4 %583 = OpLoad %9 
                                       f32_2 %584 = OpVectorShuffle %583 %583 0 0 
                                       f32_2 %587 = OpFMul %584 %586 
                                       f32_2 %590 = OpFAdd %587 %589 
                                       f32_4 %591 = OpLoad %573 
                                       f32_4 %592 = OpVectorShuffle %591 %590 0 4 2 5 
                                                      OpStore %573 %592 
                                       f32_4 %593 = OpLoad %314 
                                       f32_2 %594 = OpVectorShuffle %593 %593 0 2 
                                       f32_2 %595 = OpFMul %594 %496 
                                       f32_4 %596 = OpLoad %9 
                                       f32_2 %597 = OpVectorShuffle %596 %596 0 1 
                                       f32_2 %598 = OpFNegate %597 
                                       f32_2 %599 = OpFAdd %595 %598 
                                                      OpStore %518 %599 
                                       f32_4 %600 = OpLoad %314 
                                       f32_2 %601 = OpVectorShuffle %600 %600 1 3 
                                       f32_2 %604 = OpFMul %601 %603 
                                       f32_4 %605 = OpLoad %314 
                                       f32_4 %606 = OpVectorShuffle %605 %604 4 5 2 3 
                                                      OpStore %314 %606 
                                       f32_2 %607 = OpLoad %518 
                                       f32_2 %608 = OpVectorShuffle %607 %607 1 0 
                                       f32_2 %609 = OpFMul %608 %544 
                                       f32_4 %610 = OpLoad %578 
                                       f32_4 %611 = OpVectorShuffle %610 %609 4 5 2 3 
                                                      OpStore %578 %611 
                                Private f32* %612 = OpAccessChain %578 %45 
                                         f32 %613 = OpLoad %612 
                                Private f32* %614 = OpAccessChain %573 %22 
                                                      OpStore %614 %613 
                                       f32_4 %615 = OpLoad %9 
                                       f32_2 %616 = OpVectorShuffle %615 %615 0 0 
                                       f32_2 %617 = OpFMul %616 %586 
                                       f32_2 %619 = OpFAdd %617 %618 
                                       f32_4 %620 = OpLoad %548 
                                       f32_4 %621 = OpVectorShuffle %620 %619 4 1 5 3 
                                                      OpStore %548 %621 
                                Private f32* %622 = OpAccessChain %314 %22 
                                         f32 %623 = OpLoad %622 
                                Private f32* %624 = OpAccessChain %548 %63 
                                                      OpStore %624 %623 
                                Private f32* %625 = OpAccessChain %314 %45 
                                         f32 %626 = OpLoad %625 
                                Private f32* %627 = OpAccessChain %165 %63 
                                                      OpStore %627 %626 
                                       f32_4 %628 = OpLoad %548 
                                       f32_4 %629 = OpLoad %573 
                                       f32_4 %630 = OpFAdd %628 %629 
                                                      OpStore %314 %630 
                                       f32_4 %631 = OpLoad %548 
                                       f32_4 %632 = OpLoad %314 
                                       f32_4 %633 = OpFDiv %631 %632 
                                                      OpStore %548 %633 
                                       f32_4 %634 = OpLoad %548 
                                       f32_4 %639 = OpFAdd %634 %638 
                                                      OpStore %548 %639 
                                       f32_4 %640 = OpLoad %548 
                                       f32_4 %641 = OpVectorShuffle %640 %640 3 0 1 2 
                              Uniform f32_4* %642 = OpAccessChain %36 %295 
                                       f32_4 %643 = OpLoad %642 
                                       f32_4 %644 = OpVectorShuffle %643 %643 0 0 0 0 
                                       f32_4 %645 = OpFMul %641 %644 
                                                      OpStore %548 %645 
                                       f32_4 %646 = OpLoad %9 
                                       f32_2 %647 = OpVectorShuffle %646 %646 1 1 
                                       f32_2 %648 = OpFMul %647 %586 
                                       f32_2 %649 = OpFAdd %648 %589 
                                       f32_4 %650 = OpLoad %578 
                                       f32_4 %651 = OpVectorShuffle %650 %649 0 4 2 5 
                                                      OpStore %578 %651 
                                       f32_4 %652 = OpLoad %9 
                                       f32_2 %653 = OpVectorShuffle %652 %652 1 1 
                                       f32_2 %654 = OpFMul %653 %586 
                                       f32_2 %655 = OpFAdd %654 %618 
                                       f32_4 %656 = OpLoad %165 
                                       f32_4 %657 = OpVectorShuffle %656 %655 4 1 5 3 
                                                      OpStore %165 %657 
                                       f32_4 %658 = OpLoad %165 
                                       f32_4 %659 = OpLoad %578 
                                       f32_4 %660 = OpFAdd %658 %659 
                                                      OpStore %573 %660 
                                       f32_4 %661 = OpLoad %165 
                                       f32_4 %662 = OpLoad %573 
                                       f32_4 %663 = OpFDiv %661 %662 
                                                      OpStore %165 %663 
                                       f32_4 %664 = OpLoad %165 
                                       f32_4 %665 = OpFAdd %664 %638 
                                                      OpStore %165 %665 
                                       f32_4 %666 = OpLoad %165 
                                       f32_4 %667 = OpVectorShuffle %666 %666 0 3 1 2 
                              Uniform f32_4* %668 = OpAccessChain %36 %295 
                                       f32_4 %669 = OpLoad %668 
                                       f32_4 %670 = OpVectorShuffle %669 %669 1 1 1 1 
                                       f32_4 %671 = OpFMul %667 %670 
                                                      OpStore %165 %671 
                                       f32_4 %672 = OpLoad %314 
                                       f32_4 %673 = OpLoad %573 
                                       f32_4 %674 = OpVectorShuffle %673 %673 0 0 0 0 
                                       f32_4 %675 = OpFMul %672 %674 
                                                      OpStore %578 %675 
                                       f32_4 %677 = OpLoad %548 
                                       f32_3 %678 = OpVectorShuffle %677 %677 1 2 3 
                                       f32_4 %679 = OpLoad %676 
                                       f32_4 %680 = OpVectorShuffle %679 %678 4 1 5 6 
                                                      OpStore %676 %680 
                                Private f32* %681 = OpAccessChain %165 %22 
                                         f32 %682 = OpLoad %681 
                                Private f32* %683 = OpAccessChain %676 %45 
                                                      OpStore %683 %682 
                                       f32_4 %685 = OpLoad %77 
                                       f32_4 %686 = OpVectorShuffle %685 %685 0 1 0 1 
                              Uniform f32_4* %687 = OpAccessChain %36 %295 
                                       f32_4 %688 = OpLoad %687 
                                       f32_4 %689 = OpVectorShuffle %688 %688 0 1 0 1 
                                       f32_4 %690 = OpFMul %686 %689 
                                       f32_4 %691 = OpLoad %676 
                                       f32_4 %692 = OpVectorShuffle %691 %691 0 1 2 1 
                                       f32_4 %693 = OpFAdd %690 %692 
                                                      OpStore %684 %693 
                                       f32_4 %696 = OpLoad %684 
                                       f32_2 %697 = OpVectorShuffle %696 %696 0 1 
                                         f32 %698 = OpLoad %55 
                                         f32 %699 = OpCompositeExtract %697 0 
                                         f32 %700 = OpCompositeExtract %697 1 
                                       f32_3 %701 = OpCompositeConstruct %699 %700 %698 
                                                      OpStore %695 %701 
                  read_only Texture2DSampled %707 = OpLoad %706 
                                       f32_3 %708 = OpLoad %695 
                                         f32 %709 = OpCompositeExtract %708 2 
                                         f32 %710 = OpImageSampleDrefExplicitLod %707 %708 %709 Lod %6 
                                                      OpStore %702 %710 
                                       f32_4 %712 = OpLoad %684 
                                       f32_2 %713 = OpVectorShuffle %712 %712 2 3 
                                         f32 %714 = OpLoad %55 
                                         f32 %715 = OpCompositeExtract %713 0 
                                         f32 %716 = OpCompositeExtract %713 1 
                                       f32_3 %717 = OpCompositeConstruct %715 %716 %714 
                                                      OpStore %711 %717 
                  read_only Texture2DSampled %719 = OpLoad %706 
                                       f32_3 %720 = OpLoad %711 
                                         f32 %721 = OpCompositeExtract %720 2 
                                         f32 %722 = OpImageSampleDrefExplicitLod %719 %720 %721 Lod %6 
                                                      OpStore %718 %722 
                                         f32 %723 = OpLoad %718 
                                Private f32* %724 = OpAccessChain %578 %45 
                                         f32 %725 = OpLoad %724 
                                         f32 %726 = OpFMul %723 %725 
                                Private f32* %727 = OpAccessChain %28 %22 
                                                      OpStore %727 %726 
                                Private f32* %728 = OpAccessChain %578 %22 
                                         f32 %729 = OpLoad %728 
                                         f32 %730 = OpLoad %702 
                                         f32 %731 = OpFMul %729 %730 
                                Private f32* %732 = OpAccessChain %28 %22 
                                         f32 %733 = OpLoad %732 
                                         f32 %734 = OpFAdd %731 %733 
                                Private f32* %735 = OpAccessChain %9 %22 
                                                      OpStore %735 %734 
                                       f32_4 %736 = OpLoad %77 
                                       f32_2 %737 = OpVectorShuffle %736 %736 0 1 
                              Uniform f32_4* %738 = OpAccessChain %36 %295 
                                       f32_4 %739 = OpLoad %738 
                                       f32_2 %740 = OpVectorShuffle %739 %739 0 1 
                                       f32_2 %741 = OpFMul %737 %740 
                                       f32_4 %742 = OpLoad %676 
                                       f32_2 %743 = OpVectorShuffle %742 %742 3 1 
                                       f32_2 %744 = OpFAdd %741 %743 
                                       f32_3 %745 = OpLoad %28 
                                       f32_3 %746 = OpVectorShuffle %745 %744 3 1 4 
                                                      OpStore %28 %746 
                                Private f32* %747 = OpAccessChain %676 %45 
                                         f32 %748 = OpLoad %747 
                                Private f32* %749 = OpAccessChain %548 %45 
                                                      OpStore %749 %748 
                                       f32_4 %750 = OpLoad %77 
                                       f32_2 %751 = OpVectorShuffle %750 %750 0 1 
                              Uniform f32_4* %752 = OpAccessChain %36 %295 
                                       f32_4 %753 = OpLoad %752 
                                       f32_2 %754 = OpVectorShuffle %753 %753 0 1 
                                       f32_2 %755 = OpFMul %751 %754 
                                       f32_4 %756 = OpLoad %548 
                                       f32_2 %757 = OpVectorShuffle %756 %756 0 1 
                                       f32_2 %758 = OpFAdd %755 %757 
                                                      OpStore %518 %758 
                                       f32_2 %760 = OpLoad %518 
                                         f32 %761 = OpLoad %55 
                                         f32 %762 = OpCompositeExtract %760 0 
                                         f32 %763 = OpCompositeExtract %760 1 
                                       f32_3 %764 = OpCompositeConstruct %762 %763 %761 
                                                      OpStore %759 %764 
                  read_only Texture2DSampled %766 = OpLoad %706 
                                       f32_3 %767 = OpLoad %759 
                                         f32 %768 = OpCompositeExtract %767 2 
                                         f32 %769 = OpImageSampleDrefExplicitLod %766 %767 %768 Lod %6 
                                                      OpStore %765 %769 
                                       f32_3 %771 = OpLoad %28 
                                       f32_2 %772 = OpVectorShuffle %771 %771 0 2 
                                         f32 %773 = OpLoad %55 
                                         f32 %774 = OpCompositeExtract %772 0 
                                         f32 %775 = OpCompositeExtract %772 1 
                                       f32_3 %776 = OpCompositeConstruct %774 %775 %773 
                                                      OpStore %770 %776 
                  read_only Texture2DSampled %777 = OpLoad %706 
                                       f32_3 %778 = OpLoad %770 
                                         f32 %779 = OpCompositeExtract %778 2 
                                         f32 %780 = OpImageSampleDrefExplicitLod %777 %778 %779 Lod %6 
                                                      OpStore %718 %780 
                                Private f32* %781 = OpAccessChain %578 %195 
                                         f32 %782 = OpLoad %781 
                                         f32 %783 = OpLoad %718 
                                         f32 %784 = OpFMul %782 %783 
                                Private f32* %785 = OpAccessChain %9 %22 
                                         f32 %786 = OpLoad %785 
                                         f32 %787 = OpFAdd %784 %786 
                                Private f32* %788 = OpAccessChain %9 %22 
                                                      OpStore %788 %787 
                                Private f32* %789 = OpAccessChain %578 %63 
                                         f32 %790 = OpLoad %789 
                                         f32 %791 = OpLoad %765 
                                         f32 %792 = OpFMul %790 %791 
                                Private f32* %793 = OpAccessChain %9 %22 
                                         f32 %794 = OpLoad %793 
                                         f32 %795 = OpFAdd %792 %794 
                                Private f32* %796 = OpAccessChain %9 %22 
                                                      OpStore %796 %795 
                                       f32_4 %797 = OpLoad %314 
                                       f32_4 %798 = OpLoad %573 
                                       f32_4 %799 = OpVectorShuffle %798 %798 1 1 1 1 
                                       f32_4 %800 = OpFMul %797 %799 
                                                      OpStore %578 %800 
                                Private f32* %801 = OpAccessChain %165 %195 
                                         f32 %802 = OpLoad %801 
                                Private f32* %803 = OpAccessChain %676 %45 
                                                      OpStore %803 %802 
                                       f32_4 %804 = OpLoad %77 
                                       f32_4 %805 = OpVectorShuffle %804 %804 0 1 0 1 
                              Uniform f32_4* %806 = OpAccessChain %36 %295 
                                       f32_4 %807 = OpLoad %806 
                                       f32_4 %808 = OpVectorShuffle %807 %807 0 1 0 1 
                                       f32_4 %809 = OpFMul %805 %808 
                                       f32_4 %810 = OpLoad %676 
                                       f32_4 %811 = OpVectorShuffle %810 %810 0 1 2 1 
                                       f32_4 %812 = OpFAdd %809 %811 
                                                      OpStore %684 %812 
                                       f32_4 %814 = OpLoad %684 
                                       f32_2 %815 = OpVectorShuffle %814 %814 0 1 
                                         f32 %816 = OpLoad %55 
                                         f32 %817 = OpCompositeExtract %815 0 
                                         f32 %818 = OpCompositeExtract %815 1 
                                       f32_3 %819 = OpCompositeConstruct %817 %818 %816 
                                                      OpStore %813 %819 
                  read_only Texture2DSampled %820 = OpLoad %706 
                                       f32_3 %821 = OpLoad %813 
                                         f32 %822 = OpCompositeExtract %821 2 
                                         f32 %823 = OpImageSampleDrefExplicitLod %820 %821 %822 Lod %6 
                                                      OpStore %718 %823 
                                       f32_4 %825 = OpLoad %684 
                                       f32_2 %826 = OpVectorShuffle %825 %825 2 3 
                                         f32 %827 = OpLoad %55 
                                         f32 %828 = OpCompositeExtract %826 0 
                                         f32 %829 = OpCompositeExtract %826 1 
                                       f32_3 %830 = OpCompositeConstruct %828 %829 %827 
                                                      OpStore %824 %830 
                  read_only Texture2DSampled %832 = OpLoad %706 
                                       f32_3 %833 = OpLoad %824 
                                         f32 %834 = OpCompositeExtract %833 2 
                                         f32 %835 = OpImageSampleDrefExplicitLod %832 %833 %834 Lod %6 
                                                      OpStore %831 %835 
                                Private f32* %836 = OpAccessChain %578 %22 
                                         f32 %837 = OpLoad %836 
                                         f32 %838 = OpLoad %718 
                                         f32 %839 = OpFMul %837 %838 
                                Private f32* %840 = OpAccessChain %9 %22 
                                         f32 %841 = OpLoad %840 
                                         f32 %842 = OpFAdd %839 %841 
                                Private f32* %843 = OpAccessChain %9 %22 
                                                      OpStore %843 %842 
                                Private f32* %844 = OpAccessChain %578 %45 
                                         f32 %845 = OpLoad %844 
                                         f32 %846 = OpLoad %831 
                                         f32 %847 = OpFMul %845 %846 
                                Private f32* %848 = OpAccessChain %9 %22 
                                         f32 %849 = OpLoad %848 
                                         f32 %850 = OpFAdd %847 %849 
                                Private f32* %851 = OpAccessChain %9 %22 
                                                      OpStore %851 %850 
                                       f32_4 %852 = OpLoad %77 
                                       f32_2 %853 = OpVectorShuffle %852 %852 0 1 
                              Uniform f32_4* %854 = OpAccessChain %36 %295 
                                       f32_4 %855 = OpLoad %854 
                                       f32_2 %856 = OpVectorShuffle %855 %855 0 1 
                                       f32_2 %857 = OpFMul %853 %856 
                                       f32_4 %858 = OpLoad %676 
                                       f32_2 %859 = OpVectorShuffle %858 %858 3 1 
                                       f32_2 %860 = OpFAdd %857 %859 
                                       f32_3 %861 = OpLoad %28 
                                       f32_3 %862 = OpVectorShuffle %861 %860 3 1 4 
                                                      OpStore %28 %862 
                                Private f32* %863 = OpAccessChain %676 %45 
                                         f32 %864 = OpLoad %863 
                                Private f32* %865 = OpAccessChain %548 %195 
                                                      OpStore %865 %864 
                                       f32_4 %866 = OpLoad %77 
                                       f32_2 %867 = OpVectorShuffle %866 %866 0 1 
                              Uniform f32_4* %868 = OpAccessChain %36 %295 
                                       f32_4 %869 = OpLoad %868 
                                       f32_2 %870 = OpVectorShuffle %869 %869 0 1 
                                       f32_2 %871 = OpFMul %867 %870 
                                       f32_4 %872 = OpLoad %548 
                                       f32_2 %873 = OpVectorShuffle %872 %872 0 2 
                                       f32_2 %874 = OpFAdd %871 %873 
                                                      OpStore %518 %874 
                                       f32_2 %876 = OpLoad %518 
                                         f32 %877 = OpLoad %55 
                                         f32 %878 = OpCompositeExtract %876 0 
                                         f32 %879 = OpCompositeExtract %876 1 
                                       f32_3 %880 = OpCompositeConstruct %878 %879 %877 
                                                      OpStore %875 %880 
                  read_only Texture2DSampled %881 = OpLoad %706 
                                       f32_3 %882 = OpLoad %875 
                                         f32 %883 = OpCompositeExtract %882 2 
                                         f32 %884 = OpImageSampleDrefExplicitLod %881 %882 %883 Lod %6 
                                                      OpStore %765 %884 
                                       f32_3 %886 = OpLoad %28 
                                       f32_2 %887 = OpVectorShuffle %886 %886 0 2 
                                         f32 %888 = OpLoad %55 
                                         f32 %889 = OpCompositeExtract %887 0 
                                         f32 %890 = OpCompositeExtract %887 1 
                                       f32_3 %891 = OpCompositeConstruct %889 %890 %888 
                                                      OpStore %885 %891 
                  read_only Texture2DSampled %892 = OpLoad %706 
                                       f32_3 %893 = OpLoad %885 
                                         f32 %894 = OpCompositeExtract %893 2 
                                         f32 %895 = OpImageSampleDrefExplicitLod %892 %893 %894 Lod %6 
                                                      OpStore %718 %895 
                                Private f32* %896 = OpAccessChain %578 %195 
                                         f32 %897 = OpLoad %896 
                                         f32 %898 = OpLoad %718 
                                         f32 %899 = OpFMul %897 %898 
                                Private f32* %900 = OpAccessChain %9 %22 
                                         f32 %901 = OpLoad %900 
                                         f32 %902 = OpFAdd %899 %901 
                                Private f32* %903 = OpAccessChain %9 %22 
                                                      OpStore %903 %902 
                                Private f32* %904 = OpAccessChain %578 %63 
                                         f32 %905 = OpLoad %904 
                                         f32 %906 = OpLoad %765 
                                         f32 %907 = OpFMul %905 %906 
                                Private f32* %908 = OpAccessChain %9 %22 
                                         f32 %909 = OpLoad %908 
                                         f32 %910 = OpFAdd %907 %909 
                                Private f32* %911 = OpAccessChain %9 %22 
                                                      OpStore %911 %910 
                                       f32_4 %912 = OpLoad %314 
                                       f32_4 %913 = OpLoad %573 
                                       f32_4 %914 = OpVectorShuffle %913 %913 2 2 2 2 
                                       f32_4 %915 = OpFMul %912 %914 
                                                      OpStore %578 %915 
                                       f32_4 %916 = OpLoad %314 
                                       f32_4 %917 = OpLoad %573 
                                       f32_4 %918 = OpVectorShuffle %917 %917 3 3 3 3 
                                       f32_4 %919 = OpFMul %916 %918 
                                                      OpStore %314 %919 
                                Private f32* %920 = OpAccessChain %165 %63 
                                         f32 %921 = OpLoad %920 
                                Private f32* %922 = OpAccessChain %676 %45 
                                                      OpStore %922 %921 
                                       f32_4 %923 = OpLoad %77 
                                       f32_4 %924 = OpVectorShuffle %923 %923 0 1 0 1 
                              Uniform f32_4* %925 = OpAccessChain %36 %295 
                                       f32_4 %926 = OpLoad %925 
                                       f32_4 %927 = OpVectorShuffle %926 %926 0 1 0 1 
                                       f32_4 %928 = OpFMul %924 %927 
                                       f32_4 %929 = OpLoad %676 
                                       f32_4 %930 = OpVectorShuffle %929 %929 0 1 2 1 
                                       f32_4 %931 = OpFAdd %928 %930 
                                                      OpStore %573 %931 
                                       f32_4 %933 = OpLoad %573 
                                       f32_2 %934 = OpVectorShuffle %933 %933 0 1 
                                         f32 %935 = OpLoad %55 
                                         f32 %936 = OpCompositeExtract %934 0 
                                         f32 %937 = OpCompositeExtract %934 1 
                                       f32_3 %938 = OpCompositeConstruct %936 %937 %935 
                                                      OpStore %932 %938 
                  read_only Texture2DSampled %939 = OpLoad %706 
                                       f32_3 %940 = OpLoad %932 
                                         f32 %941 = OpCompositeExtract %940 2 
                                         f32 %942 = OpImageSampleDrefExplicitLod %939 %940 %941 Lod %6 
                                                      OpStore %718 %942 
                                       f32_4 %944 = OpLoad %573 
                                       f32_2 %945 = OpVectorShuffle %944 %944 2 3 
                                         f32 %946 = OpLoad %55 
                                         f32 %947 = OpCompositeExtract %945 0 
                                         f32 %948 = OpCompositeExtract %945 1 
                                       f32_3 %949 = OpCompositeConstruct %947 %948 %946 
                                                      OpStore %943 %949 
                  read_only Texture2DSampled %950 = OpLoad %706 
                                       f32_3 %951 = OpLoad %943 
                                         f32 %952 = OpCompositeExtract %951 2 
                                         f32 %953 = OpImageSampleDrefExplicitLod %950 %951 %952 Lod %6 
                                                      OpStore %831 %953 
                                Private f32* %954 = OpAccessChain %578 %22 
                                         f32 %955 = OpLoad %954 
                                         f32 %956 = OpLoad %718 
                                         f32 %957 = OpFMul %955 %956 
                                Private f32* %958 = OpAccessChain %9 %22 
                                         f32 %959 = OpLoad %958 
                                         f32 %960 = OpFAdd %957 %959 
                                Private f32* %961 = OpAccessChain %9 %22 
                                                      OpStore %961 %960 
                                Private f32* %962 = OpAccessChain %578 %45 
                                         f32 %963 = OpLoad %962 
                                         f32 %964 = OpLoad %831 
                                         f32 %965 = OpFMul %963 %964 
                                Private f32* %966 = OpAccessChain %9 %22 
                                         f32 %967 = OpLoad %966 
                                         f32 %968 = OpFAdd %965 %967 
                                Private f32* %969 = OpAccessChain %9 %22 
                                                      OpStore %969 %968 
                                       f32_4 %970 = OpLoad %77 
                                       f32_2 %971 = OpVectorShuffle %970 %970 0 1 
                              Uniform f32_4* %972 = OpAccessChain %36 %295 
                                       f32_4 %973 = OpLoad %972 
                                       f32_2 %974 = OpVectorShuffle %973 %973 0 1 
                                       f32_2 %975 = OpFMul %971 %974 
                                       f32_4 %976 = OpLoad %676 
                                       f32_2 %977 = OpVectorShuffle %976 %976 3 1 
                                       f32_2 %978 = OpFAdd %975 %977 
                                       f32_3 %979 = OpLoad %28 
                                       f32_3 %980 = OpVectorShuffle %979 %978 3 1 4 
                                                      OpStore %28 %980 
                                       f32_4 %981 = OpLoad %676 
                                       f32_3 %982 = OpVectorShuffle %981 %981 0 2 3 
                                       f32_4 %983 = OpLoad %165 
                                       f32_4 %984 = OpVectorShuffle %983 %982 4 1 5 6 
                                                      OpStore %165 %984 
                                Private f32* %985 = OpAccessChain %676 %45 
                                         f32 %986 = OpLoad %985 
                                Private f32* %987 = OpAccessChain %548 %63 
                                                      OpStore %987 %986 
                                       f32_4 %988 = OpLoad %77 
                                       f32_2 %989 = OpVectorShuffle %988 %988 0 1 
                              Uniform f32_4* %990 = OpAccessChain %36 %295 
                                       f32_4 %991 = OpLoad %990 
                                       f32_2 %992 = OpVectorShuffle %991 %991 0 1 
                                       f32_2 %993 = OpFMul %989 %992 
                                       f32_4 %994 = OpLoad %548 
                                       f32_2 %995 = OpVectorShuffle %994 %994 0 3 
                                       f32_2 %996 = OpFAdd %993 %995 
                                                      OpStore %518 %996 
                                       f32_2 %998 = OpLoad %518 
                                         f32 %999 = OpLoad %55 
                                        f32 %1000 = OpCompositeExtract %998 0 
                                        f32 %1001 = OpCompositeExtract %998 1 
                                      f32_3 %1002 = OpCompositeConstruct %1000 %1001 %999 
                                                      OpStore %997 %1002 
                 read_only Texture2DSampled %1003 = OpLoad %706 
                                      f32_3 %1004 = OpLoad %997 
                                        f32 %1005 = OpCompositeExtract %1004 2 
                                        f32 %1006 = OpImageSampleDrefExplicitLod %1003 %1004 %1005 Lod %6 
                                                      OpStore %765 %1006 
                                      f32_3 %1008 = OpLoad %28 
                                      f32_2 %1009 = OpVectorShuffle %1008 %1008 0 2 
                                        f32 %1010 = OpLoad %55 
                                        f32 %1011 = OpCompositeExtract %1009 0 
                                        f32 %1012 = OpCompositeExtract %1009 1 
                                      f32_3 %1013 = OpCompositeConstruct %1011 %1012 %1010 
                                                      OpStore %1007 %1013 
                 read_only Texture2DSampled %1014 = OpLoad %706 
                                      f32_3 %1015 = OpLoad %1007 
                                        f32 %1016 = OpCompositeExtract %1015 2 
                                        f32 %1017 = OpImageSampleDrefExplicitLod %1014 %1015 %1016 Lod %6 
                                                      OpStore %718 %1017 
                               Private f32* %1018 = OpAccessChain %578 %195 
                                        f32 %1019 = OpLoad %1018 
                                        f32 %1020 = OpLoad %718 
                                        f32 %1021 = OpFMul %1019 %1020 
                               Private f32* %1022 = OpAccessChain %9 %22 
                                        f32 %1023 = OpLoad %1022 
                                        f32 %1024 = OpFAdd %1021 %1023 
                               Private f32* %1025 = OpAccessChain %9 %22 
                                                      OpStore %1025 %1024 
                               Private f32* %1026 = OpAccessChain %578 %63 
                                        f32 %1027 = OpLoad %1026 
                                        f32 %1028 = OpLoad %765 
                                        f32 %1029 = OpFMul %1027 %1028 
                               Private f32* %1030 = OpAccessChain %9 %22 
                                        f32 %1031 = OpLoad %1030 
                                        f32 %1032 = OpFAdd %1029 %1031 
                               Private f32* %1033 = OpAccessChain %9 %22 
                                                      OpStore %1033 %1032 
                                      f32_4 %1034 = OpLoad %77 
                                      f32_4 %1035 = OpVectorShuffle %1034 %1034 0 1 0 1 
                             Uniform f32_4* %1036 = OpAccessChain %36 %295 
                                      f32_4 %1037 = OpLoad %1036 
                                      f32_4 %1038 = OpVectorShuffle %1037 %1037 0 1 0 1 
                                      f32_4 %1039 = OpFMul %1035 %1038 
                                      f32_4 %1040 = OpLoad %165 
                                      f32_4 %1041 = OpVectorShuffle %1040 %1040 0 1 2 1 
                                      f32_4 %1042 = OpFAdd %1039 %1041 
                                                      OpStore %573 %1042 
                                      f32_4 %1043 = OpLoad %77 
                                      f32_2 %1044 = OpVectorShuffle %1043 %1043 0 1 
                             Uniform f32_4* %1045 = OpAccessChain %36 %295 
                                      f32_4 %1046 = OpLoad %1045 
                                      f32_2 %1047 = OpVectorShuffle %1046 %1046 0 1 
                                      f32_2 %1048 = OpFMul %1044 %1047 
                                      f32_4 %1049 = OpLoad %165 
                                      f32_2 %1050 = OpVectorShuffle %1049 %1049 3 1 
                                      f32_2 %1051 = OpFAdd %1048 %1050 
                                      f32_3 %1052 = OpLoad %28 
                                      f32_3 %1053 = OpVectorShuffle %1052 %1051 3 1 4 
                                                      OpStore %28 %1053 
                               Private f32* %1054 = OpAccessChain %165 %45 
                                        f32 %1055 = OpLoad %1054 
                               Private f32* %1056 = OpAccessChain %548 %45 
                                                      OpStore %1056 %1055 
                                      f32_4 %1057 = OpLoad %77 
                                      f32_2 %1058 = OpVectorShuffle %1057 %1057 0 1 
                             Uniform f32_4* %1059 = OpAccessChain %36 %295 
                                      f32_4 %1060 = OpLoad %1059 
                                      f32_2 %1061 = OpVectorShuffle %1060 %1060 0 1 
                                      f32_2 %1062 = OpFMul %1058 %1061 
                                      f32_4 %1063 = OpLoad %548 
                                      f32_2 %1064 = OpVectorShuffle %1063 %1063 0 1 
                                      f32_2 %1065 = OpFAdd %1062 %1064 
                                      f32_4 %1066 = OpLoad %77 
                                      f32_4 %1067 = OpVectorShuffle %1066 %1065 4 5 2 3 
                                                      OpStore %77 %1067 
                                      f32_4 %1069 = OpLoad %77 
                                      f32_2 %1070 = OpVectorShuffle %1069 %1069 0 1 
                                        f32 %1071 = OpLoad %55 
                                        f32 %1072 = OpCompositeExtract %1070 0 
                                        f32 %1073 = OpCompositeExtract %1070 1 
                                      f32_3 %1074 = OpCompositeConstruct %1072 %1073 %1071 
                                                      OpStore %1068 %1074 
                 read_only Texture2DSampled %1076 = OpLoad %706 
                                      f32_3 %1077 = OpLoad %1068 
                                        f32 %1078 = OpCompositeExtract %1077 2 
                                        f32 %1079 = OpImageSampleDrefExplicitLod %1076 %1077 %1078 Lod %6 
                                                      OpStore %1075 %1079 
                                      f32_3 %1081 = OpLoad %28 
                                      f32_2 %1082 = OpVectorShuffle %1081 %1081 0 2 
                                        f32 %1083 = OpLoad %55 
                                        f32 %1084 = OpCompositeExtract %1082 0 
                                        f32 %1085 = OpCompositeExtract %1082 1 
                                      f32_3 %1086 = OpCompositeConstruct %1084 %1085 %1083 
                                                      OpStore %1080 %1086 
                 read_only Texture2DSampled %1087 = OpLoad %706 
                                      f32_3 %1088 = OpLoad %1080 
                                        f32 %1089 = OpCompositeExtract %1088 2 
                                        f32 %1090 = OpImageSampleDrefExplicitLod %1087 %1088 %1089 Lod %6 
                                                      OpStore %718 %1090 
                                      f32_4 %1092 = OpLoad %573 
                                      f32_2 %1093 = OpVectorShuffle %1092 %1092 0 1 
                                        f32 %1094 = OpLoad %55 
                                        f32 %1095 = OpCompositeExtract %1093 0 
                                        f32 %1096 = OpCompositeExtract %1093 1 
                                      f32_3 %1097 = OpCompositeConstruct %1095 %1096 %1094 
                                                      OpStore %1091 %1097 
                 read_only Texture2DSampled %1098 = OpLoad %706 
                                      f32_3 %1099 = OpLoad %1091 
                                        f32 %1100 = OpCompositeExtract %1099 2 
                                        f32 %1101 = OpImageSampleDrefExplicitLod %1098 %1099 %1100 Lod %6 
                                                      OpStore %831 %1101 
                                      f32_4 %1103 = OpLoad %573 
                                      f32_2 %1104 = OpVectorShuffle %1103 %1103 2 3 
                                        f32 %1105 = OpLoad %55 
                                        f32 %1106 = OpCompositeExtract %1104 0 
                                        f32 %1107 = OpCompositeExtract %1104 1 
                                      f32_3 %1108 = OpCompositeConstruct %1106 %1107 %1105 
                                                      OpStore %1102 %1108 
                 read_only Texture2DSampled %1110 = OpLoad %706 
                                      f32_3 %1111 = OpLoad %1102 
                                        f32 %1112 = OpCompositeExtract %1111 2 
                                        f32 %1113 = OpImageSampleDrefExplicitLod %1110 %1111 %1112 Lod %6 
                                                      OpStore %1109 %1113 
                               Private f32* %1114 = OpAccessChain %314 %22 
                                        f32 %1115 = OpLoad %1114 
                                        f32 %1116 = OpLoad %831 
                                        f32 %1117 = OpFMul %1115 %1116 
                               Private f32* %1118 = OpAccessChain %9 %22 
                                        f32 %1119 = OpLoad %1118 
                                        f32 %1120 = OpFAdd %1117 %1119 
                               Private f32* %1121 = OpAccessChain %9 %22 
                                                      OpStore %1121 %1120 
                               Private f32* %1122 = OpAccessChain %314 %45 
                                        f32 %1123 = OpLoad %1122 
                                        f32 %1124 = OpLoad %1109 
                                        f32 %1125 = OpFMul %1123 %1124 
                               Private f32* %1126 = OpAccessChain %9 %22 
                                        f32 %1127 = OpLoad %1126 
                                        f32 %1128 = OpFAdd %1125 %1127 
                               Private f32* %1129 = OpAccessChain %9 %22 
                                                      OpStore %1129 %1128 
                               Private f32* %1130 = OpAccessChain %314 %195 
                                        f32 %1131 = OpLoad %1130 
                                        f32 %1132 = OpLoad %718 
                                        f32 %1133 = OpFMul %1131 %1132 
                               Private f32* %1134 = OpAccessChain %9 %22 
                                        f32 %1135 = OpLoad %1134 
                                        f32 %1136 = OpFAdd %1133 %1135 
                               Private f32* %1137 = OpAccessChain %9 %22 
                                                      OpStore %1137 %1136 
                               Private f32* %1138 = OpAccessChain %314 %63 
                                        f32 %1139 = OpLoad %1138 
                                        f32 %1140 = OpLoad %1075 
                                        f32 %1141 = OpFMul %1139 %1140 
                               Private f32* %1142 = OpAccessChain %9 %22 
                                        f32 %1143 = OpLoad %1142 
                                        f32 %1144 = OpFAdd %1141 %1143 
                               Private f32* %1145 = OpAccessChain %9 %22 
                                                      OpStore %1145 %1144 
                               Uniform f32* %1147 = OpAccessChain %36 %283 %22 
                                        f32 %1148 = OpLoad %1147 
                                        f32 %1149 = OpFNegate %1148 
                                        f32 %1150 = OpFAdd %1149 %50 
                                                      OpStore %1146 %1150 
                                      f32_4 %1151 = OpLoad %9 
                                      f32_4 %1152 = OpVectorShuffle %1151 %1151 0 0 0 0 
                                        f32 %1153 = OpLoad %1146 
                                      f32_4 %1154 = OpCompositeConstruct %1153 %1153 %1153 %1153 
                                      f32_4 %1155 = OpFMul %1152 %1154 
                             Uniform f32_4* %1156 = OpAccessChain %36 %283 
                                      f32_4 %1157 = OpLoad %1156 
                                      f32_4 %1158 = OpVectorShuffle %1157 %1157 0 0 0 0 
                                      f32_4 %1159 = OpFAdd %1155 %1158 
                                                      OpStore %9 %1159 
                                      f32_4 %1162 = OpLoad %9 
                                                      OpStore %1161 %1162 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat10_8;
float u_xlat16;
float u_xlat10_16;
vec2 u_xlat17;
float u_xlat10_17;
float u_xlat10_24;
void main()
{
    u_xlat10_0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat8.x = _ZBufferParams.x * u_xlat10_0.x + _ZBufferParams.y;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat16 = (-u_xlat8.x) + u_xlat10_0.x;
    u_xlat8.x = unity_OrthoParams.w * u_xlat16 + u_xlat8.x;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat10_0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat1.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat3.zw = u_xlat4.wy * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat2.w = u_xlat3.z;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat0.x = u_xlat10_0.x * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat10_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat10_24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat10_16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat10_1 + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 884
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %78 %81 %95 %880 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpDecorate %32 ArrayStride 32 
                                                      OpMemberDecorate %33 0 Offset 33 
                                                      OpMemberDecorate %33 1 Offset 33 
                                                      OpMemberDecorate %33 2 Offset 33 
                                                      OpMemberDecorate %33 3 Offset 33 
                                                      OpMemberDecorate %33 4 RelaxedPrecision 
                                                      OpMemberDecorate %33 4 Offset 33 
                                                      OpMemberDecorate %33 5 Offset 33 
                                                      OpDecorate %33 Block 
                                                      OpDecorate %35 DescriptorSet 35 
                                                      OpDecorate %35 Binding 35 
                                                      OpDecorate %78 Location 78 
                                                      OpDecorate %81 Location 81 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %405 DescriptorSet 405 
                                                      OpDecorate %405 Binding 405 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %554 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %602 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %654 RelaxedPrecision 
                                                      OpDecorate %668 RelaxedPrecision 
                                                      OpDecorate %676 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %728 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %742 RelaxedPrecision 
                                                      OpDecorate %790 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %803 RelaxedPrecision 
                                                      OpDecorate %815 RelaxedPrecision 
                                                      OpDecorate %827 RelaxedPrecision 
                                                      OpDecorate %828 RelaxedPrecision 
                                                      OpDecorate %834 RelaxedPrecision 
                                                      OpDecorate %842 RelaxedPrecision 
                                                      OpDecorate %850 RelaxedPrecision 
                                                      OpDecorate %858 RelaxedPrecision 
                                                      OpDecorate %864 RelaxedPrecision 
                                                      OpDecorate %867 RelaxedPrecision 
                                                      OpDecorate %868 RelaxedPrecision 
                                                      OpDecorate %869 RelaxedPrecision 
                                                      OpDecorate %872 RelaxedPrecision 
                                                      OpDecorate %876 RelaxedPrecision 
                                                      OpDecorate %877 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %880 Location 880 
                                                      OpDecorate %883 RelaxedPrecision 
                                                      OpDecorate %883 DescriptorSet 883 
                                                      OpDecorate %883 Binding 883 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                              %26 = OpTypeVector %6 3 
                                              %27 = OpTypePointer Private %26 
                               Private f32_3* %28 = OpVariable Private 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %7 %29 
                                          u32 %31 = OpConstant 16 
                                              %32 = OpTypeArray %7 %31 
                                              %33 = OpTypeStruct %7 %7 %30 %32 %7 %7 
                                              %34 = OpTypePointer Uniform %33 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %35 = OpVariable Uniform 
                                              %36 = OpTypeInt 32 1 
                                          i32 %37 = OpConstant 0 
                                              %38 = OpTypePointer Uniform %6 
                                          u32 %44 = OpConstant 1 
                                          f32 %49 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %61 = OpConstant 1 
                                          u32 %62 = OpConstant 3 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypePointer Input %26 
                                 Input f32_3* %78 = OpVariable Input 
                                 Input f32_3* %81 = OpVariable Input 
                                 Input f32_3* %95 = OpVariable Input 
                                             %112 = OpTypePointer Uniform %7 
                                         i32 %126 = OpConstant 2 
                                         i32 %145 = OpConstant 3 
                                         i32 %192 = OpConstant 5 
                                         f32 %197 = OpConstant 3.674022E-40 
                                       f32_2 %198 = OpConstantComposite %197 %197 
                                             %219 = OpTypePointer Private %17 
                              Private f32_2* %220 = OpVariable Private 
                                       f32_2 %224 = OpConstantComposite %49 %49 
                              Private f32_4* %226 = OpVariable Private 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_2 %230 = OpConstantComposite %229 %229 
                                         f32 %243 = OpConstant 3.674022E-40 
                                       f32_2 %244 = OpConstantComposite %243 %243 
                                         f32 %247 = OpConstant 3.674022E-40 
                                       f32_2 %248 = OpConstantComposite %247 %247 
                              Private f32_4* %252 = OpVariable Private 
                              Private f32_4* %259 = OpVariable Private 
                                       f32_4 %262 = OpConstantComposite %197 %49 %197 %49 
                              Private f32_4* %278 = OpVariable Private 
                                         u32 %282 = OpConstant 2 
                              Private f32_4* %284 = OpVariable Private 
                                         f32 %298 = OpConstant 3.674022E-40 
                                       f32_2 %299 = OpConstantComposite %298 %298 
                                         f32 %316 = OpConstant 3.674022E-40 
                                       f32_2 %317 = OpConstantComposite %316 %247 
                                         f32 %319 = OpConstant 3.674022E-40 
                                       f32_2 %320 = OpConstantComposite %319 %247 
                                       f32_2 %327 = OpConstantComposite %247 %319 
                                         f32 %338 = OpConstant 3.674022E-40 
                                         f32 %339 = OpConstant 3.674022E-40 
                                         f32 %340 = OpConstant 3.674022E-40 
                                       f32_4 %341 = OpConstantComposite %338 %339 %197 %340 
                              Private f32_4* %382 = OpVariable Private 
                                             %392 = OpTypePointer Function %26 
                                Private f32* %401 = OpVariable Private 
                                             %402 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %403 = OpTypeSampledImage %402 
                                             %404 = OpTypePointer UniformConstant %403 
 UniformConstant read_only Texture2DSampled* %405 = OpVariable UniformConstant 
                                Private f32* %418 = OpVariable Private 
                                Private f32* %470 = OpVariable Private 
                                Private f32* %535 = OpVariable Private 
                                Private f32* %790 = OpVariable Private 
                                Private f32* %827 = OpVariable Private 
                                Private f32* %864 = OpVariable Private 
                                         i32 %865 = OpConstant 4 
                                             %879 = OpTypePointer Output %7 
                               Output f32_4* %880 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %883 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %393 = OpVariable Function 
                             Function f32_3* %410 = OpVariable Function 
                             Function f32_3* %463 = OpVariable Function 
                             Function f32_3* %475 = OpVariable Function 
                             Function f32_3* %515 = OpVariable Function 
                             Function f32_3* %527 = OpVariable Function 
                             Function f32_3* %583 = OpVariable Function 
                             Function f32_3* %594 = OpVariable Function 
                             Function f32_3* %634 = OpVariable Function 
                             Function f32_3* %646 = OpVariable Function 
                             Function f32_3* %709 = OpVariable Function 
                             Function f32_3* %720 = OpVariable Function 
                             Function f32_3* %782 = OpVariable Function 
                             Function f32_3* %795 = OpVariable Function 
                             Function f32_3* %807 = OpVariable Function 
                             Function f32_3* %819 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Uniform f32* %39 = OpAccessChain %35 %37 %22 
                                          f32 %40 = OpLoad %39 
                                 Private f32* %41 = OpAccessChain %9 %22 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFMul %40 %42 
                                 Uniform f32* %45 = OpAccessChain %35 %37 %44 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFAdd %43 %46 
                                 Private f32* %48 = OpAccessChain %28 %22 
                                                      OpStore %48 %47 
                                 Private f32* %50 = OpAccessChain %28 %22 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFDiv %49 %51 
                                 Private f32* %53 = OpAccessChain %28 %22 
                                                      OpStore %53 %52 
                                 Private f32* %55 = OpAccessChain %28 %22 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFNegate %56 
                                 Private f32* %58 = OpAccessChain %9 %22 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFAdd %57 %59 
                                                      OpStore %54 %60 
                                 Uniform f32* %63 = OpAccessChain %35 %61 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %54 
                                          f32 %66 = OpFMul %64 %65 
                                 Private f32* %67 = OpAccessChain %28 %22 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFAdd %66 %68 
                                 Private f32* %70 = OpAccessChain %28 %22 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %9 %22 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFNegate %72 
                                          f32 %74 = OpFAdd %73 %49 
                                 Private f32* %75 = OpAccessChain %9 %22 
                                                      OpStore %75 %74 
                                        f32_3 %79 = OpLoad %78 
                                        f32_3 %80 = OpFNegate %79 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %80 %82 
                                        f32_4 %84 = OpLoad %76 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %76 %85 
                                        f32_4 %86 = OpLoad %9 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 0 0 
                                        f32_4 %88 = OpLoad %76 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFMul %87 %89 
                                        f32_3 %91 = OpLoad %78 
                                        f32_3 %92 = OpFAdd %90 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpVectorShuffle %93 %92 4 1 5 6 
                                                      OpStore %9 %94 
                                        f32_3 %96 = OpLoad %95 
                                        f32_3 %97 = OpFNegate %96 
                                        f32_3 %98 = OpLoad %28 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %9 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 2 3 
                                       f32_3 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 1 5 6 
                                                      OpStore %9 %105 
                                       f32_3 %106 = OpLoad %28 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 0 0 
                                       f32_3 %108 = OpLoad %95 
                                       f32_3 %109 = OpFMul %107 %108 
                                       f32_4 %110 = OpLoad %76 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 6 3 
                                                      OpStore %76 %111 
                              Uniform f32_4* %113 = OpAccessChain %35 %61 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 3 3 3 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 2 3 
                                       f32_3 %118 = OpFMul %115 %117 
                                       f32_4 %119 = OpLoad %76 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFAdd %118 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %9 %123 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %124 1 1 1 1 
                              Uniform f32_4* %127 = OpAccessChain %35 %126 %61 
                                       f32_4 %128 = OpLoad %127 
                                       f32_4 %129 = OpFMul %125 %128 
                                                      OpStore %76 %129 
                              Uniform f32_4* %130 = OpAccessChain %35 %126 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %132 0 0 0 0 
                                       f32_4 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %76 
                                       f32_4 %136 = OpFAdd %134 %135 
                                                      OpStore %76 %136 
                              Uniform f32_4* %137 = OpAccessChain %35 %126 %126 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpLoad %9 
                                       f32_4 %140 = OpVectorShuffle %139 %139 2 2 2 2 
                                       f32_4 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %76 
                                       f32_4 %143 = OpFAdd %141 %142 
                                                      OpStore %9 %143 
                                       f32_4 %144 = OpLoad %9 
                              Uniform f32_4* %146 = OpAccessChain %35 %126 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_4 %148 = OpFAdd %144 %147 
                                                      OpStore %9 %148 
                                       f32_4 %149 = OpLoad %9 
                                       f32_3 %150 = OpVectorShuffle %149 %149 1 1 1 
                              Uniform f32_4* %151 = OpAccessChain %35 %145 %61 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFMul %150 %153 
                                       f32_4 %155 = OpLoad %76 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %76 %156 
                              Uniform f32_4* %157 = OpAccessChain %35 %145 %37 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %76 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                       f32_3 %165 = OpFAdd %162 %164 
                                       f32_4 %166 = OpLoad %76 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
                                                      OpStore %76 %167 
                              Uniform f32_4* %168 = OpAccessChain %35 %145 %126 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_4 %171 = OpLoad %9 
                                       f32_3 %172 = OpVectorShuffle %171 %171 2 2 2 
                                       f32_3 %173 = OpFMul %170 %172 
                                       f32_4 %174 = OpLoad %76 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFAdd %173 %175 
                                       f32_4 %177 = OpLoad %9 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %9 %178 
                              Uniform f32_4* %179 = OpAccessChain %35 %145 %145 
                                       f32_4 %180 = OpLoad %179 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 3 3 3 
                                       f32_3 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFAdd %184 %186 
                                       f32_4 %188 = OpLoad %9 
                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
                                                      OpStore %9 %189 
                                       f32_4 %190 = OpLoad %9 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                              Uniform f32_4* %193 = OpAccessChain %35 %192 
                                       f32_4 %194 = OpLoad %193 
                                       f32_2 %195 = OpVectorShuffle %194 %194 2 3 
                                       f32_2 %196 = OpFMul %191 %195 
                                       f32_2 %199 = OpFAdd %196 %198 
                                       f32_4 %200 = OpLoad %76 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 2 3 
                                                      OpStore %76 %201 
                                       f32_4 %202 = OpLoad %76 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                                       f32_2 %204 = OpExtInst %1 8 %203 
                                       f32_4 %205 = OpLoad %76 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %76 %206 
                                       f32_4 %207 = OpLoad %9 
                                       f32_2 %208 = OpVectorShuffle %207 %207 0 1 
                              Uniform f32_4* %209 = OpAccessChain %35 %192 
                                       f32_4 %210 = OpLoad %209 
                                       f32_2 %211 = OpVectorShuffle %210 %210 2 3 
                                       f32_2 %212 = OpFMul %208 %211 
                                       f32_4 %213 = OpLoad %76 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                                       f32_2 %215 = OpFNegate %214 
                                       f32_2 %216 = OpFAdd %212 %215 
                                       f32_4 %217 = OpLoad %9 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 2 3 
                                                      OpStore %9 %218 
                                       f32_4 %221 = OpLoad %9 
                                       f32_2 %222 = OpVectorShuffle %221 %221 0 1 
                                       f32_2 %223 = OpFNegate %222 
                                       f32_2 %225 = OpFAdd %223 %224 
                                                      OpStore %220 %225 
                                       f32_4 %227 = OpLoad %9 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                                       f32_2 %231 = OpExtInst %1 37 %228 %230 
                                       f32_4 %232 = OpLoad %226 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 2 3 
                                                      OpStore %226 %233 
                                       f32_4 %234 = OpLoad %226 
                                       f32_2 %235 = OpVectorShuffle %234 %234 0 1 
                                       f32_2 %236 = OpFNegate %235 
                                       f32_4 %237 = OpLoad %226 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                                       f32_2 %239 = OpFMul %236 %238 
                                       f32_2 %240 = OpLoad %220 
                                       f32_2 %241 = OpFAdd %239 %240 
                                                      OpStore %220 %241 
                                       f32_2 %242 = OpLoad %220 
                                       f32_2 %245 = OpFAdd %242 %244 
                                                      OpStore %220 %245 
                                       f32_2 %246 = OpLoad %220 
                                       f32_2 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %226 
                                       f32_4 %251 = OpVectorShuffle %250 %249 4 5 2 3 
                                                      OpStore %226 %251 
                                Private f32* %253 = OpAccessChain %226 %22 
                                         f32 %254 = OpLoad %253 
                                Private f32* %255 = OpAccessChain %252 %44 
                                                      OpStore %255 %254 
                                       f32_4 %256 = OpLoad %9 
                                       f32_2 %257 = OpVectorShuffle %256 %256 0 1 
                                       f32_2 %258 = OpExtInst %1 40 %257 %230 
                                                      OpStore %220 %258 
                                       f32_4 %260 = OpLoad %9 
                                       f32_4 %261 = OpVectorShuffle %260 %260 0 0 1 1 
                                       f32_4 %263 = OpFAdd %261 %262 
                                                      OpStore %259 %263 
                                       f32_2 %264 = OpLoad %220 
                                       f32_2 %265 = OpFNegate %264 
                                       f32_2 %266 = OpLoad %220 
                                       f32_2 %267 = OpFMul %265 %266 
                                       f32_4 %268 = OpLoad %259 
                                       f32_2 %269 = OpVectorShuffle %268 %268 1 3 
                                       f32_2 %270 = OpFAdd %267 %269 
                                                      OpStore %220 %270 
                                       f32_4 %271 = OpLoad %259 
                                       f32_4 %272 = OpVectorShuffle %271 %271 0 0 2 2 
                                       f32_4 %273 = OpLoad %259 
                                       f32_4 %274 = OpVectorShuffle %273 %273 0 0 2 2 
                                       f32_4 %275 = OpFMul %272 %274 
                                                      OpStore %259 %275 
                                       f32_2 %276 = OpLoad %220 
                                       f32_2 %277 = OpFAdd %276 %244 
                                                      OpStore %220 %277 
                                Private f32* %279 = OpAccessChain %220 %22 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFMul %280 %247 
                                Private f32* %283 = OpAccessChain %278 %282 
                                                      OpStore %283 %281 
                                Private f32* %285 = OpAccessChain %220 %44 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFMul %286 %247 
                                Private f32* %288 = OpAccessChain %284 %282 
                                                      OpStore %288 %287 
                                       f32_4 %289 = OpLoad %259 
                                       f32_2 %290 = OpVectorShuffle %289 %289 0 2 
                                       f32_2 %291 = OpFMul %290 %198 
                                       f32_4 %292 = OpLoad %9 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
                                       f32_2 %294 = OpFNegate %293 
                                       f32_2 %295 = OpFAdd %291 %294 
                                                      OpStore %220 %295 
                                       f32_4 %296 = OpLoad %259 
                                       f32_2 %297 = OpVectorShuffle %296 %296 3 1 
                                       f32_2 %300 = OpFMul %297 %299 
                                       f32_4 %301 = OpLoad %252 
                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
                                                      OpStore %252 %302 
                                       f32_2 %303 = OpLoad %220 
                                       f32_2 %304 = OpVectorShuffle %303 %303 1 0 
                                       f32_2 %305 = OpFMul %304 %248 
                                       f32_4 %306 = OpLoad %284 
                                       f32_4 %307 = OpVectorShuffle %306 %305 4 5 2 3 
                                                      OpStore %284 %307 
                                Private f32* %308 = OpAccessChain %284 %44 
                                         f32 %309 = OpLoad %308 
                                Private f32* %310 = OpAccessChain %278 %22 
                                                      OpStore %310 %309 
                                Private f32* %311 = OpAccessChain %252 %282 
                                         f32 %312 = OpLoad %311 
                                Private f32* %313 = OpAccessChain %226 %62 
                                                      OpStore %313 %312 
                                       f32_4 %314 = OpLoad %9 
                                       f32_2 %315 = OpVectorShuffle %314 %314 0 0 
                                       f32_2 %318 = OpFMul %315 %317 
                                       f32_2 %321 = OpFAdd %318 %320 
                                       f32_4 %322 = OpLoad %278 
                                       f32_4 %323 = OpVectorShuffle %322 %321 0 4 2 5 
                                                      OpStore %278 %323 
                                       f32_4 %324 = OpLoad %9 
                                       f32_2 %325 = OpVectorShuffle %324 %324 0 0 
                                       f32_2 %326 = OpFMul %325 %317 
                                       f32_2 %328 = OpFAdd %326 %327 
                                       f32_4 %329 = OpLoad %252 
                                       f32_4 %330 = OpVectorShuffle %329 %328 4 1 5 3 
                                                      OpStore %252 %330 
                                       f32_4 %331 = OpLoad %252 
                                       f32_4 %332 = OpLoad %278 
                                       f32_4 %333 = OpFAdd %331 %332 
                                                      OpStore %259 %333 
                                       f32_4 %334 = OpLoad %252 
                                       f32_4 %335 = OpLoad %259 
                                       f32_4 %336 = OpFDiv %334 %335 
                                                      OpStore %252 %336 
                                       f32_4 %337 = OpLoad %252 
                                       f32_4 %342 = OpFAdd %337 %341 
                                                      OpStore %252 %342 
                                       f32_4 %343 = OpLoad %252 
                                       f32_4 %344 = OpVectorShuffle %343 %343 3 0 1 2 
                              Uniform f32_4* %345 = OpAccessChain %35 %192 
                                       f32_4 %346 = OpLoad %345 
                                       f32_4 %347 = OpVectorShuffle %346 %346 0 0 0 0 
                                       f32_4 %348 = OpFMul %344 %347 
                                                      OpStore %252 %348 
                                       f32_4 %349 = OpLoad %252 
                                       f32_3 %350 = OpVectorShuffle %349 %349 1 2 3 
                                       f32_4 %351 = OpLoad %278 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 1 5 6 
                                                      OpStore %278 %352 
                                       f32_4 %353 = OpLoad %9 
                                       f32_2 %354 = OpVectorShuffle %353 %353 1 1 
                                       f32_2 %355 = OpFMul %354 %317 
                                       f32_2 %356 = OpFAdd %355 %320 
                                       f32_4 %357 = OpLoad %284 
                                       f32_4 %358 = OpVectorShuffle %357 %356 0 4 2 5 
                                                      OpStore %284 %358 
                                       f32_4 %359 = OpLoad %9 
                                       f32_2 %360 = OpVectorShuffle %359 %359 1 1 
                                       f32_2 %361 = OpFMul %360 %317 
                                       f32_2 %362 = OpFAdd %361 %327 
                                       f32_4 %363 = OpLoad %226 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 1 5 3 
                                                      OpStore %226 %364 
                                       f32_4 %365 = OpLoad %226 
                                       f32_4 %366 = OpLoad %284 
                                       f32_4 %367 = OpFAdd %365 %366 
                                                      OpStore %284 %367 
                                       f32_4 %368 = OpLoad %226 
                                       f32_4 %369 = OpLoad %284 
                                       f32_4 %370 = OpFDiv %368 %369 
                                                      OpStore %226 %370 
                                       f32_4 %371 = OpLoad %226 
                                       f32_4 %372 = OpFAdd %371 %341 
                                                      OpStore %226 %372 
                                       f32_4 %373 = OpLoad %226 
                                       f32_4 %374 = OpVectorShuffle %373 %373 0 3 1 2 
                              Uniform f32_4* %375 = OpAccessChain %35 %192 
                                       f32_4 %376 = OpLoad %375 
                                       f32_4 %377 = OpVectorShuffle %376 %376 1 1 1 1 
                                       f32_4 %378 = OpFMul %374 %377 
                                                      OpStore %226 %378 
                                Private f32* %379 = OpAccessChain %226 %22 
                                         f32 %380 = OpLoad %379 
                                Private f32* %381 = OpAccessChain %278 %44 
                                                      OpStore %381 %380 
                                       f32_4 %383 = OpLoad %76 
                                       f32_4 %384 = OpVectorShuffle %383 %383 0 1 0 1 
                              Uniform f32_4* %385 = OpAccessChain %35 %192 
                                       f32_4 %386 = OpLoad %385 
                                       f32_4 %387 = OpVectorShuffle %386 %386 0 1 0 1 
                                       f32_4 %388 = OpFMul %384 %387 
                                       f32_4 %389 = OpLoad %278 
                                       f32_4 %390 = OpVectorShuffle %389 %389 0 1 2 1 
                                       f32_4 %391 = OpFAdd %388 %390 
                                                      OpStore %382 %391 
                                       f32_4 %394 = OpLoad %382 
                                       f32_2 %395 = OpVectorShuffle %394 %394 2 3 
                                Private f32* %396 = OpAccessChain %9 %282 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpCompositeExtract %395 0 
                                         f32 %399 = OpCompositeExtract %395 1 
                                       f32_3 %400 = OpCompositeConstruct %398 %399 %397 
                                                      OpStore %393 %400 
                  read_only Texture2DSampled %406 = OpLoad %405 
                                       f32_3 %407 = OpLoad %393 
                                         f32 %408 = OpCompositeExtract %407 2 
                                         f32 %409 = OpImageSampleDrefExplicitLod %406 %407 %408 Lod %6 
                                                      OpStore %401 %409 
                                       f32_4 %411 = OpLoad %382 
                                       f32_2 %412 = OpVectorShuffle %411 %411 0 1 
                                Private f32* %413 = OpAccessChain %9 %282 
                                         f32 %414 = OpLoad %413 
                                         f32 %415 = OpCompositeExtract %412 0 
                                         f32 %416 = OpCompositeExtract %412 1 
                                       f32_3 %417 = OpCompositeConstruct %415 %416 %414 
                                                      OpStore %410 %417 
                  read_only Texture2DSampled %419 = OpLoad %405 
                                       f32_3 %420 = OpLoad %410 
                                         f32 %421 = OpCompositeExtract %420 2 
                                         f32 %422 = OpImageSampleDrefExplicitLod %419 %420 %421 Lod %6 
                                                      OpStore %418 %422 
                                       f32_4 %423 = OpLoad %259 
                                       f32_4 %424 = OpLoad %284 
                                       f32_4 %425 = OpVectorShuffle %424 %424 0 0 0 0 
                                       f32_4 %426 = OpFMul %423 %425 
                                                      OpStore %382 %426 
                                         f32 %427 = OpLoad %401 
                                Private f32* %428 = OpAccessChain %382 %44 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFMul %427 %429 
                                Private f32* %431 = OpAccessChain %9 %22 
                                                      OpStore %431 %430 
                                Private f32* %432 = OpAccessChain %382 %22 
                                         f32 %433 = OpLoad %432 
                                         f32 %434 = OpLoad %418 
                                         f32 %435 = OpFMul %433 %434 
                                Private f32* %436 = OpAccessChain %9 %22 
                                         f32 %437 = OpLoad %436 
                                         f32 %438 = OpFAdd %435 %437 
                                Private f32* %439 = OpAccessChain %9 %22 
                                                      OpStore %439 %438 
                                       f32_4 %440 = OpLoad %76 
                                       f32_2 %441 = OpVectorShuffle %440 %440 0 1 
                              Uniform f32_4* %442 = OpAccessChain %35 %192 
                                       f32_4 %443 = OpLoad %442 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 1 
                                       f32_2 %445 = OpFMul %441 %444 
                                       f32_4 %446 = OpLoad %278 
                                       f32_2 %447 = OpVectorShuffle %446 %446 3 1 
                                       f32_2 %448 = OpFAdd %445 %447 
                                       f32_3 %449 = OpLoad %28 
                                       f32_3 %450 = OpVectorShuffle %449 %448 3 1 4 
                                                      OpStore %28 %450 
                                Private f32* %451 = OpAccessChain %278 %44 
                                         f32 %452 = OpLoad %451 
                                Private f32* %453 = OpAccessChain %252 %44 
                                                      OpStore %453 %452 
                                       f32_4 %454 = OpLoad %76 
                                       f32_2 %455 = OpVectorShuffle %454 %454 0 1 
                              Uniform f32_4* %456 = OpAccessChain %35 %192 
                                       f32_4 %457 = OpLoad %456 
                                       f32_2 %458 = OpVectorShuffle %457 %457 0 1 
                                       f32_2 %459 = OpFMul %455 %458 
                                       f32_4 %460 = OpLoad %252 
                                       f32_2 %461 = OpVectorShuffle %460 %460 0 1 
                                       f32_2 %462 = OpFAdd %459 %461 
                                                      OpStore %220 %462 
                                       f32_2 %464 = OpLoad %220 
                                Private f32* %465 = OpAccessChain %9 %282 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpCompositeExtract %464 0 
                                         f32 %468 = OpCompositeExtract %464 1 
                                       f32_3 %469 = OpCompositeConstruct %467 %468 %466 
                                                      OpStore %463 %469 
                  read_only Texture2DSampled %471 = OpLoad %405 
                                       f32_3 %472 = OpLoad %463 
                                         f32 %473 = OpCompositeExtract %472 2 
                                         f32 %474 = OpImageSampleDrefExplicitLod %471 %472 %473 Lod %6 
                                                      OpStore %470 %474 
                                       f32_3 %476 = OpLoad %28 
                                       f32_2 %477 = OpVectorShuffle %476 %476 0 2 
                                Private f32* %478 = OpAccessChain %9 %282 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpCompositeExtract %477 0 
                                         f32 %481 = OpCompositeExtract %477 1 
                                       f32_3 %482 = OpCompositeConstruct %480 %481 %479 
                                                      OpStore %475 %482 
                  read_only Texture2DSampled %483 = OpLoad %405 
                                       f32_3 %484 = OpLoad %475 
                                         f32 %485 = OpCompositeExtract %484 2 
                                         f32 %486 = OpImageSampleDrefExplicitLod %483 %484 %485 Lod %6 
                                                      OpStore %418 %486 
                                Private f32* %487 = OpAccessChain %382 %282 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpLoad %418 
                                         f32 %490 = OpFMul %488 %489 
                                Private f32* %491 = OpAccessChain %9 %22 
                                         f32 %492 = OpLoad %491 
                                         f32 %493 = OpFAdd %490 %492 
                                Private f32* %494 = OpAccessChain %9 %22 
                                                      OpStore %494 %493 
                                Private f32* %495 = OpAccessChain %382 %62 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpLoad %470 
                                         f32 %498 = OpFMul %496 %497 
                                Private f32* %499 = OpAccessChain %9 %22 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpFAdd %498 %500 
                                Private f32* %502 = OpAccessChain %9 %22 
                                                      OpStore %502 %501 
                                Private f32* %503 = OpAccessChain %226 %282 
                                         f32 %504 = OpLoad %503 
                                Private f32* %505 = OpAccessChain %278 %44 
                                                      OpStore %505 %504 
                                       f32_4 %506 = OpLoad %76 
                                       f32_4 %507 = OpVectorShuffle %506 %506 0 1 0 1 
                              Uniform f32_4* %508 = OpAccessChain %35 %192 
                                       f32_4 %509 = OpLoad %508 
                                       f32_4 %510 = OpVectorShuffle %509 %509 0 1 0 1 
                                       f32_4 %511 = OpFMul %507 %510 
                                       f32_4 %512 = OpLoad %278 
                                       f32_4 %513 = OpVectorShuffle %512 %512 0 1 2 1 
                                       f32_4 %514 = OpFAdd %511 %513 
                                                      OpStore %382 %514 
                                       f32_4 %516 = OpLoad %382 
                                       f32_2 %517 = OpVectorShuffle %516 %516 0 1 
                                Private f32* %518 = OpAccessChain %9 %282 
                                         f32 %519 = OpLoad %518 
                                         f32 %520 = OpCompositeExtract %517 0 
                                         f32 %521 = OpCompositeExtract %517 1 
                                       f32_3 %522 = OpCompositeConstruct %520 %521 %519 
                                                      OpStore %515 %522 
                  read_only Texture2DSampled %523 = OpLoad %405 
                                       f32_3 %524 = OpLoad %515 
                                         f32 %525 = OpCompositeExtract %524 2 
                                         f32 %526 = OpImageSampleDrefExplicitLod %523 %524 %525 Lod %6 
                                                      OpStore %418 %526 
                                       f32_4 %528 = OpLoad %382 
                                       f32_2 %529 = OpVectorShuffle %528 %528 2 3 
                                Private f32* %530 = OpAccessChain %9 %282 
                                         f32 %531 = OpLoad %530 
                                         f32 %532 = OpCompositeExtract %529 0 
                                         f32 %533 = OpCompositeExtract %529 1 
                                       f32_3 %534 = OpCompositeConstruct %532 %533 %531 
                                                      OpStore %527 %534 
                  read_only Texture2DSampled %536 = OpLoad %405 
                                       f32_3 %537 = OpLoad %527 
                                         f32 %538 = OpCompositeExtract %537 2 
                                         f32 %539 = OpImageSampleDrefExplicitLod %536 %537 %538 Lod %6 
                                                      OpStore %535 %539 
                                       f32_4 %540 = OpLoad %259 
                                       f32_4 %541 = OpLoad %284 
                                       f32_4 %542 = OpVectorShuffle %541 %541 1 1 1 1 
                                       f32_4 %543 = OpFMul %540 %542 
                                                      OpStore %382 %543 
                                Private f32* %544 = OpAccessChain %382 %22 
                                         f32 %545 = OpLoad %544 
                                         f32 %546 = OpLoad %418 
                                         f32 %547 = OpFMul %545 %546 
                                Private f32* %548 = OpAccessChain %9 %22 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %547 %549 
                                Private f32* %551 = OpAccessChain %9 %22 
                                                      OpStore %551 %550 
                                Private f32* %552 = OpAccessChain %382 %44 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpLoad %535 
                                         f32 %555 = OpFMul %553 %554 
                                Private f32* %556 = OpAccessChain %9 %22 
                                         f32 %557 = OpLoad %556 
                                         f32 %558 = OpFAdd %555 %557 
                                Private f32* %559 = OpAccessChain %9 %22 
                                                      OpStore %559 %558 
                                       f32_4 %560 = OpLoad %76 
                                       f32_2 %561 = OpVectorShuffle %560 %560 0 1 
                              Uniform f32_4* %562 = OpAccessChain %35 %192 
                                       f32_4 %563 = OpLoad %562 
                                       f32_2 %564 = OpVectorShuffle %563 %563 0 1 
                                       f32_2 %565 = OpFMul %561 %564 
                                       f32_4 %566 = OpLoad %278 
                                       f32_2 %567 = OpVectorShuffle %566 %566 3 1 
                                       f32_2 %568 = OpFAdd %565 %567 
                                       f32_3 %569 = OpLoad %28 
                                       f32_3 %570 = OpVectorShuffle %569 %568 3 1 4 
                                                      OpStore %28 %570 
                                Private f32* %571 = OpAccessChain %278 %44 
                                         f32 %572 = OpLoad %571 
                                Private f32* %573 = OpAccessChain %252 %282 
                                                      OpStore %573 %572 
                                       f32_4 %574 = OpLoad %76 
                                       f32_2 %575 = OpVectorShuffle %574 %574 0 1 
                              Uniform f32_4* %576 = OpAccessChain %35 %192 
                                       f32_4 %577 = OpLoad %576 
                                       f32_2 %578 = OpVectorShuffle %577 %577 0 1 
                                       f32_2 %579 = OpFMul %575 %578 
                                       f32_4 %580 = OpLoad %252 
                                       f32_2 %581 = OpVectorShuffle %580 %580 0 2 
                                       f32_2 %582 = OpFAdd %579 %581 
                                                      OpStore %220 %582 
                                       f32_2 %584 = OpLoad %220 
                                Private f32* %585 = OpAccessChain %9 %282 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpCompositeExtract %584 0 
                                         f32 %588 = OpCompositeExtract %584 1 
                                       f32_3 %589 = OpCompositeConstruct %587 %588 %586 
                                                      OpStore %583 %589 
                  read_only Texture2DSampled %590 = OpLoad %405 
                                       f32_3 %591 = OpLoad %583 
                                         f32 %592 = OpCompositeExtract %591 2 
                                         f32 %593 = OpImageSampleDrefExplicitLod %590 %591 %592 Lod %6 
                                                      OpStore %470 %593 
                                       f32_3 %595 = OpLoad %28 
                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
                                Private f32* %597 = OpAccessChain %9 %282 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpCompositeExtract %596 0 
                                         f32 %600 = OpCompositeExtract %596 1 
                                       f32_3 %601 = OpCompositeConstruct %599 %600 %598 
                                                      OpStore %594 %601 
                  read_only Texture2DSampled %602 = OpLoad %405 
                                       f32_3 %603 = OpLoad %594 
                                         f32 %604 = OpCompositeExtract %603 2 
                                         f32 %605 = OpImageSampleDrefExplicitLod %602 %603 %604 Lod %6 
                                                      OpStore %418 %605 
                                Private f32* %606 = OpAccessChain %382 %282 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpLoad %418 
                                         f32 %609 = OpFMul %607 %608 
                                Private f32* %610 = OpAccessChain %9 %22 
                                         f32 %611 = OpLoad %610 
                                         f32 %612 = OpFAdd %609 %611 
                                Private f32* %613 = OpAccessChain %9 %22 
                                                      OpStore %613 %612 
                                Private f32* %614 = OpAccessChain %382 %62 
                                         f32 %615 = OpLoad %614 
                                         f32 %616 = OpLoad %470 
                                         f32 %617 = OpFMul %615 %616 
                                Private f32* %618 = OpAccessChain %9 %22 
                                         f32 %619 = OpLoad %618 
                                         f32 %620 = OpFAdd %617 %619 
                                Private f32* %621 = OpAccessChain %9 %22 
                                                      OpStore %621 %620 
                                Private f32* %622 = OpAccessChain %226 %62 
                                         f32 %623 = OpLoad %622 
                                Private f32* %624 = OpAccessChain %278 %44 
                                                      OpStore %624 %623 
                                       f32_4 %625 = OpLoad %76 
                                       f32_4 %626 = OpVectorShuffle %625 %625 0 1 0 1 
                              Uniform f32_4* %627 = OpAccessChain %35 %192 
                                       f32_4 %628 = OpLoad %627 
                                       f32_4 %629 = OpVectorShuffle %628 %628 0 1 0 1 
                                       f32_4 %630 = OpFMul %626 %629 
                                       f32_4 %631 = OpLoad %278 
                                       f32_4 %632 = OpVectorShuffle %631 %631 0 1 2 1 
                                       f32_4 %633 = OpFAdd %630 %632 
                                                      OpStore %382 %633 
                                       f32_4 %635 = OpLoad %382 
                                       f32_2 %636 = OpVectorShuffle %635 %635 0 1 
                                Private f32* %637 = OpAccessChain %9 %282 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpCompositeExtract %636 0 
                                         f32 %640 = OpCompositeExtract %636 1 
                                       f32_3 %641 = OpCompositeConstruct %639 %640 %638 
                                                      OpStore %634 %641 
                  read_only Texture2DSampled %642 = OpLoad %405 
                                       f32_3 %643 = OpLoad %634 
                                         f32 %644 = OpCompositeExtract %643 2 
                                         f32 %645 = OpImageSampleDrefExplicitLod %642 %643 %644 Lod %6 
                                                      OpStore %418 %645 
                                       f32_4 %647 = OpLoad %382 
                                       f32_2 %648 = OpVectorShuffle %647 %647 2 3 
                                Private f32* %649 = OpAccessChain %9 %282 
                                         f32 %650 = OpLoad %649 
                                         f32 %651 = OpCompositeExtract %648 0 
                                         f32 %652 = OpCompositeExtract %648 1 
                                       f32_3 %653 = OpCompositeConstruct %651 %652 %650 
                                                      OpStore %646 %653 
                  read_only Texture2DSampled %654 = OpLoad %405 
                                       f32_3 %655 = OpLoad %646 
                                         f32 %656 = OpCompositeExtract %655 2 
                                         f32 %657 = OpImageSampleDrefExplicitLod %654 %655 %656 Lod %6 
                                                      OpStore %535 %657 
                                       f32_4 %658 = OpLoad %259 
                                       f32_4 %659 = OpLoad %284 
                                       f32_4 %660 = OpVectorShuffle %659 %659 2 2 2 2 
                                       f32_4 %661 = OpFMul %658 %660 
                                                      OpStore %382 %661 
                                       f32_4 %662 = OpLoad %259 
                                       f32_4 %663 = OpLoad %284 
                                       f32_4 %664 = OpVectorShuffle %663 %663 3 3 3 3 
                                       f32_4 %665 = OpFMul %662 %664 
                                                      OpStore %259 %665 
                                Private f32* %666 = OpAccessChain %382 %22 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpLoad %418 
                                         f32 %669 = OpFMul %667 %668 
                                Private f32* %670 = OpAccessChain %9 %22 
                                         f32 %671 = OpLoad %670 
                                         f32 %672 = OpFAdd %669 %671 
                                Private f32* %673 = OpAccessChain %9 %22 
                                                      OpStore %673 %672 
                                Private f32* %674 = OpAccessChain %382 %44 
                                         f32 %675 = OpLoad %674 
                                         f32 %676 = OpLoad %535 
                                         f32 %677 = OpFMul %675 %676 
                                Private f32* %678 = OpAccessChain %9 %22 
                                         f32 %679 = OpLoad %678 
                                         f32 %680 = OpFAdd %677 %679 
                                Private f32* %681 = OpAccessChain %9 %22 
                                                      OpStore %681 %680 
                                       f32_4 %682 = OpLoad %76 
                                       f32_2 %683 = OpVectorShuffle %682 %682 0 1 
                              Uniform f32_4* %684 = OpAccessChain %35 %192 
                                       f32_4 %685 = OpLoad %684 
                                       f32_2 %686 = OpVectorShuffle %685 %685 0 1 
                                       f32_2 %687 = OpFMul %683 %686 
                                       f32_4 %688 = OpLoad %278 
                                       f32_2 %689 = OpVectorShuffle %688 %688 3 1 
                                       f32_2 %690 = OpFAdd %687 %689 
                                       f32_3 %691 = OpLoad %28 
                                       f32_3 %692 = OpVectorShuffle %691 %690 3 1 4 
                                                      OpStore %28 %692 
                                       f32_4 %693 = OpLoad %278 
                                       f32_3 %694 = OpVectorShuffle %693 %693 0 2 3 
                                       f32_4 %695 = OpLoad %226 
                                       f32_4 %696 = OpVectorShuffle %695 %694 4 1 5 6 
                                                      OpStore %226 %696 
                                Private f32* %697 = OpAccessChain %278 %44 
                                         f32 %698 = OpLoad %697 
                                Private f32* %699 = OpAccessChain %252 %62 
                                                      OpStore %699 %698 
                                       f32_4 %700 = OpLoad %76 
                                       f32_2 %701 = OpVectorShuffle %700 %700 0 1 
                              Uniform f32_4* %702 = OpAccessChain %35 %192 
                                       f32_4 %703 = OpLoad %702 
                                       f32_2 %704 = OpVectorShuffle %703 %703 0 1 
                                       f32_2 %705 = OpFMul %701 %704 
                                       f32_4 %706 = OpLoad %252 
                                       f32_2 %707 = OpVectorShuffle %706 %706 0 3 
                                       f32_2 %708 = OpFAdd %705 %707 
                                                      OpStore %220 %708 
                                       f32_2 %710 = OpLoad %220 
                                Private f32* %711 = OpAccessChain %9 %282 
                                         f32 %712 = OpLoad %711 
                                         f32 %713 = OpCompositeExtract %710 0 
                                         f32 %714 = OpCompositeExtract %710 1 
                                       f32_3 %715 = OpCompositeConstruct %713 %714 %712 
                                                      OpStore %709 %715 
                  read_only Texture2DSampled %716 = OpLoad %405 
                                       f32_3 %717 = OpLoad %709 
                                         f32 %718 = OpCompositeExtract %717 2 
                                         f32 %719 = OpImageSampleDrefExplicitLod %716 %717 %718 Lod %6 
                                                      OpStore %470 %719 
                                       f32_3 %721 = OpLoad %28 
                                       f32_2 %722 = OpVectorShuffle %721 %721 0 2 
                                Private f32* %723 = OpAccessChain %9 %282 
                                         f32 %724 = OpLoad %723 
                                         f32 %725 = OpCompositeExtract %722 0 
                                         f32 %726 = OpCompositeExtract %722 1 
                                       f32_3 %727 = OpCompositeConstruct %725 %726 %724 
                                                      OpStore %720 %727 
                  read_only Texture2DSampled %728 = OpLoad %405 
                                       f32_3 %729 = OpLoad %720 
                                         f32 %730 = OpCompositeExtract %729 2 
                                         f32 %731 = OpImageSampleDrefExplicitLod %728 %729 %730 Lod %6 
                                                      OpStore %418 %731 
                                Private f32* %732 = OpAccessChain %382 %282 
                                         f32 %733 = OpLoad %732 
                                         f32 %734 = OpLoad %418 
                                         f32 %735 = OpFMul %733 %734 
                                Private f32* %736 = OpAccessChain %9 %22 
                                         f32 %737 = OpLoad %736 
                                         f32 %738 = OpFAdd %735 %737 
                                Private f32* %739 = OpAccessChain %9 %22 
                                                      OpStore %739 %738 
                                Private f32* %740 = OpAccessChain %382 %62 
                                         f32 %741 = OpLoad %740 
                                         f32 %742 = OpLoad %470 
                                         f32 %743 = OpFMul %741 %742 
                                Private f32* %744 = OpAccessChain %9 %22 
                                         f32 %745 = OpLoad %744 
                                         f32 %746 = OpFAdd %743 %745 
                                Private f32* %747 = OpAccessChain %9 %22 
                                                      OpStore %747 %746 
                                       f32_4 %748 = OpLoad %76 
                                       f32_4 %749 = OpVectorShuffle %748 %748 0 1 0 1 
                              Uniform f32_4* %750 = OpAccessChain %35 %192 
                                       f32_4 %751 = OpLoad %750 
                                       f32_4 %752 = OpVectorShuffle %751 %751 0 1 0 1 
                                       f32_4 %753 = OpFMul %749 %752 
                                       f32_4 %754 = OpLoad %226 
                                       f32_4 %755 = OpVectorShuffle %754 %754 0 1 2 1 
                                       f32_4 %756 = OpFAdd %753 %755 
                                                      OpStore %278 %756 
                                       f32_4 %757 = OpLoad %76 
                                       f32_2 %758 = OpVectorShuffle %757 %757 0 1 
                              Uniform f32_4* %759 = OpAccessChain %35 %192 
                                       f32_4 %760 = OpLoad %759 
                                       f32_2 %761 = OpVectorShuffle %760 %760 0 1 
                                       f32_2 %762 = OpFMul %758 %761 
                                       f32_4 %763 = OpLoad %226 
                                       f32_2 %764 = OpVectorShuffle %763 %763 3 1 
                                       f32_2 %765 = OpFAdd %762 %764 
                                       f32_3 %766 = OpLoad %28 
                                       f32_3 %767 = OpVectorShuffle %766 %765 3 1 4 
                                                      OpStore %28 %767 
                                Private f32* %768 = OpAccessChain %226 %44 
                                         f32 %769 = OpLoad %768 
                                Private f32* %770 = OpAccessChain %252 %44 
                                                      OpStore %770 %769 
                                       f32_4 %771 = OpLoad %76 
                                       f32_2 %772 = OpVectorShuffle %771 %771 0 1 
                              Uniform f32_4* %773 = OpAccessChain %35 %192 
                                       f32_4 %774 = OpLoad %773 
                                       f32_2 %775 = OpVectorShuffle %774 %774 0 1 
                                       f32_2 %776 = OpFMul %772 %775 
                                       f32_4 %777 = OpLoad %252 
                                       f32_2 %778 = OpVectorShuffle %777 %777 0 1 
                                       f32_2 %779 = OpFAdd %776 %778 
                                       f32_4 %780 = OpLoad %76 
                                       f32_4 %781 = OpVectorShuffle %780 %779 4 5 2 3 
                                                      OpStore %76 %781 
                                       f32_4 %783 = OpLoad %76 
                                       f32_2 %784 = OpVectorShuffle %783 %783 0 1 
                                Private f32* %785 = OpAccessChain %9 %282 
                                         f32 %786 = OpLoad %785 
                                         f32 %787 = OpCompositeExtract %784 0 
                                         f32 %788 = OpCompositeExtract %784 1 
                                       f32_3 %789 = OpCompositeConstruct %787 %788 %786 
                                                      OpStore %782 %789 
                  read_only Texture2DSampled %791 = OpLoad %405 
                                       f32_3 %792 = OpLoad %782 
                                         f32 %793 = OpCompositeExtract %792 2 
                                         f32 %794 = OpImageSampleDrefExplicitLod %791 %792 %793 Lod %6 
                                                      OpStore %790 %794 
                                       f32_3 %796 = OpLoad %28 
                                       f32_2 %797 = OpVectorShuffle %796 %796 0 2 
                                Private f32* %798 = OpAccessChain %9 %282 
                                         f32 %799 = OpLoad %798 
                                         f32 %800 = OpCompositeExtract %797 0 
                                         f32 %801 = OpCompositeExtract %797 1 
                                       f32_3 %802 = OpCompositeConstruct %800 %801 %799 
                                                      OpStore %795 %802 
                  read_only Texture2DSampled %803 = OpLoad %405 
                                       f32_3 %804 = OpLoad %795 
                                         f32 %805 = OpCompositeExtract %804 2 
                                         f32 %806 = OpImageSampleDrefExplicitLod %803 %804 %805 Lod %6 
                                                      OpStore %418 %806 
                                       f32_4 %808 = OpLoad %278 
                                       f32_2 %809 = OpVectorShuffle %808 %808 0 1 
                                Private f32* %810 = OpAccessChain %9 %282 
                                         f32 %811 = OpLoad %810 
                                         f32 %812 = OpCompositeExtract %809 0 
                                         f32 %813 = OpCompositeExtract %809 1 
                                       f32_3 %814 = OpCompositeConstruct %812 %813 %811 
                                                      OpStore %807 %814 
                  read_only Texture2DSampled %815 = OpLoad %405 
                                       f32_3 %816 = OpLoad %807 
                                         f32 %817 = OpCompositeExtract %816 2 
                                         f32 %818 = OpImageSampleDrefExplicitLod %815 %816 %817 Lod %6 
                                                      OpStore %535 %818 
                                       f32_4 %820 = OpLoad %278 
                                       f32_2 %821 = OpVectorShuffle %820 %820 2 3 
                                Private f32* %822 = OpAccessChain %9 %282 
                                         f32 %823 = OpLoad %822 
                                         f32 %824 = OpCompositeExtract %821 0 
                                         f32 %825 = OpCompositeExtract %821 1 
                                       f32_3 %826 = OpCompositeConstruct %824 %825 %823 
                                                      OpStore %819 %826 
                  read_only Texture2DSampled %828 = OpLoad %405 
                                       f32_3 %829 = OpLoad %819 
                                         f32 %830 = OpCompositeExtract %829 2 
                                         f32 %831 = OpImageSampleDrefExplicitLod %828 %829 %830 Lod %6 
                                                      OpStore %827 %831 
                                Private f32* %832 = OpAccessChain %259 %22 
                                         f32 %833 = OpLoad %832 
                                         f32 %834 = OpLoad %535 
                                         f32 %835 = OpFMul %833 %834 
                                Private f32* %836 = OpAccessChain %9 %22 
                                         f32 %837 = OpLoad %836 
                                         f32 %838 = OpFAdd %835 %837 
                                Private f32* %839 = OpAccessChain %9 %22 
                                                      OpStore %839 %838 
                                Private f32* %840 = OpAccessChain %259 %44 
                                         f32 %841 = OpLoad %840 
                                         f32 %842 = OpLoad %827 
                                         f32 %843 = OpFMul %841 %842 
                                Private f32* %844 = OpAccessChain %9 %22 
                                         f32 %845 = OpLoad %844 
                                         f32 %846 = OpFAdd %843 %845 
                                Private f32* %847 = OpAccessChain %9 %22 
                                                      OpStore %847 %846 
                                Private f32* %848 = OpAccessChain %259 %282 
                                         f32 %849 = OpLoad %848 
                                         f32 %850 = OpLoad %418 
                                         f32 %851 = OpFMul %849 %850 
                                Private f32* %852 = OpAccessChain %9 %22 
                                         f32 %853 = OpLoad %852 
                                         f32 %854 = OpFAdd %851 %853 
                                Private f32* %855 = OpAccessChain %9 %22 
                                                      OpStore %855 %854 
                                Private f32* %856 = OpAccessChain %259 %62 
                                         f32 %857 = OpLoad %856 
                                         f32 %858 = OpLoad %790 
                                         f32 %859 = OpFMul %857 %858 
                                Private f32* %860 = OpAccessChain %9 %22 
                                         f32 %861 = OpLoad %860 
                                         f32 %862 = OpFAdd %859 %861 
                                Private f32* %863 = OpAccessChain %9 %22 
                                                      OpStore %863 %862 
                                Uniform f32* %866 = OpAccessChain %35 %865 %22 
                                         f32 %867 = OpLoad %866 
                                         f32 %868 = OpFNegate %867 
                                         f32 %869 = OpFAdd %868 %49 
                                                      OpStore %864 %869 
                                       f32_4 %870 = OpLoad %9 
                                       f32_4 %871 = OpVectorShuffle %870 %870 0 0 0 0 
                                         f32 %872 = OpLoad %864 
                                       f32_4 %873 = OpCompositeConstruct %872 %872 %872 %872 
                                       f32_4 %874 = OpFMul %871 %873 
                              Uniform f32_4* %875 = OpAccessChain %35 %865 
                                       f32_4 %876 = OpLoad %875 
                                       f32_4 %877 = OpVectorShuffle %876 %876 0 0 0 0 
                                       f32_4 %878 = OpFAdd %874 %877 
                                                      OpStore %9 %878 
                                       f32_4 %881 = OpLoad %9 
                                                      OpStore %880 %881 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat10_8;
float u_xlat16;
float u_xlat10_16;
vec2 u_xlat17;
float u_xlat10_17;
float u_xlat10_24;
void main()
{
    u_xlat10_0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat8.x = _ZBufferParams.x * u_xlat10_0.x + _ZBufferParams.y;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat16 = (-u_xlat8.x) + u_xlat10_0.x;
    u_xlat8.x = unity_OrthoParams.w * u_xlat16 + u_xlat8.x;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat10_0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat1.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat3.zw = u_xlat4.wy * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat2.w = u_xlat3.z;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat0.x = u_xlat10_0.x * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat10_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat10_24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat10_16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat10_1 + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 884
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %78 %81 %95 %880 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpDecorate %32 ArrayStride 32 
                                                      OpMemberDecorate %33 0 Offset 33 
                                                      OpMemberDecorate %33 1 Offset 33 
                                                      OpMemberDecorate %33 2 Offset 33 
                                                      OpMemberDecorate %33 3 Offset 33 
                                                      OpMemberDecorate %33 4 RelaxedPrecision 
                                                      OpMemberDecorate %33 4 Offset 33 
                                                      OpMemberDecorate %33 5 Offset 33 
                                                      OpDecorate %33 Block 
                                                      OpDecorate %35 DescriptorSet 35 
                                                      OpDecorate %35 Binding 35 
                                                      OpDecorate %78 Location 78 
                                                      OpDecorate %81 Location 81 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %405 DescriptorSet 405 
                                                      OpDecorate %405 Binding 405 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %554 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %602 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %654 RelaxedPrecision 
                                                      OpDecorate %668 RelaxedPrecision 
                                                      OpDecorate %676 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %728 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %742 RelaxedPrecision 
                                                      OpDecorate %790 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %803 RelaxedPrecision 
                                                      OpDecorate %815 RelaxedPrecision 
                                                      OpDecorate %827 RelaxedPrecision 
                                                      OpDecorate %828 RelaxedPrecision 
                                                      OpDecorate %834 RelaxedPrecision 
                                                      OpDecorate %842 RelaxedPrecision 
                                                      OpDecorate %850 RelaxedPrecision 
                                                      OpDecorate %858 RelaxedPrecision 
                                                      OpDecorate %864 RelaxedPrecision 
                                                      OpDecorate %867 RelaxedPrecision 
                                                      OpDecorate %868 RelaxedPrecision 
                                                      OpDecorate %869 RelaxedPrecision 
                                                      OpDecorate %872 RelaxedPrecision 
                                                      OpDecorate %876 RelaxedPrecision 
                                                      OpDecorate %877 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %880 Location 880 
                                                      OpDecorate %883 RelaxedPrecision 
                                                      OpDecorate %883 DescriptorSet 883 
                                                      OpDecorate %883 Binding 883 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                              %26 = OpTypeVector %6 3 
                                              %27 = OpTypePointer Private %26 
                               Private f32_3* %28 = OpVariable Private 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %7 %29 
                                          u32 %31 = OpConstant 16 
                                              %32 = OpTypeArray %7 %31 
                                              %33 = OpTypeStruct %7 %7 %30 %32 %7 %7 
                                              %34 = OpTypePointer Uniform %33 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %35 = OpVariable Uniform 
                                              %36 = OpTypeInt 32 1 
                                          i32 %37 = OpConstant 0 
                                              %38 = OpTypePointer Uniform %6 
                                          u32 %44 = OpConstant 1 
                                          f32 %49 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %61 = OpConstant 1 
                                          u32 %62 = OpConstant 3 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypePointer Input %26 
                                 Input f32_3* %78 = OpVariable Input 
                                 Input f32_3* %81 = OpVariable Input 
                                 Input f32_3* %95 = OpVariable Input 
                                             %112 = OpTypePointer Uniform %7 
                                         i32 %126 = OpConstant 2 
                                         i32 %145 = OpConstant 3 
                                         i32 %192 = OpConstant 5 
                                         f32 %197 = OpConstant 3.674022E-40 
                                       f32_2 %198 = OpConstantComposite %197 %197 
                                             %219 = OpTypePointer Private %17 
                              Private f32_2* %220 = OpVariable Private 
                                       f32_2 %224 = OpConstantComposite %49 %49 
                              Private f32_4* %226 = OpVariable Private 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_2 %230 = OpConstantComposite %229 %229 
                                         f32 %243 = OpConstant 3.674022E-40 
                                       f32_2 %244 = OpConstantComposite %243 %243 
                                         f32 %247 = OpConstant 3.674022E-40 
                                       f32_2 %248 = OpConstantComposite %247 %247 
                              Private f32_4* %252 = OpVariable Private 
                              Private f32_4* %259 = OpVariable Private 
                                       f32_4 %262 = OpConstantComposite %197 %49 %197 %49 
                              Private f32_4* %278 = OpVariable Private 
                                         u32 %282 = OpConstant 2 
                              Private f32_4* %284 = OpVariable Private 
                                         f32 %298 = OpConstant 3.674022E-40 
                                       f32_2 %299 = OpConstantComposite %298 %298 
                                         f32 %316 = OpConstant 3.674022E-40 
                                       f32_2 %317 = OpConstantComposite %316 %247 
                                         f32 %319 = OpConstant 3.674022E-40 
                                       f32_2 %320 = OpConstantComposite %319 %247 
                                       f32_2 %327 = OpConstantComposite %247 %319 
                                         f32 %338 = OpConstant 3.674022E-40 
                                         f32 %339 = OpConstant 3.674022E-40 
                                         f32 %340 = OpConstant 3.674022E-40 
                                       f32_4 %341 = OpConstantComposite %338 %339 %197 %340 
                              Private f32_4* %382 = OpVariable Private 
                                             %392 = OpTypePointer Function %26 
                                Private f32* %401 = OpVariable Private 
                                             %402 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %403 = OpTypeSampledImage %402 
                                             %404 = OpTypePointer UniformConstant %403 
 UniformConstant read_only Texture2DSampled* %405 = OpVariable UniformConstant 
                                Private f32* %418 = OpVariable Private 
                                Private f32* %470 = OpVariable Private 
                                Private f32* %535 = OpVariable Private 
                                Private f32* %790 = OpVariable Private 
                                Private f32* %827 = OpVariable Private 
                                Private f32* %864 = OpVariable Private 
                                         i32 %865 = OpConstant 4 
                                             %879 = OpTypePointer Output %7 
                               Output f32_4* %880 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %883 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %393 = OpVariable Function 
                             Function f32_3* %410 = OpVariable Function 
                             Function f32_3* %463 = OpVariable Function 
                             Function f32_3* %475 = OpVariable Function 
                             Function f32_3* %515 = OpVariable Function 
                             Function f32_3* %527 = OpVariable Function 
                             Function f32_3* %583 = OpVariable Function 
                             Function f32_3* %594 = OpVariable Function 
                             Function f32_3* %634 = OpVariable Function 
                             Function f32_3* %646 = OpVariable Function 
                             Function f32_3* %709 = OpVariable Function 
                             Function f32_3* %720 = OpVariable Function 
                             Function f32_3* %782 = OpVariable Function 
                             Function f32_3* %795 = OpVariable Function 
                             Function f32_3* %807 = OpVariable Function 
                             Function f32_3* %819 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Uniform f32* %39 = OpAccessChain %35 %37 %22 
                                          f32 %40 = OpLoad %39 
                                 Private f32* %41 = OpAccessChain %9 %22 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFMul %40 %42 
                                 Uniform f32* %45 = OpAccessChain %35 %37 %44 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFAdd %43 %46 
                                 Private f32* %48 = OpAccessChain %28 %22 
                                                      OpStore %48 %47 
                                 Private f32* %50 = OpAccessChain %28 %22 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFDiv %49 %51 
                                 Private f32* %53 = OpAccessChain %28 %22 
                                                      OpStore %53 %52 
                                 Private f32* %55 = OpAccessChain %28 %22 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFNegate %56 
                                 Private f32* %58 = OpAccessChain %9 %22 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFAdd %57 %59 
                                                      OpStore %54 %60 
                                 Uniform f32* %63 = OpAccessChain %35 %61 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %54 
                                          f32 %66 = OpFMul %64 %65 
                                 Private f32* %67 = OpAccessChain %28 %22 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFAdd %66 %68 
                                 Private f32* %70 = OpAccessChain %28 %22 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %9 %22 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFNegate %72 
                                          f32 %74 = OpFAdd %73 %49 
                                 Private f32* %75 = OpAccessChain %9 %22 
                                                      OpStore %75 %74 
                                        f32_3 %79 = OpLoad %78 
                                        f32_3 %80 = OpFNegate %79 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %80 %82 
                                        f32_4 %84 = OpLoad %76 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %76 %85 
                                        f32_4 %86 = OpLoad %9 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 0 0 
                                        f32_4 %88 = OpLoad %76 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFMul %87 %89 
                                        f32_3 %91 = OpLoad %78 
                                        f32_3 %92 = OpFAdd %90 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpVectorShuffle %93 %92 4 1 5 6 
                                                      OpStore %9 %94 
                                        f32_3 %96 = OpLoad %95 
                                        f32_3 %97 = OpFNegate %96 
                                        f32_3 %98 = OpLoad %28 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %9 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 2 3 
                                       f32_3 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 1 5 6 
                                                      OpStore %9 %105 
                                       f32_3 %106 = OpLoad %28 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 0 0 
                                       f32_3 %108 = OpLoad %95 
                                       f32_3 %109 = OpFMul %107 %108 
                                       f32_4 %110 = OpLoad %76 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 6 3 
                                                      OpStore %76 %111 
                              Uniform f32_4* %113 = OpAccessChain %35 %61 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 3 3 3 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 2 3 
                                       f32_3 %118 = OpFMul %115 %117 
                                       f32_4 %119 = OpLoad %76 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFAdd %118 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %9 %123 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %124 1 1 1 1 
                              Uniform f32_4* %127 = OpAccessChain %35 %126 %61 
                                       f32_4 %128 = OpLoad %127 
                                       f32_4 %129 = OpFMul %125 %128 
                                                      OpStore %76 %129 
                              Uniform f32_4* %130 = OpAccessChain %35 %126 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %132 0 0 0 0 
                                       f32_4 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %76 
                                       f32_4 %136 = OpFAdd %134 %135 
                                                      OpStore %76 %136 
                              Uniform f32_4* %137 = OpAccessChain %35 %126 %126 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpLoad %9 
                                       f32_4 %140 = OpVectorShuffle %139 %139 2 2 2 2 
                                       f32_4 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %76 
                                       f32_4 %143 = OpFAdd %141 %142 
                                                      OpStore %9 %143 
                                       f32_4 %144 = OpLoad %9 
                              Uniform f32_4* %146 = OpAccessChain %35 %126 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_4 %148 = OpFAdd %144 %147 
                                                      OpStore %9 %148 
                                       f32_4 %149 = OpLoad %9 
                                       f32_3 %150 = OpVectorShuffle %149 %149 1 1 1 
                              Uniform f32_4* %151 = OpAccessChain %35 %145 %61 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFMul %150 %153 
                                       f32_4 %155 = OpLoad %76 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %76 %156 
                              Uniform f32_4* %157 = OpAccessChain %35 %145 %37 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %76 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                       f32_3 %165 = OpFAdd %162 %164 
                                       f32_4 %166 = OpLoad %76 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
                                                      OpStore %76 %167 
                              Uniform f32_4* %168 = OpAccessChain %35 %145 %126 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_4 %171 = OpLoad %9 
                                       f32_3 %172 = OpVectorShuffle %171 %171 2 2 2 
                                       f32_3 %173 = OpFMul %170 %172 
                                       f32_4 %174 = OpLoad %76 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFAdd %173 %175 
                                       f32_4 %177 = OpLoad %9 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %9 %178 
                              Uniform f32_4* %179 = OpAccessChain %35 %145 %145 
                                       f32_4 %180 = OpLoad %179 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 3 3 3 
                                       f32_3 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFAdd %184 %186 
                                       f32_4 %188 = OpLoad %9 
                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
                                                      OpStore %9 %189 
                                       f32_4 %190 = OpLoad %9 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                              Uniform f32_4* %193 = OpAccessChain %35 %192 
                                       f32_4 %194 = OpLoad %193 
                                       f32_2 %195 = OpVectorShuffle %194 %194 2 3 
                                       f32_2 %196 = OpFMul %191 %195 
                                       f32_2 %199 = OpFAdd %196 %198 
                                       f32_4 %200 = OpLoad %76 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 2 3 
                                                      OpStore %76 %201 
                                       f32_4 %202 = OpLoad %76 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                                       f32_2 %204 = OpExtInst %1 8 %203 
                                       f32_4 %205 = OpLoad %76 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %76 %206 
                                       f32_4 %207 = OpLoad %9 
                                       f32_2 %208 = OpVectorShuffle %207 %207 0 1 
                              Uniform f32_4* %209 = OpAccessChain %35 %192 
                                       f32_4 %210 = OpLoad %209 
                                       f32_2 %211 = OpVectorShuffle %210 %210 2 3 
                                       f32_2 %212 = OpFMul %208 %211 
                                       f32_4 %213 = OpLoad %76 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                                       f32_2 %215 = OpFNegate %214 
                                       f32_2 %216 = OpFAdd %212 %215 
                                       f32_4 %217 = OpLoad %9 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 2 3 
                                                      OpStore %9 %218 
                                       f32_4 %221 = OpLoad %9 
                                       f32_2 %222 = OpVectorShuffle %221 %221 0 1 
                                       f32_2 %223 = OpFNegate %222 
                                       f32_2 %225 = OpFAdd %223 %224 
                                                      OpStore %220 %225 
                                       f32_4 %227 = OpLoad %9 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                                       f32_2 %231 = OpExtInst %1 37 %228 %230 
                                       f32_4 %232 = OpLoad %226 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 2 3 
                                                      OpStore %226 %233 
                                       f32_4 %234 = OpLoad %226 
                                       f32_2 %235 = OpVectorShuffle %234 %234 0 1 
                                       f32_2 %236 = OpFNegate %235 
                                       f32_4 %237 = OpLoad %226 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                                       f32_2 %239 = OpFMul %236 %238 
                                       f32_2 %240 = OpLoad %220 
                                       f32_2 %241 = OpFAdd %239 %240 
                                                      OpStore %220 %241 
                                       f32_2 %242 = OpLoad %220 
                                       f32_2 %245 = OpFAdd %242 %244 
                                                      OpStore %220 %245 
                                       f32_2 %246 = OpLoad %220 
                                       f32_2 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %226 
                                       f32_4 %251 = OpVectorShuffle %250 %249 4 5 2 3 
                                                      OpStore %226 %251 
                                Private f32* %253 = OpAccessChain %226 %22 
                                         f32 %254 = OpLoad %253 
                                Private f32* %255 = OpAccessChain %252 %44 
                                                      OpStore %255 %254 
                                       f32_4 %256 = OpLoad %9 
                                       f32_2 %257 = OpVectorShuffle %256 %256 0 1 
                                       f32_2 %258 = OpExtInst %1 40 %257 %230 
                                                      OpStore %220 %258 
                                       f32_4 %260 = OpLoad %9 
                                       f32_4 %261 = OpVectorShuffle %260 %260 0 0 1 1 
                                       f32_4 %263 = OpFAdd %261 %262 
                                                      OpStore %259 %263 
                                       f32_2 %264 = OpLoad %220 
                                       f32_2 %265 = OpFNegate %264 
                                       f32_2 %266 = OpLoad %220 
                                       f32_2 %267 = OpFMul %265 %266 
                                       f32_4 %268 = OpLoad %259 
                                       f32_2 %269 = OpVectorShuffle %268 %268 1 3 
                                       f32_2 %270 = OpFAdd %267 %269 
                                                      OpStore %220 %270 
                                       f32_4 %271 = OpLoad %259 
                                       f32_4 %272 = OpVectorShuffle %271 %271 0 0 2 2 
                                       f32_4 %273 = OpLoad %259 
                                       f32_4 %274 = OpVectorShuffle %273 %273 0 0 2 2 
                                       f32_4 %275 = OpFMul %272 %274 
                                                      OpStore %259 %275 
                                       f32_2 %276 = OpLoad %220 
                                       f32_2 %277 = OpFAdd %276 %244 
                                                      OpStore %220 %277 
                                Private f32* %279 = OpAccessChain %220 %22 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFMul %280 %247 
                                Private f32* %283 = OpAccessChain %278 %282 
                                                      OpStore %283 %281 
                                Private f32* %285 = OpAccessChain %220 %44 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFMul %286 %247 
                                Private f32* %288 = OpAccessChain %284 %282 
                                                      OpStore %288 %287 
                                       f32_4 %289 = OpLoad %259 
                                       f32_2 %290 = OpVectorShuffle %289 %289 0 2 
                                       f32_2 %291 = OpFMul %290 %198 
                                       f32_4 %292 = OpLoad %9 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
                                       f32_2 %294 = OpFNegate %293 
                                       f32_2 %295 = OpFAdd %291 %294 
                                                      OpStore %220 %295 
                                       f32_4 %296 = OpLoad %259 
                                       f32_2 %297 = OpVectorShuffle %296 %296 3 1 
                                       f32_2 %300 = OpFMul %297 %299 
                                       f32_4 %301 = OpLoad %252 
                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
                                                      OpStore %252 %302 
                                       f32_2 %303 = OpLoad %220 
                                       f32_2 %304 = OpVectorShuffle %303 %303 1 0 
                                       f32_2 %305 = OpFMul %304 %248 
                                       f32_4 %306 = OpLoad %284 
                                       f32_4 %307 = OpVectorShuffle %306 %305 4 5 2 3 
                                                      OpStore %284 %307 
                                Private f32* %308 = OpAccessChain %284 %44 
                                         f32 %309 = OpLoad %308 
                                Private f32* %310 = OpAccessChain %278 %22 
                                                      OpStore %310 %309 
                                Private f32* %311 = OpAccessChain %252 %282 
                                         f32 %312 = OpLoad %311 
                                Private f32* %313 = OpAccessChain %226 %62 
                                                      OpStore %313 %312 
                                       f32_4 %314 = OpLoad %9 
                                       f32_2 %315 = OpVectorShuffle %314 %314 0 0 
                                       f32_2 %318 = OpFMul %315 %317 
                                       f32_2 %321 = OpFAdd %318 %320 
                                       f32_4 %322 = OpLoad %278 
                                       f32_4 %323 = OpVectorShuffle %322 %321 0 4 2 5 
                                                      OpStore %278 %323 
                                       f32_4 %324 = OpLoad %9 
                                       f32_2 %325 = OpVectorShuffle %324 %324 0 0 
                                       f32_2 %326 = OpFMul %325 %317 
                                       f32_2 %328 = OpFAdd %326 %327 
                                       f32_4 %329 = OpLoad %252 
                                       f32_4 %330 = OpVectorShuffle %329 %328 4 1 5 3 
                                                      OpStore %252 %330 
                                       f32_4 %331 = OpLoad %252 
                                       f32_4 %332 = OpLoad %278 
                                       f32_4 %333 = OpFAdd %331 %332 
                                                      OpStore %259 %333 
                                       f32_4 %334 = OpLoad %252 
                                       f32_4 %335 = OpLoad %259 
                                       f32_4 %336 = OpFDiv %334 %335 
                                                      OpStore %252 %336 
                                       f32_4 %337 = OpLoad %252 
                                       f32_4 %342 = OpFAdd %337 %341 
                                                      OpStore %252 %342 
                                       f32_4 %343 = OpLoad %252 
                                       f32_4 %344 = OpVectorShuffle %343 %343 3 0 1 2 
                              Uniform f32_4* %345 = OpAccessChain %35 %192 
                                       f32_4 %346 = OpLoad %345 
                                       f32_4 %347 = OpVectorShuffle %346 %346 0 0 0 0 
                                       f32_4 %348 = OpFMul %344 %347 
                                                      OpStore %252 %348 
                                       f32_4 %349 = OpLoad %252 
                                       f32_3 %350 = OpVectorShuffle %349 %349 1 2 3 
                                       f32_4 %351 = OpLoad %278 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 1 5 6 
                                                      OpStore %278 %352 
                                       f32_4 %353 = OpLoad %9 
                                       f32_2 %354 = OpVectorShuffle %353 %353 1 1 
                                       f32_2 %355 = OpFMul %354 %317 
                                       f32_2 %356 = OpFAdd %355 %320 
                                       f32_4 %357 = OpLoad %284 
                                       f32_4 %358 = OpVectorShuffle %357 %356 0 4 2 5 
                                                      OpStore %284 %358 
                                       f32_4 %359 = OpLoad %9 
                                       f32_2 %360 = OpVectorShuffle %359 %359 1 1 
                                       f32_2 %361 = OpFMul %360 %317 
                                       f32_2 %362 = OpFAdd %361 %327 
                                       f32_4 %363 = OpLoad %226 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 1 5 3 
                                                      OpStore %226 %364 
                                       f32_4 %365 = OpLoad %226 
                                       f32_4 %366 = OpLoad %284 
                                       f32_4 %367 = OpFAdd %365 %366 
                                                      OpStore %284 %367 
                                       f32_4 %368 = OpLoad %226 
                                       f32_4 %369 = OpLoad %284 
                                       f32_4 %370 = OpFDiv %368 %369 
                                                      OpStore %226 %370 
                                       f32_4 %371 = OpLoad %226 
                                       f32_4 %372 = OpFAdd %371 %341 
                                                      OpStore %226 %372 
                                       f32_4 %373 = OpLoad %226 
                                       f32_4 %374 = OpVectorShuffle %373 %373 0 3 1 2 
                              Uniform f32_4* %375 = OpAccessChain %35 %192 
                                       f32_4 %376 = OpLoad %375 
                                       f32_4 %377 = OpVectorShuffle %376 %376 1 1 1 1 
                                       f32_4 %378 = OpFMul %374 %377 
                                                      OpStore %226 %378 
                                Private f32* %379 = OpAccessChain %226 %22 
                                         f32 %380 = OpLoad %379 
                                Private f32* %381 = OpAccessChain %278 %44 
                                                      OpStore %381 %380 
                                       f32_4 %383 = OpLoad %76 
                                       f32_4 %384 = OpVectorShuffle %383 %383 0 1 0 1 
                              Uniform f32_4* %385 = OpAccessChain %35 %192 
                                       f32_4 %386 = OpLoad %385 
                                       f32_4 %387 = OpVectorShuffle %386 %386 0 1 0 1 
                                       f32_4 %388 = OpFMul %384 %387 
                                       f32_4 %389 = OpLoad %278 
                                       f32_4 %390 = OpVectorShuffle %389 %389 0 1 2 1 
                                       f32_4 %391 = OpFAdd %388 %390 
                                                      OpStore %382 %391 
                                       f32_4 %394 = OpLoad %382 
                                       f32_2 %395 = OpVectorShuffle %394 %394 2 3 
                                Private f32* %396 = OpAccessChain %9 %282 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpCompositeExtract %395 0 
                                         f32 %399 = OpCompositeExtract %395 1 
                                       f32_3 %400 = OpCompositeConstruct %398 %399 %397 
                                                      OpStore %393 %400 
                  read_only Texture2DSampled %406 = OpLoad %405 
                                       f32_3 %407 = OpLoad %393 
                                         f32 %408 = OpCompositeExtract %407 2 
                                         f32 %409 = OpImageSampleDrefExplicitLod %406 %407 %408 Lod %6 
                                                      OpStore %401 %409 
                                       f32_4 %411 = OpLoad %382 
                                       f32_2 %412 = OpVectorShuffle %411 %411 0 1 
                                Private f32* %413 = OpAccessChain %9 %282 
                                         f32 %414 = OpLoad %413 
                                         f32 %415 = OpCompositeExtract %412 0 
                                         f32 %416 = OpCompositeExtract %412 1 
                                       f32_3 %417 = OpCompositeConstruct %415 %416 %414 
                                                      OpStore %410 %417 
                  read_only Texture2DSampled %419 = OpLoad %405 
                                       f32_3 %420 = OpLoad %410 
                                         f32 %421 = OpCompositeExtract %420 2 
                                         f32 %422 = OpImageSampleDrefExplicitLod %419 %420 %421 Lod %6 
                                                      OpStore %418 %422 
                                       f32_4 %423 = OpLoad %259 
                                       f32_4 %424 = OpLoad %284 
                                       f32_4 %425 = OpVectorShuffle %424 %424 0 0 0 0 
                                       f32_4 %426 = OpFMul %423 %425 
                                                      OpStore %382 %426 
                                         f32 %427 = OpLoad %401 
                                Private f32* %428 = OpAccessChain %382 %44 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFMul %427 %429 
                                Private f32* %431 = OpAccessChain %9 %22 
                                                      OpStore %431 %430 
                                Private f32* %432 = OpAccessChain %382 %22 
                                         f32 %433 = OpLoad %432 
                                         f32 %434 = OpLoad %418 
                                         f32 %435 = OpFMul %433 %434 
                                Private f32* %436 = OpAccessChain %9 %22 
                                         f32 %437 = OpLoad %436 
                                         f32 %438 = OpFAdd %435 %437 
                                Private f32* %439 = OpAccessChain %9 %22 
                                                      OpStore %439 %438 
                                       f32_4 %440 = OpLoad %76 
                                       f32_2 %441 = OpVectorShuffle %440 %440 0 1 
                              Uniform f32_4* %442 = OpAccessChain %35 %192 
                                       f32_4 %443 = OpLoad %442 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 1 
                                       f32_2 %445 = OpFMul %441 %444 
                                       f32_4 %446 = OpLoad %278 
                                       f32_2 %447 = OpVectorShuffle %446 %446 3 1 
                                       f32_2 %448 = OpFAdd %445 %447 
                                       f32_3 %449 = OpLoad %28 
                                       f32_3 %450 = OpVectorShuffle %449 %448 3 1 4 
                                                      OpStore %28 %450 
                                Private f32* %451 = OpAccessChain %278 %44 
                                         f32 %452 = OpLoad %451 
                                Private f32* %453 = OpAccessChain %252 %44 
                                                      OpStore %453 %452 
                                       f32_4 %454 = OpLoad %76 
                                       f32_2 %455 = OpVectorShuffle %454 %454 0 1 
                              Uniform f32_4* %456 = OpAccessChain %35 %192 
                                       f32_4 %457 = OpLoad %456 
                                       f32_2 %458 = OpVectorShuffle %457 %457 0 1 
                                       f32_2 %459 = OpFMul %455 %458 
                                       f32_4 %460 = OpLoad %252 
                                       f32_2 %461 = OpVectorShuffle %460 %460 0 1 
                                       f32_2 %462 = OpFAdd %459 %461 
                                                      OpStore %220 %462 
                                       f32_2 %464 = OpLoad %220 
                                Private f32* %465 = OpAccessChain %9 %282 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpCompositeExtract %464 0 
                                         f32 %468 = OpCompositeExtract %464 1 
                                       f32_3 %469 = OpCompositeConstruct %467 %468 %466 
                                                      OpStore %463 %469 
                  read_only Texture2DSampled %471 = OpLoad %405 
                                       f32_3 %472 = OpLoad %463 
                                         f32 %473 = OpCompositeExtract %472 2 
                                         f32 %474 = OpImageSampleDrefExplicitLod %471 %472 %473 Lod %6 
                                                      OpStore %470 %474 
                                       f32_3 %476 = OpLoad %28 
                                       f32_2 %477 = OpVectorShuffle %476 %476 0 2 
                                Private f32* %478 = OpAccessChain %9 %282 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpCompositeExtract %477 0 
                                         f32 %481 = OpCompositeExtract %477 1 
                                       f32_3 %482 = OpCompositeConstruct %480 %481 %479 
                                                      OpStore %475 %482 
                  read_only Texture2DSampled %483 = OpLoad %405 
                                       f32_3 %484 = OpLoad %475 
                                         f32 %485 = OpCompositeExtract %484 2 
                                         f32 %486 = OpImageSampleDrefExplicitLod %483 %484 %485 Lod %6 
                                                      OpStore %418 %486 
                                Private f32* %487 = OpAccessChain %382 %282 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpLoad %418 
                                         f32 %490 = OpFMul %488 %489 
                                Private f32* %491 = OpAccessChain %9 %22 
                                         f32 %492 = OpLoad %491 
                                         f32 %493 = OpFAdd %490 %492 
                                Private f32* %494 = OpAccessChain %9 %22 
                                                      OpStore %494 %493 
                                Private f32* %495 = OpAccessChain %382 %62 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpLoad %470 
                                         f32 %498 = OpFMul %496 %497 
                                Private f32* %499 = OpAccessChain %9 %22 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpFAdd %498 %500 
                                Private f32* %502 = OpAccessChain %9 %22 
                                                      OpStore %502 %501 
                                Private f32* %503 = OpAccessChain %226 %282 
                                         f32 %504 = OpLoad %503 
                                Private f32* %505 = OpAccessChain %278 %44 
                                                      OpStore %505 %504 
                                       f32_4 %506 = OpLoad %76 
                                       f32_4 %507 = OpVectorShuffle %506 %506 0 1 0 1 
                              Uniform f32_4* %508 = OpAccessChain %35 %192 
                                       f32_4 %509 = OpLoad %508 
                                       f32_4 %510 = OpVectorShuffle %509 %509 0 1 0 1 
                                       f32_4 %511 = OpFMul %507 %510 
                                       f32_4 %512 = OpLoad %278 
                                       f32_4 %513 = OpVectorShuffle %512 %512 0 1 2 1 
                                       f32_4 %514 = OpFAdd %511 %513 
                                                      OpStore %382 %514 
                                       f32_4 %516 = OpLoad %382 
                                       f32_2 %517 = OpVectorShuffle %516 %516 0 1 
                                Private f32* %518 = OpAccessChain %9 %282 
                                         f32 %519 = OpLoad %518 
                                         f32 %520 = OpCompositeExtract %517 0 
                                         f32 %521 = OpCompositeExtract %517 1 
                                       f32_3 %522 = OpCompositeConstruct %520 %521 %519 
                                                      OpStore %515 %522 
                  read_only Texture2DSampled %523 = OpLoad %405 
                                       f32_3 %524 = OpLoad %515 
                                         f32 %525 = OpCompositeExtract %524 2 
                                         f32 %526 = OpImageSampleDrefExplicitLod %523 %524 %525 Lod %6 
                                                      OpStore %418 %526 
                                       f32_4 %528 = OpLoad %382 
                                       f32_2 %529 = OpVectorShuffle %528 %528 2 3 
                                Private f32* %530 = OpAccessChain %9 %282 
                                         f32 %531 = OpLoad %530 
                                         f32 %532 = OpCompositeExtract %529 0 
                                         f32 %533 = OpCompositeExtract %529 1 
                                       f32_3 %534 = OpCompositeConstruct %532 %533 %531 
                                                      OpStore %527 %534 
                  read_only Texture2DSampled %536 = OpLoad %405 
                                       f32_3 %537 = OpLoad %527 
                                         f32 %538 = OpCompositeExtract %537 2 
                                         f32 %539 = OpImageSampleDrefExplicitLod %536 %537 %538 Lod %6 
                                                      OpStore %535 %539 
                                       f32_4 %540 = OpLoad %259 
                                       f32_4 %541 = OpLoad %284 
                                       f32_4 %542 = OpVectorShuffle %541 %541 1 1 1 1 
                                       f32_4 %543 = OpFMul %540 %542 
                                                      OpStore %382 %543 
                                Private f32* %544 = OpAccessChain %382 %22 
                                         f32 %545 = OpLoad %544 
                                         f32 %546 = OpLoad %418 
                                         f32 %547 = OpFMul %545 %546 
                                Private f32* %548 = OpAccessChain %9 %22 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %547 %549 
                                Private f32* %551 = OpAccessChain %9 %22 
                                                      OpStore %551 %550 
                                Private f32* %552 = OpAccessChain %382 %44 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpLoad %535 
                                         f32 %555 = OpFMul %553 %554 
                                Private f32* %556 = OpAccessChain %9 %22 
                                         f32 %557 = OpLoad %556 
                                         f32 %558 = OpFAdd %555 %557 
                                Private f32* %559 = OpAccessChain %9 %22 
                                                      OpStore %559 %558 
                                       f32_4 %560 = OpLoad %76 
                                       f32_2 %561 = OpVectorShuffle %560 %560 0 1 
                              Uniform f32_4* %562 = OpAccessChain %35 %192 
                                       f32_4 %563 = OpLoad %562 
                                       f32_2 %564 = OpVectorShuffle %563 %563 0 1 
                                       f32_2 %565 = OpFMul %561 %564 
                                       f32_4 %566 = OpLoad %278 
                                       f32_2 %567 = OpVectorShuffle %566 %566 3 1 
                                       f32_2 %568 = OpFAdd %565 %567 
                                       f32_3 %569 = OpLoad %28 
                                       f32_3 %570 = OpVectorShuffle %569 %568 3 1 4 
                                                      OpStore %28 %570 
                                Private f32* %571 = OpAccessChain %278 %44 
                                         f32 %572 = OpLoad %571 
                                Private f32* %573 = OpAccessChain %252 %282 
                                                      OpStore %573 %572 
                                       f32_4 %574 = OpLoad %76 
                                       f32_2 %575 = OpVectorShuffle %574 %574 0 1 
                              Uniform f32_4* %576 = OpAccessChain %35 %192 
                                       f32_4 %577 = OpLoad %576 
                                       f32_2 %578 = OpVectorShuffle %577 %577 0 1 
                                       f32_2 %579 = OpFMul %575 %578 
                                       f32_4 %580 = OpLoad %252 
                                       f32_2 %581 = OpVectorShuffle %580 %580 0 2 
                                       f32_2 %582 = OpFAdd %579 %581 
                                                      OpStore %220 %582 
                                       f32_2 %584 = OpLoad %220 
                                Private f32* %585 = OpAccessChain %9 %282 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpCompositeExtract %584 0 
                                         f32 %588 = OpCompositeExtract %584 1 
                                       f32_3 %589 = OpCompositeConstruct %587 %588 %586 
                                                      OpStore %583 %589 
                  read_only Texture2DSampled %590 = OpLoad %405 
                                       f32_3 %591 = OpLoad %583 
                                         f32 %592 = OpCompositeExtract %591 2 
                                         f32 %593 = OpImageSampleDrefExplicitLod %590 %591 %592 Lod %6 
                                                      OpStore %470 %593 
                                       f32_3 %595 = OpLoad %28 
                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
                                Private f32* %597 = OpAccessChain %9 %282 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpCompositeExtract %596 0 
                                         f32 %600 = OpCompositeExtract %596 1 
                                       f32_3 %601 = OpCompositeConstruct %599 %600 %598 
                                                      OpStore %594 %601 
                  read_only Texture2DSampled %602 = OpLoad %405 
                                       f32_3 %603 = OpLoad %594 
                                         f32 %604 = OpCompositeExtract %603 2 
                                         f32 %605 = OpImageSampleDrefExplicitLod %602 %603 %604 Lod %6 
                                                      OpStore %418 %605 
                                Private f32* %606 = OpAccessChain %382 %282 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpLoad %418 
                                         f32 %609 = OpFMul %607 %608 
                                Private f32* %610 = OpAccessChain %9 %22 
                                         f32 %611 = OpLoad %610 
                                         f32 %612 = OpFAdd %609 %611 
                                Private f32* %613 = OpAccessChain %9 %22 
                                                      OpStore %613 %612 
                                Private f32* %614 = OpAccessChain %382 %62 
                                         f32 %615 = OpLoad %614 
                                         f32 %616 = OpLoad %470 
                                         f32 %617 = OpFMul %615 %616 
                                Private f32* %618 = OpAccessChain %9 %22 
                                         f32 %619 = OpLoad %618 
                                         f32 %620 = OpFAdd %617 %619 
                                Private f32* %621 = OpAccessChain %9 %22 
                                                      OpStore %621 %620 
                                Private f32* %622 = OpAccessChain %226 %62 
                                         f32 %623 = OpLoad %622 
                                Private f32* %624 = OpAccessChain %278 %44 
                                                      OpStore %624 %623 
                                       f32_4 %625 = OpLoad %76 
                                       f32_4 %626 = OpVectorShuffle %625 %625 0 1 0 1 
                              Uniform f32_4* %627 = OpAccessChain %35 %192 
                                       f32_4 %628 = OpLoad %627 
                                       f32_4 %629 = OpVectorShuffle %628 %628 0 1 0 1 
                                       f32_4 %630 = OpFMul %626 %629 
                                       f32_4 %631 = OpLoad %278 
                                       f32_4 %632 = OpVectorShuffle %631 %631 0 1 2 1 
                                       f32_4 %633 = OpFAdd %630 %632 
                                                      OpStore %382 %633 
                                       f32_4 %635 = OpLoad %382 
                                       f32_2 %636 = OpVectorShuffle %635 %635 0 1 
                                Private f32* %637 = OpAccessChain %9 %282 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpCompositeExtract %636 0 
                                         f32 %640 = OpCompositeExtract %636 1 
                                       f32_3 %641 = OpCompositeConstruct %639 %640 %638 
                                                      OpStore %634 %641 
                  read_only Texture2DSampled %642 = OpLoad %405 
                                       f32_3 %643 = OpLoad %634 
                                         f32 %644 = OpCompositeExtract %643 2 
                                         f32 %645 = OpImageSampleDrefExplicitLod %642 %643 %644 Lod %6 
                                                      OpStore %418 %645 
                                       f32_4 %647 = OpLoad %382 
                                       f32_2 %648 = OpVectorShuffle %647 %647 2 3 
                                Private f32* %649 = OpAccessChain %9 %282 
                                         f32 %650 = OpLoad %649 
                                         f32 %651 = OpCompositeExtract %648 0 
                                         f32 %652 = OpCompositeExtract %648 1 
                                       f32_3 %653 = OpCompositeConstruct %651 %652 %650 
                                                      OpStore %646 %653 
                  read_only Texture2DSampled %654 = OpLoad %405 
                                       f32_3 %655 = OpLoad %646 
                                         f32 %656 = OpCompositeExtract %655 2 
                                         f32 %657 = OpImageSampleDrefExplicitLod %654 %655 %656 Lod %6 
                                                      OpStore %535 %657 
                                       f32_4 %658 = OpLoad %259 
                                       f32_4 %659 = OpLoad %284 
                                       f32_4 %660 = OpVectorShuffle %659 %659 2 2 2 2 
                                       f32_4 %661 = OpFMul %658 %660 
                                                      OpStore %382 %661 
                                       f32_4 %662 = OpLoad %259 
                                       f32_4 %663 = OpLoad %284 
                                       f32_4 %664 = OpVectorShuffle %663 %663 3 3 3 3 
                                       f32_4 %665 = OpFMul %662 %664 
                                                      OpStore %259 %665 
                                Private f32* %666 = OpAccessChain %382 %22 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpLoad %418 
                                         f32 %669 = OpFMul %667 %668 
                                Private f32* %670 = OpAccessChain %9 %22 
                                         f32 %671 = OpLoad %670 
                                         f32 %672 = OpFAdd %669 %671 
                                Private f32* %673 = OpAccessChain %9 %22 
                                                      OpStore %673 %672 
                                Private f32* %674 = OpAccessChain %382 %44 
                                         f32 %675 = OpLoad %674 
                                         f32 %676 = OpLoad %535 
                                         f32 %677 = OpFMul %675 %676 
                                Private f32* %678 = OpAccessChain %9 %22 
                                         f32 %679 = OpLoad %678 
                                         f32 %680 = OpFAdd %677 %679 
                                Private f32* %681 = OpAccessChain %9 %22 
                                                      OpStore %681 %680 
                                       f32_4 %682 = OpLoad %76 
                                       f32_2 %683 = OpVectorShuffle %682 %682 0 1 
                              Uniform f32_4* %684 = OpAccessChain %35 %192 
                                       f32_4 %685 = OpLoad %684 
                                       f32_2 %686 = OpVectorShuffle %685 %685 0 1 
                                       f32_2 %687 = OpFMul %683 %686 
                                       f32_4 %688 = OpLoad %278 
                                       f32_2 %689 = OpVectorShuffle %688 %688 3 1 
                                       f32_2 %690 = OpFAdd %687 %689 
                                       f32_3 %691 = OpLoad %28 
                                       f32_3 %692 = OpVectorShuffle %691 %690 3 1 4 
                                                      OpStore %28 %692 
                                       f32_4 %693 = OpLoad %278 
                                       f32_3 %694 = OpVectorShuffle %693 %693 0 2 3 
                                       f32_4 %695 = OpLoad %226 
                                       f32_4 %696 = OpVectorShuffle %695 %694 4 1 5 6 
                                                      OpStore %226 %696 
                                Private f32* %697 = OpAccessChain %278 %44 
                                         f32 %698 = OpLoad %697 
                                Private f32* %699 = OpAccessChain %252 %62 
                                                      OpStore %699 %698 
                                       f32_4 %700 = OpLoad %76 
                                       f32_2 %701 = OpVectorShuffle %700 %700 0 1 
                              Uniform f32_4* %702 = OpAccessChain %35 %192 
                                       f32_4 %703 = OpLoad %702 
                                       f32_2 %704 = OpVectorShuffle %703 %703 0 1 
                                       f32_2 %705 = OpFMul %701 %704 
                                       f32_4 %706 = OpLoad %252 
                                       f32_2 %707 = OpVectorShuffle %706 %706 0 3 
                                       f32_2 %708 = OpFAdd %705 %707 
                                                      OpStore %220 %708 
                                       f32_2 %710 = OpLoad %220 
                                Private f32* %711 = OpAccessChain %9 %282 
                                         f32 %712 = OpLoad %711 
                                         f32 %713 = OpCompositeExtract %710 0 
                                         f32 %714 = OpCompositeExtract %710 1 
                                       f32_3 %715 = OpCompositeConstruct %713 %714 %712 
                                                      OpStore %709 %715 
                  read_only Texture2DSampled %716 = OpLoad %405 
                                       f32_3 %717 = OpLoad %709 
                                         f32 %718 = OpCompositeExtract %717 2 
                                         f32 %719 = OpImageSampleDrefExplicitLod %716 %717 %718 Lod %6 
                                                      OpStore %470 %719 
                                       f32_3 %721 = OpLoad %28 
                                       f32_2 %722 = OpVectorShuffle %721 %721 0 2 
                                Private f32* %723 = OpAccessChain %9 %282 
                                         f32 %724 = OpLoad %723 
                                         f32 %725 = OpCompositeExtract %722 0 
                                         f32 %726 = OpCompositeExtract %722 1 
                                       f32_3 %727 = OpCompositeConstruct %725 %726 %724 
                                                      OpStore %720 %727 
                  read_only Texture2DSampled %728 = OpLoad %405 
                                       f32_3 %729 = OpLoad %720 
                                         f32 %730 = OpCompositeExtract %729 2 
                                         f32 %731 = OpImageSampleDrefExplicitLod %728 %729 %730 Lod %6 
                                                      OpStore %418 %731 
                                Private f32* %732 = OpAccessChain %382 %282 
                                         f32 %733 = OpLoad %732 
                                         f32 %734 = OpLoad %418 
                                         f32 %735 = OpFMul %733 %734 
                                Private f32* %736 = OpAccessChain %9 %22 
                                         f32 %737 = OpLoad %736 
                                         f32 %738 = OpFAdd %735 %737 
                                Private f32* %739 = OpAccessChain %9 %22 
                                                      OpStore %739 %738 
                                Private f32* %740 = OpAccessChain %382 %62 
                                         f32 %741 = OpLoad %740 
                                         f32 %742 = OpLoad %470 
                                         f32 %743 = OpFMul %741 %742 
                                Private f32* %744 = OpAccessChain %9 %22 
                                         f32 %745 = OpLoad %744 
                                         f32 %746 = OpFAdd %743 %745 
                                Private f32* %747 = OpAccessChain %9 %22 
                                                      OpStore %747 %746 
                                       f32_4 %748 = OpLoad %76 
                                       f32_4 %749 = OpVectorShuffle %748 %748 0 1 0 1 
                              Uniform f32_4* %750 = OpAccessChain %35 %192 
                                       f32_4 %751 = OpLoad %750 
                                       f32_4 %752 = OpVectorShuffle %751 %751 0 1 0 1 
                                       f32_4 %753 = OpFMul %749 %752 
                                       f32_4 %754 = OpLoad %226 
                                       f32_4 %755 = OpVectorShuffle %754 %754 0 1 2 1 
                                       f32_4 %756 = OpFAdd %753 %755 
                                                      OpStore %278 %756 
                                       f32_4 %757 = OpLoad %76 
                                       f32_2 %758 = OpVectorShuffle %757 %757 0 1 
                              Uniform f32_4* %759 = OpAccessChain %35 %192 
                                       f32_4 %760 = OpLoad %759 
                                       f32_2 %761 = OpVectorShuffle %760 %760 0 1 
                                       f32_2 %762 = OpFMul %758 %761 
                                       f32_4 %763 = OpLoad %226 
                                       f32_2 %764 = OpVectorShuffle %763 %763 3 1 
                                       f32_2 %765 = OpFAdd %762 %764 
                                       f32_3 %766 = OpLoad %28 
                                       f32_3 %767 = OpVectorShuffle %766 %765 3 1 4 
                                                      OpStore %28 %767 
                                Private f32* %768 = OpAccessChain %226 %44 
                                         f32 %769 = OpLoad %768 
                                Private f32* %770 = OpAccessChain %252 %44 
                                                      OpStore %770 %769 
                                       f32_4 %771 = OpLoad %76 
                                       f32_2 %772 = OpVectorShuffle %771 %771 0 1 
                              Uniform f32_4* %773 = OpAccessChain %35 %192 
                                       f32_4 %774 = OpLoad %773 
                                       f32_2 %775 = OpVectorShuffle %774 %774 0 1 
                                       f32_2 %776 = OpFMul %772 %775 
                                       f32_4 %777 = OpLoad %252 
                                       f32_2 %778 = OpVectorShuffle %777 %777 0 1 
                                       f32_2 %779 = OpFAdd %776 %778 
                                       f32_4 %780 = OpLoad %76 
                                       f32_4 %781 = OpVectorShuffle %780 %779 4 5 2 3 
                                                      OpStore %76 %781 
                                       f32_4 %783 = OpLoad %76 
                                       f32_2 %784 = OpVectorShuffle %783 %783 0 1 
                                Private f32* %785 = OpAccessChain %9 %282 
                                         f32 %786 = OpLoad %785 
                                         f32 %787 = OpCompositeExtract %784 0 
                                         f32 %788 = OpCompositeExtract %784 1 
                                       f32_3 %789 = OpCompositeConstruct %787 %788 %786 
                                                      OpStore %782 %789 
                  read_only Texture2DSampled %791 = OpLoad %405 
                                       f32_3 %792 = OpLoad %782 
                                         f32 %793 = OpCompositeExtract %792 2 
                                         f32 %794 = OpImageSampleDrefExplicitLod %791 %792 %793 Lod %6 
                                                      OpStore %790 %794 
                                       f32_3 %796 = OpLoad %28 
                                       f32_2 %797 = OpVectorShuffle %796 %796 0 2 
                                Private f32* %798 = OpAccessChain %9 %282 
                                         f32 %799 = OpLoad %798 
                                         f32 %800 = OpCompositeExtract %797 0 
                                         f32 %801 = OpCompositeExtract %797 1 
                                       f32_3 %802 = OpCompositeConstruct %800 %801 %799 
                                                      OpStore %795 %802 
                  read_only Texture2DSampled %803 = OpLoad %405 
                                       f32_3 %804 = OpLoad %795 
                                         f32 %805 = OpCompositeExtract %804 2 
                                         f32 %806 = OpImageSampleDrefExplicitLod %803 %804 %805 Lod %6 
                                                      OpStore %418 %806 
                                       f32_4 %808 = OpLoad %278 
                                       f32_2 %809 = OpVectorShuffle %808 %808 0 1 
                                Private f32* %810 = OpAccessChain %9 %282 
                                         f32 %811 = OpLoad %810 
                                         f32 %812 = OpCompositeExtract %809 0 
                                         f32 %813 = OpCompositeExtract %809 1 
                                       f32_3 %814 = OpCompositeConstruct %812 %813 %811 
                                                      OpStore %807 %814 
                  read_only Texture2DSampled %815 = OpLoad %405 
                                       f32_3 %816 = OpLoad %807 
                                         f32 %817 = OpCompositeExtract %816 2 
                                         f32 %818 = OpImageSampleDrefExplicitLod %815 %816 %817 Lod %6 
                                                      OpStore %535 %818 
                                       f32_4 %820 = OpLoad %278 
                                       f32_2 %821 = OpVectorShuffle %820 %820 2 3 
                                Private f32* %822 = OpAccessChain %9 %282 
                                         f32 %823 = OpLoad %822 
                                         f32 %824 = OpCompositeExtract %821 0 
                                         f32 %825 = OpCompositeExtract %821 1 
                                       f32_3 %826 = OpCompositeConstruct %824 %825 %823 
                                                      OpStore %819 %826 
                  read_only Texture2DSampled %828 = OpLoad %405 
                                       f32_3 %829 = OpLoad %819 
                                         f32 %830 = OpCompositeExtract %829 2 
                                         f32 %831 = OpImageSampleDrefExplicitLod %828 %829 %830 Lod %6 
                                                      OpStore %827 %831 
                                Private f32* %832 = OpAccessChain %259 %22 
                                         f32 %833 = OpLoad %832 
                                         f32 %834 = OpLoad %535 
                                         f32 %835 = OpFMul %833 %834 
                                Private f32* %836 = OpAccessChain %9 %22 
                                         f32 %837 = OpLoad %836 
                                         f32 %838 = OpFAdd %835 %837 
                                Private f32* %839 = OpAccessChain %9 %22 
                                                      OpStore %839 %838 
                                Private f32* %840 = OpAccessChain %259 %44 
                                         f32 %841 = OpLoad %840 
                                         f32 %842 = OpLoad %827 
                                         f32 %843 = OpFMul %841 %842 
                                Private f32* %844 = OpAccessChain %9 %22 
                                         f32 %845 = OpLoad %844 
                                         f32 %846 = OpFAdd %843 %845 
                                Private f32* %847 = OpAccessChain %9 %22 
                                                      OpStore %847 %846 
                                Private f32* %848 = OpAccessChain %259 %282 
                                         f32 %849 = OpLoad %848 
                                         f32 %850 = OpLoad %418 
                                         f32 %851 = OpFMul %849 %850 
                                Private f32* %852 = OpAccessChain %9 %22 
                                         f32 %853 = OpLoad %852 
                                         f32 %854 = OpFAdd %851 %853 
                                Private f32* %855 = OpAccessChain %9 %22 
                                                      OpStore %855 %854 
                                Private f32* %856 = OpAccessChain %259 %62 
                                         f32 %857 = OpLoad %856 
                                         f32 %858 = OpLoad %790 
                                         f32 %859 = OpFMul %857 %858 
                                Private f32* %860 = OpAccessChain %9 %22 
                                         f32 %861 = OpLoad %860 
                                         f32 %862 = OpFAdd %859 %861 
                                Private f32* %863 = OpAccessChain %9 %22 
                                                      OpStore %863 %862 
                                Uniform f32* %866 = OpAccessChain %35 %865 %22 
                                         f32 %867 = OpLoad %866 
                                         f32 %868 = OpFNegate %867 
                                         f32 %869 = OpFAdd %868 %49 
                                                      OpStore %864 %869 
                                       f32_4 %870 = OpLoad %9 
                                       f32_4 %871 = OpVectorShuffle %870 %870 0 0 0 0 
                                         f32 %872 = OpLoad %864 
                                       f32_4 %873 = OpCompositeConstruct %872 %872 %872 %872 
                                       f32_4 %874 = OpFMul %871 %873 
                              Uniform f32_4* %875 = OpAccessChain %35 %865 
                                       f32_4 %876 = OpLoad %875 
                                       f32_4 %877 = OpVectorShuffle %876 %876 0 0 0 0 
                                       f32_4 %878 = OpFAdd %874 %877 
                                                      OpStore %9 %878 
                                       f32_4 %881 = OpLoad %9 
                                                      OpStore %880 %881 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
""
}
}
}
}
SubShader {
 Tags { "ShadowmapFilter" = "PCF_SOFT_FORCE_INV_PROJECTION_IN_PS" }
 Pass {
  Tags { "ShadowmapFilter" = "PCF_SOFT_FORCE_INV_PROJECTION_IN_PS" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 203599
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat10_0;
vec4 u_xlat1;
float u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat10_8;
float u_xlat10_16;
vec2 u_xlat17;
float u_xlat10_17;
float u_xlat10_24;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlatb1 = greaterThanEqual((-u_xlat0.zzzz), _LightSplitsNear);
    u_xlat1 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb1));
    u_xlatb2 = lessThan((-u_xlat0.zzzz), _LightSplitsFar);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat4.xy = u_xlat4.yw * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat3.w = u_xlat4.x;
    u_xlat2.w = u_xlat4.y;
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat0.x = u_xlat10_0 * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat10_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat10_24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat10_16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat10_1 + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 1053
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %1049 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %52 ArrayStride 52 
                                                      OpDecorate %53 ArrayStride 53 
                                                      OpDecorate %55 ArrayStride 55 
                                                      OpMemberDecorate %56 0 Offset 56 
                                                      OpMemberDecorate %56 1 Offset 56 
                                                      OpMemberDecorate %56 2 Offset 56 
                                                      OpMemberDecorate %56 3 Offset 56 
                                                      OpMemberDecorate %56 4 Offset 56 
                                                      OpMemberDecorate %56 5 RelaxedPrecision 
                                                      OpMemberDecorate %56 5 Offset 56 
                                                      OpMemberDecorate %56 6 Offset 56 
                                                      OpDecorate %56 Block 
                                                      OpDecorate %58 DescriptorSet 58 
                                                      OpDecorate %58 Binding 58 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %591 DescriptorSet 591 
                                                      OpDecorate %591 Binding 591 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %617 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %664 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %678 RelaxedPrecision 
                                                      OpDecorate %707 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %719 RelaxedPrecision 
                                                      OpDecorate %725 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %768 RelaxedPrecision 
                                                      OpDecorate %779 RelaxedPrecision 
                                                      OpDecorate %785 RelaxedPrecision 
                                                      OpDecorate %793 RelaxedPrecision 
                                                      OpDecorate %826 RelaxedPrecision 
                                                      OpDecorate %837 RelaxedPrecision 
                                                      OpDecorate %843 RelaxedPrecision 
                                                      OpDecorate %851 RelaxedPrecision 
                                                      OpDecorate %890 RelaxedPrecision 
                                                      OpDecorate %901 RelaxedPrecision 
                                                      OpDecorate %907 RelaxedPrecision 
                                                      OpDecorate %915 RelaxedPrecision 
                                                      OpDecorate %962 RelaxedPrecision 
                                                      OpDecorate %963 RelaxedPrecision 
                                                      OpDecorate %974 RelaxedPrecision 
                                                      OpDecorate %985 RelaxedPrecision 
                                                      OpDecorate %996 RelaxedPrecision 
                                                      OpDecorate %997 RelaxedPrecision 
                                                      OpDecorate %1003 RelaxedPrecision 
                                                      OpDecorate %1011 RelaxedPrecision 
                                                      OpDecorate %1019 RelaxedPrecision 
                                                      OpDecorate %1027 RelaxedPrecision 
                                                      OpDecorate %1033 RelaxedPrecision 
                                                      OpDecorate %1036 RelaxedPrecision 
                                                      OpDecorate %1037 RelaxedPrecision 
                                                      OpDecorate %1038 RelaxedPrecision 
                                                      OpDecorate %1041 RelaxedPrecision 
                                                      OpDecorate %1045 RelaxedPrecision 
                                                      OpDecorate %1046 RelaxedPrecision 
                                                      OpDecorate %1049 RelaxedPrecision 
                                                      OpDecorate %1049 Location 1049 
                                                      OpDecorate %1052 RelaxedPrecision 
                                                      OpDecorate %1052 DescriptorSet 1052 
                                                      OpDecorate %1052 Binding 1052 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                          u32 %31 = OpConstant 2 
                                              %37 = OpTypeVector %6 3 
                                          f32 %40 = OpConstant 3.674022E-40 
                                        f32_3 %41 = OpConstantComposite %40 %40 %40 
                                          f32 %43 = OpConstant 3.674022E-40 
                                        f32_3 %44 = OpConstantComposite %43 %43 %43 
                               Private f32_4* %48 = OpVariable Private 
                                          u32 %51 = OpConstant 4 
                                              %52 = OpTypeArray %7 %51 
                                              %53 = OpTypeArray %7 %51 
                                          u32 %54 = OpConstant 16 
                                              %55 = OpTypeArray %7 %54 
                                              %56 = OpTypeStruct %52 %53 %7 %7 %55 %7 %7 
                                              %57 = OpTypePointer Uniform %56 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4; f32_4;}* %58 = OpVariable Uniform 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                                          i32 %82 = OpConstant 3 
                                              %93 = OpTypeBool 
                                              %94 = OpTypeVector %93 4 
                                              %95 = OpTypePointer Private %94 
                              Private bool_4* %96 = OpVariable Private 
                                         f32 %103 = OpConstant 3.674022E-40 
                                       f32_4 %104 = OpConstantComposite %103 %103 %103 %103 
                                       f32_4 %105 = OpConstantComposite %29 %29 %29 %29 
                             Private bool_4* %109 = OpVariable Private 
                              Private f32_4* %116 = OpVariable Private 
                              Private f32_4* %120 = OpVariable Private 
                                         i32 %150 = OpConstant 4 
                                         i32 %151 = OpConstant 5 
                                         i32 %169 = OpConstant 6 
                                         i32 %181 = OpConstant 7 
                              Private f32_4* %200 = OpVariable Private 
                                         i32 %254 = OpConstant 9 
                                         i32 %261 = OpConstant 8 
                                         i32 %273 = OpConstant 10 
                                         i32 %285 = OpConstant 11 
                                         i32 %309 = OpConstant 13 
                                         i32 %316 = OpConstant 12 
                                         i32 %328 = OpConstant 14 
                                         i32 %340 = OpConstant 15 
                                Private f32* %362 = OpVariable Private 
                                Private f32* %365 = OpVariable Private 
                                         f32 %379 = OpConstant 3.674022E-40 
                                       f32_2 %380 = OpConstantComposite %379 %379 
                                             %401 = OpTypePointer Private %17 
                              Private f32_2* %402 = OpVariable Private 
                                       f32_2 %406 = OpConstantComposite %29 %29 
                                       f32_2 %410 = OpConstantComposite %103 %103 
                                       f32_2 %423 = OpConstantComposite %40 %40 
                                         f32 %426 = OpConstant 3.674022E-40 
                                       f32_2 %427 = OpConstantComposite %426 %426 
                                         u32 %433 = OpConstant 1 
                              Private f32_4* %438 = OpVariable Private 
                                       f32_4 %441 = OpConstantComposite %379 %29 %379 %29 
                              Private f32_4* %457 = OpVariable Private 
                              Private f32_4* %462 = OpVariable Private 
                                         f32 %476 = OpConstant 3.674022E-40 
                                       f32_2 %477 = OpConstantComposite %476 %476 
                                         f32 %491 = OpConstant 3.674022E-40 
                                       f32_2 %492 = OpConstantComposite %491 %426 
                                         f32 %494 = OpConstant 3.674022E-40 
                                       f32_2 %495 = OpConstantComposite %494 %426 
                                       f32_2 %502 = OpConstantComposite %426 %494 
                                         u32 %508 = OpConstant 3 
                                         f32 %520 = OpConstant 3.674022E-40 
                                         f32 %521 = OpConstant 3.674022E-40 
                                         f32 %522 = OpConstant 3.674022E-40 
                                       f32_4 %523 = OpConstantComposite %520 %521 %379 %522 
                              Private f32_4* %561 = OpVariable Private 
                              Private f32_4* %569 = OpVariable Private 
                                             %579 = OpTypePointer Function %37 
                                Private f32* %587 = OpVariable Private 
                                             %588 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %589 = OpTypeSampledImage %588 
                                             %590 = OpTypePointer UniformConstant %589 
 UniformConstant read_only Texture2DSampled* %591 = OpVariable UniformConstant 
                                Private f32* %603 = OpVariable Private 
                                             %608 = OpTypePointer Private %37 
                              Private f32_3* %609 = OpVariable Private 
                                Private f32* %652 = OpVariable Private 
                                Private f32* %718 = OpVariable Private 
                                Private f32* %962 = OpVariable Private 
                                Private f32* %996 = OpVariable Private 
                               Private f32* %1033 = OpVariable Private 
                                            %1034 = OpTypePointer Uniform %6 
                                            %1048 = OpTypePointer Output %7 
                              Output f32_4* %1049 = OpVariable Output 
UniformConstant read_only Texture2DSampled* %1052 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %580 = OpVariable Function 
                             Function f32_3* %596 = OpVariable Function 
                             Function f32_3* %646 = OpVariable Function 
                             Function f32_3* %657 = OpVariable Function 
                             Function f32_3* %700 = OpVariable Function 
                             Function f32_3* %711 = OpVariable Function 
                             Function f32_3* %762 = OpVariable Function 
                             Function f32_3* %772 = OpVariable Function 
                             Function f32_3* %819 = OpVariable Function 
                             Function f32_3* %830 = OpVariable Function 
                             Function f32_3* %884 = OpVariable Function 
                             Function f32_3* %894 = OpVariable Function 
                             Function f32_3* %955 = OpVariable Function 
                             Function f32_3* %967 = OpVariable Function 
                             Function f32_3* %978 = OpVariable Function 
                             Function f32_3* %989 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %26 = OpAccessChain %9 %22 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFNegate %27 
                                          f32 %30 = OpFAdd %28 %29 
                                 Private f32* %32 = OpAccessChain %9 %31 
                                                      OpStore %32 %30 
                                        f32_4 %33 = OpLoad %16 
                                        f32_2 %34 = OpVectorShuffle %33 %33 2 3 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpVectorShuffle %35 %34 4 5 2 3 
                                                      OpStore %9 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %42 = OpFMul %39 %41 
                                        f32_3 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 6 3 
                                                      OpStore %9 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %58 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %50 %64 
                                                      OpStore %48 %65 
                               Uniform f32_4* %66 = OpAccessChain %58 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %48 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %48 %72 
                               Uniform f32_4* %74 = OpAccessChain %58 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %48 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %81 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %58 %60 %82 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %81 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_4 %88 = OpLoad %9 
                                        f32_3 %89 = OpVectorShuffle %88 %88 3 3 3 
                                        f32_3 %90 = OpFDiv %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %9 %92 
                                        f32_4 %97 = OpLoad %9 
                                        f32_4 %98 = OpVectorShuffle %97 %97 2 2 2 2 
                                        f32_4 %99 = OpFNegate %98 
                              Uniform f32_4* %100 = OpAccessChain %58 %73 
                                       f32_4 %101 = OpLoad %100 
                                      bool_4 %102 = OpFOrdGreaterThanEqual %99 %101 
                                                      OpStore %96 %102 
                                      bool_4 %106 = OpLoad %96 
                                       f32_4 %107 = OpSelect %106 %105 %104 
                                       f32_4 %108 = OpExtInst %1 46 %104 %105 %107 
                                                      OpStore %48 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_4 %111 = OpVectorShuffle %110 %110 2 2 2 2 
                                       f32_4 %112 = OpFNegate %111 
                              Uniform f32_4* %113 = OpAccessChain %58 %82 
                                       f32_4 %114 = OpLoad %113 
                                      bool_4 %115 = OpFOrdLessThan %112 %114 
                                                      OpStore %109 %115 
                                      bool_4 %117 = OpLoad %109 
                                       f32_4 %118 = OpSelect %117 %105 %104 
                                       f32_4 %119 = OpExtInst %1 46 %104 %105 %118 
                                                      OpStore %116 %119 
                                       f32_4 %121 = OpLoad %48 
                                       f32_4 %122 = OpLoad %116 
                                       f32_4 %123 = OpFMul %121 %122 
                                                      OpStore %120 %123 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %124 1 1 1 1 
                              Uniform f32_4* %126 = OpAccessChain %58 %61 %61 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpFMul %125 %127 
                                                      OpStore %116 %128 
                              Uniform f32_4* %129 = OpAccessChain %58 %61 %60 
                                       f32_4 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpVectorShuffle %131 %131 0 0 0 0 
                                       f32_4 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %116 
                                       f32_4 %135 = OpFAdd %133 %134 
                                                      OpStore %116 %135 
                              Uniform f32_4* %136 = OpAccessChain %58 %61 %73 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %9 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 2 2 2 
                                       f32_4 %140 = OpFNegate %139 
                                       f32_4 %141 = OpFMul %137 %140 
                                       f32_4 %142 = OpLoad %116 
                                       f32_4 %143 = OpFAdd %141 %142 
                                                      OpStore %9 %143 
                                       f32_4 %144 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %58 %61 %82 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFAdd %144 %146 
                                                      OpStore %9 %147 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 1 1 1 
                              Uniform f32_4* %152 = OpAccessChain %58 %150 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFMul %149 %154 
                                       f32_4 %156 = OpLoad %116 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %116 %157 
                              Uniform f32_4* %158 = OpAccessChain %58 %150 %150 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_4 %161 = OpLoad %9 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 0 0 
                                       f32_3 %163 = OpFMul %160 %162 
                                       f32_4 %164 = OpLoad %116 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFAdd %163 %165 
                                       f32_4 %167 = OpLoad %116 
                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 6 3 
                                                      OpStore %116 %168 
                              Uniform f32_4* %170 = OpAccessChain %58 %150 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_4 %173 = OpLoad %9 
                                       f32_3 %174 = OpVectorShuffle %173 %173 2 2 2 
                                       f32_3 %175 = OpFMul %172 %174 
                                       f32_4 %176 = OpLoad %116 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFAdd %175 %177 
                                       f32_4 %179 = OpLoad %116 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %116 %180 
                              Uniform f32_4* %182 = OpAccessChain %58 %150 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 3 3 3 
                                       f32_3 %187 = OpFMul %184 %186 
                                       f32_4 %188 = OpLoad %116 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpFAdd %187 %189 
                                       f32_4 %191 = OpLoad %116 
                                       f32_4 %192 = OpVectorShuffle %191 %190 4 5 6 3 
                                                      OpStore %116 %192 
                                       f32_4 %193 = OpLoad %120 
                                       f32_3 %194 = OpVectorShuffle %193 %193 1 1 1 
                                       f32_4 %195 = OpLoad %116 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFMul %194 %196 
                                       f32_4 %198 = OpLoad %116 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %116 %199 
                                       f32_4 %201 = OpLoad %9 
                                       f32_3 %202 = OpVectorShuffle %201 %201 1 1 1 
                              Uniform f32_4* %203 = OpAccessChain %58 %150 %61 
                                       f32_4 %204 = OpLoad %203 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFMul %202 %205 
                                       f32_4 %207 = OpLoad %200 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %200 %208 
                              Uniform f32_4* %209 = OpAccessChain %58 %150 %60 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_4 %212 = OpLoad %9 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 0 0 
                                       f32_3 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %200 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFAdd %214 %216 
                                       f32_4 %218 = OpLoad %200 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %200 %219 
                              Uniform f32_4* %220 = OpAccessChain %58 %150 %73 
                                       f32_4 %221 = OpLoad %220 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_4 %223 = OpLoad %9 
                                       f32_3 %224 = OpVectorShuffle %223 %223 2 2 2 
                                       f32_3 %225 = OpFMul %222 %224 
                                       f32_4 %226 = OpLoad %200 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFAdd %225 %227 
                                       f32_4 %229 = OpLoad %200 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %200 %230 
                              Uniform f32_4* %231 = OpAccessChain %58 %150 %82 
                                       f32_4 %232 = OpLoad %231 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 3 3 3 
                                       f32_3 %236 = OpFMul %233 %235 
                                       f32_4 %237 = OpLoad %200 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpFAdd %236 %238 
                                       f32_4 %240 = OpLoad %200 
                                       f32_4 %241 = OpVectorShuffle %240 %239 4 5 6 3 
                                                      OpStore %200 %241 
                                       f32_4 %242 = OpLoad %200 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_4 %244 = OpLoad %120 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 0 0 
                                       f32_3 %246 = OpFMul %243 %245 
                                       f32_4 %247 = OpLoad %116 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpFAdd %246 %248 
                                       f32_4 %250 = OpLoad %116 
                                       f32_4 %251 = OpVectorShuffle %250 %249 4 5 6 3 
                                                      OpStore %116 %251 
                                       f32_4 %252 = OpLoad %9 
                                       f32_3 %253 = OpVectorShuffle %252 %252 1 1 1 
                              Uniform f32_4* %255 = OpAccessChain %58 %150 %254 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpFMul %253 %257 
                                       f32_4 %259 = OpLoad %200 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %200 %260 
                              Uniform f32_4* %262 = OpAccessChain %58 %150 %261 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_4 %265 = OpLoad %9 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 0 0 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_4 %268 = OpLoad %200 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFAdd %267 %269 
                                       f32_4 %271 = OpLoad %200 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %200 %272 
                              Uniform f32_4* %274 = OpAccessChain %58 %150 %273 
                                       f32_4 %275 = OpLoad %274 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_4 %277 = OpLoad %9 
                                       f32_3 %278 = OpVectorShuffle %277 %277 2 2 2 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_4 %280 = OpLoad %200 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpFAdd %279 %281 
                                       f32_4 %283 = OpLoad %200 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %200 %284 
                              Uniform f32_4* %286 = OpAccessChain %58 %150 %285 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_4 %289 = OpLoad %9 
                                       f32_3 %290 = OpVectorShuffle %289 %289 3 3 3 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_4 %292 = OpLoad %200 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %200 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %200 %296 
                                       f32_4 %297 = OpLoad %200 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_4 %299 = OpLoad %120 
                                       f32_3 %300 = OpVectorShuffle %299 %299 2 2 2 
                                       f32_3 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %116 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_3 %304 = OpFAdd %301 %303 
                                       f32_4 %305 = OpLoad %116 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
                                                      OpStore %116 %306 
                                       f32_4 %307 = OpLoad %9 
                                       f32_3 %308 = OpVectorShuffle %307 %307 1 1 1 
                              Uniform f32_4* %310 = OpAccessChain %58 %150 %309 
                                       f32_4 %311 = OpLoad %310 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %313 = OpFMul %308 %312 
                                       f32_4 %314 = OpLoad %200 
                                       f32_4 %315 = OpVectorShuffle %314 %313 4 5 6 3 
                                                      OpStore %200 %315 
                              Uniform f32_4* %317 = OpAccessChain %58 %150 %316 
                                       f32_4 %318 = OpLoad %317 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_4 %320 = OpLoad %9 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 0 0 
                                       f32_3 %322 = OpFMul %319 %321 
                                       f32_4 %323 = OpLoad %200 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                                       f32_3 %325 = OpFAdd %322 %324 
                                       f32_4 %326 = OpLoad %200 
                                       f32_4 %327 = OpVectorShuffle %326 %325 4 5 6 3 
                                                      OpStore %200 %327 
                              Uniform f32_4* %329 = OpAccessChain %58 %150 %328 
                                       f32_4 %330 = OpLoad %329 
                                       f32_3 %331 = OpVectorShuffle %330 %330 0 1 2 
                                       f32_4 %332 = OpLoad %9 
                                       f32_3 %333 = OpVectorShuffle %332 %332 2 2 2 
                                       f32_3 %334 = OpFMul %331 %333 
                                       f32_4 %335 = OpLoad %200 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                       f32_3 %337 = OpFAdd %334 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_4 %339 = OpVectorShuffle %338 %337 4 5 6 3 
                                                      OpStore %9 %339 
                              Uniform f32_4* %341 = OpAccessChain %58 %150 %340 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_4 %344 = OpLoad %9 
                                       f32_3 %345 = OpVectorShuffle %344 %344 3 3 3 
                                       f32_3 %346 = OpFMul %343 %345 
                                       f32_4 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_3 %349 = OpFAdd %346 %348 
                                       f32_4 %350 = OpLoad %9 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %9 %351 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_4 %354 = OpLoad %120 
                                       f32_3 %355 = OpVectorShuffle %354 %354 3 3 3 
                                       f32_3 %356 = OpFMul %353 %355 
                                       f32_4 %357 = OpLoad %116 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %359 = OpFAdd %356 %358 
                                       f32_4 %360 = OpLoad %9 
                                       f32_4 %361 = OpVectorShuffle %360 %359 4 5 6 3 
                                                      OpStore %9 %361 
                                       f32_4 %363 = OpLoad %120 
                                         f32 %364 = OpDot %363 %105 
                                                      OpStore %362 %364 
                                         f32 %366 = OpLoad %362 
                                         f32 %367 = OpFNegate %366 
                                Private f32* %368 = OpAccessChain %9 %31 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFAdd %367 %369 
                                                      OpStore %365 %370 
                                         f32 %371 = OpLoad %365 
                                         f32 %372 = OpFAdd %371 %29 
                                                      OpStore %365 %372 
                                       f32_4 %373 = OpLoad %9 
                                       f32_2 %374 = OpVectorShuffle %373 %373 0 1 
                              Uniform f32_4* %375 = OpAccessChain %58 %169 
                                       f32_4 %376 = OpLoad %375 
                                       f32_2 %377 = OpVectorShuffle %376 %376 2 3 
                                       f32_2 %378 = OpFMul %374 %377 
                                       f32_2 %381 = OpFAdd %378 %380 
                                       f32_4 %382 = OpLoad %116 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 2 3 
                                                      OpStore %116 %383 
                                       f32_4 %384 = OpLoad %116 
                                       f32_2 %385 = OpVectorShuffle %384 %384 0 1 
                                       f32_2 %386 = OpExtInst %1 8 %385 
                                       f32_4 %387 = OpLoad %116 
                                       f32_4 %388 = OpVectorShuffle %387 %386 4 5 2 3 
                                                      OpStore %116 %388 
                                       f32_4 %389 = OpLoad %9 
                                       f32_2 %390 = OpVectorShuffle %389 %389 0 1 
                              Uniform f32_4* %391 = OpAccessChain %58 %169 
                                       f32_4 %392 = OpLoad %391 
                                       f32_2 %393 = OpVectorShuffle %392 %392 2 3 
                                       f32_2 %394 = OpFMul %390 %393 
                                       f32_4 %395 = OpLoad %116 
                                       f32_2 %396 = OpVectorShuffle %395 %395 0 1 
                                       f32_2 %397 = OpFNegate %396 
                                       f32_2 %398 = OpFAdd %394 %397 
                                       f32_4 %399 = OpLoad %9 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 2 3 
                                                      OpStore %9 %400 
                                       f32_4 %403 = OpLoad %9 
                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
                                       f32_2 %405 = OpFNegate %404 
                                       f32_2 %407 = OpFAdd %405 %406 
                                                      OpStore %402 %407 
                                       f32_4 %408 = OpLoad %9 
                                       f32_2 %409 = OpVectorShuffle %408 %408 0 1 
                                       f32_2 %411 = OpExtInst %1 37 %409 %410 
                                       f32_4 %412 = OpLoad %200 
                                       f32_4 %413 = OpVectorShuffle %412 %411 4 5 2 3 
                                                      OpStore %200 %413 
                                       f32_4 %414 = OpLoad %200 
                                       f32_2 %415 = OpVectorShuffle %414 %414 0 1 
                                       f32_2 %416 = OpFNegate %415 
                                       f32_4 %417 = OpLoad %200 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %419 = OpFMul %416 %418 
                                       f32_2 %420 = OpLoad %402 
                                       f32_2 %421 = OpFAdd %419 %420 
                                                      OpStore %402 %421 
                                       f32_2 %422 = OpLoad %402 
                                       f32_2 %424 = OpFAdd %422 %423 
                                                      OpStore %402 %424 
                                       f32_2 %425 = OpLoad %402 
                                       f32_2 %428 = OpFMul %425 %427 
                                       f32_4 %429 = OpLoad %48 
                                       f32_4 %430 = OpVectorShuffle %429 %428 4 5 2 3 
                                                      OpStore %48 %430 
                                Private f32* %431 = OpAccessChain %48 %22 
                                         f32 %432 = OpLoad %431 
                                Private f32* %434 = OpAccessChain %200 %433 
                                                      OpStore %434 %432 
                                       f32_4 %435 = OpLoad %9 
                                       f32_2 %436 = OpVectorShuffle %435 %435 0 1 
                                       f32_2 %437 = OpExtInst %1 40 %436 %410 
                                                      OpStore %402 %437 
                                       f32_4 %439 = OpLoad %9 
                                       f32_4 %440 = OpVectorShuffle %439 %439 0 0 1 1 
                                       f32_4 %442 = OpFAdd %440 %441 
                                                      OpStore %438 %442 
                                       f32_2 %443 = OpLoad %402 
                                       f32_2 %444 = OpFNegate %443 
                                       f32_2 %445 = OpLoad %402 
                                       f32_2 %446 = OpFMul %444 %445 
                                       f32_4 %447 = OpLoad %438 
                                       f32_2 %448 = OpVectorShuffle %447 %447 1 3 
                                       f32_2 %449 = OpFAdd %446 %448 
                                                      OpStore %402 %449 
                                       f32_4 %450 = OpLoad %438 
                                       f32_4 %451 = OpVectorShuffle %450 %450 0 0 2 2 
                                       f32_4 %452 = OpLoad %438 
                                       f32_4 %453 = OpVectorShuffle %452 %452 0 0 2 2 
                                       f32_4 %454 = OpFMul %451 %453 
                                                      OpStore %438 %454 
                                       f32_2 %455 = OpLoad %402 
                                       f32_2 %456 = OpFAdd %455 %423 
                                                      OpStore %402 %456 
                                Private f32* %458 = OpAccessChain %402 %22 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFMul %459 %426 
                                Private f32* %461 = OpAccessChain %457 %31 
                                                      OpStore %461 %460 
                                Private f32* %463 = OpAccessChain %402 %433 
                                         f32 %464 = OpLoad %463 
                                         f32 %465 = OpFMul %464 %426 
                                Private f32* %466 = OpAccessChain %462 %31 
                                                      OpStore %466 %465 
                                       f32_4 %467 = OpLoad %438 
                                       f32_2 %468 = OpVectorShuffle %467 %467 0 2 
                                       f32_2 %469 = OpFMul %468 %380 
                                       f32_4 %470 = OpLoad %9 
                                       f32_2 %471 = OpVectorShuffle %470 %470 0 1 
                                       f32_2 %472 = OpFNegate %471 
                                       f32_2 %473 = OpFAdd %469 %472 
                                                      OpStore %402 %473 
                                       f32_4 %474 = OpLoad %438 
                                       f32_2 %475 = OpVectorShuffle %474 %474 1 3 
                                       f32_2 %478 = OpFMul %475 %477 
                                       f32_4 %479 = OpLoad %438 
                                       f32_4 %480 = OpVectorShuffle %479 %478 4 5 2 3 
                                                      OpStore %438 %480 
                                       f32_2 %481 = OpLoad %402 
                                       f32_2 %482 = OpVectorShuffle %481 %481 1 0 
                                       f32_2 %483 = OpFMul %482 %427 
                                       f32_4 %484 = OpLoad %462 
                                       f32_4 %485 = OpVectorShuffle %484 %483 4 5 2 3 
                                                      OpStore %462 %485 
                                Private f32* %486 = OpAccessChain %462 %433 
                                         f32 %487 = OpLoad %486 
                                Private f32* %488 = OpAccessChain %457 %22 
                                                      OpStore %488 %487 
                                       f32_4 %489 = OpLoad %9 
                                       f32_2 %490 = OpVectorShuffle %489 %489 0 0 
                                       f32_2 %493 = OpFMul %490 %492 
                                       f32_2 %496 = OpFAdd %493 %495 
                                       f32_4 %497 = OpLoad %457 
                                       f32_4 %498 = OpVectorShuffle %497 %496 0 4 2 5 
                                                      OpStore %457 %498 
                                       f32_4 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 0 
                                       f32_2 %501 = OpFMul %500 %492 
                                       f32_2 %503 = OpFAdd %501 %502 
                                       f32_4 %504 = OpLoad %200 
                                       f32_4 %505 = OpVectorShuffle %504 %503 4 1 5 3 
                                                      OpStore %200 %505 
                                Private f32* %506 = OpAccessChain %438 %22 
                                         f32 %507 = OpLoad %506 
                                Private f32* %509 = OpAccessChain %200 %508 
                                                      OpStore %509 %507 
                                Private f32* %510 = OpAccessChain %438 %433 
                                         f32 %511 = OpLoad %510 
                                Private f32* %512 = OpAccessChain %48 %508 
                                                      OpStore %512 %511 
                                       f32_4 %513 = OpLoad %200 
                                       f32_4 %514 = OpLoad %457 
                                       f32_4 %515 = OpFAdd %513 %514 
                                                      OpStore %438 %515 
                                       f32_4 %516 = OpLoad %200 
                                       f32_4 %517 = OpLoad %438 
                                       f32_4 %518 = OpFDiv %516 %517 
                                                      OpStore %200 %518 
                                       f32_4 %519 = OpLoad %200 
                                       f32_4 %524 = OpFAdd %519 %523 
                                                      OpStore %200 %524 
                                       f32_4 %525 = OpLoad %200 
                                       f32_4 %526 = OpVectorShuffle %525 %525 3 0 1 2 
                              Uniform f32_4* %527 = OpAccessChain %58 %169 
                                       f32_4 %528 = OpLoad %527 
                                       f32_4 %529 = OpVectorShuffle %528 %528 0 0 0 0 
                                       f32_4 %530 = OpFMul %526 %529 
                                                      OpStore %200 %530 
                                       f32_4 %531 = OpLoad %9 
                                       f32_2 %532 = OpVectorShuffle %531 %531 1 1 
                                       f32_2 %533 = OpFMul %532 %492 
                                       f32_2 %534 = OpFAdd %533 %495 
                                       f32_4 %535 = OpLoad %462 
                                       f32_4 %536 = OpVectorShuffle %535 %534 0 4 2 5 
                                                      OpStore %462 %536 
                                       f32_4 %537 = OpLoad %9 
                                       f32_2 %538 = OpVectorShuffle %537 %537 1 1 
                                       f32_2 %539 = OpFMul %538 %492 
                                       f32_2 %540 = OpFAdd %539 %502 
                                       f32_4 %541 = OpLoad %48 
                                       f32_4 %542 = OpVectorShuffle %541 %540 4 1 5 3 
                                                      OpStore %48 %542 
                                       f32_4 %543 = OpLoad %48 
                                       f32_4 %544 = OpLoad %462 
                                       f32_4 %545 = OpFAdd %543 %544 
                                                      OpStore %457 %545 
                                       f32_4 %546 = OpLoad %48 
                                       f32_4 %547 = OpLoad %457 
                                       f32_4 %548 = OpFDiv %546 %547 
                                                      OpStore %48 %548 
                                       f32_4 %549 = OpLoad %48 
                                       f32_4 %550 = OpFAdd %549 %523 
                                                      OpStore %48 %550 
                                       f32_4 %551 = OpLoad %48 
                                       f32_4 %552 = OpVectorShuffle %551 %551 0 3 1 2 
                              Uniform f32_4* %553 = OpAccessChain %58 %169 
                                       f32_4 %554 = OpLoad %553 
                                       f32_4 %555 = OpVectorShuffle %554 %554 1 1 1 1 
                                       f32_4 %556 = OpFMul %552 %555 
                                                      OpStore %48 %556 
                                       f32_4 %557 = OpLoad %438 
                                       f32_4 %558 = OpLoad %457 
                                       f32_4 %559 = OpVectorShuffle %558 %558 0 0 0 0 
                                       f32_4 %560 = OpFMul %557 %559 
                                                      OpStore %462 %560 
                                       f32_4 %562 = OpLoad %200 
                                       f32_3 %563 = OpVectorShuffle %562 %562 1 2 3 
                                       f32_4 %564 = OpLoad %561 
                                       f32_4 %565 = OpVectorShuffle %564 %563 4 1 5 6 
                                                      OpStore %561 %565 
                                Private f32* %566 = OpAccessChain %48 %22 
                                         f32 %567 = OpLoad %566 
                                Private f32* %568 = OpAccessChain %561 %433 
                                                      OpStore %568 %567 
                                       f32_4 %570 = OpLoad %116 
                                       f32_4 %571 = OpVectorShuffle %570 %570 0 1 0 1 
                              Uniform f32_4* %572 = OpAccessChain %58 %169 
                                       f32_4 %573 = OpLoad %572 
                                       f32_4 %574 = OpVectorShuffle %573 %573 0 1 0 1 
                                       f32_4 %575 = OpFMul %571 %574 
                                       f32_4 %576 = OpLoad %561 
                                       f32_4 %577 = OpVectorShuffle %576 %576 0 1 2 1 
                                       f32_4 %578 = OpFAdd %575 %577 
                                                      OpStore %569 %578 
                                       f32_4 %581 = OpLoad %569 
                                       f32_2 %582 = OpVectorShuffle %581 %581 0 1 
                                         f32 %583 = OpLoad %365 
                                         f32 %584 = OpCompositeExtract %582 0 
                                         f32 %585 = OpCompositeExtract %582 1 
                                       f32_3 %586 = OpCompositeConstruct %584 %585 %583 
                                                      OpStore %580 %586 
                  read_only Texture2DSampled %592 = OpLoad %591 
                                       f32_3 %593 = OpLoad %580 
                                         f32 %594 = OpCompositeExtract %593 2 
                                         f32 %595 = OpImageSampleDrefExplicitLod %592 %593 %594 Lod %6 
                                                      OpStore %587 %595 
                                       f32_4 %597 = OpLoad %569 
                                       f32_2 %598 = OpVectorShuffle %597 %597 2 3 
                                         f32 %599 = OpLoad %365 
                                         f32 %600 = OpCompositeExtract %598 0 
                                         f32 %601 = OpCompositeExtract %598 1 
                                       f32_3 %602 = OpCompositeConstruct %600 %601 %599 
                                                      OpStore %596 %602 
                  read_only Texture2DSampled %604 = OpLoad %591 
                                       f32_3 %605 = OpLoad %596 
                                         f32 %606 = OpCompositeExtract %605 2 
                                         f32 %607 = OpImageSampleDrefExplicitLod %604 %605 %606 Lod %6 
                                                      OpStore %603 %607 
                                         f32 %610 = OpLoad %603 
                                Private f32* %611 = OpAccessChain %462 %433 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFMul %610 %612 
                                Private f32* %614 = OpAccessChain %609 %22 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %462 %22 
                                         f32 %616 = OpLoad %615 
                                         f32 %617 = OpLoad %587 
                                         f32 %618 = OpFMul %616 %617 
                                Private f32* %619 = OpAccessChain %609 %22 
                                         f32 %620 = OpLoad %619 
                                         f32 %621 = OpFAdd %618 %620 
                                Private f32* %622 = OpAccessChain %9 %22 
                                                      OpStore %622 %621 
                                       f32_4 %623 = OpLoad %116 
                                       f32_2 %624 = OpVectorShuffle %623 %623 0 1 
                              Uniform f32_4* %625 = OpAccessChain %58 %169 
                                       f32_4 %626 = OpLoad %625 
                                       f32_2 %627 = OpVectorShuffle %626 %626 0 1 
                                       f32_2 %628 = OpFMul %624 %627 
                                       f32_4 %629 = OpLoad %561 
                                       f32_2 %630 = OpVectorShuffle %629 %629 3 1 
                                       f32_2 %631 = OpFAdd %628 %630 
                                       f32_3 %632 = OpLoad %609 
                                       f32_3 %633 = OpVectorShuffle %632 %631 3 1 4 
                                                      OpStore %609 %633 
                                Private f32* %634 = OpAccessChain %561 %433 
                                         f32 %635 = OpLoad %634 
                                Private f32* %636 = OpAccessChain %200 %433 
                                                      OpStore %636 %635 
                                       f32_4 %637 = OpLoad %116 
                                       f32_2 %638 = OpVectorShuffle %637 %637 0 1 
                              Uniform f32_4* %639 = OpAccessChain %58 %169 
                                       f32_4 %640 = OpLoad %639 
                                       f32_2 %641 = OpVectorShuffle %640 %640 0 1 
                                       f32_2 %642 = OpFMul %638 %641 
                                       f32_4 %643 = OpLoad %200 
                                       f32_2 %644 = OpVectorShuffle %643 %643 0 1 
                                       f32_2 %645 = OpFAdd %642 %644 
                                                      OpStore %402 %645 
                                       f32_2 %647 = OpLoad %402 
                                         f32 %648 = OpLoad %365 
                                         f32 %649 = OpCompositeExtract %647 0 
                                         f32 %650 = OpCompositeExtract %647 1 
                                       f32_3 %651 = OpCompositeConstruct %649 %650 %648 
                                                      OpStore %646 %651 
                  read_only Texture2DSampled %653 = OpLoad %591 
                                       f32_3 %654 = OpLoad %646 
                                         f32 %655 = OpCompositeExtract %654 2 
                                         f32 %656 = OpImageSampleDrefExplicitLod %653 %654 %655 Lod %6 
                                                      OpStore %652 %656 
                                       f32_3 %658 = OpLoad %609 
                                       f32_2 %659 = OpVectorShuffle %658 %658 0 2 
                                         f32 %660 = OpLoad %365 
                                         f32 %661 = OpCompositeExtract %659 0 
                                         f32 %662 = OpCompositeExtract %659 1 
                                       f32_3 %663 = OpCompositeConstruct %661 %662 %660 
                                                      OpStore %657 %663 
                  read_only Texture2DSampled %664 = OpLoad %591 
                                       f32_3 %665 = OpLoad %657 
                                         f32 %666 = OpCompositeExtract %665 2 
                                         f32 %667 = OpImageSampleDrefExplicitLod %664 %665 %666 Lod %6 
                                                      OpStore %603 %667 
                                Private f32* %668 = OpAccessChain %462 %31 
                                         f32 %669 = OpLoad %668 
                                         f32 %670 = OpLoad %603 
                                         f32 %671 = OpFMul %669 %670 
                                Private f32* %672 = OpAccessChain %9 %22 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFAdd %671 %673 
                                Private f32* %675 = OpAccessChain %9 %22 
                                                      OpStore %675 %674 
                                Private f32* %676 = OpAccessChain %462 %508 
                                         f32 %677 = OpLoad %676 
                                         f32 %678 = OpLoad %652 
                                         f32 %679 = OpFMul %677 %678 
                                Private f32* %680 = OpAccessChain %9 %22 
                                         f32 %681 = OpLoad %680 
                                         f32 %682 = OpFAdd %679 %681 
                                Private f32* %683 = OpAccessChain %9 %22 
                                                      OpStore %683 %682 
                                       f32_4 %684 = OpLoad %438 
                                       f32_4 %685 = OpLoad %457 
                                       f32_4 %686 = OpVectorShuffle %685 %685 1 1 1 1 
                                       f32_4 %687 = OpFMul %684 %686 
                                                      OpStore %462 %687 
                                Private f32* %688 = OpAccessChain %48 %31 
                                         f32 %689 = OpLoad %688 
                                Private f32* %690 = OpAccessChain %561 %433 
                                                      OpStore %690 %689 
                                       f32_4 %691 = OpLoad %116 
                                       f32_4 %692 = OpVectorShuffle %691 %691 0 1 0 1 
                              Uniform f32_4* %693 = OpAccessChain %58 %169 
                                       f32_4 %694 = OpLoad %693 
                                       f32_4 %695 = OpVectorShuffle %694 %694 0 1 0 1 
                                       f32_4 %696 = OpFMul %692 %695 
                                       f32_4 %697 = OpLoad %561 
                                       f32_4 %698 = OpVectorShuffle %697 %697 0 1 2 1 
                                       f32_4 %699 = OpFAdd %696 %698 
                                                      OpStore %569 %699 
                                       f32_4 %701 = OpLoad %569 
                                       f32_2 %702 = OpVectorShuffle %701 %701 0 1 
                                         f32 %703 = OpLoad %365 
                                         f32 %704 = OpCompositeExtract %702 0 
                                         f32 %705 = OpCompositeExtract %702 1 
                                       f32_3 %706 = OpCompositeConstruct %704 %705 %703 
                                                      OpStore %700 %706 
                  read_only Texture2DSampled %707 = OpLoad %591 
                                       f32_3 %708 = OpLoad %700 
                                         f32 %709 = OpCompositeExtract %708 2 
                                         f32 %710 = OpImageSampleDrefExplicitLod %707 %708 %709 Lod %6 
                                                      OpStore %603 %710 
                                       f32_4 %712 = OpLoad %569 
                                       f32_2 %713 = OpVectorShuffle %712 %712 2 3 
                                         f32 %714 = OpLoad %365 
                                         f32 %715 = OpCompositeExtract %713 0 
                                         f32 %716 = OpCompositeExtract %713 1 
                                       f32_3 %717 = OpCompositeConstruct %715 %716 %714 
                                                      OpStore %711 %717 
                  read_only Texture2DSampled %719 = OpLoad %591 
                                       f32_3 %720 = OpLoad %711 
                                         f32 %721 = OpCompositeExtract %720 2 
                                         f32 %722 = OpImageSampleDrefExplicitLod %719 %720 %721 Lod %6 
                                                      OpStore %718 %722 
                                Private f32* %723 = OpAccessChain %462 %22 
                                         f32 %724 = OpLoad %723 
                                         f32 %725 = OpLoad %603 
                                         f32 %726 = OpFMul %724 %725 
                                Private f32* %727 = OpAccessChain %9 %22 
                                         f32 %728 = OpLoad %727 
                                         f32 %729 = OpFAdd %726 %728 
                                Private f32* %730 = OpAccessChain %9 %22 
                                                      OpStore %730 %729 
                                Private f32* %731 = OpAccessChain %462 %433 
                                         f32 %732 = OpLoad %731 
                                         f32 %733 = OpLoad %718 
                                         f32 %734 = OpFMul %732 %733 
                                Private f32* %735 = OpAccessChain %9 %22 
                                         f32 %736 = OpLoad %735 
                                         f32 %737 = OpFAdd %734 %736 
                                Private f32* %738 = OpAccessChain %9 %22 
                                                      OpStore %738 %737 
                                       f32_4 %739 = OpLoad %116 
                                       f32_2 %740 = OpVectorShuffle %739 %739 0 1 
                              Uniform f32_4* %741 = OpAccessChain %58 %169 
                                       f32_4 %742 = OpLoad %741 
                                       f32_2 %743 = OpVectorShuffle %742 %742 0 1 
                                       f32_2 %744 = OpFMul %740 %743 
                                       f32_4 %745 = OpLoad %561 
                                       f32_2 %746 = OpVectorShuffle %745 %745 3 1 
                                       f32_2 %747 = OpFAdd %744 %746 
                                       f32_3 %748 = OpLoad %609 
                                       f32_3 %749 = OpVectorShuffle %748 %747 3 1 4 
                                                      OpStore %609 %749 
                                Private f32* %750 = OpAccessChain %561 %433 
                                         f32 %751 = OpLoad %750 
                                Private f32* %752 = OpAccessChain %200 %31 
                                                      OpStore %752 %751 
                                       f32_4 %753 = OpLoad %116 
                                       f32_2 %754 = OpVectorShuffle %753 %753 0 1 
                              Uniform f32_4* %755 = OpAccessChain %58 %169 
                                       f32_4 %756 = OpLoad %755 
                                       f32_2 %757 = OpVectorShuffle %756 %756 0 1 
                                       f32_2 %758 = OpFMul %754 %757 
                                       f32_4 %759 = OpLoad %200 
                                       f32_2 %760 = OpVectorShuffle %759 %759 0 2 
                                       f32_2 %761 = OpFAdd %758 %760 
                                                      OpStore %402 %761 
                                       f32_2 %763 = OpLoad %402 
                                         f32 %764 = OpLoad %365 
                                         f32 %765 = OpCompositeExtract %763 0 
                                         f32 %766 = OpCompositeExtract %763 1 
                                       f32_3 %767 = OpCompositeConstruct %765 %766 %764 
                                                      OpStore %762 %767 
                  read_only Texture2DSampled %768 = OpLoad %591 
                                       f32_3 %769 = OpLoad %762 
                                         f32 %770 = OpCompositeExtract %769 2 
                                         f32 %771 = OpImageSampleDrefExplicitLod %768 %769 %770 Lod %6 
                                                      OpStore %652 %771 
                                       f32_3 %773 = OpLoad %609 
                                       f32_2 %774 = OpVectorShuffle %773 %773 0 2 
                                         f32 %775 = OpLoad %365 
                                         f32 %776 = OpCompositeExtract %774 0 
                                         f32 %777 = OpCompositeExtract %774 1 
                                       f32_3 %778 = OpCompositeConstruct %776 %777 %775 
                                                      OpStore %772 %778 
                  read_only Texture2DSampled %779 = OpLoad %591 
                                       f32_3 %780 = OpLoad %772 
                                         f32 %781 = OpCompositeExtract %780 2 
                                         f32 %782 = OpImageSampleDrefExplicitLod %779 %780 %781 Lod %6 
                                                      OpStore %603 %782 
                                Private f32* %783 = OpAccessChain %462 %31 
                                         f32 %784 = OpLoad %783 
                                         f32 %785 = OpLoad %603 
                                         f32 %786 = OpFMul %784 %785 
                                Private f32* %787 = OpAccessChain %9 %22 
                                         f32 %788 = OpLoad %787 
                                         f32 %789 = OpFAdd %786 %788 
                                Private f32* %790 = OpAccessChain %9 %22 
                                                      OpStore %790 %789 
                                Private f32* %791 = OpAccessChain %462 %508 
                                         f32 %792 = OpLoad %791 
                                         f32 %793 = OpLoad %652 
                                         f32 %794 = OpFMul %792 %793 
                                Private f32* %795 = OpAccessChain %9 %22 
                                         f32 %796 = OpLoad %795 
                                         f32 %797 = OpFAdd %794 %796 
                                Private f32* %798 = OpAccessChain %9 %22 
                                                      OpStore %798 %797 
                                       f32_4 %799 = OpLoad %438 
                                       f32_4 %800 = OpLoad %457 
                                       f32_4 %801 = OpVectorShuffle %800 %800 2 2 2 2 
                                       f32_4 %802 = OpFMul %799 %801 
                                                      OpStore %462 %802 
                                       f32_4 %803 = OpLoad %438 
                                       f32_4 %804 = OpLoad %457 
                                       f32_4 %805 = OpVectorShuffle %804 %804 3 3 3 3 
                                       f32_4 %806 = OpFMul %803 %805 
                                                      OpStore %438 %806 
                                Private f32* %807 = OpAccessChain %48 %508 
                                         f32 %808 = OpLoad %807 
                                Private f32* %809 = OpAccessChain %561 %433 
                                                      OpStore %809 %808 
                                       f32_4 %810 = OpLoad %116 
                                       f32_4 %811 = OpVectorShuffle %810 %810 0 1 0 1 
                              Uniform f32_4* %812 = OpAccessChain %58 %169 
                                       f32_4 %813 = OpLoad %812 
                                       f32_4 %814 = OpVectorShuffle %813 %813 0 1 0 1 
                                       f32_4 %815 = OpFMul %811 %814 
                                       f32_4 %816 = OpLoad %561 
                                       f32_4 %817 = OpVectorShuffle %816 %816 0 1 2 1 
                                       f32_4 %818 = OpFAdd %815 %817 
                                                      OpStore %457 %818 
                                       f32_4 %820 = OpLoad %457 
                                       f32_2 %821 = OpVectorShuffle %820 %820 0 1 
                                         f32 %822 = OpLoad %365 
                                         f32 %823 = OpCompositeExtract %821 0 
                                         f32 %824 = OpCompositeExtract %821 1 
                                       f32_3 %825 = OpCompositeConstruct %823 %824 %822 
                                                      OpStore %819 %825 
                  read_only Texture2DSampled %826 = OpLoad %591 
                                       f32_3 %827 = OpLoad %819 
                                         f32 %828 = OpCompositeExtract %827 2 
                                         f32 %829 = OpImageSampleDrefExplicitLod %826 %827 %828 Lod %6 
                                                      OpStore %603 %829 
                                       f32_4 %831 = OpLoad %457 
                                       f32_2 %832 = OpVectorShuffle %831 %831 2 3 
                                         f32 %833 = OpLoad %365 
                                         f32 %834 = OpCompositeExtract %832 0 
                                         f32 %835 = OpCompositeExtract %832 1 
                                       f32_3 %836 = OpCompositeConstruct %834 %835 %833 
                                                      OpStore %830 %836 
                  read_only Texture2DSampled %837 = OpLoad %591 
                                       f32_3 %838 = OpLoad %830 
                                         f32 %839 = OpCompositeExtract %838 2 
                                         f32 %840 = OpImageSampleDrefExplicitLod %837 %838 %839 Lod %6 
                                                      OpStore %718 %840 
                                Private f32* %841 = OpAccessChain %462 %22 
                                         f32 %842 = OpLoad %841 
                                         f32 %843 = OpLoad %603 
                                         f32 %844 = OpFMul %842 %843 
                                Private f32* %845 = OpAccessChain %9 %22 
                                         f32 %846 = OpLoad %845 
                                         f32 %847 = OpFAdd %844 %846 
                                Private f32* %848 = OpAccessChain %9 %22 
                                                      OpStore %848 %847 
                                Private f32* %849 = OpAccessChain %462 %433 
                                         f32 %850 = OpLoad %849 
                                         f32 %851 = OpLoad %718 
                                         f32 %852 = OpFMul %850 %851 
                                Private f32* %853 = OpAccessChain %9 %22 
                                         f32 %854 = OpLoad %853 
                                         f32 %855 = OpFAdd %852 %854 
                                Private f32* %856 = OpAccessChain %9 %22 
                                                      OpStore %856 %855 
                                       f32_4 %857 = OpLoad %116 
                                       f32_2 %858 = OpVectorShuffle %857 %857 0 1 
                              Uniform f32_4* %859 = OpAccessChain %58 %169 
                                       f32_4 %860 = OpLoad %859 
                                       f32_2 %861 = OpVectorShuffle %860 %860 0 1 
                                       f32_2 %862 = OpFMul %858 %861 
                                       f32_4 %863 = OpLoad %561 
                                       f32_2 %864 = OpVectorShuffle %863 %863 3 1 
                                       f32_2 %865 = OpFAdd %862 %864 
                                       f32_3 %866 = OpLoad %609 
                                       f32_3 %867 = OpVectorShuffle %866 %865 3 1 4 
                                                      OpStore %609 %867 
                                       f32_4 %868 = OpLoad %561 
                                       f32_3 %869 = OpVectorShuffle %868 %868 0 2 3 
                                       f32_4 %870 = OpLoad %48 
                                       f32_4 %871 = OpVectorShuffle %870 %869 4 1 5 6 
                                                      OpStore %48 %871 
                                Private f32* %872 = OpAccessChain %561 %433 
                                         f32 %873 = OpLoad %872 
                                Private f32* %874 = OpAccessChain %200 %508 
                                                      OpStore %874 %873 
                                       f32_4 %875 = OpLoad %116 
                                       f32_2 %876 = OpVectorShuffle %875 %875 0 1 
                              Uniform f32_4* %877 = OpAccessChain %58 %169 
                                       f32_4 %878 = OpLoad %877 
                                       f32_2 %879 = OpVectorShuffle %878 %878 0 1 
                                       f32_2 %880 = OpFMul %876 %879 
                                       f32_4 %881 = OpLoad %200 
                                       f32_2 %882 = OpVectorShuffle %881 %881 0 3 
                                       f32_2 %883 = OpFAdd %880 %882 
                                                      OpStore %402 %883 
                                       f32_2 %885 = OpLoad %402 
                                         f32 %886 = OpLoad %365 
                                         f32 %887 = OpCompositeExtract %885 0 
                                         f32 %888 = OpCompositeExtract %885 1 
                                       f32_3 %889 = OpCompositeConstruct %887 %888 %886 
                                                      OpStore %884 %889 
                  read_only Texture2DSampled %890 = OpLoad %591 
                                       f32_3 %891 = OpLoad %884 
                                         f32 %892 = OpCompositeExtract %891 2 
                                         f32 %893 = OpImageSampleDrefExplicitLod %890 %891 %892 Lod %6 
                                                      OpStore %652 %893 
                                       f32_3 %895 = OpLoad %609 
                                       f32_2 %896 = OpVectorShuffle %895 %895 0 2 
                                         f32 %897 = OpLoad %365 
                                         f32 %898 = OpCompositeExtract %896 0 
                                         f32 %899 = OpCompositeExtract %896 1 
                                       f32_3 %900 = OpCompositeConstruct %898 %899 %897 
                                                      OpStore %894 %900 
                  read_only Texture2DSampled %901 = OpLoad %591 
                                       f32_3 %902 = OpLoad %894 
                                         f32 %903 = OpCompositeExtract %902 2 
                                         f32 %904 = OpImageSampleDrefExplicitLod %901 %902 %903 Lod %6 
                                                      OpStore %603 %904 
                                Private f32* %905 = OpAccessChain %462 %31 
                                         f32 %906 = OpLoad %905 
                                         f32 %907 = OpLoad %603 
                                         f32 %908 = OpFMul %906 %907 
                                Private f32* %909 = OpAccessChain %9 %22 
                                         f32 %910 = OpLoad %909 
                                         f32 %911 = OpFAdd %908 %910 
                                Private f32* %912 = OpAccessChain %9 %22 
                                                      OpStore %912 %911 
                                Private f32* %913 = OpAccessChain %462 %508 
                                         f32 %914 = OpLoad %913 
                                         f32 %915 = OpLoad %652 
                                         f32 %916 = OpFMul %914 %915 
                                Private f32* %917 = OpAccessChain %9 %22 
                                         f32 %918 = OpLoad %917 
                                         f32 %919 = OpFAdd %916 %918 
                                Private f32* %920 = OpAccessChain %9 %22 
                                                      OpStore %920 %919 
                                       f32_4 %921 = OpLoad %116 
                                       f32_4 %922 = OpVectorShuffle %921 %921 0 1 0 1 
                              Uniform f32_4* %923 = OpAccessChain %58 %169 
                                       f32_4 %924 = OpLoad %923 
                                       f32_4 %925 = OpVectorShuffle %924 %924 0 1 0 1 
                                       f32_4 %926 = OpFMul %922 %925 
                                       f32_4 %927 = OpLoad %48 
                                       f32_4 %928 = OpVectorShuffle %927 %927 0 1 2 1 
                                       f32_4 %929 = OpFAdd %926 %928 
                                                      OpStore %457 %929 
                                       f32_4 %930 = OpLoad %116 
                                       f32_2 %931 = OpVectorShuffle %930 %930 0 1 
                              Uniform f32_4* %932 = OpAccessChain %58 %169 
                                       f32_4 %933 = OpLoad %932 
                                       f32_2 %934 = OpVectorShuffle %933 %933 0 1 
                                       f32_2 %935 = OpFMul %931 %934 
                                       f32_4 %936 = OpLoad %48 
                                       f32_2 %937 = OpVectorShuffle %936 %936 3 1 
                                       f32_2 %938 = OpFAdd %935 %937 
                                       f32_3 %939 = OpLoad %609 
                                       f32_3 %940 = OpVectorShuffle %939 %938 3 1 4 
                                                      OpStore %609 %940 
                                Private f32* %941 = OpAccessChain %48 %433 
                                         f32 %942 = OpLoad %941 
                                Private f32* %943 = OpAccessChain %200 %433 
                                                      OpStore %943 %942 
                                       f32_4 %944 = OpLoad %116 
                                       f32_2 %945 = OpVectorShuffle %944 %944 0 1 
                              Uniform f32_4* %946 = OpAccessChain %58 %169 
                                       f32_4 %947 = OpLoad %946 
                                       f32_2 %948 = OpVectorShuffle %947 %947 0 1 
                                       f32_2 %949 = OpFMul %945 %948 
                                       f32_4 %950 = OpLoad %200 
                                       f32_2 %951 = OpVectorShuffle %950 %950 0 1 
                                       f32_2 %952 = OpFAdd %949 %951 
                                       f32_4 %953 = OpLoad %116 
                                       f32_4 %954 = OpVectorShuffle %953 %952 4 5 2 3 
                                                      OpStore %116 %954 
                                       f32_4 %956 = OpLoad %116 
                                       f32_2 %957 = OpVectorShuffle %956 %956 0 1 
                                         f32 %958 = OpLoad %365 
                                         f32 %959 = OpCompositeExtract %957 0 
                                         f32 %960 = OpCompositeExtract %957 1 
                                       f32_3 %961 = OpCompositeConstruct %959 %960 %958 
                                                      OpStore %955 %961 
                  read_only Texture2DSampled %963 = OpLoad %591 
                                       f32_3 %964 = OpLoad %955 
                                         f32 %965 = OpCompositeExtract %964 2 
                                         f32 %966 = OpImageSampleDrefExplicitLod %963 %964 %965 Lod %6 
                                                      OpStore %962 %966 
                                       f32_3 %968 = OpLoad %609 
                                       f32_2 %969 = OpVectorShuffle %968 %968 0 2 
                                         f32 %970 = OpLoad %365 
                                         f32 %971 = OpCompositeExtract %969 0 
                                         f32 %972 = OpCompositeExtract %969 1 
                                       f32_3 %973 = OpCompositeConstruct %971 %972 %970 
                                                      OpStore %967 %973 
                  read_only Texture2DSampled %974 = OpLoad %591 
                                       f32_3 %975 = OpLoad %967 
                                         f32 %976 = OpCompositeExtract %975 2 
                                         f32 %977 = OpImageSampleDrefExplicitLod %974 %975 %976 Lod %6 
                                                      OpStore %603 %977 
                                       f32_4 %979 = OpLoad %457 
                                       f32_2 %980 = OpVectorShuffle %979 %979 0 1 
                                         f32 %981 = OpLoad %365 
                                         f32 %982 = OpCompositeExtract %980 0 
                                         f32 %983 = OpCompositeExtract %980 1 
                                       f32_3 %984 = OpCompositeConstruct %982 %983 %981 
                                                      OpStore %978 %984 
                  read_only Texture2DSampled %985 = OpLoad %591 
                                       f32_3 %986 = OpLoad %978 
                                         f32 %987 = OpCompositeExtract %986 2 
                                         f32 %988 = OpImageSampleDrefExplicitLod %985 %986 %987 Lod %6 
                                                      OpStore %718 %988 
                                       f32_4 %990 = OpLoad %457 
                                       f32_2 %991 = OpVectorShuffle %990 %990 2 3 
                                         f32 %992 = OpLoad %365 
                                         f32 %993 = OpCompositeExtract %991 0 
                                         f32 %994 = OpCompositeExtract %991 1 
                                       f32_3 %995 = OpCompositeConstruct %993 %994 %992 
                                                      OpStore %989 %995 
                  read_only Texture2DSampled %997 = OpLoad %591 
                                       f32_3 %998 = OpLoad %989 
                                         f32 %999 = OpCompositeExtract %998 2 
                                        f32 %1000 = OpImageSampleDrefExplicitLod %997 %998 %999 Lod %6 
                                                      OpStore %996 %1000 
                               Private f32* %1001 = OpAccessChain %438 %22 
                                        f32 %1002 = OpLoad %1001 
                                        f32 %1003 = OpLoad %718 
                                        f32 %1004 = OpFMul %1002 %1003 
                               Private f32* %1005 = OpAccessChain %9 %22 
                                        f32 %1006 = OpLoad %1005 
                                        f32 %1007 = OpFAdd %1004 %1006 
                               Private f32* %1008 = OpAccessChain %9 %22 
                                                      OpStore %1008 %1007 
                               Private f32* %1009 = OpAccessChain %438 %433 
                                        f32 %1010 = OpLoad %1009 
                                        f32 %1011 = OpLoad %996 
                                        f32 %1012 = OpFMul %1010 %1011 
                               Private f32* %1013 = OpAccessChain %9 %22 
                                        f32 %1014 = OpLoad %1013 
                                        f32 %1015 = OpFAdd %1012 %1014 
                               Private f32* %1016 = OpAccessChain %9 %22 
                                                      OpStore %1016 %1015 
                               Private f32* %1017 = OpAccessChain %438 %31 
                                        f32 %1018 = OpLoad %1017 
                                        f32 %1019 = OpLoad %603 
                                        f32 %1020 = OpFMul %1018 %1019 
                               Private f32* %1021 = OpAccessChain %9 %22 
                                        f32 %1022 = OpLoad %1021 
                                        f32 %1023 = OpFAdd %1020 %1022 
                               Private f32* %1024 = OpAccessChain %9 %22 
                                                      OpStore %1024 %1023 
                               Private f32* %1025 = OpAccessChain %438 %508 
                                        f32 %1026 = OpLoad %1025 
                                        f32 %1027 = OpLoad %962 
                                        f32 %1028 = OpFMul %1026 %1027 
                               Private f32* %1029 = OpAccessChain %9 %22 
                                        f32 %1030 = OpLoad %1029 
                                        f32 %1031 = OpFAdd %1028 %1030 
                               Private f32* %1032 = OpAccessChain %9 %22 
                                                      OpStore %1032 %1031 
                               Uniform f32* %1035 = OpAccessChain %58 %151 %22 
                                        f32 %1036 = OpLoad %1035 
                                        f32 %1037 = OpFNegate %1036 
                                        f32 %1038 = OpFAdd %1037 %29 
                                                      OpStore %1033 %1038 
                                      f32_4 %1039 = OpLoad %9 
                                      f32_4 %1040 = OpVectorShuffle %1039 %1039 0 0 0 0 
                                        f32 %1041 = OpLoad %1033 
                                      f32_4 %1042 = OpCompositeConstruct %1041 %1041 %1041 %1041 
                                      f32_4 %1043 = OpFMul %1040 %1042 
                             Uniform f32_4* %1044 = OpAccessChain %58 %151 
                                      f32_4 %1045 = OpLoad %1044 
                                      f32_4 %1046 = OpVectorShuffle %1045 %1045 0 0 0 0 
                                      f32_4 %1047 = OpFAdd %1043 %1046 
                                                      OpStore %9 %1047 
                                      f32_4 %1050 = OpLoad %9 
                                                      OpStore %1049 %1050 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat10_0;
vec4 u_xlat1;
float u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat10_8;
vec3 u_xlat9;
float u_xlat10_16;
vec2 u_xlat17;
float u_xlat10_17;
float u_xlat10_24;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat2.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat2.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat2.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb1));
    u_xlat9.xyz = u_xlat2.xyz + u_xlat1.yzw;
    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.yyy + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.zzz + u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat4.xy = u_xlat4.yw * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat3.w = u_xlat4.x;
    u_xlat2.w = u_xlat4.y;
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat0.x = u_xlat10_0 * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat10_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat10_24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat10_16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat10_1 + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 1136
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %1132 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %52 ArrayStride 52 
                                                      OpDecorate %53 ArrayStride 53 
                                                      OpDecorate %54 ArrayStride 54 
                                                      OpDecorate %56 ArrayStride 56 
                                                      OpMemberDecorate %57 0 Offset 57 
                                                      OpMemberDecorate %57 1 Offset 57 
                                                      OpMemberDecorate %57 2 Offset 57 
                                                      OpMemberDecorate %57 3 Offset 57 
                                                      OpMemberDecorate %57 4 Offset 57 
                                                      OpMemberDecorate %57 5 RelaxedPrecision 
                                                      OpMemberDecorate %57 5 Offset 57 
                                                      OpMemberDecorate %57 6 Offset 57 
                                                      OpDecorate %57 Block 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %671 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %675 DescriptorSet 675 
                                                      OpDecorate %675 Binding 675 
                                                      OpDecorate %676 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %688 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %735 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %753 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %790 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %802 RelaxedPrecision 
                                                      OpDecorate %808 RelaxedPrecision 
                                                      OpDecorate %816 RelaxedPrecision 
                                                      OpDecorate %851 RelaxedPrecision 
                                                      OpDecorate %862 RelaxedPrecision 
                                                      OpDecorate %868 RelaxedPrecision 
                                                      OpDecorate %876 RelaxedPrecision 
                                                      OpDecorate %909 RelaxedPrecision 
                                                      OpDecorate %920 RelaxedPrecision 
                                                      OpDecorate %926 RelaxedPrecision 
                                                      OpDecorate %934 RelaxedPrecision 
                                                      OpDecorate %973 RelaxedPrecision 
                                                      OpDecorate %984 RelaxedPrecision 
                                                      OpDecorate %990 RelaxedPrecision 
                                                      OpDecorate %998 RelaxedPrecision 
                                                      OpDecorate %1045 RelaxedPrecision 
                                                      OpDecorate %1046 RelaxedPrecision 
                                                      OpDecorate %1057 RelaxedPrecision 
                                                      OpDecorate %1068 RelaxedPrecision 
                                                      OpDecorate %1079 RelaxedPrecision 
                                                      OpDecorate %1080 RelaxedPrecision 
                                                      OpDecorate %1086 RelaxedPrecision 
                                                      OpDecorate %1094 RelaxedPrecision 
                                                      OpDecorate %1102 RelaxedPrecision 
                                                      OpDecorate %1110 RelaxedPrecision 
                                                      OpDecorate %1116 RelaxedPrecision 
                                                      OpDecorate %1119 RelaxedPrecision 
                                                      OpDecorate %1120 RelaxedPrecision 
                                                      OpDecorate %1121 RelaxedPrecision 
                                                      OpDecorate %1124 RelaxedPrecision 
                                                      OpDecorate %1128 RelaxedPrecision 
                                                      OpDecorate %1129 RelaxedPrecision 
                                                      OpDecorate %1132 RelaxedPrecision 
                                                      OpDecorate %1132 Location 1132 
                                                      OpDecorate %1135 RelaxedPrecision 
                                                      OpDecorate %1135 DescriptorSet 1135 
                                                      OpDecorate %1135 Binding 1135 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                          u32 %31 = OpConstant 2 
                                              %37 = OpTypeVector %6 3 
                                          f32 %40 = OpConstant 3.674022E-40 
                                        f32_3 %41 = OpConstantComposite %40 %40 %40 
                                          f32 %43 = OpConstant 3.674022E-40 
                                        f32_3 %44 = OpConstantComposite %43 %43 %43 
                               Private f32_4* %48 = OpVariable Private 
                                          u32 %51 = OpConstant 4 
                                              %52 = OpTypeArray %7 %51 
                                              %53 = OpTypeArray %7 %51 
                                              %54 = OpTypeArray %7 %51 
                                          u32 %55 = OpConstant 16 
                                              %56 = OpTypeArray %7 %55 
                                              %57 = OpTypeStruct %52 %53 %54 %7 %56 %7 %7 
                                              %58 = OpTypePointer Uniform %57 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4; f32_4;}* %59 = OpVariable Uniform 
                                              %60 = OpTypeInt 32 1 
                                          i32 %61 = OpConstant 0 
                                          i32 %62 = OpConstant 1 
                                              %63 = OpTypePointer Uniform %7 
                                          i32 %74 = OpConstant 2 
                                          i32 %83 = OpConstant 3 
                              Private f32_4* %133 = OpVariable Private 
                                         u32 %148 = OpConstant 1 
                                         u32 %179 = OpConstant 3 
                                             %181 = OpTypeBool 
                                             %182 = OpTypeVector %181 4 
                                             %183 = OpTypePointer Private %182 
                             Private bool_4* %184 = OpVariable Private 
                                             %189 = OpTypePointer Private %37 
                              Private f32_3* %190 = OpVariable Private 
                                             %191 = OpTypePointer Function %6 
                                         f32 %198 = OpConstant 3.674022E-40 
                                         f32 %217 = OpConstant 3.674022E-40 
                                       f32_4 %218 = OpConstantComposite %217 %217 %217 %217 
                                       f32_4 %219 = OpConstantComposite %29 %29 %29 %29 
                              Private f32_3* %227 = OpVariable Private 
                                       f32_3 %229 = OpConstantComposite %217 %217 %217 
                                         i32 %233 = OpConstant 4 
                                         i32 %234 = OpConstant 5 
                                         i32 %252 = OpConstant 6 
                                         i32 %264 = OpConstant 7 
                              Private f32_4* %283 = OpVariable Private 
                                         i32 %337 = OpConstant 9 
                                         i32 %344 = OpConstant 8 
                                         i32 %356 = OpConstant 10 
                                         i32 %368 = OpConstant 11 
                                         i32 %392 = OpConstant 13 
                                         i32 %399 = OpConstant 12 
                                         i32 %411 = OpConstant 14 
                                         i32 %423 = OpConstant 15 
                                Private f32* %448 = OpVariable Private 
                                Private f32* %451 = OpVariable Private 
                                         f32 %465 = OpConstant 3.674022E-40 
                                       f32_2 %466 = OpConstantComposite %465 %465 
                                             %487 = OpTypePointer Private %17 
                              Private f32_2* %488 = OpVariable Private 
                                       f32_2 %492 = OpConstantComposite %29 %29 
                                       f32_2 %496 = OpConstantComposite %217 %217 
                                       f32_2 %509 = OpConstantComposite %40 %40 
                                         f32 %512 = OpConstant 3.674022E-40 
                                       f32_2 %513 = OpConstantComposite %512 %512 
                              Private f32_4* %517 = OpVariable Private 
                                       f32_4 %526 = OpConstantComposite %465 %29 %465 %29 
                              Private f32_4* %542 = OpVariable Private 
                              Private f32_4* %547 = OpVariable Private 
                                         f32 %554 = OpConstant 3.674022E-40 
                                       f32_2 %555 = OpConstantComposite %554 %512 
                                         f32 %557 = OpConstant 3.674022E-40 
                                       f32_2 %558 = OpConstantComposite %557 %512 
                                         f32 %571 = OpConstant 3.674022E-40 
                                       f32_2 %572 = OpConstantComposite %571 %571 
                                       f32_2 %587 = OpConstantComposite %512 %557 
                                         f32 %604 = OpConstant 3.674022E-40 
                                         f32 %605 = OpConstant 3.674022E-40 
                                         f32 %606 = OpConstant 3.674022E-40 
                                       f32_4 %607 = OpConstantComposite %604 %605 %465 %606 
                              Private f32_4* %645 = OpVariable Private 
                              Private f32_4* %653 = OpVariable Private 
                                             %663 = OpTypePointer Function %37 
                                Private f32* %671 = OpVariable Private 
                                             %672 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %673 = OpTypeSampledImage %672 
                                             %674 = OpTypePointer UniformConstant %673 
 UniformConstant read_only Texture2DSampled* %675 = OpVariable UniformConstant 
                                Private f32* %687 = OpVariable Private 
                              Private f32_3* %692 = OpVariable Private 
                                Private f32* %735 = OpVariable Private 
                                Private f32* %801 = OpVariable Private 
                               Private f32* %1045 = OpVariable Private 
                               Private f32* %1079 = OpVariable Private 
                               Private f32* %1116 = OpVariable Private 
                                            %1117 = OpTypePointer Uniform %6 
                                            %1131 = OpTypePointer Output %7 
                              Output f32_4* %1132 = OpVariable Output 
UniformConstant read_only Texture2DSampled* %1135 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %192 = OpVariable Function 
                               Function f32* %201 = OpVariable Function 
                               Function f32* %209 = OpVariable Function 
                             Function f32_3* %664 = OpVariable Function 
                             Function f32_3* %680 = OpVariable Function 
                             Function f32_3* %729 = OpVariable Function 
                             Function f32_3* %740 = OpVariable Function 
                             Function f32_3* %783 = OpVariable Function 
                             Function f32_3* %794 = OpVariable Function 
                             Function f32_3* %845 = OpVariable Function 
                             Function f32_3* %855 = OpVariable Function 
                             Function f32_3* %902 = OpVariable Function 
                             Function f32_3* %913 = OpVariable Function 
                             Function f32_3* %967 = OpVariable Function 
                             Function f32_3* %977 = OpVariable Function 
                            Function f32_3* %1038 = OpVariable Function 
                            Function f32_3* %1050 = OpVariable Function 
                            Function f32_3* %1061 = OpVariable Function 
                            Function f32_3* %1072 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %26 = OpAccessChain %9 %22 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFNegate %27 
                                          f32 %30 = OpFAdd %28 %29 
                                 Private f32* %32 = OpAccessChain %9 %31 
                                                      OpStore %32 %30 
                                        f32_4 %33 = OpLoad %16 
                                        f32_2 %34 = OpVectorShuffle %33 %33 2 3 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpVectorShuffle %35 %34 4 5 2 3 
                                                      OpStore %9 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %42 = OpFMul %39 %41 
                                        f32_3 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 6 3 
                                                      OpStore %9 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %59 %61 %62 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %50 %65 
                                                      OpStore %48 %66 
                               Uniform f32_4* %67 = OpAccessChain %59 %61 %61 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %48 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %48 %73 
                               Uniform f32_4* %75 = OpAccessChain %59 %61 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_4 %78 = OpVectorShuffle %77 %77 2 2 2 2 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %48 
                                        f32_4 %81 = OpFAdd %79 %80 
                                                      OpStore %9 %81 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %84 = OpAccessChain %59 %61 %83 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpFAdd %82 %85 
                                                      OpStore %9 %86 
                                        f32_4 %87 = OpLoad %9 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_4 %89 = OpLoad %9 
                                        f32_3 %90 = OpVectorShuffle %89 %89 3 3 3 
                                        f32_3 %91 = OpFDiv %88 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %9 %93 
                                        f32_4 %94 = OpLoad %9 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                               Uniform f32_4* %96 = OpAccessChain %59 %62 %62 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpFMul %95 %97 
                                                      OpStore %48 %98 
                               Uniform f32_4* %99 = OpAccessChain %59 %62 %61 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpLoad %9 
                                       f32_4 %102 = OpVectorShuffle %101 %101 0 0 0 0 
                                       f32_4 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %48 
                                       f32_4 %105 = OpFAdd %103 %104 
                                                      OpStore %48 %105 
                              Uniform f32_4* %106 = OpAccessChain %59 %62 %74 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpVectorShuffle %108 %108 2 2 2 2 
                                       f32_4 %110 = OpFNegate %109 
                                       f32_4 %111 = OpFMul %107 %110 
                                       f32_4 %112 = OpLoad %48 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %9 %113 
                                       f32_4 %114 = OpLoad %9 
                              Uniform f32_4* %115 = OpAccessChain %59 %62 %83 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpFAdd %114 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                              Uniform f32_4* %120 = OpAccessChain %59 %74 %61 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpFNegate %122 
                                       f32_3 %124 = OpFAdd %119 %123 
                                       f32_4 %125 = OpLoad %48 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %48 %126 
                                       f32_4 %127 = OpLoad %48 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                       f32_4 %129 = OpLoad %48 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %128 %130 
                                Private f32* %132 = OpAccessChain %48 %22 
                                                      OpStore %132 %131 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %136 = OpAccessChain %59 %74 %62 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpFNegate %138 
                                       f32_3 %140 = OpFAdd %135 %139 
                                       f32_4 %141 = OpLoad %133 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %133 %142 
                                       f32_4 %143 = OpLoad %133 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_4 %145 = OpLoad %133 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                         f32 %147 = OpDot %144 %146 
                                Private f32* %149 = OpAccessChain %48 %148 
                                                      OpStore %149 %147 
                                       f32_4 %150 = OpLoad %9 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                              Uniform f32_4* %152 = OpAccessChain %59 %74 %74 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFNegate %154 
                                       f32_3 %156 = OpFAdd %151 %155 
                                       f32_4 %157 = OpLoad %133 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %133 %158 
                                       f32_4 %159 = OpLoad %133 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_4 %161 = OpLoad %133 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %160 %162 
                                Private f32* %164 = OpAccessChain %48 %31 
                                                      OpStore %164 %163 
                                       f32_4 %165 = OpLoad %9 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                              Uniform f32_4* %167 = OpAccessChain %59 %74 %83 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFNegate %169 
                                       f32_3 %171 = OpFAdd %166 %170 
                                       f32_4 %172 = OpLoad %133 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %133 %173 
                                       f32_4 %174 = OpLoad %133 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_4 %176 = OpLoad %133 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %175 %177 
                                Private f32* %180 = OpAccessChain %48 %179 
                                                      OpStore %180 %178 
                                       f32_4 %185 = OpLoad %48 
                              Uniform f32_4* %186 = OpAccessChain %59 %83 
                                       f32_4 %187 = OpLoad %186 
                                      bool_4 %188 = OpFOrdLessThan %185 %187 
                                                      OpStore %184 %188 
                                      bool_4 %193 = OpLoad %184 
                                        bool %194 = OpCompositeExtract %193 0 
                                                      OpSelectionMerge %196 None 
                                                      OpBranchConditional %194 %195 %197 
                                             %195 = OpLabel 
                                                      OpStore %192 %43 
                                                      OpBranch %196 
                                             %197 = OpLabel 
                                                      OpStore %192 %198 
                                                      OpBranch %196 
                                             %196 = OpLabel 
                                         f32 %199 = OpLoad %192 
                                Private f32* %200 = OpAccessChain %190 %22 
                                                      OpStore %200 %199 
                                      bool_4 %202 = OpLoad %184 
                                        bool %203 = OpCompositeExtract %202 1 
                                                      OpSelectionMerge %205 None 
                                                      OpBranchConditional %203 %204 %206 
                                             %204 = OpLabel 
                                                      OpStore %201 %43 
                                                      OpBranch %205 
                                             %206 = OpLabel 
                                                      OpStore %201 %198 
                                                      OpBranch %205 
                                             %205 = OpLabel 
                                         f32 %207 = OpLoad %201 
                                Private f32* %208 = OpAccessChain %190 %148 
                                                      OpStore %208 %207 
                                      bool_4 %210 = OpLoad %184 
                                        bool %211 = OpCompositeExtract %210 2 
                                                      OpSelectionMerge %213 None 
                                                      OpBranchConditional %211 %212 %214 
                                             %212 = OpLabel 
                                                      OpStore %209 %43 
                                                      OpBranch %213 
                                             %214 = OpLabel 
                                                      OpStore %209 %198 
                                                      OpBranch %213 
                                             %213 = OpLabel 
                                         f32 %215 = OpLoad %209 
                                Private f32* %216 = OpAccessChain %190 %31 
                                                      OpStore %216 %215 
                                      bool_4 %220 = OpLoad %184 
                                       f32_4 %221 = OpSelect %220 %219 %218 
                                       f32_4 %222 = OpExtInst %1 46 %218 %219 %221 
                                                      OpStore %48 %222 
                                       f32_3 %223 = OpLoad %190 
                                       f32_4 %224 = OpLoad %48 
                                       f32_3 %225 = OpVectorShuffle %224 %224 1 2 3 
                                       f32_3 %226 = OpFAdd %223 %225 
                                                      OpStore %190 %226 
                                       f32_3 %228 = OpLoad %190 
                                       f32_3 %230 = OpExtInst %1 40 %228 %229 
                                                      OpStore %227 %230 
                                       f32_4 %231 = OpLoad %9 
                                       f32_3 %232 = OpVectorShuffle %231 %231 1 1 1 
                              Uniform f32_4* %235 = OpAccessChain %59 %233 %234 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpFMul %232 %237 
                                       f32_4 %239 = OpLoad %133 
                                       f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                                      OpStore %133 %240 
                              Uniform f32_4* %241 = OpAccessChain %59 %233 %233 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_4 %244 = OpLoad %9 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 0 0 
                                       f32_3 %246 = OpFMul %243 %245 
                                       f32_4 %247 = OpLoad %133 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpFAdd %246 %248 
                                       f32_4 %250 = OpLoad %133 
                                       f32_4 %251 = OpVectorShuffle %250 %249 4 5 6 3 
                                                      OpStore %133 %251 
                              Uniform f32_4* %253 = OpAccessChain %59 %233 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_4 %256 = OpLoad %9 
                                       f32_3 %257 = OpVectorShuffle %256 %256 2 2 2 
                                       f32_3 %258 = OpFMul %255 %257 
                                       f32_4 %259 = OpLoad %133 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpFAdd %258 %260 
                                       f32_4 %262 = OpLoad %133 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %133 %263 
                              Uniform f32_4* %265 = OpAccessChain %59 %233 %264 
                                       f32_4 %266 = OpLoad %265 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 3 3 3 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_4 %271 = OpLoad %133 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_3 %273 = OpFAdd %270 %272 
                                       f32_4 %274 = OpLoad %133 
                                       f32_4 %275 = OpVectorShuffle %274 %273 4 5 6 3 
                                                      OpStore %133 %275 
                                       f32_3 %276 = OpLoad %227 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 0 0 
                                       f32_4 %278 = OpLoad %133 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %133 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %133 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 1 1 1 
                              Uniform f32_4* %286 = OpAccessChain %59 %233 %62 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFMul %285 %288 
                                       f32_4 %290 = OpLoad %283 
                                       f32_4 %291 = OpVectorShuffle %290 %289 4 5 6 3 
                                                      OpStore %283 %291 
                              Uniform f32_4* %292 = OpAccessChain %59 %233 %61 
                                       f32_4 %293 = OpLoad %292 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                                       f32_4 %295 = OpLoad %9 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 0 0 
                                       f32_3 %297 = OpFMul %294 %296 
                                       f32_4 %298 = OpLoad %283 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpFAdd %297 %299 
                                       f32_4 %301 = OpLoad %283 
                                       f32_4 %302 = OpVectorShuffle %301 %300 4 5 6 3 
                                                      OpStore %283 %302 
                              Uniform f32_4* %303 = OpAccessChain %59 %233 %74 
                                       f32_4 %304 = OpLoad %303 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_4 %306 = OpLoad %9 
                                       f32_3 %307 = OpVectorShuffle %306 %306 2 2 2 
                                       f32_3 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %283 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_3 %311 = OpFAdd %308 %310 
                                       f32_4 %312 = OpLoad %283 
                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
                                                      OpStore %283 %313 
                              Uniform f32_4* %314 = OpAccessChain %59 %233 %83 
                                       f32_4 %315 = OpLoad %314 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_4 %317 = OpLoad %9 
                                       f32_3 %318 = OpVectorShuffle %317 %317 3 3 3 
                                       f32_3 %319 = OpFMul %316 %318 
                                       f32_4 %320 = OpLoad %283 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
                                       f32_3 %322 = OpFAdd %319 %321 
                                       f32_4 %323 = OpLoad %283 
                                       f32_4 %324 = OpVectorShuffle %323 %322 4 5 6 3 
                                                      OpStore %283 %324 
                                       f32_4 %325 = OpLoad %283 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_4 %327 = OpLoad %48 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 0 0 
                                       f32_3 %329 = OpFMul %326 %328 
                                       f32_4 %330 = OpLoad %133 
                                       f32_3 %331 = OpVectorShuffle %330 %330 0 1 2 
                                       f32_3 %332 = OpFAdd %329 %331 
                                       f32_4 %333 = OpLoad %133 
                                       f32_4 %334 = OpVectorShuffle %333 %332 4 5 6 3 
                                                      OpStore %133 %334 
                                       f32_4 %335 = OpLoad %9 
                                       f32_3 %336 = OpVectorShuffle %335 %335 1 1 1 
                              Uniform f32_4* %338 = OpAccessChain %59 %233 %337 
                                       f32_4 %339 = OpLoad %338 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_3 %341 = OpFMul %336 %340 
                                       f32_4 %342 = OpLoad %283 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 6 3 
                                                      OpStore %283 %343 
                              Uniform f32_4* %345 = OpAccessChain %59 %233 %344 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_4 %348 = OpLoad %9 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 0 0 
                                       f32_3 %350 = OpFMul %347 %349 
                                       f32_4 %351 = OpLoad %283 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpFAdd %350 %352 
                                       f32_4 %354 = OpLoad %283 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %283 %355 
                              Uniform f32_4* %357 = OpAccessChain %59 %233 %356 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_4 %360 = OpLoad %9 
                                       f32_3 %361 = OpVectorShuffle %360 %360 2 2 2 
                                       f32_3 %362 = OpFMul %359 %361 
                                       f32_4 %363 = OpLoad %283 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_3 %365 = OpFAdd %362 %364 
                                       f32_4 %366 = OpLoad %283 
                                       f32_4 %367 = OpVectorShuffle %366 %365 4 5 6 3 
                                                      OpStore %283 %367 
                              Uniform f32_4* %369 = OpAccessChain %59 %233 %368 
                                       f32_4 %370 = OpLoad %369 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_4 %372 = OpLoad %9 
                                       f32_3 %373 = OpVectorShuffle %372 %372 3 3 3 
                                       f32_3 %374 = OpFMul %371 %373 
                                       f32_4 %375 = OpLoad %283 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFAdd %374 %376 
                                       f32_4 %378 = OpLoad %283 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %283 %379 
                                       f32_4 %380 = OpLoad %283 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                                       f32_3 %382 = OpLoad %227 
                                       f32_3 %383 = OpVectorShuffle %382 %382 1 1 1 
                                       f32_3 %384 = OpFMul %381 %383 
                                       f32_4 %385 = OpLoad %133 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_3 %387 = OpFAdd %384 %386 
                                       f32_4 %388 = OpLoad %133 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %133 %389 
                                       f32_4 %390 = OpLoad %9 
                                       f32_3 %391 = OpVectorShuffle %390 %390 1 1 1 
                              Uniform f32_4* %393 = OpAccessChain %59 %233 %392 
                                       f32_4 %394 = OpLoad %393 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %396 = OpFMul %391 %395 
                                       f32_4 %397 = OpLoad %283 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 5 6 3 
                                                      OpStore %283 %398 
                              Uniform f32_4* %400 = OpAccessChain %59 %233 %399 
                                       f32_4 %401 = OpLoad %400 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_4 %403 = OpLoad %9 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 0 0 
                                       f32_3 %405 = OpFMul %402 %404 
                                       f32_4 %406 = OpLoad %283 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_3 %408 = OpFAdd %405 %407 
                                       f32_4 %409 = OpLoad %283 
                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
                                                      OpStore %283 %410 
                              Uniform f32_4* %412 = OpAccessChain %59 %233 %411 
                                       f32_4 %413 = OpLoad %412 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                       f32_4 %415 = OpLoad %9 
                                       f32_3 %416 = OpVectorShuffle %415 %415 2 2 2 
                                       f32_3 %417 = OpFMul %414 %416 
                                       f32_4 %418 = OpLoad %283 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %417 %419 
                                       f32_4 %421 = OpLoad %9 
                                       f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                                      OpStore %9 %422 
                              Uniform f32_4* %424 = OpAccessChain %59 %233 %423 
                                       f32_4 %425 = OpLoad %424 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_4 %427 = OpLoad %9 
                                       f32_3 %428 = OpVectorShuffle %427 %427 3 3 3 
                                       f32_3 %429 = OpFMul %426 %428 
                                       f32_4 %430 = OpLoad %9 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                       f32_3 %432 = OpFAdd %429 %431 
                                       f32_4 %433 = OpLoad %9 
                                       f32_4 %434 = OpVectorShuffle %433 %432 4 5 6 3 
                                                      OpStore %9 %434 
                                       f32_4 %435 = OpLoad %9 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                       f32_3 %437 = OpLoad %227 
                                       f32_3 %438 = OpVectorShuffle %437 %437 2 2 2 
                                       f32_3 %439 = OpFMul %436 %438 
                                       f32_4 %440 = OpLoad %133 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFAdd %439 %441 
                                       f32_4 %443 = OpLoad %9 
                                       f32_4 %444 = OpVectorShuffle %443 %442 4 5 6 3 
                                                      OpStore %9 %444 
                                       f32_3 %445 = OpLoad %227 
                                       f32_4 %446 = OpLoad %48 
                                       f32_4 %447 = OpVectorShuffle %446 %445 0 4 5 6 
                                                      OpStore %48 %447 
                                       f32_4 %449 = OpLoad %48 
                                         f32 %450 = OpDot %449 %219 
                                                      OpStore %448 %450 
                                         f32 %452 = OpLoad %448 
                                         f32 %453 = OpFNegate %452 
                                Private f32* %454 = OpAccessChain %9 %31 
                                         f32 %455 = OpLoad %454 
                                         f32 %456 = OpFAdd %453 %455 
                                                      OpStore %451 %456 
                                         f32 %457 = OpLoad %451 
                                         f32 %458 = OpFAdd %457 %29 
                                                      OpStore %451 %458 
                                       f32_4 %459 = OpLoad %9 
                                       f32_2 %460 = OpVectorShuffle %459 %459 0 1 
                              Uniform f32_4* %461 = OpAccessChain %59 %252 
                                       f32_4 %462 = OpLoad %461 
                                       f32_2 %463 = OpVectorShuffle %462 %462 2 3 
                                       f32_2 %464 = OpFMul %460 %463 
                                       f32_2 %467 = OpFAdd %464 %466 
                                       f32_4 %468 = OpLoad %48 
                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 2 3 
                                                      OpStore %48 %469 
                                       f32_4 %470 = OpLoad %48 
                                       f32_2 %471 = OpVectorShuffle %470 %470 0 1 
                                       f32_2 %472 = OpExtInst %1 8 %471 
                                       f32_4 %473 = OpLoad %48 
                                       f32_4 %474 = OpVectorShuffle %473 %472 4 5 2 3 
                                                      OpStore %48 %474 
                                       f32_4 %475 = OpLoad %9 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                              Uniform f32_4* %477 = OpAccessChain %59 %252 
                                       f32_4 %478 = OpLoad %477 
                                       f32_2 %479 = OpVectorShuffle %478 %478 2 3 
                                       f32_2 %480 = OpFMul %476 %479 
                                       f32_4 %481 = OpLoad %48 
                                       f32_2 %482 = OpVectorShuffle %481 %481 0 1 
                                       f32_2 %483 = OpFNegate %482 
                                       f32_2 %484 = OpFAdd %480 %483 
                                       f32_4 %485 = OpLoad %9 
                                       f32_4 %486 = OpVectorShuffle %485 %484 4 5 2 3 
                                                      OpStore %9 %486 
                                       f32_4 %489 = OpLoad %9 
                                       f32_2 %490 = OpVectorShuffle %489 %489 0 1 
                                       f32_2 %491 = OpFNegate %490 
                                       f32_2 %493 = OpFAdd %491 %492 
                                                      OpStore %488 %493 
                                       f32_4 %494 = OpLoad %9 
                                       f32_2 %495 = OpVectorShuffle %494 %494 0 1 
                                       f32_2 %497 = OpExtInst %1 37 %495 %496 
                                       f32_4 %498 = OpLoad %133 
                                       f32_4 %499 = OpVectorShuffle %498 %497 4 5 2 3 
                                                      OpStore %133 %499 
                                       f32_4 %500 = OpLoad %133 
                                       f32_2 %501 = OpVectorShuffle %500 %500 0 1 
                                       f32_2 %502 = OpFNegate %501 
                                       f32_4 %503 = OpLoad %133 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %502 %504 
                                       f32_2 %506 = OpLoad %488 
                                       f32_2 %507 = OpFAdd %505 %506 
                                                      OpStore %488 %507 
                                       f32_2 %508 = OpLoad %488 
                                       f32_2 %510 = OpFAdd %508 %509 
                                                      OpStore %488 %510 
                                       f32_2 %511 = OpLoad %488 
                                       f32_2 %514 = OpFMul %511 %513 
                                       f32_4 %515 = OpLoad %133 
                                       f32_4 %516 = OpVectorShuffle %515 %514 4 5 2 3 
                                                      OpStore %133 %516 
                                Private f32* %518 = OpAccessChain %133 %22 
                                         f32 %519 = OpLoad %518 
                                Private f32* %520 = OpAccessChain %517 %148 
                                                      OpStore %520 %519 
                                       f32_4 %521 = OpLoad %9 
                                       f32_2 %522 = OpVectorShuffle %521 %521 0 1 
                                       f32_2 %523 = OpExtInst %1 40 %522 %496 
                                                      OpStore %488 %523 
                                       f32_4 %524 = OpLoad %9 
                                       f32_4 %525 = OpVectorShuffle %524 %524 0 0 1 1 
                                       f32_4 %527 = OpFAdd %525 %526 
                                                      OpStore %283 %527 
                                       f32_2 %528 = OpLoad %488 
                                       f32_2 %529 = OpFNegate %528 
                                       f32_2 %530 = OpLoad %488 
                                       f32_2 %531 = OpFMul %529 %530 
                                       f32_4 %532 = OpLoad %283 
                                       f32_2 %533 = OpVectorShuffle %532 %532 1 3 
                                       f32_2 %534 = OpFAdd %531 %533 
                                                      OpStore %488 %534 
                                       f32_4 %535 = OpLoad %283 
                                       f32_4 %536 = OpVectorShuffle %535 %535 0 0 2 2 
                                       f32_4 %537 = OpLoad %283 
                                       f32_4 %538 = OpVectorShuffle %537 %537 0 0 2 2 
                                       f32_4 %539 = OpFMul %536 %538 
                                                      OpStore %283 %539 
                                       f32_2 %540 = OpLoad %488 
                                       f32_2 %541 = OpFAdd %540 %509 
                                                      OpStore %488 %541 
                                Private f32* %543 = OpAccessChain %488 %22 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFMul %544 %512 
                                Private f32* %546 = OpAccessChain %542 %31 
                                                      OpStore %546 %545 
                                Private f32* %548 = OpAccessChain %488 %148 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFMul %549 %512 
                                Private f32* %551 = OpAccessChain %547 %31 
                                                      OpStore %551 %550 
                                       f32_4 %552 = OpLoad %9 
                                       f32_2 %553 = OpVectorShuffle %552 %552 0 0 
                                       f32_2 %556 = OpFMul %553 %555 
                                       f32_2 %559 = OpFAdd %556 %558 
                                       f32_4 %560 = OpLoad %542 
                                       f32_4 %561 = OpVectorShuffle %560 %559 0 4 2 5 
                                                      OpStore %542 %561 
                                       f32_4 %562 = OpLoad %283 
                                       f32_2 %563 = OpVectorShuffle %562 %562 0 2 
                                       f32_2 %564 = OpFMul %563 %466 
                                       f32_4 %565 = OpLoad %9 
                                       f32_2 %566 = OpVectorShuffle %565 %565 0 1 
                                       f32_2 %567 = OpFNegate %566 
                                       f32_2 %568 = OpFAdd %564 %567 
                                                      OpStore %488 %568 
                                       f32_4 %569 = OpLoad %283 
                                       f32_2 %570 = OpVectorShuffle %569 %569 1 3 
                                       f32_2 %573 = OpFMul %570 %572 
                                       f32_4 %574 = OpLoad %283 
                                       f32_4 %575 = OpVectorShuffle %574 %573 4 5 2 3 
                                                      OpStore %283 %575 
                                       f32_2 %576 = OpLoad %488 
                                       f32_2 %577 = OpVectorShuffle %576 %576 1 0 
                                       f32_2 %578 = OpFMul %577 %513 
                                       f32_4 %579 = OpLoad %547 
                                       f32_4 %580 = OpVectorShuffle %579 %578 4 5 2 3 
                                                      OpStore %547 %580 
                                Private f32* %581 = OpAccessChain %547 %148 
                                         f32 %582 = OpLoad %581 
                                Private f32* %583 = OpAccessChain %542 %22 
                                                      OpStore %583 %582 
                                       f32_4 %584 = OpLoad %9 
                                       f32_2 %585 = OpVectorShuffle %584 %584 0 0 
                                       f32_2 %586 = OpFMul %585 %555 
                                       f32_2 %588 = OpFAdd %586 %587 
                                       f32_4 %589 = OpLoad %517 
                                       f32_4 %590 = OpVectorShuffle %589 %588 4 1 5 3 
                                                      OpStore %517 %590 
                                Private f32* %591 = OpAccessChain %283 %22 
                                         f32 %592 = OpLoad %591 
                                Private f32* %593 = OpAccessChain %517 %179 
                                                      OpStore %593 %592 
                                Private f32* %594 = OpAccessChain %283 %148 
                                         f32 %595 = OpLoad %594 
                                Private f32* %596 = OpAccessChain %133 %179 
                                                      OpStore %596 %595 
                                       f32_4 %597 = OpLoad %517 
                                       f32_4 %598 = OpLoad %542 
                                       f32_4 %599 = OpFAdd %597 %598 
                                                      OpStore %283 %599 
                                       f32_4 %600 = OpLoad %517 
                                       f32_4 %601 = OpLoad %283 
                                       f32_4 %602 = OpFDiv %600 %601 
                                                      OpStore %517 %602 
                                       f32_4 %603 = OpLoad %517 
                                       f32_4 %608 = OpFAdd %603 %607 
                                                      OpStore %517 %608 
                                       f32_4 %609 = OpLoad %517 
                                       f32_4 %610 = OpVectorShuffle %609 %609 3 0 1 2 
                              Uniform f32_4* %611 = OpAccessChain %59 %252 
                                       f32_4 %612 = OpLoad %611 
                                       f32_4 %613 = OpVectorShuffle %612 %612 0 0 0 0 
                                       f32_4 %614 = OpFMul %610 %613 
                                                      OpStore %517 %614 
                                       f32_4 %615 = OpLoad %9 
                                       f32_2 %616 = OpVectorShuffle %615 %615 1 1 
                                       f32_2 %617 = OpFMul %616 %555 
                                       f32_2 %618 = OpFAdd %617 %558 
                                       f32_4 %619 = OpLoad %547 
                                       f32_4 %620 = OpVectorShuffle %619 %618 0 4 2 5 
                                                      OpStore %547 %620 
                                       f32_4 %621 = OpLoad %9 
                                       f32_2 %622 = OpVectorShuffle %621 %621 1 1 
                                       f32_2 %623 = OpFMul %622 %555 
                                       f32_2 %624 = OpFAdd %623 %587 
                                       f32_4 %625 = OpLoad %133 
                                       f32_4 %626 = OpVectorShuffle %625 %624 4 1 5 3 
                                                      OpStore %133 %626 
                                       f32_4 %627 = OpLoad %133 
                                       f32_4 %628 = OpLoad %547 
                                       f32_4 %629 = OpFAdd %627 %628 
                                                      OpStore %542 %629 
                                       f32_4 %630 = OpLoad %133 
                                       f32_4 %631 = OpLoad %542 
                                       f32_4 %632 = OpFDiv %630 %631 
                                                      OpStore %133 %632 
                                       f32_4 %633 = OpLoad %133 
                                       f32_4 %634 = OpFAdd %633 %607 
                                                      OpStore %133 %634 
                                       f32_4 %635 = OpLoad %133 
                                       f32_4 %636 = OpVectorShuffle %635 %635 0 3 1 2 
                              Uniform f32_4* %637 = OpAccessChain %59 %252 
                                       f32_4 %638 = OpLoad %637 
                                       f32_4 %639 = OpVectorShuffle %638 %638 1 1 1 1 
                                       f32_4 %640 = OpFMul %636 %639 
                                                      OpStore %133 %640 
                                       f32_4 %641 = OpLoad %283 
                                       f32_4 %642 = OpLoad %542 
                                       f32_4 %643 = OpVectorShuffle %642 %642 0 0 0 0 
                                       f32_4 %644 = OpFMul %641 %643 
                                                      OpStore %547 %644 
                                       f32_4 %646 = OpLoad %517 
                                       f32_3 %647 = OpVectorShuffle %646 %646 1 2 3 
                                       f32_4 %648 = OpLoad %645 
                                       f32_4 %649 = OpVectorShuffle %648 %647 4 1 5 6 
                                                      OpStore %645 %649 
                                Private f32* %650 = OpAccessChain %133 %22 
                                         f32 %651 = OpLoad %650 
                                Private f32* %652 = OpAccessChain %645 %148 
                                                      OpStore %652 %651 
                                       f32_4 %654 = OpLoad %48 
                                       f32_4 %655 = OpVectorShuffle %654 %654 0 1 0 1 
                              Uniform f32_4* %656 = OpAccessChain %59 %252 
                                       f32_4 %657 = OpLoad %656 
                                       f32_4 %658 = OpVectorShuffle %657 %657 0 1 0 1 
                                       f32_4 %659 = OpFMul %655 %658 
                                       f32_4 %660 = OpLoad %645 
                                       f32_4 %661 = OpVectorShuffle %660 %660 0 1 2 1 
                                       f32_4 %662 = OpFAdd %659 %661 
                                                      OpStore %653 %662 
                                       f32_4 %665 = OpLoad %653 
                                       f32_2 %666 = OpVectorShuffle %665 %665 0 1 
                                         f32 %667 = OpLoad %451 
                                         f32 %668 = OpCompositeExtract %666 0 
                                         f32 %669 = OpCompositeExtract %666 1 
                                       f32_3 %670 = OpCompositeConstruct %668 %669 %667 
                                                      OpStore %664 %670 
                  read_only Texture2DSampled %676 = OpLoad %675 
                                       f32_3 %677 = OpLoad %664 
                                         f32 %678 = OpCompositeExtract %677 2 
                                         f32 %679 = OpImageSampleDrefExplicitLod %676 %677 %678 Lod %6 
                                                      OpStore %671 %679 
                                       f32_4 %681 = OpLoad %653 
                                       f32_2 %682 = OpVectorShuffle %681 %681 2 3 
                                         f32 %683 = OpLoad %451 
                                         f32 %684 = OpCompositeExtract %682 0 
                                         f32 %685 = OpCompositeExtract %682 1 
                                       f32_3 %686 = OpCompositeConstruct %684 %685 %683 
                                                      OpStore %680 %686 
                  read_only Texture2DSampled %688 = OpLoad %675 
                                       f32_3 %689 = OpLoad %680 
                                         f32 %690 = OpCompositeExtract %689 2 
                                         f32 %691 = OpImageSampleDrefExplicitLod %688 %689 %690 Lod %6 
                                                      OpStore %687 %691 
                                         f32 %693 = OpLoad %687 
                                Private f32* %694 = OpAccessChain %547 %148 
                                         f32 %695 = OpLoad %694 
                                         f32 %696 = OpFMul %693 %695 
                                Private f32* %697 = OpAccessChain %692 %22 
                                                      OpStore %697 %696 
                                Private f32* %698 = OpAccessChain %547 %22 
                                         f32 %699 = OpLoad %698 
                                         f32 %700 = OpLoad %671 
                                         f32 %701 = OpFMul %699 %700 
                                Private f32* %702 = OpAccessChain %692 %22 
                                         f32 %703 = OpLoad %702 
                                         f32 %704 = OpFAdd %701 %703 
                                Private f32* %705 = OpAccessChain %9 %22 
                                                      OpStore %705 %704 
                                       f32_4 %706 = OpLoad %48 
                                       f32_2 %707 = OpVectorShuffle %706 %706 0 1 
                              Uniform f32_4* %708 = OpAccessChain %59 %252 
                                       f32_4 %709 = OpLoad %708 
                                       f32_2 %710 = OpVectorShuffle %709 %709 0 1 
                                       f32_2 %711 = OpFMul %707 %710 
                                       f32_4 %712 = OpLoad %645 
                                       f32_2 %713 = OpVectorShuffle %712 %712 3 1 
                                       f32_2 %714 = OpFAdd %711 %713 
                                       f32_3 %715 = OpLoad %692 
                                       f32_3 %716 = OpVectorShuffle %715 %714 3 1 4 
                                                      OpStore %692 %716 
                                Private f32* %717 = OpAccessChain %645 %148 
                                         f32 %718 = OpLoad %717 
                                Private f32* %719 = OpAccessChain %517 %148 
                                                      OpStore %719 %718 
                                       f32_4 %720 = OpLoad %48 
                                       f32_2 %721 = OpVectorShuffle %720 %720 0 1 
                              Uniform f32_4* %722 = OpAccessChain %59 %252 
                                       f32_4 %723 = OpLoad %722 
                                       f32_2 %724 = OpVectorShuffle %723 %723 0 1 
                                       f32_2 %725 = OpFMul %721 %724 
                                       f32_4 %726 = OpLoad %517 
                                       f32_2 %727 = OpVectorShuffle %726 %726 0 1 
                                       f32_2 %728 = OpFAdd %725 %727 
                                                      OpStore %488 %728 
                                       f32_2 %730 = OpLoad %488 
                                         f32 %731 = OpLoad %451 
                                         f32 %732 = OpCompositeExtract %730 0 
                                         f32 %733 = OpCompositeExtract %730 1 
                                       f32_3 %734 = OpCompositeConstruct %732 %733 %731 
                                                      OpStore %729 %734 
                  read_only Texture2DSampled %736 = OpLoad %675 
                                       f32_3 %737 = OpLoad %729 
                                         f32 %738 = OpCompositeExtract %737 2 
                                         f32 %739 = OpImageSampleDrefExplicitLod %736 %737 %738 Lod %6 
                                                      OpStore %735 %739 
                                       f32_3 %741 = OpLoad %692 
                                       f32_2 %742 = OpVectorShuffle %741 %741 0 2 
                                         f32 %743 = OpLoad %451 
                                         f32 %744 = OpCompositeExtract %742 0 
                                         f32 %745 = OpCompositeExtract %742 1 
                                       f32_3 %746 = OpCompositeConstruct %744 %745 %743 
                                                      OpStore %740 %746 
                  read_only Texture2DSampled %747 = OpLoad %675 
                                       f32_3 %748 = OpLoad %740 
                                         f32 %749 = OpCompositeExtract %748 2 
                                         f32 %750 = OpImageSampleDrefExplicitLod %747 %748 %749 Lod %6 
                                                      OpStore %687 %750 
                                Private f32* %751 = OpAccessChain %547 %31 
                                         f32 %752 = OpLoad %751 
                                         f32 %753 = OpLoad %687 
                                         f32 %754 = OpFMul %752 %753 
                                Private f32* %755 = OpAccessChain %9 %22 
                                         f32 %756 = OpLoad %755 
                                         f32 %757 = OpFAdd %754 %756 
                                Private f32* %758 = OpAccessChain %9 %22 
                                                      OpStore %758 %757 
                                Private f32* %759 = OpAccessChain %547 %179 
                                         f32 %760 = OpLoad %759 
                                         f32 %761 = OpLoad %735 
                                         f32 %762 = OpFMul %760 %761 
                                Private f32* %763 = OpAccessChain %9 %22 
                                         f32 %764 = OpLoad %763 
                                         f32 %765 = OpFAdd %762 %764 
                                Private f32* %766 = OpAccessChain %9 %22 
                                                      OpStore %766 %765 
                                       f32_4 %767 = OpLoad %283 
                                       f32_4 %768 = OpLoad %542 
                                       f32_4 %769 = OpVectorShuffle %768 %768 1 1 1 1 
                                       f32_4 %770 = OpFMul %767 %769 
                                                      OpStore %547 %770 
                                Private f32* %771 = OpAccessChain %133 %31 
                                         f32 %772 = OpLoad %771 
                                Private f32* %773 = OpAccessChain %645 %148 
                                                      OpStore %773 %772 
                                       f32_4 %774 = OpLoad %48 
                                       f32_4 %775 = OpVectorShuffle %774 %774 0 1 0 1 
                              Uniform f32_4* %776 = OpAccessChain %59 %252 
                                       f32_4 %777 = OpLoad %776 
                                       f32_4 %778 = OpVectorShuffle %777 %777 0 1 0 1 
                                       f32_4 %779 = OpFMul %775 %778 
                                       f32_4 %780 = OpLoad %645 
                                       f32_4 %781 = OpVectorShuffle %780 %780 0 1 2 1 
                                       f32_4 %782 = OpFAdd %779 %781 
                                                      OpStore %653 %782 
                                       f32_4 %784 = OpLoad %653 
                                       f32_2 %785 = OpVectorShuffle %784 %784 0 1 
                                         f32 %786 = OpLoad %451 
                                         f32 %787 = OpCompositeExtract %785 0 
                                         f32 %788 = OpCompositeExtract %785 1 
                                       f32_3 %789 = OpCompositeConstruct %787 %788 %786 
                                                      OpStore %783 %789 
                  read_only Texture2DSampled %790 = OpLoad %675 
                                       f32_3 %791 = OpLoad %783 
                                         f32 %792 = OpCompositeExtract %791 2 
                                         f32 %793 = OpImageSampleDrefExplicitLod %790 %791 %792 Lod %6 
                                                      OpStore %687 %793 
                                       f32_4 %795 = OpLoad %653 
                                       f32_2 %796 = OpVectorShuffle %795 %795 2 3 
                                         f32 %797 = OpLoad %451 
                                         f32 %798 = OpCompositeExtract %796 0 
                                         f32 %799 = OpCompositeExtract %796 1 
                                       f32_3 %800 = OpCompositeConstruct %798 %799 %797 
                                                      OpStore %794 %800 
                  read_only Texture2DSampled %802 = OpLoad %675 
                                       f32_3 %803 = OpLoad %794 
                                         f32 %804 = OpCompositeExtract %803 2 
                                         f32 %805 = OpImageSampleDrefExplicitLod %802 %803 %804 Lod %6 
                                                      OpStore %801 %805 
                                Private f32* %806 = OpAccessChain %547 %22 
                                         f32 %807 = OpLoad %806 
                                         f32 %808 = OpLoad %687 
                                         f32 %809 = OpFMul %807 %808 
                                Private f32* %810 = OpAccessChain %9 %22 
                                         f32 %811 = OpLoad %810 
                                         f32 %812 = OpFAdd %809 %811 
                                Private f32* %813 = OpAccessChain %9 %22 
                                                      OpStore %813 %812 
                                Private f32* %814 = OpAccessChain %547 %148 
                                         f32 %815 = OpLoad %814 
                                         f32 %816 = OpLoad %801 
                                         f32 %817 = OpFMul %815 %816 
                                Private f32* %818 = OpAccessChain %9 %22 
                                         f32 %819 = OpLoad %818 
                                         f32 %820 = OpFAdd %817 %819 
                                Private f32* %821 = OpAccessChain %9 %22 
                                                      OpStore %821 %820 
                                       f32_4 %822 = OpLoad %48 
                                       f32_2 %823 = OpVectorShuffle %822 %822 0 1 
                              Uniform f32_4* %824 = OpAccessChain %59 %252 
                                       f32_4 %825 = OpLoad %824 
                                       f32_2 %826 = OpVectorShuffle %825 %825 0 1 
                                       f32_2 %827 = OpFMul %823 %826 
                                       f32_4 %828 = OpLoad %645 
                                       f32_2 %829 = OpVectorShuffle %828 %828 3 1 
                                       f32_2 %830 = OpFAdd %827 %829 
                                       f32_3 %831 = OpLoad %692 
                                       f32_3 %832 = OpVectorShuffle %831 %830 3 1 4 
                                                      OpStore %692 %832 
                                Private f32* %833 = OpAccessChain %645 %148 
                                         f32 %834 = OpLoad %833 
                                Private f32* %835 = OpAccessChain %517 %31 
                                                      OpStore %835 %834 
                                       f32_4 %836 = OpLoad %48 
                                       f32_2 %837 = OpVectorShuffle %836 %836 0 1 
                              Uniform f32_4* %838 = OpAccessChain %59 %252 
                                       f32_4 %839 = OpLoad %838 
                                       f32_2 %840 = OpVectorShuffle %839 %839 0 1 
                                       f32_2 %841 = OpFMul %837 %840 
                                       f32_4 %842 = OpLoad %517 
                                       f32_2 %843 = OpVectorShuffle %842 %842 0 2 
                                       f32_2 %844 = OpFAdd %841 %843 
                                                      OpStore %488 %844 
                                       f32_2 %846 = OpLoad %488 
                                         f32 %847 = OpLoad %451 
                                         f32 %848 = OpCompositeExtract %846 0 
                                         f32 %849 = OpCompositeExtract %846 1 
                                       f32_3 %850 = OpCompositeConstruct %848 %849 %847 
                                                      OpStore %845 %850 
                  read_only Texture2DSampled %851 = OpLoad %675 
                                       f32_3 %852 = OpLoad %845 
                                         f32 %853 = OpCompositeExtract %852 2 
                                         f32 %854 = OpImageSampleDrefExplicitLod %851 %852 %853 Lod %6 
                                                      OpStore %735 %854 
                                       f32_3 %856 = OpLoad %692 
                                       f32_2 %857 = OpVectorShuffle %856 %856 0 2 
                                         f32 %858 = OpLoad %451 
                                         f32 %859 = OpCompositeExtract %857 0 
                                         f32 %860 = OpCompositeExtract %857 1 
                                       f32_3 %861 = OpCompositeConstruct %859 %860 %858 
                                                      OpStore %855 %861 
                  read_only Texture2DSampled %862 = OpLoad %675 
                                       f32_3 %863 = OpLoad %855 
                                         f32 %864 = OpCompositeExtract %863 2 
                                         f32 %865 = OpImageSampleDrefExplicitLod %862 %863 %864 Lod %6 
                                                      OpStore %687 %865 
                                Private f32* %866 = OpAccessChain %547 %31 
                                         f32 %867 = OpLoad %866 
                                         f32 %868 = OpLoad %687 
                                         f32 %869 = OpFMul %867 %868 
                                Private f32* %870 = OpAccessChain %9 %22 
                                         f32 %871 = OpLoad %870 
                                         f32 %872 = OpFAdd %869 %871 
                                Private f32* %873 = OpAccessChain %9 %22 
                                                      OpStore %873 %872 
                                Private f32* %874 = OpAccessChain %547 %179 
                                         f32 %875 = OpLoad %874 
                                         f32 %876 = OpLoad %735 
                                         f32 %877 = OpFMul %875 %876 
                                Private f32* %878 = OpAccessChain %9 %22 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpFAdd %877 %879 
                                Private f32* %881 = OpAccessChain %9 %22 
                                                      OpStore %881 %880 
                                       f32_4 %882 = OpLoad %283 
                                       f32_4 %883 = OpLoad %542 
                                       f32_4 %884 = OpVectorShuffle %883 %883 2 2 2 2 
                                       f32_4 %885 = OpFMul %882 %884 
                                                      OpStore %547 %885 
                                       f32_4 %886 = OpLoad %283 
                                       f32_4 %887 = OpLoad %542 
                                       f32_4 %888 = OpVectorShuffle %887 %887 3 3 3 3 
                                       f32_4 %889 = OpFMul %886 %888 
                                                      OpStore %283 %889 
                                Private f32* %890 = OpAccessChain %133 %179 
                                         f32 %891 = OpLoad %890 
                                Private f32* %892 = OpAccessChain %645 %148 
                                                      OpStore %892 %891 
                                       f32_4 %893 = OpLoad %48 
                                       f32_4 %894 = OpVectorShuffle %893 %893 0 1 0 1 
                              Uniform f32_4* %895 = OpAccessChain %59 %252 
                                       f32_4 %896 = OpLoad %895 
                                       f32_4 %897 = OpVectorShuffle %896 %896 0 1 0 1 
                                       f32_4 %898 = OpFMul %894 %897 
                                       f32_4 %899 = OpLoad %645 
                                       f32_4 %900 = OpVectorShuffle %899 %899 0 1 2 1 
                                       f32_4 %901 = OpFAdd %898 %900 
                                                      OpStore %542 %901 
                                       f32_4 %903 = OpLoad %542 
                                       f32_2 %904 = OpVectorShuffle %903 %903 0 1 
                                         f32 %905 = OpLoad %451 
                                         f32 %906 = OpCompositeExtract %904 0 
                                         f32 %907 = OpCompositeExtract %904 1 
                                       f32_3 %908 = OpCompositeConstruct %906 %907 %905 
                                                      OpStore %902 %908 
                  read_only Texture2DSampled %909 = OpLoad %675 
                                       f32_3 %910 = OpLoad %902 
                                         f32 %911 = OpCompositeExtract %910 2 
                                         f32 %912 = OpImageSampleDrefExplicitLod %909 %910 %911 Lod %6 
                                                      OpStore %687 %912 
                                       f32_4 %914 = OpLoad %542 
                                       f32_2 %915 = OpVectorShuffle %914 %914 2 3 
                                         f32 %916 = OpLoad %451 
                                         f32 %917 = OpCompositeExtract %915 0 
                                         f32 %918 = OpCompositeExtract %915 1 
                                       f32_3 %919 = OpCompositeConstruct %917 %918 %916 
                                                      OpStore %913 %919 
                  read_only Texture2DSampled %920 = OpLoad %675 
                                       f32_3 %921 = OpLoad %913 
                                         f32 %922 = OpCompositeExtract %921 2 
                                         f32 %923 = OpImageSampleDrefExplicitLod %920 %921 %922 Lod %6 
                                                      OpStore %801 %923 
                                Private f32* %924 = OpAccessChain %547 %22 
                                         f32 %925 = OpLoad %924 
                                         f32 %926 = OpLoad %687 
                                         f32 %927 = OpFMul %925 %926 
                                Private f32* %928 = OpAccessChain %9 %22 
                                         f32 %929 = OpLoad %928 
                                         f32 %930 = OpFAdd %927 %929 
                                Private f32* %931 = OpAccessChain %9 %22 
                                                      OpStore %931 %930 
                                Private f32* %932 = OpAccessChain %547 %148 
                                         f32 %933 = OpLoad %932 
                                         f32 %934 = OpLoad %801 
                                         f32 %935 = OpFMul %933 %934 
                                Private f32* %936 = OpAccessChain %9 %22 
                                         f32 %937 = OpLoad %936 
                                         f32 %938 = OpFAdd %935 %937 
                                Private f32* %939 = OpAccessChain %9 %22 
                                                      OpStore %939 %938 
                                       f32_4 %940 = OpLoad %48 
                                       f32_2 %941 = OpVectorShuffle %940 %940 0 1 
                              Uniform f32_4* %942 = OpAccessChain %59 %252 
                                       f32_4 %943 = OpLoad %942 
                                       f32_2 %944 = OpVectorShuffle %943 %943 0 1 
                                       f32_2 %945 = OpFMul %941 %944 
                                       f32_4 %946 = OpLoad %645 
                                       f32_2 %947 = OpVectorShuffle %946 %946 3 1 
                                       f32_2 %948 = OpFAdd %945 %947 
                                       f32_3 %949 = OpLoad %692 
                                       f32_3 %950 = OpVectorShuffle %949 %948 3 1 4 
                                                      OpStore %692 %950 
                                       f32_4 %951 = OpLoad %645 
                                       f32_3 %952 = OpVectorShuffle %951 %951 0 2 3 
                                       f32_4 %953 = OpLoad %133 
                                       f32_4 %954 = OpVectorShuffle %953 %952 4 1 5 6 
                                                      OpStore %133 %954 
                                Private f32* %955 = OpAccessChain %645 %148 
                                         f32 %956 = OpLoad %955 
                                Private f32* %957 = OpAccessChain %517 %179 
                                                      OpStore %957 %956 
                                       f32_4 %958 = OpLoad %48 
                                       f32_2 %959 = OpVectorShuffle %958 %958 0 1 
                              Uniform f32_4* %960 = OpAccessChain %59 %252 
                                       f32_4 %961 = OpLoad %960 
                                       f32_2 %962 = OpVectorShuffle %961 %961 0 1 
                                       f32_2 %963 = OpFMul %959 %962 
                                       f32_4 %964 = OpLoad %517 
                                       f32_2 %965 = OpVectorShuffle %964 %964 0 3 
                                       f32_2 %966 = OpFAdd %963 %965 
                                                      OpStore %488 %966 
                                       f32_2 %968 = OpLoad %488 
                                         f32 %969 = OpLoad %451 
                                         f32 %970 = OpCompositeExtract %968 0 
                                         f32 %971 = OpCompositeExtract %968 1 
                                       f32_3 %972 = OpCompositeConstruct %970 %971 %969 
                                                      OpStore %967 %972 
                  read_only Texture2DSampled %973 = OpLoad %675 
                                       f32_3 %974 = OpLoad %967 
                                         f32 %975 = OpCompositeExtract %974 2 
                                         f32 %976 = OpImageSampleDrefExplicitLod %973 %974 %975 Lod %6 
                                                      OpStore %735 %976 
                                       f32_3 %978 = OpLoad %692 
                                       f32_2 %979 = OpVectorShuffle %978 %978 0 2 
                                         f32 %980 = OpLoad %451 
                                         f32 %981 = OpCompositeExtract %979 0 
                                         f32 %982 = OpCompositeExtract %979 1 
                                       f32_3 %983 = OpCompositeConstruct %981 %982 %980 
                                                      OpStore %977 %983 
                  read_only Texture2DSampled %984 = OpLoad %675 
                                       f32_3 %985 = OpLoad %977 
                                         f32 %986 = OpCompositeExtract %985 2 
                                         f32 %987 = OpImageSampleDrefExplicitLod %984 %985 %986 Lod %6 
                                                      OpStore %687 %987 
                                Private f32* %988 = OpAccessChain %547 %31 
                                         f32 %989 = OpLoad %988 
                                         f32 %990 = OpLoad %687 
                                         f32 %991 = OpFMul %989 %990 
                                Private f32* %992 = OpAccessChain %9 %22 
                                         f32 %993 = OpLoad %992 
                                         f32 %994 = OpFAdd %991 %993 
                                Private f32* %995 = OpAccessChain %9 %22 
                                                      OpStore %995 %994 
                                Private f32* %996 = OpAccessChain %547 %179 
                                         f32 %997 = OpLoad %996 
                                         f32 %998 = OpLoad %735 
                                         f32 %999 = OpFMul %997 %998 
                               Private f32* %1000 = OpAccessChain %9 %22 
                                        f32 %1001 = OpLoad %1000 
                                        f32 %1002 = OpFAdd %999 %1001 
                               Private f32* %1003 = OpAccessChain %9 %22 
                                                      OpStore %1003 %1002 
                                      f32_4 %1004 = OpLoad %48 
                                      f32_4 %1005 = OpVectorShuffle %1004 %1004 0 1 0 1 
                             Uniform f32_4* %1006 = OpAccessChain %59 %252 
                                      f32_4 %1007 = OpLoad %1006 
                                      f32_4 %1008 = OpVectorShuffle %1007 %1007 0 1 0 1 
                                      f32_4 %1009 = OpFMul %1005 %1008 
                                      f32_4 %1010 = OpLoad %133 
                                      f32_4 %1011 = OpVectorShuffle %1010 %1010 0 1 2 1 
                                      f32_4 %1012 = OpFAdd %1009 %1011 
                                                      OpStore %542 %1012 
                                      f32_4 %1013 = OpLoad %48 
                                      f32_2 %1014 = OpVectorShuffle %1013 %1013 0 1 
                             Uniform f32_4* %1015 = OpAccessChain %59 %252 
                                      f32_4 %1016 = OpLoad %1015 
                                      f32_2 %1017 = OpVectorShuffle %1016 %1016 0 1 
                                      f32_2 %1018 = OpFMul %1014 %1017 
                                      f32_4 %1019 = OpLoad %133 
                                      f32_2 %1020 = OpVectorShuffle %1019 %1019 3 1 
                                      f32_2 %1021 = OpFAdd %1018 %1020 
                                      f32_3 %1022 = OpLoad %692 
                                      f32_3 %1023 = OpVectorShuffle %1022 %1021 3 1 4 
                                                      OpStore %692 %1023 
                               Private f32* %1024 = OpAccessChain %133 %148 
                                        f32 %1025 = OpLoad %1024 
                               Private f32* %1026 = OpAccessChain %517 %148 
                                                      OpStore %1026 %1025 
                                      f32_4 %1027 = OpLoad %48 
                                      f32_2 %1028 = OpVectorShuffle %1027 %1027 0 1 
                             Uniform f32_4* %1029 = OpAccessChain %59 %252 
                                      f32_4 %1030 = OpLoad %1029 
                                      f32_2 %1031 = OpVectorShuffle %1030 %1030 0 1 
                                      f32_2 %1032 = OpFMul %1028 %1031 
                                      f32_4 %1033 = OpLoad %517 
                                      f32_2 %1034 = OpVectorShuffle %1033 %1033 0 1 
                                      f32_2 %1035 = OpFAdd %1032 %1034 
                                      f32_4 %1036 = OpLoad %48 
                                      f32_4 %1037 = OpVectorShuffle %1036 %1035 4 5 2 3 
                                                      OpStore %48 %1037 
                                      f32_4 %1039 = OpLoad %48 
                                      f32_2 %1040 = OpVectorShuffle %1039 %1039 0 1 
                                        f32 %1041 = OpLoad %451 
                                        f32 %1042 = OpCompositeExtract %1040 0 
                                        f32 %1043 = OpCompositeExtract %1040 1 
                                      f32_3 %1044 = OpCompositeConstruct %1042 %1043 %1041 
                                                      OpStore %1038 %1044 
                 read_only Texture2DSampled %1046 = OpLoad %675 
                                      f32_3 %1047 = OpLoad %1038 
                                        f32 %1048 = OpCompositeExtract %1047 2 
                                        f32 %1049 = OpImageSampleDrefExplicitLod %1046 %1047 %1048 Lod %6 
                                                      OpStore %1045 %1049 
                                      f32_3 %1051 = OpLoad %692 
                                      f32_2 %1052 = OpVectorShuffle %1051 %1051 0 2 
                                        f32 %1053 = OpLoad %451 
                                        f32 %1054 = OpCompositeExtract %1052 0 
                                        f32 %1055 = OpCompositeExtract %1052 1 
                                      f32_3 %1056 = OpCompositeConstruct %1054 %1055 %1053 
                                                      OpStore %1050 %1056 
                 read_only Texture2DSampled %1057 = OpLoad %675 
                                      f32_3 %1058 = OpLoad %1050 
                                        f32 %1059 = OpCompositeExtract %1058 2 
                                        f32 %1060 = OpImageSampleDrefExplicitLod %1057 %1058 %1059 Lod %6 
                                                      OpStore %687 %1060 
                                      f32_4 %1062 = OpLoad %542 
                                      f32_2 %1063 = OpVectorShuffle %1062 %1062 0 1 
                                        f32 %1064 = OpLoad %451 
                                        f32 %1065 = OpCompositeExtract %1063 0 
                                        f32 %1066 = OpCompositeExtract %1063 1 
                                      f32_3 %1067 = OpCompositeConstruct %1065 %1066 %1064 
                                                      OpStore %1061 %1067 
                 read_only Texture2DSampled %1068 = OpLoad %675 
                                      f32_3 %1069 = OpLoad %1061 
                                        f32 %1070 = OpCompositeExtract %1069 2 
                                        f32 %1071 = OpImageSampleDrefExplicitLod %1068 %1069 %1070 Lod %6 
                                                      OpStore %801 %1071 
                                      f32_4 %1073 = OpLoad %542 
                                      f32_2 %1074 = OpVectorShuffle %1073 %1073 2 3 
                                        f32 %1075 = OpLoad %451 
                                        f32 %1076 = OpCompositeExtract %1074 0 
                                        f32 %1077 = OpCompositeExtract %1074 1 
                                      f32_3 %1078 = OpCompositeConstruct %1076 %1077 %1075 
                                                      OpStore %1072 %1078 
                 read_only Texture2DSampled %1080 = OpLoad %675 
                                      f32_3 %1081 = OpLoad %1072 
                                        f32 %1082 = OpCompositeExtract %1081 2 
                                        f32 %1083 = OpImageSampleDrefExplicitLod %1080 %1081 %1082 Lod %6 
                                                      OpStore %1079 %1083 
                               Private f32* %1084 = OpAccessChain %283 %22 
                                        f32 %1085 = OpLoad %1084 
                                        f32 %1086 = OpLoad %801 
                                        f32 %1087 = OpFMul %1085 %1086 
                               Private f32* %1088 = OpAccessChain %9 %22 
                                        f32 %1089 = OpLoad %1088 
                                        f32 %1090 = OpFAdd %1087 %1089 
                               Private f32* %1091 = OpAccessChain %9 %22 
                                                      OpStore %1091 %1090 
                               Private f32* %1092 = OpAccessChain %283 %148 
                                        f32 %1093 = OpLoad %1092 
                                        f32 %1094 = OpLoad %1079 
                                        f32 %1095 = OpFMul %1093 %1094 
                               Private f32* %1096 = OpAccessChain %9 %22 
                                        f32 %1097 = OpLoad %1096 
                                        f32 %1098 = OpFAdd %1095 %1097 
                               Private f32* %1099 = OpAccessChain %9 %22 
                                                      OpStore %1099 %1098 
                               Private f32* %1100 = OpAccessChain %283 %31 
                                        f32 %1101 = OpLoad %1100 
                                        f32 %1102 = OpLoad %687 
                                        f32 %1103 = OpFMul %1101 %1102 
                               Private f32* %1104 = OpAccessChain %9 %22 
                                        f32 %1105 = OpLoad %1104 
                                        f32 %1106 = OpFAdd %1103 %1105 
                               Private f32* %1107 = OpAccessChain %9 %22 
                                                      OpStore %1107 %1106 
                               Private f32* %1108 = OpAccessChain %283 %179 
                                        f32 %1109 = OpLoad %1108 
                                        f32 %1110 = OpLoad %1045 
                                        f32 %1111 = OpFMul %1109 %1110 
                               Private f32* %1112 = OpAccessChain %9 %22 
                                        f32 %1113 = OpLoad %1112 
                                        f32 %1114 = OpFAdd %1111 %1113 
                               Private f32* %1115 = OpAccessChain %9 %22 
                                                      OpStore %1115 %1114 
                               Uniform f32* %1118 = OpAccessChain %59 %234 %22 
                                        f32 %1119 = OpLoad %1118 
                                        f32 %1120 = OpFNegate %1119 
                                        f32 %1121 = OpFAdd %1120 %29 
                                                      OpStore %1116 %1121 
                                      f32_4 %1122 = OpLoad %9 
                                      f32_4 %1123 = OpVectorShuffle %1122 %1122 0 0 0 0 
                                        f32 %1124 = OpLoad %1116 
                                      f32_4 %1125 = OpCompositeConstruct %1124 %1124 %1124 %1124 
                                      f32_4 %1126 = OpFMul %1123 %1125 
                             Uniform f32_4* %1127 = OpAccessChain %59 %234 
                                      f32_4 %1128 = OpLoad %1127 
                                      f32_4 %1129 = OpVectorShuffle %1128 %1128 0 0 0 0 
                                      f32_4 %1130 = OpFAdd %1126 %1129 
                                                      OpStore %9 %1130 
                                      f32_4 %1133 = OpLoad %9 
                                                      OpStore %1132 %1133 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat10_0;
vec4 u_xlat1;
float u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat10_8;
float u_xlat10_16;
vec2 u_xlat17;
float u_xlat10_17;
float u_xlat10_24;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat3.zw = u_xlat4.wy * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat2.w = u_xlat3.z;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat0.x = u_xlat10_0 * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat10_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat10_24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat10_16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat10_1 + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 854
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %850 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %52 ArrayStride 52 
                                                      OpDecorate %53 ArrayStride 53 
                                                      OpDecorate %55 ArrayStride 55 
                                                      OpMemberDecorate %56 0 Offset 56 
                                                      OpMemberDecorate %56 1 Offset 56 
                                                      OpMemberDecorate %56 2 Offset 56 
                                                      OpMemberDecorate %56 3 RelaxedPrecision 
                                                      OpMemberDecorate %56 3 Offset 56 
                                                      OpMemberDecorate %56 4 Offset 56 
                                                      OpDecorate %56 Block 
                                                      OpDecorate %58 DescriptorSet 58 
                                                      OpDecorate %58 Binding 58 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %373 DescriptorSet 373 
                                                      OpDecorate %373 Binding 373 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %560 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %686 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %704 RelaxedPrecision 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %760 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %773 RelaxedPrecision 
                                                      OpDecorate %785 RelaxedPrecision 
                                                      OpDecorate %797 RelaxedPrecision 
                                                      OpDecorate %798 RelaxedPrecision 
                                                      OpDecorate %804 RelaxedPrecision 
                                                      OpDecorate %812 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %828 RelaxedPrecision 
                                                      OpDecorate %834 RelaxedPrecision 
                                                      OpDecorate %837 RelaxedPrecision 
                                                      OpDecorate %838 RelaxedPrecision 
                                                      OpDecorate %839 RelaxedPrecision 
                                                      OpDecorate %842 RelaxedPrecision 
                                                      OpDecorate %846 RelaxedPrecision 
                                                      OpDecorate %847 RelaxedPrecision 
                                                      OpDecorate %850 RelaxedPrecision 
                                                      OpDecorate %850 Location 850 
                                                      OpDecorate %853 RelaxedPrecision 
                                                      OpDecorate %853 DescriptorSet 853 
                                                      OpDecorate %853 Binding 853 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                          u32 %31 = OpConstant 2 
                                              %37 = OpTypeVector %6 3 
                                          f32 %40 = OpConstant 3.674022E-40 
                                        f32_3 %41 = OpConstantComposite %40 %40 %40 
                                          f32 %43 = OpConstant 3.674022E-40 
                                        f32_3 %44 = OpConstantComposite %43 %43 %43 
                               Private f32_4* %48 = OpVariable Private 
                                          u32 %51 = OpConstant 4 
                                              %52 = OpTypeArray %7 %51 
                                              %53 = OpTypeArray %7 %51 
                                          u32 %54 = OpConstant 16 
                                              %55 = OpTypeArray %7 %54 
                                              %56 = OpTypeStruct %52 %53 %55 %7 %7 
                                              %57 = OpTypePointer Uniform %56 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %58 = OpVariable Uniform 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                                          i32 %82 = OpConstant 3 
                                         i32 %160 = OpConstant 4 
                                         f32 %165 = OpConstant 3.674022E-40 
                                       f32_2 %166 = OpConstantComposite %165 %165 
                                             %187 = OpTypePointer Private %17 
                              Private f32_2* %188 = OpVariable Private 
                                       f32_2 %192 = OpConstantComposite %29 %29 
                              Private f32_4* %194 = OpVariable Private 
                                         f32 %197 = OpConstant 3.674022E-40 
                                       f32_2 %198 = OpConstantComposite %197 %197 
                                       f32_2 %211 = OpConstantComposite %40 %40 
                                         f32 %214 = OpConstant 3.674022E-40 
                                       f32_2 %215 = OpConstantComposite %214 %214 
                              Private f32_4* %219 = OpVariable Private 
                                         u32 %222 = OpConstant 1 
                              Private f32_4* %227 = OpVariable Private 
                                       f32_4 %230 = OpConstantComposite %165 %29 %165 %29 
                              Private f32_4* %246 = OpVariable Private 
                              Private f32_4* %251 = OpVariable Private 
                                         f32 %265 = OpConstant 3.674022E-40 
                                       f32_2 %266 = OpConstantComposite %265 %265 
                                         u32 %280 = OpConstant 3 
                                         f32 %284 = OpConstant 3.674022E-40 
                                       f32_2 %285 = OpConstantComposite %284 %214 
                                         f32 %287 = OpConstant 3.674022E-40 
                                       f32_2 %288 = OpConstantComposite %287 %214 
                                       f32_2 %295 = OpConstantComposite %214 %287 
                                         f32 %306 = OpConstant 3.674022E-40 
                                         f32 %307 = OpConstant 3.674022E-40 
                                         f32 %308 = OpConstant 3.674022E-40 
                                       f32_4 %309 = OpConstantComposite %306 %307 %165 %308 
                              Private f32_4* %350 = OpVariable Private 
                                             %360 = OpTypePointer Function %37 
                                Private f32* %369 = OpVariable Private 
                                             %370 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %371 = OpTypeSampledImage %370 
                                             %372 = OpTypePointer UniformConstant %371 
 UniformConstant read_only Texture2DSampled* %373 = OpVariable UniformConstant 
                                Private f32* %386 = OpVariable Private 
                                             %408 = OpTypePointer Private %37 
                              Private f32_3* %409 = OpVariable Private 
                                Private f32* %440 = OpVariable Private 
                                Private f32* %505 = OpVariable Private 
                                Private f32* %760 = OpVariable Private 
                                Private f32* %797 = OpVariable Private 
                                Private f32* %834 = OpVariable Private 
                                             %835 = OpTypePointer Uniform %6 
                                             %849 = OpTypePointer Output %7 
                               Output f32_4* %850 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %853 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %361 = OpVariable Function 
                             Function f32_3* %378 = OpVariable Function 
                             Function f32_3* %433 = OpVariable Function 
                             Function f32_3* %445 = OpVariable Function 
                             Function f32_3* %485 = OpVariable Function 
                             Function f32_3* %497 = OpVariable Function 
                             Function f32_3* %553 = OpVariable Function 
                             Function f32_3* %564 = OpVariable Function 
                             Function f32_3* %604 = OpVariable Function 
                             Function f32_3* %616 = OpVariable Function 
                             Function f32_3* %679 = OpVariable Function 
                             Function f32_3* %690 = OpVariable Function 
                             Function f32_3* %752 = OpVariable Function 
                             Function f32_3* %765 = OpVariable Function 
                             Function f32_3* %777 = OpVariable Function 
                             Function f32_3* %789 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %26 = OpAccessChain %9 %22 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFNegate %27 
                                          f32 %30 = OpFAdd %28 %29 
                                 Private f32* %32 = OpAccessChain %9 %31 
                                                      OpStore %32 %30 
                                        f32_4 %33 = OpLoad %16 
                                        f32_2 %34 = OpVectorShuffle %33 %33 2 3 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpVectorShuffle %35 %34 4 5 2 3 
                                                      OpStore %9 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %42 = OpFMul %39 %41 
                                        f32_3 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 6 3 
                                                      OpStore %9 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %58 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %50 %64 
                                                      OpStore %48 %65 
                               Uniform f32_4* %66 = OpAccessChain %58 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %48 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %48 %72 
                               Uniform f32_4* %74 = OpAccessChain %58 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %48 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %81 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %58 %60 %82 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %81 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_4 %88 = OpLoad %9 
                                        f32_3 %89 = OpVectorShuffle %88 %88 3 3 3 
                                        f32_3 %90 = OpFDiv %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %9 %92 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %58 %61 %61 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %94 %96 
                                                      OpStore %48 %97 
                               Uniform f32_4* %98 = OpAccessChain %58 %61 %60 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %48 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %48 %104 
                              Uniform f32_4* %105 = OpAccessChain %58 %61 %73 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %9 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFNegate %108 
                                       f32_4 %110 = OpFMul %106 %109 
                                       f32_4 %111 = OpLoad %48 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %9 %112 
                                       f32_4 %113 = OpLoad %9 
                              Uniform f32_4* %114 = OpAccessChain %58 %61 %82 
                                       f32_4 %115 = OpLoad %114 
                                       f32_4 %116 = OpFAdd %113 %115 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_3 %118 = OpVectorShuffle %117 %117 1 1 1 
                              Uniform f32_4* %119 = OpAccessChain %58 %73 %61 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFMul %118 %121 
                                       f32_4 %123 = OpLoad %48 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
                                                      OpStore %48 %124 
                              Uniform f32_4* %125 = OpAccessChain %58 %73 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_4 %128 = OpLoad %9 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 0 0 
                                       f32_3 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %48 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFAdd %130 %132 
                                       f32_4 %134 = OpLoad %48 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %48 %135 
                              Uniform f32_4* %136 = OpAccessChain %58 %73 %73 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 2 2 2 
                                       f32_3 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %48 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFAdd %141 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %9 %146 
                              Uniform f32_4* %147 = OpAccessChain %58 %73 %82 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_4 %150 = OpLoad %9 
                                       f32_3 %151 = OpVectorShuffle %150 %150 3 3 3 
                                       f32_3 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFAdd %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %9 %157 
                                       f32_4 %158 = OpLoad %9 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                              Uniform f32_4* %161 = OpAccessChain %58 %160 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 2 3 
                                       f32_2 %164 = OpFMul %159 %163 
                                       f32_2 %167 = OpFAdd %164 %166 
                                       f32_4 %168 = OpLoad %48 
                                       f32_4 %169 = OpVectorShuffle %168 %167 4 5 2 3 
                                                      OpStore %48 %169 
                                       f32_4 %170 = OpLoad %48 
                                       f32_2 %171 = OpVectorShuffle %170 %170 0 1 
                                       f32_2 %172 = OpExtInst %1 8 %171 
                                       f32_4 %173 = OpLoad %48 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 2 3 
                                                      OpStore %48 %174 
                                       f32_4 %175 = OpLoad %9 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                              Uniform f32_4* %177 = OpAccessChain %58 %160 
                                       f32_4 %178 = OpLoad %177 
                                       f32_2 %179 = OpVectorShuffle %178 %178 2 3 
                                       f32_2 %180 = OpFMul %176 %179 
                                       f32_4 %181 = OpLoad %48 
                                       f32_2 %182 = OpVectorShuffle %181 %181 0 1 
                                       f32_2 %183 = OpFNegate %182 
                                       f32_2 %184 = OpFAdd %180 %183 
                                       f32_4 %185 = OpLoad %9 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 2 3 
                                                      OpStore %9 %186 
                                       f32_4 %189 = OpLoad %9 
                                       f32_2 %190 = OpVectorShuffle %189 %189 0 1 
                                       f32_2 %191 = OpFNegate %190 
                                       f32_2 %193 = OpFAdd %191 %192 
                                                      OpStore %188 %193 
                                       f32_4 %195 = OpLoad %9 
                                       f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                                       f32_2 %199 = OpExtInst %1 37 %196 %198 
                                       f32_4 %200 = OpLoad %194 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 2 3 
                                                      OpStore %194 %201 
                                       f32_4 %202 = OpLoad %194 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                                       f32_2 %204 = OpFNegate %203 
                                       f32_4 %205 = OpLoad %194 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                                       f32_2 %207 = OpFMul %204 %206 
                                       f32_2 %208 = OpLoad %188 
                                       f32_2 %209 = OpFAdd %207 %208 
                                                      OpStore %188 %209 
                                       f32_2 %210 = OpLoad %188 
                                       f32_2 %212 = OpFAdd %210 %211 
                                                      OpStore %188 %212 
                                       f32_2 %213 = OpLoad %188 
                                       f32_2 %216 = OpFMul %213 %215 
                                       f32_4 %217 = OpLoad %194 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 2 3 
                                                      OpStore %194 %218 
                                Private f32* %220 = OpAccessChain %194 %22 
                                         f32 %221 = OpLoad %220 
                                Private f32* %223 = OpAccessChain %219 %222 
                                                      OpStore %223 %221 
                                       f32_4 %224 = OpLoad %9 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 1 
                                       f32_2 %226 = OpExtInst %1 40 %225 %198 
                                                      OpStore %188 %226 
                                       f32_4 %228 = OpLoad %9 
                                       f32_4 %229 = OpVectorShuffle %228 %228 0 0 1 1 
                                       f32_4 %231 = OpFAdd %229 %230 
                                                      OpStore %227 %231 
                                       f32_2 %232 = OpLoad %188 
                                       f32_2 %233 = OpFNegate %232 
                                       f32_2 %234 = OpLoad %188 
                                       f32_2 %235 = OpFMul %233 %234 
                                       f32_4 %236 = OpLoad %227 
                                       f32_2 %237 = OpVectorShuffle %236 %236 1 3 
                                       f32_2 %238 = OpFAdd %235 %237 
                                                      OpStore %188 %238 
                                       f32_4 %239 = OpLoad %227 
                                       f32_4 %240 = OpVectorShuffle %239 %239 0 0 2 2 
                                       f32_4 %241 = OpLoad %227 
                                       f32_4 %242 = OpVectorShuffle %241 %241 0 0 2 2 
                                       f32_4 %243 = OpFMul %240 %242 
                                                      OpStore %227 %243 
                                       f32_2 %244 = OpLoad %188 
                                       f32_2 %245 = OpFAdd %244 %211 
                                                      OpStore %188 %245 
                                Private f32* %247 = OpAccessChain %188 %22 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %248 %214 
                                Private f32* %250 = OpAccessChain %246 %31 
                                                      OpStore %250 %249 
                                Private f32* %252 = OpAccessChain %188 %222 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %253 %214 
                                Private f32* %255 = OpAccessChain %251 %31 
                                                      OpStore %255 %254 
                                       f32_4 %256 = OpLoad %227 
                                       f32_2 %257 = OpVectorShuffle %256 %256 0 2 
                                       f32_2 %258 = OpFMul %257 %166 
                                       f32_4 %259 = OpLoad %9 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_2 %261 = OpFNegate %260 
                                       f32_2 %262 = OpFAdd %258 %261 
                                                      OpStore %188 %262 
                                       f32_4 %263 = OpLoad %227 
                                       f32_2 %264 = OpVectorShuffle %263 %263 3 1 
                                       f32_2 %267 = OpFMul %264 %266 
                                       f32_4 %268 = OpLoad %219 
                                       f32_4 %269 = OpVectorShuffle %268 %267 0 1 4 5 
                                                      OpStore %219 %269 
                                       f32_2 %270 = OpLoad %188 
                                       f32_2 %271 = OpVectorShuffle %270 %270 1 0 
                                       f32_2 %272 = OpFMul %271 %215 
                                       f32_4 %273 = OpLoad %251 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 3 
                                                      OpStore %251 %274 
                                Private f32* %275 = OpAccessChain %251 %222 
                                         f32 %276 = OpLoad %275 
                                Private f32* %277 = OpAccessChain %246 %22 
                                                      OpStore %277 %276 
                                Private f32* %278 = OpAccessChain %219 %31 
                                         f32 %279 = OpLoad %278 
                                Private f32* %281 = OpAccessChain %194 %280 
                                                      OpStore %281 %279 
                                       f32_4 %282 = OpLoad %9 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 0 
                                       f32_2 %286 = OpFMul %283 %285 
                                       f32_2 %289 = OpFAdd %286 %288 
                                       f32_4 %290 = OpLoad %246 
                                       f32_4 %291 = OpVectorShuffle %290 %289 0 4 2 5 
                                                      OpStore %246 %291 
                                       f32_4 %292 = OpLoad %9 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 0 
                                       f32_2 %294 = OpFMul %293 %285 
                                       f32_2 %296 = OpFAdd %294 %295 
                                       f32_4 %297 = OpLoad %219 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 1 5 3 
                                                      OpStore %219 %298 
                                       f32_4 %299 = OpLoad %219 
                                       f32_4 %300 = OpLoad %246 
                                       f32_4 %301 = OpFAdd %299 %300 
                                                      OpStore %227 %301 
                                       f32_4 %302 = OpLoad %219 
                                       f32_4 %303 = OpLoad %227 
                                       f32_4 %304 = OpFDiv %302 %303 
                                                      OpStore %219 %304 
                                       f32_4 %305 = OpLoad %219 
                                       f32_4 %310 = OpFAdd %305 %309 
                                                      OpStore %219 %310 
                                       f32_4 %311 = OpLoad %219 
                                       f32_4 %312 = OpVectorShuffle %311 %311 3 0 1 2 
                              Uniform f32_4* %313 = OpAccessChain %58 %160 
                                       f32_4 %314 = OpLoad %313 
                                       f32_4 %315 = OpVectorShuffle %314 %314 0 0 0 0 
                                       f32_4 %316 = OpFMul %312 %315 
                                                      OpStore %219 %316 
                                       f32_4 %317 = OpLoad %219 
                                       f32_3 %318 = OpVectorShuffle %317 %317 1 2 3 
                                       f32_4 %319 = OpLoad %246 
                                       f32_4 %320 = OpVectorShuffle %319 %318 4 1 5 6 
                                                      OpStore %246 %320 
                                       f32_4 %321 = OpLoad %9 
                                       f32_2 %322 = OpVectorShuffle %321 %321 1 1 
                                       f32_2 %323 = OpFMul %322 %285 
                                       f32_2 %324 = OpFAdd %323 %288 
                                       f32_4 %325 = OpLoad %251 
                                       f32_4 %326 = OpVectorShuffle %325 %324 0 4 2 5 
                                                      OpStore %251 %326 
                                       f32_4 %327 = OpLoad %9 
                                       f32_2 %328 = OpVectorShuffle %327 %327 1 1 
                                       f32_2 %329 = OpFMul %328 %285 
                                       f32_2 %330 = OpFAdd %329 %295 
                                       f32_4 %331 = OpLoad %194 
                                       f32_4 %332 = OpVectorShuffle %331 %330 4 1 5 3 
                                                      OpStore %194 %332 
                                       f32_4 %333 = OpLoad %194 
                                       f32_4 %334 = OpLoad %251 
                                       f32_4 %335 = OpFAdd %333 %334 
                                                      OpStore %251 %335 
                                       f32_4 %336 = OpLoad %194 
                                       f32_4 %337 = OpLoad %251 
                                       f32_4 %338 = OpFDiv %336 %337 
                                                      OpStore %194 %338 
                                       f32_4 %339 = OpLoad %194 
                                       f32_4 %340 = OpFAdd %339 %309 
                                                      OpStore %194 %340 
                                       f32_4 %341 = OpLoad %194 
                                       f32_4 %342 = OpVectorShuffle %341 %341 0 3 1 2 
                              Uniform f32_4* %343 = OpAccessChain %58 %160 
                                       f32_4 %344 = OpLoad %343 
                                       f32_4 %345 = OpVectorShuffle %344 %344 1 1 1 1 
                                       f32_4 %346 = OpFMul %342 %345 
                                                      OpStore %194 %346 
                                Private f32* %347 = OpAccessChain %194 %22 
                                         f32 %348 = OpLoad %347 
                                Private f32* %349 = OpAccessChain %246 %222 
                                                      OpStore %349 %348 
                                       f32_4 %351 = OpLoad %48 
                                       f32_4 %352 = OpVectorShuffle %351 %351 0 1 0 1 
                              Uniform f32_4* %353 = OpAccessChain %58 %160 
                                       f32_4 %354 = OpLoad %353 
                                       f32_4 %355 = OpVectorShuffle %354 %354 0 1 0 1 
                                       f32_4 %356 = OpFMul %352 %355 
                                       f32_4 %357 = OpLoad %246 
                                       f32_4 %358 = OpVectorShuffle %357 %357 0 1 2 1 
                                       f32_4 %359 = OpFAdd %356 %358 
                                                      OpStore %350 %359 
                                       f32_4 %362 = OpLoad %350 
                                       f32_2 %363 = OpVectorShuffle %362 %362 2 3 
                                Private f32* %364 = OpAccessChain %9 %31 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpCompositeExtract %363 0 
                                         f32 %367 = OpCompositeExtract %363 1 
                                       f32_3 %368 = OpCompositeConstruct %366 %367 %365 
                                                      OpStore %361 %368 
                  read_only Texture2DSampled %374 = OpLoad %373 
                                       f32_3 %375 = OpLoad %361 
                                         f32 %376 = OpCompositeExtract %375 2 
                                         f32 %377 = OpImageSampleDrefExplicitLod %374 %375 %376 Lod %6 
                                                      OpStore %369 %377 
                                       f32_4 %379 = OpLoad %350 
                                       f32_2 %380 = OpVectorShuffle %379 %379 0 1 
                                Private f32* %381 = OpAccessChain %9 %31 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpCompositeExtract %380 0 
                                         f32 %384 = OpCompositeExtract %380 1 
                                       f32_3 %385 = OpCompositeConstruct %383 %384 %382 
                                                      OpStore %378 %385 
                  read_only Texture2DSampled %387 = OpLoad %373 
                                       f32_3 %388 = OpLoad %378 
                                         f32 %389 = OpCompositeExtract %388 2 
                                         f32 %390 = OpImageSampleDrefExplicitLod %387 %388 %389 Lod %6 
                                                      OpStore %386 %390 
                                       f32_4 %391 = OpLoad %227 
                                       f32_4 %392 = OpLoad %251 
                                       f32_4 %393 = OpVectorShuffle %392 %392 0 0 0 0 
                                       f32_4 %394 = OpFMul %391 %393 
                                                      OpStore %350 %394 
                                         f32 %395 = OpLoad %369 
                                Private f32* %396 = OpAccessChain %350 %222 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFMul %395 %397 
                                Private f32* %399 = OpAccessChain %9 %22 
                                                      OpStore %399 %398 
                                Private f32* %400 = OpAccessChain %350 %22 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpLoad %386 
                                         f32 %403 = OpFMul %401 %402 
                                Private f32* %404 = OpAccessChain %9 %22 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFAdd %403 %405 
                                Private f32* %407 = OpAccessChain %9 %22 
                                                      OpStore %407 %406 
                                       f32_4 %410 = OpLoad %48 
                                       f32_2 %411 = OpVectorShuffle %410 %410 0 1 
                              Uniform f32_4* %412 = OpAccessChain %58 %160 
                                       f32_4 %413 = OpLoad %412 
                                       f32_2 %414 = OpVectorShuffle %413 %413 0 1 
                                       f32_2 %415 = OpFMul %411 %414 
                                       f32_4 %416 = OpLoad %246 
                                       f32_2 %417 = OpVectorShuffle %416 %416 3 1 
                                       f32_2 %418 = OpFAdd %415 %417 
                                       f32_3 %419 = OpLoad %409 
                                       f32_3 %420 = OpVectorShuffle %419 %418 3 1 4 
                                                      OpStore %409 %420 
                                Private f32* %421 = OpAccessChain %246 %222 
                                         f32 %422 = OpLoad %421 
                                Private f32* %423 = OpAccessChain %219 %222 
                                                      OpStore %423 %422 
                                       f32_4 %424 = OpLoad %48 
                                       f32_2 %425 = OpVectorShuffle %424 %424 0 1 
                              Uniform f32_4* %426 = OpAccessChain %58 %160 
                                       f32_4 %427 = OpLoad %426 
                                       f32_2 %428 = OpVectorShuffle %427 %427 0 1 
                                       f32_2 %429 = OpFMul %425 %428 
                                       f32_4 %430 = OpLoad %219 
                                       f32_2 %431 = OpVectorShuffle %430 %430 0 1 
                                       f32_2 %432 = OpFAdd %429 %431 
                                                      OpStore %188 %432 
                                       f32_2 %434 = OpLoad %188 
                                Private f32* %435 = OpAccessChain %9 %31 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpCompositeExtract %434 0 
                                         f32 %438 = OpCompositeExtract %434 1 
                                       f32_3 %439 = OpCompositeConstruct %437 %438 %436 
                                                      OpStore %433 %439 
                  read_only Texture2DSampled %441 = OpLoad %373 
                                       f32_3 %442 = OpLoad %433 
                                         f32 %443 = OpCompositeExtract %442 2 
                                         f32 %444 = OpImageSampleDrefExplicitLod %441 %442 %443 Lod %6 
                                                      OpStore %440 %444 
                                       f32_3 %446 = OpLoad %409 
                                       f32_2 %447 = OpVectorShuffle %446 %446 0 2 
                                Private f32* %448 = OpAccessChain %9 %31 
                                         f32 %449 = OpLoad %448 
                                         f32 %450 = OpCompositeExtract %447 0 
                                         f32 %451 = OpCompositeExtract %447 1 
                                       f32_3 %452 = OpCompositeConstruct %450 %451 %449 
                                                      OpStore %445 %452 
                  read_only Texture2DSampled %453 = OpLoad %373 
                                       f32_3 %454 = OpLoad %445 
                                         f32 %455 = OpCompositeExtract %454 2 
                                         f32 %456 = OpImageSampleDrefExplicitLod %453 %454 %455 Lod %6 
                                                      OpStore %386 %456 
                                Private f32* %457 = OpAccessChain %350 %31 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpLoad %386 
                                         f32 %460 = OpFMul %458 %459 
                                Private f32* %461 = OpAccessChain %9 %22 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFAdd %460 %462 
                                Private f32* %464 = OpAccessChain %9 %22 
                                                      OpStore %464 %463 
                                Private f32* %465 = OpAccessChain %350 %280 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpLoad %440 
                                         f32 %468 = OpFMul %466 %467 
                                Private f32* %469 = OpAccessChain %9 %22 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpFAdd %468 %470 
                                Private f32* %472 = OpAccessChain %9 %22 
                                                      OpStore %472 %471 
                                Private f32* %473 = OpAccessChain %194 %31 
                                         f32 %474 = OpLoad %473 
                                Private f32* %475 = OpAccessChain %246 %222 
                                                      OpStore %475 %474 
                                       f32_4 %476 = OpLoad %48 
                                       f32_4 %477 = OpVectorShuffle %476 %476 0 1 0 1 
                              Uniform f32_4* %478 = OpAccessChain %58 %160 
                                       f32_4 %479 = OpLoad %478 
                                       f32_4 %480 = OpVectorShuffle %479 %479 0 1 0 1 
                                       f32_4 %481 = OpFMul %477 %480 
                                       f32_4 %482 = OpLoad %246 
                                       f32_4 %483 = OpVectorShuffle %482 %482 0 1 2 1 
                                       f32_4 %484 = OpFAdd %481 %483 
                                                      OpStore %350 %484 
                                       f32_4 %486 = OpLoad %350 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                                Private f32* %488 = OpAccessChain %9 %31 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpCompositeExtract %487 0 
                                         f32 %491 = OpCompositeExtract %487 1 
                                       f32_3 %492 = OpCompositeConstruct %490 %491 %489 
                                                      OpStore %485 %492 
                  read_only Texture2DSampled %493 = OpLoad %373 
                                       f32_3 %494 = OpLoad %485 
                                         f32 %495 = OpCompositeExtract %494 2 
                                         f32 %496 = OpImageSampleDrefExplicitLod %493 %494 %495 Lod %6 
                                                      OpStore %386 %496 
                                       f32_4 %498 = OpLoad %350 
                                       f32_2 %499 = OpVectorShuffle %498 %498 2 3 
                                Private f32* %500 = OpAccessChain %9 %31 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpCompositeExtract %499 0 
                                         f32 %503 = OpCompositeExtract %499 1 
                                       f32_3 %504 = OpCompositeConstruct %502 %503 %501 
                                                      OpStore %497 %504 
                  read_only Texture2DSampled %506 = OpLoad %373 
                                       f32_3 %507 = OpLoad %497 
                                         f32 %508 = OpCompositeExtract %507 2 
                                         f32 %509 = OpImageSampleDrefExplicitLod %506 %507 %508 Lod %6 
                                                      OpStore %505 %509 
                                       f32_4 %510 = OpLoad %227 
                                       f32_4 %511 = OpLoad %251 
                                       f32_4 %512 = OpVectorShuffle %511 %511 1 1 1 1 
                                       f32_4 %513 = OpFMul %510 %512 
                                                      OpStore %350 %513 
                                Private f32* %514 = OpAccessChain %350 %22 
                                         f32 %515 = OpLoad %514 
                                         f32 %516 = OpLoad %386 
                                         f32 %517 = OpFMul %515 %516 
                                Private f32* %518 = OpAccessChain %9 %22 
                                         f32 %519 = OpLoad %518 
                                         f32 %520 = OpFAdd %517 %519 
                                Private f32* %521 = OpAccessChain %9 %22 
                                                      OpStore %521 %520 
                                Private f32* %522 = OpAccessChain %350 %222 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpLoad %505 
                                         f32 %525 = OpFMul %523 %524 
                                Private f32* %526 = OpAccessChain %9 %22 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpFAdd %525 %527 
                                Private f32* %529 = OpAccessChain %9 %22 
                                                      OpStore %529 %528 
                                       f32_4 %530 = OpLoad %48 
                                       f32_2 %531 = OpVectorShuffle %530 %530 0 1 
                              Uniform f32_4* %532 = OpAccessChain %58 %160 
                                       f32_4 %533 = OpLoad %532 
                                       f32_2 %534 = OpVectorShuffle %533 %533 0 1 
                                       f32_2 %535 = OpFMul %531 %534 
                                       f32_4 %536 = OpLoad %246 
                                       f32_2 %537 = OpVectorShuffle %536 %536 3 1 
                                       f32_2 %538 = OpFAdd %535 %537 
                                       f32_3 %539 = OpLoad %409 
                                       f32_3 %540 = OpVectorShuffle %539 %538 3 1 4 
                                                      OpStore %409 %540 
                                Private f32* %541 = OpAccessChain %246 %222 
                                         f32 %542 = OpLoad %541 
                                Private f32* %543 = OpAccessChain %219 %31 
                                                      OpStore %543 %542 
                                       f32_4 %544 = OpLoad %48 
                                       f32_2 %545 = OpVectorShuffle %544 %544 0 1 
                              Uniform f32_4* %546 = OpAccessChain %58 %160 
                                       f32_4 %547 = OpLoad %546 
                                       f32_2 %548 = OpVectorShuffle %547 %547 0 1 
                                       f32_2 %549 = OpFMul %545 %548 
                                       f32_4 %550 = OpLoad %219 
                                       f32_2 %551 = OpVectorShuffle %550 %550 0 2 
                                       f32_2 %552 = OpFAdd %549 %551 
                                                      OpStore %188 %552 
                                       f32_2 %554 = OpLoad %188 
                                Private f32* %555 = OpAccessChain %9 %31 
                                         f32 %556 = OpLoad %555 
                                         f32 %557 = OpCompositeExtract %554 0 
                                         f32 %558 = OpCompositeExtract %554 1 
                                       f32_3 %559 = OpCompositeConstruct %557 %558 %556 
                                                      OpStore %553 %559 
                  read_only Texture2DSampled %560 = OpLoad %373 
                                       f32_3 %561 = OpLoad %553 
                                         f32 %562 = OpCompositeExtract %561 2 
                                         f32 %563 = OpImageSampleDrefExplicitLod %560 %561 %562 Lod %6 
                                                      OpStore %440 %563 
                                       f32_3 %565 = OpLoad %409 
                                       f32_2 %566 = OpVectorShuffle %565 %565 0 2 
                                Private f32* %567 = OpAccessChain %9 %31 
                                         f32 %568 = OpLoad %567 
                                         f32 %569 = OpCompositeExtract %566 0 
                                         f32 %570 = OpCompositeExtract %566 1 
                                       f32_3 %571 = OpCompositeConstruct %569 %570 %568 
                                                      OpStore %564 %571 
                  read_only Texture2DSampled %572 = OpLoad %373 
                                       f32_3 %573 = OpLoad %564 
                                         f32 %574 = OpCompositeExtract %573 2 
                                         f32 %575 = OpImageSampleDrefExplicitLod %572 %573 %574 Lod %6 
                                                      OpStore %386 %575 
                                Private f32* %576 = OpAccessChain %350 %31 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpLoad %386 
                                         f32 %579 = OpFMul %577 %578 
                                Private f32* %580 = OpAccessChain %9 %22 
                                         f32 %581 = OpLoad %580 
                                         f32 %582 = OpFAdd %579 %581 
                                Private f32* %583 = OpAccessChain %9 %22 
                                                      OpStore %583 %582 
                                Private f32* %584 = OpAccessChain %350 %280 
                                         f32 %585 = OpLoad %584 
                                         f32 %586 = OpLoad %440 
                                         f32 %587 = OpFMul %585 %586 
                                Private f32* %588 = OpAccessChain %9 %22 
                                         f32 %589 = OpLoad %588 
                                         f32 %590 = OpFAdd %587 %589 
                                Private f32* %591 = OpAccessChain %9 %22 
                                                      OpStore %591 %590 
                                Private f32* %592 = OpAccessChain %194 %280 
                                         f32 %593 = OpLoad %592 
                                Private f32* %594 = OpAccessChain %246 %222 
                                                      OpStore %594 %593 
                                       f32_4 %595 = OpLoad %48 
                                       f32_4 %596 = OpVectorShuffle %595 %595 0 1 0 1 
                              Uniform f32_4* %597 = OpAccessChain %58 %160 
                                       f32_4 %598 = OpLoad %597 
                                       f32_4 %599 = OpVectorShuffle %598 %598 0 1 0 1 
                                       f32_4 %600 = OpFMul %596 %599 
                                       f32_4 %601 = OpLoad %246 
                                       f32_4 %602 = OpVectorShuffle %601 %601 0 1 2 1 
                                       f32_4 %603 = OpFAdd %600 %602 
                                                      OpStore %350 %603 
                                       f32_4 %605 = OpLoad %350 
                                       f32_2 %606 = OpVectorShuffle %605 %605 0 1 
                                Private f32* %607 = OpAccessChain %9 %31 
                                         f32 %608 = OpLoad %607 
                                         f32 %609 = OpCompositeExtract %606 0 
                                         f32 %610 = OpCompositeExtract %606 1 
                                       f32_3 %611 = OpCompositeConstruct %609 %610 %608 
                                                      OpStore %604 %611 
                  read_only Texture2DSampled %612 = OpLoad %373 
                                       f32_3 %613 = OpLoad %604 
                                         f32 %614 = OpCompositeExtract %613 2 
                                         f32 %615 = OpImageSampleDrefExplicitLod %612 %613 %614 Lod %6 
                                                      OpStore %386 %615 
                                       f32_4 %617 = OpLoad %350 
                                       f32_2 %618 = OpVectorShuffle %617 %617 2 3 
                                Private f32* %619 = OpAccessChain %9 %31 
                                         f32 %620 = OpLoad %619 
                                         f32 %621 = OpCompositeExtract %618 0 
                                         f32 %622 = OpCompositeExtract %618 1 
                                       f32_3 %623 = OpCompositeConstruct %621 %622 %620 
                                                      OpStore %616 %623 
                  read_only Texture2DSampled %624 = OpLoad %373 
                                       f32_3 %625 = OpLoad %616 
                                         f32 %626 = OpCompositeExtract %625 2 
                                         f32 %627 = OpImageSampleDrefExplicitLod %624 %625 %626 Lod %6 
                                                      OpStore %505 %627 
                                       f32_4 %628 = OpLoad %227 
                                       f32_4 %629 = OpLoad %251 
                                       f32_4 %630 = OpVectorShuffle %629 %629 2 2 2 2 
                                       f32_4 %631 = OpFMul %628 %630 
                                                      OpStore %350 %631 
                                       f32_4 %632 = OpLoad %227 
                                       f32_4 %633 = OpLoad %251 
                                       f32_4 %634 = OpVectorShuffle %633 %633 3 3 3 3 
                                       f32_4 %635 = OpFMul %632 %634 
                                                      OpStore %227 %635 
                                Private f32* %636 = OpAccessChain %350 %22 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpLoad %386 
                                         f32 %639 = OpFMul %637 %638 
                                Private f32* %640 = OpAccessChain %9 %22 
                                         f32 %641 = OpLoad %640 
                                         f32 %642 = OpFAdd %639 %641 
                                Private f32* %643 = OpAccessChain %9 %22 
                                                      OpStore %643 %642 
                                Private f32* %644 = OpAccessChain %350 %222 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpLoad %505 
                                         f32 %647 = OpFMul %645 %646 
                                Private f32* %648 = OpAccessChain %9 %22 
                                         f32 %649 = OpLoad %648 
                                         f32 %650 = OpFAdd %647 %649 
                                Private f32* %651 = OpAccessChain %9 %22 
                                                      OpStore %651 %650 
                                       f32_4 %652 = OpLoad %48 
                                       f32_2 %653 = OpVectorShuffle %652 %652 0 1 
                              Uniform f32_4* %654 = OpAccessChain %58 %160 
                                       f32_4 %655 = OpLoad %654 
                                       f32_2 %656 = OpVectorShuffle %655 %655 0 1 
                                       f32_2 %657 = OpFMul %653 %656 
                                       f32_4 %658 = OpLoad %246 
                                       f32_2 %659 = OpVectorShuffle %658 %658 3 1 
                                       f32_2 %660 = OpFAdd %657 %659 
                                       f32_3 %661 = OpLoad %409 
                                       f32_3 %662 = OpVectorShuffle %661 %660 3 1 4 
                                                      OpStore %409 %662 
                                       f32_4 %663 = OpLoad %246 
                                       f32_3 %664 = OpVectorShuffle %663 %663 0 2 3 
                                       f32_4 %665 = OpLoad %194 
                                       f32_4 %666 = OpVectorShuffle %665 %664 4 1 5 6 
                                                      OpStore %194 %666 
                                Private f32* %667 = OpAccessChain %246 %222 
                                         f32 %668 = OpLoad %667 
                                Private f32* %669 = OpAccessChain %219 %280 
                                                      OpStore %669 %668 
                                       f32_4 %670 = OpLoad %48 
                                       f32_2 %671 = OpVectorShuffle %670 %670 0 1 
                              Uniform f32_4* %672 = OpAccessChain %58 %160 
                                       f32_4 %673 = OpLoad %672 
                                       f32_2 %674 = OpVectorShuffle %673 %673 0 1 
                                       f32_2 %675 = OpFMul %671 %674 
                                       f32_4 %676 = OpLoad %219 
                                       f32_2 %677 = OpVectorShuffle %676 %676 0 3 
                                       f32_2 %678 = OpFAdd %675 %677 
                                                      OpStore %188 %678 
                                       f32_2 %680 = OpLoad %188 
                                Private f32* %681 = OpAccessChain %9 %31 
                                         f32 %682 = OpLoad %681 
                                         f32 %683 = OpCompositeExtract %680 0 
                                         f32 %684 = OpCompositeExtract %680 1 
                                       f32_3 %685 = OpCompositeConstruct %683 %684 %682 
                                                      OpStore %679 %685 
                  read_only Texture2DSampled %686 = OpLoad %373 
                                       f32_3 %687 = OpLoad %679 
                                         f32 %688 = OpCompositeExtract %687 2 
                                         f32 %689 = OpImageSampleDrefExplicitLod %686 %687 %688 Lod %6 
                                                      OpStore %440 %689 
                                       f32_3 %691 = OpLoad %409 
                                       f32_2 %692 = OpVectorShuffle %691 %691 0 2 
                                Private f32* %693 = OpAccessChain %9 %31 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpCompositeExtract %692 0 
                                         f32 %696 = OpCompositeExtract %692 1 
                                       f32_3 %697 = OpCompositeConstruct %695 %696 %694 
                                                      OpStore %690 %697 
                  read_only Texture2DSampled %698 = OpLoad %373 
                                       f32_3 %699 = OpLoad %690 
                                         f32 %700 = OpCompositeExtract %699 2 
                                         f32 %701 = OpImageSampleDrefExplicitLod %698 %699 %700 Lod %6 
                                                      OpStore %386 %701 
                                Private f32* %702 = OpAccessChain %350 %31 
                                         f32 %703 = OpLoad %702 
                                         f32 %704 = OpLoad %386 
                                         f32 %705 = OpFMul %703 %704 
                                Private f32* %706 = OpAccessChain %9 %22 
                                         f32 %707 = OpLoad %706 
                                         f32 %708 = OpFAdd %705 %707 
                                Private f32* %709 = OpAccessChain %9 %22 
                                                      OpStore %709 %708 
                                Private f32* %710 = OpAccessChain %350 %280 
                                         f32 %711 = OpLoad %710 
                                         f32 %712 = OpLoad %440 
                                         f32 %713 = OpFMul %711 %712 
                                Private f32* %714 = OpAccessChain %9 %22 
                                         f32 %715 = OpLoad %714 
                                         f32 %716 = OpFAdd %713 %715 
                                Private f32* %717 = OpAccessChain %9 %22 
                                                      OpStore %717 %716 
                                       f32_4 %718 = OpLoad %48 
                                       f32_4 %719 = OpVectorShuffle %718 %718 0 1 0 1 
                              Uniform f32_4* %720 = OpAccessChain %58 %160 
                                       f32_4 %721 = OpLoad %720 
                                       f32_4 %722 = OpVectorShuffle %721 %721 0 1 0 1 
                                       f32_4 %723 = OpFMul %719 %722 
                                       f32_4 %724 = OpLoad %194 
                                       f32_4 %725 = OpVectorShuffle %724 %724 0 1 2 1 
                                       f32_4 %726 = OpFAdd %723 %725 
                                                      OpStore %246 %726 
                                       f32_4 %727 = OpLoad %48 
                                       f32_2 %728 = OpVectorShuffle %727 %727 0 1 
                              Uniform f32_4* %729 = OpAccessChain %58 %160 
                                       f32_4 %730 = OpLoad %729 
                                       f32_2 %731 = OpVectorShuffle %730 %730 0 1 
                                       f32_2 %732 = OpFMul %728 %731 
                                       f32_4 %733 = OpLoad %194 
                                       f32_2 %734 = OpVectorShuffle %733 %733 3 1 
                                       f32_2 %735 = OpFAdd %732 %734 
                                       f32_3 %736 = OpLoad %409 
                                       f32_3 %737 = OpVectorShuffle %736 %735 3 1 4 
                                                      OpStore %409 %737 
                                Private f32* %738 = OpAccessChain %194 %222 
                                         f32 %739 = OpLoad %738 
                                Private f32* %740 = OpAccessChain %219 %222 
                                                      OpStore %740 %739 
                                       f32_4 %741 = OpLoad %48 
                                       f32_2 %742 = OpVectorShuffle %741 %741 0 1 
                              Uniform f32_4* %743 = OpAccessChain %58 %160 
                                       f32_4 %744 = OpLoad %743 
                                       f32_2 %745 = OpVectorShuffle %744 %744 0 1 
                                       f32_2 %746 = OpFMul %742 %745 
                                       f32_4 %747 = OpLoad %219 
                                       f32_2 %748 = OpVectorShuffle %747 %747 0 1 
                                       f32_2 %749 = OpFAdd %746 %748 
                                       f32_4 %750 = OpLoad %48 
                                       f32_4 %751 = OpVectorShuffle %750 %749 4 5 2 3 
                                                      OpStore %48 %751 
                                       f32_4 %753 = OpLoad %48 
                                       f32_2 %754 = OpVectorShuffle %753 %753 0 1 
                                Private f32* %755 = OpAccessChain %9 %31 
                                         f32 %756 = OpLoad %755 
                                         f32 %757 = OpCompositeExtract %754 0 
                                         f32 %758 = OpCompositeExtract %754 1 
                                       f32_3 %759 = OpCompositeConstruct %757 %758 %756 
                                                      OpStore %752 %759 
                  read_only Texture2DSampled %761 = OpLoad %373 
                                       f32_3 %762 = OpLoad %752 
                                         f32 %763 = OpCompositeExtract %762 2 
                                         f32 %764 = OpImageSampleDrefExplicitLod %761 %762 %763 Lod %6 
                                                      OpStore %760 %764 
                                       f32_3 %766 = OpLoad %409 
                                       f32_2 %767 = OpVectorShuffle %766 %766 0 2 
                                Private f32* %768 = OpAccessChain %9 %31 
                                         f32 %769 = OpLoad %768 
                                         f32 %770 = OpCompositeExtract %767 0 
                                         f32 %771 = OpCompositeExtract %767 1 
                                       f32_3 %772 = OpCompositeConstruct %770 %771 %769 
                                                      OpStore %765 %772 
                  read_only Texture2DSampled %773 = OpLoad %373 
                                       f32_3 %774 = OpLoad %765 
                                         f32 %775 = OpCompositeExtract %774 2 
                                         f32 %776 = OpImageSampleDrefExplicitLod %773 %774 %775 Lod %6 
                                                      OpStore %386 %776 
                                       f32_4 %778 = OpLoad %246 
                                       f32_2 %779 = OpVectorShuffle %778 %778 0 1 
                                Private f32* %780 = OpAccessChain %9 %31 
                                         f32 %781 = OpLoad %780 
                                         f32 %782 = OpCompositeExtract %779 0 
                                         f32 %783 = OpCompositeExtract %779 1 
                                       f32_3 %784 = OpCompositeConstruct %782 %783 %781 
                                                      OpStore %777 %784 
                  read_only Texture2DSampled %785 = OpLoad %373 
                                       f32_3 %786 = OpLoad %777 
                                         f32 %787 = OpCompositeExtract %786 2 
                                         f32 %788 = OpImageSampleDrefExplicitLod %785 %786 %787 Lod %6 
                                                      OpStore %505 %788 
                                       f32_4 %790 = OpLoad %246 
                                       f32_2 %791 = OpVectorShuffle %790 %790 2 3 
                                Private f32* %792 = OpAccessChain %9 %31 
                                         f32 %793 = OpLoad %792 
                                         f32 %794 = OpCompositeExtract %791 0 
                                         f32 %795 = OpCompositeExtract %791 1 
                                       f32_3 %796 = OpCompositeConstruct %794 %795 %793 
                                                      OpStore %789 %796 
                  read_only Texture2DSampled %798 = OpLoad %373 
                                       f32_3 %799 = OpLoad %789 
                                         f32 %800 = OpCompositeExtract %799 2 
                                         f32 %801 = OpImageSampleDrefExplicitLod %798 %799 %800 Lod %6 
                                                      OpStore %797 %801 
                                Private f32* %802 = OpAccessChain %227 %22 
                                         f32 %803 = OpLoad %802 
                                         f32 %804 = OpLoad %505 
                                         f32 %805 = OpFMul %803 %804 
                                Private f32* %806 = OpAccessChain %9 %22 
                                         f32 %807 = OpLoad %806 
                                         f32 %808 = OpFAdd %805 %807 
                                Private f32* %809 = OpAccessChain %9 %22 
                                                      OpStore %809 %808 
                                Private f32* %810 = OpAccessChain %227 %222 
                                         f32 %811 = OpLoad %810 
                                         f32 %812 = OpLoad %797 
                                         f32 %813 = OpFMul %811 %812 
                                Private f32* %814 = OpAccessChain %9 %22 
                                         f32 %815 = OpLoad %814 
                                         f32 %816 = OpFAdd %813 %815 
                                Private f32* %817 = OpAccessChain %9 %22 
                                                      OpStore %817 %816 
                                Private f32* %818 = OpAccessChain %227 %31 
                                         f32 %819 = OpLoad %818 
                                         f32 %820 = OpLoad %386 
                                         f32 %821 = OpFMul %819 %820 
                                Private f32* %822 = OpAccessChain %9 %22 
                                         f32 %823 = OpLoad %822 
                                         f32 %824 = OpFAdd %821 %823 
                                Private f32* %825 = OpAccessChain %9 %22 
                                                      OpStore %825 %824 
                                Private f32* %826 = OpAccessChain %227 %280 
                                         f32 %827 = OpLoad %826 
                                         f32 %828 = OpLoad %760 
                                         f32 %829 = OpFMul %827 %828 
                                Private f32* %830 = OpAccessChain %9 %22 
                                         f32 %831 = OpLoad %830 
                                         f32 %832 = OpFAdd %829 %831 
                                Private f32* %833 = OpAccessChain %9 %22 
                                                      OpStore %833 %832 
                                Uniform f32* %836 = OpAccessChain %58 %82 %22 
                                         f32 %837 = OpLoad %836 
                                         f32 %838 = OpFNegate %837 
                                         f32 %839 = OpFAdd %838 %29 
                                                      OpStore %834 %839 
                                       f32_4 %840 = OpLoad %9 
                                       f32_4 %841 = OpVectorShuffle %840 %840 0 0 0 0 
                                         f32 %842 = OpLoad %834 
                                       f32_4 %843 = OpCompositeConstruct %842 %842 %842 %842 
                                       f32_4 %844 = OpFMul %841 %843 
                              Uniform f32_4* %845 = OpAccessChain %58 %82 
                                       f32_4 %846 = OpLoad %845 
                                       f32_4 %847 = OpVectorShuffle %846 %846 0 0 0 0 
                                       f32_4 %848 = OpFAdd %844 %847 
                                                      OpStore %9 %848 
                                       f32_4 %851 = OpLoad %9 
                                                      OpStore %850 %851 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat10_0;
vec4 u_xlat1;
float u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat10_8;
float u_xlat10_16;
vec2 u_xlat17;
float u_xlat10_17;
float u_xlat10_24;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat3.zw = u_xlat4.wy * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat2.w = u_xlat3.z;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat0.x = u_xlat10_0 * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat10_24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat10_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat10_17 + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat10_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat10_24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat10_16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat10_8 + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat10_1 + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %184 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                               Output f32_4* %119 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                               Output f32_3* %134 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                               Output f32_3* %177 = OpVariable Output 
                               Output f32_3* %184 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %119 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore %119 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %119 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore %134 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore %177 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore %184 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 854
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %850 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %52 ArrayStride 52 
                                                      OpDecorate %53 ArrayStride 53 
                                                      OpDecorate %55 ArrayStride 55 
                                                      OpMemberDecorate %56 0 Offset 56 
                                                      OpMemberDecorate %56 1 Offset 56 
                                                      OpMemberDecorate %56 2 Offset 56 
                                                      OpMemberDecorate %56 3 RelaxedPrecision 
                                                      OpMemberDecorate %56 3 Offset 56 
                                                      OpMemberDecorate %56 4 Offset 56 
                                                      OpDecorate %56 Block 
                                                      OpDecorate %58 DescriptorSet 58 
                                                      OpDecorate %58 Binding 58 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %373 DescriptorSet 373 
                                                      OpDecorate %373 Binding 373 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %560 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %686 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %704 RelaxedPrecision 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %760 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %773 RelaxedPrecision 
                                                      OpDecorate %785 RelaxedPrecision 
                                                      OpDecorate %797 RelaxedPrecision 
                                                      OpDecorate %798 RelaxedPrecision 
                                                      OpDecorate %804 RelaxedPrecision 
                                                      OpDecorate %812 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %828 RelaxedPrecision 
                                                      OpDecorate %834 RelaxedPrecision 
                                                      OpDecorate %837 RelaxedPrecision 
                                                      OpDecorate %838 RelaxedPrecision 
                                                      OpDecorate %839 RelaxedPrecision 
                                                      OpDecorate %842 RelaxedPrecision 
                                                      OpDecorate %846 RelaxedPrecision 
                                                      OpDecorate %847 RelaxedPrecision 
                                                      OpDecorate %850 RelaxedPrecision 
                                                      OpDecorate %850 Location 850 
                                                      OpDecorate %853 RelaxedPrecision 
                                                      OpDecorate %853 DescriptorSet 853 
                                                      OpDecorate %853 Binding 853 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                          u32 %31 = OpConstant 2 
                                              %37 = OpTypeVector %6 3 
                                          f32 %40 = OpConstant 3.674022E-40 
                                        f32_3 %41 = OpConstantComposite %40 %40 %40 
                                          f32 %43 = OpConstant 3.674022E-40 
                                        f32_3 %44 = OpConstantComposite %43 %43 %43 
                               Private f32_4* %48 = OpVariable Private 
                                          u32 %51 = OpConstant 4 
                                              %52 = OpTypeArray %7 %51 
                                              %53 = OpTypeArray %7 %51 
                                          u32 %54 = OpConstant 16 
                                              %55 = OpTypeArray %7 %54 
                                              %56 = OpTypeStruct %52 %53 %55 %7 %7 
                                              %57 = OpTypePointer Uniform %56 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %58 = OpVariable Uniform 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                                          i32 %82 = OpConstant 3 
                                         i32 %160 = OpConstant 4 
                                         f32 %165 = OpConstant 3.674022E-40 
                                       f32_2 %166 = OpConstantComposite %165 %165 
                                             %187 = OpTypePointer Private %17 
                              Private f32_2* %188 = OpVariable Private 
                                       f32_2 %192 = OpConstantComposite %29 %29 
                              Private f32_4* %194 = OpVariable Private 
                                         f32 %197 = OpConstant 3.674022E-40 
                                       f32_2 %198 = OpConstantComposite %197 %197 
                                       f32_2 %211 = OpConstantComposite %40 %40 
                                         f32 %214 = OpConstant 3.674022E-40 
                                       f32_2 %215 = OpConstantComposite %214 %214 
                              Private f32_4* %219 = OpVariable Private 
                                         u32 %222 = OpConstant 1 
                              Private f32_4* %227 = OpVariable Private 
                                       f32_4 %230 = OpConstantComposite %165 %29 %165 %29 
                              Private f32_4* %246 = OpVariable Private 
                              Private f32_4* %251 = OpVariable Private 
                                         f32 %265 = OpConstant 3.674022E-40 
                                       f32_2 %266 = OpConstantComposite %265 %265 
                                         u32 %280 = OpConstant 3 
                                         f32 %284 = OpConstant 3.674022E-40 
                                       f32_2 %285 = OpConstantComposite %284 %214 
                                         f32 %287 = OpConstant 3.674022E-40 
                                       f32_2 %288 = OpConstantComposite %287 %214 
                                       f32_2 %295 = OpConstantComposite %214 %287 
                                         f32 %306 = OpConstant 3.674022E-40 
                                         f32 %307 = OpConstant 3.674022E-40 
                                         f32 %308 = OpConstant 3.674022E-40 
                                       f32_4 %309 = OpConstantComposite %306 %307 %165 %308 
                              Private f32_4* %350 = OpVariable Private 
                                             %360 = OpTypePointer Function %37 
                                Private f32* %369 = OpVariable Private 
                                             %370 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %371 = OpTypeSampledImage %370 
                                             %372 = OpTypePointer UniformConstant %371 
 UniformConstant read_only Texture2DSampled* %373 = OpVariable UniformConstant 
                                Private f32* %386 = OpVariable Private 
                                             %408 = OpTypePointer Private %37 
                              Private f32_3* %409 = OpVariable Private 
                                Private f32* %440 = OpVariable Private 
                                Private f32* %505 = OpVariable Private 
                                Private f32* %760 = OpVariable Private 
                                Private f32* %797 = OpVariable Private 
                                Private f32* %834 = OpVariable Private 
                                             %835 = OpTypePointer Uniform %6 
                                             %849 = OpTypePointer Output %7 
                               Output f32_4* %850 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %853 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %361 = OpVariable Function 
                             Function f32_3* %378 = OpVariable Function 
                             Function f32_3* %433 = OpVariable Function 
                             Function f32_3* %445 = OpVariable Function 
                             Function f32_3* %485 = OpVariable Function 
                             Function f32_3* %497 = OpVariable Function 
                             Function f32_3* %553 = OpVariable Function 
                             Function f32_3* %564 = OpVariable Function 
                             Function f32_3* %604 = OpVariable Function 
                             Function f32_3* %616 = OpVariable Function 
                             Function f32_3* %679 = OpVariable Function 
                             Function f32_3* %690 = OpVariable Function 
                             Function f32_3* %752 = OpVariable Function 
                             Function f32_3* %765 = OpVariable Function 
                             Function f32_3* %777 = OpVariable Function 
                             Function f32_3* %789 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %26 = OpAccessChain %9 %22 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFNegate %27 
                                          f32 %30 = OpFAdd %28 %29 
                                 Private f32* %32 = OpAccessChain %9 %31 
                                                      OpStore %32 %30 
                                        f32_4 %33 = OpLoad %16 
                                        f32_2 %34 = OpVectorShuffle %33 %33 2 3 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpVectorShuffle %35 %34 4 5 2 3 
                                                      OpStore %9 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %42 = OpFMul %39 %41 
                                        f32_3 %45 = OpFAdd %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 6 3 
                                                      OpStore %9 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %58 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %50 %64 
                                                      OpStore %48 %65 
                               Uniform f32_4* %66 = OpAccessChain %58 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %48 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %48 %72 
                               Uniform f32_4* %74 = OpAccessChain %58 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %48 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %81 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %58 %60 %82 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %81 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_4 %88 = OpLoad %9 
                                        f32_3 %89 = OpVectorShuffle %88 %88 3 3 3 
                                        f32_3 %90 = OpFDiv %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %9 %92 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %58 %61 %61 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %94 %96 
                                                      OpStore %48 %97 
                               Uniform f32_4* %98 = OpAccessChain %58 %61 %60 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %48 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %48 %104 
                              Uniform f32_4* %105 = OpAccessChain %58 %61 %73 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %9 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFNegate %108 
                                       f32_4 %110 = OpFMul %106 %109 
                                       f32_4 %111 = OpLoad %48 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %9 %112 
                                       f32_4 %113 = OpLoad %9 
                              Uniform f32_4* %114 = OpAccessChain %58 %61 %82 
                                       f32_4 %115 = OpLoad %114 
                                       f32_4 %116 = OpFAdd %113 %115 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_3 %118 = OpVectorShuffle %117 %117 1 1 1 
                              Uniform f32_4* %119 = OpAccessChain %58 %73 %61 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFMul %118 %121 
                                       f32_4 %123 = OpLoad %48 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
                                                      OpStore %48 %124 
                              Uniform f32_4* %125 = OpAccessChain %58 %73 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_4 %128 = OpLoad %9 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 0 0 
                                       f32_3 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %48 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFAdd %130 %132 
                                       f32_4 %134 = OpLoad %48 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %48 %135 
                              Uniform f32_4* %136 = OpAccessChain %58 %73 %73 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 2 2 2 
                                       f32_3 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %48 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFAdd %141 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %9 %146 
                              Uniform f32_4* %147 = OpAccessChain %58 %73 %82 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_4 %150 = OpLoad %9 
                                       f32_3 %151 = OpVectorShuffle %150 %150 3 3 3 
                                       f32_3 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFAdd %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %9 %157 
                                       f32_4 %158 = OpLoad %9 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                              Uniform f32_4* %161 = OpAccessChain %58 %160 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 2 3 
                                       f32_2 %164 = OpFMul %159 %163 
                                       f32_2 %167 = OpFAdd %164 %166 
                                       f32_4 %168 = OpLoad %48 
                                       f32_4 %169 = OpVectorShuffle %168 %167 4 5 2 3 
                                                      OpStore %48 %169 
                                       f32_4 %170 = OpLoad %48 
                                       f32_2 %171 = OpVectorShuffle %170 %170 0 1 
                                       f32_2 %172 = OpExtInst %1 8 %171 
                                       f32_4 %173 = OpLoad %48 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 2 3 
                                                      OpStore %48 %174 
                                       f32_4 %175 = OpLoad %9 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                              Uniform f32_4* %177 = OpAccessChain %58 %160 
                                       f32_4 %178 = OpLoad %177 
                                       f32_2 %179 = OpVectorShuffle %178 %178 2 3 
                                       f32_2 %180 = OpFMul %176 %179 
                                       f32_4 %181 = OpLoad %48 
                                       f32_2 %182 = OpVectorShuffle %181 %181 0 1 
                                       f32_2 %183 = OpFNegate %182 
                                       f32_2 %184 = OpFAdd %180 %183 
                                       f32_4 %185 = OpLoad %9 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 2 3 
                                                      OpStore %9 %186 
                                       f32_4 %189 = OpLoad %9 
                                       f32_2 %190 = OpVectorShuffle %189 %189 0 1 
                                       f32_2 %191 = OpFNegate %190 
                                       f32_2 %193 = OpFAdd %191 %192 
                                                      OpStore %188 %193 
                                       f32_4 %195 = OpLoad %9 
                                       f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                                       f32_2 %199 = OpExtInst %1 37 %196 %198 
                                       f32_4 %200 = OpLoad %194 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 2 3 
                                                      OpStore %194 %201 
                                       f32_4 %202 = OpLoad %194 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                                       f32_2 %204 = OpFNegate %203 
                                       f32_4 %205 = OpLoad %194 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                                       f32_2 %207 = OpFMul %204 %206 
                                       f32_2 %208 = OpLoad %188 
                                       f32_2 %209 = OpFAdd %207 %208 
                                                      OpStore %188 %209 
                                       f32_2 %210 = OpLoad %188 
                                       f32_2 %212 = OpFAdd %210 %211 
                                                      OpStore %188 %212 
                                       f32_2 %213 = OpLoad %188 
                                       f32_2 %216 = OpFMul %213 %215 
                                       f32_4 %217 = OpLoad %194 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 2 3 
                                                      OpStore %194 %218 
                                Private f32* %220 = OpAccessChain %194 %22 
                                         f32 %221 = OpLoad %220 
                                Private f32* %223 = OpAccessChain %219 %222 
                                                      OpStore %223 %221 
                                       f32_4 %224 = OpLoad %9 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 1 
                                       f32_2 %226 = OpExtInst %1 40 %225 %198 
                                                      OpStore %188 %226 
                                       f32_4 %228 = OpLoad %9 
                                       f32_4 %229 = OpVectorShuffle %228 %228 0 0 1 1 
                                       f32_4 %231 = OpFAdd %229 %230 
                                                      OpStore %227 %231 
                                       f32_2 %232 = OpLoad %188 
                                       f32_2 %233 = OpFNegate %232 
                                       f32_2 %234 = OpLoad %188 
                                       f32_2 %235 = OpFMul %233 %234 
                                       f32_4 %236 = OpLoad %227 
                                       f32_2 %237 = OpVectorShuffle %236 %236 1 3 
                                       f32_2 %238 = OpFAdd %235 %237 
                                                      OpStore %188 %238 
                                       f32_4 %239 = OpLoad %227 
                                       f32_4 %240 = OpVectorShuffle %239 %239 0 0 2 2 
                                       f32_4 %241 = OpLoad %227 
                                       f32_4 %242 = OpVectorShuffle %241 %241 0 0 2 2 
                                       f32_4 %243 = OpFMul %240 %242 
                                                      OpStore %227 %243 
                                       f32_2 %244 = OpLoad %188 
                                       f32_2 %245 = OpFAdd %244 %211 
                                                      OpStore %188 %245 
                                Private f32* %247 = OpAccessChain %188 %22 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %248 %214 
                                Private f32* %250 = OpAccessChain %246 %31 
                                                      OpStore %250 %249 
                                Private f32* %252 = OpAccessChain %188 %222 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %253 %214 
                                Private f32* %255 = OpAccessChain %251 %31 
                                                      OpStore %255 %254 
                                       f32_4 %256 = OpLoad %227 
                                       f32_2 %257 = OpVectorShuffle %256 %256 0 2 
                                       f32_2 %258 = OpFMul %257 %166 
                                       f32_4 %259 = OpLoad %9 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_2 %261 = OpFNegate %260 
                                       f32_2 %262 = OpFAdd %258 %261 
                                                      OpStore %188 %262 
                                       f32_4 %263 = OpLoad %227 
                                       f32_2 %264 = OpVectorShuffle %263 %263 3 1 
                                       f32_2 %267 = OpFMul %264 %266 
                                       f32_4 %268 = OpLoad %219 
                                       f32_4 %269 = OpVectorShuffle %268 %267 0 1 4 5 
                                                      OpStore %219 %269 
                                       f32_2 %270 = OpLoad %188 
                                       f32_2 %271 = OpVectorShuffle %270 %270 1 0 
                                       f32_2 %272 = OpFMul %271 %215 
                                       f32_4 %273 = OpLoad %251 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 3 
                                                      OpStore %251 %274 
                                Private f32* %275 = OpAccessChain %251 %222 
                                         f32 %276 = OpLoad %275 
                                Private f32* %277 = OpAccessChain %246 %22 
                                                      OpStore %277 %276 
                                Private f32* %278 = OpAccessChain %219 %31 
                                         f32 %279 = OpLoad %278 
                                Private f32* %281 = OpAccessChain %194 %280 
                                                      OpStore %281 %279 
                                       f32_4 %282 = OpLoad %9 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 0 
                                       f32_2 %286 = OpFMul %283 %285 
                                       f32_2 %289 = OpFAdd %286 %288 
                                       f32_4 %290 = OpLoad %246 
                                       f32_4 %291 = OpVectorShuffle %290 %289 0 4 2 5 
                                                      OpStore %246 %291 
                                       f32_4 %292 = OpLoad %9 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 0 
                                       f32_2 %294 = OpFMul %293 %285 
                                       f32_2 %296 = OpFAdd %294 %295 
                                       f32_4 %297 = OpLoad %219 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 1 5 3 
                                                      OpStore %219 %298 
                                       f32_4 %299 = OpLoad %219 
                                       f32_4 %300 = OpLoad %246 
                                       f32_4 %301 = OpFAdd %299 %300 
                                                      OpStore %227 %301 
                                       f32_4 %302 = OpLoad %219 
                                       f32_4 %303 = OpLoad %227 
                                       f32_4 %304 = OpFDiv %302 %303 
                                                      OpStore %219 %304 
                                       f32_4 %305 = OpLoad %219 
                                       f32_4 %310 = OpFAdd %305 %309 
                                                      OpStore %219 %310 
                                       f32_4 %311 = OpLoad %219 
                                       f32_4 %312 = OpVectorShuffle %311 %311 3 0 1 2 
                              Uniform f32_4* %313 = OpAccessChain %58 %160 
                                       f32_4 %314 = OpLoad %313 
                                       f32_4 %315 = OpVectorShuffle %314 %314 0 0 0 0 
                                       f32_4 %316 = OpFMul %312 %315 
                                                      OpStore %219 %316 
                                       f32_4 %317 = OpLoad %219 
                                       f32_3 %318 = OpVectorShuffle %317 %317 1 2 3 
                                       f32_4 %319 = OpLoad %246 
                                       f32_4 %320 = OpVectorShuffle %319 %318 4 1 5 6 
                                                      OpStore %246 %320 
                                       f32_4 %321 = OpLoad %9 
                                       f32_2 %322 = OpVectorShuffle %321 %321 1 1 
                                       f32_2 %323 = OpFMul %322 %285 
                                       f32_2 %324 = OpFAdd %323 %288 
                                       f32_4 %325 = OpLoad %251 
                                       f32_4 %326 = OpVectorShuffle %325 %324 0 4 2 5 
                                                      OpStore %251 %326 
                                       f32_4 %327 = OpLoad %9 
                                       f32_2 %328 = OpVectorShuffle %327 %327 1 1 
                                       f32_2 %329 = OpFMul %328 %285 
                                       f32_2 %330 = OpFAdd %329 %295 
                                       f32_4 %331 = OpLoad %194 
                                       f32_4 %332 = OpVectorShuffle %331 %330 4 1 5 3 
                                                      OpStore %194 %332 
                                       f32_4 %333 = OpLoad %194 
                                       f32_4 %334 = OpLoad %251 
                                       f32_4 %335 = OpFAdd %333 %334 
                                                      OpStore %251 %335 
                                       f32_4 %336 = OpLoad %194 
                                       f32_4 %337 = OpLoad %251 
                                       f32_4 %338 = OpFDiv %336 %337 
                                                      OpStore %194 %338 
                                       f32_4 %339 = OpLoad %194 
                                       f32_4 %340 = OpFAdd %339 %309 
                                                      OpStore %194 %340 
                                       f32_4 %341 = OpLoad %194 
                                       f32_4 %342 = OpVectorShuffle %341 %341 0 3 1 2 
                              Uniform f32_4* %343 = OpAccessChain %58 %160 
                                       f32_4 %344 = OpLoad %343 
                                       f32_4 %345 = OpVectorShuffle %344 %344 1 1 1 1 
                                       f32_4 %346 = OpFMul %342 %345 
                                                      OpStore %194 %346 
                                Private f32* %347 = OpAccessChain %194 %22 
                                         f32 %348 = OpLoad %347 
                                Private f32* %349 = OpAccessChain %246 %222 
                                                      OpStore %349 %348 
                                       f32_4 %351 = OpLoad %48 
                                       f32_4 %352 = OpVectorShuffle %351 %351 0 1 0 1 
                              Uniform f32_4* %353 = OpAccessChain %58 %160 
                                       f32_4 %354 = OpLoad %353 
                                       f32_4 %355 = OpVectorShuffle %354 %354 0 1 0 1 
                                       f32_4 %356 = OpFMul %352 %355 
                                       f32_4 %357 = OpLoad %246 
                                       f32_4 %358 = OpVectorShuffle %357 %357 0 1 2 1 
                                       f32_4 %359 = OpFAdd %356 %358 
                                                      OpStore %350 %359 
                                       f32_4 %362 = OpLoad %350 
                                       f32_2 %363 = OpVectorShuffle %362 %362 2 3 
                                Private f32* %364 = OpAccessChain %9 %31 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpCompositeExtract %363 0 
                                         f32 %367 = OpCompositeExtract %363 1 
                                       f32_3 %368 = OpCompositeConstruct %366 %367 %365 
                                                      OpStore %361 %368 
                  read_only Texture2DSampled %374 = OpLoad %373 
                                       f32_3 %375 = OpLoad %361 
                                         f32 %376 = OpCompositeExtract %375 2 
                                         f32 %377 = OpImageSampleDrefExplicitLod %374 %375 %376 Lod %6 
                                                      OpStore %369 %377 
                                       f32_4 %379 = OpLoad %350 
                                       f32_2 %380 = OpVectorShuffle %379 %379 0 1 
                                Private f32* %381 = OpAccessChain %9 %31 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpCompositeExtract %380 0 
                                         f32 %384 = OpCompositeExtract %380 1 
                                       f32_3 %385 = OpCompositeConstruct %383 %384 %382 
                                                      OpStore %378 %385 
                  read_only Texture2DSampled %387 = OpLoad %373 
                                       f32_3 %388 = OpLoad %378 
                                         f32 %389 = OpCompositeExtract %388 2 
                                         f32 %390 = OpImageSampleDrefExplicitLod %387 %388 %389 Lod %6 
                                                      OpStore %386 %390 
                                       f32_4 %391 = OpLoad %227 
                                       f32_4 %392 = OpLoad %251 
                                       f32_4 %393 = OpVectorShuffle %392 %392 0 0 0 0 
                                       f32_4 %394 = OpFMul %391 %393 
                                                      OpStore %350 %394 
                                         f32 %395 = OpLoad %369 
                                Private f32* %396 = OpAccessChain %350 %222 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFMul %395 %397 
                                Private f32* %399 = OpAccessChain %9 %22 
                                                      OpStore %399 %398 
                                Private f32* %400 = OpAccessChain %350 %22 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpLoad %386 
                                         f32 %403 = OpFMul %401 %402 
                                Private f32* %404 = OpAccessChain %9 %22 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFAdd %403 %405 
                                Private f32* %407 = OpAccessChain %9 %22 
                                                      OpStore %407 %406 
                                       f32_4 %410 = OpLoad %48 
                                       f32_2 %411 = OpVectorShuffle %410 %410 0 1 
                              Uniform f32_4* %412 = OpAccessChain %58 %160 
                                       f32_4 %413 = OpLoad %412 
                                       f32_2 %414 = OpVectorShuffle %413 %413 0 1 
                                       f32_2 %415 = OpFMul %411 %414 
                                       f32_4 %416 = OpLoad %246 
                                       f32_2 %417 = OpVectorShuffle %416 %416 3 1 
                                       f32_2 %418 = OpFAdd %415 %417 
                                       f32_3 %419 = OpLoad %409 
                                       f32_3 %420 = OpVectorShuffle %419 %418 3 1 4 
                                                      OpStore %409 %420 
                                Private f32* %421 = OpAccessChain %246 %222 
                                         f32 %422 = OpLoad %421 
                                Private f32* %423 = OpAccessChain %219 %222 
                                                      OpStore %423 %422 
                                       f32_4 %424 = OpLoad %48 
                                       f32_2 %425 = OpVectorShuffle %424 %424 0 1 
                              Uniform f32_4* %426 = OpAccessChain %58 %160 
                                       f32_4 %427 = OpLoad %426 
                                       f32_2 %428 = OpVectorShuffle %427 %427 0 1 
                                       f32_2 %429 = OpFMul %425 %428 
                                       f32_4 %430 = OpLoad %219 
                                       f32_2 %431 = OpVectorShuffle %430 %430 0 1 
                                       f32_2 %432 = OpFAdd %429 %431 
                                                      OpStore %188 %432 
                                       f32_2 %434 = OpLoad %188 
                                Private f32* %435 = OpAccessChain %9 %31 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpCompositeExtract %434 0 
                                         f32 %438 = OpCompositeExtract %434 1 
                                       f32_3 %439 = OpCompositeConstruct %437 %438 %436 
                                                      OpStore %433 %439 
                  read_only Texture2DSampled %441 = OpLoad %373 
                                       f32_3 %442 = OpLoad %433 
                                         f32 %443 = OpCompositeExtract %442 2 
                                         f32 %444 = OpImageSampleDrefExplicitLod %441 %442 %443 Lod %6 
                                                      OpStore %440 %444 
                                       f32_3 %446 = OpLoad %409 
                                       f32_2 %447 = OpVectorShuffle %446 %446 0 2 
                                Private f32* %448 = OpAccessChain %9 %31 
                                         f32 %449 = OpLoad %448 
                                         f32 %450 = OpCompositeExtract %447 0 
                                         f32 %451 = OpCompositeExtract %447 1 
                                       f32_3 %452 = OpCompositeConstruct %450 %451 %449 
                                                      OpStore %445 %452 
                  read_only Texture2DSampled %453 = OpLoad %373 
                                       f32_3 %454 = OpLoad %445 
                                         f32 %455 = OpCompositeExtract %454 2 
                                         f32 %456 = OpImageSampleDrefExplicitLod %453 %454 %455 Lod %6 
                                                      OpStore %386 %456 
                                Private f32* %457 = OpAccessChain %350 %31 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpLoad %386 
                                         f32 %460 = OpFMul %458 %459 
                                Private f32* %461 = OpAccessChain %9 %22 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFAdd %460 %462 
                                Private f32* %464 = OpAccessChain %9 %22 
                                                      OpStore %464 %463 
                                Private f32* %465 = OpAccessChain %350 %280 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpLoad %440 
                                         f32 %468 = OpFMul %466 %467 
                                Private f32* %469 = OpAccessChain %9 %22 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpFAdd %468 %470 
                                Private f32* %472 = OpAccessChain %9 %22 
                                                      OpStore %472 %471 
                                Private f32* %473 = OpAccessChain %194 %31 
                                         f32 %474 = OpLoad %473 
                                Private f32* %475 = OpAccessChain %246 %222 
                                                      OpStore %475 %474 
                                       f32_4 %476 = OpLoad %48 
                                       f32_4 %477 = OpVectorShuffle %476 %476 0 1 0 1 
                              Uniform f32_4* %478 = OpAccessChain %58 %160 
                                       f32_4 %479 = OpLoad %478 
                                       f32_4 %480 = OpVectorShuffle %479 %479 0 1 0 1 
                                       f32_4 %481 = OpFMul %477 %480 
                                       f32_4 %482 = OpLoad %246 
                                       f32_4 %483 = OpVectorShuffle %482 %482 0 1 2 1 
                                       f32_4 %484 = OpFAdd %481 %483 
                                                      OpStore %350 %484 
                                       f32_4 %486 = OpLoad %350 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                                Private f32* %488 = OpAccessChain %9 %31 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpCompositeExtract %487 0 
                                         f32 %491 = OpCompositeExtract %487 1 
                                       f32_3 %492 = OpCompositeConstruct %490 %491 %489 
                                                      OpStore %485 %492 
                  read_only Texture2DSampled %493 = OpLoad %373 
                                       f32_3 %494 = OpLoad %485 
                                         f32 %495 = OpCompositeExtract %494 2 
                                         f32 %496 = OpImageSampleDrefExplicitLod %493 %494 %495 Lod %6 
                                                      OpStore %386 %496 
                                       f32_4 %498 = OpLoad %350 
                                       f32_2 %499 = OpVectorShuffle %498 %498 2 3 
                                Private f32* %500 = OpAccessChain %9 %31 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpCompositeExtract %499 0 
                                         f32 %503 = OpCompositeExtract %499 1 
                                       f32_3 %504 = OpCompositeConstruct %502 %503 %501 
                                                      OpStore %497 %504 
                  read_only Texture2DSampled %506 = OpLoad %373 
                                       f32_3 %507 = OpLoad %497 
                                         f32 %508 = OpCompositeExtract %507 2 
                                         f32 %509 = OpImageSampleDrefExplicitLod %506 %507 %508 Lod %6 
                                                      OpStore %505 %509 
                                       f32_4 %510 = OpLoad %227 
                                       f32_4 %511 = OpLoad %251 
                                       f32_4 %512 = OpVectorShuffle %511 %511 1 1 1 1 
                                       f32_4 %513 = OpFMul %510 %512 
                                                      OpStore %350 %513 
                                Private f32* %514 = OpAccessChain %350 %22 
                                         f32 %515 = OpLoad %514 
                                         f32 %516 = OpLoad %386 
                                         f32 %517 = OpFMul %515 %516 
                                Private f32* %518 = OpAccessChain %9 %22 
                                         f32 %519 = OpLoad %518 
                                         f32 %520 = OpFAdd %517 %519 
                                Private f32* %521 = OpAccessChain %9 %22 
                                                      OpStore %521 %520 
                                Private f32* %522 = OpAccessChain %350 %222 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpLoad %505 
                                         f32 %525 = OpFMul %523 %524 
                                Private f32* %526 = OpAccessChain %9 %22 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpFAdd %525 %527 
                                Private f32* %529 = OpAccessChain %9 %22 
                                                      OpStore %529 %528 
                                       f32_4 %530 = OpLoad %48 
                                       f32_2 %531 = OpVectorShuffle %530 %530 0 1 
                              Uniform f32_4* %532 = OpAccessChain %58 %160 
                                       f32_4 %533 = OpLoad %532 
                                       f32_2 %534 = OpVectorShuffle %533 %533 0 1 
                                       f32_2 %535 = OpFMul %531 %534 
                                       f32_4 %536 = OpLoad %246 
                                       f32_2 %537 = OpVectorShuffle %536 %536 3 1 
                                       f32_2 %538 = OpFAdd %535 %537 
                                       f32_3 %539 = OpLoad %409 
                                       f32_3 %540 = OpVectorShuffle %539 %538 3 1 4 
                                                      OpStore %409 %540 
                                Private f32* %541 = OpAccessChain %246 %222 
                                         f32 %542 = OpLoad %541 
                                Private f32* %543 = OpAccessChain %219 %31 
                                                      OpStore %543 %542 
                                       f32_4 %544 = OpLoad %48 
                                       f32_2 %545 = OpVectorShuffle %544 %544 0 1 
                              Uniform f32_4* %546 = OpAccessChain %58 %160 
                                       f32_4 %547 = OpLoad %546 
                                       f32_2 %548 = OpVectorShuffle %547 %547 0 1 
                                       f32_2 %549 = OpFMul %545 %548 
                                       f32_4 %550 = OpLoad %219 
                                       f32_2 %551 = OpVectorShuffle %550 %550 0 2 
                                       f32_2 %552 = OpFAdd %549 %551 
                                                      OpStore %188 %552 
                                       f32_2 %554 = OpLoad %188 
                                Private f32* %555 = OpAccessChain %9 %31 
                                         f32 %556 = OpLoad %555 
                                         f32 %557 = OpCompositeExtract %554 0 
                                         f32 %558 = OpCompositeExtract %554 1 
                                       f32_3 %559 = OpCompositeConstruct %557 %558 %556 
                                                      OpStore %553 %559 
                  read_only Texture2DSampled %560 = OpLoad %373 
                                       f32_3 %561 = OpLoad %553 
                                         f32 %562 = OpCompositeExtract %561 2 
                                         f32 %563 = OpImageSampleDrefExplicitLod %560 %561 %562 Lod %6 
                                                      OpStore %440 %563 
                                       f32_3 %565 = OpLoad %409 
                                       f32_2 %566 = OpVectorShuffle %565 %565 0 2 
                                Private f32* %567 = OpAccessChain %9 %31 
                                         f32 %568 = OpLoad %567 
                                         f32 %569 = OpCompositeExtract %566 0 
                                         f32 %570 = OpCompositeExtract %566 1 
                                       f32_3 %571 = OpCompositeConstruct %569 %570 %568 
                                                      OpStore %564 %571 
                  read_only Texture2DSampled %572 = OpLoad %373 
                                       f32_3 %573 = OpLoad %564 
                                         f32 %574 = OpCompositeExtract %573 2 
                                         f32 %575 = OpImageSampleDrefExplicitLod %572 %573 %574 Lod %6 
                                                      OpStore %386 %575 
                                Private f32* %576 = OpAccessChain %350 %31 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpLoad %386 
                                         f32 %579 = OpFMul %577 %578 
                                Private f32* %580 = OpAccessChain %9 %22 
                                         f32 %581 = OpLoad %580 
                                         f32 %582 = OpFAdd %579 %581 
                                Private f32* %583 = OpAccessChain %9 %22 
                                                      OpStore %583 %582 
                                Private f32* %584 = OpAccessChain %350 %280 
                                         f32 %585 = OpLoad %584 
                                         f32 %586 = OpLoad %440 
                                         f32 %587 = OpFMul %585 %586 
                                Private f32* %588 = OpAccessChain %9 %22 
                                         f32 %589 = OpLoad %588 
                                         f32 %590 = OpFAdd %587 %589 
                                Private f32* %591 = OpAccessChain %9 %22 
                                                      OpStore %591 %590 
                                Private f32* %592 = OpAccessChain %194 %280 
                                         f32 %593 = OpLoad %592 
                                Private f32* %594 = OpAccessChain %246 %222 
                                                      OpStore %594 %593 
                                       f32_4 %595 = OpLoad %48 
                                       f32_4 %596 = OpVectorShuffle %595 %595 0 1 0 1 
                              Uniform f32_4* %597 = OpAccessChain %58 %160 
                                       f32_4 %598 = OpLoad %597 
                                       f32_4 %599 = OpVectorShuffle %598 %598 0 1 0 1 
                                       f32_4 %600 = OpFMul %596 %599 
                                       f32_4 %601 = OpLoad %246 
                                       f32_4 %602 = OpVectorShuffle %601 %601 0 1 2 1 
                                       f32_4 %603 = OpFAdd %600 %602 
                                                      OpStore %350 %603 
                                       f32_4 %605 = OpLoad %350 
                                       f32_2 %606 = OpVectorShuffle %605 %605 0 1 
                                Private f32* %607 = OpAccessChain %9 %31 
                                         f32 %608 = OpLoad %607 
                                         f32 %609 = OpCompositeExtract %606 0 
                                         f32 %610 = OpCompositeExtract %606 1 
                                       f32_3 %611 = OpCompositeConstruct %609 %610 %608 
                                                      OpStore %604 %611 
                  read_only Texture2DSampled %612 = OpLoad %373 
                                       f32_3 %613 = OpLoad %604 
                                         f32 %614 = OpCompositeExtract %613 2 
                                         f32 %615 = OpImageSampleDrefExplicitLod %612 %613 %614 Lod %6 
                                                      OpStore %386 %615 
                                       f32_4 %617 = OpLoad %350 
                                       f32_2 %618 = OpVectorShuffle %617 %617 2 3 
                                Private f32* %619 = OpAccessChain %9 %31 
                                         f32 %620 = OpLoad %619 
                                         f32 %621 = OpCompositeExtract %618 0 
                                         f32 %622 = OpCompositeExtract %618 1 
                                       f32_3 %623 = OpCompositeConstruct %621 %622 %620 
                                                      OpStore %616 %623 
                  read_only Texture2DSampled %624 = OpLoad %373 
                                       f32_3 %625 = OpLoad %616 
                                         f32 %626 = OpCompositeExtract %625 2 
                                         f32 %627 = OpImageSampleDrefExplicitLod %624 %625 %626 Lod %6 
                                                      OpStore %505 %627 
                                       f32_4 %628 = OpLoad %227 
                                       f32_4 %629 = OpLoad %251 
                                       f32_4 %630 = OpVectorShuffle %629 %629 2 2 2 2 
                                       f32_4 %631 = OpFMul %628 %630 
                                                      OpStore %350 %631 
                                       f32_4 %632 = OpLoad %227 
                                       f32_4 %633 = OpLoad %251 
                                       f32_4 %634 = OpVectorShuffle %633 %633 3 3 3 3 
                                       f32_4 %635 = OpFMul %632 %634 
                                                      OpStore %227 %635 
                                Private f32* %636 = OpAccessChain %350 %22 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpLoad %386 
                                         f32 %639 = OpFMul %637 %638 
                                Private f32* %640 = OpAccessChain %9 %22 
                                         f32 %641 = OpLoad %640 
                                         f32 %642 = OpFAdd %639 %641 
                                Private f32* %643 = OpAccessChain %9 %22 
                                                      OpStore %643 %642 
                                Private f32* %644 = OpAccessChain %350 %222 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpLoad %505 
                                         f32 %647 = OpFMul %645 %646 
                                Private f32* %648 = OpAccessChain %9 %22 
                                         f32 %649 = OpLoad %648 
                                         f32 %650 = OpFAdd %647 %649 
                                Private f32* %651 = OpAccessChain %9 %22 
                                                      OpStore %651 %650 
                                       f32_4 %652 = OpLoad %48 
                                       f32_2 %653 = OpVectorShuffle %652 %652 0 1 
                              Uniform f32_4* %654 = OpAccessChain %58 %160 
                                       f32_4 %655 = OpLoad %654 
                                       f32_2 %656 = OpVectorShuffle %655 %655 0 1 
                                       f32_2 %657 = OpFMul %653 %656 
                                       f32_4 %658 = OpLoad %246 
                                       f32_2 %659 = OpVectorShuffle %658 %658 3 1 
                                       f32_2 %660 = OpFAdd %657 %659 
                                       f32_3 %661 = OpLoad %409 
                                       f32_3 %662 = OpVectorShuffle %661 %660 3 1 4 
                                                      OpStore %409 %662 
                                       f32_4 %663 = OpLoad %246 
                                       f32_3 %664 = OpVectorShuffle %663 %663 0 2 3 
                                       f32_4 %665 = OpLoad %194 
                                       f32_4 %666 = OpVectorShuffle %665 %664 4 1 5 6 
                                                      OpStore %194 %666 
                                Private f32* %667 = OpAccessChain %246 %222 
                                         f32 %668 = OpLoad %667 
                                Private f32* %669 = OpAccessChain %219 %280 
                                                      OpStore %669 %668 
                                       f32_4 %670 = OpLoad %48 
                                       f32_2 %671 = OpVectorShuffle %670 %670 0 1 
                              Uniform f32_4* %672 = OpAccessChain %58 %160 
                                       f32_4 %673 = OpLoad %672 
                                       f32_2 %674 = OpVectorShuffle %673 %673 0 1 
                                       f32_2 %675 = OpFMul %671 %674 
                                       f32_4 %676 = OpLoad %219 
                                       f32_2 %677 = OpVectorShuffle %676 %676 0 3 
                                       f32_2 %678 = OpFAdd %675 %677 
                                                      OpStore %188 %678 
                                       f32_2 %680 = OpLoad %188 
                                Private f32* %681 = OpAccessChain %9 %31 
                                         f32 %682 = OpLoad %681 
                                         f32 %683 = OpCompositeExtract %680 0 
                                         f32 %684 = OpCompositeExtract %680 1 
                                       f32_3 %685 = OpCompositeConstruct %683 %684 %682 
                                                      OpStore %679 %685 
                  read_only Texture2DSampled %686 = OpLoad %373 
                                       f32_3 %687 = OpLoad %679 
                                         f32 %688 = OpCompositeExtract %687 2 
                                         f32 %689 = OpImageSampleDrefExplicitLod %686 %687 %688 Lod %6 
                                                      OpStore %440 %689 
                                       f32_3 %691 = OpLoad %409 
                                       f32_2 %692 = OpVectorShuffle %691 %691 0 2 
                                Private f32* %693 = OpAccessChain %9 %31 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpCompositeExtract %692 0 
                                         f32 %696 = OpCompositeExtract %692 1 
                                       f32_3 %697 = OpCompositeConstruct %695 %696 %694 
                                                      OpStore %690 %697 
                  read_only Texture2DSampled %698 = OpLoad %373 
                                       f32_3 %699 = OpLoad %690 
                                         f32 %700 = OpCompositeExtract %699 2 
                                         f32 %701 = OpImageSampleDrefExplicitLod %698 %699 %700 Lod %6 
                                                      OpStore %386 %701 
                                Private f32* %702 = OpAccessChain %350 %31 
                                         f32 %703 = OpLoad %702 
                                         f32 %704 = OpLoad %386 
                                         f32 %705 = OpFMul %703 %704 
                                Private f32* %706 = OpAccessChain %9 %22 
                                         f32 %707 = OpLoad %706 
                                         f32 %708 = OpFAdd %705 %707 
                                Private f32* %709 = OpAccessChain %9 %22 
                                                      OpStore %709 %708 
                                Private f32* %710 = OpAccessChain %350 %280 
                                         f32 %711 = OpLoad %710 
                                         f32 %712 = OpLoad %440 
                                         f32 %713 = OpFMul %711 %712 
                                Private f32* %714 = OpAccessChain %9 %22 
                                         f32 %715 = OpLoad %714 
                                         f32 %716 = OpFAdd %713 %715 
                                Private f32* %717 = OpAccessChain %9 %22 
                                                      OpStore %717 %716 
                                       f32_4 %718 = OpLoad %48 
                                       f32_4 %719 = OpVectorShuffle %718 %718 0 1 0 1 
                              Uniform f32_4* %720 = OpAccessChain %58 %160 
                                       f32_4 %721 = OpLoad %720 
                                       f32_4 %722 = OpVectorShuffle %721 %721 0 1 0 1 
                                       f32_4 %723 = OpFMul %719 %722 
                                       f32_4 %724 = OpLoad %194 
                                       f32_4 %725 = OpVectorShuffle %724 %724 0 1 2 1 
                                       f32_4 %726 = OpFAdd %723 %725 
                                                      OpStore %246 %726 
                                       f32_4 %727 = OpLoad %48 
                                       f32_2 %728 = OpVectorShuffle %727 %727 0 1 
                              Uniform f32_4* %729 = OpAccessChain %58 %160 
                                       f32_4 %730 = OpLoad %729 
                                       f32_2 %731 = OpVectorShuffle %730 %730 0 1 
                                       f32_2 %732 = OpFMul %728 %731 
                                       f32_4 %733 = OpLoad %194 
                                       f32_2 %734 = OpVectorShuffle %733 %733 3 1 
                                       f32_2 %735 = OpFAdd %732 %734 
                                       f32_3 %736 = OpLoad %409 
                                       f32_3 %737 = OpVectorShuffle %736 %735 3 1 4 
                                                      OpStore %409 %737 
                                Private f32* %738 = OpAccessChain %194 %222 
                                         f32 %739 = OpLoad %738 
                                Private f32* %740 = OpAccessChain %219 %222 
                                                      OpStore %740 %739 
                                       f32_4 %741 = OpLoad %48 
                                       f32_2 %742 = OpVectorShuffle %741 %741 0 1 
                              Uniform f32_4* %743 = OpAccessChain %58 %160 
                                       f32_4 %744 = OpLoad %743 
                                       f32_2 %745 = OpVectorShuffle %744 %744 0 1 
                                       f32_2 %746 = OpFMul %742 %745 
                                       f32_4 %747 = OpLoad %219 
                                       f32_2 %748 = OpVectorShuffle %747 %747 0 1 
                                       f32_2 %749 = OpFAdd %746 %748 
                                       f32_4 %750 = OpLoad %48 
                                       f32_4 %751 = OpVectorShuffle %750 %749 4 5 2 3 
                                                      OpStore %48 %751 
                                       f32_4 %753 = OpLoad %48 
                                       f32_2 %754 = OpVectorShuffle %753 %753 0 1 
                                Private f32* %755 = OpAccessChain %9 %31 
                                         f32 %756 = OpLoad %755 
                                         f32 %757 = OpCompositeExtract %754 0 
                                         f32 %758 = OpCompositeExtract %754 1 
                                       f32_3 %759 = OpCompositeConstruct %757 %758 %756 
                                                      OpStore %752 %759 
                  read_only Texture2DSampled %761 = OpLoad %373 
                                       f32_3 %762 = OpLoad %752 
                                         f32 %763 = OpCompositeExtract %762 2 
                                         f32 %764 = OpImageSampleDrefExplicitLod %761 %762 %763 Lod %6 
                                                      OpStore %760 %764 
                                       f32_3 %766 = OpLoad %409 
                                       f32_2 %767 = OpVectorShuffle %766 %766 0 2 
                                Private f32* %768 = OpAccessChain %9 %31 
                                         f32 %769 = OpLoad %768 
                                         f32 %770 = OpCompositeExtract %767 0 
                                         f32 %771 = OpCompositeExtract %767 1 
                                       f32_3 %772 = OpCompositeConstruct %770 %771 %769 
                                                      OpStore %765 %772 
                  read_only Texture2DSampled %773 = OpLoad %373 
                                       f32_3 %774 = OpLoad %765 
                                         f32 %775 = OpCompositeExtract %774 2 
                                         f32 %776 = OpImageSampleDrefExplicitLod %773 %774 %775 Lod %6 
                                                      OpStore %386 %776 
                                       f32_4 %778 = OpLoad %246 
                                       f32_2 %779 = OpVectorShuffle %778 %778 0 1 
                                Private f32* %780 = OpAccessChain %9 %31 
                                         f32 %781 = OpLoad %780 
                                         f32 %782 = OpCompositeExtract %779 0 
                                         f32 %783 = OpCompositeExtract %779 1 
                                       f32_3 %784 = OpCompositeConstruct %782 %783 %781 
                                                      OpStore %777 %784 
                  read_only Texture2DSampled %785 = OpLoad %373 
                                       f32_3 %786 = OpLoad %777 
                                         f32 %787 = OpCompositeExtract %786 2 
                                         f32 %788 = OpImageSampleDrefExplicitLod %785 %786 %787 Lod %6 
                                                      OpStore %505 %788 
                                       f32_4 %790 = OpLoad %246 
                                       f32_2 %791 = OpVectorShuffle %790 %790 2 3 
                                Private f32* %792 = OpAccessChain %9 %31 
                                         f32 %793 = OpLoad %792 
                                         f32 %794 = OpCompositeExtract %791 0 
                                         f32 %795 = OpCompositeExtract %791 1 
                                       f32_3 %796 = OpCompositeConstruct %794 %795 %793 
                                                      OpStore %789 %796 
                  read_only Texture2DSampled %798 = OpLoad %373 
                                       f32_3 %799 = OpLoad %789 
                                         f32 %800 = OpCompositeExtract %799 2 
                                         f32 %801 = OpImageSampleDrefExplicitLod %798 %799 %800 Lod %6 
                                                      OpStore %797 %801 
                                Private f32* %802 = OpAccessChain %227 %22 
                                         f32 %803 = OpLoad %802 
                                         f32 %804 = OpLoad %505 
                                         f32 %805 = OpFMul %803 %804 
                                Private f32* %806 = OpAccessChain %9 %22 
                                         f32 %807 = OpLoad %806 
                                         f32 %808 = OpFAdd %805 %807 
                                Private f32* %809 = OpAccessChain %9 %22 
                                                      OpStore %809 %808 
                                Private f32* %810 = OpAccessChain %227 %222 
                                         f32 %811 = OpLoad %810 
                                         f32 %812 = OpLoad %797 
                                         f32 %813 = OpFMul %811 %812 
                                Private f32* %814 = OpAccessChain %9 %22 
                                         f32 %815 = OpLoad %814 
                                         f32 %816 = OpFAdd %813 %815 
                                Private f32* %817 = OpAccessChain %9 %22 
                                                      OpStore %817 %816 
                                Private f32* %818 = OpAccessChain %227 %31 
                                         f32 %819 = OpLoad %818 
                                         f32 %820 = OpLoad %386 
                                         f32 %821 = OpFMul %819 %820 
                                Private f32* %822 = OpAccessChain %9 %22 
                                         f32 %823 = OpLoad %822 
                                         f32 %824 = OpFAdd %821 %823 
                                Private f32* %825 = OpAccessChain %9 %22 
                                                      OpStore %825 %824 
                                Private f32* %826 = OpAccessChain %227 %280 
                                         f32 %827 = OpLoad %826 
                                         f32 %828 = OpLoad %760 
                                         f32 %829 = OpFMul %827 %828 
                                Private f32* %830 = OpAccessChain %9 %22 
                                         f32 %831 = OpLoad %830 
                                         f32 %832 = OpFAdd %829 %831 
                                Private f32* %833 = OpAccessChain %9 %22 
                                                      OpStore %833 %832 
                                Uniform f32* %836 = OpAccessChain %58 %82 %22 
                                         f32 %837 = OpLoad %836 
                                         f32 %838 = OpFNegate %837 
                                         f32 %839 = OpFAdd %838 %29 
                                                      OpStore %834 %839 
                                       f32_4 %840 = OpLoad %9 
                                       f32_4 %841 = OpVectorShuffle %840 %840 0 0 0 0 
                                         f32 %842 = OpLoad %834 
                                       f32_4 %843 = OpCompositeConstruct %842 %842 %842 %842 
                                       f32_4 %844 = OpFMul %841 %843 
                              Uniform f32_4* %845 = OpAccessChain %58 %82 
                                       f32_4 %846 = OpLoad %845 
                                       f32_4 %847 = OpVectorShuffle %846 %846 0 0 0 0 
                                       f32_4 %848 = OpFAdd %844 %847 
                                                      OpStore %9 %848 
                                       f32_4 %851 = OpLoad %9 
                                                      OpStore %850 %851 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
""
}
}
}
}
}