//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Brave/Internal/PitSpirits" {
Properties {
_MainTex ("Base (RGB)", 2D) = "white" { }
_Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
_MaxValue ("Max Value", Float) = 1
_OverrideColor ("Spirit Color", Color) = (1,0,0,1)
_NoiseTex ("Noise", 2D) = "white" { }
_StepValue ("Step Value", Float) = 0.1
_SkyBoost ("Sky Boost", Float) = 0.5
_SkyPower ("Sky Power", Float) = 1
_DitherCohesionFactor ("Cohesion Factor", Float) = 0.5
_CurvePower ("CP", Float) = 0
_CurveFreq ("Curve Freq", Float) = 1
_CurveColorFactor ("CCF", Float) = 1
}
SubShader {
 LOD 9001
 Tags { "IGNOREPROJECTOR" = "False" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
 Pass {
  Name "FORWARD"
  LOD 9001
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
  ColorMask RGB 0
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 11119
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    vs_TEXCOORD3.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _StepValue;
uniform 	float _SkyBoost;
uniform 	float _SkyPower;
uniform 	float _CurvePower;
uniform 	float _CurveColorFactor;
uniform 	float _CurveFreq;
uniform 	float _DitherCohesionFactor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
float u_xlat13;
float u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = log2(vs_TEXCOORD3.y);
    u_xlat1.x = u_xlat1.x * _SkyPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat7.x = vs_TEXCOORD3.y * vs_TEXCOORD3.y;
    u_xlat1.x = u_xlat7.x * _SkyBoost + u_xlat1.x;
    u_xlatb7 = u_xlat1.x<0.0;
    u_xlat1.x = (u_xlatb7) ? -1.0 : u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * _OverrideColor.xyz;
    u_xlat19 = vs_TEXCOORD3.x * _CurveFreq;
    u_xlat19 = u_xlat19 * 3.1400001;
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 + 1.0;
    u_xlat2.x = _CurveColorFactor + _CurveColorFactor;
    u_xlat19 = u_xlat19 / u_xlat2.x;
    u_xlat19 = u_xlat19 + -1.0;
    u_xlat19 = _CurvePower * u_xlat19 + 1.0;
    u_xlat2.xyw = vec3(u_xlat19) * u_xlat1.yzx;
    u_xlat3.xyz = vs_TEXCOORD2.xyy * vec3(0.00999999978, 0.00999999978, 0.0799999982);
    u_xlat4.y = (-_Time.x) * 0.333333343 + u_xlat3.z;
    u_xlat4.x = vs_TEXCOORD2.x * 0.0799999982;
    u_xlat10_4 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat16_1 = log2(u_xlat10_4.x);
    u_xlat16_1 = u_xlat16_1 * 1.5;
    u_xlat16_1 = exp2(u_xlat16_1);
    u_xlatb15 = u_xlat2.x>=u_xlat2.y;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat2.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.yz * vec2(u_xlat19) + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat15) * u_xlat5 + u_xlat4;
    u_xlatb7 = u_xlat2.w>=u_xlat4.x;
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat2.wyx;
    u_xlat4 = (-u_xlat2) + u_xlat4;
    u_xlat2 = u_xlat7.xxxx * u_xlat4 + u_xlat2;
    u_xlat7.x = min(u_xlat2.y, u_xlat2.w);
    u_xlat7.x = (-u_xlat7.x) + u_xlat2.x;
    u_xlat13 = (-u_xlat2.y) + u_xlat2.w;
    u_xlat19 = u_xlat7.x * 6.0 + 1.00000001e-010;
    u_xlat13 = u_xlat13 / u_xlat19;
    u_xlat13 = u_xlat13 + u_xlat2.z;
    u_xlat19 = u_xlat2.x + 1.00000001e-010;
    u_xlat7.x = u_xlat7.x / u_xlat19;
    u_xlat1.x = (-u_xlat16_1) * 2.0 + u_xlat2.x;
    u_xlat19 = dot(u_xlat3.xy, vec2(12.9898005, 78.2330017));
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 * 43758.5469;
    u_xlat19 = fract(u_xlat19);
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat2.x = u_xlat3.y + u_xlat3.x;
    u_xlat8 = u_xlat2.x + (-_Time.z);
    u_xlat8 = sin(u_xlat8);
    u_xlat8 = u_xlat8 + 1.0;
    u_xlat8 = u_xlat8 * 0.5;
    u_xlat14 = u_xlat2.x + _Time.z;
    u_xlat14 = sin(u_xlat14);
    u_xlat14 = u_xlat14 * 0.099999994 + 0.150000006;
    u_xlat8 = u_xlat8 * u_xlat14 + 0.349999994;
    u_xlat2.x = u_xlat2.x * 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlatb2 = 0.25<u_xlat2.x;
    u_xlat1.x = u_xlat1.x / _StepValue;
    u_xlat14 = (-u_xlat8) + u_xlat1.x;
    u_xlat14 = (-u_xlat19) * _DitherCohesionFactor + u_xlat14;
    u_xlat14 = ceil(u_xlat14);
    u_xlat14 = u_xlat14 * _StepValue;
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat19 * _DitherCohesionFactor + u_xlat1.x;
    u_xlat1.x = roundEven(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _StepValue;
    u_xlat1.x = (u_xlatb2) ? u_xlat14 : u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat2.xyz = abs(vec3(u_xlat13)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat2.xyz = fract(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat2.xyz = abs(u_xlat2.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat19 = u_xlat0.x + -0.00999999978;
    u_xlat19 = u_xlat19 * 1000.0;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(0.5, 0.5, 0.5) + vec3(0.0299999993, 0.0, 0.0700000003);
    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
    u_xlat19 = u_xlat0.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb19){
        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat19 = u_xlat2.y * 0.25 + 0.75;
        u_xlat8 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat19, u_xlat8);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat19 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 211
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %145 %151 %152 %164 %194 %200 %203 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %194 Location 194 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %200 Location 200 
                                                      OpDecorate %203 Location 203 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_2 %140 = OpConstantComposite %139 %139 
                                             %144 = OpTypePointer Output %95 
                               Output f32_2* %145 = OpVariable Output 
                                         f32 %148 = OpConstant 3.674022E-40 
                                       f32_2 %149 = OpConstantComposite %148 %148 
                               Output f32_2* %151 = OpVariable Output 
                                Input f32_4* %152 = OpVariable Input 
                                             %163 = OpTypePointer Input %50 
                                Input f32_3* %164 = OpVariable Input 
                                         u32 %170 = OpConstant 0 
                                             %171 = OpTypePointer Private %6 
                                         u32 %184 = OpConstant 2 
                                Private f32* %186 = OpVariable Private 
                               Output f32_3* %194 = OpVariable Output 
                               Output f32_3* %200 = OpVariable Output 
                                         f32 %201 = OpConstant 3.674022E-40 
                                       f32_3 %202 = OpConstantComposite %201 %201 %201 
                               Output f32_4* %203 = OpVariable Output 
                                       f32_4 %204 = OpConstantComposite %201 %201 %201 %201 
                                             %205 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %96 = OpLoad %44 
                                        f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                               Uniform f32_4* %98 = OpAccessChain %21 %36 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %97 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
                                                      OpStore %9 %103 
                              Uniform f32_4* %104 = OpAccessChain %21 %36 %23 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %107 = OpLoad %44 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 0 
                                       f32_2 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %9 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %36 %36 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpLoad %44 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 2 
                                       f32_2 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %9 %125 
                              Uniform f32_4* %126 = OpAccessChain %21 %36 %46 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                                       f32_4 %129 = OpLoad %44 
                                       f32_2 %130 = OpVectorShuffle %129 %129 3 3 
                                       f32_2 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_2 %134 = OpFAdd %131 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 3 
                                                      OpStore %9 %136 
                                       f32_4 %137 = OpLoad %9 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %9 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %9 %143 
                                       f32_4 %146 = OpLoad %9 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_2 %150 = OpFMul %147 %149 
                                                      OpStore %145 %150 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                              Uniform f32_4* %155 = OpAccessChain %21 %46 
                                       f32_4 %156 = OpLoad %155 
                                       f32_2 %157 = OpVectorShuffle %156 %156 0 1 
                                       f32_2 %158 = OpFMul %154 %157 
                              Uniform f32_4* %159 = OpAccessChain %21 %46 
                                       f32_4 %160 = OpLoad %159 
                                       f32_2 %161 = OpVectorShuffle %160 %160 2 3 
                                       f32_2 %162 = OpFAdd %158 %161 
                                                      OpStore %151 %162 
                                       f32_3 %165 = OpLoad %164 
                              Uniform f32_4* %166 = OpAccessChain %21 %24 %23 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                Private f32* %172 = OpAccessChain %9 %170 
                                                      OpStore %172 %169 
                                       f32_3 %173 = OpLoad %164 
                              Uniform f32_4* %174 = OpAccessChain %21 %24 %24 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %173 %176 
                                Private f32* %178 = OpAccessChain %9 %81 
                                                      OpStore %178 %177 
                                       f32_3 %179 = OpLoad %164 
                              Uniform f32_4* %180 = OpAccessChain %21 %24 %36 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                         f32 %183 = OpDot %179 %182 
                                Private f32* %185 = OpAccessChain %9 %184 
                                                      OpStore %185 %183 
                                       f32_4 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %188 %190 
                                                      OpStore %186 %191 
                                         f32 %192 = OpLoad %186 
                                         f32 %193 = OpExtInst %1 32 %192 
                                                      OpStore %186 %193 
                                         f32 %195 = OpLoad %186 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %196 %198 
                                                      OpStore %194 %199 
                                                      OpStore %200 %202 
                                                      OpStore %203 %204 
                                 Output f32* %206 = OpAccessChain %85 %23 %81 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFNegate %207 
                                 Output f32* %209 = OpAccessChain %85 %23 %81 
                                                      OpStore %209 %208 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 696
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %21 %140 %682 %684 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 Location 21 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 RelaxedPrecision 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 RelaxedPrecision 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpMemberDecorate %36 7 Offset 36 
                                                      OpMemberDecorate %36 8 Offset 36 
                                                      OpMemberDecorate %36 9 Offset 36 
                                                      OpMemberDecorate %36 10 Offset 36 
                                                      OpMemberDecorate %36 11 Offset 36 
                                                      OpMemberDecorate %36 12 Offset 36 
                                                      OpMemberDecorate %36 13 Offset 36 
                                                      OpMemberDecorate %36 14 Offset 36 
                                                      OpMemberDecorate %36 15 RelaxedPrecision 
                                                      OpMemberDecorate %36 15 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %164 DescriptorSet 164 
                                                      OpDecorate %164 Binding 164 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %540 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %542 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %567 SpecId 567 
                                                      OpDecorate %650 DescriptorSet 650 
                                                      OpDecorate %650 Binding 650 
                                                      OpDecorate %661 RelaxedPrecision 
                                                      OpDecorate %663 RelaxedPrecision 
                                                      OpDecorate %664 RelaxedPrecision 
                                                      OpDecorate %667 RelaxedPrecision 
                                                      OpDecorate %668 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %677 RelaxedPrecision 
                                                      OpDecorate %678 RelaxedPrecision 
                                                      OpDecorate %679 RelaxedPrecision 
                                                      OpDecorate %680 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %682 Location 682 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %684 Location 684 
                                                      OpDecorate %685 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %692 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                 Input f32_2* %21 = OpVariable Input 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Input %6 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          u32 %33 = OpConstant 4 
                                              %34 = OpTypeArray %7 %33 
                                              %35 = OpTypeVector %6 3 
                                              %36 = OpTypeStruct %7 %7 %7 %34 %35 %35 %7 %7 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 10 
                                              %41 = OpTypePointer Uniform %6 
                                              %50 = OpTypePointer Private %35 
                               Private f32_3* %51 = OpVariable Private 
                                          i32 %60 = OpConstant 9 
                                              %68 = OpTypeBool 
                                              %69 = OpTypePointer Private %68 
                                Private bool* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                              %75 = OpTypePointer Function %6 
                                          f32 %80 = OpConstant 3.674022E-40 
                                          i32 %88 = OpConstant 7 
                                              %89 = OpTypePointer Uniform %7 
                                 Private f32* %96 = OpVariable Private 
                                          i32 %99 = OpConstant 13 
                                         f32 %104 = OpConstant 3.674022E-40 
                                         f32 %109 = OpConstant 3.674022E-40 
                              Private f32_4* %111 = OpVariable Private 
                                         i32 %112 = OpConstant 12 
                                         i32 %125 = OpConstant 11 
                              Private f32_3* %138 = OpVariable Private 
                                             %139 = OpTypePointer Input %35 
                                Input f32_3* %140 = OpVariable Input 
                                         f32 %143 = OpConstant 3.674022E-40 
                                         f32 %144 = OpConstant 3.674022E-40 
                                       f32_3 %145 = OpConstantComposite %143 %143 %144 
                              Private f32_4* %147 = OpVariable Private 
                                         i32 %148 = OpConstant 0 
                                         f32 %152 = OpConstant 3.674022E-40 
                                         u32 %154 = OpConstant 2 
                                Private f32* %163 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %164 = OpVariable UniformConstant 
                              Private f32_4* %170 = OpVariable Private 
                                         f32 %176 = OpConstant 3.674022E-40 
                               Private bool* %183 = OpVariable Private 
                                Private f32* %189 = OpVariable Private 
                                         f32 %201 = OpConstant 3.674022E-40 
                                         u32 %202 = OpConstant 3 
                              Private f32_4* %204 = OpVariable Private 
                                Private f32* %267 = OpVariable Private 
                                         f32 %276 = OpConstant 3.674022E-40 
                                         f32 %278 = OpConstant 3.674022E-40 
                                         f32 %298 = OpConstant 3.674022E-40 
                                         f32 %306 = OpConstant 3.674022E-40 
                                         f32 %307 = OpConstant 3.674022E-40 
                                       f32_2 %308 = OpConstantComposite %306 %307 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                                Private f32* %326 = OpVariable Private 
                                         f32 %338 = OpConstant 3.674022E-40 
                                Private f32* %340 = OpVariable Private 
                                         f32 %349 = OpConstant 3.674022E-40 
                                         f32 %351 = OpConstant 3.674022E-40 
                                         f32 %356 = OpConstant 3.674022E-40 
                               Private bool* %366 = OpVariable Private 
                                         f32 %367 = OpConstant 3.674022E-40 
                                         i32 %373 = OpConstant 8 
                                         i32 %385 = OpConstant 14 
                                       f32_3 %437 = OpConstantComposite %109 %201 %152 
                                       f32_3 %448 = OpConstantComposite %276 %276 %276 
                                         f32 %450 = OpConstant 3.674022E-40 
                                       f32_3 %451 = OpConstantComposite %450 %450 %450 
                                       f32_3 %458 = OpConstantComposite %80 %80 %80 
                                       f32_3 %479 = OpConstantComposite %109 %109 %109 
                                       f32_3 %489 = OpConstantComposite %338 %338 %338 
                              Private f32_3* %493 = OpVariable Private 
                                         f32 %496 = OpConstant 3.674022E-40 
                                         f32 %501 = OpConstant 3.674022E-40 
                                         f32 %512 = OpConstant 3.674022E-40 
                                         f32 %513 = OpConstant 3.674022E-40 
                                       f32_3 %514 = OpConstantComposite %512 %73 %513 
                              Private f32_3* %528 = OpVariable Private 
                                       f32_3 %531 = OpConstantComposite %298 %298 %298 
                                         i32 %538 = OpConstant 15 
                               Private bool* %544 = OpVariable Private 
                                         i32 %549 = OpConstant 1 
                                         i32 %551 = OpConstant -1 
                                         i32 %557 = OpConstant 2 
                                        bool %561 = OpConstantFalse 
                                        bool %567 = OpSpecConstantFalse 
                                         i32 %575 = OpConstant 3 
                                             %601 = OpTypePointer Function %35 
                                         i32 %614 = OpConstant 5 
                                             %615 = OpTypePointer Uniform %35 
                                         i32 %624 = OpConstant 4 
                                         f32 %633 = OpConstant 3.674022E-40 
                                             %647 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %648 = OpTypeSampledImage %647 
                                             %649 = OpTypePointer UniformConstant %648 
 UniformConstant read_only Texture3DSampled* %650 = OpVariable UniformConstant 
                              Private f32_3* %670 = OpVariable Private 
                                         i32 %672 = OpConstant 6 
                                             %681 = OpTypePointer Output %7 
                               Output f32_4* %682 = OpVariable Output 
                                Input f32_3* %684 = OpVariable Input 
                                             %693 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %76 = OpVariable Function 
                               Function f32* %190 = OpVariable Function 
                               Function f32* %229 = OpVariable Function 
                               Function f32* %420 = OpVariable Function 
                             Function f32_3* %602 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                   Input f32* %25 = OpAccessChain %21 %23 
                                          f32 %26 = OpLoad %25 
                                          f32 %27 = OpExtInst %1 30 %26 
                                 Private f32* %30 = OpAccessChain %20 %28 
                                                      OpStore %30 %27 
                                 Private f32* %31 = OpAccessChain %20 %28 
                                          f32 %32 = OpLoad %31 
                                 Uniform f32* %42 = OpAccessChain %38 %40 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %32 %43 
                                 Private f32* %45 = OpAccessChain %20 %28 
                                                      OpStore %45 %44 
                                 Private f32* %46 = OpAccessChain %20 %28 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpExtInst %1 29 %47 
                                 Private f32* %49 = OpAccessChain %20 %28 
                                                      OpStore %49 %48 
                                   Input f32* %52 = OpAccessChain %21 %23 
                                          f32 %53 = OpLoad %52 
                                   Input f32* %54 = OpAccessChain %21 %23 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFMul %53 %55 
                                 Private f32* %57 = OpAccessChain %51 %28 
                                                      OpStore %57 %56 
                                 Private f32* %58 = OpAccessChain %51 %28 
                                          f32 %59 = OpLoad %58 
                                 Uniform f32* %61 = OpAccessChain %38 %60 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %59 %62 
                                 Private f32* %64 = OpAccessChain %20 %28 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %63 %65 
                                 Private f32* %67 = OpAccessChain %20 %28 
                                                      OpStore %67 %66 
                                 Private f32* %71 = OpAccessChain %20 %28 
                                          f32 %72 = OpLoad %71 
                                         bool %74 = OpFOrdLessThan %72 %73 
                                                      OpStore %70 %74 
                                         bool %77 = OpLoad %70 
                                                      OpSelectionMerge %79 None 
                                                      OpBranchConditional %77 %78 %81 
                                              %78 = OpLabel 
                                                      OpStore %76 %80 
                                                      OpBranch %79 
                                              %81 = OpLabel 
                                 Private f32* %82 = OpAccessChain %20 %28 
                                          f32 %83 = OpLoad %82 
                                                      OpStore %76 %83 
                                                      OpBranch %79 
                                              %79 = OpLabel 
                                          f32 %84 = OpLoad %76 
                                 Private f32* %85 = OpAccessChain %20 %28 
                                                      OpStore %85 %84 
                                        f32_4 %86 = OpLoad %20 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 0 0 
                               Uniform f32_4* %90 = OpAccessChain %38 %88 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                        f32_4 %94 = OpLoad %20 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %20 %95 
                                   Input f32* %97 = OpAccessChain %21 %28 
                                          f32 %98 = OpLoad %97 
                                Uniform f32* %100 = OpAccessChain %38 %99 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFMul %98 %101 
                                                      OpStore %96 %102 
                                         f32 %103 = OpLoad %96 
                                         f32 %105 = OpFMul %103 %104 
                                                      OpStore %96 %105 
                                         f32 %106 = OpLoad %96 
                                         f32 %107 = OpExtInst %1 13 %106 
                                                      OpStore %96 %107 
                                         f32 %108 = OpLoad %96 
                                         f32 %110 = OpFAdd %108 %109 
                                                      OpStore %96 %110 
                                Uniform f32* %113 = OpAccessChain %38 %112 
                                         f32 %114 = OpLoad %113 
                                Uniform f32* %115 = OpAccessChain %38 %112 
                                         f32 %116 = OpLoad %115 
                                         f32 %117 = OpFAdd %114 %116 
                                Private f32* %118 = OpAccessChain %111 %28 
                                                      OpStore %118 %117 
                                         f32 %119 = OpLoad %96 
                                Private f32* %120 = OpAccessChain %111 %28 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFDiv %119 %121 
                                                      OpStore %96 %122 
                                         f32 %123 = OpLoad %96 
                                         f32 %124 = OpFAdd %123 %80 
                                                      OpStore %96 %124 
                                Uniform f32* %126 = OpAccessChain %38 %125 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpLoad %96 
                                         f32 %129 = OpFMul %127 %128 
                                         f32 %130 = OpFAdd %129 %109 
                                                      OpStore %96 %130 
                                         f32 %131 = OpLoad %96 
                                       f32_3 %132 = OpCompositeConstruct %131 %131 %131 
                                       f32_4 %133 = OpLoad %20 
                                       f32_3 %134 = OpVectorShuffle %133 %133 1 2 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %111 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 6 
                                                      OpStore %111 %137 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %138 %146 
                                Uniform f32* %149 = OpAccessChain %38 %148 %28 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFNegate %150 
                                         f32 %153 = OpFMul %151 %152 
                                Private f32* %155 = OpAccessChain %138 %154 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFAdd %153 %156 
                                Private f32* %158 = OpAccessChain %147 %23 
                                                      OpStore %158 %157 
                                  Input f32* %159 = OpAccessChain %140 %28 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %160 %144 
                                Private f32* %162 = OpAccessChain %147 %28 
                                                      OpStore %162 %161 
                  read_only Texture2DSampled %165 = OpLoad %164 
                                       f32_4 %166 = OpLoad %147 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_4 %168 = OpImageSampleImplicitLod %165 %167 
                                         f32 %169 = OpCompositeExtract %168 0 
                                                      OpStore %163 %169 
                                         f32 %171 = OpLoad %163 
                                         f32 %172 = OpExtInst %1 30 %171 
                                Private f32* %173 = OpAccessChain %170 %28 
                                                      OpStore %173 %172 
                                Private f32* %174 = OpAccessChain %170 %28 
                                         f32 %175 = OpLoad %174 
                                         f32 %177 = OpFMul %175 %176 
                                Private f32* %178 = OpAccessChain %170 %28 
                                                      OpStore %178 %177 
                                Private f32* %179 = OpAccessChain %170 %28 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpExtInst %1 29 %180 
                                Private f32* %182 = OpAccessChain %170 %28 
                                                      OpStore %182 %181 
                                Private f32* %184 = OpAccessChain %111 %28 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %111 %23 
                                         f32 %187 = OpLoad %186 
                                        bool %188 = OpFOrdGreaterThanEqual %185 %187 
                                                      OpStore %183 %188 
                                        bool %191 = OpLoad %183 
                                                      OpSelectionMerge %193 None 
                                                      OpBranchConditional %191 %192 %194 
                                             %192 = OpLabel 
                                                      OpStore %190 %109 
                                                      OpBranch %193 
                                             %194 = OpLabel 
                                                      OpStore %190 %73 
                                                      OpBranch %193 
                                             %193 = OpLabel 
                                         f32 %195 = OpLoad %190 
                                                      OpStore %189 %195 
                                       f32_4 %196 = OpLoad %111 
                                       f32_2 %197 = OpVectorShuffle %196 %196 1 0 
                                       f32_4 %198 = OpLoad %147 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 3 
                                                      OpStore %147 %199 
                                Private f32* %200 = OpAccessChain %147 %154 
                                                      OpStore %200 %80 
                                Private f32* %203 = OpAccessChain %147 %202 
                                                      OpStore %203 %201 
                                       f32_4 %205 = OpLoad %20 
                                       f32_2 %206 = OpVectorShuffle %205 %205 1 2 
                                         f32 %207 = OpLoad %96 
                                       f32_2 %208 = OpCompositeConstruct %207 %207 
                                       f32_2 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %147 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 1 
                                       f32_2 %212 = OpFNegate %211 
                                       f32_2 %213 = OpFAdd %209 %212 
                                       f32_4 %214 = OpLoad %204 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %204 %215 
                                Private f32* %216 = OpAccessChain %204 %154 
                                                      OpStore %216 %109 
                                Private f32* %217 = OpAccessChain %204 %202 
                                                      OpStore %217 %80 
                                         f32 %218 = OpLoad %189 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                       f32_4 %220 = OpLoad %204 
                                       f32_4 %221 = OpFMul %219 %220 
                                       f32_4 %222 = OpLoad %147 
                                       f32_4 %223 = OpFAdd %221 %222 
                                                      OpStore %147 %223 
                                Private f32* %224 = OpAccessChain %111 %202 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %147 %28 
                                         f32 %227 = OpLoad %226 
                                        bool %228 = OpFOrdGreaterThanEqual %225 %227 
                                                      OpStore %70 %228 
                                        bool %230 = OpLoad %70 
                                                      OpSelectionMerge %232 None 
                                                      OpBranchConditional %230 %231 %233 
                                             %231 = OpLabel 
                                                      OpStore %229 %109 
                                                      OpBranch %232 
                                             %233 = OpLabel 
                                                      OpStore %229 %73 
                                                      OpBranch %232 
                                             %232 = OpLabel 
                                         f32 %234 = OpLoad %229 
                                Private f32* %235 = OpAccessChain %51 %28 
                                                      OpStore %235 %234 
                                       f32_4 %236 = OpLoad %147 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 3 
                                       f32_4 %238 = OpLoad %111 
                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 6 3 
                                                      OpStore %111 %239 
                                       f32_4 %240 = OpLoad %111 
                                       f32_3 %241 = OpVectorShuffle %240 %240 3 1 0 
                                       f32_4 %242 = OpLoad %147 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 2 6 
                                                      OpStore %147 %243 
                                       f32_4 %244 = OpLoad %111 
                                       f32_4 %245 = OpFNegate %244 
                                       f32_4 %246 = OpLoad %147 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %147 %247 
                                       f32_3 %248 = OpLoad %51 
                                       f32_4 %249 = OpVectorShuffle %248 %248 0 0 0 0 
                                       f32_4 %250 = OpLoad %147 
                                       f32_4 %251 = OpFMul %249 %250 
                                       f32_4 %252 = OpLoad %111 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %111 %253 
                                Private f32* %254 = OpAccessChain %111 %23 
                                         f32 %255 = OpLoad %254 
                                Private f32* %256 = OpAccessChain %111 %202 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpExtInst %1 37 %255 %257 
                                Private f32* %259 = OpAccessChain %51 %28 
                                                      OpStore %259 %258 
                                Private f32* %260 = OpAccessChain %51 %28 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpFNegate %261 
                                Private f32* %263 = OpAccessChain %111 %28 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %51 %28 
                                                      OpStore %266 %265 
                                Private f32* %268 = OpAccessChain %111 %23 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                Private f32* %271 = OpAccessChain %111 %202 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpFAdd %270 %272 
                                                      OpStore %267 %273 
                                Private f32* %274 = OpAccessChain %51 %28 
                                         f32 %275 = OpLoad %274 
                                         f32 %277 = OpFMul %275 %276 
                                         f32 %279 = OpFAdd %277 %278 
                                                      OpStore %96 %279 
                                         f32 %280 = OpLoad %267 
                                         f32 %281 = OpLoad %96 
                                         f32 %282 = OpFDiv %280 %281 
                                                      OpStore %267 %282 
                                         f32 %283 = OpLoad %267 
                                Private f32* %284 = OpAccessChain %111 %154 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpFAdd %283 %285 
                                                      OpStore %267 %286 
                                Private f32* %287 = OpAccessChain %111 %28 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFAdd %288 %278 
                                                      OpStore %96 %289 
                                Private f32* %290 = OpAccessChain %51 %28 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpLoad %96 
                                         f32 %293 = OpFDiv %291 %292 
                                Private f32* %294 = OpAccessChain %51 %28 
                                                      OpStore %294 %293 
                                Private f32* %295 = OpAccessChain %170 %28 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpFNegate %296 
                                         f32 %299 = OpFMul %297 %298 
                                Private f32* %300 = OpAccessChain %111 %28 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                Private f32* %303 = OpAccessChain %20 %28 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %138 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                         f32 %309 = OpDot %305 %308 
                                                      OpStore %96 %309 
                                         f32 %310 = OpLoad %96 
                                         f32 %311 = OpExtInst %1 13 %310 
                                                      OpStore %96 %311 
                                         f32 %312 = OpLoad %96 
                                         f32 %314 = OpFMul %312 %313 
                                                      OpStore %96 %314 
                                         f32 %315 = OpLoad %96 
                                         f32 %316 = OpExtInst %1 10 %315 
                                                      OpStore %96 %316 
                                         f32 %317 = OpLoad %96 
                                         f32 %319 = OpFAdd %317 %318 
                                                      OpStore %96 %319 
                                Private f32* %320 = OpAccessChain %138 %23 
                                         f32 %321 = OpLoad %320 
                                Private f32* %322 = OpAccessChain %138 %28 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFAdd %321 %323 
                                Private f32* %325 = OpAccessChain %111 %28 
                                                      OpStore %325 %324 
                                Private f32* %327 = OpAccessChain %111 %28 
                                         f32 %328 = OpLoad %327 
                                Uniform f32* %329 = OpAccessChain %38 %148 %154 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFNegate %330 
                                         f32 %332 = OpFAdd %328 %331 
                                                      OpStore %326 %332 
                                         f32 %333 = OpLoad %326 
                                         f32 %334 = OpExtInst %1 13 %333 
                                                      OpStore %326 %334 
                                         f32 %335 = OpLoad %326 
                                         f32 %336 = OpFAdd %335 %109 
                                                      OpStore %326 %336 
                                         f32 %337 = OpLoad %326 
                                         f32 %339 = OpFMul %337 %338 
                                                      OpStore %326 %339 
                                Private f32* %341 = OpAccessChain %111 %28 
                                         f32 %342 = OpLoad %341 
                                Uniform f32* %343 = OpAccessChain %38 %148 %154 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFAdd %342 %344 
                                                      OpStore %340 %345 
                                         f32 %346 = OpLoad %340 
                                         f32 %347 = OpExtInst %1 13 %346 
                                                      OpStore %340 %347 
                                         f32 %348 = OpLoad %340 
                                         f32 %350 = OpFMul %348 %349 
                                         f32 %352 = OpFAdd %350 %351 
                                                      OpStore %340 %352 
                                         f32 %353 = OpLoad %326 
                                         f32 %354 = OpLoad %340 
                                         f32 %355 = OpFMul %353 %354 
                                         f32 %357 = OpFAdd %355 %356 
                                                      OpStore %326 %357 
                                Private f32* %358 = OpAccessChain %111 %28 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFMul %359 %338 
                                Private f32* %361 = OpAccessChain %111 %28 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %111 %28 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpExtInst %1 10 %363 
                                Private f32* %365 = OpAccessChain %111 %28 
                                                      OpStore %365 %364 
                                Private f32* %368 = OpAccessChain %111 %28 
                                         f32 %369 = OpLoad %368 
                                        bool %370 = OpFOrdLessThan %367 %369 
                                                      OpStore %366 %370 
                                Private f32* %371 = OpAccessChain %20 %28 
                                         f32 %372 = OpLoad %371 
                                Uniform f32* %374 = OpAccessChain %38 %373 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpFDiv %372 %375 
                                Private f32* %377 = OpAccessChain %20 %28 
                                                      OpStore %377 %376 
                                         f32 %378 = OpLoad %326 
                                         f32 %379 = OpFNegate %378 
                                Private f32* %380 = OpAccessChain %20 %28 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFAdd %379 %381 
                                                      OpStore %340 %382 
                                         f32 %383 = OpLoad %96 
                                         f32 %384 = OpFNegate %383 
                                Uniform f32* %386 = OpAccessChain %38 %385 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpFMul %384 %387 
                                         f32 %389 = OpLoad %340 
                                         f32 %390 = OpFAdd %388 %389 
                                                      OpStore %340 %390 
                                         f32 %391 = OpLoad %340 
                                         f32 %392 = OpExtInst %1 9 %391 
                                                      OpStore %340 %392 
                                         f32 %393 = OpLoad %340 
                                Uniform f32* %394 = OpAccessChain %38 %373 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %340 %396 
                                         f32 %397 = OpLoad %326 
                                Private f32* %398 = OpAccessChain %20 %28 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFAdd %397 %399 
                                Private f32* %401 = OpAccessChain %20 %28 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %96 
                                Uniform f32* %403 = OpAccessChain %38 %385 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFMul %402 %404 
                                Private f32* %406 = OpAccessChain %20 %28 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpFAdd %405 %407 
                                Private f32* %409 = OpAccessChain %20 %28 
                                                      OpStore %409 %408 
                                Private f32* %410 = OpAccessChain %20 %28 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpExtInst %1 2 %411 
                                Private f32* %413 = OpAccessChain %20 %28 
                                                      OpStore %413 %412 
                                Private f32* %414 = OpAccessChain %20 %28 
                                         f32 %415 = OpLoad %414 
                                Uniform f32* %416 = OpAccessChain %38 %373 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFMul %415 %417 
                                Private f32* %419 = OpAccessChain %20 %28 
                                                      OpStore %419 %418 
                                        bool %421 = OpLoad %366 
                                                      OpSelectionMerge %423 None 
                                                      OpBranchConditional %421 %422 %425 
                                             %422 = OpLabel 
                                         f32 %424 = OpLoad %340 
                                                      OpStore %420 %424 
                                                      OpBranch %423 
                                             %425 = OpLabel 
                                Private f32* %426 = OpAccessChain %20 %28 
                                         f32 %427 = OpLoad %426 
                                                      OpStore %420 %427 
                                                      OpBranch %423 
                                             %423 = OpLabel 
                                         f32 %428 = OpLoad %420 
                                Private f32* %429 = OpAccessChain %20 %28 
                                                      OpStore %429 %428 
                                Private f32* %430 = OpAccessChain %20 %28 
                                         f32 %431 = OpLoad %430 
                                         f32 %432 = OpExtInst %1 40 %431 %73 
                                Private f32* %433 = OpAccessChain %20 %28 
                                                      OpStore %433 %432 
                                         f32 %434 = OpLoad %267 
                                       f32_3 %435 = OpCompositeConstruct %434 %434 %434 
                                       f32_3 %436 = OpExtInst %1 4 %435 
                                       f32_3 %438 = OpFAdd %436 %437 
                                       f32_4 %439 = OpLoad %111 
                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
                                                      OpStore %111 %440 
                                       f32_4 %441 = OpLoad %111 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_3 %443 = OpExtInst %1 10 %442 
                                       f32_4 %444 = OpLoad %111 
                                       f32_4 %445 = OpVectorShuffle %444 %443 4 5 6 3 
                                                      OpStore %111 %445 
                                       f32_4 %446 = OpLoad %111 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 1 2 
                                       f32_3 %449 = OpFMul %447 %448 
                                       f32_3 %452 = OpFAdd %449 %451 
                                       f32_4 %453 = OpLoad %111 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 6 3 
                                                      OpStore %111 %454 
                                       f32_4 %455 = OpLoad %111 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpExtInst %1 4 %456 
                                       f32_3 %459 = OpFAdd %457 %458 
                                       f32_4 %460 = OpLoad %111 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 6 3 
                                                      OpStore %111 %461 
                                       f32_4 %462 = OpLoad %111 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                       f32_3 %464 = OpCompositeConstruct %73 %73 %73 
                                       f32_3 %465 = OpCompositeConstruct %109 %109 %109 
                                       f32_3 %466 = OpExtInst %1 43 %463 %464 %465 
                                       f32_4 %467 = OpLoad %111 
                                       f32_4 %468 = OpVectorShuffle %467 %466 4 5 6 3 
                                                      OpStore %111 %468 
                                       f32_4 %469 = OpLoad %111 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_3 %471 = OpFAdd %470 %458 
                                       f32_4 %472 = OpLoad %111 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %111 %473 
                                       f32_3 %474 = OpLoad %51 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 0 0 
                                       f32_4 %476 = OpLoad %111 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFMul %475 %477 
                                       f32_3 %480 = OpFAdd %478 %479 
                                                      OpStore %51 %480 
                                       f32_3 %481 = OpLoad %51 
                                       f32_4 %482 = OpLoad %20 
                                       f32_3 %483 = OpVectorShuffle %482 %482 0 0 0 
                                       f32_3 %484 = OpFMul %481 %483 
                                       f32_4 %485 = OpLoad %20 
                                       f32_4 %486 = OpVectorShuffle %485 %484 4 5 6 3 
                                                      OpStore %20 %486 
                                       f32_4 %487 = OpLoad %20 
                                       f32_3 %488 = OpVectorShuffle %487 %487 0 1 2 
                                       f32_3 %490 = OpFMul %488 %489 
                                       f32_4 %491 = OpLoad %111 
                                       f32_4 %492 = OpVectorShuffle %491 %490 4 5 6 3 
                                                      OpStore %111 %492 
                                Private f32* %494 = OpAccessChain %9 %28 
                                         f32 %495 = OpLoad %494 
                                         f32 %497 = OpFAdd %495 %496 
                                Private f32* %498 = OpAccessChain %493 %28 
                                                      OpStore %498 %497 
                                Private f32* %499 = OpAccessChain %493 %28 
                                         f32 %500 = OpLoad %499 
                                         f32 %502 = OpFMul %500 %501 
                                Private f32* %503 = OpAccessChain %493 %28 
                                                      OpStore %503 %502 
                                Private f32* %504 = OpAccessChain %493 %28 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpExtInst %1 43 %505 %73 %109 
                                Private f32* %507 = OpAccessChain %493 %28 
                                                      OpStore %507 %506 
                                       f32_4 %508 = OpLoad %20 
                                       f32_3 %509 = OpVectorShuffle %508 %508 0 1 2 
                                       f32_3 %510 = OpFNegate %509 
                                       f32_3 %511 = OpFMul %510 %489 
                                       f32_3 %515 = OpFAdd %511 %514 
                                       f32_4 %516 = OpLoad %20 
                                       f32_4 %517 = OpVectorShuffle %516 %515 4 5 6 3 
                                                      OpStore %20 %517 
                                       f32_3 %518 = OpLoad %493 
                                       f32_3 %519 = OpVectorShuffle %518 %518 0 0 0 
                                       f32_4 %520 = OpLoad %20 
                                       f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
                                       f32_3 %522 = OpFMul %519 %521 
                                       f32_4 %523 = OpLoad %111 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                       f32_3 %525 = OpFAdd %522 %524 
                                       f32_4 %526 = OpLoad %20 
                                       f32_4 %527 = OpVectorShuffle %526 %525 4 5 6 3 
                                                      OpStore %20 %527 
                                       f32_4 %529 = OpLoad %9 
                                       f32_3 %530 = OpVectorShuffle %529 %529 0 1 2 
                                       f32_3 %532 = OpFMul %530 %531 
                                       f32_4 %533 = OpLoad %20 
                                       f32_3 %534 = OpVectorShuffle %533 %533 0 1 2 
                                       f32_3 %535 = OpFAdd %532 %534 
                                                      OpStore %528 %535 
                                Private f32* %536 = OpAccessChain %9 %202 
                                         f32 %537 = OpLoad %536 
                                Uniform f32* %539 = OpAccessChain %38 %538 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFNegate %540 
                                         f32 %542 = OpFAdd %537 %541 
                                Private f32* %543 = OpAccessChain %493 %28 
                                                      OpStore %543 %542 
                                Private f32* %545 = OpAccessChain %493 %28 
                                         f32 %546 = OpLoad %545 
                                        bool %547 = OpFOrdLessThan %546 %73 
                                                      OpStore %544 %547 
                                        bool %548 = OpLoad %544 
                                         i32 %550 = OpSelect %548 %549 %148 
                                         i32 %552 = OpIMul %550 %551 
                                        bool %553 = OpINotEqual %552 %148 
                                                      OpSelectionMerge %555 None 
                                                      OpBranchConditional %553 %554 %555 
                                             %554 = OpLabel 
                                                      OpKill
                                             %555 = OpLabel 
                                Uniform f32* %558 = OpAccessChain %38 %557 %28 
                                         f32 %559 = OpLoad %558 
                                        bool %560 = OpFOrdEqual %559 %109 
                                                      OpStore %544 %560 
                                                      OpSelectionMerge %563 None 
                                                      OpBranchConditional %561 %562 %563 
                                             %562 = OpLabel 
                                        bool %564 = OpLoad %544 
                                                      OpSelectionMerge %566 None 
                                                      OpBranchConditional %564 %565 %566 
                                             %565 = OpLabel 
                                                      OpBranch %566 
                                             %566 = OpLabel 
                                                      OpBranch %563 
                                             %563 = OpLabel 
                                                      OpSelectionMerge %569 None 
                                                      OpBranchConditional %567 %568 %656 
                                             %568 = OpLabel 
                                Uniform f32* %570 = OpAccessChain %38 %557 %23 
                                         f32 %571 = OpLoad %570 
                                        bool %572 = OpFOrdEqual %571 %109 
                                                      OpStore %544 %572 
                                       f32_3 %573 = OpLoad %140 
                                       f32_3 %574 = OpVectorShuffle %573 %573 1 1 1 
                              Uniform f32_4* %576 = OpAccessChain %38 %575 %549 
                                       f32_4 %577 = OpLoad %576 
                                       f32_3 %578 = OpVectorShuffle %577 %577 0 1 2 
                                       f32_3 %579 = OpFMul %574 %578 
                                                      OpStore %51 %579 
                              Uniform f32_4* %580 = OpAccessChain %38 %575 %148 
                                       f32_4 %581 = OpLoad %580 
                                       f32_3 %582 = OpVectorShuffle %581 %581 0 1 2 
                                       f32_3 %583 = OpLoad %140 
                                       f32_3 %584 = OpVectorShuffle %583 %583 0 0 0 
                                       f32_3 %585 = OpFMul %582 %584 
                                       f32_3 %586 = OpLoad %51 
                                       f32_3 %587 = OpFAdd %585 %586 
                                                      OpStore %51 %587 
                              Uniform f32_4* %588 = OpAccessChain %38 %575 %557 
                                       f32_4 %589 = OpLoad %588 
                                       f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
                                       f32_3 %591 = OpLoad %140 
                                       f32_3 %592 = OpVectorShuffle %591 %591 2 2 2 
                                       f32_3 %593 = OpFMul %590 %592 
                                       f32_3 %594 = OpLoad %51 
                                       f32_3 %595 = OpFAdd %593 %594 
                                                      OpStore %51 %595 
                                       f32_3 %596 = OpLoad %51 
                              Uniform f32_4* %597 = OpAccessChain %38 %575 %575 
                                       f32_4 %598 = OpLoad %597 
                                       f32_3 %599 = OpVectorShuffle %598 %598 0 1 2 
                                       f32_3 %600 = OpFAdd %596 %599 
                                                      OpStore %51 %600 
                                        bool %603 = OpLoad %544 
                                                      OpSelectionMerge %605 None 
                                                      OpBranchConditional %603 %604 %607 
                                             %604 = OpLabel 
                                       f32_3 %606 = OpLoad %51 
                                                      OpStore %602 %606 
                                                      OpBranch %605 
                                             %607 = OpLabel 
                                       f32_3 %608 = OpLoad %140 
                                                      OpStore %602 %608 
                                                      OpBranch %605 
                                             %605 = OpLabel 
                                       f32_3 %609 = OpLoad %602 
                                       f32_4 %610 = OpLoad %20 
                                       f32_4 %611 = OpVectorShuffle %610 %609 4 5 6 3 
                                                      OpStore %20 %611 
                                       f32_4 %612 = OpLoad %20 
                                       f32_3 %613 = OpVectorShuffle %612 %612 0 1 2 
                              Uniform f32_3* %616 = OpAccessChain %38 %614 
                                       f32_3 %617 = OpLoad %616 
                                       f32_3 %618 = OpFNegate %617 
                                       f32_3 %619 = OpFAdd %613 %618 
                                       f32_4 %620 = OpLoad %20 
                                       f32_4 %621 = OpVectorShuffle %620 %619 4 5 6 3 
                                                      OpStore %20 %621 
                                       f32_4 %622 = OpLoad %20 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                              Uniform f32_3* %625 = OpAccessChain %38 %624 
                                       f32_3 %626 = OpLoad %625 
                                       f32_3 %627 = OpFMul %623 %626 
                                       f32_4 %628 = OpLoad %20 
                                       f32_4 %629 = OpVectorShuffle %628 %627 0 4 5 6 
                                                      OpStore %20 %629 
                                Private f32* %630 = OpAccessChain %20 %23 
                                         f32 %631 = OpLoad %630 
                                         f32 %632 = OpFMul %631 %367 
                                         f32 %634 = OpFAdd %632 %633 
                                Private f32* %635 = OpAccessChain %51 %28 
                                                      OpStore %635 %634 
                                Uniform f32* %636 = OpAccessChain %38 %557 %154 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpFMul %637 %338 
                                         f32 %639 = OpFAdd %638 %633 
                                Private f32* %640 = OpAccessChain %111 %28 
                                                      OpStore %640 %639 
                                Private f32* %641 = OpAccessChain %51 %28 
                                         f32 %642 = OpLoad %641 
                                Private f32* %643 = OpAccessChain %111 %28 
                                         f32 %644 = OpLoad %643 
                                         f32 %645 = OpExtInst %1 40 %642 %644 
                                Private f32* %646 = OpAccessChain %20 %28 
                                                      OpStore %646 %645 
                  read_only Texture3DSampled %651 = OpLoad %650 
                                       f32_4 %652 = OpLoad %20 
                                       f32_3 %653 = OpVectorShuffle %652 %652 0 2 3 
                                       f32_4 %654 = OpImageSampleImplicitLod %651 %653 
                                                      OpStore %20 %654 
                                       f32_4 %655 = OpLoad %20 
                                                      OpStore %170 %655 
                                                      OpBranch %569 
                                             %656 = OpLabel 
                                Private f32* %657 = OpAccessChain %170 %28 
                                                      OpStore %657 %109 
                                Private f32* %658 = OpAccessChain %170 %23 
                                                      OpStore %658 %109 
                                Private f32* %659 = OpAccessChain %170 %154 
                                                      OpStore %659 %109 
                                Private f32* %660 = OpAccessChain %170 %202 
                                                      OpStore %660 %109 
                                                      OpBranch %569 
                                             %569 = OpLabel 
                                       f32_4 %661 = OpLoad %170 
                              Uniform f32_4* %662 = OpAccessChain %38 %549 
                                       f32_4 %663 = OpLoad %662 
                                         f32 %664 = OpDot %661 %663 
                                Private f32* %665 = OpAccessChain %493 %28 
                                                      OpStore %665 %664 
                                Private f32* %666 = OpAccessChain %493 %28 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpExtInst %1 43 %667 %73 %109 
                                Private f32* %669 = OpAccessChain %493 %28 
                                                      OpStore %669 %668 
                                       f32_3 %671 = OpLoad %528 
                              Uniform f32_4* %673 = OpAccessChain %38 %672 
                                       f32_4 %674 = OpLoad %673 
                                       f32_3 %675 = OpVectorShuffle %674 %674 0 1 2 
                                       f32_3 %676 = OpFMul %671 %675 
                                                      OpStore %670 %676 
                                       f32_3 %677 = OpLoad %493 
                                       f32_3 %678 = OpVectorShuffle %677 %677 0 0 0 
                                       f32_3 %679 = OpLoad %670 
                                       f32_3 %680 = OpFMul %678 %679 
                                                      OpStore %493 %680 
                                       f32_3 %683 = OpLoad %528 
                                       f32_3 %685 = OpLoad %684 
                                       f32_3 %686 = OpFMul %683 %685 
                                       f32_3 %687 = OpLoad %493 
                                       f32_3 %688 = OpFAdd %686 %687 
                                       f32_4 %689 = OpLoad %682 
                                       f32_4 %690 = OpVectorShuffle %689 %688 4 5 6 3 
                                                      OpStore %682 %690 
                                Private f32* %691 = OpAccessChain %9 %202 
                                         f32 %692 = OpLoad %691 
                                 Output f32* %694 = OpAccessChain %682 %202 
                                                      OpStore %694 %692 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    vs_TEXCOORD3.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _StepValue;
uniform 	float _SkyBoost;
uniform 	float _SkyPower;
uniform 	float _CurvePower;
uniform 	float _CurveColorFactor;
uniform 	float _CurveFreq;
uniform 	float _DitherCohesionFactor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
float u_xlat13;
float u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = log2(vs_TEXCOORD3.y);
    u_xlat1.x = u_xlat1.x * _SkyPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat7.x = vs_TEXCOORD3.y * vs_TEXCOORD3.y;
    u_xlat1.x = u_xlat7.x * _SkyBoost + u_xlat1.x;
    u_xlatb7 = u_xlat1.x<0.0;
    u_xlat1.x = (u_xlatb7) ? -1.0 : u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * _OverrideColor.xyz;
    u_xlat19 = vs_TEXCOORD3.x * _CurveFreq;
    u_xlat19 = u_xlat19 * 3.1400001;
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 + 1.0;
    u_xlat2.x = _CurveColorFactor + _CurveColorFactor;
    u_xlat19 = u_xlat19 / u_xlat2.x;
    u_xlat19 = u_xlat19 + -1.0;
    u_xlat19 = _CurvePower * u_xlat19 + 1.0;
    u_xlat2.xyw = vec3(u_xlat19) * u_xlat1.yzx;
    u_xlat3.xyz = vs_TEXCOORD2.xyy * vec3(0.00999999978, 0.00999999978, 0.0799999982);
    u_xlat4.y = (-_Time.x) * 0.333333343 + u_xlat3.z;
    u_xlat4.x = vs_TEXCOORD2.x * 0.0799999982;
    u_xlat10_4 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat16_1 = log2(u_xlat10_4.x);
    u_xlat16_1 = u_xlat16_1 * 1.5;
    u_xlat16_1 = exp2(u_xlat16_1);
    u_xlatb15 = u_xlat2.x>=u_xlat2.y;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat2.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.yz * vec2(u_xlat19) + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat15) * u_xlat5 + u_xlat4;
    u_xlatb7 = u_xlat2.w>=u_xlat4.x;
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat2.wyx;
    u_xlat4 = (-u_xlat2) + u_xlat4;
    u_xlat2 = u_xlat7.xxxx * u_xlat4 + u_xlat2;
    u_xlat7.x = min(u_xlat2.y, u_xlat2.w);
    u_xlat7.x = (-u_xlat7.x) + u_xlat2.x;
    u_xlat13 = (-u_xlat2.y) + u_xlat2.w;
    u_xlat19 = u_xlat7.x * 6.0 + 1.00000001e-010;
    u_xlat13 = u_xlat13 / u_xlat19;
    u_xlat13 = u_xlat13 + u_xlat2.z;
    u_xlat19 = u_xlat2.x + 1.00000001e-010;
    u_xlat7.x = u_xlat7.x / u_xlat19;
    u_xlat1.x = (-u_xlat16_1) * 2.0 + u_xlat2.x;
    u_xlat19 = dot(u_xlat3.xy, vec2(12.9898005, 78.2330017));
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 * 43758.5469;
    u_xlat19 = fract(u_xlat19);
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat2.x = u_xlat3.y + u_xlat3.x;
    u_xlat8 = u_xlat2.x + (-_Time.z);
    u_xlat8 = sin(u_xlat8);
    u_xlat8 = u_xlat8 + 1.0;
    u_xlat8 = u_xlat8 * 0.5;
    u_xlat14 = u_xlat2.x + _Time.z;
    u_xlat14 = sin(u_xlat14);
    u_xlat14 = u_xlat14 * 0.099999994 + 0.150000006;
    u_xlat8 = u_xlat8 * u_xlat14 + 0.349999994;
    u_xlat2.x = u_xlat2.x * 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlatb2 = 0.25<u_xlat2.x;
    u_xlat1.x = u_xlat1.x / _StepValue;
    u_xlat14 = (-u_xlat8) + u_xlat1.x;
    u_xlat14 = (-u_xlat19) * _DitherCohesionFactor + u_xlat14;
    u_xlat14 = ceil(u_xlat14);
    u_xlat14 = u_xlat14 * _StepValue;
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat19 * _DitherCohesionFactor + u_xlat1.x;
    u_xlat1.x = roundEven(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _StepValue;
    u_xlat1.x = (u_xlatb2) ? u_xlat14 : u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat2.xyz = abs(vec3(u_xlat13)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat2.xyz = fract(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat2.xyz = abs(u_xlat2.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat19 = u_xlat0.x + -0.00999999978;
    u_xlat19 = u_xlat19 * 1000.0;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(0.5, 0.5, 0.5) + vec3(0.0299999993, 0.0, 0.0700000003);
    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
    u_xlat19 = u_xlat0.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb19){
        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat19 = u_xlat2.y * 0.25 + 0.75;
        u_xlat8 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat19, u_xlat8);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat19 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 325
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %147 %153 %154 %167 %205 %314 %317 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %167 Location 167 
                                                      OpDecorate %205 Location 205 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %314 Location 314 
                                                      OpDecorate %317 Location 317 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                         f32 %141 = OpConstant 3.674022E-40 
                                       f32_2 %142 = OpConstantComposite %141 %141 
                                             %146 = OpTypePointer Output %97 
                               Output f32_2* %147 = OpVariable Output 
                                         f32 %150 = OpConstant 3.674022E-40 
                                       f32_2 %151 = OpConstantComposite %150 %150 
                               Output f32_2* %153 = OpVariable Output 
                                Input f32_4* %154 = OpVariable Input 
                                         i32 %157 = OpConstant 10 
                                             %166 = OpTypePointer Input %51 
                                Input f32_3* %167 = OpVariable Input 
                                         i32 %169 = OpConstant 8 
                                         u32 %174 = OpConstant 0 
                                             %175 = OpTypePointer Private %6 
                                         u32 %188 = OpConstant 2 
                                Private f32* %190 = OpVariable Private 
                               Output f32_3* %205 = OpVariable Output 
                                             %208 = OpTypePointer Private %51 
                              Private f32_3* %209 = OpVariable Private 
                              Private f32_4* %226 = OpVariable Private 
                              Private f32_3* %232 = OpVariable Private 
                                         i32 %238 = OpConstant 4 
                                         i32 %244 = OpConstant 5 
                                         i32 %250 = OpConstant 6 
                                         u32 %259 = OpConstant 3 
                                         f32 %280 = OpConstant 3.674022E-40 
                                       f32_3 %281 = OpConstantComposite %280 %280 %280 
                                         f32 %289 = OpConstant 3.674022E-40 
                                       f32_3 %290 = OpConstantComposite %289 %289 %289 
                                         f32 %301 = OpConstant 3.674022E-40 
                                       f32_3 %302 = OpConstantComposite %301 %301 %301 
                                         f32 %304 = OpConstant 3.674022E-40 
                                       f32_3 %305 = OpConstantComposite %304 %304 %304 
                               Output f32_3* %314 = OpVariable Output 
                               Output f32_4* %317 = OpVariable Output 
                                       f32_4 %318 = OpConstantComposite %280 %280 %280 %280 
                                             %319 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                        f32_4 %98 = OpLoad %45 
                                        f32_2 %99 = OpVectorShuffle %98 %98 1 1 
                              Uniform f32_4* %100 = OpAccessChain %21 %65 %24 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %99 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 2 3 
                                                      OpStore %9 %105 
                              Uniform f32_4* %106 = OpAccessChain %21 %65 %29 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
                                       f32_4 %109 = OpLoad %45 
                                       f32_2 %110 = OpVectorShuffle %109 %109 0 0 
                                       f32_2 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_2 %113 = OpVectorShuffle %112 %112 0 1 
                                       f32_2 %114 = OpFAdd %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 2 3 
                                                      OpStore %9 %116 
                              Uniform f32_4* %117 = OpAccessChain %21 %65 %37 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpLoad %45 
                                       f32_2 %121 = OpVectorShuffle %120 %120 2 2 
                                       f32_2 %122 = OpFMul %119 %121 
                                       f32_4 %123 = OpLoad %9 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpVectorShuffle %126 %125 4 5 2 3 
                                                      OpStore %9 %127 
                              Uniform f32_4* %128 = OpAccessChain %21 %65 %47 
                                       f32_4 %129 = OpLoad %128 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                                       f32_4 %131 = OpLoad %45 
                                       f32_2 %132 = OpVectorShuffle %131 %131 3 3 
                                       f32_2 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %9 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFAdd %133 %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 3 
                                                      OpStore %9 %138 
                                       f32_4 %139 = OpLoad %9 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_2 %143 = OpFAdd %140 %142 
                                       f32_4 %144 = OpLoad %9 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %9 %145 
                                       f32_4 %148 = OpLoad %9 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_2 %152 = OpFMul %149 %151 
                                                      OpStore %147 %152 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 0 1 
                              Uniform f32_4* %158 = OpAccessChain %21 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                                       f32_2 %161 = OpFMul %156 %160 
                              Uniform f32_4* %162 = OpAccessChain %21 %157 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_2 %165 = OpFAdd %161 %164 
                                                      OpStore %153 %165 
                                       f32_3 %168 = OpLoad %167 
                              Uniform f32_4* %170 = OpAccessChain %21 %169 %29 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %168 %172 
                                Private f32* %176 = OpAccessChain %9 %174 
                                                      OpStore %176 %173 
                                       f32_3 %177 = OpLoad %167 
                              Uniform f32_4* %178 = OpAccessChain %21 %169 %24 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                         f32 %181 = OpDot %177 %180 
                                Private f32* %182 = OpAccessChain %9 %83 
                                                      OpStore %182 %181 
                                       f32_3 %183 = OpLoad %167 
                              Uniform f32_4* %184 = OpAccessChain %21 %169 %37 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                         f32 %187 = OpDot %183 %186 
                                Private f32* %189 = OpAccessChain %9 %188 
                                                      OpStore %189 %187 
                                       f32_4 %191 = OpLoad %9 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                         f32 %195 = OpDot %192 %194 
                                                      OpStore %190 %195 
                                         f32 %196 = OpLoad %190 
                                         f32 %197 = OpExtInst %1 32 %196 
                                                      OpStore %190 %197 
                                         f32 %198 = OpLoad %190 
                                       f32_3 %199 = OpCompositeConstruct %198 %198 %198 
                                       f32_4 %200 = OpLoad %9 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %9 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 6 3 
                                                      OpStore %9 %204 
                                       f32_4 %206 = OpLoad %9 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                                      OpStore %205 %207 
                                Private f32* %210 = OpAccessChain %9 %83 
                                         f32 %211 = OpLoad %210 
                                Private f32* %212 = OpAccessChain %9 %83 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                Private f32* %215 = OpAccessChain %209 %174 
                                                      OpStore %215 %214 
                                Private f32* %216 = OpAccessChain %9 %174 
                                         f32 %217 = OpLoad %216 
                                Private f32* %218 = OpAccessChain %9 %174 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %217 %219 
                                Private f32* %221 = OpAccessChain %209 %174 
                                         f32 %222 = OpLoad %221 
                                         f32 %223 = OpFNegate %222 
                                         f32 %224 = OpFAdd %220 %223 
                                Private f32* %225 = OpAccessChain %209 %174 
                                                      OpStore %225 %224 
                                       f32_4 %227 = OpLoad %9 
                                       f32_4 %228 = OpVectorShuffle %227 %227 1 2 2 0 
                                       f32_4 %229 = OpLoad %9 
                                       f32_4 %230 = OpVectorShuffle %229 %229 0 1 2 2 
                                       f32_4 %231 = OpFMul %228 %230 
                                                      OpStore %226 %231 
                              Uniform f32_4* %233 = OpAccessChain %21 %47 
                                       f32_4 %234 = OpLoad %233 
                                       f32_4 %235 = OpLoad %226 
                                         f32 %236 = OpDot %234 %235 
                                Private f32* %237 = OpAccessChain %232 %174 
                                                      OpStore %237 %236 
                              Uniform f32_4* %239 = OpAccessChain %21 %238 
                                       f32_4 %240 = OpLoad %239 
                                       f32_4 %241 = OpLoad %226 
                                         f32 %242 = OpDot %240 %241 
                                Private f32* %243 = OpAccessChain %232 %83 
                                                      OpStore %243 %242 
                              Uniform f32_4* %245 = OpAccessChain %21 %244 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %226 
                                         f32 %248 = OpDot %246 %247 
                                Private f32* %249 = OpAccessChain %232 %188 
                                                      OpStore %249 %248 
                              Uniform f32_4* %251 = OpAccessChain %21 %250 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                       f32_3 %254 = OpLoad %209 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 0 0 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_3 %257 = OpLoad %232 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %209 %258 
                                Private f32* %260 = OpAccessChain %9 %259 
                                                      OpStore %260 %141 
                              Uniform f32_4* %261 = OpAccessChain %21 %29 
                                       f32_4 %262 = OpLoad %261 
                                       f32_4 %263 = OpLoad %9 
                                         f32 %264 = OpDot %262 %263 
                                Private f32* %265 = OpAccessChain %232 %174 
                                                      OpStore %265 %264 
                              Uniform f32_4* %266 = OpAccessChain %21 %24 
                                       f32_4 %267 = OpLoad %266 
                                       f32_4 %268 = OpLoad %9 
                                         f32 %269 = OpDot %267 %268 
                                Private f32* %270 = OpAccessChain %232 %83 
                                                      OpStore %270 %269 
                              Uniform f32_4* %271 = OpAccessChain %21 %37 
                                       f32_4 %272 = OpLoad %271 
                                       f32_4 %273 = OpLoad %9 
                                         f32 %274 = OpDot %272 %273 
                                Private f32* %275 = OpAccessChain %232 %188 
                                                      OpStore %275 %274 
                                       f32_3 %276 = OpLoad %209 
                                       f32_3 %277 = OpLoad %232 
                                       f32_3 %278 = OpFAdd %276 %277 
                                                      OpStore %209 %278 
                                       f32_3 %279 = OpLoad %209 
                                       f32_3 %282 = OpExtInst %1 40 %279 %281 
                                                      OpStore %209 %282 
                                       f32_3 %283 = OpLoad %209 
                                       f32_3 %284 = OpExtInst %1 30 %283 
                                       f32_4 %285 = OpLoad %9 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %9 %286 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_4 %292 = OpLoad %9 
                                       f32_4 %293 = OpVectorShuffle %292 %291 4 5 6 3 
                                                      OpStore %9 %293 
                                       f32_4 %294 = OpLoad %9 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                       f32_3 %296 = OpExtInst %1 29 %295 
                                       f32_4 %297 = OpLoad %9 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 6 3 
                                                      OpStore %9 %298 
                                       f32_4 %299 = OpLoad %9 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %303 = OpFMul %300 %302 
                                       f32_3 %306 = OpFAdd %303 %305 
                                       f32_4 %307 = OpLoad %9 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
                                                      OpStore %9 %308 
                                       f32_4 %309 = OpLoad %9 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_3 %311 = OpExtInst %1 40 %310 %281 
                                       f32_4 %312 = OpLoad %9 
                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
                                                      OpStore %9 %313 
                                       f32_4 %315 = OpLoad %9 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                                      OpStore %314 %316 
                                                      OpStore %317 %318 
                                 Output f32* %320 = OpAccessChain %87 %29 %83 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpFNegate %321 
                                 Output f32* %323 = OpAccessChain %87 %29 %83 
                                                      OpStore %323 %322 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 696
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %21 %140 %682 %684 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 Location 21 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 RelaxedPrecision 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 RelaxedPrecision 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpMemberDecorate %36 7 Offset 36 
                                                      OpMemberDecorate %36 8 Offset 36 
                                                      OpMemberDecorate %36 9 Offset 36 
                                                      OpMemberDecorate %36 10 Offset 36 
                                                      OpMemberDecorate %36 11 Offset 36 
                                                      OpMemberDecorate %36 12 Offset 36 
                                                      OpMemberDecorate %36 13 Offset 36 
                                                      OpMemberDecorate %36 14 Offset 36 
                                                      OpMemberDecorate %36 15 RelaxedPrecision 
                                                      OpMemberDecorate %36 15 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %164 DescriptorSet 164 
                                                      OpDecorate %164 Binding 164 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %540 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %542 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %567 SpecId 567 
                                                      OpDecorate %650 DescriptorSet 650 
                                                      OpDecorate %650 Binding 650 
                                                      OpDecorate %661 RelaxedPrecision 
                                                      OpDecorate %663 RelaxedPrecision 
                                                      OpDecorate %664 RelaxedPrecision 
                                                      OpDecorate %667 RelaxedPrecision 
                                                      OpDecorate %668 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %677 RelaxedPrecision 
                                                      OpDecorate %678 RelaxedPrecision 
                                                      OpDecorate %679 RelaxedPrecision 
                                                      OpDecorate %680 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %682 Location 682 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %684 Location 684 
                                                      OpDecorate %685 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %692 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                 Input f32_2* %21 = OpVariable Input 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Input %6 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          u32 %33 = OpConstant 4 
                                              %34 = OpTypeArray %7 %33 
                                              %35 = OpTypeVector %6 3 
                                              %36 = OpTypeStruct %7 %7 %7 %34 %35 %35 %7 %7 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 10 
                                              %41 = OpTypePointer Uniform %6 
                                              %50 = OpTypePointer Private %35 
                               Private f32_3* %51 = OpVariable Private 
                                          i32 %60 = OpConstant 9 
                                              %68 = OpTypeBool 
                                              %69 = OpTypePointer Private %68 
                                Private bool* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                              %75 = OpTypePointer Function %6 
                                          f32 %80 = OpConstant 3.674022E-40 
                                          i32 %88 = OpConstant 7 
                                              %89 = OpTypePointer Uniform %7 
                                 Private f32* %96 = OpVariable Private 
                                          i32 %99 = OpConstant 13 
                                         f32 %104 = OpConstant 3.674022E-40 
                                         f32 %109 = OpConstant 3.674022E-40 
                              Private f32_4* %111 = OpVariable Private 
                                         i32 %112 = OpConstant 12 
                                         i32 %125 = OpConstant 11 
                              Private f32_3* %138 = OpVariable Private 
                                             %139 = OpTypePointer Input %35 
                                Input f32_3* %140 = OpVariable Input 
                                         f32 %143 = OpConstant 3.674022E-40 
                                         f32 %144 = OpConstant 3.674022E-40 
                                       f32_3 %145 = OpConstantComposite %143 %143 %144 
                              Private f32_4* %147 = OpVariable Private 
                                         i32 %148 = OpConstant 0 
                                         f32 %152 = OpConstant 3.674022E-40 
                                         u32 %154 = OpConstant 2 
                                Private f32* %163 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %164 = OpVariable UniformConstant 
                              Private f32_4* %170 = OpVariable Private 
                                         f32 %176 = OpConstant 3.674022E-40 
                               Private bool* %183 = OpVariable Private 
                                Private f32* %189 = OpVariable Private 
                                         f32 %201 = OpConstant 3.674022E-40 
                                         u32 %202 = OpConstant 3 
                              Private f32_4* %204 = OpVariable Private 
                                Private f32* %267 = OpVariable Private 
                                         f32 %276 = OpConstant 3.674022E-40 
                                         f32 %278 = OpConstant 3.674022E-40 
                                         f32 %298 = OpConstant 3.674022E-40 
                                         f32 %306 = OpConstant 3.674022E-40 
                                         f32 %307 = OpConstant 3.674022E-40 
                                       f32_2 %308 = OpConstantComposite %306 %307 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                                Private f32* %326 = OpVariable Private 
                                         f32 %338 = OpConstant 3.674022E-40 
                                Private f32* %340 = OpVariable Private 
                                         f32 %349 = OpConstant 3.674022E-40 
                                         f32 %351 = OpConstant 3.674022E-40 
                                         f32 %356 = OpConstant 3.674022E-40 
                               Private bool* %366 = OpVariable Private 
                                         f32 %367 = OpConstant 3.674022E-40 
                                         i32 %373 = OpConstant 8 
                                         i32 %385 = OpConstant 14 
                                       f32_3 %437 = OpConstantComposite %109 %201 %152 
                                       f32_3 %448 = OpConstantComposite %276 %276 %276 
                                         f32 %450 = OpConstant 3.674022E-40 
                                       f32_3 %451 = OpConstantComposite %450 %450 %450 
                                       f32_3 %458 = OpConstantComposite %80 %80 %80 
                                       f32_3 %479 = OpConstantComposite %109 %109 %109 
                                       f32_3 %489 = OpConstantComposite %338 %338 %338 
                              Private f32_3* %493 = OpVariable Private 
                                         f32 %496 = OpConstant 3.674022E-40 
                                         f32 %501 = OpConstant 3.674022E-40 
                                         f32 %512 = OpConstant 3.674022E-40 
                                         f32 %513 = OpConstant 3.674022E-40 
                                       f32_3 %514 = OpConstantComposite %512 %73 %513 
                              Private f32_3* %528 = OpVariable Private 
                                       f32_3 %531 = OpConstantComposite %298 %298 %298 
                                         i32 %538 = OpConstant 15 
                               Private bool* %544 = OpVariable Private 
                                         i32 %549 = OpConstant 1 
                                         i32 %551 = OpConstant -1 
                                         i32 %557 = OpConstant 2 
                                        bool %561 = OpConstantFalse 
                                        bool %567 = OpSpecConstantFalse 
                                         i32 %575 = OpConstant 3 
                                             %601 = OpTypePointer Function %35 
                                         i32 %614 = OpConstant 5 
                                             %615 = OpTypePointer Uniform %35 
                                         i32 %624 = OpConstant 4 
                                         f32 %633 = OpConstant 3.674022E-40 
                                             %647 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %648 = OpTypeSampledImage %647 
                                             %649 = OpTypePointer UniformConstant %648 
 UniformConstant read_only Texture3DSampled* %650 = OpVariable UniformConstant 
                              Private f32_3* %670 = OpVariable Private 
                                         i32 %672 = OpConstant 6 
                                             %681 = OpTypePointer Output %7 
                               Output f32_4* %682 = OpVariable Output 
                                Input f32_3* %684 = OpVariable Input 
                                             %693 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %76 = OpVariable Function 
                               Function f32* %190 = OpVariable Function 
                               Function f32* %229 = OpVariable Function 
                               Function f32* %420 = OpVariable Function 
                             Function f32_3* %602 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                   Input f32* %25 = OpAccessChain %21 %23 
                                          f32 %26 = OpLoad %25 
                                          f32 %27 = OpExtInst %1 30 %26 
                                 Private f32* %30 = OpAccessChain %20 %28 
                                                      OpStore %30 %27 
                                 Private f32* %31 = OpAccessChain %20 %28 
                                          f32 %32 = OpLoad %31 
                                 Uniform f32* %42 = OpAccessChain %38 %40 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %32 %43 
                                 Private f32* %45 = OpAccessChain %20 %28 
                                                      OpStore %45 %44 
                                 Private f32* %46 = OpAccessChain %20 %28 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpExtInst %1 29 %47 
                                 Private f32* %49 = OpAccessChain %20 %28 
                                                      OpStore %49 %48 
                                   Input f32* %52 = OpAccessChain %21 %23 
                                          f32 %53 = OpLoad %52 
                                   Input f32* %54 = OpAccessChain %21 %23 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFMul %53 %55 
                                 Private f32* %57 = OpAccessChain %51 %28 
                                                      OpStore %57 %56 
                                 Private f32* %58 = OpAccessChain %51 %28 
                                          f32 %59 = OpLoad %58 
                                 Uniform f32* %61 = OpAccessChain %38 %60 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %59 %62 
                                 Private f32* %64 = OpAccessChain %20 %28 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %63 %65 
                                 Private f32* %67 = OpAccessChain %20 %28 
                                                      OpStore %67 %66 
                                 Private f32* %71 = OpAccessChain %20 %28 
                                          f32 %72 = OpLoad %71 
                                         bool %74 = OpFOrdLessThan %72 %73 
                                                      OpStore %70 %74 
                                         bool %77 = OpLoad %70 
                                                      OpSelectionMerge %79 None 
                                                      OpBranchConditional %77 %78 %81 
                                              %78 = OpLabel 
                                                      OpStore %76 %80 
                                                      OpBranch %79 
                                              %81 = OpLabel 
                                 Private f32* %82 = OpAccessChain %20 %28 
                                          f32 %83 = OpLoad %82 
                                                      OpStore %76 %83 
                                                      OpBranch %79 
                                              %79 = OpLabel 
                                          f32 %84 = OpLoad %76 
                                 Private f32* %85 = OpAccessChain %20 %28 
                                                      OpStore %85 %84 
                                        f32_4 %86 = OpLoad %20 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 0 0 
                               Uniform f32_4* %90 = OpAccessChain %38 %88 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                        f32_4 %94 = OpLoad %20 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %20 %95 
                                   Input f32* %97 = OpAccessChain %21 %28 
                                          f32 %98 = OpLoad %97 
                                Uniform f32* %100 = OpAccessChain %38 %99 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFMul %98 %101 
                                                      OpStore %96 %102 
                                         f32 %103 = OpLoad %96 
                                         f32 %105 = OpFMul %103 %104 
                                                      OpStore %96 %105 
                                         f32 %106 = OpLoad %96 
                                         f32 %107 = OpExtInst %1 13 %106 
                                                      OpStore %96 %107 
                                         f32 %108 = OpLoad %96 
                                         f32 %110 = OpFAdd %108 %109 
                                                      OpStore %96 %110 
                                Uniform f32* %113 = OpAccessChain %38 %112 
                                         f32 %114 = OpLoad %113 
                                Uniform f32* %115 = OpAccessChain %38 %112 
                                         f32 %116 = OpLoad %115 
                                         f32 %117 = OpFAdd %114 %116 
                                Private f32* %118 = OpAccessChain %111 %28 
                                                      OpStore %118 %117 
                                         f32 %119 = OpLoad %96 
                                Private f32* %120 = OpAccessChain %111 %28 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFDiv %119 %121 
                                                      OpStore %96 %122 
                                         f32 %123 = OpLoad %96 
                                         f32 %124 = OpFAdd %123 %80 
                                                      OpStore %96 %124 
                                Uniform f32* %126 = OpAccessChain %38 %125 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpLoad %96 
                                         f32 %129 = OpFMul %127 %128 
                                         f32 %130 = OpFAdd %129 %109 
                                                      OpStore %96 %130 
                                         f32 %131 = OpLoad %96 
                                       f32_3 %132 = OpCompositeConstruct %131 %131 %131 
                                       f32_4 %133 = OpLoad %20 
                                       f32_3 %134 = OpVectorShuffle %133 %133 1 2 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %111 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 6 
                                                      OpStore %111 %137 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %138 %146 
                                Uniform f32* %149 = OpAccessChain %38 %148 %28 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFNegate %150 
                                         f32 %153 = OpFMul %151 %152 
                                Private f32* %155 = OpAccessChain %138 %154 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFAdd %153 %156 
                                Private f32* %158 = OpAccessChain %147 %23 
                                                      OpStore %158 %157 
                                  Input f32* %159 = OpAccessChain %140 %28 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %160 %144 
                                Private f32* %162 = OpAccessChain %147 %28 
                                                      OpStore %162 %161 
                  read_only Texture2DSampled %165 = OpLoad %164 
                                       f32_4 %166 = OpLoad %147 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_4 %168 = OpImageSampleImplicitLod %165 %167 
                                         f32 %169 = OpCompositeExtract %168 0 
                                                      OpStore %163 %169 
                                         f32 %171 = OpLoad %163 
                                         f32 %172 = OpExtInst %1 30 %171 
                                Private f32* %173 = OpAccessChain %170 %28 
                                                      OpStore %173 %172 
                                Private f32* %174 = OpAccessChain %170 %28 
                                         f32 %175 = OpLoad %174 
                                         f32 %177 = OpFMul %175 %176 
                                Private f32* %178 = OpAccessChain %170 %28 
                                                      OpStore %178 %177 
                                Private f32* %179 = OpAccessChain %170 %28 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpExtInst %1 29 %180 
                                Private f32* %182 = OpAccessChain %170 %28 
                                                      OpStore %182 %181 
                                Private f32* %184 = OpAccessChain %111 %28 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %111 %23 
                                         f32 %187 = OpLoad %186 
                                        bool %188 = OpFOrdGreaterThanEqual %185 %187 
                                                      OpStore %183 %188 
                                        bool %191 = OpLoad %183 
                                                      OpSelectionMerge %193 None 
                                                      OpBranchConditional %191 %192 %194 
                                             %192 = OpLabel 
                                                      OpStore %190 %109 
                                                      OpBranch %193 
                                             %194 = OpLabel 
                                                      OpStore %190 %73 
                                                      OpBranch %193 
                                             %193 = OpLabel 
                                         f32 %195 = OpLoad %190 
                                                      OpStore %189 %195 
                                       f32_4 %196 = OpLoad %111 
                                       f32_2 %197 = OpVectorShuffle %196 %196 1 0 
                                       f32_4 %198 = OpLoad %147 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 3 
                                                      OpStore %147 %199 
                                Private f32* %200 = OpAccessChain %147 %154 
                                                      OpStore %200 %80 
                                Private f32* %203 = OpAccessChain %147 %202 
                                                      OpStore %203 %201 
                                       f32_4 %205 = OpLoad %20 
                                       f32_2 %206 = OpVectorShuffle %205 %205 1 2 
                                         f32 %207 = OpLoad %96 
                                       f32_2 %208 = OpCompositeConstruct %207 %207 
                                       f32_2 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %147 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 1 
                                       f32_2 %212 = OpFNegate %211 
                                       f32_2 %213 = OpFAdd %209 %212 
                                       f32_4 %214 = OpLoad %204 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %204 %215 
                                Private f32* %216 = OpAccessChain %204 %154 
                                                      OpStore %216 %109 
                                Private f32* %217 = OpAccessChain %204 %202 
                                                      OpStore %217 %80 
                                         f32 %218 = OpLoad %189 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                       f32_4 %220 = OpLoad %204 
                                       f32_4 %221 = OpFMul %219 %220 
                                       f32_4 %222 = OpLoad %147 
                                       f32_4 %223 = OpFAdd %221 %222 
                                                      OpStore %147 %223 
                                Private f32* %224 = OpAccessChain %111 %202 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %147 %28 
                                         f32 %227 = OpLoad %226 
                                        bool %228 = OpFOrdGreaterThanEqual %225 %227 
                                                      OpStore %70 %228 
                                        bool %230 = OpLoad %70 
                                                      OpSelectionMerge %232 None 
                                                      OpBranchConditional %230 %231 %233 
                                             %231 = OpLabel 
                                                      OpStore %229 %109 
                                                      OpBranch %232 
                                             %233 = OpLabel 
                                                      OpStore %229 %73 
                                                      OpBranch %232 
                                             %232 = OpLabel 
                                         f32 %234 = OpLoad %229 
                                Private f32* %235 = OpAccessChain %51 %28 
                                                      OpStore %235 %234 
                                       f32_4 %236 = OpLoad %147 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 3 
                                       f32_4 %238 = OpLoad %111 
                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 6 3 
                                                      OpStore %111 %239 
                                       f32_4 %240 = OpLoad %111 
                                       f32_3 %241 = OpVectorShuffle %240 %240 3 1 0 
                                       f32_4 %242 = OpLoad %147 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 2 6 
                                                      OpStore %147 %243 
                                       f32_4 %244 = OpLoad %111 
                                       f32_4 %245 = OpFNegate %244 
                                       f32_4 %246 = OpLoad %147 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %147 %247 
                                       f32_3 %248 = OpLoad %51 
                                       f32_4 %249 = OpVectorShuffle %248 %248 0 0 0 0 
                                       f32_4 %250 = OpLoad %147 
                                       f32_4 %251 = OpFMul %249 %250 
                                       f32_4 %252 = OpLoad %111 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %111 %253 
                                Private f32* %254 = OpAccessChain %111 %23 
                                         f32 %255 = OpLoad %254 
                                Private f32* %256 = OpAccessChain %111 %202 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpExtInst %1 37 %255 %257 
                                Private f32* %259 = OpAccessChain %51 %28 
                                                      OpStore %259 %258 
                                Private f32* %260 = OpAccessChain %51 %28 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpFNegate %261 
                                Private f32* %263 = OpAccessChain %111 %28 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %51 %28 
                                                      OpStore %266 %265 
                                Private f32* %268 = OpAccessChain %111 %23 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                Private f32* %271 = OpAccessChain %111 %202 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpFAdd %270 %272 
                                                      OpStore %267 %273 
                                Private f32* %274 = OpAccessChain %51 %28 
                                         f32 %275 = OpLoad %274 
                                         f32 %277 = OpFMul %275 %276 
                                         f32 %279 = OpFAdd %277 %278 
                                                      OpStore %96 %279 
                                         f32 %280 = OpLoad %267 
                                         f32 %281 = OpLoad %96 
                                         f32 %282 = OpFDiv %280 %281 
                                                      OpStore %267 %282 
                                         f32 %283 = OpLoad %267 
                                Private f32* %284 = OpAccessChain %111 %154 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpFAdd %283 %285 
                                                      OpStore %267 %286 
                                Private f32* %287 = OpAccessChain %111 %28 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFAdd %288 %278 
                                                      OpStore %96 %289 
                                Private f32* %290 = OpAccessChain %51 %28 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpLoad %96 
                                         f32 %293 = OpFDiv %291 %292 
                                Private f32* %294 = OpAccessChain %51 %28 
                                                      OpStore %294 %293 
                                Private f32* %295 = OpAccessChain %170 %28 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpFNegate %296 
                                         f32 %299 = OpFMul %297 %298 
                                Private f32* %300 = OpAccessChain %111 %28 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                Private f32* %303 = OpAccessChain %20 %28 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %138 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                         f32 %309 = OpDot %305 %308 
                                                      OpStore %96 %309 
                                         f32 %310 = OpLoad %96 
                                         f32 %311 = OpExtInst %1 13 %310 
                                                      OpStore %96 %311 
                                         f32 %312 = OpLoad %96 
                                         f32 %314 = OpFMul %312 %313 
                                                      OpStore %96 %314 
                                         f32 %315 = OpLoad %96 
                                         f32 %316 = OpExtInst %1 10 %315 
                                                      OpStore %96 %316 
                                         f32 %317 = OpLoad %96 
                                         f32 %319 = OpFAdd %317 %318 
                                                      OpStore %96 %319 
                                Private f32* %320 = OpAccessChain %138 %23 
                                         f32 %321 = OpLoad %320 
                                Private f32* %322 = OpAccessChain %138 %28 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFAdd %321 %323 
                                Private f32* %325 = OpAccessChain %111 %28 
                                                      OpStore %325 %324 
                                Private f32* %327 = OpAccessChain %111 %28 
                                         f32 %328 = OpLoad %327 
                                Uniform f32* %329 = OpAccessChain %38 %148 %154 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFNegate %330 
                                         f32 %332 = OpFAdd %328 %331 
                                                      OpStore %326 %332 
                                         f32 %333 = OpLoad %326 
                                         f32 %334 = OpExtInst %1 13 %333 
                                                      OpStore %326 %334 
                                         f32 %335 = OpLoad %326 
                                         f32 %336 = OpFAdd %335 %109 
                                                      OpStore %326 %336 
                                         f32 %337 = OpLoad %326 
                                         f32 %339 = OpFMul %337 %338 
                                                      OpStore %326 %339 
                                Private f32* %341 = OpAccessChain %111 %28 
                                         f32 %342 = OpLoad %341 
                                Uniform f32* %343 = OpAccessChain %38 %148 %154 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFAdd %342 %344 
                                                      OpStore %340 %345 
                                         f32 %346 = OpLoad %340 
                                         f32 %347 = OpExtInst %1 13 %346 
                                                      OpStore %340 %347 
                                         f32 %348 = OpLoad %340 
                                         f32 %350 = OpFMul %348 %349 
                                         f32 %352 = OpFAdd %350 %351 
                                                      OpStore %340 %352 
                                         f32 %353 = OpLoad %326 
                                         f32 %354 = OpLoad %340 
                                         f32 %355 = OpFMul %353 %354 
                                         f32 %357 = OpFAdd %355 %356 
                                                      OpStore %326 %357 
                                Private f32* %358 = OpAccessChain %111 %28 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFMul %359 %338 
                                Private f32* %361 = OpAccessChain %111 %28 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %111 %28 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpExtInst %1 10 %363 
                                Private f32* %365 = OpAccessChain %111 %28 
                                                      OpStore %365 %364 
                                Private f32* %368 = OpAccessChain %111 %28 
                                         f32 %369 = OpLoad %368 
                                        bool %370 = OpFOrdLessThan %367 %369 
                                                      OpStore %366 %370 
                                Private f32* %371 = OpAccessChain %20 %28 
                                         f32 %372 = OpLoad %371 
                                Uniform f32* %374 = OpAccessChain %38 %373 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpFDiv %372 %375 
                                Private f32* %377 = OpAccessChain %20 %28 
                                                      OpStore %377 %376 
                                         f32 %378 = OpLoad %326 
                                         f32 %379 = OpFNegate %378 
                                Private f32* %380 = OpAccessChain %20 %28 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFAdd %379 %381 
                                                      OpStore %340 %382 
                                         f32 %383 = OpLoad %96 
                                         f32 %384 = OpFNegate %383 
                                Uniform f32* %386 = OpAccessChain %38 %385 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpFMul %384 %387 
                                         f32 %389 = OpLoad %340 
                                         f32 %390 = OpFAdd %388 %389 
                                                      OpStore %340 %390 
                                         f32 %391 = OpLoad %340 
                                         f32 %392 = OpExtInst %1 9 %391 
                                                      OpStore %340 %392 
                                         f32 %393 = OpLoad %340 
                                Uniform f32* %394 = OpAccessChain %38 %373 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %340 %396 
                                         f32 %397 = OpLoad %326 
                                Private f32* %398 = OpAccessChain %20 %28 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFAdd %397 %399 
                                Private f32* %401 = OpAccessChain %20 %28 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %96 
                                Uniform f32* %403 = OpAccessChain %38 %385 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFMul %402 %404 
                                Private f32* %406 = OpAccessChain %20 %28 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpFAdd %405 %407 
                                Private f32* %409 = OpAccessChain %20 %28 
                                                      OpStore %409 %408 
                                Private f32* %410 = OpAccessChain %20 %28 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpExtInst %1 2 %411 
                                Private f32* %413 = OpAccessChain %20 %28 
                                                      OpStore %413 %412 
                                Private f32* %414 = OpAccessChain %20 %28 
                                         f32 %415 = OpLoad %414 
                                Uniform f32* %416 = OpAccessChain %38 %373 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFMul %415 %417 
                                Private f32* %419 = OpAccessChain %20 %28 
                                                      OpStore %419 %418 
                                        bool %421 = OpLoad %366 
                                                      OpSelectionMerge %423 None 
                                                      OpBranchConditional %421 %422 %425 
                                             %422 = OpLabel 
                                         f32 %424 = OpLoad %340 
                                                      OpStore %420 %424 
                                                      OpBranch %423 
                                             %425 = OpLabel 
                                Private f32* %426 = OpAccessChain %20 %28 
                                         f32 %427 = OpLoad %426 
                                                      OpStore %420 %427 
                                                      OpBranch %423 
                                             %423 = OpLabel 
                                         f32 %428 = OpLoad %420 
                                Private f32* %429 = OpAccessChain %20 %28 
                                                      OpStore %429 %428 
                                Private f32* %430 = OpAccessChain %20 %28 
                                         f32 %431 = OpLoad %430 
                                         f32 %432 = OpExtInst %1 40 %431 %73 
                                Private f32* %433 = OpAccessChain %20 %28 
                                                      OpStore %433 %432 
                                         f32 %434 = OpLoad %267 
                                       f32_3 %435 = OpCompositeConstruct %434 %434 %434 
                                       f32_3 %436 = OpExtInst %1 4 %435 
                                       f32_3 %438 = OpFAdd %436 %437 
                                       f32_4 %439 = OpLoad %111 
                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
                                                      OpStore %111 %440 
                                       f32_4 %441 = OpLoad %111 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_3 %443 = OpExtInst %1 10 %442 
                                       f32_4 %444 = OpLoad %111 
                                       f32_4 %445 = OpVectorShuffle %444 %443 4 5 6 3 
                                                      OpStore %111 %445 
                                       f32_4 %446 = OpLoad %111 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 1 2 
                                       f32_3 %449 = OpFMul %447 %448 
                                       f32_3 %452 = OpFAdd %449 %451 
                                       f32_4 %453 = OpLoad %111 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 6 3 
                                                      OpStore %111 %454 
                                       f32_4 %455 = OpLoad %111 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpExtInst %1 4 %456 
                                       f32_3 %459 = OpFAdd %457 %458 
                                       f32_4 %460 = OpLoad %111 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 6 3 
                                                      OpStore %111 %461 
                                       f32_4 %462 = OpLoad %111 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                       f32_3 %464 = OpCompositeConstruct %73 %73 %73 
                                       f32_3 %465 = OpCompositeConstruct %109 %109 %109 
                                       f32_3 %466 = OpExtInst %1 43 %463 %464 %465 
                                       f32_4 %467 = OpLoad %111 
                                       f32_4 %468 = OpVectorShuffle %467 %466 4 5 6 3 
                                                      OpStore %111 %468 
                                       f32_4 %469 = OpLoad %111 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_3 %471 = OpFAdd %470 %458 
                                       f32_4 %472 = OpLoad %111 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %111 %473 
                                       f32_3 %474 = OpLoad %51 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 0 0 
                                       f32_4 %476 = OpLoad %111 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFMul %475 %477 
                                       f32_3 %480 = OpFAdd %478 %479 
                                                      OpStore %51 %480 
                                       f32_3 %481 = OpLoad %51 
                                       f32_4 %482 = OpLoad %20 
                                       f32_3 %483 = OpVectorShuffle %482 %482 0 0 0 
                                       f32_3 %484 = OpFMul %481 %483 
                                       f32_4 %485 = OpLoad %20 
                                       f32_4 %486 = OpVectorShuffle %485 %484 4 5 6 3 
                                                      OpStore %20 %486 
                                       f32_4 %487 = OpLoad %20 
                                       f32_3 %488 = OpVectorShuffle %487 %487 0 1 2 
                                       f32_3 %490 = OpFMul %488 %489 
                                       f32_4 %491 = OpLoad %111 
                                       f32_4 %492 = OpVectorShuffle %491 %490 4 5 6 3 
                                                      OpStore %111 %492 
                                Private f32* %494 = OpAccessChain %9 %28 
                                         f32 %495 = OpLoad %494 
                                         f32 %497 = OpFAdd %495 %496 
                                Private f32* %498 = OpAccessChain %493 %28 
                                                      OpStore %498 %497 
                                Private f32* %499 = OpAccessChain %493 %28 
                                         f32 %500 = OpLoad %499 
                                         f32 %502 = OpFMul %500 %501 
                                Private f32* %503 = OpAccessChain %493 %28 
                                                      OpStore %503 %502 
                                Private f32* %504 = OpAccessChain %493 %28 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpExtInst %1 43 %505 %73 %109 
                                Private f32* %507 = OpAccessChain %493 %28 
                                                      OpStore %507 %506 
                                       f32_4 %508 = OpLoad %20 
                                       f32_3 %509 = OpVectorShuffle %508 %508 0 1 2 
                                       f32_3 %510 = OpFNegate %509 
                                       f32_3 %511 = OpFMul %510 %489 
                                       f32_3 %515 = OpFAdd %511 %514 
                                       f32_4 %516 = OpLoad %20 
                                       f32_4 %517 = OpVectorShuffle %516 %515 4 5 6 3 
                                                      OpStore %20 %517 
                                       f32_3 %518 = OpLoad %493 
                                       f32_3 %519 = OpVectorShuffle %518 %518 0 0 0 
                                       f32_4 %520 = OpLoad %20 
                                       f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
                                       f32_3 %522 = OpFMul %519 %521 
                                       f32_4 %523 = OpLoad %111 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                       f32_3 %525 = OpFAdd %522 %524 
                                       f32_4 %526 = OpLoad %20 
                                       f32_4 %527 = OpVectorShuffle %526 %525 4 5 6 3 
                                                      OpStore %20 %527 
                                       f32_4 %529 = OpLoad %9 
                                       f32_3 %530 = OpVectorShuffle %529 %529 0 1 2 
                                       f32_3 %532 = OpFMul %530 %531 
                                       f32_4 %533 = OpLoad %20 
                                       f32_3 %534 = OpVectorShuffle %533 %533 0 1 2 
                                       f32_3 %535 = OpFAdd %532 %534 
                                                      OpStore %528 %535 
                                Private f32* %536 = OpAccessChain %9 %202 
                                         f32 %537 = OpLoad %536 
                                Uniform f32* %539 = OpAccessChain %38 %538 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFNegate %540 
                                         f32 %542 = OpFAdd %537 %541 
                                Private f32* %543 = OpAccessChain %493 %28 
                                                      OpStore %543 %542 
                                Private f32* %545 = OpAccessChain %493 %28 
                                         f32 %546 = OpLoad %545 
                                        bool %547 = OpFOrdLessThan %546 %73 
                                                      OpStore %544 %547 
                                        bool %548 = OpLoad %544 
                                         i32 %550 = OpSelect %548 %549 %148 
                                         i32 %552 = OpIMul %550 %551 
                                        bool %553 = OpINotEqual %552 %148 
                                                      OpSelectionMerge %555 None 
                                                      OpBranchConditional %553 %554 %555 
                                             %554 = OpLabel 
                                                      OpKill
                                             %555 = OpLabel 
                                Uniform f32* %558 = OpAccessChain %38 %557 %28 
                                         f32 %559 = OpLoad %558 
                                        bool %560 = OpFOrdEqual %559 %109 
                                                      OpStore %544 %560 
                                                      OpSelectionMerge %563 None 
                                                      OpBranchConditional %561 %562 %563 
                                             %562 = OpLabel 
                                        bool %564 = OpLoad %544 
                                                      OpSelectionMerge %566 None 
                                                      OpBranchConditional %564 %565 %566 
                                             %565 = OpLabel 
                                                      OpBranch %566 
                                             %566 = OpLabel 
                                                      OpBranch %563 
                                             %563 = OpLabel 
                                                      OpSelectionMerge %569 None 
                                                      OpBranchConditional %567 %568 %656 
                                             %568 = OpLabel 
                                Uniform f32* %570 = OpAccessChain %38 %557 %23 
                                         f32 %571 = OpLoad %570 
                                        bool %572 = OpFOrdEqual %571 %109 
                                                      OpStore %544 %572 
                                       f32_3 %573 = OpLoad %140 
                                       f32_3 %574 = OpVectorShuffle %573 %573 1 1 1 
                              Uniform f32_4* %576 = OpAccessChain %38 %575 %549 
                                       f32_4 %577 = OpLoad %576 
                                       f32_3 %578 = OpVectorShuffle %577 %577 0 1 2 
                                       f32_3 %579 = OpFMul %574 %578 
                                                      OpStore %51 %579 
                              Uniform f32_4* %580 = OpAccessChain %38 %575 %148 
                                       f32_4 %581 = OpLoad %580 
                                       f32_3 %582 = OpVectorShuffle %581 %581 0 1 2 
                                       f32_3 %583 = OpLoad %140 
                                       f32_3 %584 = OpVectorShuffle %583 %583 0 0 0 
                                       f32_3 %585 = OpFMul %582 %584 
                                       f32_3 %586 = OpLoad %51 
                                       f32_3 %587 = OpFAdd %585 %586 
                                                      OpStore %51 %587 
                              Uniform f32_4* %588 = OpAccessChain %38 %575 %557 
                                       f32_4 %589 = OpLoad %588 
                                       f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
                                       f32_3 %591 = OpLoad %140 
                                       f32_3 %592 = OpVectorShuffle %591 %591 2 2 2 
                                       f32_3 %593 = OpFMul %590 %592 
                                       f32_3 %594 = OpLoad %51 
                                       f32_3 %595 = OpFAdd %593 %594 
                                                      OpStore %51 %595 
                                       f32_3 %596 = OpLoad %51 
                              Uniform f32_4* %597 = OpAccessChain %38 %575 %575 
                                       f32_4 %598 = OpLoad %597 
                                       f32_3 %599 = OpVectorShuffle %598 %598 0 1 2 
                                       f32_3 %600 = OpFAdd %596 %599 
                                                      OpStore %51 %600 
                                        bool %603 = OpLoad %544 
                                                      OpSelectionMerge %605 None 
                                                      OpBranchConditional %603 %604 %607 
                                             %604 = OpLabel 
                                       f32_3 %606 = OpLoad %51 
                                                      OpStore %602 %606 
                                                      OpBranch %605 
                                             %607 = OpLabel 
                                       f32_3 %608 = OpLoad %140 
                                                      OpStore %602 %608 
                                                      OpBranch %605 
                                             %605 = OpLabel 
                                       f32_3 %609 = OpLoad %602 
                                       f32_4 %610 = OpLoad %20 
                                       f32_4 %611 = OpVectorShuffle %610 %609 4 5 6 3 
                                                      OpStore %20 %611 
                                       f32_4 %612 = OpLoad %20 
                                       f32_3 %613 = OpVectorShuffle %612 %612 0 1 2 
                              Uniform f32_3* %616 = OpAccessChain %38 %614 
                                       f32_3 %617 = OpLoad %616 
                                       f32_3 %618 = OpFNegate %617 
                                       f32_3 %619 = OpFAdd %613 %618 
                                       f32_4 %620 = OpLoad %20 
                                       f32_4 %621 = OpVectorShuffle %620 %619 4 5 6 3 
                                                      OpStore %20 %621 
                                       f32_4 %622 = OpLoad %20 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                              Uniform f32_3* %625 = OpAccessChain %38 %624 
                                       f32_3 %626 = OpLoad %625 
                                       f32_3 %627 = OpFMul %623 %626 
                                       f32_4 %628 = OpLoad %20 
                                       f32_4 %629 = OpVectorShuffle %628 %627 0 4 5 6 
                                                      OpStore %20 %629 
                                Private f32* %630 = OpAccessChain %20 %23 
                                         f32 %631 = OpLoad %630 
                                         f32 %632 = OpFMul %631 %367 
                                         f32 %634 = OpFAdd %632 %633 
                                Private f32* %635 = OpAccessChain %51 %28 
                                                      OpStore %635 %634 
                                Uniform f32* %636 = OpAccessChain %38 %557 %154 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpFMul %637 %338 
                                         f32 %639 = OpFAdd %638 %633 
                                Private f32* %640 = OpAccessChain %111 %28 
                                                      OpStore %640 %639 
                                Private f32* %641 = OpAccessChain %51 %28 
                                         f32 %642 = OpLoad %641 
                                Private f32* %643 = OpAccessChain %111 %28 
                                         f32 %644 = OpLoad %643 
                                         f32 %645 = OpExtInst %1 40 %642 %644 
                                Private f32* %646 = OpAccessChain %20 %28 
                                                      OpStore %646 %645 
                  read_only Texture3DSampled %651 = OpLoad %650 
                                       f32_4 %652 = OpLoad %20 
                                       f32_3 %653 = OpVectorShuffle %652 %652 0 2 3 
                                       f32_4 %654 = OpImageSampleImplicitLod %651 %653 
                                                      OpStore %20 %654 
                                       f32_4 %655 = OpLoad %20 
                                                      OpStore %170 %655 
                                                      OpBranch %569 
                                             %656 = OpLabel 
                                Private f32* %657 = OpAccessChain %170 %28 
                                                      OpStore %657 %109 
                                Private f32* %658 = OpAccessChain %170 %23 
                                                      OpStore %658 %109 
                                Private f32* %659 = OpAccessChain %170 %154 
                                                      OpStore %659 %109 
                                Private f32* %660 = OpAccessChain %170 %202 
                                                      OpStore %660 %109 
                                                      OpBranch %569 
                                             %569 = OpLabel 
                                       f32_4 %661 = OpLoad %170 
                              Uniform f32_4* %662 = OpAccessChain %38 %549 
                                       f32_4 %663 = OpLoad %662 
                                         f32 %664 = OpDot %661 %663 
                                Private f32* %665 = OpAccessChain %493 %28 
                                                      OpStore %665 %664 
                                Private f32* %666 = OpAccessChain %493 %28 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpExtInst %1 43 %667 %73 %109 
                                Private f32* %669 = OpAccessChain %493 %28 
                                                      OpStore %669 %668 
                                       f32_3 %671 = OpLoad %528 
                              Uniform f32_4* %673 = OpAccessChain %38 %672 
                                       f32_4 %674 = OpLoad %673 
                                       f32_3 %675 = OpVectorShuffle %674 %674 0 1 2 
                                       f32_3 %676 = OpFMul %671 %675 
                                                      OpStore %670 %676 
                                       f32_3 %677 = OpLoad %493 
                                       f32_3 %678 = OpVectorShuffle %677 %677 0 0 0 
                                       f32_3 %679 = OpLoad %670 
                                       f32_3 %680 = OpFMul %678 %679 
                                                      OpStore %493 %680 
                                       f32_3 %683 = OpLoad %528 
                                       f32_3 %685 = OpLoad %684 
                                       f32_3 %686 = OpFMul %683 %685 
                                       f32_3 %687 = OpLoad %493 
                                       f32_3 %688 = OpFAdd %686 %687 
                                       f32_4 %689 = OpLoad %682 
                                       f32_4 %690 = OpVectorShuffle %689 %688 4 5 6 3 
                                                      OpStore %682 %690 
                                Private f32* %691 = OpAccessChain %9 %202 
                                         f32 %692 = OpLoad %691 
                                 Output f32* %694 = OpAccessChain %682 %202 
                                                      OpStore %694 %692 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec2 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat2.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    vs_TEXCOORD3.xy = u_xlat1.xy * vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _StepValue;
uniform 	float _SkyBoost;
uniform 	float _SkyPower;
uniform 	float _CurvePower;
uniform 	float _CurveColorFactor;
uniform 	float _CurveFreq;
uniform 	float _DitherCohesionFactor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = log2(vs_TEXCOORD3.y);
    u_xlat1.x = u_xlat1.x * _SkyPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat7.x = vs_TEXCOORD3.y * vs_TEXCOORD3.y;
    u_xlat1.x = u_xlat7.x * _SkyBoost + u_xlat1.x;
    u_xlatb7 = u_xlat1.x<0.0;
    u_xlat1.x = (u_xlatb7) ? -1.0 : u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * _OverrideColor.xyz;
    u_xlat19 = vs_TEXCOORD3.x * _CurveFreq;
    u_xlat19 = u_xlat19 * 3.1400001;
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 + 1.0;
    u_xlat2.x = _CurveColorFactor + _CurveColorFactor;
    u_xlat19 = u_xlat19 / u_xlat2.x;
    u_xlat19 = u_xlat19 + -1.0;
    u_xlat19 = _CurvePower * u_xlat19 + 1.0;
    u_xlat2.xyw = vec3(u_xlat19) * u_xlat1.yzx;
    u_xlat3.xyz = vs_TEXCOORD2.xyy * vec3(0.00999999978, 0.00999999978, 0.0799999982);
    u_xlat4.y = (-_Time.x) * 0.333333343 + u_xlat3.z;
    u_xlat4.x = vs_TEXCOORD2.x * 0.0799999982;
    u_xlat10_4 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat16_1 = log2(u_xlat10_4.x);
    u_xlat16_1 = u_xlat16_1 * 1.5;
    u_xlat16_1 = exp2(u_xlat16_1);
    u_xlatb15 = u_xlat2.x>=u_xlat2.y;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat2.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.yz * vec2(u_xlat19) + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat15) * u_xlat5 + u_xlat4;
    u_xlatb7 = u_xlat2.w>=u_xlat4.x;
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat2.wyx;
    u_xlat4 = (-u_xlat2) + u_xlat4;
    u_xlat2 = u_xlat7.xxxx * u_xlat4 + u_xlat2;
    u_xlat7.x = min(u_xlat2.y, u_xlat2.w);
    u_xlat7.x = (-u_xlat7.x) + u_xlat2.x;
    u_xlat13 = (-u_xlat2.y) + u_xlat2.w;
    u_xlat19 = u_xlat7.x * 6.0 + 1.00000001e-010;
    u_xlat13 = u_xlat13 / u_xlat19;
    u_xlat13 = u_xlat13 + u_xlat2.z;
    u_xlat19 = u_xlat2.x + 1.00000001e-010;
    u_xlat7.x = u_xlat7.x / u_xlat19;
    u_xlat1.x = (-u_xlat16_1) * 2.0 + u_xlat2.x;
    u_xlat19 = dot(u_xlat3.xy, vec2(12.9898005, 78.2330017));
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 * 43758.5469;
    u_xlat19 = fract(u_xlat19);
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat2.x = u_xlat3.y + u_xlat3.x;
    u_xlat8.x = u_xlat2.x + (-_Time.z);
    u_xlat8.x = sin(u_xlat8.x);
    u_xlat8.x = u_xlat8.x + 1.0;
    u_xlat8.x = u_xlat8.x * 0.5;
    u_xlat14.x = u_xlat2.x + _Time.z;
    u_xlat14.x = sin(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * 0.099999994 + 0.150000006;
    u_xlat8.x = u_xlat8.x * u_xlat14.x + 0.349999994;
    u_xlat2.x = u_xlat2.x * 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlatb2 = 0.25<u_xlat2.x;
    u_xlat1.x = u_xlat1.x / _StepValue;
    u_xlat14.x = (-u_xlat8.x) + u_xlat1.x;
    u_xlat14.x = (-u_xlat19) * _DitherCohesionFactor + u_xlat14.x;
    u_xlat14.x = ceil(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _StepValue;
    u_xlat1.x = u_xlat8.x + u_xlat1.x;
    u_xlat1.x = u_xlat19 * _DitherCohesionFactor + u_xlat1.x;
    u_xlat1.x = roundEven(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _StepValue;
    u_xlat1.x = (u_xlatb2) ? u_xlat14.x : u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat2.xyz = abs(vec3(u_xlat13)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat2.xyz = fract(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat2.xyz = abs(u_xlat2.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat19 = u_xlat0.x + -0.00999999978;
    u_xlat19 = u_xlat19 * 1000.0;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(0.5, 0.5, 0.5) + vec3(0.0299999993, 0.0, 0.0700000003);
    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
    u_xlat19 = u_xlat0.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat19) + u_xlat2.x;
    u_xlat19 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat19;
    u_xlat19 = u_xlat19 * _LightShadowData.z + _LightShadowData.w;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb8 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat8.xyz = (bool(u_xlatb8)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat8.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat14.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat14.x, u_xlat8.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat8.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat14.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat14.xy);
    u_xlat19 = u_xlat19 + u_xlat10_3.x;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat8.x = min(u_xlat19, u_xlat8.x);
    u_xlat19 = (u_xlatb2) ? u_xlat8.x : u_xlat19;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 237
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %145 %151 %152 %165 %195 %201 %217 %229 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %195 Location 195 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %201 Location 201 
                                                      OpDecorate %217 Location 217 
                                                      OpDecorate %229 Location 229 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Private %96 
                               Private f32_2* %98 = OpVariable Private 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_2 %140 = OpConstantComposite %139 %139 
                                             %144 = OpTypePointer Output %96 
                               Output f32_2* %145 = OpVariable Output 
                                         f32 %148 = OpConstant 3.674022E-40 
                                       f32_2 %149 = OpConstantComposite %148 %148 
                               Output f32_2* %151 = OpVariable Output 
                                Input f32_4* %152 = OpVariable Input 
                                         i32 %155 = OpConstant 4 
                                             %164 = OpTypePointer Input %50 
                                Input f32_3* %165 = OpVariable Input 
                                         u32 %171 = OpConstant 0 
                                             %172 = OpTypePointer Private %6 
                                         u32 %185 = OpConstant 2 
                                Private f32* %187 = OpVariable Private 
                               Output f32_3* %195 = OpVariable Output 
                               Output f32_3* %201 = OpVariable Output 
                                         f32 %202 = OpConstant 3.674022E-40 
                                       f32_3 %203 = OpConstantComposite %202 %202 %202 
                                             %206 = OpTypePointer Uniform %6 
                                       f32_3 %213 = OpConstantComposite %148 %148 %148 
                               Output f32_4* %217 = OpVariable Output 
                               Output f32_4* %229 = OpVariable Output 
                                       f32_4 %230 = OpConstantComposite %202 %202 %202 %202 
                                             %231 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                        f32_4 %99 = OpLoad %44 
                                       f32_2 %100 = OpVectorShuffle %99 %99 1 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 %23 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                                                      OpStore %98 %104 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 %28 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_4 %108 = OpLoad %44 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 0 
                                       f32_2 %110 = OpFMul %107 %109 
                                       f32_2 %111 = OpLoad %98 
                                       f32_2 %112 = OpFAdd %110 %111 
                                       f32_4 %113 = OpLoad %44 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %44 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %46 %36 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpLoad %44 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 2 
                                       f32_2 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %44 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %44 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %44 %125 
                              Uniform f32_4* %126 = OpAccessChain %21 %46 %46 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                                       f32_4 %129 = OpLoad %44 
                                       f32_2 %130 = OpVectorShuffle %129 %129 3 3 
                                       f32_2 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %44 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_2 %134 = OpFAdd %131 %133 
                                       f32_4 %135 = OpLoad %44 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 3 
                                                      OpStore %44 %136 
                                       f32_4 %137 = OpLoad %44 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %44 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %44 %143 
                                       f32_4 %146 = OpLoad %44 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_2 %150 = OpFMul %147 %149 
                                                      OpStore %145 %150 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                              Uniform f32_4* %156 = OpAccessChain %21 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_2 %159 = OpFMul %154 %158 
                              Uniform f32_4* %160 = OpAccessChain %21 %155 
                                       f32_4 %161 = OpLoad %160 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 3 
                                       f32_2 %163 = OpFAdd %159 %162 
                                                      OpStore %151 %163 
                                       f32_3 %166 = OpLoad %165 
                              Uniform f32_4* %167 = OpAccessChain %21 %36 %28 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                         f32 %170 = OpDot %166 %169 
                                Private f32* %173 = OpAccessChain %44 %171 
                                                      OpStore %173 %170 
                                       f32_3 %174 = OpLoad %165 
                              Uniform f32_4* %175 = OpAccessChain %21 %36 %23 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %179 = OpAccessChain %44 %88 
                                                      OpStore %179 %178 
                                       f32_3 %180 = OpLoad %165 
                              Uniform f32_4* %181 = OpAccessChain %21 %36 %36 
                                       f32_4 %182 = OpLoad %181 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %180 %183 
                                Private f32* %186 = OpAccessChain %44 %185 
                                                      OpStore %186 %184 
                                       f32_4 %188 = OpLoad %44 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %44 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %189 %191 
                                                      OpStore %187 %192 
                                         f32 %193 = OpLoad %187 
                                         f32 %194 = OpExtInst %1 32 %193 
                                                      OpStore %187 %194 
                                         f32 %196 = OpLoad %187 
                                       f32_3 %197 = OpCompositeConstruct %196 %196 %196 
                                       f32_4 %198 = OpLoad %44 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpFMul %197 %199 
                                                      OpStore %195 %200 
                                                      OpStore %201 %203 
                                Private f32* %204 = OpAccessChain %9 %88 
                                         f32 %205 = OpLoad %204 
                                Uniform f32* %207 = OpAccessChain %21 %28 %171 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFMul %205 %208 
                                Private f32* %210 = OpAccessChain %9 %88 
                                                      OpStore %210 %209 
                                       f32_4 %211 = OpLoad %9 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 3 1 
                                       f32_3 %214 = OpFMul %212 %213 
                                       f32_4 %215 = OpLoad %44 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 1 5 6 
                                                      OpStore %44 %216 
                                       f32_4 %218 = OpLoad %9 
                                       f32_2 %219 = OpVectorShuffle %218 %218 2 3 
                                       f32_4 %220 = OpLoad %217 
                                       f32_4 %221 = OpVectorShuffle %220 %219 0 1 4 5 
                                                      OpStore %217 %221 
                                       f32_4 %222 = OpLoad %44 
                                       f32_2 %223 = OpVectorShuffle %222 %222 2 2 
                                       f32_4 %224 = OpLoad %44 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 3 
                                       f32_2 %226 = OpFAdd %223 %225 
                                       f32_4 %227 = OpLoad %217 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore %217 %228 
                                                      OpStore %229 %230 
                                 Output f32* %232 = OpAccessChain %92 %28 %88 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFNegate %233 
                                 Output f32* %235 = OpAccessChain %92 %28 %88 
                                                      OpStore %235 %234 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 802
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %23 %139 %738 %788 %790 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 RelaxedPrecision 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 RelaxedPrecision 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpMemberDecorate %38 6 Offset 38 
                                                      OpMemberDecorate %38 7 Offset 38 
                                                      OpMemberDecorate %38 8 Offset 38 
                                                      OpMemberDecorate %38 9 Offset 38 
                                                      OpMemberDecorate %38 10 RelaxedPrecision 
                                                      OpMemberDecorate %38 10 Offset 38 
                                                      OpMemberDecorate %38 11 Offset 38 
                                                      OpMemberDecorate %38 12 Offset 38 
                                                      OpMemberDecorate %38 13 Offset 38 
                                                      OpMemberDecorate %38 14 Offset 38 
                                                      OpMemberDecorate %38 15 Offset 38 
                                                      OpMemberDecorate %38 16 Offset 38 
                                                      OpMemberDecorate %38 17 Offset 38 
                                                      OpMemberDecorate %38 18 Offset 38 
                                                      OpMemberDecorate %38 19 RelaxedPrecision 
                                                      OpMemberDecorate %38 19 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %163 DescriptorSet 163 
                                                      OpDecorate %163 Binding 163 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %623 SpecId 623 
                                                      OpDecorate %716 DescriptorSet 716 
                                                      OpDecorate %716 Binding 716 
                                                      OpDecorate %721 RelaxedPrecision 
                                                      OpDecorate %728 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %735 RelaxedPrecision 
                                                      OpDecorate %738 Location 738 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %745 DescriptorSet 745 
                                                      OpDecorate %745 Binding 745 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %749 RelaxedPrecision 
                                                      OpDecorate %750 RelaxedPrecision 
                                                      OpDecorate %753 RelaxedPrecision 
                                                      OpDecorate %757 RelaxedPrecision 
                                                      OpDecorate %758 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %763 RelaxedPrecision 
                                                      OpDecorate %764 RelaxedPrecision 
                                                      OpDecorate %771 RelaxedPrecision 
                                                      OpDecorate %774 RelaxedPrecision 
                                                      OpDecorate %775 RelaxedPrecision 
                                                      OpDecorate %780 RelaxedPrecision 
                                                      OpDecorate %781 RelaxedPrecision 
                                                      OpDecorate %783 RelaxedPrecision 
                                                      OpDecorate %784 RelaxedPrecision 
                                                      OpDecorate %785 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %788 RelaxedPrecision 
                                                      OpDecorate %788 Location 788 
                                                      OpDecorate %790 RelaxedPrecision 
                                                      OpDecorate %790 Location 790 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %793 RelaxedPrecision 
                                                      OpDecorate %798 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                                 Input f32_2* %23 = OpVariable Input 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                          u32 %35 = OpConstant 4 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeArray %7 %35 
                                              %38 = OpTypeStruct %7 %20 %7 %7 %7 %36 %7 %37 %20 %20 %7 %7 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 14 
                                              %43 = OpTypePointer Uniform %6 
                               Private f32_3* %52 = OpVariable Private 
                                          i32 %61 = OpConstant 13 
                                              %69 = OpTypeBool 
                                              %70 = OpTypePointer Private %69 
                                Private bool* %71 = OpVariable Private 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Function %6 
                                          f32 %81 = OpConstant 3.674022E-40 
                                          i32 %89 = OpConstant 11 
                                              %90 = OpTypePointer Uniform %7 
                                 Private f32* %95 = OpVariable Private 
                                          i32 %98 = OpConstant 17 
                                         f32 %103 = OpConstant 3.674022E-40 
                                         f32 %108 = OpConstant 3.674022E-40 
                              Private f32_4* %110 = OpVariable Private 
                                         i32 %111 = OpConstant 16 
                                         i32 %124 = OpConstant 15 
                              Private f32_3* %137 = OpVariable Private 
                                             %138 = OpTypePointer Input %20 
                                Input f32_3* %139 = OpVariable Input 
                                         f32 %142 = OpConstant 3.674022E-40 
                                         f32 %143 = OpConstant 3.674022E-40 
                                       f32_3 %144 = OpConstantComposite %142 %142 %143 
                              Private f32_4* %146 = OpVariable Private 
                                         i32 %147 = OpConstant 0 
                                         f32 %151 = OpConstant 3.674022E-40 
                                         u32 %153 = OpConstant 2 
                                Private f32* %162 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %163 = OpVariable UniformConstant 
                                Private f32* %169 = OpVariable Private 
                                         f32 %173 = OpConstant 3.674022E-40 
                               Private bool* %177 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                                         f32 %195 = OpConstant 3.674022E-40 
                                         u32 %196 = OpConstant 3 
                              Private f32_4* %198 = OpVariable Private 
                                             %261 = OpTypePointer Private %15 
                              Private f32_2* %262 = OpVariable Private 
                                         f32 %272 = OpConstant 3.674022E-40 
                                         f32 %274 = OpConstant 3.674022E-40 
                                         f32 %297 = OpConstant 3.674022E-40 
                                         f32 %305 = OpConstant 3.674022E-40 
                                         f32 %306 = OpConstant 3.674022E-40 
                                       f32_2 %307 = OpConstantComposite %305 %306 
                                         f32 %312 = OpConstant 3.674022E-40 
                                         f32 %317 = OpConstant 3.674022E-40 
                                Private f32* %325 = OpVariable Private 
                                         f32 %337 = OpConstant 3.674022E-40 
                                Private f32* %339 = OpVariable Private 
                                         f32 %348 = OpConstant 3.674022E-40 
                                         f32 %350 = OpConstant 3.674022E-40 
                                         f32 %355 = OpConstant 3.674022E-40 
                               Private bool* %365 = OpVariable Private 
                                         f32 %366 = OpConstant 3.674022E-40 
                                         i32 %372 = OpConstant 12 
                                         i32 %384 = OpConstant 18 
                                       f32_3 %436 = OpConstantComposite %108 %195 %151 
                                       f32_3 %447 = OpConstantComposite %272 %272 %272 
                                         f32 %449 = OpConstant 3.674022E-40 
                                       f32_3 %450 = OpConstantComposite %449 %449 %449 
                                       f32_3 %457 = OpConstantComposite %81 %81 %81 
                                       f32_3 %478 = OpConstantComposite %108 %108 %108 
                                       f32_3 %485 = OpConstantComposite %337 %337 %337 
                              Private f32_3* %489 = OpVariable Private 
                                         f32 %492 = OpConstant 3.674022E-40 
                                         f32 %497 = OpConstant 3.674022E-40 
                                         f32 %507 = OpConstant 3.674022E-40 
                                         f32 %508 = OpConstant 3.674022E-40 
                                       f32_3 %509 = OpConstantComposite %507 %74 %508 
                              Private f32_3* %518 = OpVariable Private 
                                       f32_3 %521 = OpConstantComposite %297 %297 %297 
                                         i32 %527 = OpConstant 19 
                               Private bool* %533 = OpVariable Private 
                                         i32 %538 = OpConstant 1 
                                         i32 %540 = OpConstant -1 
                                             %548 = OpTypePointer Uniform %20 
                                         i32 %552 = OpConstant 5 
                                         i32 %559 = OpConstant 2 
                                         i32 %569 = OpConstant 4 
                                         i32 %601 = OpConstant 3 
                                         i32 %613 = OpConstant 6 
                                        bool %617 = OpConstantFalse 
                                        bool %623 = OpSpecConstantFalse 
                               Private bool* %626 = OpVariable Private 
                                         i32 %632 = OpConstant 7 
                                             %669 = OpTypePointer Function %20 
                                         i32 %683 = OpConstant 9 
                                         i32 %692 = OpConstant 8 
                                         f32 %701 = OpConstant 3.674022E-40 
                                             %713 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %714 = OpTypeSampledImage %713 
                                             %715 = OpTypePointer UniformConstant %714 
 UniformConstant read_only Texture3DSampled* %716 = OpVariable UniformConstant 
                              Private f32_4* %721 = OpVariable Private 
                                             %737 = OpTypePointer Input %7 
                                Input f32_4* %738 = OpVariable Input 
                                Private f32* %744 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %745 = OpVariable UniformConstant 
                              Private f32_3* %750 = OpVariable Private 
                                         i32 %778 = OpConstant 10 
                                             %787 = OpTypePointer Output %7 
                               Output f32_4* %788 = OpVariable Output 
                                Input f32_3* %790 = OpVariable Input 
                                             %799 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %77 = OpVariable Function 
                               Function f32* %184 = OpVariable Function 
                               Function f32* %223 = OpVariable Function 
                               Function f32* %419 = OpVariable Function 
                             Function f32_3* %670 = OpVariable Function 
                               Function f32* %766 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                   Input f32* %27 = OpAccessChain %23 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpExtInst %1 30 %28 
                                 Private f32* %32 = OpAccessChain %22 %30 
                                                      OpStore %32 %29 
                                 Private f32* %33 = OpAccessChain %22 %30 
                                          f32 %34 = OpLoad %33 
                                 Uniform f32* %44 = OpAccessChain %40 %42 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %34 %45 
                                 Private f32* %47 = OpAccessChain %22 %30 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %22 %30 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpExtInst %1 29 %49 
                                 Private f32* %51 = OpAccessChain %22 %30 
                                                      OpStore %51 %50 
                                   Input f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                   Input f32* %55 = OpAccessChain %23 %25 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFMul %54 %56 
                                 Private f32* %58 = OpAccessChain %52 %30 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %52 %30 
                                          f32 %60 = OpLoad %59 
                                 Uniform f32* %62 = OpAccessChain %40 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFMul %60 %63 
                                 Private f32* %65 = OpAccessChain %22 %30 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFAdd %64 %66 
                                 Private f32* %68 = OpAccessChain %22 %30 
                                                      OpStore %68 %67 
                                 Private f32* %72 = OpAccessChain %22 %30 
                                          f32 %73 = OpLoad %72 
                                         bool %75 = OpFOrdLessThan %73 %74 
                                                      OpStore %71 %75 
                                         bool %78 = OpLoad %71 
                                                      OpSelectionMerge %80 None 
                                                      OpBranchConditional %78 %79 %82 
                                              %79 = OpLabel 
                                                      OpStore %77 %81 
                                                      OpBranch %80 
                                              %82 = OpLabel 
                                 Private f32* %83 = OpAccessChain %22 %30 
                                          f32 %84 = OpLoad %83 
                                                      OpStore %77 %84 
                                                      OpBranch %80 
                                              %80 = OpLabel 
                                          f32 %85 = OpLoad %77 
                                 Private f32* %86 = OpAccessChain %22 %30 
                                                      OpStore %86 %85 
                                        f32_3 %87 = OpLoad %22 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 0 0 
                               Uniform f32_4* %91 = OpAccessChain %40 %89 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFMul %88 %93 
                                                      OpStore %22 %94 
                                   Input f32* %96 = OpAccessChain %23 %30 
                                          f32 %97 = OpLoad %96 
                                 Uniform f32* %99 = OpAccessChain %40 %98 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFMul %97 %100 
                                                      OpStore %95 %101 
                                         f32 %102 = OpLoad %95 
                                         f32 %104 = OpFMul %102 %103 
                                                      OpStore %95 %104 
                                         f32 %105 = OpLoad %95 
                                         f32 %106 = OpExtInst %1 13 %105 
                                                      OpStore %95 %106 
                                         f32 %107 = OpLoad %95 
                                         f32 %109 = OpFAdd %107 %108 
                                                      OpStore %95 %109 
                                Uniform f32* %112 = OpAccessChain %40 %111 
                                         f32 %113 = OpLoad %112 
                                Uniform f32* %114 = OpAccessChain %40 %111 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpFAdd %113 %115 
                                Private f32* %117 = OpAccessChain %110 %30 
                                                      OpStore %117 %116 
                                         f32 %118 = OpLoad %95 
                                Private f32* %119 = OpAccessChain %110 %30 
                                         f32 %120 = OpLoad %119 
                                         f32 %121 = OpFDiv %118 %120 
                                                      OpStore %95 %121 
                                         f32 %122 = OpLoad %95 
                                         f32 %123 = OpFAdd %122 %81 
                                                      OpStore %95 %123 
                                Uniform f32* %125 = OpAccessChain %40 %124 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpLoad %95 
                                         f32 %128 = OpFMul %126 %127 
                                         f32 %129 = OpFAdd %128 %108 
                                                      OpStore %95 %129 
                                         f32 %130 = OpLoad %95 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_3 %132 = OpLoad %22 
                                       f32_3 %133 = OpVectorShuffle %132 %132 1 2 0 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %110 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 6 
                                                      OpStore %110 %136 
                                       f32_3 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 1 
                                       f32_3 %145 = OpFMul %141 %144 
                                                      OpStore %137 %145 
                                Uniform f32* %148 = OpAccessChain %40 %147 %30 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFNegate %149 
                                         f32 %152 = OpFMul %150 %151 
                                Private f32* %154 = OpAccessChain %137 %153 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFAdd %152 %155 
                                Private f32* %157 = OpAccessChain %146 %25 
                                                      OpStore %157 %156 
                                  Input f32* %158 = OpAccessChain %139 %30 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %159 %143 
                                Private f32* %161 = OpAccessChain %146 %30 
                                                      OpStore %161 %160 
                  read_only Texture2DSampled %164 = OpLoad %163 
                                       f32_4 %165 = OpLoad %146 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_4 %167 = OpImageSampleImplicitLod %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                                      OpStore %162 %168 
                                         f32 %170 = OpLoad %162 
                                         f32 %171 = OpExtInst %1 30 %170 
                                                      OpStore %169 %171 
                                         f32 %172 = OpLoad %169 
                                         f32 %174 = OpFMul %172 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 29 %175 
                                                      OpStore %169 %176 
                                Private f32* %178 = OpAccessChain %110 %30 
                                         f32 %179 = OpLoad %178 
                                Private f32* %180 = OpAccessChain %110 %25 
                                         f32 %181 = OpLoad %180 
                                        bool %182 = OpFOrdGreaterThanEqual %179 %181 
                                                      OpStore %177 %182 
                                        bool %185 = OpLoad %177 
                                                      OpSelectionMerge %187 None 
                                                      OpBranchConditional %185 %186 %188 
                                             %186 = OpLabel 
                                                      OpStore %184 %108 
                                                      OpBranch %187 
                                             %188 = OpLabel 
                                                      OpStore %184 %74 
                                                      OpBranch %187 
                                             %187 = OpLabel 
                                         f32 %189 = OpLoad %184 
                                                      OpStore %183 %189 
                                       f32_4 %190 = OpLoad %110 
                                       f32_2 %191 = OpVectorShuffle %190 %190 1 0 
                                       f32_4 %192 = OpLoad %146 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 2 3 
                                                      OpStore %146 %193 
                                Private f32* %194 = OpAccessChain %146 %153 
                                                      OpStore %194 %81 
                                Private f32* %197 = OpAccessChain %146 %196 
                                                      OpStore %197 %195 
                                       f32_3 %199 = OpLoad %22 
                                       f32_2 %200 = OpVectorShuffle %199 %199 1 2 
                                         f32 %201 = OpLoad %95 
                                       f32_2 %202 = OpCompositeConstruct %201 %201 
                                       f32_2 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %146 
                                       f32_2 %205 = OpVectorShuffle %204 %204 0 1 
                                       f32_2 %206 = OpFNegate %205 
                                       f32_2 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %198 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 2 3 
                                                      OpStore %198 %209 
                                Private f32* %210 = OpAccessChain %198 %153 
                                                      OpStore %210 %108 
                                Private f32* %211 = OpAccessChain %198 %196 
                                                      OpStore %211 %81 
                                         f32 %212 = OpLoad %183 
                                       f32_4 %213 = OpCompositeConstruct %212 %212 %212 %212 
                                       f32_4 %214 = OpLoad %198 
                                       f32_4 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %146 
                                       f32_4 %217 = OpFAdd %215 %216 
                                                      OpStore %146 %217 
                                Private f32* %218 = OpAccessChain %110 %196 
                                         f32 %219 = OpLoad %218 
                                Private f32* %220 = OpAccessChain %146 %30 
                                         f32 %221 = OpLoad %220 
                                        bool %222 = OpFOrdGreaterThanEqual %219 %221 
                                                      OpStore %71 %222 
                                        bool %224 = OpLoad %71 
                                                      OpSelectionMerge %226 None 
                                                      OpBranchConditional %224 %225 %227 
                                             %225 = OpLabel 
                                                      OpStore %223 %108 
                                                      OpBranch %226 
                                             %227 = OpLabel 
                                                      OpStore %223 %74 
                                                      OpBranch %226 
                                             %226 = OpLabel 
                                         f32 %228 = OpLoad %223 
                                Private f32* %229 = OpAccessChain %52 %30 
                                                      OpStore %229 %228 
                                       f32_4 %230 = OpLoad %146 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 3 
                                       f32_4 %232 = OpLoad %110 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %110 %233 
                                       f32_4 %234 = OpLoad %110 
                                       f32_3 %235 = OpVectorShuffle %234 %234 3 1 0 
                                       f32_4 %236 = OpLoad %146 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 2 6 
                                                      OpStore %146 %237 
                                       f32_4 %238 = OpLoad %110 
                                       f32_4 %239 = OpFNegate %238 
                                       f32_4 %240 = OpLoad %146 
                                       f32_4 %241 = OpFAdd %239 %240 
                                                      OpStore %146 %241 
                                       f32_3 %242 = OpLoad %52 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpLoad %146 
                                       f32_4 %245 = OpFMul %243 %244 
                                       f32_4 %246 = OpLoad %110 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %110 %247 
                                Private f32* %248 = OpAccessChain %110 %25 
                                         f32 %249 = OpLoad %248 
                                Private f32* %250 = OpAccessChain %110 %196 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpExtInst %1 37 %249 %251 
                                Private f32* %253 = OpAccessChain %52 %30 
                                                      OpStore %253 %252 
                                Private f32* %254 = OpAccessChain %52 %30 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFNegate %255 
                                Private f32* %257 = OpAccessChain %110 %30 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %52 %30 
                                                      OpStore %260 %259 
                                Private f32* %263 = OpAccessChain %110 %25 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFNegate %264 
                                Private f32* %266 = OpAccessChain %110 %196 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFAdd %265 %267 
                                Private f32* %269 = OpAccessChain %262 %30 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %52 %30 
                                         f32 %271 = OpLoad %270 
                                         f32 %273 = OpFMul %271 %272 
                                         f32 %275 = OpFAdd %273 %274 
                                                      OpStore %95 %275 
                                Private f32* %276 = OpAccessChain %262 %30 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpLoad %95 
                                         f32 %279 = OpFDiv %277 %278 
                                Private f32* %280 = OpAccessChain %262 %30 
                                                      OpStore %280 %279 
                                Private f32* %281 = OpAccessChain %262 %30 
                                         f32 %282 = OpLoad %281 
                                Private f32* %283 = OpAccessChain %110 %153 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFAdd %282 %284 
                                Private f32* %286 = OpAccessChain %262 %30 
                                                      OpStore %286 %285 
                                Private f32* %287 = OpAccessChain %110 %30 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFAdd %288 %274 
                                                      OpStore %95 %289 
                                Private f32* %290 = OpAccessChain %52 %30 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpLoad %95 
                                         f32 %293 = OpFDiv %291 %292 
                                Private f32* %294 = OpAccessChain %52 %30 
                                                      OpStore %294 %293 
                                         f32 %295 = OpLoad %169 
                                         f32 %296 = OpFNegate %295 
                                         f32 %298 = OpFMul %296 %297 
                                Private f32* %299 = OpAccessChain %110 %30 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFAdd %298 %300 
                                Private f32* %302 = OpAccessChain %22 %30 
                                                      OpStore %302 %301 
                                       f32_3 %303 = OpLoad %137 
                                       f32_2 %304 = OpVectorShuffle %303 %303 0 1 
                                         f32 %308 = OpDot %304 %307 
                                                      OpStore %95 %308 
                                         f32 %309 = OpLoad %95 
                                         f32 %310 = OpExtInst %1 13 %309 
                                                      OpStore %95 %310 
                                         f32 %311 = OpLoad %95 
                                         f32 %313 = OpFMul %311 %312 
                                                      OpStore %95 %313 
                                         f32 %314 = OpLoad %95 
                                         f32 %315 = OpExtInst %1 10 %314 
                                                      OpStore %95 %315 
                                         f32 %316 = OpLoad %95 
                                         f32 %318 = OpFAdd %316 %317 
                                                      OpStore %95 %318 
                                Private f32* %319 = OpAccessChain %137 %25 
                                         f32 %320 = OpLoad %319 
                                Private f32* %321 = OpAccessChain %137 %30 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFAdd %320 %322 
                                Private f32* %324 = OpAccessChain %110 %30 
                                                      OpStore %324 %323 
                                Private f32* %326 = OpAccessChain %110 %30 
                                         f32 %327 = OpLoad %326 
                                Uniform f32* %328 = OpAccessChain %40 %147 %153 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFNegate %329 
                                         f32 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                         f32 %332 = OpLoad %325 
                                         f32 %333 = OpExtInst %1 13 %332 
                                                      OpStore %325 %333 
                                         f32 %334 = OpLoad %325 
                                         f32 %335 = OpFAdd %334 %108 
                                                      OpStore %325 %335 
                                         f32 %336 = OpLoad %325 
                                         f32 %338 = OpFMul %336 %337 
                                                      OpStore %325 %338 
                                Private f32* %340 = OpAccessChain %110 %30 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %40 %147 %153 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %341 %343 
                                                      OpStore %339 %344 
                                         f32 %345 = OpLoad %339 
                                         f32 %346 = OpExtInst %1 13 %345 
                                                      OpStore %339 %346 
                                         f32 %347 = OpLoad %339 
                                         f32 %349 = OpFMul %347 %348 
                                         f32 %351 = OpFAdd %349 %350 
                                                      OpStore %339 %351 
                                         f32 %352 = OpLoad %325 
                                         f32 %353 = OpLoad %339 
                                         f32 %354 = OpFMul %352 %353 
                                         f32 %356 = OpFAdd %354 %355 
                                                      OpStore %325 %356 
                                Private f32* %357 = OpAccessChain %110 %30 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpFMul %358 %337 
                                Private f32* %360 = OpAccessChain %110 %30 
                                                      OpStore %360 %359 
                                Private f32* %361 = OpAccessChain %110 %30 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpExtInst %1 10 %362 
                                Private f32* %364 = OpAccessChain %110 %30 
                                                      OpStore %364 %363 
                                Private f32* %367 = OpAccessChain %110 %30 
                                         f32 %368 = OpLoad %367 
                                        bool %369 = OpFOrdLessThan %366 %368 
                                                      OpStore %365 %369 
                                Private f32* %370 = OpAccessChain %22 %30 
                                         f32 %371 = OpLoad %370 
                                Uniform f32* %373 = OpAccessChain %40 %372 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFDiv %371 %374 
                                Private f32* %376 = OpAccessChain %22 %30 
                                                      OpStore %376 %375 
                                         f32 %377 = OpLoad %325 
                                         f32 %378 = OpFNegate %377 
                                Private f32* %379 = OpAccessChain %22 %30 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFAdd %378 %380 
                                                      OpStore %339 %381 
                                         f32 %382 = OpLoad %95 
                                         f32 %383 = OpFNegate %382 
                                Uniform f32* %385 = OpAccessChain %40 %384 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %383 %386 
                                         f32 %388 = OpLoad %339 
                                         f32 %389 = OpFAdd %387 %388 
                                                      OpStore %339 %389 
                                         f32 %390 = OpLoad %339 
                                         f32 %391 = OpExtInst %1 9 %390 
                                                      OpStore %339 %391 
                                         f32 %392 = OpLoad %339 
                                Uniform f32* %393 = OpAccessChain %40 %372 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFMul %392 %394 
                                                      OpStore %339 %395 
                                         f32 %396 = OpLoad %325 
                                Private f32* %397 = OpAccessChain %22 %30 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFAdd %396 %398 
                                Private f32* %400 = OpAccessChain %22 %30 
                                                      OpStore %400 %399 
                                         f32 %401 = OpLoad %95 
                                Uniform f32* %402 = OpAccessChain %40 %384 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %401 %403 
                                Private f32* %405 = OpAccessChain %22 %30 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFAdd %404 %406 
                                Private f32* %408 = OpAccessChain %22 %30 
                                                      OpStore %408 %407 
                                Private f32* %409 = OpAccessChain %22 %30 
                                         f32 %410 = OpLoad %409 
                                         f32 %411 = OpExtInst %1 2 %410 
                                Private f32* %412 = OpAccessChain %22 %30 
                                                      OpStore %412 %411 
                                Private f32* %413 = OpAccessChain %22 %30 
                                         f32 %414 = OpLoad %413 
                                Uniform f32* %415 = OpAccessChain %40 %372 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpFMul %414 %416 
                                Private f32* %418 = OpAccessChain %22 %30 
                                                      OpStore %418 %417 
                                        bool %420 = OpLoad %365 
                                                      OpSelectionMerge %422 None 
                                                      OpBranchConditional %420 %421 %424 
                                             %421 = OpLabel 
                                         f32 %423 = OpLoad %339 
                                                      OpStore %419 %423 
                                                      OpBranch %422 
                                             %424 = OpLabel 
                                Private f32* %425 = OpAccessChain %22 %30 
                                         f32 %426 = OpLoad %425 
                                                      OpStore %419 %426 
                                                      OpBranch %422 
                                             %422 = OpLabel 
                                         f32 %427 = OpLoad %419 
                                Private f32* %428 = OpAccessChain %22 %30 
                                                      OpStore %428 %427 
                                Private f32* %429 = OpAccessChain %22 %30 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpExtInst %1 40 %430 %74 
                                Private f32* %432 = OpAccessChain %22 %30 
                                                      OpStore %432 %431 
                                       f32_2 %433 = OpLoad %262 
                                       f32_3 %434 = OpVectorShuffle %433 %433 0 0 0 
                                       f32_3 %435 = OpExtInst %1 4 %434 
                                       f32_3 %437 = OpFAdd %435 %436 
                                       f32_4 %438 = OpLoad %110 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 5 6 3 
                                                      OpStore %110 %439 
                                       f32_4 %440 = OpLoad %110 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpExtInst %1 10 %441 
                                       f32_4 %443 = OpLoad %110 
                                       f32_4 %444 = OpVectorShuffle %443 %442 4 5 6 3 
                                                      OpStore %110 %444 
                                       f32_4 %445 = OpLoad %110 
                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
                                       f32_3 %448 = OpFMul %446 %447 
                                       f32_3 %451 = OpFAdd %448 %450 
                                       f32_4 %452 = OpLoad %110 
                                       f32_4 %453 = OpVectorShuffle %452 %451 4 5 6 3 
                                                      OpStore %110 %453 
                                       f32_4 %454 = OpLoad %110 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_3 %456 = OpExtInst %1 4 %455 
                                       f32_3 %458 = OpFAdd %456 %457 
                                       f32_4 %459 = OpLoad %110 
                                       f32_4 %460 = OpVectorShuffle %459 %458 4 5 6 3 
                                                      OpStore %110 %460 
                                       f32_4 %461 = OpLoad %110 
                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 2 
                                       f32_3 %463 = OpCompositeConstruct %74 %74 %74 
                                       f32_3 %464 = OpCompositeConstruct %108 %108 %108 
                                       f32_3 %465 = OpExtInst %1 43 %462 %463 %464 
                                       f32_4 %466 = OpLoad %110 
                                       f32_4 %467 = OpVectorShuffle %466 %465 4 5 6 3 
                                                      OpStore %110 %467 
                                       f32_4 %468 = OpLoad %110 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
                                       f32_3 %470 = OpFAdd %469 %457 
                                       f32_4 %471 = OpLoad %110 
                                       f32_4 %472 = OpVectorShuffle %471 %470 4 5 6 3 
                                                      OpStore %110 %472 
                                       f32_3 %473 = OpLoad %52 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 0 0 
                                       f32_4 %475 = OpLoad %110 
                                       f32_3 %476 = OpVectorShuffle %475 %475 0 1 2 
                                       f32_3 %477 = OpFMul %474 %476 
                                       f32_3 %479 = OpFAdd %477 %478 
                                                      OpStore %52 %479 
                                       f32_3 %480 = OpLoad %52 
                                       f32_3 %481 = OpLoad %22 
                                       f32_3 %482 = OpVectorShuffle %481 %481 0 0 0 
                                       f32_3 %483 = OpFMul %480 %482 
                                                      OpStore %22 %483 
                                       f32_3 %484 = OpLoad %22 
                                       f32_3 %486 = OpFMul %484 %485 
                                       f32_4 %487 = OpLoad %110 
                                       f32_4 %488 = OpVectorShuffle %487 %486 4 5 6 3 
                                                      OpStore %110 %488 
                                Private f32* %490 = OpAccessChain %9 %30 
                                         f32 %491 = OpLoad %490 
                                         f32 %493 = OpFAdd %491 %492 
                                Private f32* %494 = OpAccessChain %489 %30 
                                                      OpStore %494 %493 
                                Private f32* %495 = OpAccessChain %489 %30 
                                         f32 %496 = OpLoad %495 
                                         f32 %498 = OpFMul %496 %497 
                                Private f32* %499 = OpAccessChain %489 %30 
                                                      OpStore %499 %498 
                                Private f32* %500 = OpAccessChain %489 %30 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpExtInst %1 43 %501 %74 %108 
                                Private f32* %503 = OpAccessChain %489 %30 
                                                      OpStore %503 %502 
                                       f32_3 %504 = OpLoad %22 
                                       f32_3 %505 = OpFNegate %504 
                                       f32_3 %506 = OpFMul %505 %485 
                                       f32_3 %510 = OpFAdd %506 %509 
                                                      OpStore %22 %510 
                                       f32_3 %511 = OpLoad %489 
                                       f32_3 %512 = OpVectorShuffle %511 %511 0 0 0 
                                       f32_3 %513 = OpLoad %22 
                                       f32_3 %514 = OpFMul %512 %513 
                                       f32_4 %515 = OpLoad %110 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
                                       f32_3 %517 = OpFAdd %514 %516 
                                                      OpStore %22 %517 
                                       f32_4 %519 = OpLoad %9 
                                       f32_3 %520 = OpVectorShuffle %519 %519 0 1 2 
                                       f32_3 %522 = OpFMul %520 %521 
                                       f32_3 %523 = OpLoad %22 
                                       f32_3 %524 = OpFAdd %522 %523 
                                                      OpStore %518 %524 
                                Private f32* %525 = OpAccessChain %9 %196 
                                         f32 %526 = OpLoad %525 
                                Uniform f32* %528 = OpAccessChain %40 %527 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpFNegate %529 
                                         f32 %531 = OpFAdd %526 %530 
                                Private f32* %532 = OpAccessChain %489 %30 
                                                      OpStore %532 %531 
                                Private f32* %534 = OpAccessChain %489 %30 
                                         f32 %535 = OpLoad %534 
                                        bool %536 = OpFOrdLessThan %535 %74 
                                                      OpStore %533 %536 
                                        bool %537 = OpLoad %533 
                                         i32 %539 = OpSelect %537 %538 %147 
                                         i32 %541 = OpIMul %539 %540 
                                        bool %542 = OpINotEqual %541 %147 
                                                      OpSelectionMerge %544 None 
                                                      OpBranchConditional %542 %543 %544 
                                             %543 = OpLabel 
                                                      OpKill
                                             %544 = OpLabel 
                                       f32_3 %546 = OpLoad %139 
                                       f32_3 %547 = OpFNegate %546 
                              Uniform f32_3* %549 = OpAccessChain %40 %538 
                                       f32_3 %550 = OpLoad %549 
                                       f32_3 %551 = OpFAdd %547 %550 
                                                      OpStore %22 %551 
                                Uniform f32* %553 = OpAccessChain %40 %552 %147 %153 
                                         f32 %554 = OpLoad %553 
                                Private f32* %555 = OpAccessChain %110 %30 
                                                      OpStore %555 %554 
                                Uniform f32* %556 = OpAccessChain %40 %552 %538 %153 
                                         f32 %557 = OpLoad %556 
                                Private f32* %558 = OpAccessChain %110 %25 
                                                      OpStore %558 %557 
                                Uniform f32* %560 = OpAccessChain %40 %552 %559 %153 
                                         f32 %561 = OpLoad %560 
                                Private f32* %562 = OpAccessChain %110 %153 
                                                      OpStore %562 %561 
                                       f32_3 %563 = OpLoad %22 
                                       f32_4 %564 = OpLoad %110 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                                         f32 %566 = OpDot %563 %565 
                                Private f32* %567 = OpAccessChain %22 %30 
                                                      OpStore %567 %566 
                                       f32_3 %568 = OpLoad %139 
                              Uniform f32_4* %570 = OpAccessChain %40 %569 
                                       f32_4 %571 = OpLoad %570 
                                       f32_3 %572 = OpVectorShuffle %571 %571 0 1 2 
                                       f32_3 %573 = OpFNegate %572 
                                       f32_3 %574 = OpFAdd %568 %573 
                                                      OpStore %52 %574 
                                       f32_3 %575 = OpLoad %52 
                                       f32_3 %576 = OpLoad %52 
                                         f32 %577 = OpDot %575 %576 
                                Private f32* %578 = OpAccessChain %52 %30 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %52 %30 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpExtInst %1 31 %580 
                                Private f32* %582 = OpAccessChain %52 %30 
                                                      OpStore %582 %581 
                                Private f32* %583 = OpAccessChain %22 %30 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFNegate %584 
                                Private f32* %586 = OpAccessChain %52 %30 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpFAdd %585 %587 
                                Private f32* %589 = OpAccessChain %52 %30 
                                                      OpStore %589 %588 
                                Uniform f32* %590 = OpAccessChain %40 %569 %196 
                                         f32 %591 = OpLoad %590 
                                Private f32* %592 = OpAccessChain %52 %30 
                                         f32 %593 = OpLoad %592 
                                         f32 %594 = OpFMul %591 %593 
                                Private f32* %595 = OpAccessChain %22 %30 
                                         f32 %596 = OpLoad %595 
                                         f32 %597 = OpFAdd %594 %596 
                                Private f32* %598 = OpAccessChain %22 %30 
                                                      OpStore %598 %597 
                                Private f32* %599 = OpAccessChain %22 %30 
                                         f32 %600 = OpLoad %599 
                                Uniform f32* %602 = OpAccessChain %40 %601 %153 
                                         f32 %603 = OpLoad %602 
                                         f32 %604 = OpFMul %600 %603 
                                Uniform f32* %605 = OpAccessChain %40 %601 %196 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpFAdd %604 %606 
                                Private f32* %608 = OpAccessChain %22 %30 
                                                      OpStore %608 %607 
                                Private f32* %609 = OpAccessChain %22 %30 
                                         f32 %610 = OpLoad %609 
                                         f32 %611 = OpExtInst %1 43 %610 %74 %108 
                                Private f32* %612 = OpAccessChain %22 %30 
                                                      OpStore %612 %611 
                                Uniform f32* %614 = OpAccessChain %40 %613 %30 
                                         f32 %615 = OpLoad %614 
                                        bool %616 = OpFOrdEqual %615 %108 
                                                      OpStore %71 %616 
                                                      OpSelectionMerge %619 None 
                                                      OpBranchConditional %617 %618 %619 
                                             %618 = OpLabel 
                                        bool %620 = OpLoad %71 
                                                      OpSelectionMerge %622 None 
                                                      OpBranchConditional %620 %621 %622 
                                             %621 = OpLabel 
                                                      OpBranch %622 
                                             %622 = OpLabel 
                                                      OpBranch %619 
                                             %619 = OpLabel 
                                                      OpSelectionMerge %625 None 
                                                      OpBranchConditional %623 %624 %723 
                                             %624 = OpLabel 
                                Uniform f32* %627 = OpAccessChain %40 %613 %25 
                                         f32 %628 = OpLoad %627 
                                        bool %629 = OpFOrdEqual %628 %108 
                                                      OpStore %626 %629 
                                       f32_3 %630 = OpLoad %139 
                                       f32_3 %631 = OpVectorShuffle %630 %630 1 1 1 
                              Uniform f32_4* %633 = OpAccessChain %40 %632 %538 
                                       f32_4 %634 = OpLoad %633 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                       f32_3 %636 = OpFMul %631 %635 
                                       f32_4 %637 = OpLoad %110 
                                       f32_4 %638 = OpVectorShuffle %637 %636 4 5 6 3 
                                                      OpStore %110 %638 
                              Uniform f32_4* %639 = OpAccessChain %40 %632 %147 
                                       f32_4 %640 = OpLoad %639 
                                       f32_3 %641 = OpVectorShuffle %640 %640 0 1 2 
                                       f32_3 %642 = OpLoad %139 
                                       f32_3 %643 = OpVectorShuffle %642 %642 0 0 0 
                                       f32_3 %644 = OpFMul %641 %643 
                                       f32_4 %645 = OpLoad %110 
                                       f32_3 %646 = OpVectorShuffle %645 %645 0 1 2 
                                       f32_3 %647 = OpFAdd %644 %646 
                                       f32_4 %648 = OpLoad %110 
                                       f32_4 %649 = OpVectorShuffle %648 %647 4 5 6 3 
                                                      OpStore %110 %649 
                              Uniform f32_4* %650 = OpAccessChain %40 %632 %559 
                                       f32_4 %651 = OpLoad %650 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 1 2 
                                       f32_3 %653 = OpLoad %139 
                                       f32_3 %654 = OpVectorShuffle %653 %653 2 2 2 
                                       f32_3 %655 = OpFMul %652 %654 
                                       f32_4 %656 = OpLoad %110 
                                       f32_3 %657 = OpVectorShuffle %656 %656 0 1 2 
                                       f32_3 %658 = OpFAdd %655 %657 
                                       f32_4 %659 = OpLoad %110 
                                       f32_4 %660 = OpVectorShuffle %659 %658 4 5 6 3 
                                                      OpStore %110 %660 
                                       f32_4 %661 = OpLoad %110 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 2 
                              Uniform f32_4* %663 = OpAccessChain %40 %632 %601 
                                       f32_4 %664 = OpLoad %663 
                                       f32_3 %665 = OpVectorShuffle %664 %664 0 1 2 
                                       f32_3 %666 = OpFAdd %662 %665 
                                       f32_4 %667 = OpLoad %110 
                                       f32_4 %668 = OpVectorShuffle %667 %666 4 5 6 3 
                                                      OpStore %110 %668 
                                        bool %671 = OpLoad %626 
                                                      OpSelectionMerge %673 None 
                                                      OpBranchConditional %671 %672 %676 
                                             %672 = OpLabel 
                                       f32_4 %674 = OpLoad %110 
                                       f32_3 %675 = OpVectorShuffle %674 %674 0 1 2 
                                                      OpStore %670 %675 
                                                      OpBranch %673 
                                             %676 = OpLabel 
                                       f32_3 %677 = OpLoad %139 
                                                      OpStore %670 %677 
                                                      OpBranch %673 
                                             %673 = OpLabel 
                                       f32_3 %678 = OpLoad %670 
                                       f32_4 %679 = OpLoad %110 
                                       f32_4 %680 = OpVectorShuffle %679 %678 4 5 6 3 
                                                      OpStore %110 %680 
                                       f32_4 %681 = OpLoad %110 
                                       f32_3 %682 = OpVectorShuffle %681 %681 0 1 2 
                              Uniform f32_3* %684 = OpAccessChain %40 %683 
                                       f32_3 %685 = OpLoad %684 
                                       f32_3 %686 = OpFNegate %685 
                                       f32_3 %687 = OpFAdd %682 %686 
                                       f32_4 %688 = OpLoad %110 
                                       f32_4 %689 = OpVectorShuffle %688 %687 4 5 6 3 
                                                      OpStore %110 %689 
                                       f32_4 %690 = OpLoad %110 
                                       f32_3 %691 = OpVectorShuffle %690 %690 0 1 2 
                              Uniform f32_3* %693 = OpAccessChain %40 %692 
                                       f32_3 %694 = OpLoad %693 
                                       f32_3 %695 = OpFMul %691 %694 
                                       f32_4 %696 = OpLoad %110 
                                       f32_4 %697 = OpVectorShuffle %696 %695 0 4 5 6 
                                                      OpStore %110 %697 
                                Private f32* %698 = OpAccessChain %110 %25 
                                         f32 %699 = OpLoad %698 
                                         f32 %700 = OpFMul %699 %366 
                                         f32 %702 = OpFAdd %700 %701 
                                Private f32* %703 = OpAccessChain %262 %30 
                                                      OpStore %703 %702 
                                Uniform f32* %704 = OpAccessChain %40 %613 %153 
                                         f32 %705 = OpLoad %704 
                                         f32 %706 = OpFMul %705 %337 
                                         f32 %707 = OpFAdd %706 %701 
                                                      OpStore %95 %707 
                                         f32 %708 = OpLoad %95 
                                Private f32* %709 = OpAccessChain %262 %30 
                                         f32 %710 = OpLoad %709 
                                         f32 %711 = OpExtInst %1 40 %708 %710 
                                Private f32* %712 = OpAccessChain %110 %30 
                                                      OpStore %712 %711 
                  read_only Texture3DSampled %717 = OpLoad %716 
                                       f32_4 %718 = OpLoad %110 
                                       f32_3 %719 = OpVectorShuffle %718 %718 0 2 3 
                                       f32_4 %720 = OpImageSampleImplicitLod %717 %719 
                                                      OpStore %110 %720 
                                       f32_4 %722 = OpLoad %110 
                                                      OpStore %721 %722 
                                                      OpBranch %625 
                                             %723 = OpLabel 
                                Private f32* %724 = OpAccessChain %721 %30 
                                                      OpStore %724 %108 
                                Private f32* %725 = OpAccessChain %721 %25 
                                                      OpStore %725 %108 
                                Private f32* %726 = OpAccessChain %721 %153 
                                                      OpStore %726 %108 
                                Private f32* %727 = OpAccessChain %721 %196 
                                                      OpStore %727 %108 
                                                      OpBranch %625 
                                             %625 = OpLabel 
                                       f32_4 %728 = OpLoad %721 
                              Uniform f32_4* %729 = OpAccessChain %40 %559 
                                       f32_4 %730 = OpLoad %729 
                                         f32 %731 = OpDot %728 %730 
                                Private f32* %732 = OpAccessChain %489 %30 
                                                      OpStore %732 %731 
                                Private f32* %733 = OpAccessChain %489 %30 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpExtInst %1 43 %734 %74 %108 
                                Private f32* %736 = OpAccessChain %489 %30 
                                                      OpStore %736 %735 
                                       f32_4 %739 = OpLoad %738 
                                       f32_2 %740 = OpVectorShuffle %739 %739 0 1 
                                       f32_4 %741 = OpLoad %738 
                                       f32_2 %742 = OpVectorShuffle %741 %741 3 3 
                                       f32_2 %743 = OpFDiv %740 %742 
                                                      OpStore %262 %743 
                  read_only Texture2DSampled %746 = OpLoad %745 
                                       f32_2 %747 = OpLoad %262 
                                       f32_4 %748 = OpImageSampleImplicitLod %746 %747 
                                         f32 %749 = OpCompositeExtract %748 0 
                                                      OpStore %744 %749 
                                Private f32* %751 = OpAccessChain %22 %30 
                                         f32 %752 = OpLoad %751 
                                         f32 %753 = OpLoad %744 
                                         f32 %754 = OpFAdd %752 %753 
                                Private f32* %755 = OpAccessChain %750 %30 
                                                      OpStore %755 %754 
                                Private f32* %756 = OpAccessChain %750 %30 
                                         f32 %757 = OpLoad %756 
                                         f32 %758 = OpExtInst %1 43 %757 %74 %108 
                                Private f32* %759 = OpAccessChain %750 %30 
                                                      OpStore %759 %758 
                                Private f32* %760 = OpAccessChain %750 %30 
                                         f32 %761 = OpLoad %760 
                                Private f32* %762 = OpAccessChain %489 %30 
                                         f32 %763 = OpLoad %762 
                                         f32 %764 = OpExtInst %1 37 %761 %763 
                                Private f32* %765 = OpAccessChain %489 %30 
                                                      OpStore %765 %764 
                                        bool %767 = OpLoad %71 
                                                      OpSelectionMerge %769 None 
                                                      OpBranchConditional %767 %768 %772 
                                             %768 = OpLabel 
                                Private f32* %770 = OpAccessChain %489 %30 
                                         f32 %771 = OpLoad %770 
                                                      OpStore %766 %771 
                                                      OpBranch %769 
                                             %772 = OpLabel 
                                Private f32* %773 = OpAccessChain %750 %30 
                                         f32 %774 = OpLoad %773 
                                                      OpStore %766 %774 
                                                      OpBranch %769 
                                             %769 = OpLabel 
                                         f32 %775 = OpLoad %766 
                                Private f32* %776 = OpAccessChain %489 %30 
                                                      OpStore %776 %775 
                                       f32_3 %777 = OpLoad %518 
                              Uniform f32_4* %779 = OpAccessChain %40 %778 
                                       f32_4 %780 = OpLoad %779 
                                       f32_3 %781 = OpVectorShuffle %780 %780 0 1 2 
                                       f32_3 %782 = OpFMul %777 %781 
                                                      OpStore %750 %782 
                                       f32_3 %783 = OpLoad %489 
                                       f32_3 %784 = OpVectorShuffle %783 %783 0 0 0 
                                       f32_3 %785 = OpLoad %750 
                                       f32_3 %786 = OpFMul %784 %785 
                                                      OpStore %489 %786 
                                       f32_3 %789 = OpLoad %518 
                                       f32_3 %791 = OpLoad %790 
                                       f32_3 %792 = OpFMul %789 %791 
                                       f32_3 %793 = OpLoad %489 
                                       f32_3 %794 = OpFAdd %792 %793 
                                       f32_4 %795 = OpLoad %788 
                                       f32_4 %796 = OpVectorShuffle %795 %794 4 5 6 3 
                                                      OpStore %788 %796 
                                Private f32* %797 = OpAccessChain %9 %196 
                                         f32 %798 = OpLoad %797 
                                 Output f32* %800 = OpAccessChain %788 %196 
                                                      OpStore %800 %798 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat2.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    vs_TEXCOORD3.xy = u_xlat1.xy * vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.x = u_xlat1.y * u_xlat1.y;
    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _StepValue;
uniform 	float _SkyBoost;
uniform 	float _SkyPower;
uniform 	float _CurvePower;
uniform 	float _CurveColorFactor;
uniform 	float _CurveFreq;
uniform 	float _DitherCohesionFactor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = log2(vs_TEXCOORD3.y);
    u_xlat1.x = u_xlat1.x * _SkyPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat7.x = vs_TEXCOORD3.y * vs_TEXCOORD3.y;
    u_xlat1.x = u_xlat7.x * _SkyBoost + u_xlat1.x;
    u_xlatb7 = u_xlat1.x<0.0;
    u_xlat1.x = (u_xlatb7) ? -1.0 : u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * _OverrideColor.xyz;
    u_xlat19 = vs_TEXCOORD3.x * _CurveFreq;
    u_xlat19 = u_xlat19 * 3.1400001;
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 + 1.0;
    u_xlat2.x = _CurveColorFactor + _CurveColorFactor;
    u_xlat19 = u_xlat19 / u_xlat2.x;
    u_xlat19 = u_xlat19 + -1.0;
    u_xlat19 = _CurvePower * u_xlat19 + 1.0;
    u_xlat2.xyw = vec3(u_xlat19) * u_xlat1.yzx;
    u_xlat3.xyz = vs_TEXCOORD2.xyy * vec3(0.00999999978, 0.00999999978, 0.0799999982);
    u_xlat4.y = (-_Time.x) * 0.333333343 + u_xlat3.z;
    u_xlat4.x = vs_TEXCOORD2.x * 0.0799999982;
    u_xlat10_4 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat16_1 = log2(u_xlat10_4.x);
    u_xlat16_1 = u_xlat16_1 * 1.5;
    u_xlat16_1 = exp2(u_xlat16_1);
    u_xlatb15 = u_xlat2.x>=u_xlat2.y;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat2.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.yz * vec2(u_xlat19) + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat15) * u_xlat5 + u_xlat4;
    u_xlatb7 = u_xlat2.w>=u_xlat4.x;
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat2.wyx;
    u_xlat4 = (-u_xlat2) + u_xlat4;
    u_xlat2 = u_xlat7.xxxx * u_xlat4 + u_xlat2;
    u_xlat7.x = min(u_xlat2.y, u_xlat2.w);
    u_xlat7.x = (-u_xlat7.x) + u_xlat2.x;
    u_xlat13 = (-u_xlat2.y) + u_xlat2.w;
    u_xlat19 = u_xlat7.x * 6.0 + 1.00000001e-010;
    u_xlat13 = u_xlat13 / u_xlat19;
    u_xlat13 = u_xlat13 + u_xlat2.z;
    u_xlat19 = u_xlat2.x + 1.00000001e-010;
    u_xlat7.x = u_xlat7.x / u_xlat19;
    u_xlat1.x = (-u_xlat16_1) * 2.0 + u_xlat2.x;
    u_xlat19 = dot(u_xlat3.xy, vec2(12.9898005, 78.2330017));
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 * 43758.5469;
    u_xlat19 = fract(u_xlat19);
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat2.x = u_xlat3.y + u_xlat3.x;
    u_xlat8.x = u_xlat2.x + (-_Time.z);
    u_xlat8.x = sin(u_xlat8.x);
    u_xlat8.x = u_xlat8.x + 1.0;
    u_xlat8.x = u_xlat8.x * 0.5;
    u_xlat14.x = u_xlat2.x + _Time.z;
    u_xlat14.x = sin(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * 0.099999994 + 0.150000006;
    u_xlat8.x = u_xlat8.x * u_xlat14.x + 0.349999994;
    u_xlat2.x = u_xlat2.x * 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlatb2 = 0.25<u_xlat2.x;
    u_xlat1.x = u_xlat1.x / _StepValue;
    u_xlat14.x = (-u_xlat8.x) + u_xlat1.x;
    u_xlat14.x = (-u_xlat19) * _DitherCohesionFactor + u_xlat14.x;
    u_xlat14.x = ceil(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _StepValue;
    u_xlat1.x = u_xlat8.x + u_xlat1.x;
    u_xlat1.x = u_xlat19 * _DitherCohesionFactor + u_xlat1.x;
    u_xlat1.x = roundEven(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _StepValue;
    u_xlat1.x = (u_xlatb2) ? u_xlat14.x : u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat2.xyz = abs(vec3(u_xlat13)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat2.xyz = fract(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat2.xyz = abs(u_xlat2.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat19 = u_xlat0.x + -0.00999999978;
    u_xlat19 = u_xlat19 * 1000.0;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(0.5, 0.5, 0.5) + vec3(0.0299999993, 0.0, 0.0700000003);
    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
    u_xlat19 = u_xlat0.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat19) + u_xlat2.x;
    u_xlat19 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat19;
    u_xlat19 = u_xlat19 * _LightShadowData.z + _LightShadowData.w;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb8 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat8.xyz = (bool(u_xlatb8)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat8.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat14.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat14.x, u_xlat8.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat8.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat14.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat14.xy);
    u_xlat19 = u_xlat19 + u_xlat10_3.x;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat8.x = min(u_xlat19, u_xlat8.x);
    u_xlat19 = (u_xlatb2) ? u_xlat8.x : u_xlat19;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 351
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %147 %153 %154 %167 %205 %315 %331 %343 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %167 Location 167 
                                                      OpDecorate %205 Location 205 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %315 Location 315 
                                                      OpDecorate %331 Location 331 
                                                      OpDecorate %343 Location 343 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Private %98 
                              Private f32_2* %100 = OpVariable Private 
                                         f32 %141 = OpConstant 3.674022E-40 
                                       f32_2 %142 = OpConstantComposite %141 %141 
                                             %146 = OpTypePointer Output %98 
                               Output f32_2* %147 = OpVariable Output 
                                         f32 %150 = OpConstant 3.674022E-40 
                                       f32_2 %151 = OpConstantComposite %150 %150 
                               Output f32_2* %153 = OpVariable Output 
                                Input f32_4* %154 = OpVariable Input 
                                         i32 %157 = OpConstant 11 
                                             %166 = OpTypePointer Input %51 
                                Input f32_3* %167 = OpVariable Input 
                                         i32 %169 = OpConstant 9 
                                         u32 %174 = OpConstant 0 
                                             %175 = OpTypePointer Private %6 
                                         u32 %188 = OpConstant 2 
                                Private f32* %190 = OpVariable Private 
                               Output f32_3* %205 = OpVariable Output 
                                             %208 = OpTypePointer Private %51 
                              Private f32_3* %209 = OpVariable Private 
                              Private f32_4* %226 = OpVariable Private 
                              Private f32_3* %232 = OpVariable Private 
                                         i32 %233 = OpConstant 4 
                                         i32 %239 = OpConstant 5 
                                         i32 %245 = OpConstant 6 
                                         i32 %251 = OpConstant 7 
                                         u32 %260 = OpConstant 3 
                                         f32 %281 = OpConstant 3.674022E-40 
                                       f32_3 %282 = OpConstantComposite %281 %281 %281 
                                         f32 %290 = OpConstant 3.674022E-40 
                                       f32_3 %291 = OpConstantComposite %290 %290 %290 
                                         f32 %302 = OpConstant 3.674022E-40 
                                       f32_3 %303 = OpConstantComposite %302 %302 %302 
                                         f32 %305 = OpConstant 3.674022E-40 
                                       f32_3 %306 = OpConstantComposite %305 %305 %305 
                               Output f32_3* %315 = OpVariable Output 
                                             %320 = OpTypePointer Uniform %6 
                                       f32_3 %327 = OpConstantComposite %150 %150 %150 
                               Output f32_4* %331 = OpVariable Output 
                               Output f32_4* %343 = OpVariable Output 
                                       f32_4 %344 = OpConstantComposite %281 %281 %281 %281 
                                             %345 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %101 = OpLoad %45 
                                       f32_2 %102 = OpVectorShuffle %101 %101 1 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %65 %24 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %102 %105 
                                                      OpStore %100 %106 
                              Uniform f32_4* %107 = OpAccessChain %21 %65 %29 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_4 %110 = OpLoad %45 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 0 
                                       f32_2 %112 = OpFMul %109 %111 
                                       f32_2 %113 = OpLoad %100 
                                       f32_2 %114 = OpFAdd %112 %113 
                                       f32_4 %115 = OpLoad %45 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 2 3 
                                                      OpStore %45 %116 
                              Uniform f32_4* %117 = OpAccessChain %21 %65 %37 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpLoad %45 
                                       f32_2 %121 = OpVectorShuffle %120 %120 2 2 
                                       f32_2 %122 = OpFMul %119 %121 
                                       f32_4 %123 = OpLoad %45 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %45 
                                       f32_4 %127 = OpVectorShuffle %126 %125 4 5 2 3 
                                                      OpStore %45 %127 
                              Uniform f32_4* %128 = OpAccessChain %21 %65 %47 
                                       f32_4 %129 = OpLoad %128 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                                       f32_4 %131 = OpLoad %45 
                                       f32_2 %132 = OpVectorShuffle %131 %131 3 3 
                                       f32_2 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFAdd %133 %135 
                                       f32_4 %137 = OpLoad %45 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 3 
                                                      OpStore %45 %138 
                                       f32_4 %139 = OpLoad %45 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_2 %143 = OpFAdd %140 %142 
                                       f32_4 %144 = OpLoad %45 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %45 %145 
                                       f32_4 %148 = OpLoad %45 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_2 %152 = OpFMul %149 %151 
                                                      OpStore %147 %152 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 0 1 
                              Uniform f32_4* %158 = OpAccessChain %21 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                                       f32_2 %161 = OpFMul %156 %160 
                              Uniform f32_4* %162 = OpAccessChain %21 %157 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_2 %165 = OpFAdd %161 %164 
                                                      OpStore %153 %165 
                                       f32_3 %168 = OpLoad %167 
                              Uniform f32_4* %170 = OpAccessChain %21 %169 %29 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %168 %172 
                                Private f32* %176 = OpAccessChain %45 %174 
                                                      OpStore %176 %173 
                                       f32_3 %177 = OpLoad %167 
                              Uniform f32_4* %178 = OpAccessChain %21 %169 %24 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                         f32 %181 = OpDot %177 %180 
                                Private f32* %182 = OpAccessChain %45 %90 
                                                      OpStore %182 %181 
                                       f32_3 %183 = OpLoad %167 
                              Uniform f32_4* %184 = OpAccessChain %21 %169 %37 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                         f32 %187 = OpDot %183 %186 
                                Private f32* %189 = OpAccessChain %45 %188 
                                                      OpStore %189 %187 
                                       f32_4 %191 = OpLoad %45 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_4 %193 = OpLoad %45 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                         f32 %195 = OpDot %192 %194 
                                                      OpStore %190 %195 
                                         f32 %196 = OpLoad %190 
                                         f32 %197 = OpExtInst %1 32 %196 
                                                      OpStore %190 %197 
                                         f32 %198 = OpLoad %190 
                                       f32_3 %199 = OpCompositeConstruct %198 %198 %198 
                                       f32_4 %200 = OpLoad %45 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %45 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 6 3 
                                                      OpStore %45 %204 
                                       f32_4 %206 = OpLoad %45 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                                      OpStore %205 %207 
                                Private f32* %210 = OpAccessChain %45 %90 
                                         f32 %211 = OpLoad %210 
                                Private f32* %212 = OpAccessChain %45 %90 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                Private f32* %215 = OpAccessChain %209 %174 
                                                      OpStore %215 %214 
                                Private f32* %216 = OpAccessChain %45 %174 
                                         f32 %217 = OpLoad %216 
                                Private f32* %218 = OpAccessChain %45 %174 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %217 %219 
                                Private f32* %221 = OpAccessChain %209 %174 
                                         f32 %222 = OpLoad %221 
                                         f32 %223 = OpFNegate %222 
                                         f32 %224 = OpFAdd %220 %223 
                                Private f32* %225 = OpAccessChain %209 %174 
                                                      OpStore %225 %224 
                                       f32_4 %227 = OpLoad %45 
                                       f32_4 %228 = OpVectorShuffle %227 %227 1 2 2 0 
                                       f32_4 %229 = OpLoad %45 
                                       f32_4 %230 = OpVectorShuffle %229 %229 0 1 2 2 
                                       f32_4 %231 = OpFMul %228 %230 
                                                      OpStore %226 %231 
                              Uniform f32_4* %234 = OpAccessChain %21 %233 
                                       f32_4 %235 = OpLoad %234 
                                       f32_4 %236 = OpLoad %226 
                                         f32 %237 = OpDot %235 %236 
                                Private f32* %238 = OpAccessChain %232 %174 
                                                      OpStore %238 %237 
                              Uniform f32_4* %240 = OpAccessChain %21 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %226 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %232 %90 
                                                      OpStore %244 %243 
                              Uniform f32_4* %246 = OpAccessChain %21 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %226 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %232 %188 
                                                      OpStore %250 %249 
                              Uniform f32_4* %252 = OpAccessChain %21 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpLoad %209 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 0 0 
                                       f32_3 %257 = OpFMul %254 %256 
                                       f32_3 %258 = OpLoad %232 
                                       f32_3 %259 = OpFAdd %257 %258 
                                                      OpStore %209 %259 
                                Private f32* %261 = OpAccessChain %45 %260 
                                                      OpStore %261 %141 
                              Uniform f32_4* %262 = OpAccessChain %21 %24 
                                       f32_4 %263 = OpLoad %262 
                                       f32_4 %264 = OpLoad %45 
                                         f32 %265 = OpDot %263 %264 
                                Private f32* %266 = OpAccessChain %232 %174 
                                                      OpStore %266 %265 
                              Uniform f32_4* %267 = OpAccessChain %21 %37 
                                       f32_4 %268 = OpLoad %267 
                                       f32_4 %269 = OpLoad %45 
                                         f32 %270 = OpDot %268 %269 
                                Private f32* %271 = OpAccessChain %232 %90 
                                                      OpStore %271 %270 
                              Uniform f32_4* %272 = OpAccessChain %21 %47 
                                       f32_4 %273 = OpLoad %272 
                                       f32_4 %274 = OpLoad %45 
                                         f32 %275 = OpDot %273 %274 
                                Private f32* %276 = OpAccessChain %232 %188 
                                                      OpStore %276 %275 
                                       f32_3 %277 = OpLoad %209 
                                       f32_3 %278 = OpLoad %232 
                                       f32_3 %279 = OpFAdd %277 %278 
                                                      OpStore %209 %279 
                                       f32_3 %280 = OpLoad %209 
                                       f32_3 %283 = OpExtInst %1 40 %280 %282 
                                                      OpStore %209 %283 
                                       f32_3 %284 = OpLoad %209 
                                       f32_3 %285 = OpExtInst %1 30 %284 
                                       f32_4 %286 = OpLoad %45 
                                       f32_4 %287 = OpVectorShuffle %286 %285 4 5 6 3 
                                                      OpStore %45 %287 
                                       f32_4 %288 = OpLoad %45 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %292 = OpFMul %289 %291 
                                       f32_4 %293 = OpLoad %45 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 6 3 
                                                      OpStore %45 %294 
                                       f32_4 %295 = OpLoad %45 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpExtInst %1 29 %296 
                                       f32_4 %298 = OpLoad %45 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %45 %299 
                                       f32_4 %300 = OpLoad %45 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %304 = OpFMul %301 %303 
                                       f32_3 %307 = OpFAdd %304 %306 
                                       f32_4 %308 = OpLoad %45 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 6 3 
                                                      OpStore %45 %309 
                                       f32_4 %310 = OpLoad %45 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpExtInst %1 40 %311 %282 
                                       f32_4 %313 = OpLoad %45 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %45 %314 
                                       f32_4 %316 = OpLoad %45 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                                      OpStore %315 %317 
                                Private f32* %318 = OpAccessChain %9 %90 
                                         f32 %319 = OpLoad %318 
                                Uniform f32* %321 = OpAccessChain %21 %29 %174 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %319 %322 
                                Private f32* %324 = OpAccessChain %9 %90 
                                                      OpStore %324 %323 
                                       f32_4 %325 = OpLoad %9 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 3 1 
                                       f32_3 %328 = OpFMul %326 %327 
                                       f32_4 %329 = OpLoad %45 
                                       f32_4 %330 = OpVectorShuffle %329 %328 4 1 5 6 
                                                      OpStore %45 %330 
                                       f32_4 %332 = OpLoad %9 
                                       f32_2 %333 = OpVectorShuffle %332 %332 2 3 
                                       f32_4 %334 = OpLoad %331 
                                       f32_4 %335 = OpVectorShuffle %334 %333 0 1 4 5 
                                                      OpStore %331 %335 
                                       f32_4 %336 = OpLoad %45 
                                       f32_2 %337 = OpVectorShuffle %336 %336 2 2 
                                       f32_4 %338 = OpLoad %45 
                                       f32_2 %339 = OpVectorShuffle %338 %338 0 3 
                                       f32_2 %340 = OpFAdd %337 %339 
                                       f32_4 %341 = OpLoad %331 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 2 3 
                                                      OpStore %331 %342 
                                                      OpStore %343 %344 
                                 Output f32* %346 = OpAccessChain %94 %29 %90 
                                         f32 %347 = OpLoad %346 
                                         f32 %348 = OpFNegate %347 
                                 Output f32* %349 = OpAccessChain %94 %29 %90 
                                                      OpStore %349 %348 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 802
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %23 %139 %738 %788 %790 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 RelaxedPrecision 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 RelaxedPrecision 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpMemberDecorate %38 6 Offset 38 
                                                      OpMemberDecorate %38 7 Offset 38 
                                                      OpMemberDecorate %38 8 Offset 38 
                                                      OpMemberDecorate %38 9 Offset 38 
                                                      OpMemberDecorate %38 10 RelaxedPrecision 
                                                      OpMemberDecorate %38 10 Offset 38 
                                                      OpMemberDecorate %38 11 Offset 38 
                                                      OpMemberDecorate %38 12 Offset 38 
                                                      OpMemberDecorate %38 13 Offset 38 
                                                      OpMemberDecorate %38 14 Offset 38 
                                                      OpMemberDecorate %38 15 Offset 38 
                                                      OpMemberDecorate %38 16 Offset 38 
                                                      OpMemberDecorate %38 17 Offset 38 
                                                      OpMemberDecorate %38 18 Offset 38 
                                                      OpMemberDecorate %38 19 RelaxedPrecision 
                                                      OpMemberDecorate %38 19 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %163 DescriptorSet 163 
                                                      OpDecorate %163 Binding 163 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %623 SpecId 623 
                                                      OpDecorate %716 DescriptorSet 716 
                                                      OpDecorate %716 Binding 716 
                                                      OpDecorate %721 RelaxedPrecision 
                                                      OpDecorate %728 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %735 RelaxedPrecision 
                                                      OpDecorate %738 Location 738 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %745 DescriptorSet 745 
                                                      OpDecorate %745 Binding 745 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %749 RelaxedPrecision 
                                                      OpDecorate %750 RelaxedPrecision 
                                                      OpDecorate %753 RelaxedPrecision 
                                                      OpDecorate %757 RelaxedPrecision 
                                                      OpDecorate %758 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %763 RelaxedPrecision 
                                                      OpDecorate %764 RelaxedPrecision 
                                                      OpDecorate %771 RelaxedPrecision 
                                                      OpDecorate %774 RelaxedPrecision 
                                                      OpDecorate %775 RelaxedPrecision 
                                                      OpDecorate %780 RelaxedPrecision 
                                                      OpDecorate %781 RelaxedPrecision 
                                                      OpDecorate %783 RelaxedPrecision 
                                                      OpDecorate %784 RelaxedPrecision 
                                                      OpDecorate %785 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %788 RelaxedPrecision 
                                                      OpDecorate %788 Location 788 
                                                      OpDecorate %790 RelaxedPrecision 
                                                      OpDecorate %790 Location 790 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %793 RelaxedPrecision 
                                                      OpDecorate %798 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                                 Input f32_2* %23 = OpVariable Input 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                          u32 %35 = OpConstant 4 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeArray %7 %35 
                                              %38 = OpTypeStruct %7 %20 %7 %7 %7 %36 %7 %37 %20 %20 %7 %7 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 14 
                                              %43 = OpTypePointer Uniform %6 
                               Private f32_3* %52 = OpVariable Private 
                                          i32 %61 = OpConstant 13 
                                              %69 = OpTypeBool 
                                              %70 = OpTypePointer Private %69 
                                Private bool* %71 = OpVariable Private 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Function %6 
                                          f32 %81 = OpConstant 3.674022E-40 
                                          i32 %89 = OpConstant 11 
                                              %90 = OpTypePointer Uniform %7 
                                 Private f32* %95 = OpVariable Private 
                                          i32 %98 = OpConstant 17 
                                         f32 %103 = OpConstant 3.674022E-40 
                                         f32 %108 = OpConstant 3.674022E-40 
                              Private f32_4* %110 = OpVariable Private 
                                         i32 %111 = OpConstant 16 
                                         i32 %124 = OpConstant 15 
                              Private f32_3* %137 = OpVariable Private 
                                             %138 = OpTypePointer Input %20 
                                Input f32_3* %139 = OpVariable Input 
                                         f32 %142 = OpConstant 3.674022E-40 
                                         f32 %143 = OpConstant 3.674022E-40 
                                       f32_3 %144 = OpConstantComposite %142 %142 %143 
                              Private f32_4* %146 = OpVariable Private 
                                         i32 %147 = OpConstant 0 
                                         f32 %151 = OpConstant 3.674022E-40 
                                         u32 %153 = OpConstant 2 
                                Private f32* %162 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %163 = OpVariable UniformConstant 
                                Private f32* %169 = OpVariable Private 
                                         f32 %173 = OpConstant 3.674022E-40 
                               Private bool* %177 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                                         f32 %195 = OpConstant 3.674022E-40 
                                         u32 %196 = OpConstant 3 
                              Private f32_4* %198 = OpVariable Private 
                                             %261 = OpTypePointer Private %15 
                              Private f32_2* %262 = OpVariable Private 
                                         f32 %272 = OpConstant 3.674022E-40 
                                         f32 %274 = OpConstant 3.674022E-40 
                                         f32 %297 = OpConstant 3.674022E-40 
                                         f32 %305 = OpConstant 3.674022E-40 
                                         f32 %306 = OpConstant 3.674022E-40 
                                       f32_2 %307 = OpConstantComposite %305 %306 
                                         f32 %312 = OpConstant 3.674022E-40 
                                         f32 %317 = OpConstant 3.674022E-40 
                                Private f32* %325 = OpVariable Private 
                                         f32 %337 = OpConstant 3.674022E-40 
                                Private f32* %339 = OpVariable Private 
                                         f32 %348 = OpConstant 3.674022E-40 
                                         f32 %350 = OpConstant 3.674022E-40 
                                         f32 %355 = OpConstant 3.674022E-40 
                               Private bool* %365 = OpVariable Private 
                                         f32 %366 = OpConstant 3.674022E-40 
                                         i32 %372 = OpConstant 12 
                                         i32 %384 = OpConstant 18 
                                       f32_3 %436 = OpConstantComposite %108 %195 %151 
                                       f32_3 %447 = OpConstantComposite %272 %272 %272 
                                         f32 %449 = OpConstant 3.674022E-40 
                                       f32_3 %450 = OpConstantComposite %449 %449 %449 
                                       f32_3 %457 = OpConstantComposite %81 %81 %81 
                                       f32_3 %478 = OpConstantComposite %108 %108 %108 
                                       f32_3 %485 = OpConstantComposite %337 %337 %337 
                              Private f32_3* %489 = OpVariable Private 
                                         f32 %492 = OpConstant 3.674022E-40 
                                         f32 %497 = OpConstant 3.674022E-40 
                                         f32 %507 = OpConstant 3.674022E-40 
                                         f32 %508 = OpConstant 3.674022E-40 
                                       f32_3 %509 = OpConstantComposite %507 %74 %508 
                              Private f32_3* %518 = OpVariable Private 
                                       f32_3 %521 = OpConstantComposite %297 %297 %297 
                                         i32 %527 = OpConstant 19 
                               Private bool* %533 = OpVariable Private 
                                         i32 %538 = OpConstant 1 
                                         i32 %540 = OpConstant -1 
                                             %548 = OpTypePointer Uniform %20 
                                         i32 %552 = OpConstant 5 
                                         i32 %559 = OpConstant 2 
                                         i32 %569 = OpConstant 4 
                                         i32 %601 = OpConstant 3 
                                         i32 %613 = OpConstant 6 
                                        bool %617 = OpConstantFalse 
                                        bool %623 = OpSpecConstantFalse 
                               Private bool* %626 = OpVariable Private 
                                         i32 %632 = OpConstant 7 
                                             %669 = OpTypePointer Function %20 
                                         i32 %683 = OpConstant 9 
                                         i32 %692 = OpConstant 8 
                                         f32 %701 = OpConstant 3.674022E-40 
                                             %713 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %714 = OpTypeSampledImage %713 
                                             %715 = OpTypePointer UniformConstant %714 
 UniformConstant read_only Texture3DSampled* %716 = OpVariable UniformConstant 
                              Private f32_4* %721 = OpVariable Private 
                                             %737 = OpTypePointer Input %7 
                                Input f32_4* %738 = OpVariable Input 
                                Private f32* %744 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %745 = OpVariable UniformConstant 
                              Private f32_3* %750 = OpVariable Private 
                                         i32 %778 = OpConstant 10 
                                             %787 = OpTypePointer Output %7 
                               Output f32_4* %788 = OpVariable Output 
                                Input f32_3* %790 = OpVariable Input 
                                             %799 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %77 = OpVariable Function 
                               Function f32* %184 = OpVariable Function 
                               Function f32* %223 = OpVariable Function 
                               Function f32* %419 = OpVariable Function 
                             Function f32_3* %670 = OpVariable Function 
                               Function f32* %766 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                   Input f32* %27 = OpAccessChain %23 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpExtInst %1 30 %28 
                                 Private f32* %32 = OpAccessChain %22 %30 
                                                      OpStore %32 %29 
                                 Private f32* %33 = OpAccessChain %22 %30 
                                          f32 %34 = OpLoad %33 
                                 Uniform f32* %44 = OpAccessChain %40 %42 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %34 %45 
                                 Private f32* %47 = OpAccessChain %22 %30 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %22 %30 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpExtInst %1 29 %49 
                                 Private f32* %51 = OpAccessChain %22 %30 
                                                      OpStore %51 %50 
                                   Input f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                   Input f32* %55 = OpAccessChain %23 %25 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFMul %54 %56 
                                 Private f32* %58 = OpAccessChain %52 %30 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %52 %30 
                                          f32 %60 = OpLoad %59 
                                 Uniform f32* %62 = OpAccessChain %40 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFMul %60 %63 
                                 Private f32* %65 = OpAccessChain %22 %30 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFAdd %64 %66 
                                 Private f32* %68 = OpAccessChain %22 %30 
                                                      OpStore %68 %67 
                                 Private f32* %72 = OpAccessChain %22 %30 
                                          f32 %73 = OpLoad %72 
                                         bool %75 = OpFOrdLessThan %73 %74 
                                                      OpStore %71 %75 
                                         bool %78 = OpLoad %71 
                                                      OpSelectionMerge %80 None 
                                                      OpBranchConditional %78 %79 %82 
                                              %79 = OpLabel 
                                                      OpStore %77 %81 
                                                      OpBranch %80 
                                              %82 = OpLabel 
                                 Private f32* %83 = OpAccessChain %22 %30 
                                          f32 %84 = OpLoad %83 
                                                      OpStore %77 %84 
                                                      OpBranch %80 
                                              %80 = OpLabel 
                                          f32 %85 = OpLoad %77 
                                 Private f32* %86 = OpAccessChain %22 %30 
                                                      OpStore %86 %85 
                                        f32_3 %87 = OpLoad %22 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 0 0 
                               Uniform f32_4* %91 = OpAccessChain %40 %89 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFMul %88 %93 
                                                      OpStore %22 %94 
                                   Input f32* %96 = OpAccessChain %23 %30 
                                          f32 %97 = OpLoad %96 
                                 Uniform f32* %99 = OpAccessChain %40 %98 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFMul %97 %100 
                                                      OpStore %95 %101 
                                         f32 %102 = OpLoad %95 
                                         f32 %104 = OpFMul %102 %103 
                                                      OpStore %95 %104 
                                         f32 %105 = OpLoad %95 
                                         f32 %106 = OpExtInst %1 13 %105 
                                                      OpStore %95 %106 
                                         f32 %107 = OpLoad %95 
                                         f32 %109 = OpFAdd %107 %108 
                                                      OpStore %95 %109 
                                Uniform f32* %112 = OpAccessChain %40 %111 
                                         f32 %113 = OpLoad %112 
                                Uniform f32* %114 = OpAccessChain %40 %111 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpFAdd %113 %115 
                                Private f32* %117 = OpAccessChain %110 %30 
                                                      OpStore %117 %116 
                                         f32 %118 = OpLoad %95 
                                Private f32* %119 = OpAccessChain %110 %30 
                                         f32 %120 = OpLoad %119 
                                         f32 %121 = OpFDiv %118 %120 
                                                      OpStore %95 %121 
                                         f32 %122 = OpLoad %95 
                                         f32 %123 = OpFAdd %122 %81 
                                                      OpStore %95 %123 
                                Uniform f32* %125 = OpAccessChain %40 %124 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpLoad %95 
                                         f32 %128 = OpFMul %126 %127 
                                         f32 %129 = OpFAdd %128 %108 
                                                      OpStore %95 %129 
                                         f32 %130 = OpLoad %95 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_3 %132 = OpLoad %22 
                                       f32_3 %133 = OpVectorShuffle %132 %132 1 2 0 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %110 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 6 
                                                      OpStore %110 %136 
                                       f32_3 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 1 
                                       f32_3 %145 = OpFMul %141 %144 
                                                      OpStore %137 %145 
                                Uniform f32* %148 = OpAccessChain %40 %147 %30 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFNegate %149 
                                         f32 %152 = OpFMul %150 %151 
                                Private f32* %154 = OpAccessChain %137 %153 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFAdd %152 %155 
                                Private f32* %157 = OpAccessChain %146 %25 
                                                      OpStore %157 %156 
                                  Input f32* %158 = OpAccessChain %139 %30 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %159 %143 
                                Private f32* %161 = OpAccessChain %146 %30 
                                                      OpStore %161 %160 
                  read_only Texture2DSampled %164 = OpLoad %163 
                                       f32_4 %165 = OpLoad %146 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_4 %167 = OpImageSampleImplicitLod %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                                      OpStore %162 %168 
                                         f32 %170 = OpLoad %162 
                                         f32 %171 = OpExtInst %1 30 %170 
                                                      OpStore %169 %171 
                                         f32 %172 = OpLoad %169 
                                         f32 %174 = OpFMul %172 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 29 %175 
                                                      OpStore %169 %176 
                                Private f32* %178 = OpAccessChain %110 %30 
                                         f32 %179 = OpLoad %178 
                                Private f32* %180 = OpAccessChain %110 %25 
                                         f32 %181 = OpLoad %180 
                                        bool %182 = OpFOrdGreaterThanEqual %179 %181 
                                                      OpStore %177 %182 
                                        bool %185 = OpLoad %177 
                                                      OpSelectionMerge %187 None 
                                                      OpBranchConditional %185 %186 %188 
                                             %186 = OpLabel 
                                                      OpStore %184 %108 
                                                      OpBranch %187 
                                             %188 = OpLabel 
                                                      OpStore %184 %74 
                                                      OpBranch %187 
                                             %187 = OpLabel 
                                         f32 %189 = OpLoad %184 
                                                      OpStore %183 %189 
                                       f32_4 %190 = OpLoad %110 
                                       f32_2 %191 = OpVectorShuffle %190 %190 1 0 
                                       f32_4 %192 = OpLoad %146 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 2 3 
                                                      OpStore %146 %193 
                                Private f32* %194 = OpAccessChain %146 %153 
                                                      OpStore %194 %81 
                                Private f32* %197 = OpAccessChain %146 %196 
                                                      OpStore %197 %195 
                                       f32_3 %199 = OpLoad %22 
                                       f32_2 %200 = OpVectorShuffle %199 %199 1 2 
                                         f32 %201 = OpLoad %95 
                                       f32_2 %202 = OpCompositeConstruct %201 %201 
                                       f32_2 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %146 
                                       f32_2 %205 = OpVectorShuffle %204 %204 0 1 
                                       f32_2 %206 = OpFNegate %205 
                                       f32_2 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %198 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 2 3 
                                                      OpStore %198 %209 
                                Private f32* %210 = OpAccessChain %198 %153 
                                                      OpStore %210 %108 
                                Private f32* %211 = OpAccessChain %198 %196 
                                                      OpStore %211 %81 
                                         f32 %212 = OpLoad %183 
                                       f32_4 %213 = OpCompositeConstruct %212 %212 %212 %212 
                                       f32_4 %214 = OpLoad %198 
                                       f32_4 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %146 
                                       f32_4 %217 = OpFAdd %215 %216 
                                                      OpStore %146 %217 
                                Private f32* %218 = OpAccessChain %110 %196 
                                         f32 %219 = OpLoad %218 
                                Private f32* %220 = OpAccessChain %146 %30 
                                         f32 %221 = OpLoad %220 
                                        bool %222 = OpFOrdGreaterThanEqual %219 %221 
                                                      OpStore %71 %222 
                                        bool %224 = OpLoad %71 
                                                      OpSelectionMerge %226 None 
                                                      OpBranchConditional %224 %225 %227 
                                             %225 = OpLabel 
                                                      OpStore %223 %108 
                                                      OpBranch %226 
                                             %227 = OpLabel 
                                                      OpStore %223 %74 
                                                      OpBranch %226 
                                             %226 = OpLabel 
                                         f32 %228 = OpLoad %223 
                                Private f32* %229 = OpAccessChain %52 %30 
                                                      OpStore %229 %228 
                                       f32_4 %230 = OpLoad %146 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 3 
                                       f32_4 %232 = OpLoad %110 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %110 %233 
                                       f32_4 %234 = OpLoad %110 
                                       f32_3 %235 = OpVectorShuffle %234 %234 3 1 0 
                                       f32_4 %236 = OpLoad %146 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 2 6 
                                                      OpStore %146 %237 
                                       f32_4 %238 = OpLoad %110 
                                       f32_4 %239 = OpFNegate %238 
                                       f32_4 %240 = OpLoad %146 
                                       f32_4 %241 = OpFAdd %239 %240 
                                                      OpStore %146 %241 
                                       f32_3 %242 = OpLoad %52 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpLoad %146 
                                       f32_4 %245 = OpFMul %243 %244 
                                       f32_4 %246 = OpLoad %110 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %110 %247 
                                Private f32* %248 = OpAccessChain %110 %25 
                                         f32 %249 = OpLoad %248 
                                Private f32* %250 = OpAccessChain %110 %196 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpExtInst %1 37 %249 %251 
                                Private f32* %253 = OpAccessChain %52 %30 
                                                      OpStore %253 %252 
                                Private f32* %254 = OpAccessChain %52 %30 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFNegate %255 
                                Private f32* %257 = OpAccessChain %110 %30 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %52 %30 
                                                      OpStore %260 %259 
                                Private f32* %263 = OpAccessChain %110 %25 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFNegate %264 
                                Private f32* %266 = OpAccessChain %110 %196 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFAdd %265 %267 
                                Private f32* %269 = OpAccessChain %262 %30 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %52 %30 
                                         f32 %271 = OpLoad %270 
                                         f32 %273 = OpFMul %271 %272 
                                         f32 %275 = OpFAdd %273 %274 
                                                      OpStore %95 %275 
                                Private f32* %276 = OpAccessChain %262 %30 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpLoad %95 
                                         f32 %279 = OpFDiv %277 %278 
                                Private f32* %280 = OpAccessChain %262 %30 
                                                      OpStore %280 %279 
                                Private f32* %281 = OpAccessChain %262 %30 
                                         f32 %282 = OpLoad %281 
                                Private f32* %283 = OpAccessChain %110 %153 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFAdd %282 %284 
                                Private f32* %286 = OpAccessChain %262 %30 
                                                      OpStore %286 %285 
                                Private f32* %287 = OpAccessChain %110 %30 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFAdd %288 %274 
                                                      OpStore %95 %289 
                                Private f32* %290 = OpAccessChain %52 %30 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpLoad %95 
                                         f32 %293 = OpFDiv %291 %292 
                                Private f32* %294 = OpAccessChain %52 %30 
                                                      OpStore %294 %293 
                                         f32 %295 = OpLoad %169 
                                         f32 %296 = OpFNegate %295 
                                         f32 %298 = OpFMul %296 %297 
                                Private f32* %299 = OpAccessChain %110 %30 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFAdd %298 %300 
                                Private f32* %302 = OpAccessChain %22 %30 
                                                      OpStore %302 %301 
                                       f32_3 %303 = OpLoad %137 
                                       f32_2 %304 = OpVectorShuffle %303 %303 0 1 
                                         f32 %308 = OpDot %304 %307 
                                                      OpStore %95 %308 
                                         f32 %309 = OpLoad %95 
                                         f32 %310 = OpExtInst %1 13 %309 
                                                      OpStore %95 %310 
                                         f32 %311 = OpLoad %95 
                                         f32 %313 = OpFMul %311 %312 
                                                      OpStore %95 %313 
                                         f32 %314 = OpLoad %95 
                                         f32 %315 = OpExtInst %1 10 %314 
                                                      OpStore %95 %315 
                                         f32 %316 = OpLoad %95 
                                         f32 %318 = OpFAdd %316 %317 
                                                      OpStore %95 %318 
                                Private f32* %319 = OpAccessChain %137 %25 
                                         f32 %320 = OpLoad %319 
                                Private f32* %321 = OpAccessChain %137 %30 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFAdd %320 %322 
                                Private f32* %324 = OpAccessChain %110 %30 
                                                      OpStore %324 %323 
                                Private f32* %326 = OpAccessChain %110 %30 
                                         f32 %327 = OpLoad %326 
                                Uniform f32* %328 = OpAccessChain %40 %147 %153 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFNegate %329 
                                         f32 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                         f32 %332 = OpLoad %325 
                                         f32 %333 = OpExtInst %1 13 %332 
                                                      OpStore %325 %333 
                                         f32 %334 = OpLoad %325 
                                         f32 %335 = OpFAdd %334 %108 
                                                      OpStore %325 %335 
                                         f32 %336 = OpLoad %325 
                                         f32 %338 = OpFMul %336 %337 
                                                      OpStore %325 %338 
                                Private f32* %340 = OpAccessChain %110 %30 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %40 %147 %153 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %341 %343 
                                                      OpStore %339 %344 
                                         f32 %345 = OpLoad %339 
                                         f32 %346 = OpExtInst %1 13 %345 
                                                      OpStore %339 %346 
                                         f32 %347 = OpLoad %339 
                                         f32 %349 = OpFMul %347 %348 
                                         f32 %351 = OpFAdd %349 %350 
                                                      OpStore %339 %351 
                                         f32 %352 = OpLoad %325 
                                         f32 %353 = OpLoad %339 
                                         f32 %354 = OpFMul %352 %353 
                                         f32 %356 = OpFAdd %354 %355 
                                                      OpStore %325 %356 
                                Private f32* %357 = OpAccessChain %110 %30 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpFMul %358 %337 
                                Private f32* %360 = OpAccessChain %110 %30 
                                                      OpStore %360 %359 
                                Private f32* %361 = OpAccessChain %110 %30 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpExtInst %1 10 %362 
                                Private f32* %364 = OpAccessChain %110 %30 
                                                      OpStore %364 %363 
                                Private f32* %367 = OpAccessChain %110 %30 
                                         f32 %368 = OpLoad %367 
                                        bool %369 = OpFOrdLessThan %366 %368 
                                                      OpStore %365 %369 
                                Private f32* %370 = OpAccessChain %22 %30 
                                         f32 %371 = OpLoad %370 
                                Uniform f32* %373 = OpAccessChain %40 %372 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFDiv %371 %374 
                                Private f32* %376 = OpAccessChain %22 %30 
                                                      OpStore %376 %375 
                                         f32 %377 = OpLoad %325 
                                         f32 %378 = OpFNegate %377 
                                Private f32* %379 = OpAccessChain %22 %30 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFAdd %378 %380 
                                                      OpStore %339 %381 
                                         f32 %382 = OpLoad %95 
                                         f32 %383 = OpFNegate %382 
                                Uniform f32* %385 = OpAccessChain %40 %384 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %383 %386 
                                         f32 %388 = OpLoad %339 
                                         f32 %389 = OpFAdd %387 %388 
                                                      OpStore %339 %389 
                                         f32 %390 = OpLoad %339 
                                         f32 %391 = OpExtInst %1 9 %390 
                                                      OpStore %339 %391 
                                         f32 %392 = OpLoad %339 
                                Uniform f32* %393 = OpAccessChain %40 %372 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFMul %392 %394 
                                                      OpStore %339 %395 
                                         f32 %396 = OpLoad %325 
                                Private f32* %397 = OpAccessChain %22 %30 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFAdd %396 %398 
                                Private f32* %400 = OpAccessChain %22 %30 
                                                      OpStore %400 %399 
                                         f32 %401 = OpLoad %95 
                                Uniform f32* %402 = OpAccessChain %40 %384 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %401 %403 
                                Private f32* %405 = OpAccessChain %22 %30 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFAdd %404 %406 
                                Private f32* %408 = OpAccessChain %22 %30 
                                                      OpStore %408 %407 
                                Private f32* %409 = OpAccessChain %22 %30 
                                         f32 %410 = OpLoad %409 
                                         f32 %411 = OpExtInst %1 2 %410 
                                Private f32* %412 = OpAccessChain %22 %30 
                                                      OpStore %412 %411 
                                Private f32* %413 = OpAccessChain %22 %30 
                                         f32 %414 = OpLoad %413 
                                Uniform f32* %415 = OpAccessChain %40 %372 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpFMul %414 %416 
                                Private f32* %418 = OpAccessChain %22 %30 
                                                      OpStore %418 %417 
                                        bool %420 = OpLoad %365 
                                                      OpSelectionMerge %422 None 
                                                      OpBranchConditional %420 %421 %424 
                                             %421 = OpLabel 
                                         f32 %423 = OpLoad %339 
                                                      OpStore %419 %423 
                                                      OpBranch %422 
                                             %424 = OpLabel 
                                Private f32* %425 = OpAccessChain %22 %30 
                                         f32 %426 = OpLoad %425 
                                                      OpStore %419 %426 
                                                      OpBranch %422 
                                             %422 = OpLabel 
                                         f32 %427 = OpLoad %419 
                                Private f32* %428 = OpAccessChain %22 %30 
                                                      OpStore %428 %427 
                                Private f32* %429 = OpAccessChain %22 %30 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpExtInst %1 40 %430 %74 
                                Private f32* %432 = OpAccessChain %22 %30 
                                                      OpStore %432 %431 
                                       f32_2 %433 = OpLoad %262 
                                       f32_3 %434 = OpVectorShuffle %433 %433 0 0 0 
                                       f32_3 %435 = OpExtInst %1 4 %434 
                                       f32_3 %437 = OpFAdd %435 %436 
                                       f32_4 %438 = OpLoad %110 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 5 6 3 
                                                      OpStore %110 %439 
                                       f32_4 %440 = OpLoad %110 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpExtInst %1 10 %441 
                                       f32_4 %443 = OpLoad %110 
                                       f32_4 %444 = OpVectorShuffle %443 %442 4 5 6 3 
                                                      OpStore %110 %444 
                                       f32_4 %445 = OpLoad %110 
                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
                                       f32_3 %448 = OpFMul %446 %447 
                                       f32_3 %451 = OpFAdd %448 %450 
                                       f32_4 %452 = OpLoad %110 
                                       f32_4 %453 = OpVectorShuffle %452 %451 4 5 6 3 
                                                      OpStore %110 %453 
                                       f32_4 %454 = OpLoad %110 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_3 %456 = OpExtInst %1 4 %455 
                                       f32_3 %458 = OpFAdd %456 %457 
                                       f32_4 %459 = OpLoad %110 
                                       f32_4 %460 = OpVectorShuffle %459 %458 4 5 6 3 
                                                      OpStore %110 %460 
                                       f32_4 %461 = OpLoad %110 
                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 2 
                                       f32_3 %463 = OpCompositeConstruct %74 %74 %74 
                                       f32_3 %464 = OpCompositeConstruct %108 %108 %108 
                                       f32_3 %465 = OpExtInst %1 43 %462 %463 %464 
                                       f32_4 %466 = OpLoad %110 
                                       f32_4 %467 = OpVectorShuffle %466 %465 4 5 6 3 
                                                      OpStore %110 %467 
                                       f32_4 %468 = OpLoad %110 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
                                       f32_3 %470 = OpFAdd %469 %457 
                                       f32_4 %471 = OpLoad %110 
                                       f32_4 %472 = OpVectorShuffle %471 %470 4 5 6 3 
                                                      OpStore %110 %472 
                                       f32_3 %473 = OpLoad %52 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 0 0 
                                       f32_4 %475 = OpLoad %110 
                                       f32_3 %476 = OpVectorShuffle %475 %475 0 1 2 
                                       f32_3 %477 = OpFMul %474 %476 
                                       f32_3 %479 = OpFAdd %477 %478 
                                                      OpStore %52 %479 
                                       f32_3 %480 = OpLoad %52 
                                       f32_3 %481 = OpLoad %22 
                                       f32_3 %482 = OpVectorShuffle %481 %481 0 0 0 
                                       f32_3 %483 = OpFMul %480 %482 
                                                      OpStore %22 %483 
                                       f32_3 %484 = OpLoad %22 
                                       f32_3 %486 = OpFMul %484 %485 
                                       f32_4 %487 = OpLoad %110 
                                       f32_4 %488 = OpVectorShuffle %487 %486 4 5 6 3 
                                                      OpStore %110 %488 
                                Private f32* %490 = OpAccessChain %9 %30 
                                         f32 %491 = OpLoad %490 
                                         f32 %493 = OpFAdd %491 %492 
                                Private f32* %494 = OpAccessChain %489 %30 
                                                      OpStore %494 %493 
                                Private f32* %495 = OpAccessChain %489 %30 
                                         f32 %496 = OpLoad %495 
                                         f32 %498 = OpFMul %496 %497 
                                Private f32* %499 = OpAccessChain %489 %30 
                                                      OpStore %499 %498 
                                Private f32* %500 = OpAccessChain %489 %30 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpExtInst %1 43 %501 %74 %108 
                                Private f32* %503 = OpAccessChain %489 %30 
                                                      OpStore %503 %502 
                                       f32_3 %504 = OpLoad %22 
                                       f32_3 %505 = OpFNegate %504 
                                       f32_3 %506 = OpFMul %505 %485 
                                       f32_3 %510 = OpFAdd %506 %509 
                                                      OpStore %22 %510 
                                       f32_3 %511 = OpLoad %489 
                                       f32_3 %512 = OpVectorShuffle %511 %511 0 0 0 
                                       f32_3 %513 = OpLoad %22 
                                       f32_3 %514 = OpFMul %512 %513 
                                       f32_4 %515 = OpLoad %110 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
                                       f32_3 %517 = OpFAdd %514 %516 
                                                      OpStore %22 %517 
                                       f32_4 %519 = OpLoad %9 
                                       f32_3 %520 = OpVectorShuffle %519 %519 0 1 2 
                                       f32_3 %522 = OpFMul %520 %521 
                                       f32_3 %523 = OpLoad %22 
                                       f32_3 %524 = OpFAdd %522 %523 
                                                      OpStore %518 %524 
                                Private f32* %525 = OpAccessChain %9 %196 
                                         f32 %526 = OpLoad %525 
                                Uniform f32* %528 = OpAccessChain %40 %527 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpFNegate %529 
                                         f32 %531 = OpFAdd %526 %530 
                                Private f32* %532 = OpAccessChain %489 %30 
                                                      OpStore %532 %531 
                                Private f32* %534 = OpAccessChain %489 %30 
                                         f32 %535 = OpLoad %534 
                                        bool %536 = OpFOrdLessThan %535 %74 
                                                      OpStore %533 %536 
                                        bool %537 = OpLoad %533 
                                         i32 %539 = OpSelect %537 %538 %147 
                                         i32 %541 = OpIMul %539 %540 
                                        bool %542 = OpINotEqual %541 %147 
                                                      OpSelectionMerge %544 None 
                                                      OpBranchConditional %542 %543 %544 
                                             %543 = OpLabel 
                                                      OpKill
                                             %544 = OpLabel 
                                       f32_3 %546 = OpLoad %139 
                                       f32_3 %547 = OpFNegate %546 
                              Uniform f32_3* %549 = OpAccessChain %40 %538 
                                       f32_3 %550 = OpLoad %549 
                                       f32_3 %551 = OpFAdd %547 %550 
                                                      OpStore %22 %551 
                                Uniform f32* %553 = OpAccessChain %40 %552 %147 %153 
                                         f32 %554 = OpLoad %553 
                                Private f32* %555 = OpAccessChain %110 %30 
                                                      OpStore %555 %554 
                                Uniform f32* %556 = OpAccessChain %40 %552 %538 %153 
                                         f32 %557 = OpLoad %556 
                                Private f32* %558 = OpAccessChain %110 %25 
                                                      OpStore %558 %557 
                                Uniform f32* %560 = OpAccessChain %40 %552 %559 %153 
                                         f32 %561 = OpLoad %560 
                                Private f32* %562 = OpAccessChain %110 %153 
                                                      OpStore %562 %561 
                                       f32_3 %563 = OpLoad %22 
                                       f32_4 %564 = OpLoad %110 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                                         f32 %566 = OpDot %563 %565 
                                Private f32* %567 = OpAccessChain %22 %30 
                                                      OpStore %567 %566 
                                       f32_3 %568 = OpLoad %139 
                              Uniform f32_4* %570 = OpAccessChain %40 %569 
                                       f32_4 %571 = OpLoad %570 
                                       f32_3 %572 = OpVectorShuffle %571 %571 0 1 2 
                                       f32_3 %573 = OpFNegate %572 
                                       f32_3 %574 = OpFAdd %568 %573 
                                                      OpStore %52 %574 
                                       f32_3 %575 = OpLoad %52 
                                       f32_3 %576 = OpLoad %52 
                                         f32 %577 = OpDot %575 %576 
                                Private f32* %578 = OpAccessChain %52 %30 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %52 %30 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpExtInst %1 31 %580 
                                Private f32* %582 = OpAccessChain %52 %30 
                                                      OpStore %582 %581 
                                Private f32* %583 = OpAccessChain %22 %30 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFNegate %584 
                                Private f32* %586 = OpAccessChain %52 %30 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpFAdd %585 %587 
                                Private f32* %589 = OpAccessChain %52 %30 
                                                      OpStore %589 %588 
                                Uniform f32* %590 = OpAccessChain %40 %569 %196 
                                         f32 %591 = OpLoad %590 
                                Private f32* %592 = OpAccessChain %52 %30 
                                         f32 %593 = OpLoad %592 
                                         f32 %594 = OpFMul %591 %593 
                                Private f32* %595 = OpAccessChain %22 %30 
                                         f32 %596 = OpLoad %595 
                                         f32 %597 = OpFAdd %594 %596 
                                Private f32* %598 = OpAccessChain %22 %30 
                                                      OpStore %598 %597 
                                Private f32* %599 = OpAccessChain %22 %30 
                                         f32 %600 = OpLoad %599 
                                Uniform f32* %602 = OpAccessChain %40 %601 %153 
                                         f32 %603 = OpLoad %602 
                                         f32 %604 = OpFMul %600 %603 
                                Uniform f32* %605 = OpAccessChain %40 %601 %196 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpFAdd %604 %606 
                                Private f32* %608 = OpAccessChain %22 %30 
                                                      OpStore %608 %607 
                                Private f32* %609 = OpAccessChain %22 %30 
                                         f32 %610 = OpLoad %609 
                                         f32 %611 = OpExtInst %1 43 %610 %74 %108 
                                Private f32* %612 = OpAccessChain %22 %30 
                                                      OpStore %612 %611 
                                Uniform f32* %614 = OpAccessChain %40 %613 %30 
                                         f32 %615 = OpLoad %614 
                                        bool %616 = OpFOrdEqual %615 %108 
                                                      OpStore %71 %616 
                                                      OpSelectionMerge %619 None 
                                                      OpBranchConditional %617 %618 %619 
                                             %618 = OpLabel 
                                        bool %620 = OpLoad %71 
                                                      OpSelectionMerge %622 None 
                                                      OpBranchConditional %620 %621 %622 
                                             %621 = OpLabel 
                                                      OpBranch %622 
                                             %622 = OpLabel 
                                                      OpBranch %619 
                                             %619 = OpLabel 
                                                      OpSelectionMerge %625 None 
                                                      OpBranchConditional %623 %624 %723 
                                             %624 = OpLabel 
                                Uniform f32* %627 = OpAccessChain %40 %613 %25 
                                         f32 %628 = OpLoad %627 
                                        bool %629 = OpFOrdEqual %628 %108 
                                                      OpStore %626 %629 
                                       f32_3 %630 = OpLoad %139 
                                       f32_3 %631 = OpVectorShuffle %630 %630 1 1 1 
                              Uniform f32_4* %633 = OpAccessChain %40 %632 %538 
                                       f32_4 %634 = OpLoad %633 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                       f32_3 %636 = OpFMul %631 %635 
                                       f32_4 %637 = OpLoad %110 
                                       f32_4 %638 = OpVectorShuffle %637 %636 4 5 6 3 
                                                      OpStore %110 %638 
                              Uniform f32_4* %639 = OpAccessChain %40 %632 %147 
                                       f32_4 %640 = OpLoad %639 
                                       f32_3 %641 = OpVectorShuffle %640 %640 0 1 2 
                                       f32_3 %642 = OpLoad %139 
                                       f32_3 %643 = OpVectorShuffle %642 %642 0 0 0 
                                       f32_3 %644 = OpFMul %641 %643 
                                       f32_4 %645 = OpLoad %110 
                                       f32_3 %646 = OpVectorShuffle %645 %645 0 1 2 
                                       f32_3 %647 = OpFAdd %644 %646 
                                       f32_4 %648 = OpLoad %110 
                                       f32_4 %649 = OpVectorShuffle %648 %647 4 5 6 3 
                                                      OpStore %110 %649 
                              Uniform f32_4* %650 = OpAccessChain %40 %632 %559 
                                       f32_4 %651 = OpLoad %650 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 1 2 
                                       f32_3 %653 = OpLoad %139 
                                       f32_3 %654 = OpVectorShuffle %653 %653 2 2 2 
                                       f32_3 %655 = OpFMul %652 %654 
                                       f32_4 %656 = OpLoad %110 
                                       f32_3 %657 = OpVectorShuffle %656 %656 0 1 2 
                                       f32_3 %658 = OpFAdd %655 %657 
                                       f32_4 %659 = OpLoad %110 
                                       f32_4 %660 = OpVectorShuffle %659 %658 4 5 6 3 
                                                      OpStore %110 %660 
                                       f32_4 %661 = OpLoad %110 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 2 
                              Uniform f32_4* %663 = OpAccessChain %40 %632 %601 
                                       f32_4 %664 = OpLoad %663 
                                       f32_3 %665 = OpVectorShuffle %664 %664 0 1 2 
                                       f32_3 %666 = OpFAdd %662 %665 
                                       f32_4 %667 = OpLoad %110 
                                       f32_4 %668 = OpVectorShuffle %667 %666 4 5 6 3 
                                                      OpStore %110 %668 
                                        bool %671 = OpLoad %626 
                                                      OpSelectionMerge %673 None 
                                                      OpBranchConditional %671 %672 %676 
                                             %672 = OpLabel 
                                       f32_4 %674 = OpLoad %110 
                                       f32_3 %675 = OpVectorShuffle %674 %674 0 1 2 
                                                      OpStore %670 %675 
                                                      OpBranch %673 
                                             %676 = OpLabel 
                                       f32_3 %677 = OpLoad %139 
                                                      OpStore %670 %677 
                                                      OpBranch %673 
                                             %673 = OpLabel 
                                       f32_3 %678 = OpLoad %670 
                                       f32_4 %679 = OpLoad %110 
                                       f32_4 %680 = OpVectorShuffle %679 %678 4 5 6 3 
                                                      OpStore %110 %680 
                                       f32_4 %681 = OpLoad %110 
                                       f32_3 %682 = OpVectorShuffle %681 %681 0 1 2 
                              Uniform f32_3* %684 = OpAccessChain %40 %683 
                                       f32_3 %685 = OpLoad %684 
                                       f32_3 %686 = OpFNegate %685 
                                       f32_3 %687 = OpFAdd %682 %686 
                                       f32_4 %688 = OpLoad %110 
                                       f32_4 %689 = OpVectorShuffle %688 %687 4 5 6 3 
                                                      OpStore %110 %689 
                                       f32_4 %690 = OpLoad %110 
                                       f32_3 %691 = OpVectorShuffle %690 %690 0 1 2 
                              Uniform f32_3* %693 = OpAccessChain %40 %692 
                                       f32_3 %694 = OpLoad %693 
                                       f32_3 %695 = OpFMul %691 %694 
                                       f32_4 %696 = OpLoad %110 
                                       f32_4 %697 = OpVectorShuffle %696 %695 0 4 5 6 
                                                      OpStore %110 %697 
                                Private f32* %698 = OpAccessChain %110 %25 
                                         f32 %699 = OpLoad %698 
                                         f32 %700 = OpFMul %699 %366 
                                         f32 %702 = OpFAdd %700 %701 
                                Private f32* %703 = OpAccessChain %262 %30 
                                                      OpStore %703 %702 
                                Uniform f32* %704 = OpAccessChain %40 %613 %153 
                                         f32 %705 = OpLoad %704 
                                         f32 %706 = OpFMul %705 %337 
                                         f32 %707 = OpFAdd %706 %701 
                                                      OpStore %95 %707 
                                         f32 %708 = OpLoad %95 
                                Private f32* %709 = OpAccessChain %262 %30 
                                         f32 %710 = OpLoad %709 
                                         f32 %711 = OpExtInst %1 40 %708 %710 
                                Private f32* %712 = OpAccessChain %110 %30 
                                                      OpStore %712 %711 
                  read_only Texture3DSampled %717 = OpLoad %716 
                                       f32_4 %718 = OpLoad %110 
                                       f32_3 %719 = OpVectorShuffle %718 %718 0 2 3 
                                       f32_4 %720 = OpImageSampleImplicitLod %717 %719 
                                                      OpStore %110 %720 
                                       f32_4 %722 = OpLoad %110 
                                                      OpStore %721 %722 
                                                      OpBranch %625 
                                             %723 = OpLabel 
                                Private f32* %724 = OpAccessChain %721 %30 
                                                      OpStore %724 %108 
                                Private f32* %725 = OpAccessChain %721 %25 
                                                      OpStore %725 %108 
                                Private f32* %726 = OpAccessChain %721 %153 
                                                      OpStore %726 %108 
                                Private f32* %727 = OpAccessChain %721 %196 
                                                      OpStore %727 %108 
                                                      OpBranch %625 
                                             %625 = OpLabel 
                                       f32_4 %728 = OpLoad %721 
                              Uniform f32_4* %729 = OpAccessChain %40 %559 
                                       f32_4 %730 = OpLoad %729 
                                         f32 %731 = OpDot %728 %730 
                                Private f32* %732 = OpAccessChain %489 %30 
                                                      OpStore %732 %731 
                                Private f32* %733 = OpAccessChain %489 %30 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpExtInst %1 43 %734 %74 %108 
                                Private f32* %736 = OpAccessChain %489 %30 
                                                      OpStore %736 %735 
                                       f32_4 %739 = OpLoad %738 
                                       f32_2 %740 = OpVectorShuffle %739 %739 0 1 
                                       f32_4 %741 = OpLoad %738 
                                       f32_2 %742 = OpVectorShuffle %741 %741 3 3 
                                       f32_2 %743 = OpFDiv %740 %742 
                                                      OpStore %262 %743 
                  read_only Texture2DSampled %746 = OpLoad %745 
                                       f32_2 %747 = OpLoad %262 
                                       f32_4 %748 = OpImageSampleImplicitLod %746 %747 
                                         f32 %749 = OpCompositeExtract %748 0 
                                                      OpStore %744 %749 
                                Private f32* %751 = OpAccessChain %22 %30 
                                         f32 %752 = OpLoad %751 
                                         f32 %753 = OpLoad %744 
                                         f32 %754 = OpFAdd %752 %753 
                                Private f32* %755 = OpAccessChain %750 %30 
                                                      OpStore %755 %754 
                                Private f32* %756 = OpAccessChain %750 %30 
                                         f32 %757 = OpLoad %756 
                                         f32 %758 = OpExtInst %1 43 %757 %74 %108 
                                Private f32* %759 = OpAccessChain %750 %30 
                                                      OpStore %759 %758 
                                Private f32* %760 = OpAccessChain %750 %30 
                                         f32 %761 = OpLoad %760 
                                Private f32* %762 = OpAccessChain %489 %30 
                                         f32 %763 = OpLoad %762 
                                         f32 %764 = OpExtInst %1 37 %761 %763 
                                Private f32* %765 = OpAccessChain %489 %30 
                                                      OpStore %765 %764 
                                        bool %767 = OpLoad %71 
                                                      OpSelectionMerge %769 None 
                                                      OpBranchConditional %767 %768 %772 
                                             %768 = OpLabel 
                                Private f32* %770 = OpAccessChain %489 %30 
                                         f32 %771 = OpLoad %770 
                                                      OpStore %766 %771 
                                                      OpBranch %769 
                                             %772 = OpLabel 
                                Private f32* %773 = OpAccessChain %750 %30 
                                         f32 %774 = OpLoad %773 
                                                      OpStore %766 %774 
                                                      OpBranch %769 
                                             %769 = OpLabel 
                                         f32 %775 = OpLoad %766 
                                Private f32* %776 = OpAccessChain %489 %30 
                                                      OpStore %776 %775 
                                       f32_3 %777 = OpLoad %518 
                              Uniform f32_4* %779 = OpAccessChain %40 %778 
                                       f32_4 %780 = OpLoad %779 
                                       f32_3 %781 = OpVectorShuffle %780 %780 0 1 2 
                                       f32_3 %782 = OpFMul %777 %781 
                                                      OpStore %750 %782 
                                       f32_3 %783 = OpLoad %489 
                                       f32_3 %784 = OpVectorShuffle %783 %783 0 0 0 
                                       f32_3 %785 = OpLoad %750 
                                       f32_3 %786 = OpFMul %784 %785 
                                                      OpStore %489 %786 
                                       f32_3 %789 = OpLoad %518 
                                       f32_3 %791 = OpLoad %790 
                                       f32_3 %792 = OpFMul %789 %791 
                                       f32_3 %793 = OpLoad %489 
                                       f32_3 %794 = OpFAdd %792 %793 
                                       f32_4 %795 = OpLoad %788 
                                       f32_4 %796 = OpVectorShuffle %795 %794 4 5 6 3 
                                                      OpStore %788 %796 
                                Private f32* %797 = OpAccessChain %9 %196 
                                         f32 %798 = OpLoad %797 
                                 Output f32* %800 = OpAccessChain %788 %196 
                                                      OpStore %800 %798 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat2.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    vs_TEXCOORD3.xy = u_xlat1.xy * vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _StepValue;
uniform 	float _SkyBoost;
uniform 	float _SkyPower;
uniform 	float _CurvePower;
uniform 	float _CurveColorFactor;
uniform 	float _CurveFreq;
uniform 	float _DitherCohesionFactor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
float u_xlat13;
float u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = log2(vs_TEXCOORD3.y);
    u_xlat1.x = u_xlat1.x * _SkyPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat7.x = vs_TEXCOORD3.y * vs_TEXCOORD3.y;
    u_xlat1.x = u_xlat7.x * _SkyBoost + u_xlat1.x;
    u_xlatb7 = u_xlat1.x<0.0;
    u_xlat1.x = (u_xlatb7) ? -1.0 : u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * _OverrideColor.xyz;
    u_xlat19 = vs_TEXCOORD3.x * _CurveFreq;
    u_xlat19 = u_xlat19 * 3.1400001;
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 + 1.0;
    u_xlat2.x = _CurveColorFactor + _CurveColorFactor;
    u_xlat19 = u_xlat19 / u_xlat2.x;
    u_xlat19 = u_xlat19 + -1.0;
    u_xlat19 = _CurvePower * u_xlat19 + 1.0;
    u_xlat2.xyw = vec3(u_xlat19) * u_xlat1.yzx;
    u_xlat3.xyz = vs_TEXCOORD2.xyy * vec3(0.00999999978, 0.00999999978, 0.0799999982);
    u_xlat4.y = (-_Time.x) * 0.333333343 + u_xlat3.z;
    u_xlat4.x = vs_TEXCOORD2.x * 0.0799999982;
    u_xlat10_4 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat16_1 = log2(u_xlat10_4.x);
    u_xlat16_1 = u_xlat16_1 * 1.5;
    u_xlat16_1 = exp2(u_xlat16_1);
    u_xlatb15 = u_xlat2.x>=u_xlat2.y;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat2.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.yz * vec2(u_xlat19) + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat15) * u_xlat5 + u_xlat4;
    u_xlatb7 = u_xlat2.w>=u_xlat4.x;
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat2.wyx;
    u_xlat4 = (-u_xlat2) + u_xlat4;
    u_xlat2 = u_xlat7.xxxx * u_xlat4 + u_xlat2;
    u_xlat7.x = min(u_xlat2.y, u_xlat2.w);
    u_xlat7.x = (-u_xlat7.x) + u_xlat2.x;
    u_xlat13 = (-u_xlat2.y) + u_xlat2.w;
    u_xlat19 = u_xlat7.x * 6.0 + 1.00000001e-010;
    u_xlat13 = u_xlat13 / u_xlat19;
    u_xlat13 = u_xlat13 + u_xlat2.z;
    u_xlat19 = u_xlat2.x + 1.00000001e-010;
    u_xlat7.x = u_xlat7.x / u_xlat19;
    u_xlat1.x = (-u_xlat16_1) * 2.0 + u_xlat2.x;
    u_xlat19 = dot(u_xlat3.xy, vec2(12.9898005, 78.2330017));
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 * 43758.5469;
    u_xlat19 = fract(u_xlat19);
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat2.x = u_xlat3.y + u_xlat3.x;
    u_xlat8 = u_xlat2.x + (-_Time.z);
    u_xlat8 = sin(u_xlat8);
    u_xlat8 = u_xlat8 + 1.0;
    u_xlat8 = u_xlat8 * 0.5;
    u_xlat14 = u_xlat2.x + _Time.z;
    u_xlat14 = sin(u_xlat14);
    u_xlat14 = u_xlat14 * 0.099999994 + 0.150000006;
    u_xlat8 = u_xlat8 * u_xlat14 + 0.349999994;
    u_xlat2.x = u_xlat2.x * 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlatb2 = 0.25<u_xlat2.x;
    u_xlat1.x = u_xlat1.x / _StepValue;
    u_xlat14 = (-u_xlat8) + u_xlat1.x;
    u_xlat14 = (-u_xlat19) * _DitherCohesionFactor + u_xlat14;
    u_xlat14 = ceil(u_xlat14);
    u_xlat14 = u_xlat14 * _StepValue;
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat19 * _DitherCohesionFactor + u_xlat1.x;
    u_xlat1.x = roundEven(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _StepValue;
    u_xlat1.x = (u_xlatb2) ? u_xlat14 : u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat2.xyz = abs(vec3(u_xlat13)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat2.xyz = fract(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat2.xyz = abs(u_xlat2.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat19 = u_xlat0.x + -0.00999999978;
    u_xlat19 = u_xlat19 * 1000.0;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(0.5, 0.5, 0.5) + vec3(0.0299999993, 0.0, 0.0700000003);
    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
    u_xlat19 = u_xlat0.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb19){
        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat19 = u_xlat2.y * 0.25 + 0.75;
        u_xlat8 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat19, u_xlat8);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat19 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 340
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %150 %156 %157 %170 %209 %212 %330 %333 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %209 Location 209 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %330 Location 330 
                                                      OpDecorate %333 Location 333 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 5 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 7 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                                             %100 = OpTypeVector %6 2 
                                         f32 %144 = OpConstant 3.674022E-40 
                                       f32_2 %145 = OpConstantComposite %144 %144 
                                             %149 = OpTypePointer Output %100 
                               Output f32_2* %150 = OpVariable Output 
                                         f32 %153 = OpConstant 3.674022E-40 
                                       f32_2 %154 = OpConstantComposite %153 %153 
                               Output f32_2* %156 = OpVariable Output 
                                Input f32_4* %157 = OpVariable Input 
                                         i32 %160 = OpConstant 8 
                                             %169 = OpTypePointer Input %53 
                                Input f32_3* %170 = OpVariable Input 
                                         i32 %172 = OpConstant 6 
                                         u32 %177 = OpConstant 0 
                                             %178 = OpTypePointer Private %6 
                                         u32 %191 = OpConstant 2 
                                Private f32* %193 = OpVariable Private 
                                             %208 = OpTypePointer Output %53 
                               Output f32_3* %209 = OpVariable Output 
                               Output f32_3* %212 = OpVariable Output 
                              Private f32_4* %221 = OpVariable Private 
                              Private f32_4* %229 = OpVariable Private 
                                         f32 %265 = OpConstant 3.674022E-40 
                                       f32_4 %266 = OpConstantComposite %265 %265 %265 %265 
                                       f32_4 %274 = OpConstantComposite %144 %144 %144 %144 
                                         f32 %282 = OpConstant 3.674022E-40 
                                       f32_4 %283 = OpConstantComposite %282 %282 %282 %282 
                                         i32 %290 = OpConstant 4 
                               Output f32_3* %330 = OpVariable Output 
                               Output f32_4* %333 = OpVariable Output 
                                             %334 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %101 = OpLoad %47 
                                       f32_2 %102 = OpVectorShuffle %101 %101 1 1 
                              Uniform f32_4* %103 = OpAccessChain %23 %68 %26 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %102 %105 
                                       f32_4 %107 = OpLoad %65 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 2 3 
                                                      OpStore %65 %108 
                              Uniform f32_4* %109 = OpAccessChain %23 %68 %31 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_4 %112 = OpLoad %47 
                                       f32_2 %113 = OpVectorShuffle %112 %112 0 0 
                                       f32_2 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %65 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_2 %117 = OpFAdd %114 %116 
                                       f32_4 %118 = OpLoad %47 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 3 
                                                      OpStore %47 %119 
                              Uniform f32_4* %120 = OpAccessChain %23 %68 %39 
                                       f32_4 %121 = OpLoad %120 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_4 %123 = OpLoad %47 
                                       f32_2 %124 = OpVectorShuffle %123 %123 2 2 
                                       f32_2 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %47 
                                       f32_2 %127 = OpVectorShuffle %126 %126 0 1 
                                       f32_2 %128 = OpFAdd %125 %127 
                                       f32_4 %129 = OpLoad %47 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 2 3 
                                                      OpStore %47 %130 
                              Uniform f32_4* %131 = OpAccessChain %23 %68 %49 
                                       f32_4 %132 = OpLoad %131 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_4 %134 = OpLoad %47 
                                       f32_2 %135 = OpVectorShuffle %134 %134 3 3 
                                       f32_2 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %47 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFAdd %136 %138 
                                       f32_4 %140 = OpLoad %47 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 2 3 
                                                      OpStore %47 %141 
                                       f32_4 %142 = OpLoad %47 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                                       f32_2 %146 = OpFAdd %143 %145 
                                       f32_4 %147 = OpLoad %47 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 2 3 
                                                      OpStore %47 %148 
                                       f32_4 %151 = OpLoad %47 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %155 = OpFMul %152 %154 
                                                      OpStore %150 %155 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                              Uniform f32_4* %161 = OpAccessChain %23 %160 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 0 1 
                                       f32_2 %164 = OpFMul %159 %163 
                              Uniform f32_4* %165 = OpAccessChain %23 %160 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 2 3 
                                       f32_2 %168 = OpFAdd %164 %167 
                                                      OpStore %156 %168 
                                       f32_3 %171 = OpLoad %170 
                              Uniform f32_4* %173 = OpAccessChain %23 %172 %31 
                                       f32_4 %174 = OpLoad %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                         f32 %176 = OpDot %171 %175 
                                Private f32* %179 = OpAccessChain %47 %177 
                                                      OpStore %179 %176 
                                       f32_3 %180 = OpLoad %170 
                              Uniform f32_4* %181 = OpAccessChain %23 %172 %26 
                                       f32_4 %182 = OpLoad %181 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %180 %183 
                                Private f32* %185 = OpAccessChain %47 %86 
                                                      OpStore %185 %184 
                                       f32_3 %186 = OpLoad %170 
                              Uniform f32_4* %187 = OpAccessChain %23 %172 %39 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %186 %189 
                                Private f32* %192 = OpAccessChain %47 %191 
                                                      OpStore %192 %190 
                                       f32_4 %194 = OpLoad %47 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_4 %196 = OpLoad %47 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                         f32 %198 = OpDot %195 %197 
                                                      OpStore %193 %198 
                                         f32 %199 = OpLoad %193 
                                         f32 %200 = OpExtInst %1 32 %199 
                                                      OpStore %193 %200 
                                         f32 %201 = OpLoad %193 
                                       f32_3 %202 = OpCompositeConstruct %201 %201 %201 
                                       f32_4 %203 = OpLoad %47 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %47 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %47 %207 
                                       f32_4 %210 = OpLoad %47 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                                      OpStore %209 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                                      OpStore %212 %214 
                                       f32_4 %215 = OpLoad %9 
                                       f32_4 %216 = OpVectorShuffle %215 %215 1 1 1 1 
                                       f32_4 %217 = OpFNegate %216 
                              Uniform f32_4* %218 = OpAccessChain %23 %26 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpFAdd %217 %219 
                                                      OpStore %65 %220 
                                       f32_4 %222 = OpLoad %47 
                                       f32_4 %223 = OpVectorShuffle %222 %222 1 1 1 1 
                                       f32_4 %224 = OpLoad %65 
                                       f32_4 %225 = OpFMul %223 %224 
                                                      OpStore %221 %225 
                                       f32_4 %226 = OpLoad %65 
                                       f32_4 %227 = OpLoad %65 
                                       f32_4 %228 = OpFMul %226 %227 
                                                      OpStore %65 %228 
                                       f32_4 %230 = OpLoad %9 
                                       f32_4 %231 = OpVectorShuffle %230 %230 0 0 0 0 
                                       f32_4 %232 = OpFNegate %231 
                              Uniform f32_4* %233 = OpAccessChain %23 %31 
                                       f32_4 %234 = OpLoad %233 
                                       f32_4 %235 = OpFAdd %232 %234 
                                                      OpStore %229 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_4 %237 = OpVectorShuffle %236 %236 2 2 2 2 
                                       f32_4 %238 = OpFNegate %237 
                              Uniform f32_4* %239 = OpAccessChain %23 %39 
                                       f32_4 %240 = OpLoad %239 
                                       f32_4 %241 = OpFAdd %238 %240 
                                                      OpStore %9 %241 
                                       f32_4 %242 = OpLoad %229 
                                       f32_4 %243 = OpLoad %47 
                                       f32_4 %244 = OpVectorShuffle %243 %243 0 0 0 0 
                                       f32_4 %245 = OpFMul %242 %244 
                                       f32_4 %246 = OpLoad %221 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %221 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_4 %249 = OpLoad %47 
                                       f32_4 %250 = OpVectorShuffle %249 %249 2 2 2 2 
                                       f32_4 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %221 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %47 %253 
                                       f32_4 %254 = OpLoad %229 
                                       f32_4 %255 = OpLoad %229 
                                       f32_4 %256 = OpFMul %254 %255 
                                       f32_4 %257 = OpLoad %65 
                                       f32_4 %258 = OpFAdd %256 %257 
                                                      OpStore %65 %258 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpLoad %9 
                                       f32_4 %261 = OpFMul %259 %260 
                                       f32_4 %262 = OpLoad %65 
                                       f32_4 %263 = OpFAdd %261 %262 
                                                      OpStore %9 %263 
                                       f32_4 %264 = OpLoad %9 
                                       f32_4 %267 = OpExtInst %1 40 %264 %266 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_4 %269 = OpExtInst %1 32 %268 
                                                      OpStore %65 %269 
                                       f32_4 %270 = OpLoad %9 
                              Uniform f32_4* %271 = OpAccessChain %23 %49 
                                       f32_4 %272 = OpLoad %271 
                                       f32_4 %273 = OpFMul %270 %272 
                                       f32_4 %275 = OpFAdd %273 %274 
                                                      OpStore %9 %275 
                                       f32_4 %276 = OpLoad %9 
                                       f32_4 %277 = OpFDiv %274 %276 
                                                      OpStore %9 %277 
                                       f32_4 %278 = OpLoad %47 
                                       f32_4 %279 = OpLoad %65 
                                       f32_4 %280 = OpFMul %278 %279 
                                                      OpStore %47 %280 
                                       f32_4 %281 = OpLoad %47 
                                       f32_4 %284 = OpExtInst %1 40 %281 %283 
                                                      OpStore %47 %284 
                                       f32_4 %285 = OpLoad %9 
                                       f32_4 %286 = OpLoad %47 
                                       f32_4 %287 = OpFMul %285 %286 
                                                      OpStore %9 %287 
                                       f32_4 %288 = OpLoad %9 
                                       f32_3 %289 = OpVectorShuffle %288 %288 1 1 1 
                              Uniform f32_4* %291 = OpAccessChain %23 %290 %26 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpFMul %289 %293 
                                       f32_4 %295 = OpLoad %47 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %47 %296 
                              Uniform f32_4* %297 = OpAccessChain %23 %290 %31 
                                       f32_4 %298 = OpLoad %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_4 %300 = OpLoad %9 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 0 0 
                                       f32_3 %302 = OpFMul %299 %301 
                                       f32_4 %303 = OpLoad %47 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_3 %305 = OpFAdd %302 %304 
                                       f32_4 %306 = OpLoad %47 
                                       f32_4 %307 = OpVectorShuffle %306 %305 4 5 6 3 
                                                      OpStore %47 %307 
                              Uniform f32_4* %308 = OpAccessChain %23 %290 %39 
                                       f32_4 %309 = OpLoad %308 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_4 %311 = OpLoad %9 
                                       f32_3 %312 = OpVectorShuffle %311 %311 2 2 2 
                                       f32_3 %313 = OpFMul %310 %312 
                                       f32_4 %314 = OpLoad %47 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                       f32_3 %316 = OpFAdd %313 %315 
                                       f32_4 %317 = OpLoad %9 
                                       f32_4 %318 = OpVectorShuffle %317 %316 4 5 6 3 
                                                      OpStore %9 %318 
                              Uniform f32_4* %319 = OpAccessChain %23 %290 %49 
                                       f32_4 %320 = OpLoad %319 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
                                       f32_4 %322 = OpLoad %9 
                                       f32_3 %323 = OpVectorShuffle %322 %322 3 3 3 
                                       f32_3 %324 = OpFMul %321 %323 
                                       f32_4 %325 = OpLoad %9 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_3 %327 = OpFAdd %324 %326 
                                       f32_4 %328 = OpLoad %9 
                                       f32_4 %329 = OpVectorShuffle %328 %327 4 5 6 3 
                                                      OpStore %9 %329 
                                       f32_4 %331 = OpLoad %9 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 2 
                                                      OpStore %330 %332 
                                                      OpStore %333 %283 
                                 Output f32* %335 = OpAccessChain %90 %31 %86 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpFNegate %336 
                                 Output f32* %338 = OpAccessChain %90 %31 %86 
                                                      OpStore %338 %337 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 696
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %21 %140 %682 %684 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 Location 21 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 RelaxedPrecision 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 RelaxedPrecision 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpMemberDecorate %36 7 Offset 36 
                                                      OpMemberDecorate %36 8 Offset 36 
                                                      OpMemberDecorate %36 9 Offset 36 
                                                      OpMemberDecorate %36 10 Offset 36 
                                                      OpMemberDecorate %36 11 Offset 36 
                                                      OpMemberDecorate %36 12 Offset 36 
                                                      OpMemberDecorate %36 13 Offset 36 
                                                      OpMemberDecorate %36 14 Offset 36 
                                                      OpMemberDecorate %36 15 RelaxedPrecision 
                                                      OpMemberDecorate %36 15 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %164 DescriptorSet 164 
                                                      OpDecorate %164 Binding 164 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %540 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %542 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %567 SpecId 567 
                                                      OpDecorate %650 DescriptorSet 650 
                                                      OpDecorate %650 Binding 650 
                                                      OpDecorate %661 RelaxedPrecision 
                                                      OpDecorate %663 RelaxedPrecision 
                                                      OpDecorate %664 RelaxedPrecision 
                                                      OpDecorate %667 RelaxedPrecision 
                                                      OpDecorate %668 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %677 RelaxedPrecision 
                                                      OpDecorate %678 RelaxedPrecision 
                                                      OpDecorate %679 RelaxedPrecision 
                                                      OpDecorate %680 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %682 Location 682 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %684 Location 684 
                                                      OpDecorate %685 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %692 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                 Input f32_2* %21 = OpVariable Input 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Input %6 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          u32 %33 = OpConstant 4 
                                              %34 = OpTypeArray %7 %33 
                                              %35 = OpTypeVector %6 3 
                                              %36 = OpTypeStruct %7 %7 %7 %34 %35 %35 %7 %7 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 10 
                                              %41 = OpTypePointer Uniform %6 
                                              %50 = OpTypePointer Private %35 
                               Private f32_3* %51 = OpVariable Private 
                                          i32 %60 = OpConstant 9 
                                              %68 = OpTypeBool 
                                              %69 = OpTypePointer Private %68 
                                Private bool* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                              %75 = OpTypePointer Function %6 
                                          f32 %80 = OpConstant 3.674022E-40 
                                          i32 %88 = OpConstant 7 
                                              %89 = OpTypePointer Uniform %7 
                                 Private f32* %96 = OpVariable Private 
                                          i32 %99 = OpConstant 13 
                                         f32 %104 = OpConstant 3.674022E-40 
                                         f32 %109 = OpConstant 3.674022E-40 
                              Private f32_4* %111 = OpVariable Private 
                                         i32 %112 = OpConstant 12 
                                         i32 %125 = OpConstant 11 
                              Private f32_3* %138 = OpVariable Private 
                                             %139 = OpTypePointer Input %35 
                                Input f32_3* %140 = OpVariable Input 
                                         f32 %143 = OpConstant 3.674022E-40 
                                         f32 %144 = OpConstant 3.674022E-40 
                                       f32_3 %145 = OpConstantComposite %143 %143 %144 
                              Private f32_4* %147 = OpVariable Private 
                                         i32 %148 = OpConstant 0 
                                         f32 %152 = OpConstant 3.674022E-40 
                                         u32 %154 = OpConstant 2 
                                Private f32* %163 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %164 = OpVariable UniformConstant 
                              Private f32_4* %170 = OpVariable Private 
                                         f32 %176 = OpConstant 3.674022E-40 
                               Private bool* %183 = OpVariable Private 
                                Private f32* %189 = OpVariable Private 
                                         f32 %201 = OpConstant 3.674022E-40 
                                         u32 %202 = OpConstant 3 
                              Private f32_4* %204 = OpVariable Private 
                                Private f32* %267 = OpVariable Private 
                                         f32 %276 = OpConstant 3.674022E-40 
                                         f32 %278 = OpConstant 3.674022E-40 
                                         f32 %298 = OpConstant 3.674022E-40 
                                         f32 %306 = OpConstant 3.674022E-40 
                                         f32 %307 = OpConstant 3.674022E-40 
                                       f32_2 %308 = OpConstantComposite %306 %307 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                                Private f32* %326 = OpVariable Private 
                                         f32 %338 = OpConstant 3.674022E-40 
                                Private f32* %340 = OpVariable Private 
                                         f32 %349 = OpConstant 3.674022E-40 
                                         f32 %351 = OpConstant 3.674022E-40 
                                         f32 %356 = OpConstant 3.674022E-40 
                               Private bool* %366 = OpVariable Private 
                                         f32 %367 = OpConstant 3.674022E-40 
                                         i32 %373 = OpConstant 8 
                                         i32 %385 = OpConstant 14 
                                       f32_3 %437 = OpConstantComposite %109 %201 %152 
                                       f32_3 %448 = OpConstantComposite %276 %276 %276 
                                         f32 %450 = OpConstant 3.674022E-40 
                                       f32_3 %451 = OpConstantComposite %450 %450 %450 
                                       f32_3 %458 = OpConstantComposite %80 %80 %80 
                                       f32_3 %479 = OpConstantComposite %109 %109 %109 
                                       f32_3 %489 = OpConstantComposite %338 %338 %338 
                              Private f32_3* %493 = OpVariable Private 
                                         f32 %496 = OpConstant 3.674022E-40 
                                         f32 %501 = OpConstant 3.674022E-40 
                                         f32 %512 = OpConstant 3.674022E-40 
                                         f32 %513 = OpConstant 3.674022E-40 
                                       f32_3 %514 = OpConstantComposite %512 %73 %513 
                              Private f32_3* %528 = OpVariable Private 
                                       f32_3 %531 = OpConstantComposite %298 %298 %298 
                                         i32 %538 = OpConstant 15 
                               Private bool* %544 = OpVariable Private 
                                         i32 %549 = OpConstant 1 
                                         i32 %551 = OpConstant -1 
                                         i32 %557 = OpConstant 2 
                                        bool %561 = OpConstantFalse 
                                        bool %567 = OpSpecConstantFalse 
                                         i32 %575 = OpConstant 3 
                                             %601 = OpTypePointer Function %35 
                                         i32 %614 = OpConstant 5 
                                             %615 = OpTypePointer Uniform %35 
                                         i32 %624 = OpConstant 4 
                                         f32 %633 = OpConstant 3.674022E-40 
                                             %647 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %648 = OpTypeSampledImage %647 
                                             %649 = OpTypePointer UniformConstant %648 
 UniformConstant read_only Texture3DSampled* %650 = OpVariable UniformConstant 
                              Private f32_3* %670 = OpVariable Private 
                                         i32 %672 = OpConstant 6 
                                             %681 = OpTypePointer Output %7 
                               Output f32_4* %682 = OpVariable Output 
                                Input f32_3* %684 = OpVariable Input 
                                             %693 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %76 = OpVariable Function 
                               Function f32* %190 = OpVariable Function 
                               Function f32* %229 = OpVariable Function 
                               Function f32* %420 = OpVariable Function 
                             Function f32_3* %602 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                   Input f32* %25 = OpAccessChain %21 %23 
                                          f32 %26 = OpLoad %25 
                                          f32 %27 = OpExtInst %1 30 %26 
                                 Private f32* %30 = OpAccessChain %20 %28 
                                                      OpStore %30 %27 
                                 Private f32* %31 = OpAccessChain %20 %28 
                                          f32 %32 = OpLoad %31 
                                 Uniform f32* %42 = OpAccessChain %38 %40 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %32 %43 
                                 Private f32* %45 = OpAccessChain %20 %28 
                                                      OpStore %45 %44 
                                 Private f32* %46 = OpAccessChain %20 %28 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpExtInst %1 29 %47 
                                 Private f32* %49 = OpAccessChain %20 %28 
                                                      OpStore %49 %48 
                                   Input f32* %52 = OpAccessChain %21 %23 
                                          f32 %53 = OpLoad %52 
                                   Input f32* %54 = OpAccessChain %21 %23 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFMul %53 %55 
                                 Private f32* %57 = OpAccessChain %51 %28 
                                                      OpStore %57 %56 
                                 Private f32* %58 = OpAccessChain %51 %28 
                                          f32 %59 = OpLoad %58 
                                 Uniform f32* %61 = OpAccessChain %38 %60 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %59 %62 
                                 Private f32* %64 = OpAccessChain %20 %28 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %63 %65 
                                 Private f32* %67 = OpAccessChain %20 %28 
                                                      OpStore %67 %66 
                                 Private f32* %71 = OpAccessChain %20 %28 
                                          f32 %72 = OpLoad %71 
                                         bool %74 = OpFOrdLessThan %72 %73 
                                                      OpStore %70 %74 
                                         bool %77 = OpLoad %70 
                                                      OpSelectionMerge %79 None 
                                                      OpBranchConditional %77 %78 %81 
                                              %78 = OpLabel 
                                                      OpStore %76 %80 
                                                      OpBranch %79 
                                              %81 = OpLabel 
                                 Private f32* %82 = OpAccessChain %20 %28 
                                          f32 %83 = OpLoad %82 
                                                      OpStore %76 %83 
                                                      OpBranch %79 
                                              %79 = OpLabel 
                                          f32 %84 = OpLoad %76 
                                 Private f32* %85 = OpAccessChain %20 %28 
                                                      OpStore %85 %84 
                                        f32_4 %86 = OpLoad %20 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 0 0 
                               Uniform f32_4* %90 = OpAccessChain %38 %88 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                        f32_4 %94 = OpLoad %20 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %20 %95 
                                   Input f32* %97 = OpAccessChain %21 %28 
                                          f32 %98 = OpLoad %97 
                                Uniform f32* %100 = OpAccessChain %38 %99 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFMul %98 %101 
                                                      OpStore %96 %102 
                                         f32 %103 = OpLoad %96 
                                         f32 %105 = OpFMul %103 %104 
                                                      OpStore %96 %105 
                                         f32 %106 = OpLoad %96 
                                         f32 %107 = OpExtInst %1 13 %106 
                                                      OpStore %96 %107 
                                         f32 %108 = OpLoad %96 
                                         f32 %110 = OpFAdd %108 %109 
                                                      OpStore %96 %110 
                                Uniform f32* %113 = OpAccessChain %38 %112 
                                         f32 %114 = OpLoad %113 
                                Uniform f32* %115 = OpAccessChain %38 %112 
                                         f32 %116 = OpLoad %115 
                                         f32 %117 = OpFAdd %114 %116 
                                Private f32* %118 = OpAccessChain %111 %28 
                                                      OpStore %118 %117 
                                         f32 %119 = OpLoad %96 
                                Private f32* %120 = OpAccessChain %111 %28 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFDiv %119 %121 
                                                      OpStore %96 %122 
                                         f32 %123 = OpLoad %96 
                                         f32 %124 = OpFAdd %123 %80 
                                                      OpStore %96 %124 
                                Uniform f32* %126 = OpAccessChain %38 %125 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpLoad %96 
                                         f32 %129 = OpFMul %127 %128 
                                         f32 %130 = OpFAdd %129 %109 
                                                      OpStore %96 %130 
                                         f32 %131 = OpLoad %96 
                                       f32_3 %132 = OpCompositeConstruct %131 %131 %131 
                                       f32_4 %133 = OpLoad %20 
                                       f32_3 %134 = OpVectorShuffle %133 %133 1 2 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %111 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 6 
                                                      OpStore %111 %137 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %138 %146 
                                Uniform f32* %149 = OpAccessChain %38 %148 %28 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFNegate %150 
                                         f32 %153 = OpFMul %151 %152 
                                Private f32* %155 = OpAccessChain %138 %154 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFAdd %153 %156 
                                Private f32* %158 = OpAccessChain %147 %23 
                                                      OpStore %158 %157 
                                  Input f32* %159 = OpAccessChain %140 %28 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %160 %144 
                                Private f32* %162 = OpAccessChain %147 %28 
                                                      OpStore %162 %161 
                  read_only Texture2DSampled %165 = OpLoad %164 
                                       f32_4 %166 = OpLoad %147 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_4 %168 = OpImageSampleImplicitLod %165 %167 
                                         f32 %169 = OpCompositeExtract %168 0 
                                                      OpStore %163 %169 
                                         f32 %171 = OpLoad %163 
                                         f32 %172 = OpExtInst %1 30 %171 
                                Private f32* %173 = OpAccessChain %170 %28 
                                                      OpStore %173 %172 
                                Private f32* %174 = OpAccessChain %170 %28 
                                         f32 %175 = OpLoad %174 
                                         f32 %177 = OpFMul %175 %176 
                                Private f32* %178 = OpAccessChain %170 %28 
                                                      OpStore %178 %177 
                                Private f32* %179 = OpAccessChain %170 %28 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpExtInst %1 29 %180 
                                Private f32* %182 = OpAccessChain %170 %28 
                                                      OpStore %182 %181 
                                Private f32* %184 = OpAccessChain %111 %28 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %111 %23 
                                         f32 %187 = OpLoad %186 
                                        bool %188 = OpFOrdGreaterThanEqual %185 %187 
                                                      OpStore %183 %188 
                                        bool %191 = OpLoad %183 
                                                      OpSelectionMerge %193 None 
                                                      OpBranchConditional %191 %192 %194 
                                             %192 = OpLabel 
                                                      OpStore %190 %109 
                                                      OpBranch %193 
                                             %194 = OpLabel 
                                                      OpStore %190 %73 
                                                      OpBranch %193 
                                             %193 = OpLabel 
                                         f32 %195 = OpLoad %190 
                                                      OpStore %189 %195 
                                       f32_4 %196 = OpLoad %111 
                                       f32_2 %197 = OpVectorShuffle %196 %196 1 0 
                                       f32_4 %198 = OpLoad %147 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 3 
                                                      OpStore %147 %199 
                                Private f32* %200 = OpAccessChain %147 %154 
                                                      OpStore %200 %80 
                                Private f32* %203 = OpAccessChain %147 %202 
                                                      OpStore %203 %201 
                                       f32_4 %205 = OpLoad %20 
                                       f32_2 %206 = OpVectorShuffle %205 %205 1 2 
                                         f32 %207 = OpLoad %96 
                                       f32_2 %208 = OpCompositeConstruct %207 %207 
                                       f32_2 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %147 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 1 
                                       f32_2 %212 = OpFNegate %211 
                                       f32_2 %213 = OpFAdd %209 %212 
                                       f32_4 %214 = OpLoad %204 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %204 %215 
                                Private f32* %216 = OpAccessChain %204 %154 
                                                      OpStore %216 %109 
                                Private f32* %217 = OpAccessChain %204 %202 
                                                      OpStore %217 %80 
                                         f32 %218 = OpLoad %189 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                       f32_4 %220 = OpLoad %204 
                                       f32_4 %221 = OpFMul %219 %220 
                                       f32_4 %222 = OpLoad %147 
                                       f32_4 %223 = OpFAdd %221 %222 
                                                      OpStore %147 %223 
                                Private f32* %224 = OpAccessChain %111 %202 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %147 %28 
                                         f32 %227 = OpLoad %226 
                                        bool %228 = OpFOrdGreaterThanEqual %225 %227 
                                                      OpStore %70 %228 
                                        bool %230 = OpLoad %70 
                                                      OpSelectionMerge %232 None 
                                                      OpBranchConditional %230 %231 %233 
                                             %231 = OpLabel 
                                                      OpStore %229 %109 
                                                      OpBranch %232 
                                             %233 = OpLabel 
                                                      OpStore %229 %73 
                                                      OpBranch %232 
                                             %232 = OpLabel 
                                         f32 %234 = OpLoad %229 
                                Private f32* %235 = OpAccessChain %51 %28 
                                                      OpStore %235 %234 
                                       f32_4 %236 = OpLoad %147 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 3 
                                       f32_4 %238 = OpLoad %111 
                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 6 3 
                                                      OpStore %111 %239 
                                       f32_4 %240 = OpLoad %111 
                                       f32_3 %241 = OpVectorShuffle %240 %240 3 1 0 
                                       f32_4 %242 = OpLoad %147 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 2 6 
                                                      OpStore %147 %243 
                                       f32_4 %244 = OpLoad %111 
                                       f32_4 %245 = OpFNegate %244 
                                       f32_4 %246 = OpLoad %147 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %147 %247 
                                       f32_3 %248 = OpLoad %51 
                                       f32_4 %249 = OpVectorShuffle %248 %248 0 0 0 0 
                                       f32_4 %250 = OpLoad %147 
                                       f32_4 %251 = OpFMul %249 %250 
                                       f32_4 %252 = OpLoad %111 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %111 %253 
                                Private f32* %254 = OpAccessChain %111 %23 
                                         f32 %255 = OpLoad %254 
                                Private f32* %256 = OpAccessChain %111 %202 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpExtInst %1 37 %255 %257 
                                Private f32* %259 = OpAccessChain %51 %28 
                                                      OpStore %259 %258 
                                Private f32* %260 = OpAccessChain %51 %28 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpFNegate %261 
                                Private f32* %263 = OpAccessChain %111 %28 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %51 %28 
                                                      OpStore %266 %265 
                                Private f32* %268 = OpAccessChain %111 %23 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                Private f32* %271 = OpAccessChain %111 %202 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpFAdd %270 %272 
                                                      OpStore %267 %273 
                                Private f32* %274 = OpAccessChain %51 %28 
                                         f32 %275 = OpLoad %274 
                                         f32 %277 = OpFMul %275 %276 
                                         f32 %279 = OpFAdd %277 %278 
                                                      OpStore %96 %279 
                                         f32 %280 = OpLoad %267 
                                         f32 %281 = OpLoad %96 
                                         f32 %282 = OpFDiv %280 %281 
                                                      OpStore %267 %282 
                                         f32 %283 = OpLoad %267 
                                Private f32* %284 = OpAccessChain %111 %154 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpFAdd %283 %285 
                                                      OpStore %267 %286 
                                Private f32* %287 = OpAccessChain %111 %28 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFAdd %288 %278 
                                                      OpStore %96 %289 
                                Private f32* %290 = OpAccessChain %51 %28 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpLoad %96 
                                         f32 %293 = OpFDiv %291 %292 
                                Private f32* %294 = OpAccessChain %51 %28 
                                                      OpStore %294 %293 
                                Private f32* %295 = OpAccessChain %170 %28 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpFNegate %296 
                                         f32 %299 = OpFMul %297 %298 
                                Private f32* %300 = OpAccessChain %111 %28 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                Private f32* %303 = OpAccessChain %20 %28 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %138 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                         f32 %309 = OpDot %305 %308 
                                                      OpStore %96 %309 
                                         f32 %310 = OpLoad %96 
                                         f32 %311 = OpExtInst %1 13 %310 
                                                      OpStore %96 %311 
                                         f32 %312 = OpLoad %96 
                                         f32 %314 = OpFMul %312 %313 
                                                      OpStore %96 %314 
                                         f32 %315 = OpLoad %96 
                                         f32 %316 = OpExtInst %1 10 %315 
                                                      OpStore %96 %316 
                                         f32 %317 = OpLoad %96 
                                         f32 %319 = OpFAdd %317 %318 
                                                      OpStore %96 %319 
                                Private f32* %320 = OpAccessChain %138 %23 
                                         f32 %321 = OpLoad %320 
                                Private f32* %322 = OpAccessChain %138 %28 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFAdd %321 %323 
                                Private f32* %325 = OpAccessChain %111 %28 
                                                      OpStore %325 %324 
                                Private f32* %327 = OpAccessChain %111 %28 
                                         f32 %328 = OpLoad %327 
                                Uniform f32* %329 = OpAccessChain %38 %148 %154 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFNegate %330 
                                         f32 %332 = OpFAdd %328 %331 
                                                      OpStore %326 %332 
                                         f32 %333 = OpLoad %326 
                                         f32 %334 = OpExtInst %1 13 %333 
                                                      OpStore %326 %334 
                                         f32 %335 = OpLoad %326 
                                         f32 %336 = OpFAdd %335 %109 
                                                      OpStore %326 %336 
                                         f32 %337 = OpLoad %326 
                                         f32 %339 = OpFMul %337 %338 
                                                      OpStore %326 %339 
                                Private f32* %341 = OpAccessChain %111 %28 
                                         f32 %342 = OpLoad %341 
                                Uniform f32* %343 = OpAccessChain %38 %148 %154 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFAdd %342 %344 
                                                      OpStore %340 %345 
                                         f32 %346 = OpLoad %340 
                                         f32 %347 = OpExtInst %1 13 %346 
                                                      OpStore %340 %347 
                                         f32 %348 = OpLoad %340 
                                         f32 %350 = OpFMul %348 %349 
                                         f32 %352 = OpFAdd %350 %351 
                                                      OpStore %340 %352 
                                         f32 %353 = OpLoad %326 
                                         f32 %354 = OpLoad %340 
                                         f32 %355 = OpFMul %353 %354 
                                         f32 %357 = OpFAdd %355 %356 
                                                      OpStore %326 %357 
                                Private f32* %358 = OpAccessChain %111 %28 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFMul %359 %338 
                                Private f32* %361 = OpAccessChain %111 %28 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %111 %28 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpExtInst %1 10 %363 
                                Private f32* %365 = OpAccessChain %111 %28 
                                                      OpStore %365 %364 
                                Private f32* %368 = OpAccessChain %111 %28 
                                         f32 %369 = OpLoad %368 
                                        bool %370 = OpFOrdLessThan %367 %369 
                                                      OpStore %366 %370 
                                Private f32* %371 = OpAccessChain %20 %28 
                                         f32 %372 = OpLoad %371 
                                Uniform f32* %374 = OpAccessChain %38 %373 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpFDiv %372 %375 
                                Private f32* %377 = OpAccessChain %20 %28 
                                                      OpStore %377 %376 
                                         f32 %378 = OpLoad %326 
                                         f32 %379 = OpFNegate %378 
                                Private f32* %380 = OpAccessChain %20 %28 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFAdd %379 %381 
                                                      OpStore %340 %382 
                                         f32 %383 = OpLoad %96 
                                         f32 %384 = OpFNegate %383 
                                Uniform f32* %386 = OpAccessChain %38 %385 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpFMul %384 %387 
                                         f32 %389 = OpLoad %340 
                                         f32 %390 = OpFAdd %388 %389 
                                                      OpStore %340 %390 
                                         f32 %391 = OpLoad %340 
                                         f32 %392 = OpExtInst %1 9 %391 
                                                      OpStore %340 %392 
                                         f32 %393 = OpLoad %340 
                                Uniform f32* %394 = OpAccessChain %38 %373 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %340 %396 
                                         f32 %397 = OpLoad %326 
                                Private f32* %398 = OpAccessChain %20 %28 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFAdd %397 %399 
                                Private f32* %401 = OpAccessChain %20 %28 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %96 
                                Uniform f32* %403 = OpAccessChain %38 %385 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFMul %402 %404 
                                Private f32* %406 = OpAccessChain %20 %28 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpFAdd %405 %407 
                                Private f32* %409 = OpAccessChain %20 %28 
                                                      OpStore %409 %408 
                                Private f32* %410 = OpAccessChain %20 %28 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpExtInst %1 2 %411 
                                Private f32* %413 = OpAccessChain %20 %28 
                                                      OpStore %413 %412 
                                Private f32* %414 = OpAccessChain %20 %28 
                                         f32 %415 = OpLoad %414 
                                Uniform f32* %416 = OpAccessChain %38 %373 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFMul %415 %417 
                                Private f32* %419 = OpAccessChain %20 %28 
                                                      OpStore %419 %418 
                                        bool %421 = OpLoad %366 
                                                      OpSelectionMerge %423 None 
                                                      OpBranchConditional %421 %422 %425 
                                             %422 = OpLabel 
                                         f32 %424 = OpLoad %340 
                                                      OpStore %420 %424 
                                                      OpBranch %423 
                                             %425 = OpLabel 
                                Private f32* %426 = OpAccessChain %20 %28 
                                         f32 %427 = OpLoad %426 
                                                      OpStore %420 %427 
                                                      OpBranch %423 
                                             %423 = OpLabel 
                                         f32 %428 = OpLoad %420 
                                Private f32* %429 = OpAccessChain %20 %28 
                                                      OpStore %429 %428 
                                Private f32* %430 = OpAccessChain %20 %28 
                                         f32 %431 = OpLoad %430 
                                         f32 %432 = OpExtInst %1 40 %431 %73 
                                Private f32* %433 = OpAccessChain %20 %28 
                                                      OpStore %433 %432 
                                         f32 %434 = OpLoad %267 
                                       f32_3 %435 = OpCompositeConstruct %434 %434 %434 
                                       f32_3 %436 = OpExtInst %1 4 %435 
                                       f32_3 %438 = OpFAdd %436 %437 
                                       f32_4 %439 = OpLoad %111 
                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
                                                      OpStore %111 %440 
                                       f32_4 %441 = OpLoad %111 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_3 %443 = OpExtInst %1 10 %442 
                                       f32_4 %444 = OpLoad %111 
                                       f32_4 %445 = OpVectorShuffle %444 %443 4 5 6 3 
                                                      OpStore %111 %445 
                                       f32_4 %446 = OpLoad %111 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 1 2 
                                       f32_3 %449 = OpFMul %447 %448 
                                       f32_3 %452 = OpFAdd %449 %451 
                                       f32_4 %453 = OpLoad %111 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 6 3 
                                                      OpStore %111 %454 
                                       f32_4 %455 = OpLoad %111 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpExtInst %1 4 %456 
                                       f32_3 %459 = OpFAdd %457 %458 
                                       f32_4 %460 = OpLoad %111 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 6 3 
                                                      OpStore %111 %461 
                                       f32_4 %462 = OpLoad %111 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                       f32_3 %464 = OpCompositeConstruct %73 %73 %73 
                                       f32_3 %465 = OpCompositeConstruct %109 %109 %109 
                                       f32_3 %466 = OpExtInst %1 43 %463 %464 %465 
                                       f32_4 %467 = OpLoad %111 
                                       f32_4 %468 = OpVectorShuffle %467 %466 4 5 6 3 
                                                      OpStore %111 %468 
                                       f32_4 %469 = OpLoad %111 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_3 %471 = OpFAdd %470 %458 
                                       f32_4 %472 = OpLoad %111 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %111 %473 
                                       f32_3 %474 = OpLoad %51 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 0 0 
                                       f32_4 %476 = OpLoad %111 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFMul %475 %477 
                                       f32_3 %480 = OpFAdd %478 %479 
                                                      OpStore %51 %480 
                                       f32_3 %481 = OpLoad %51 
                                       f32_4 %482 = OpLoad %20 
                                       f32_3 %483 = OpVectorShuffle %482 %482 0 0 0 
                                       f32_3 %484 = OpFMul %481 %483 
                                       f32_4 %485 = OpLoad %20 
                                       f32_4 %486 = OpVectorShuffle %485 %484 4 5 6 3 
                                                      OpStore %20 %486 
                                       f32_4 %487 = OpLoad %20 
                                       f32_3 %488 = OpVectorShuffle %487 %487 0 1 2 
                                       f32_3 %490 = OpFMul %488 %489 
                                       f32_4 %491 = OpLoad %111 
                                       f32_4 %492 = OpVectorShuffle %491 %490 4 5 6 3 
                                                      OpStore %111 %492 
                                Private f32* %494 = OpAccessChain %9 %28 
                                         f32 %495 = OpLoad %494 
                                         f32 %497 = OpFAdd %495 %496 
                                Private f32* %498 = OpAccessChain %493 %28 
                                                      OpStore %498 %497 
                                Private f32* %499 = OpAccessChain %493 %28 
                                         f32 %500 = OpLoad %499 
                                         f32 %502 = OpFMul %500 %501 
                                Private f32* %503 = OpAccessChain %493 %28 
                                                      OpStore %503 %502 
                                Private f32* %504 = OpAccessChain %493 %28 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpExtInst %1 43 %505 %73 %109 
                                Private f32* %507 = OpAccessChain %493 %28 
                                                      OpStore %507 %506 
                                       f32_4 %508 = OpLoad %20 
                                       f32_3 %509 = OpVectorShuffle %508 %508 0 1 2 
                                       f32_3 %510 = OpFNegate %509 
                                       f32_3 %511 = OpFMul %510 %489 
                                       f32_3 %515 = OpFAdd %511 %514 
                                       f32_4 %516 = OpLoad %20 
                                       f32_4 %517 = OpVectorShuffle %516 %515 4 5 6 3 
                                                      OpStore %20 %517 
                                       f32_3 %518 = OpLoad %493 
                                       f32_3 %519 = OpVectorShuffle %518 %518 0 0 0 
                                       f32_4 %520 = OpLoad %20 
                                       f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
                                       f32_3 %522 = OpFMul %519 %521 
                                       f32_4 %523 = OpLoad %111 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                       f32_3 %525 = OpFAdd %522 %524 
                                       f32_4 %526 = OpLoad %20 
                                       f32_4 %527 = OpVectorShuffle %526 %525 4 5 6 3 
                                                      OpStore %20 %527 
                                       f32_4 %529 = OpLoad %9 
                                       f32_3 %530 = OpVectorShuffle %529 %529 0 1 2 
                                       f32_3 %532 = OpFMul %530 %531 
                                       f32_4 %533 = OpLoad %20 
                                       f32_3 %534 = OpVectorShuffle %533 %533 0 1 2 
                                       f32_3 %535 = OpFAdd %532 %534 
                                                      OpStore %528 %535 
                                Private f32* %536 = OpAccessChain %9 %202 
                                         f32 %537 = OpLoad %536 
                                Uniform f32* %539 = OpAccessChain %38 %538 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFNegate %540 
                                         f32 %542 = OpFAdd %537 %541 
                                Private f32* %543 = OpAccessChain %493 %28 
                                                      OpStore %543 %542 
                                Private f32* %545 = OpAccessChain %493 %28 
                                         f32 %546 = OpLoad %545 
                                        bool %547 = OpFOrdLessThan %546 %73 
                                                      OpStore %544 %547 
                                        bool %548 = OpLoad %544 
                                         i32 %550 = OpSelect %548 %549 %148 
                                         i32 %552 = OpIMul %550 %551 
                                        bool %553 = OpINotEqual %552 %148 
                                                      OpSelectionMerge %555 None 
                                                      OpBranchConditional %553 %554 %555 
                                             %554 = OpLabel 
                                                      OpKill
                                             %555 = OpLabel 
                                Uniform f32* %558 = OpAccessChain %38 %557 %28 
                                         f32 %559 = OpLoad %558 
                                        bool %560 = OpFOrdEqual %559 %109 
                                                      OpStore %544 %560 
                                                      OpSelectionMerge %563 None 
                                                      OpBranchConditional %561 %562 %563 
                                             %562 = OpLabel 
                                        bool %564 = OpLoad %544 
                                                      OpSelectionMerge %566 None 
                                                      OpBranchConditional %564 %565 %566 
                                             %565 = OpLabel 
                                                      OpBranch %566 
                                             %566 = OpLabel 
                                                      OpBranch %563 
                                             %563 = OpLabel 
                                                      OpSelectionMerge %569 None 
                                                      OpBranchConditional %567 %568 %656 
                                             %568 = OpLabel 
                                Uniform f32* %570 = OpAccessChain %38 %557 %23 
                                         f32 %571 = OpLoad %570 
                                        bool %572 = OpFOrdEqual %571 %109 
                                                      OpStore %544 %572 
                                       f32_3 %573 = OpLoad %140 
                                       f32_3 %574 = OpVectorShuffle %573 %573 1 1 1 
                              Uniform f32_4* %576 = OpAccessChain %38 %575 %549 
                                       f32_4 %577 = OpLoad %576 
                                       f32_3 %578 = OpVectorShuffle %577 %577 0 1 2 
                                       f32_3 %579 = OpFMul %574 %578 
                                                      OpStore %51 %579 
                              Uniform f32_4* %580 = OpAccessChain %38 %575 %148 
                                       f32_4 %581 = OpLoad %580 
                                       f32_3 %582 = OpVectorShuffle %581 %581 0 1 2 
                                       f32_3 %583 = OpLoad %140 
                                       f32_3 %584 = OpVectorShuffle %583 %583 0 0 0 
                                       f32_3 %585 = OpFMul %582 %584 
                                       f32_3 %586 = OpLoad %51 
                                       f32_3 %587 = OpFAdd %585 %586 
                                                      OpStore %51 %587 
                              Uniform f32_4* %588 = OpAccessChain %38 %575 %557 
                                       f32_4 %589 = OpLoad %588 
                                       f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
                                       f32_3 %591 = OpLoad %140 
                                       f32_3 %592 = OpVectorShuffle %591 %591 2 2 2 
                                       f32_3 %593 = OpFMul %590 %592 
                                       f32_3 %594 = OpLoad %51 
                                       f32_3 %595 = OpFAdd %593 %594 
                                                      OpStore %51 %595 
                                       f32_3 %596 = OpLoad %51 
                              Uniform f32_4* %597 = OpAccessChain %38 %575 %575 
                                       f32_4 %598 = OpLoad %597 
                                       f32_3 %599 = OpVectorShuffle %598 %598 0 1 2 
                                       f32_3 %600 = OpFAdd %596 %599 
                                                      OpStore %51 %600 
                                        bool %603 = OpLoad %544 
                                                      OpSelectionMerge %605 None 
                                                      OpBranchConditional %603 %604 %607 
                                             %604 = OpLabel 
                                       f32_3 %606 = OpLoad %51 
                                                      OpStore %602 %606 
                                                      OpBranch %605 
                                             %607 = OpLabel 
                                       f32_3 %608 = OpLoad %140 
                                                      OpStore %602 %608 
                                                      OpBranch %605 
                                             %605 = OpLabel 
                                       f32_3 %609 = OpLoad %602 
                                       f32_4 %610 = OpLoad %20 
                                       f32_4 %611 = OpVectorShuffle %610 %609 4 5 6 3 
                                                      OpStore %20 %611 
                                       f32_4 %612 = OpLoad %20 
                                       f32_3 %613 = OpVectorShuffle %612 %612 0 1 2 
                              Uniform f32_3* %616 = OpAccessChain %38 %614 
                                       f32_3 %617 = OpLoad %616 
                                       f32_3 %618 = OpFNegate %617 
                                       f32_3 %619 = OpFAdd %613 %618 
                                       f32_4 %620 = OpLoad %20 
                                       f32_4 %621 = OpVectorShuffle %620 %619 4 5 6 3 
                                                      OpStore %20 %621 
                                       f32_4 %622 = OpLoad %20 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                              Uniform f32_3* %625 = OpAccessChain %38 %624 
                                       f32_3 %626 = OpLoad %625 
                                       f32_3 %627 = OpFMul %623 %626 
                                       f32_4 %628 = OpLoad %20 
                                       f32_4 %629 = OpVectorShuffle %628 %627 0 4 5 6 
                                                      OpStore %20 %629 
                                Private f32* %630 = OpAccessChain %20 %23 
                                         f32 %631 = OpLoad %630 
                                         f32 %632 = OpFMul %631 %367 
                                         f32 %634 = OpFAdd %632 %633 
                                Private f32* %635 = OpAccessChain %51 %28 
                                                      OpStore %635 %634 
                                Uniform f32* %636 = OpAccessChain %38 %557 %154 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpFMul %637 %338 
                                         f32 %639 = OpFAdd %638 %633 
                                Private f32* %640 = OpAccessChain %111 %28 
                                                      OpStore %640 %639 
                                Private f32* %641 = OpAccessChain %51 %28 
                                         f32 %642 = OpLoad %641 
                                Private f32* %643 = OpAccessChain %111 %28 
                                         f32 %644 = OpLoad %643 
                                         f32 %645 = OpExtInst %1 40 %642 %644 
                                Private f32* %646 = OpAccessChain %20 %28 
                                                      OpStore %646 %645 
                  read_only Texture3DSampled %651 = OpLoad %650 
                                       f32_4 %652 = OpLoad %20 
                                       f32_3 %653 = OpVectorShuffle %652 %652 0 2 3 
                                       f32_4 %654 = OpImageSampleImplicitLod %651 %653 
                                                      OpStore %20 %654 
                                       f32_4 %655 = OpLoad %20 
                                                      OpStore %170 %655 
                                                      OpBranch %569 
                                             %656 = OpLabel 
                                Private f32* %657 = OpAccessChain %170 %28 
                                                      OpStore %657 %109 
                                Private f32* %658 = OpAccessChain %170 %23 
                                                      OpStore %658 %109 
                                Private f32* %659 = OpAccessChain %170 %154 
                                                      OpStore %659 %109 
                                Private f32* %660 = OpAccessChain %170 %202 
                                                      OpStore %660 %109 
                                                      OpBranch %569 
                                             %569 = OpLabel 
                                       f32_4 %661 = OpLoad %170 
                              Uniform f32_4* %662 = OpAccessChain %38 %549 
                                       f32_4 %663 = OpLoad %662 
                                         f32 %664 = OpDot %661 %663 
                                Private f32* %665 = OpAccessChain %493 %28 
                                                      OpStore %665 %664 
                                Private f32* %666 = OpAccessChain %493 %28 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpExtInst %1 43 %667 %73 %109 
                                Private f32* %669 = OpAccessChain %493 %28 
                                                      OpStore %669 %668 
                                       f32_3 %671 = OpLoad %528 
                              Uniform f32_4* %673 = OpAccessChain %38 %672 
                                       f32_4 %674 = OpLoad %673 
                                       f32_3 %675 = OpVectorShuffle %674 %674 0 1 2 
                                       f32_3 %676 = OpFMul %671 %675 
                                                      OpStore %670 %676 
                                       f32_3 %677 = OpLoad %493 
                                       f32_3 %678 = OpVectorShuffle %677 %677 0 0 0 
                                       f32_3 %679 = OpLoad %670 
                                       f32_3 %680 = OpFMul %678 %679 
                                                      OpStore %493 %680 
                                       f32_3 %683 = OpLoad %528 
                                       f32_3 %685 = OpLoad %684 
                                       f32_3 %686 = OpFMul %683 %685 
                                       f32_3 %687 = OpLoad %493 
                                       f32_3 %688 = OpFAdd %686 %687 
                                       f32_4 %689 = OpLoad %682 
                                       f32_4 %690 = OpVectorShuffle %689 %688 4 5 6 3 
                                                      OpStore %682 %690 
                                Private f32* %691 = OpAccessChain %9 %202 
                                         f32 %692 = OpLoad %691 
                                 Output f32* %694 = OpAccessChain %682 %202 
                                                      OpStore %694 %692 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat2.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    vs_TEXCOORD3.xy = u_xlat1.xy * vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _StepValue;
uniform 	float _SkyBoost;
uniform 	float _SkyPower;
uniform 	float _CurvePower;
uniform 	float _CurveColorFactor;
uniform 	float _CurveFreq;
uniform 	float _DitherCohesionFactor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
float u_xlat13;
float u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = log2(vs_TEXCOORD3.y);
    u_xlat1.x = u_xlat1.x * _SkyPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat7.x = vs_TEXCOORD3.y * vs_TEXCOORD3.y;
    u_xlat1.x = u_xlat7.x * _SkyBoost + u_xlat1.x;
    u_xlatb7 = u_xlat1.x<0.0;
    u_xlat1.x = (u_xlatb7) ? -1.0 : u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * _OverrideColor.xyz;
    u_xlat19 = vs_TEXCOORD3.x * _CurveFreq;
    u_xlat19 = u_xlat19 * 3.1400001;
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 + 1.0;
    u_xlat2.x = _CurveColorFactor + _CurveColorFactor;
    u_xlat19 = u_xlat19 / u_xlat2.x;
    u_xlat19 = u_xlat19 + -1.0;
    u_xlat19 = _CurvePower * u_xlat19 + 1.0;
    u_xlat2.xyw = vec3(u_xlat19) * u_xlat1.yzx;
    u_xlat3.xyz = vs_TEXCOORD2.xyy * vec3(0.00999999978, 0.00999999978, 0.0799999982);
    u_xlat4.y = (-_Time.x) * 0.333333343 + u_xlat3.z;
    u_xlat4.x = vs_TEXCOORD2.x * 0.0799999982;
    u_xlat10_4 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat16_1 = log2(u_xlat10_4.x);
    u_xlat16_1 = u_xlat16_1 * 1.5;
    u_xlat16_1 = exp2(u_xlat16_1);
    u_xlatb15 = u_xlat2.x>=u_xlat2.y;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat2.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.yz * vec2(u_xlat19) + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat15) * u_xlat5 + u_xlat4;
    u_xlatb7 = u_xlat2.w>=u_xlat4.x;
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat2.wyx;
    u_xlat4 = (-u_xlat2) + u_xlat4;
    u_xlat2 = u_xlat7.xxxx * u_xlat4 + u_xlat2;
    u_xlat7.x = min(u_xlat2.y, u_xlat2.w);
    u_xlat7.x = (-u_xlat7.x) + u_xlat2.x;
    u_xlat13 = (-u_xlat2.y) + u_xlat2.w;
    u_xlat19 = u_xlat7.x * 6.0 + 1.00000001e-010;
    u_xlat13 = u_xlat13 / u_xlat19;
    u_xlat13 = u_xlat13 + u_xlat2.z;
    u_xlat19 = u_xlat2.x + 1.00000001e-010;
    u_xlat7.x = u_xlat7.x / u_xlat19;
    u_xlat1.x = (-u_xlat16_1) * 2.0 + u_xlat2.x;
    u_xlat19 = dot(u_xlat3.xy, vec2(12.9898005, 78.2330017));
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 * 43758.5469;
    u_xlat19 = fract(u_xlat19);
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat2.x = u_xlat3.y + u_xlat3.x;
    u_xlat8 = u_xlat2.x + (-_Time.z);
    u_xlat8 = sin(u_xlat8);
    u_xlat8 = u_xlat8 + 1.0;
    u_xlat8 = u_xlat8 * 0.5;
    u_xlat14 = u_xlat2.x + _Time.z;
    u_xlat14 = sin(u_xlat14);
    u_xlat14 = u_xlat14 * 0.099999994 + 0.150000006;
    u_xlat8 = u_xlat8 * u_xlat14 + 0.349999994;
    u_xlat2.x = u_xlat2.x * 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlatb2 = 0.25<u_xlat2.x;
    u_xlat1.x = u_xlat1.x / _StepValue;
    u_xlat14 = (-u_xlat8) + u_xlat1.x;
    u_xlat14 = (-u_xlat19) * _DitherCohesionFactor + u_xlat14;
    u_xlat14 = ceil(u_xlat14);
    u_xlat14 = u_xlat14 * _StepValue;
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat19 * _DitherCohesionFactor + u_xlat1.x;
    u_xlat1.x = roundEven(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _StepValue;
    u_xlat1.x = (u_xlatb2) ? u_xlat14 : u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat2.xyz = abs(vec3(u_xlat13)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat2.xyz = fract(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat2.xyz = abs(u_xlat2.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat19 = u_xlat0.x + -0.00999999978;
    u_xlat19 = u_xlat19 * 1000.0;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(0.5, 0.5, 0.5) + vec3(0.0299999993, 0.0, 0.0700000003);
    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
    u_xlat19 = u_xlat0.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb19){
        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat19 = u_xlat2.y * 0.25 + 0.75;
        u_xlat8 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat19, u_xlat8);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat19 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 442
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %150 %156 %157 %170 %209 %212 %432 %435 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %209 Location 209 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %432 Location 432 
                                                      OpDecorate %435 Location 435 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 12 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 14 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                                             %100 = OpTypeVector %6 2 
                                         f32 %144 = OpConstant 3.674022E-40 
                                       f32_2 %145 = OpConstantComposite %144 %144 
                                             %149 = OpTypePointer Output %100 
                               Output f32_2* %150 = OpVariable Output 
                                         f32 %153 = OpConstant 3.674022E-40 
                                       f32_2 %154 = OpConstantComposite %153 %153 
                               Output f32_2* %156 = OpVariable Output 
                                Input f32_4* %157 = OpVariable Input 
                                         i32 %160 = OpConstant 15 
                                             %169 = OpTypePointer Input %53 
                                Input f32_3* %170 = OpVariable Input 
                                         i32 %172 = OpConstant 13 
                                         u32 %177 = OpConstant 0 
                                             %178 = OpTypePointer Private %6 
                                         u32 %191 = OpConstant 2 
                                Private f32* %193 = OpVariable Private 
                                             %208 = OpTypePointer Output %53 
                               Output f32_3* %209 = OpVariable Output 
                               Output f32_3* %212 = OpVariable Output 
                                             %215 = OpTypePointer Private %53 
                              Private f32_3* %216 = OpVariable Private 
                              Private f32_4* %233 = OpVariable Private 
                              Private f32_3* %239 = OpVariable Private 
                                         i32 %240 = OpConstant 8 
                                         i32 %246 = OpConstant 9 
                                         i32 %252 = OpConstant 10 
                                         i32 %258 = OpConstant 11 
                                         u32 %267 = OpConstant 3 
                                         i32 %269 = OpConstant 5 
                                         i32 %275 = OpConstant 6 
                                         i32 %281 = OpConstant 7 
                                         f32 %291 = OpConstant 3.674022E-40 
                                       f32_3 %292 = OpConstantComposite %291 %291 %291 
                              Private f32_3* %294 = OpVariable Private 
                                         f32 %298 = OpConstant 3.674022E-40 
                                       f32_3 %299 = OpConstantComposite %298 %298 %298 
                                         f32 %304 = OpConstant 3.674022E-40 
                                       f32_3 %305 = OpConstantComposite %304 %304 %304 
                                         f32 %307 = OpConstant 3.674022E-40 
                                       f32_3 %308 = OpConstantComposite %307 %307 %307 
                              Private f32_4* %318 = OpVariable Private 
                              Private f32_4* %326 = OpVariable Private 
                                         f32 %362 = OpConstant 3.674022E-40 
                                       f32_4 %363 = OpConstantComposite %362 %362 %362 %362 
                                       f32_4 %371 = OpConstantComposite %144 %144 %144 %144 
                                       f32_4 %379 = OpConstantComposite %291 %291 %291 %291 
                                         i32 %386 = OpConstant 4 
                               Output f32_3* %432 = OpVariable Output 
                               Output f32_4* %435 = OpVariable Output 
                                             %436 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %101 = OpLoad %47 
                                       f32_2 %102 = OpVectorShuffle %101 %101 1 1 
                              Uniform f32_4* %103 = OpAccessChain %23 %68 %26 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %102 %105 
                                       f32_4 %107 = OpLoad %65 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 2 3 
                                                      OpStore %65 %108 
                              Uniform f32_4* %109 = OpAccessChain %23 %68 %31 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_4 %112 = OpLoad %47 
                                       f32_2 %113 = OpVectorShuffle %112 %112 0 0 
                                       f32_2 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %65 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_2 %117 = OpFAdd %114 %116 
                                       f32_4 %118 = OpLoad %47 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 3 
                                                      OpStore %47 %119 
                              Uniform f32_4* %120 = OpAccessChain %23 %68 %39 
                                       f32_4 %121 = OpLoad %120 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_4 %123 = OpLoad %47 
                                       f32_2 %124 = OpVectorShuffle %123 %123 2 2 
                                       f32_2 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %47 
                                       f32_2 %127 = OpVectorShuffle %126 %126 0 1 
                                       f32_2 %128 = OpFAdd %125 %127 
                                       f32_4 %129 = OpLoad %47 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 2 3 
                                                      OpStore %47 %130 
                              Uniform f32_4* %131 = OpAccessChain %23 %68 %49 
                                       f32_4 %132 = OpLoad %131 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_4 %134 = OpLoad %47 
                                       f32_2 %135 = OpVectorShuffle %134 %134 3 3 
                                       f32_2 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %47 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFAdd %136 %138 
                                       f32_4 %140 = OpLoad %47 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 2 3 
                                                      OpStore %47 %141 
                                       f32_4 %142 = OpLoad %47 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                                       f32_2 %146 = OpFAdd %143 %145 
                                       f32_4 %147 = OpLoad %47 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 2 3 
                                                      OpStore %47 %148 
                                       f32_4 %151 = OpLoad %47 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %155 = OpFMul %152 %154 
                                                      OpStore %150 %155 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                              Uniform f32_4* %161 = OpAccessChain %23 %160 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 0 1 
                                       f32_2 %164 = OpFMul %159 %163 
                              Uniform f32_4* %165 = OpAccessChain %23 %160 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 2 3 
                                       f32_2 %168 = OpFAdd %164 %167 
                                                      OpStore %156 %168 
                                       f32_3 %171 = OpLoad %170 
                              Uniform f32_4* %173 = OpAccessChain %23 %172 %31 
                                       f32_4 %174 = OpLoad %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                         f32 %176 = OpDot %171 %175 
                                Private f32* %179 = OpAccessChain %47 %177 
                                                      OpStore %179 %176 
                                       f32_3 %180 = OpLoad %170 
                              Uniform f32_4* %181 = OpAccessChain %23 %172 %26 
                                       f32_4 %182 = OpLoad %181 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %180 %183 
                                Private f32* %185 = OpAccessChain %47 %86 
                                                      OpStore %185 %184 
                                       f32_3 %186 = OpLoad %170 
                              Uniform f32_4* %187 = OpAccessChain %23 %172 %39 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %186 %189 
                                Private f32* %192 = OpAccessChain %47 %191 
                                                      OpStore %192 %190 
                                       f32_4 %194 = OpLoad %47 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_4 %196 = OpLoad %47 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                         f32 %198 = OpDot %195 %197 
                                                      OpStore %193 %198 
                                         f32 %199 = OpLoad %193 
                                         f32 %200 = OpExtInst %1 32 %199 
                                                      OpStore %193 %200 
                                         f32 %201 = OpLoad %193 
                                       f32_3 %202 = OpCompositeConstruct %201 %201 %201 
                                       f32_4 %203 = OpLoad %47 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %47 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %47 %207 
                                       f32_4 %210 = OpLoad %47 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                                      OpStore %209 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                                      OpStore %212 %214 
                                Private f32* %217 = OpAccessChain %47 %86 
                                         f32 %218 = OpLoad %217 
                                Private f32* %219 = OpAccessChain %47 %86 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpFMul %218 %220 
                                Private f32* %222 = OpAccessChain %216 %177 
                                                      OpStore %222 %221 
                                Private f32* %223 = OpAccessChain %47 %177 
                                         f32 %224 = OpLoad %223 
                                Private f32* %225 = OpAccessChain %47 %177 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpFMul %224 %226 
                                Private f32* %228 = OpAccessChain %216 %177 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpFNegate %229 
                                         f32 %231 = OpFAdd %227 %230 
                                Private f32* %232 = OpAccessChain %216 %177 
                                                      OpStore %232 %231 
                                       f32_4 %234 = OpLoad %47 
                                       f32_4 %235 = OpVectorShuffle %234 %234 1 2 2 0 
                                       f32_4 %236 = OpLoad %47 
                                       f32_4 %237 = OpVectorShuffle %236 %236 0 1 2 2 
                                       f32_4 %238 = OpFMul %235 %237 
                                                      OpStore %233 %238 
                              Uniform f32_4* %241 = OpAccessChain %23 %240 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %233 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %239 %177 
                                                      OpStore %245 %244 
                              Uniform f32_4* %247 = OpAccessChain %23 %246 
                                       f32_4 %248 = OpLoad %247 
                                       f32_4 %249 = OpLoad %233 
                                         f32 %250 = OpDot %248 %249 
                                Private f32* %251 = OpAccessChain %239 %86 
                                                      OpStore %251 %250 
                              Uniform f32_4* %253 = OpAccessChain %23 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_4 %255 = OpLoad %233 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %239 %191 
                                                      OpStore %257 %256 
                              Uniform f32_4* %259 = OpAccessChain %23 %258 
                                       f32_4 %260 = OpLoad %259 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_3 %262 = OpLoad %216 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpFMul %261 %263 
                                       f32_3 %265 = OpLoad %239 
                                       f32_3 %266 = OpFAdd %264 %265 
                                                      OpStore %216 %266 
                                Private f32* %268 = OpAccessChain %47 %267 
                                                      OpStore %268 %144 
                              Uniform f32_4* %270 = OpAccessChain %23 %269 
                                       f32_4 %271 = OpLoad %270 
                                       f32_4 %272 = OpLoad %47 
                                         f32 %273 = OpDot %271 %272 
                                Private f32* %274 = OpAccessChain %239 %177 
                                                      OpStore %274 %273 
                              Uniform f32_4* %276 = OpAccessChain %23 %275 
                                       f32_4 %277 = OpLoad %276 
                                       f32_4 %278 = OpLoad %47 
                                         f32 %279 = OpDot %277 %278 
                                Private f32* %280 = OpAccessChain %239 %86 
                                                      OpStore %280 %279 
                              Uniform f32_4* %282 = OpAccessChain %23 %281 
                                       f32_4 %283 = OpLoad %282 
                                       f32_4 %284 = OpLoad %47 
                                         f32 %285 = OpDot %283 %284 
                                Private f32* %286 = OpAccessChain %239 %191 
                                                      OpStore %286 %285 
                                       f32_3 %287 = OpLoad %216 
                                       f32_3 %288 = OpLoad %239 
                                       f32_3 %289 = OpFAdd %287 %288 
                                                      OpStore %216 %289 
                                       f32_3 %290 = OpLoad %216 
                                       f32_3 %293 = OpExtInst %1 40 %290 %292 
                                                      OpStore %216 %293 
                                       f32_3 %295 = OpLoad %216 
                                       f32_3 %296 = OpExtInst %1 30 %295 
                                                      OpStore %294 %296 
                                       f32_3 %297 = OpLoad %294 
                                       f32_3 %300 = OpFMul %297 %299 
                                                      OpStore %294 %300 
                                       f32_3 %301 = OpLoad %294 
                                       f32_3 %302 = OpExtInst %1 29 %301 
                                                      OpStore %294 %302 
                                       f32_3 %303 = OpLoad %294 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_3 %309 = OpFAdd %306 %308 
                                                      OpStore %294 %309 
                                       f32_3 %310 = OpLoad %294 
                                       f32_3 %311 = OpExtInst %1 40 %310 %292 
                                                      OpStore %294 %311 
                                       f32_4 %312 = OpLoad %9 
                                       f32_4 %313 = OpVectorShuffle %312 %312 1 1 1 1 
                                       f32_4 %314 = OpFNegate %313 
                              Uniform f32_4* %315 = OpAccessChain %23 %26 
                                       f32_4 %316 = OpLoad %315 
                                       f32_4 %317 = OpFAdd %314 %316 
                                                      OpStore %65 %317 
                                       f32_4 %319 = OpLoad %47 
                                       f32_4 %320 = OpVectorShuffle %319 %319 1 1 1 1 
                                       f32_4 %321 = OpLoad %65 
                                       f32_4 %322 = OpFMul %320 %321 
                                                      OpStore %318 %322 
                                       f32_4 %323 = OpLoad %65 
                                       f32_4 %324 = OpLoad %65 
                                       f32_4 %325 = OpFMul %323 %324 
                                                      OpStore %65 %325 
                                       f32_4 %327 = OpLoad %9 
                                       f32_4 %328 = OpVectorShuffle %327 %327 0 0 0 0 
                                       f32_4 %329 = OpFNegate %328 
                              Uniform f32_4* %330 = OpAccessChain %23 %31 
                                       f32_4 %331 = OpLoad %330 
                                       f32_4 %332 = OpFAdd %329 %331 
                                                      OpStore %326 %332 
                                       f32_4 %333 = OpLoad %9 
                                       f32_4 %334 = OpVectorShuffle %333 %333 2 2 2 2 
                                       f32_4 %335 = OpFNegate %334 
                              Uniform f32_4* %336 = OpAccessChain %23 %39 
                                       f32_4 %337 = OpLoad %336 
                                       f32_4 %338 = OpFAdd %335 %337 
                                                      OpStore %9 %338 
                                       f32_4 %339 = OpLoad %326 
                                       f32_4 %340 = OpLoad %47 
                                       f32_4 %341 = OpVectorShuffle %340 %340 0 0 0 0 
                                       f32_4 %342 = OpFMul %339 %341 
                                       f32_4 %343 = OpLoad %318 
                                       f32_4 %344 = OpFAdd %342 %343 
                                                      OpStore %318 %344 
                                       f32_4 %345 = OpLoad %9 
                                       f32_4 %346 = OpLoad %47 
                                       f32_4 %347 = OpVectorShuffle %346 %346 2 2 2 2 
                                       f32_4 %348 = OpFMul %345 %347 
                                       f32_4 %349 = OpLoad %318 
                                       f32_4 %350 = OpFAdd %348 %349 
                                                      OpStore %47 %350 
                                       f32_4 %351 = OpLoad %326 
                                       f32_4 %352 = OpLoad %326 
                                       f32_4 %353 = OpFMul %351 %352 
                                       f32_4 %354 = OpLoad %65 
                                       f32_4 %355 = OpFAdd %353 %354 
                                                      OpStore %65 %355 
                                       f32_4 %356 = OpLoad %9 
                                       f32_4 %357 = OpLoad %9 
                                       f32_4 %358 = OpFMul %356 %357 
                                       f32_4 %359 = OpLoad %65 
                                       f32_4 %360 = OpFAdd %358 %359 
                                                      OpStore %9 %360 
                                       f32_4 %361 = OpLoad %9 
                                       f32_4 %364 = OpExtInst %1 40 %361 %363 
                                                      OpStore %9 %364 
                                       f32_4 %365 = OpLoad %9 
                                       f32_4 %366 = OpExtInst %1 32 %365 
                                                      OpStore %65 %366 
                                       f32_4 %367 = OpLoad %9 
                              Uniform f32_4* %368 = OpAccessChain %23 %49 
                                       f32_4 %369 = OpLoad %368 
                                       f32_4 %370 = OpFMul %367 %369 
                                       f32_4 %372 = OpFAdd %370 %371 
                                                      OpStore %9 %372 
                                       f32_4 %373 = OpLoad %9 
                                       f32_4 %374 = OpFDiv %371 %373 
                                                      OpStore %9 %374 
                                       f32_4 %375 = OpLoad %47 
                                       f32_4 %376 = OpLoad %65 
                                       f32_4 %377 = OpFMul %375 %376 
                                                      OpStore %47 %377 
                                       f32_4 %378 = OpLoad %47 
                                       f32_4 %380 = OpExtInst %1 40 %378 %379 
                                                      OpStore %47 %380 
                                       f32_4 %381 = OpLoad %9 
                                       f32_4 %382 = OpLoad %47 
                                       f32_4 %383 = OpFMul %381 %382 
                                                      OpStore %9 %383 
                                       f32_4 %384 = OpLoad %9 
                                       f32_3 %385 = OpVectorShuffle %384 %384 1 1 1 
                              Uniform f32_4* %387 = OpAccessChain %23 %386 %26 
                                       f32_4 %388 = OpLoad %387 
                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
                                       f32_3 %390 = OpFMul %385 %389 
                                       f32_4 %391 = OpLoad %47 
                                       f32_4 %392 = OpVectorShuffle %391 %390 4 5 6 3 
                                                      OpStore %47 %392 
                              Uniform f32_4* %393 = OpAccessChain %23 %386 %31 
                                       f32_4 %394 = OpLoad %393 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_4 %396 = OpLoad %9 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 0 0 
                                       f32_3 %398 = OpFMul %395 %397 
                                       f32_4 %399 = OpLoad %47 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_3 %401 = OpFAdd %398 %400 
                                       f32_4 %402 = OpLoad %47 
                                       f32_4 %403 = OpVectorShuffle %402 %401 4 5 6 3 
                                                      OpStore %47 %403 
                              Uniform f32_4* %404 = OpAccessChain %23 %386 %39 
                                       f32_4 %405 = OpLoad %404 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                                       f32_4 %407 = OpLoad %9 
                                       f32_3 %408 = OpVectorShuffle %407 %407 2 2 2 
                                       f32_3 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %47 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                       f32_3 %412 = OpFAdd %409 %411 
                                       f32_4 %413 = OpLoad %9 
                                       f32_4 %414 = OpVectorShuffle %413 %412 4 5 6 3 
                                                      OpStore %9 %414 
                              Uniform f32_4* %415 = OpAccessChain %23 %386 %49 
                                       f32_4 %416 = OpLoad %415 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                       f32_4 %418 = OpLoad %9 
                                       f32_3 %419 = OpVectorShuffle %418 %418 3 3 3 
                                       f32_3 %420 = OpFMul %417 %419 
                                       f32_4 %421 = OpLoad %9 
                                       f32_3 %422 = OpVectorShuffle %421 %421 0 1 2 
                                       f32_3 %423 = OpFAdd %420 %422 
                                       f32_4 %424 = OpLoad %9 
                                       f32_4 %425 = OpVectorShuffle %424 %423 4 5 6 3 
                                                      OpStore %9 %425 
                                       f32_4 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_3 %428 = OpLoad %294 
                                       f32_3 %429 = OpFAdd %427 %428 
                                       f32_4 %430 = OpLoad %9 
                                       f32_4 %431 = OpVectorShuffle %430 %429 4 5 6 3 
                                                      OpStore %9 %431 
                                       f32_4 %433 = OpLoad %9 
                                       f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
                                                      OpStore %432 %434 
                                                      OpStore %435 %379 
                                 Output f32* %437 = OpAccessChain %90 %31 %86 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpFNegate %438 
                                 Output f32* %440 = OpAccessChain %90 %31 %86 
                                                      OpStore %440 %439 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 696
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %21 %140 %682 %684 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 Location 21 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 RelaxedPrecision 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 RelaxedPrecision 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpMemberDecorate %36 7 Offset 36 
                                                      OpMemberDecorate %36 8 Offset 36 
                                                      OpMemberDecorate %36 9 Offset 36 
                                                      OpMemberDecorate %36 10 Offset 36 
                                                      OpMemberDecorate %36 11 Offset 36 
                                                      OpMemberDecorate %36 12 Offset 36 
                                                      OpMemberDecorate %36 13 Offset 36 
                                                      OpMemberDecorate %36 14 Offset 36 
                                                      OpMemberDecorate %36 15 RelaxedPrecision 
                                                      OpMemberDecorate %36 15 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %164 DescriptorSet 164 
                                                      OpDecorate %164 Binding 164 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %540 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %542 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %567 SpecId 567 
                                                      OpDecorate %650 DescriptorSet 650 
                                                      OpDecorate %650 Binding 650 
                                                      OpDecorate %661 RelaxedPrecision 
                                                      OpDecorate %663 RelaxedPrecision 
                                                      OpDecorate %664 RelaxedPrecision 
                                                      OpDecorate %667 RelaxedPrecision 
                                                      OpDecorate %668 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %677 RelaxedPrecision 
                                                      OpDecorate %678 RelaxedPrecision 
                                                      OpDecorate %679 RelaxedPrecision 
                                                      OpDecorate %680 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %682 Location 682 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %684 Location 684 
                                                      OpDecorate %685 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %692 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                 Input f32_2* %21 = OpVariable Input 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Input %6 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          u32 %33 = OpConstant 4 
                                              %34 = OpTypeArray %7 %33 
                                              %35 = OpTypeVector %6 3 
                                              %36 = OpTypeStruct %7 %7 %7 %34 %35 %35 %7 %7 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 10 
                                              %41 = OpTypePointer Uniform %6 
                                              %50 = OpTypePointer Private %35 
                               Private f32_3* %51 = OpVariable Private 
                                          i32 %60 = OpConstant 9 
                                              %68 = OpTypeBool 
                                              %69 = OpTypePointer Private %68 
                                Private bool* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                              %75 = OpTypePointer Function %6 
                                          f32 %80 = OpConstant 3.674022E-40 
                                          i32 %88 = OpConstant 7 
                                              %89 = OpTypePointer Uniform %7 
                                 Private f32* %96 = OpVariable Private 
                                          i32 %99 = OpConstant 13 
                                         f32 %104 = OpConstant 3.674022E-40 
                                         f32 %109 = OpConstant 3.674022E-40 
                              Private f32_4* %111 = OpVariable Private 
                                         i32 %112 = OpConstant 12 
                                         i32 %125 = OpConstant 11 
                              Private f32_3* %138 = OpVariable Private 
                                             %139 = OpTypePointer Input %35 
                                Input f32_3* %140 = OpVariable Input 
                                         f32 %143 = OpConstant 3.674022E-40 
                                         f32 %144 = OpConstant 3.674022E-40 
                                       f32_3 %145 = OpConstantComposite %143 %143 %144 
                              Private f32_4* %147 = OpVariable Private 
                                         i32 %148 = OpConstant 0 
                                         f32 %152 = OpConstant 3.674022E-40 
                                         u32 %154 = OpConstant 2 
                                Private f32* %163 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %164 = OpVariable UniformConstant 
                              Private f32_4* %170 = OpVariable Private 
                                         f32 %176 = OpConstant 3.674022E-40 
                               Private bool* %183 = OpVariable Private 
                                Private f32* %189 = OpVariable Private 
                                         f32 %201 = OpConstant 3.674022E-40 
                                         u32 %202 = OpConstant 3 
                              Private f32_4* %204 = OpVariable Private 
                                Private f32* %267 = OpVariable Private 
                                         f32 %276 = OpConstant 3.674022E-40 
                                         f32 %278 = OpConstant 3.674022E-40 
                                         f32 %298 = OpConstant 3.674022E-40 
                                         f32 %306 = OpConstant 3.674022E-40 
                                         f32 %307 = OpConstant 3.674022E-40 
                                       f32_2 %308 = OpConstantComposite %306 %307 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                                Private f32* %326 = OpVariable Private 
                                         f32 %338 = OpConstant 3.674022E-40 
                                Private f32* %340 = OpVariable Private 
                                         f32 %349 = OpConstant 3.674022E-40 
                                         f32 %351 = OpConstant 3.674022E-40 
                                         f32 %356 = OpConstant 3.674022E-40 
                               Private bool* %366 = OpVariable Private 
                                         f32 %367 = OpConstant 3.674022E-40 
                                         i32 %373 = OpConstant 8 
                                         i32 %385 = OpConstant 14 
                                       f32_3 %437 = OpConstantComposite %109 %201 %152 
                                       f32_3 %448 = OpConstantComposite %276 %276 %276 
                                         f32 %450 = OpConstant 3.674022E-40 
                                       f32_3 %451 = OpConstantComposite %450 %450 %450 
                                       f32_3 %458 = OpConstantComposite %80 %80 %80 
                                       f32_3 %479 = OpConstantComposite %109 %109 %109 
                                       f32_3 %489 = OpConstantComposite %338 %338 %338 
                              Private f32_3* %493 = OpVariable Private 
                                         f32 %496 = OpConstant 3.674022E-40 
                                         f32 %501 = OpConstant 3.674022E-40 
                                         f32 %512 = OpConstant 3.674022E-40 
                                         f32 %513 = OpConstant 3.674022E-40 
                                       f32_3 %514 = OpConstantComposite %512 %73 %513 
                              Private f32_3* %528 = OpVariable Private 
                                       f32_3 %531 = OpConstantComposite %298 %298 %298 
                                         i32 %538 = OpConstant 15 
                               Private bool* %544 = OpVariable Private 
                                         i32 %549 = OpConstant 1 
                                         i32 %551 = OpConstant -1 
                                         i32 %557 = OpConstant 2 
                                        bool %561 = OpConstantFalse 
                                        bool %567 = OpSpecConstantFalse 
                                         i32 %575 = OpConstant 3 
                                             %601 = OpTypePointer Function %35 
                                         i32 %614 = OpConstant 5 
                                             %615 = OpTypePointer Uniform %35 
                                         i32 %624 = OpConstant 4 
                                         f32 %633 = OpConstant 3.674022E-40 
                                             %647 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %648 = OpTypeSampledImage %647 
                                             %649 = OpTypePointer UniformConstant %648 
 UniformConstant read_only Texture3DSampled* %650 = OpVariable UniformConstant 
                              Private f32_3* %670 = OpVariable Private 
                                         i32 %672 = OpConstant 6 
                                             %681 = OpTypePointer Output %7 
                               Output f32_4* %682 = OpVariable Output 
                                Input f32_3* %684 = OpVariable Input 
                                             %693 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %76 = OpVariable Function 
                               Function f32* %190 = OpVariable Function 
                               Function f32* %229 = OpVariable Function 
                               Function f32* %420 = OpVariable Function 
                             Function f32_3* %602 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                   Input f32* %25 = OpAccessChain %21 %23 
                                          f32 %26 = OpLoad %25 
                                          f32 %27 = OpExtInst %1 30 %26 
                                 Private f32* %30 = OpAccessChain %20 %28 
                                                      OpStore %30 %27 
                                 Private f32* %31 = OpAccessChain %20 %28 
                                          f32 %32 = OpLoad %31 
                                 Uniform f32* %42 = OpAccessChain %38 %40 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %32 %43 
                                 Private f32* %45 = OpAccessChain %20 %28 
                                                      OpStore %45 %44 
                                 Private f32* %46 = OpAccessChain %20 %28 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpExtInst %1 29 %47 
                                 Private f32* %49 = OpAccessChain %20 %28 
                                                      OpStore %49 %48 
                                   Input f32* %52 = OpAccessChain %21 %23 
                                          f32 %53 = OpLoad %52 
                                   Input f32* %54 = OpAccessChain %21 %23 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFMul %53 %55 
                                 Private f32* %57 = OpAccessChain %51 %28 
                                                      OpStore %57 %56 
                                 Private f32* %58 = OpAccessChain %51 %28 
                                          f32 %59 = OpLoad %58 
                                 Uniform f32* %61 = OpAccessChain %38 %60 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %59 %62 
                                 Private f32* %64 = OpAccessChain %20 %28 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %63 %65 
                                 Private f32* %67 = OpAccessChain %20 %28 
                                                      OpStore %67 %66 
                                 Private f32* %71 = OpAccessChain %20 %28 
                                          f32 %72 = OpLoad %71 
                                         bool %74 = OpFOrdLessThan %72 %73 
                                                      OpStore %70 %74 
                                         bool %77 = OpLoad %70 
                                                      OpSelectionMerge %79 None 
                                                      OpBranchConditional %77 %78 %81 
                                              %78 = OpLabel 
                                                      OpStore %76 %80 
                                                      OpBranch %79 
                                              %81 = OpLabel 
                                 Private f32* %82 = OpAccessChain %20 %28 
                                          f32 %83 = OpLoad %82 
                                                      OpStore %76 %83 
                                                      OpBranch %79 
                                              %79 = OpLabel 
                                          f32 %84 = OpLoad %76 
                                 Private f32* %85 = OpAccessChain %20 %28 
                                                      OpStore %85 %84 
                                        f32_4 %86 = OpLoad %20 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 0 0 
                               Uniform f32_4* %90 = OpAccessChain %38 %88 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                        f32_4 %94 = OpLoad %20 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %20 %95 
                                   Input f32* %97 = OpAccessChain %21 %28 
                                          f32 %98 = OpLoad %97 
                                Uniform f32* %100 = OpAccessChain %38 %99 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFMul %98 %101 
                                                      OpStore %96 %102 
                                         f32 %103 = OpLoad %96 
                                         f32 %105 = OpFMul %103 %104 
                                                      OpStore %96 %105 
                                         f32 %106 = OpLoad %96 
                                         f32 %107 = OpExtInst %1 13 %106 
                                                      OpStore %96 %107 
                                         f32 %108 = OpLoad %96 
                                         f32 %110 = OpFAdd %108 %109 
                                                      OpStore %96 %110 
                                Uniform f32* %113 = OpAccessChain %38 %112 
                                         f32 %114 = OpLoad %113 
                                Uniform f32* %115 = OpAccessChain %38 %112 
                                         f32 %116 = OpLoad %115 
                                         f32 %117 = OpFAdd %114 %116 
                                Private f32* %118 = OpAccessChain %111 %28 
                                                      OpStore %118 %117 
                                         f32 %119 = OpLoad %96 
                                Private f32* %120 = OpAccessChain %111 %28 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFDiv %119 %121 
                                                      OpStore %96 %122 
                                         f32 %123 = OpLoad %96 
                                         f32 %124 = OpFAdd %123 %80 
                                                      OpStore %96 %124 
                                Uniform f32* %126 = OpAccessChain %38 %125 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpLoad %96 
                                         f32 %129 = OpFMul %127 %128 
                                         f32 %130 = OpFAdd %129 %109 
                                                      OpStore %96 %130 
                                         f32 %131 = OpLoad %96 
                                       f32_3 %132 = OpCompositeConstruct %131 %131 %131 
                                       f32_4 %133 = OpLoad %20 
                                       f32_3 %134 = OpVectorShuffle %133 %133 1 2 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %111 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 6 
                                                      OpStore %111 %137 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %138 %146 
                                Uniform f32* %149 = OpAccessChain %38 %148 %28 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFNegate %150 
                                         f32 %153 = OpFMul %151 %152 
                                Private f32* %155 = OpAccessChain %138 %154 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFAdd %153 %156 
                                Private f32* %158 = OpAccessChain %147 %23 
                                                      OpStore %158 %157 
                                  Input f32* %159 = OpAccessChain %140 %28 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %160 %144 
                                Private f32* %162 = OpAccessChain %147 %28 
                                                      OpStore %162 %161 
                  read_only Texture2DSampled %165 = OpLoad %164 
                                       f32_4 %166 = OpLoad %147 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_4 %168 = OpImageSampleImplicitLod %165 %167 
                                         f32 %169 = OpCompositeExtract %168 0 
                                                      OpStore %163 %169 
                                         f32 %171 = OpLoad %163 
                                         f32 %172 = OpExtInst %1 30 %171 
                                Private f32* %173 = OpAccessChain %170 %28 
                                                      OpStore %173 %172 
                                Private f32* %174 = OpAccessChain %170 %28 
                                         f32 %175 = OpLoad %174 
                                         f32 %177 = OpFMul %175 %176 
                                Private f32* %178 = OpAccessChain %170 %28 
                                                      OpStore %178 %177 
                                Private f32* %179 = OpAccessChain %170 %28 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpExtInst %1 29 %180 
                                Private f32* %182 = OpAccessChain %170 %28 
                                                      OpStore %182 %181 
                                Private f32* %184 = OpAccessChain %111 %28 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %111 %23 
                                         f32 %187 = OpLoad %186 
                                        bool %188 = OpFOrdGreaterThanEqual %185 %187 
                                                      OpStore %183 %188 
                                        bool %191 = OpLoad %183 
                                                      OpSelectionMerge %193 None 
                                                      OpBranchConditional %191 %192 %194 
                                             %192 = OpLabel 
                                                      OpStore %190 %109 
                                                      OpBranch %193 
                                             %194 = OpLabel 
                                                      OpStore %190 %73 
                                                      OpBranch %193 
                                             %193 = OpLabel 
                                         f32 %195 = OpLoad %190 
                                                      OpStore %189 %195 
                                       f32_4 %196 = OpLoad %111 
                                       f32_2 %197 = OpVectorShuffle %196 %196 1 0 
                                       f32_4 %198 = OpLoad %147 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 3 
                                                      OpStore %147 %199 
                                Private f32* %200 = OpAccessChain %147 %154 
                                                      OpStore %200 %80 
                                Private f32* %203 = OpAccessChain %147 %202 
                                                      OpStore %203 %201 
                                       f32_4 %205 = OpLoad %20 
                                       f32_2 %206 = OpVectorShuffle %205 %205 1 2 
                                         f32 %207 = OpLoad %96 
                                       f32_2 %208 = OpCompositeConstruct %207 %207 
                                       f32_2 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %147 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 1 
                                       f32_2 %212 = OpFNegate %211 
                                       f32_2 %213 = OpFAdd %209 %212 
                                       f32_4 %214 = OpLoad %204 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %204 %215 
                                Private f32* %216 = OpAccessChain %204 %154 
                                                      OpStore %216 %109 
                                Private f32* %217 = OpAccessChain %204 %202 
                                                      OpStore %217 %80 
                                         f32 %218 = OpLoad %189 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                       f32_4 %220 = OpLoad %204 
                                       f32_4 %221 = OpFMul %219 %220 
                                       f32_4 %222 = OpLoad %147 
                                       f32_4 %223 = OpFAdd %221 %222 
                                                      OpStore %147 %223 
                                Private f32* %224 = OpAccessChain %111 %202 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %147 %28 
                                         f32 %227 = OpLoad %226 
                                        bool %228 = OpFOrdGreaterThanEqual %225 %227 
                                                      OpStore %70 %228 
                                        bool %230 = OpLoad %70 
                                                      OpSelectionMerge %232 None 
                                                      OpBranchConditional %230 %231 %233 
                                             %231 = OpLabel 
                                                      OpStore %229 %109 
                                                      OpBranch %232 
                                             %233 = OpLabel 
                                                      OpStore %229 %73 
                                                      OpBranch %232 
                                             %232 = OpLabel 
                                         f32 %234 = OpLoad %229 
                                Private f32* %235 = OpAccessChain %51 %28 
                                                      OpStore %235 %234 
                                       f32_4 %236 = OpLoad %147 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 3 
                                       f32_4 %238 = OpLoad %111 
                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 6 3 
                                                      OpStore %111 %239 
                                       f32_4 %240 = OpLoad %111 
                                       f32_3 %241 = OpVectorShuffle %240 %240 3 1 0 
                                       f32_4 %242 = OpLoad %147 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 2 6 
                                                      OpStore %147 %243 
                                       f32_4 %244 = OpLoad %111 
                                       f32_4 %245 = OpFNegate %244 
                                       f32_4 %246 = OpLoad %147 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %147 %247 
                                       f32_3 %248 = OpLoad %51 
                                       f32_4 %249 = OpVectorShuffle %248 %248 0 0 0 0 
                                       f32_4 %250 = OpLoad %147 
                                       f32_4 %251 = OpFMul %249 %250 
                                       f32_4 %252 = OpLoad %111 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %111 %253 
                                Private f32* %254 = OpAccessChain %111 %23 
                                         f32 %255 = OpLoad %254 
                                Private f32* %256 = OpAccessChain %111 %202 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpExtInst %1 37 %255 %257 
                                Private f32* %259 = OpAccessChain %51 %28 
                                                      OpStore %259 %258 
                                Private f32* %260 = OpAccessChain %51 %28 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpFNegate %261 
                                Private f32* %263 = OpAccessChain %111 %28 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %51 %28 
                                                      OpStore %266 %265 
                                Private f32* %268 = OpAccessChain %111 %23 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                Private f32* %271 = OpAccessChain %111 %202 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpFAdd %270 %272 
                                                      OpStore %267 %273 
                                Private f32* %274 = OpAccessChain %51 %28 
                                         f32 %275 = OpLoad %274 
                                         f32 %277 = OpFMul %275 %276 
                                         f32 %279 = OpFAdd %277 %278 
                                                      OpStore %96 %279 
                                         f32 %280 = OpLoad %267 
                                         f32 %281 = OpLoad %96 
                                         f32 %282 = OpFDiv %280 %281 
                                                      OpStore %267 %282 
                                         f32 %283 = OpLoad %267 
                                Private f32* %284 = OpAccessChain %111 %154 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpFAdd %283 %285 
                                                      OpStore %267 %286 
                                Private f32* %287 = OpAccessChain %111 %28 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFAdd %288 %278 
                                                      OpStore %96 %289 
                                Private f32* %290 = OpAccessChain %51 %28 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpLoad %96 
                                         f32 %293 = OpFDiv %291 %292 
                                Private f32* %294 = OpAccessChain %51 %28 
                                                      OpStore %294 %293 
                                Private f32* %295 = OpAccessChain %170 %28 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpFNegate %296 
                                         f32 %299 = OpFMul %297 %298 
                                Private f32* %300 = OpAccessChain %111 %28 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                Private f32* %303 = OpAccessChain %20 %28 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %138 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                         f32 %309 = OpDot %305 %308 
                                                      OpStore %96 %309 
                                         f32 %310 = OpLoad %96 
                                         f32 %311 = OpExtInst %1 13 %310 
                                                      OpStore %96 %311 
                                         f32 %312 = OpLoad %96 
                                         f32 %314 = OpFMul %312 %313 
                                                      OpStore %96 %314 
                                         f32 %315 = OpLoad %96 
                                         f32 %316 = OpExtInst %1 10 %315 
                                                      OpStore %96 %316 
                                         f32 %317 = OpLoad %96 
                                         f32 %319 = OpFAdd %317 %318 
                                                      OpStore %96 %319 
                                Private f32* %320 = OpAccessChain %138 %23 
                                         f32 %321 = OpLoad %320 
                                Private f32* %322 = OpAccessChain %138 %28 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFAdd %321 %323 
                                Private f32* %325 = OpAccessChain %111 %28 
                                                      OpStore %325 %324 
                                Private f32* %327 = OpAccessChain %111 %28 
                                         f32 %328 = OpLoad %327 
                                Uniform f32* %329 = OpAccessChain %38 %148 %154 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFNegate %330 
                                         f32 %332 = OpFAdd %328 %331 
                                                      OpStore %326 %332 
                                         f32 %333 = OpLoad %326 
                                         f32 %334 = OpExtInst %1 13 %333 
                                                      OpStore %326 %334 
                                         f32 %335 = OpLoad %326 
                                         f32 %336 = OpFAdd %335 %109 
                                                      OpStore %326 %336 
                                         f32 %337 = OpLoad %326 
                                         f32 %339 = OpFMul %337 %338 
                                                      OpStore %326 %339 
                                Private f32* %341 = OpAccessChain %111 %28 
                                         f32 %342 = OpLoad %341 
                                Uniform f32* %343 = OpAccessChain %38 %148 %154 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFAdd %342 %344 
                                                      OpStore %340 %345 
                                         f32 %346 = OpLoad %340 
                                         f32 %347 = OpExtInst %1 13 %346 
                                                      OpStore %340 %347 
                                         f32 %348 = OpLoad %340 
                                         f32 %350 = OpFMul %348 %349 
                                         f32 %352 = OpFAdd %350 %351 
                                                      OpStore %340 %352 
                                         f32 %353 = OpLoad %326 
                                         f32 %354 = OpLoad %340 
                                         f32 %355 = OpFMul %353 %354 
                                         f32 %357 = OpFAdd %355 %356 
                                                      OpStore %326 %357 
                                Private f32* %358 = OpAccessChain %111 %28 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFMul %359 %338 
                                Private f32* %361 = OpAccessChain %111 %28 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %111 %28 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpExtInst %1 10 %363 
                                Private f32* %365 = OpAccessChain %111 %28 
                                                      OpStore %365 %364 
                                Private f32* %368 = OpAccessChain %111 %28 
                                         f32 %369 = OpLoad %368 
                                        bool %370 = OpFOrdLessThan %367 %369 
                                                      OpStore %366 %370 
                                Private f32* %371 = OpAccessChain %20 %28 
                                         f32 %372 = OpLoad %371 
                                Uniform f32* %374 = OpAccessChain %38 %373 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpFDiv %372 %375 
                                Private f32* %377 = OpAccessChain %20 %28 
                                                      OpStore %377 %376 
                                         f32 %378 = OpLoad %326 
                                         f32 %379 = OpFNegate %378 
                                Private f32* %380 = OpAccessChain %20 %28 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFAdd %379 %381 
                                                      OpStore %340 %382 
                                         f32 %383 = OpLoad %96 
                                         f32 %384 = OpFNegate %383 
                                Uniform f32* %386 = OpAccessChain %38 %385 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpFMul %384 %387 
                                         f32 %389 = OpLoad %340 
                                         f32 %390 = OpFAdd %388 %389 
                                                      OpStore %340 %390 
                                         f32 %391 = OpLoad %340 
                                         f32 %392 = OpExtInst %1 9 %391 
                                                      OpStore %340 %392 
                                         f32 %393 = OpLoad %340 
                                Uniform f32* %394 = OpAccessChain %38 %373 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %340 %396 
                                         f32 %397 = OpLoad %326 
                                Private f32* %398 = OpAccessChain %20 %28 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFAdd %397 %399 
                                Private f32* %401 = OpAccessChain %20 %28 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %96 
                                Uniform f32* %403 = OpAccessChain %38 %385 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFMul %402 %404 
                                Private f32* %406 = OpAccessChain %20 %28 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpFAdd %405 %407 
                                Private f32* %409 = OpAccessChain %20 %28 
                                                      OpStore %409 %408 
                                Private f32* %410 = OpAccessChain %20 %28 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpExtInst %1 2 %411 
                                Private f32* %413 = OpAccessChain %20 %28 
                                                      OpStore %413 %412 
                                Private f32* %414 = OpAccessChain %20 %28 
                                         f32 %415 = OpLoad %414 
                                Uniform f32* %416 = OpAccessChain %38 %373 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFMul %415 %417 
                                Private f32* %419 = OpAccessChain %20 %28 
                                                      OpStore %419 %418 
                                        bool %421 = OpLoad %366 
                                                      OpSelectionMerge %423 None 
                                                      OpBranchConditional %421 %422 %425 
                                             %422 = OpLabel 
                                         f32 %424 = OpLoad %340 
                                                      OpStore %420 %424 
                                                      OpBranch %423 
                                             %425 = OpLabel 
                                Private f32* %426 = OpAccessChain %20 %28 
                                         f32 %427 = OpLoad %426 
                                                      OpStore %420 %427 
                                                      OpBranch %423 
                                             %423 = OpLabel 
                                         f32 %428 = OpLoad %420 
                                Private f32* %429 = OpAccessChain %20 %28 
                                                      OpStore %429 %428 
                                Private f32* %430 = OpAccessChain %20 %28 
                                         f32 %431 = OpLoad %430 
                                         f32 %432 = OpExtInst %1 40 %431 %73 
                                Private f32* %433 = OpAccessChain %20 %28 
                                                      OpStore %433 %432 
                                         f32 %434 = OpLoad %267 
                                       f32_3 %435 = OpCompositeConstruct %434 %434 %434 
                                       f32_3 %436 = OpExtInst %1 4 %435 
                                       f32_3 %438 = OpFAdd %436 %437 
                                       f32_4 %439 = OpLoad %111 
                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
                                                      OpStore %111 %440 
                                       f32_4 %441 = OpLoad %111 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_3 %443 = OpExtInst %1 10 %442 
                                       f32_4 %444 = OpLoad %111 
                                       f32_4 %445 = OpVectorShuffle %444 %443 4 5 6 3 
                                                      OpStore %111 %445 
                                       f32_4 %446 = OpLoad %111 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 1 2 
                                       f32_3 %449 = OpFMul %447 %448 
                                       f32_3 %452 = OpFAdd %449 %451 
                                       f32_4 %453 = OpLoad %111 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 6 3 
                                                      OpStore %111 %454 
                                       f32_4 %455 = OpLoad %111 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpExtInst %1 4 %456 
                                       f32_3 %459 = OpFAdd %457 %458 
                                       f32_4 %460 = OpLoad %111 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 6 3 
                                                      OpStore %111 %461 
                                       f32_4 %462 = OpLoad %111 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                       f32_3 %464 = OpCompositeConstruct %73 %73 %73 
                                       f32_3 %465 = OpCompositeConstruct %109 %109 %109 
                                       f32_3 %466 = OpExtInst %1 43 %463 %464 %465 
                                       f32_4 %467 = OpLoad %111 
                                       f32_4 %468 = OpVectorShuffle %467 %466 4 5 6 3 
                                                      OpStore %111 %468 
                                       f32_4 %469 = OpLoad %111 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_3 %471 = OpFAdd %470 %458 
                                       f32_4 %472 = OpLoad %111 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %111 %473 
                                       f32_3 %474 = OpLoad %51 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 0 0 
                                       f32_4 %476 = OpLoad %111 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFMul %475 %477 
                                       f32_3 %480 = OpFAdd %478 %479 
                                                      OpStore %51 %480 
                                       f32_3 %481 = OpLoad %51 
                                       f32_4 %482 = OpLoad %20 
                                       f32_3 %483 = OpVectorShuffle %482 %482 0 0 0 
                                       f32_3 %484 = OpFMul %481 %483 
                                       f32_4 %485 = OpLoad %20 
                                       f32_4 %486 = OpVectorShuffle %485 %484 4 5 6 3 
                                                      OpStore %20 %486 
                                       f32_4 %487 = OpLoad %20 
                                       f32_3 %488 = OpVectorShuffle %487 %487 0 1 2 
                                       f32_3 %490 = OpFMul %488 %489 
                                       f32_4 %491 = OpLoad %111 
                                       f32_4 %492 = OpVectorShuffle %491 %490 4 5 6 3 
                                                      OpStore %111 %492 
                                Private f32* %494 = OpAccessChain %9 %28 
                                         f32 %495 = OpLoad %494 
                                         f32 %497 = OpFAdd %495 %496 
                                Private f32* %498 = OpAccessChain %493 %28 
                                                      OpStore %498 %497 
                                Private f32* %499 = OpAccessChain %493 %28 
                                         f32 %500 = OpLoad %499 
                                         f32 %502 = OpFMul %500 %501 
                                Private f32* %503 = OpAccessChain %493 %28 
                                                      OpStore %503 %502 
                                Private f32* %504 = OpAccessChain %493 %28 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpExtInst %1 43 %505 %73 %109 
                                Private f32* %507 = OpAccessChain %493 %28 
                                                      OpStore %507 %506 
                                       f32_4 %508 = OpLoad %20 
                                       f32_3 %509 = OpVectorShuffle %508 %508 0 1 2 
                                       f32_3 %510 = OpFNegate %509 
                                       f32_3 %511 = OpFMul %510 %489 
                                       f32_3 %515 = OpFAdd %511 %514 
                                       f32_4 %516 = OpLoad %20 
                                       f32_4 %517 = OpVectorShuffle %516 %515 4 5 6 3 
                                                      OpStore %20 %517 
                                       f32_3 %518 = OpLoad %493 
                                       f32_3 %519 = OpVectorShuffle %518 %518 0 0 0 
                                       f32_4 %520 = OpLoad %20 
                                       f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
                                       f32_3 %522 = OpFMul %519 %521 
                                       f32_4 %523 = OpLoad %111 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                       f32_3 %525 = OpFAdd %522 %524 
                                       f32_4 %526 = OpLoad %20 
                                       f32_4 %527 = OpVectorShuffle %526 %525 4 5 6 3 
                                                      OpStore %20 %527 
                                       f32_4 %529 = OpLoad %9 
                                       f32_3 %530 = OpVectorShuffle %529 %529 0 1 2 
                                       f32_3 %532 = OpFMul %530 %531 
                                       f32_4 %533 = OpLoad %20 
                                       f32_3 %534 = OpVectorShuffle %533 %533 0 1 2 
                                       f32_3 %535 = OpFAdd %532 %534 
                                                      OpStore %528 %535 
                                Private f32* %536 = OpAccessChain %9 %202 
                                         f32 %537 = OpLoad %536 
                                Uniform f32* %539 = OpAccessChain %38 %538 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFNegate %540 
                                         f32 %542 = OpFAdd %537 %541 
                                Private f32* %543 = OpAccessChain %493 %28 
                                                      OpStore %543 %542 
                                Private f32* %545 = OpAccessChain %493 %28 
                                         f32 %546 = OpLoad %545 
                                        bool %547 = OpFOrdLessThan %546 %73 
                                                      OpStore %544 %547 
                                        bool %548 = OpLoad %544 
                                         i32 %550 = OpSelect %548 %549 %148 
                                         i32 %552 = OpIMul %550 %551 
                                        bool %553 = OpINotEqual %552 %148 
                                                      OpSelectionMerge %555 None 
                                                      OpBranchConditional %553 %554 %555 
                                             %554 = OpLabel 
                                                      OpKill
                                             %555 = OpLabel 
                                Uniform f32* %558 = OpAccessChain %38 %557 %28 
                                         f32 %559 = OpLoad %558 
                                        bool %560 = OpFOrdEqual %559 %109 
                                                      OpStore %544 %560 
                                                      OpSelectionMerge %563 None 
                                                      OpBranchConditional %561 %562 %563 
                                             %562 = OpLabel 
                                        bool %564 = OpLoad %544 
                                                      OpSelectionMerge %566 None 
                                                      OpBranchConditional %564 %565 %566 
                                             %565 = OpLabel 
                                                      OpBranch %566 
                                             %566 = OpLabel 
                                                      OpBranch %563 
                                             %563 = OpLabel 
                                                      OpSelectionMerge %569 None 
                                                      OpBranchConditional %567 %568 %656 
                                             %568 = OpLabel 
                                Uniform f32* %570 = OpAccessChain %38 %557 %23 
                                         f32 %571 = OpLoad %570 
                                        bool %572 = OpFOrdEqual %571 %109 
                                                      OpStore %544 %572 
                                       f32_3 %573 = OpLoad %140 
                                       f32_3 %574 = OpVectorShuffle %573 %573 1 1 1 
                              Uniform f32_4* %576 = OpAccessChain %38 %575 %549 
                                       f32_4 %577 = OpLoad %576 
                                       f32_3 %578 = OpVectorShuffle %577 %577 0 1 2 
                                       f32_3 %579 = OpFMul %574 %578 
                                                      OpStore %51 %579 
                              Uniform f32_4* %580 = OpAccessChain %38 %575 %148 
                                       f32_4 %581 = OpLoad %580 
                                       f32_3 %582 = OpVectorShuffle %581 %581 0 1 2 
                                       f32_3 %583 = OpLoad %140 
                                       f32_3 %584 = OpVectorShuffle %583 %583 0 0 0 
                                       f32_3 %585 = OpFMul %582 %584 
                                       f32_3 %586 = OpLoad %51 
                                       f32_3 %587 = OpFAdd %585 %586 
                                                      OpStore %51 %587 
                              Uniform f32_4* %588 = OpAccessChain %38 %575 %557 
                                       f32_4 %589 = OpLoad %588 
                                       f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
                                       f32_3 %591 = OpLoad %140 
                                       f32_3 %592 = OpVectorShuffle %591 %591 2 2 2 
                                       f32_3 %593 = OpFMul %590 %592 
                                       f32_3 %594 = OpLoad %51 
                                       f32_3 %595 = OpFAdd %593 %594 
                                                      OpStore %51 %595 
                                       f32_3 %596 = OpLoad %51 
                              Uniform f32_4* %597 = OpAccessChain %38 %575 %575 
                                       f32_4 %598 = OpLoad %597 
                                       f32_3 %599 = OpVectorShuffle %598 %598 0 1 2 
                                       f32_3 %600 = OpFAdd %596 %599 
                                                      OpStore %51 %600 
                                        bool %603 = OpLoad %544 
                                                      OpSelectionMerge %605 None 
                                                      OpBranchConditional %603 %604 %607 
                                             %604 = OpLabel 
                                       f32_3 %606 = OpLoad %51 
                                                      OpStore %602 %606 
                                                      OpBranch %605 
                                             %607 = OpLabel 
                                       f32_3 %608 = OpLoad %140 
                                                      OpStore %602 %608 
                                                      OpBranch %605 
                                             %605 = OpLabel 
                                       f32_3 %609 = OpLoad %602 
                                       f32_4 %610 = OpLoad %20 
                                       f32_4 %611 = OpVectorShuffle %610 %609 4 5 6 3 
                                                      OpStore %20 %611 
                                       f32_4 %612 = OpLoad %20 
                                       f32_3 %613 = OpVectorShuffle %612 %612 0 1 2 
                              Uniform f32_3* %616 = OpAccessChain %38 %614 
                                       f32_3 %617 = OpLoad %616 
                                       f32_3 %618 = OpFNegate %617 
                                       f32_3 %619 = OpFAdd %613 %618 
                                       f32_4 %620 = OpLoad %20 
                                       f32_4 %621 = OpVectorShuffle %620 %619 4 5 6 3 
                                                      OpStore %20 %621 
                                       f32_4 %622 = OpLoad %20 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                              Uniform f32_3* %625 = OpAccessChain %38 %624 
                                       f32_3 %626 = OpLoad %625 
                                       f32_3 %627 = OpFMul %623 %626 
                                       f32_4 %628 = OpLoad %20 
                                       f32_4 %629 = OpVectorShuffle %628 %627 0 4 5 6 
                                                      OpStore %20 %629 
                                Private f32* %630 = OpAccessChain %20 %23 
                                         f32 %631 = OpLoad %630 
                                         f32 %632 = OpFMul %631 %367 
                                         f32 %634 = OpFAdd %632 %633 
                                Private f32* %635 = OpAccessChain %51 %28 
                                                      OpStore %635 %634 
                                Uniform f32* %636 = OpAccessChain %38 %557 %154 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpFMul %637 %338 
                                         f32 %639 = OpFAdd %638 %633 
                                Private f32* %640 = OpAccessChain %111 %28 
                                                      OpStore %640 %639 
                                Private f32* %641 = OpAccessChain %51 %28 
                                         f32 %642 = OpLoad %641 
                                Private f32* %643 = OpAccessChain %111 %28 
                                         f32 %644 = OpLoad %643 
                                         f32 %645 = OpExtInst %1 40 %642 %644 
                                Private f32* %646 = OpAccessChain %20 %28 
                                                      OpStore %646 %645 
                  read_only Texture3DSampled %651 = OpLoad %650 
                                       f32_4 %652 = OpLoad %20 
                                       f32_3 %653 = OpVectorShuffle %652 %652 0 2 3 
                                       f32_4 %654 = OpImageSampleImplicitLod %651 %653 
                                                      OpStore %20 %654 
                                       f32_4 %655 = OpLoad %20 
                                                      OpStore %170 %655 
                                                      OpBranch %569 
                                             %656 = OpLabel 
                                Private f32* %657 = OpAccessChain %170 %28 
                                                      OpStore %657 %109 
                                Private f32* %658 = OpAccessChain %170 %23 
                                                      OpStore %658 %109 
                                Private f32* %659 = OpAccessChain %170 %154 
                                                      OpStore %659 %109 
                                Private f32* %660 = OpAccessChain %170 %202 
                                                      OpStore %660 %109 
                                                      OpBranch %569 
                                             %569 = OpLabel 
                                       f32_4 %661 = OpLoad %170 
                              Uniform f32_4* %662 = OpAccessChain %38 %549 
                                       f32_4 %663 = OpLoad %662 
                                         f32 %664 = OpDot %661 %663 
                                Private f32* %665 = OpAccessChain %493 %28 
                                                      OpStore %665 %664 
                                Private f32* %666 = OpAccessChain %493 %28 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpExtInst %1 43 %667 %73 %109 
                                Private f32* %669 = OpAccessChain %493 %28 
                                                      OpStore %669 %668 
                                       f32_3 %671 = OpLoad %528 
                              Uniform f32_4* %673 = OpAccessChain %38 %672 
                                       f32_4 %674 = OpLoad %673 
                                       f32_3 %675 = OpVectorShuffle %674 %674 0 1 2 
                                       f32_3 %676 = OpFMul %671 %675 
                                                      OpStore %670 %676 
                                       f32_3 %677 = OpLoad %493 
                                       f32_3 %678 = OpVectorShuffle %677 %677 0 0 0 
                                       f32_3 %679 = OpLoad %670 
                                       f32_3 %680 = OpFMul %678 %679 
                                                      OpStore %493 %680 
                                       f32_3 %683 = OpLoad %528 
                                       f32_3 %685 = OpLoad %684 
                                       f32_3 %686 = OpFMul %683 %685 
                                       f32_3 %687 = OpLoad %493 
                                       f32_3 %688 = OpFAdd %686 %687 
                                       f32_4 %689 = OpLoad %682 
                                       f32_4 %690 = OpVectorShuffle %689 %688 4 5 6 3 
                                                      OpStore %682 %690 
                                Private f32* %691 = OpAccessChain %9 %202 
                                         f32 %692 = OpLoad %691 
                                 Output f32* %694 = OpAccessChain %682 %202 
                                                      OpStore %694 %692 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat2;
    u_xlat3.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat3.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    vs_TEXCOORD3.xy = u_xlat1.xy * vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _StepValue;
uniform 	float _SkyBoost;
uniform 	float _SkyPower;
uniform 	float _CurvePower;
uniform 	float _CurveColorFactor;
uniform 	float _CurveFreq;
uniform 	float _DitherCohesionFactor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = log2(vs_TEXCOORD3.y);
    u_xlat1.x = u_xlat1.x * _SkyPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat7.x = vs_TEXCOORD3.y * vs_TEXCOORD3.y;
    u_xlat1.x = u_xlat7.x * _SkyBoost + u_xlat1.x;
    u_xlatb7 = u_xlat1.x<0.0;
    u_xlat1.x = (u_xlatb7) ? -1.0 : u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * _OverrideColor.xyz;
    u_xlat19 = vs_TEXCOORD3.x * _CurveFreq;
    u_xlat19 = u_xlat19 * 3.1400001;
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 + 1.0;
    u_xlat2.x = _CurveColorFactor + _CurveColorFactor;
    u_xlat19 = u_xlat19 / u_xlat2.x;
    u_xlat19 = u_xlat19 + -1.0;
    u_xlat19 = _CurvePower * u_xlat19 + 1.0;
    u_xlat2.xyw = vec3(u_xlat19) * u_xlat1.yzx;
    u_xlat3.xyz = vs_TEXCOORD2.xyy * vec3(0.00999999978, 0.00999999978, 0.0799999982);
    u_xlat4.y = (-_Time.x) * 0.333333343 + u_xlat3.z;
    u_xlat4.x = vs_TEXCOORD2.x * 0.0799999982;
    u_xlat10_4 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat16_1 = log2(u_xlat10_4.x);
    u_xlat16_1 = u_xlat16_1 * 1.5;
    u_xlat16_1 = exp2(u_xlat16_1);
    u_xlatb15 = u_xlat2.x>=u_xlat2.y;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat2.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.yz * vec2(u_xlat19) + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat15) * u_xlat5 + u_xlat4;
    u_xlatb7 = u_xlat2.w>=u_xlat4.x;
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat2.wyx;
    u_xlat4 = (-u_xlat2) + u_xlat4;
    u_xlat2 = u_xlat7.xxxx * u_xlat4 + u_xlat2;
    u_xlat7.x = min(u_xlat2.y, u_xlat2.w);
    u_xlat7.x = (-u_xlat7.x) + u_xlat2.x;
    u_xlat13 = (-u_xlat2.y) + u_xlat2.w;
    u_xlat19 = u_xlat7.x * 6.0 + 1.00000001e-010;
    u_xlat13 = u_xlat13 / u_xlat19;
    u_xlat13 = u_xlat13 + u_xlat2.z;
    u_xlat19 = u_xlat2.x + 1.00000001e-010;
    u_xlat7.x = u_xlat7.x / u_xlat19;
    u_xlat1.x = (-u_xlat16_1) * 2.0 + u_xlat2.x;
    u_xlat19 = dot(u_xlat3.xy, vec2(12.9898005, 78.2330017));
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 * 43758.5469;
    u_xlat19 = fract(u_xlat19);
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat2.x = u_xlat3.y + u_xlat3.x;
    u_xlat8.x = u_xlat2.x + (-_Time.z);
    u_xlat8.x = sin(u_xlat8.x);
    u_xlat8.x = u_xlat8.x + 1.0;
    u_xlat8.x = u_xlat8.x * 0.5;
    u_xlat14.x = u_xlat2.x + _Time.z;
    u_xlat14.x = sin(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * 0.099999994 + 0.150000006;
    u_xlat8.x = u_xlat8.x * u_xlat14.x + 0.349999994;
    u_xlat2.x = u_xlat2.x * 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlatb2 = 0.25<u_xlat2.x;
    u_xlat1.x = u_xlat1.x / _StepValue;
    u_xlat14.x = (-u_xlat8.x) + u_xlat1.x;
    u_xlat14.x = (-u_xlat19) * _DitherCohesionFactor + u_xlat14.x;
    u_xlat14.x = ceil(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _StepValue;
    u_xlat1.x = u_xlat8.x + u_xlat1.x;
    u_xlat1.x = u_xlat19 * _DitherCohesionFactor + u_xlat1.x;
    u_xlat1.x = roundEven(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _StepValue;
    u_xlat1.x = (u_xlatb2) ? u_xlat14.x : u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat2.xyz = abs(vec3(u_xlat13)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat2.xyz = fract(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat2.xyz = abs(u_xlat2.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat19 = u_xlat0.x + -0.00999999978;
    u_xlat19 = u_xlat19 * 1000.0;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(0.5, 0.5, 0.5) + vec3(0.0299999993, 0.0, 0.0700000003);
    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
    u_xlat19 = u_xlat0.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat19) + u_xlat2.x;
    u_xlat19 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat19;
    u_xlat19 = u_xlat19 * _LightShadowData.z + _LightShadowData.w;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb8 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat8.xyz = (bool(u_xlatb8)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat8.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat14.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat14.x, u_xlat8.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat8.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat14.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat14.xy);
    u_xlat19 = u_xlat19 + u_xlat10_3.x;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat8.x = min(u_xlat19, u_xlat8.x);
    u_xlat19 = (u_xlatb2) ? u_xlat8.x : u_xlat19;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 372
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %152 %158 %159 %172 %211 %214 %333 %353 %365 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %159 Location 159 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate %211 Location 211 
                                                      OpDecorate %214 Location 214 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %353 Location 353 
                                                      OpDecorate %365 Location 365 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 6 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 8 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                              Private f32_4* %101 = OpVariable Private 
                                             %102 = OpTypeVector %6 2 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %146 %146 
                                             %151 = OpTypePointer Output %102 
                               Output f32_2* %152 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_2 %156 = OpConstantComposite %155 %155 
                               Output f32_2* %158 = OpVariable Output 
                                Input f32_4* %159 = OpVariable Input 
                                         i32 %162 = OpConstant 9 
                                             %171 = OpTypePointer Input %53 
                                Input f32_3* %172 = OpVariable Input 
                                         i32 %174 = OpConstant 7 
                                         u32 %179 = OpConstant 0 
                                             %180 = OpTypePointer Private %6 
                                         u32 %193 = OpConstant 2 
                                Private f32* %195 = OpVariable Private 
                                             %210 = OpTypePointer Output %53 
                               Output f32_3* %211 = OpVariable Output 
                               Output f32_3* %214 = OpVariable Output 
                              Private f32_4* %223 = OpVariable Private 
                              Private f32_4* %231 = OpVariable Private 
                                         f32 %267 = OpConstant 3.674022E-40 
                                       f32_4 %268 = OpConstantComposite %267 %267 %267 %267 
                                         i32 %273 = OpConstant 4 
                                       f32_4 %277 = OpConstantComposite %146 %146 %146 %146 
                                         f32 %285 = OpConstant 3.674022E-40 
                                       f32_4 %286 = OpConstantComposite %285 %285 %285 %285 
                                         i32 %293 = OpConstant 5 
                               Output f32_3* %333 = OpVariable Output 
                                             %338 = OpTypePointer Uniform %6 
                                         u32 %346 = OpConstant 3 
                               Output f32_4* %353 = OpVariable Output 
                               Output f32_4* %365 = OpVariable Output 
                                             %366 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %65 %92 
                                        f32_4 %98 = OpLoad %65 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                       f32_4 %103 = OpLoad %47 
                                       f32_2 %104 = OpVectorShuffle %103 %103 1 1 
                              Uniform f32_4* %105 = OpAccessChain %23 %68 %26 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %104 %107 
                                       f32_4 %109 = OpLoad %101 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 2 3 
                                                      OpStore %101 %110 
                              Uniform f32_4* %111 = OpAccessChain %23 %68 %31 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 0 1 
                                       f32_4 %114 = OpLoad %47 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 0 
                                       f32_2 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %101 
                                       f32_2 %118 = OpVectorShuffle %117 %117 0 1 
                                       f32_2 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %47 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 2 3 
                                                      OpStore %47 %121 
                              Uniform f32_4* %122 = OpAccessChain %23 %68 %39 
                                       f32_4 %123 = OpLoad %122 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_4 %125 = OpLoad %47 
                                       f32_2 %126 = OpVectorShuffle %125 %125 2 2 
                                       f32_2 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %47 
                                       f32_2 %129 = OpVectorShuffle %128 %128 0 1 
                                       f32_2 %130 = OpFAdd %127 %129 
                                       f32_4 %131 = OpLoad %47 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %47 %132 
                              Uniform f32_4* %133 = OpAccessChain %23 %68 %49 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_4 %136 = OpLoad %47 
                                       f32_2 %137 = OpVectorShuffle %136 %136 3 3 
                                       f32_2 %138 = OpFMul %135 %137 
                                       f32_4 %139 = OpLoad %47 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %47 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %47 %143 
                                       f32_4 %144 = OpLoad %47 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %47 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %47 %150 
                                       f32_4 %153 = OpLoad %47 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %157 = OpFMul %154 %156 
                                                      OpStore %152 %157 
                                       f32_4 %160 = OpLoad %159 
                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
                              Uniform f32_4* %163 = OpAccessChain %23 %162 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_2 %166 = OpFMul %161 %165 
                              Uniform f32_4* %167 = OpAccessChain %23 %162 
                                       f32_4 %168 = OpLoad %167 
                                       f32_2 %169 = OpVectorShuffle %168 %168 2 3 
                                       f32_2 %170 = OpFAdd %166 %169 
                                                      OpStore %158 %170 
                                       f32_3 %173 = OpLoad %172 
                              Uniform f32_4* %175 = OpAccessChain %23 %174 %31 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %173 %177 
                                Private f32* %181 = OpAccessChain %47 %179 
                                                      OpStore %181 %178 
                                       f32_3 %182 = OpLoad %172 
                              Uniform f32_4* %183 = OpAccessChain %23 %174 %26 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %187 = OpAccessChain %47 %93 
                                                      OpStore %187 %186 
                                       f32_3 %188 = OpLoad %172 
                              Uniform f32_4* %189 = OpAccessChain %23 %174 %39 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %188 %191 
                                Private f32* %194 = OpAccessChain %47 %193 
                                                      OpStore %194 %192 
                                       f32_4 %196 = OpLoad %47 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_4 %198 = OpLoad %47 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                         f32 %200 = OpDot %197 %199 
                                                      OpStore %195 %200 
                                         f32 %201 = OpLoad %195 
                                         f32 %202 = OpExtInst %1 32 %201 
                                                      OpStore %195 %202 
                                         f32 %203 = OpLoad %195 
                                       f32_3 %204 = OpCompositeConstruct %203 %203 %203 
                                       f32_4 %205 = OpLoad %47 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %47 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %47 %209 
                                       f32_4 %212 = OpLoad %47 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                                      OpStore %211 %213 
                                       f32_4 %215 = OpLoad %9 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                                      OpStore %214 %216 
                                       f32_4 %217 = OpLoad %9 
                                       f32_4 %218 = OpVectorShuffle %217 %217 1 1 1 1 
                                       f32_4 %219 = OpFNegate %218 
                              Uniform f32_4* %220 = OpAccessChain %23 %39 
                                       f32_4 %221 = OpLoad %220 
                                       f32_4 %222 = OpFAdd %219 %221 
                                                      OpStore %101 %222 
                                       f32_4 %224 = OpLoad %47 
                                       f32_4 %225 = OpVectorShuffle %224 %224 1 1 1 1 
                                       f32_4 %226 = OpLoad %101 
                                       f32_4 %227 = OpFMul %225 %226 
                                                      OpStore %223 %227 
                                       f32_4 %228 = OpLoad %101 
                                       f32_4 %229 = OpLoad %101 
                                       f32_4 %230 = OpFMul %228 %229 
                                                      OpStore %101 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %232 0 0 0 0 
                                       f32_4 %234 = OpFNegate %233 
                              Uniform f32_4* %235 = OpAccessChain %23 %26 
                                       f32_4 %236 = OpLoad %235 
                                       f32_4 %237 = OpFAdd %234 %236 
                                                      OpStore %231 %237 
                                       f32_4 %238 = OpLoad %9 
                                       f32_4 %239 = OpVectorShuffle %238 %238 2 2 2 2 
                                       f32_4 %240 = OpFNegate %239 
                              Uniform f32_4* %241 = OpAccessChain %23 %49 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpFAdd %240 %242 
                                                      OpStore %9 %243 
                                       f32_4 %244 = OpLoad %231 
                                       f32_4 %245 = OpLoad %47 
                                       f32_4 %246 = OpVectorShuffle %245 %245 0 0 0 0 
                                       f32_4 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %223 
                                       f32_4 %249 = OpFAdd %247 %248 
                                                      OpStore %223 %249 
                                       f32_4 %250 = OpLoad %9 
                                       f32_4 %251 = OpLoad %47 
                                       f32_4 %252 = OpVectorShuffle %251 %251 2 2 2 2 
                                       f32_4 %253 = OpFMul %250 %252 
                                       f32_4 %254 = OpLoad %223 
                                       f32_4 %255 = OpFAdd %253 %254 
                                                      OpStore %47 %255 
                                       f32_4 %256 = OpLoad %231 
                                       f32_4 %257 = OpLoad %231 
                                       f32_4 %258 = OpFMul %256 %257 
                                       f32_4 %259 = OpLoad %101 
                                       f32_4 %260 = OpFAdd %258 %259 
                                                      OpStore %101 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_4 %262 = OpLoad %9 
                                       f32_4 %263 = OpFMul %261 %262 
                                       f32_4 %264 = OpLoad %101 
                                       f32_4 %265 = OpFAdd %263 %264 
                                                      OpStore %9 %265 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %269 = OpExtInst %1 40 %266 %268 
                                                      OpStore %9 %269 
                                       f32_4 %270 = OpLoad %9 
                                       f32_4 %271 = OpExtInst %1 32 %270 
                                                      OpStore %101 %271 
                                       f32_4 %272 = OpLoad %9 
                              Uniform f32_4* %274 = OpAccessChain %23 %273 
                                       f32_4 %275 = OpLoad %274 
                                       f32_4 %276 = OpFMul %272 %275 
                                       f32_4 %278 = OpFAdd %276 %277 
                                                      OpStore %9 %278 
                                       f32_4 %279 = OpLoad %9 
                                       f32_4 %280 = OpFDiv %277 %279 
                                                      OpStore %9 %280 
                                       f32_4 %281 = OpLoad %47 
                                       f32_4 %282 = OpLoad %101 
                                       f32_4 %283 = OpFMul %281 %282 
                                                      OpStore %47 %283 
                                       f32_4 %284 = OpLoad %47 
                                       f32_4 %287 = OpExtInst %1 40 %284 %286 
                                                      OpStore %47 %287 
                                       f32_4 %288 = OpLoad %9 
                                       f32_4 %289 = OpLoad %47 
                                       f32_4 %290 = OpFMul %288 %289 
                                                      OpStore %9 %290 
                                       f32_4 %291 = OpLoad %9 
                                       f32_3 %292 = OpVectorShuffle %291 %291 1 1 1 
                              Uniform f32_4* %294 = OpAccessChain %23 %293 %26 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpFMul %292 %296 
                                       f32_4 %298 = OpLoad %47 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %47 %299 
                              Uniform f32_4* %300 = OpAccessChain %23 %293 %31 
                                       f32_4 %301 = OpLoad %300 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_4 %303 = OpLoad %9 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 0 0 
                                       f32_3 %305 = OpFMul %302 %304 
                                       f32_4 %306 = OpLoad %47 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFAdd %305 %307 
                                       f32_4 %309 = OpLoad %47 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %47 %310 
                              Uniform f32_4* %311 = OpAccessChain %23 %293 %39 
                                       f32_4 %312 = OpLoad %311 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_4 %314 = OpLoad %9 
                                       f32_3 %315 = OpVectorShuffle %314 %314 2 2 2 
                                       f32_3 %316 = OpFMul %313 %315 
                                       f32_4 %317 = OpLoad %47 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                       f32_3 %319 = OpFAdd %316 %318 
                                       f32_4 %320 = OpLoad %9 
                                       f32_4 %321 = OpVectorShuffle %320 %319 4 5 6 3 
                                                      OpStore %9 %321 
                              Uniform f32_4* %322 = OpAccessChain %23 %293 %49 
                                       f32_4 %323 = OpLoad %322 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                                       f32_4 %325 = OpLoad %9 
                                       f32_3 %326 = OpVectorShuffle %325 %325 3 3 3 
                                       f32_3 %327 = OpFMul %324 %326 
                                       f32_4 %328 = OpLoad %9 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                       f32_3 %330 = OpFAdd %327 %329 
                                       f32_4 %331 = OpLoad %9 
                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
                                                      OpStore %9 %332 
                                       f32_4 %334 = OpLoad %9 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                                      OpStore %333 %335 
                                Private f32* %336 = OpAccessChain %65 %93 
                                         f32 %337 = OpLoad %336 
                                Uniform f32* %339 = OpAccessChain %23 %31 %179 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %337 %340 
                                Private f32* %342 = OpAccessChain %9 %179 
                                                      OpStore %342 %341 
                                Private f32* %343 = OpAccessChain %9 %179 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFMul %344 %155 
                                Private f32* %347 = OpAccessChain %9 %346 
                                                      OpStore %347 %345 
                                       f32_4 %348 = OpLoad %65 
                                       f32_2 %349 = OpVectorShuffle %348 %348 0 3 
                                       f32_2 %350 = OpFMul %349 %156 
                                       f32_4 %351 = OpLoad %9 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 1 5 3 
                                                      OpStore %9 %352 
                                       f32_4 %354 = OpLoad %65 
                                       f32_2 %355 = OpVectorShuffle %354 %354 2 3 
                                       f32_4 %356 = OpLoad %353 
                                       f32_4 %357 = OpVectorShuffle %356 %355 0 1 4 5 
                                                      OpStore %353 %357 
                                       f32_4 %358 = OpLoad %9 
                                       f32_2 %359 = OpVectorShuffle %358 %358 2 2 
                                       f32_4 %360 = OpLoad %9 
                                       f32_2 %361 = OpVectorShuffle %360 %360 0 3 
                                       f32_2 %362 = OpFAdd %359 %361 
                                       f32_4 %363 = OpLoad %353 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 2 3 
                                                      OpStore %353 %364 
                                                      OpStore %365 %286 
                                 Output f32* %367 = OpAccessChain %97 %31 %93 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                 Output f32* %370 = OpAccessChain %97 %31 %93 
                                                      OpStore %370 %369 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 802
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %23 %139 %738 %788 %790 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 RelaxedPrecision 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 RelaxedPrecision 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpMemberDecorate %38 6 Offset 38 
                                                      OpMemberDecorate %38 7 Offset 38 
                                                      OpMemberDecorate %38 8 Offset 38 
                                                      OpMemberDecorate %38 9 Offset 38 
                                                      OpMemberDecorate %38 10 RelaxedPrecision 
                                                      OpMemberDecorate %38 10 Offset 38 
                                                      OpMemberDecorate %38 11 Offset 38 
                                                      OpMemberDecorate %38 12 Offset 38 
                                                      OpMemberDecorate %38 13 Offset 38 
                                                      OpMemberDecorate %38 14 Offset 38 
                                                      OpMemberDecorate %38 15 Offset 38 
                                                      OpMemberDecorate %38 16 Offset 38 
                                                      OpMemberDecorate %38 17 Offset 38 
                                                      OpMemberDecorate %38 18 Offset 38 
                                                      OpMemberDecorate %38 19 RelaxedPrecision 
                                                      OpMemberDecorate %38 19 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %163 DescriptorSet 163 
                                                      OpDecorate %163 Binding 163 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %623 SpecId 623 
                                                      OpDecorate %716 DescriptorSet 716 
                                                      OpDecorate %716 Binding 716 
                                                      OpDecorate %721 RelaxedPrecision 
                                                      OpDecorate %728 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %735 RelaxedPrecision 
                                                      OpDecorate %738 Location 738 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %745 DescriptorSet 745 
                                                      OpDecorate %745 Binding 745 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %749 RelaxedPrecision 
                                                      OpDecorate %750 RelaxedPrecision 
                                                      OpDecorate %753 RelaxedPrecision 
                                                      OpDecorate %757 RelaxedPrecision 
                                                      OpDecorate %758 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %763 RelaxedPrecision 
                                                      OpDecorate %764 RelaxedPrecision 
                                                      OpDecorate %771 RelaxedPrecision 
                                                      OpDecorate %774 RelaxedPrecision 
                                                      OpDecorate %775 RelaxedPrecision 
                                                      OpDecorate %780 RelaxedPrecision 
                                                      OpDecorate %781 RelaxedPrecision 
                                                      OpDecorate %783 RelaxedPrecision 
                                                      OpDecorate %784 RelaxedPrecision 
                                                      OpDecorate %785 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %788 RelaxedPrecision 
                                                      OpDecorate %788 Location 788 
                                                      OpDecorate %790 RelaxedPrecision 
                                                      OpDecorate %790 Location 790 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %793 RelaxedPrecision 
                                                      OpDecorate %798 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                                 Input f32_2* %23 = OpVariable Input 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                          u32 %35 = OpConstant 4 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeArray %7 %35 
                                              %38 = OpTypeStruct %7 %20 %7 %7 %7 %36 %7 %37 %20 %20 %7 %7 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 14 
                                              %43 = OpTypePointer Uniform %6 
                               Private f32_3* %52 = OpVariable Private 
                                          i32 %61 = OpConstant 13 
                                              %69 = OpTypeBool 
                                              %70 = OpTypePointer Private %69 
                                Private bool* %71 = OpVariable Private 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Function %6 
                                          f32 %81 = OpConstant 3.674022E-40 
                                          i32 %89 = OpConstant 11 
                                              %90 = OpTypePointer Uniform %7 
                                 Private f32* %95 = OpVariable Private 
                                          i32 %98 = OpConstant 17 
                                         f32 %103 = OpConstant 3.674022E-40 
                                         f32 %108 = OpConstant 3.674022E-40 
                              Private f32_4* %110 = OpVariable Private 
                                         i32 %111 = OpConstant 16 
                                         i32 %124 = OpConstant 15 
                              Private f32_3* %137 = OpVariable Private 
                                             %138 = OpTypePointer Input %20 
                                Input f32_3* %139 = OpVariable Input 
                                         f32 %142 = OpConstant 3.674022E-40 
                                         f32 %143 = OpConstant 3.674022E-40 
                                       f32_3 %144 = OpConstantComposite %142 %142 %143 
                              Private f32_4* %146 = OpVariable Private 
                                         i32 %147 = OpConstant 0 
                                         f32 %151 = OpConstant 3.674022E-40 
                                         u32 %153 = OpConstant 2 
                                Private f32* %162 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %163 = OpVariable UniformConstant 
                                Private f32* %169 = OpVariable Private 
                                         f32 %173 = OpConstant 3.674022E-40 
                               Private bool* %177 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                                         f32 %195 = OpConstant 3.674022E-40 
                                         u32 %196 = OpConstant 3 
                              Private f32_4* %198 = OpVariable Private 
                                             %261 = OpTypePointer Private %15 
                              Private f32_2* %262 = OpVariable Private 
                                         f32 %272 = OpConstant 3.674022E-40 
                                         f32 %274 = OpConstant 3.674022E-40 
                                         f32 %297 = OpConstant 3.674022E-40 
                                         f32 %305 = OpConstant 3.674022E-40 
                                         f32 %306 = OpConstant 3.674022E-40 
                                       f32_2 %307 = OpConstantComposite %305 %306 
                                         f32 %312 = OpConstant 3.674022E-40 
                                         f32 %317 = OpConstant 3.674022E-40 
                                Private f32* %325 = OpVariable Private 
                                         f32 %337 = OpConstant 3.674022E-40 
                                Private f32* %339 = OpVariable Private 
                                         f32 %348 = OpConstant 3.674022E-40 
                                         f32 %350 = OpConstant 3.674022E-40 
                                         f32 %355 = OpConstant 3.674022E-40 
                               Private bool* %365 = OpVariable Private 
                                         f32 %366 = OpConstant 3.674022E-40 
                                         i32 %372 = OpConstant 12 
                                         i32 %384 = OpConstant 18 
                                       f32_3 %436 = OpConstantComposite %108 %195 %151 
                                       f32_3 %447 = OpConstantComposite %272 %272 %272 
                                         f32 %449 = OpConstant 3.674022E-40 
                                       f32_3 %450 = OpConstantComposite %449 %449 %449 
                                       f32_3 %457 = OpConstantComposite %81 %81 %81 
                                       f32_3 %478 = OpConstantComposite %108 %108 %108 
                                       f32_3 %485 = OpConstantComposite %337 %337 %337 
                              Private f32_3* %489 = OpVariable Private 
                                         f32 %492 = OpConstant 3.674022E-40 
                                         f32 %497 = OpConstant 3.674022E-40 
                                         f32 %507 = OpConstant 3.674022E-40 
                                         f32 %508 = OpConstant 3.674022E-40 
                                       f32_3 %509 = OpConstantComposite %507 %74 %508 
                              Private f32_3* %518 = OpVariable Private 
                                       f32_3 %521 = OpConstantComposite %297 %297 %297 
                                         i32 %527 = OpConstant 19 
                               Private bool* %533 = OpVariable Private 
                                         i32 %538 = OpConstant 1 
                                         i32 %540 = OpConstant -1 
                                             %548 = OpTypePointer Uniform %20 
                                         i32 %552 = OpConstant 5 
                                         i32 %559 = OpConstant 2 
                                         i32 %569 = OpConstant 4 
                                         i32 %601 = OpConstant 3 
                                         i32 %613 = OpConstant 6 
                                        bool %617 = OpConstantFalse 
                                        bool %623 = OpSpecConstantFalse 
                               Private bool* %626 = OpVariable Private 
                                         i32 %632 = OpConstant 7 
                                             %669 = OpTypePointer Function %20 
                                         i32 %683 = OpConstant 9 
                                         i32 %692 = OpConstant 8 
                                         f32 %701 = OpConstant 3.674022E-40 
                                             %713 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %714 = OpTypeSampledImage %713 
                                             %715 = OpTypePointer UniformConstant %714 
 UniformConstant read_only Texture3DSampled* %716 = OpVariable UniformConstant 
                              Private f32_4* %721 = OpVariable Private 
                                             %737 = OpTypePointer Input %7 
                                Input f32_4* %738 = OpVariable Input 
                                Private f32* %744 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %745 = OpVariable UniformConstant 
                              Private f32_3* %750 = OpVariable Private 
                                         i32 %778 = OpConstant 10 
                                             %787 = OpTypePointer Output %7 
                               Output f32_4* %788 = OpVariable Output 
                                Input f32_3* %790 = OpVariable Input 
                                             %799 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %77 = OpVariable Function 
                               Function f32* %184 = OpVariable Function 
                               Function f32* %223 = OpVariable Function 
                               Function f32* %419 = OpVariable Function 
                             Function f32_3* %670 = OpVariable Function 
                               Function f32* %766 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                   Input f32* %27 = OpAccessChain %23 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpExtInst %1 30 %28 
                                 Private f32* %32 = OpAccessChain %22 %30 
                                                      OpStore %32 %29 
                                 Private f32* %33 = OpAccessChain %22 %30 
                                          f32 %34 = OpLoad %33 
                                 Uniform f32* %44 = OpAccessChain %40 %42 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %34 %45 
                                 Private f32* %47 = OpAccessChain %22 %30 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %22 %30 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpExtInst %1 29 %49 
                                 Private f32* %51 = OpAccessChain %22 %30 
                                                      OpStore %51 %50 
                                   Input f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                   Input f32* %55 = OpAccessChain %23 %25 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFMul %54 %56 
                                 Private f32* %58 = OpAccessChain %52 %30 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %52 %30 
                                          f32 %60 = OpLoad %59 
                                 Uniform f32* %62 = OpAccessChain %40 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFMul %60 %63 
                                 Private f32* %65 = OpAccessChain %22 %30 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFAdd %64 %66 
                                 Private f32* %68 = OpAccessChain %22 %30 
                                                      OpStore %68 %67 
                                 Private f32* %72 = OpAccessChain %22 %30 
                                          f32 %73 = OpLoad %72 
                                         bool %75 = OpFOrdLessThan %73 %74 
                                                      OpStore %71 %75 
                                         bool %78 = OpLoad %71 
                                                      OpSelectionMerge %80 None 
                                                      OpBranchConditional %78 %79 %82 
                                              %79 = OpLabel 
                                                      OpStore %77 %81 
                                                      OpBranch %80 
                                              %82 = OpLabel 
                                 Private f32* %83 = OpAccessChain %22 %30 
                                          f32 %84 = OpLoad %83 
                                                      OpStore %77 %84 
                                                      OpBranch %80 
                                              %80 = OpLabel 
                                          f32 %85 = OpLoad %77 
                                 Private f32* %86 = OpAccessChain %22 %30 
                                                      OpStore %86 %85 
                                        f32_3 %87 = OpLoad %22 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 0 0 
                               Uniform f32_4* %91 = OpAccessChain %40 %89 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFMul %88 %93 
                                                      OpStore %22 %94 
                                   Input f32* %96 = OpAccessChain %23 %30 
                                          f32 %97 = OpLoad %96 
                                 Uniform f32* %99 = OpAccessChain %40 %98 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFMul %97 %100 
                                                      OpStore %95 %101 
                                         f32 %102 = OpLoad %95 
                                         f32 %104 = OpFMul %102 %103 
                                                      OpStore %95 %104 
                                         f32 %105 = OpLoad %95 
                                         f32 %106 = OpExtInst %1 13 %105 
                                                      OpStore %95 %106 
                                         f32 %107 = OpLoad %95 
                                         f32 %109 = OpFAdd %107 %108 
                                                      OpStore %95 %109 
                                Uniform f32* %112 = OpAccessChain %40 %111 
                                         f32 %113 = OpLoad %112 
                                Uniform f32* %114 = OpAccessChain %40 %111 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpFAdd %113 %115 
                                Private f32* %117 = OpAccessChain %110 %30 
                                                      OpStore %117 %116 
                                         f32 %118 = OpLoad %95 
                                Private f32* %119 = OpAccessChain %110 %30 
                                         f32 %120 = OpLoad %119 
                                         f32 %121 = OpFDiv %118 %120 
                                                      OpStore %95 %121 
                                         f32 %122 = OpLoad %95 
                                         f32 %123 = OpFAdd %122 %81 
                                                      OpStore %95 %123 
                                Uniform f32* %125 = OpAccessChain %40 %124 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpLoad %95 
                                         f32 %128 = OpFMul %126 %127 
                                         f32 %129 = OpFAdd %128 %108 
                                                      OpStore %95 %129 
                                         f32 %130 = OpLoad %95 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_3 %132 = OpLoad %22 
                                       f32_3 %133 = OpVectorShuffle %132 %132 1 2 0 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %110 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 6 
                                                      OpStore %110 %136 
                                       f32_3 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 1 
                                       f32_3 %145 = OpFMul %141 %144 
                                                      OpStore %137 %145 
                                Uniform f32* %148 = OpAccessChain %40 %147 %30 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFNegate %149 
                                         f32 %152 = OpFMul %150 %151 
                                Private f32* %154 = OpAccessChain %137 %153 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFAdd %152 %155 
                                Private f32* %157 = OpAccessChain %146 %25 
                                                      OpStore %157 %156 
                                  Input f32* %158 = OpAccessChain %139 %30 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %159 %143 
                                Private f32* %161 = OpAccessChain %146 %30 
                                                      OpStore %161 %160 
                  read_only Texture2DSampled %164 = OpLoad %163 
                                       f32_4 %165 = OpLoad %146 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_4 %167 = OpImageSampleImplicitLod %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                                      OpStore %162 %168 
                                         f32 %170 = OpLoad %162 
                                         f32 %171 = OpExtInst %1 30 %170 
                                                      OpStore %169 %171 
                                         f32 %172 = OpLoad %169 
                                         f32 %174 = OpFMul %172 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 29 %175 
                                                      OpStore %169 %176 
                                Private f32* %178 = OpAccessChain %110 %30 
                                         f32 %179 = OpLoad %178 
                                Private f32* %180 = OpAccessChain %110 %25 
                                         f32 %181 = OpLoad %180 
                                        bool %182 = OpFOrdGreaterThanEqual %179 %181 
                                                      OpStore %177 %182 
                                        bool %185 = OpLoad %177 
                                                      OpSelectionMerge %187 None 
                                                      OpBranchConditional %185 %186 %188 
                                             %186 = OpLabel 
                                                      OpStore %184 %108 
                                                      OpBranch %187 
                                             %188 = OpLabel 
                                                      OpStore %184 %74 
                                                      OpBranch %187 
                                             %187 = OpLabel 
                                         f32 %189 = OpLoad %184 
                                                      OpStore %183 %189 
                                       f32_4 %190 = OpLoad %110 
                                       f32_2 %191 = OpVectorShuffle %190 %190 1 0 
                                       f32_4 %192 = OpLoad %146 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 2 3 
                                                      OpStore %146 %193 
                                Private f32* %194 = OpAccessChain %146 %153 
                                                      OpStore %194 %81 
                                Private f32* %197 = OpAccessChain %146 %196 
                                                      OpStore %197 %195 
                                       f32_3 %199 = OpLoad %22 
                                       f32_2 %200 = OpVectorShuffle %199 %199 1 2 
                                         f32 %201 = OpLoad %95 
                                       f32_2 %202 = OpCompositeConstruct %201 %201 
                                       f32_2 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %146 
                                       f32_2 %205 = OpVectorShuffle %204 %204 0 1 
                                       f32_2 %206 = OpFNegate %205 
                                       f32_2 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %198 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 2 3 
                                                      OpStore %198 %209 
                                Private f32* %210 = OpAccessChain %198 %153 
                                                      OpStore %210 %108 
                                Private f32* %211 = OpAccessChain %198 %196 
                                                      OpStore %211 %81 
                                         f32 %212 = OpLoad %183 
                                       f32_4 %213 = OpCompositeConstruct %212 %212 %212 %212 
                                       f32_4 %214 = OpLoad %198 
                                       f32_4 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %146 
                                       f32_4 %217 = OpFAdd %215 %216 
                                                      OpStore %146 %217 
                                Private f32* %218 = OpAccessChain %110 %196 
                                         f32 %219 = OpLoad %218 
                                Private f32* %220 = OpAccessChain %146 %30 
                                         f32 %221 = OpLoad %220 
                                        bool %222 = OpFOrdGreaterThanEqual %219 %221 
                                                      OpStore %71 %222 
                                        bool %224 = OpLoad %71 
                                                      OpSelectionMerge %226 None 
                                                      OpBranchConditional %224 %225 %227 
                                             %225 = OpLabel 
                                                      OpStore %223 %108 
                                                      OpBranch %226 
                                             %227 = OpLabel 
                                                      OpStore %223 %74 
                                                      OpBranch %226 
                                             %226 = OpLabel 
                                         f32 %228 = OpLoad %223 
                                Private f32* %229 = OpAccessChain %52 %30 
                                                      OpStore %229 %228 
                                       f32_4 %230 = OpLoad %146 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 3 
                                       f32_4 %232 = OpLoad %110 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %110 %233 
                                       f32_4 %234 = OpLoad %110 
                                       f32_3 %235 = OpVectorShuffle %234 %234 3 1 0 
                                       f32_4 %236 = OpLoad %146 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 2 6 
                                                      OpStore %146 %237 
                                       f32_4 %238 = OpLoad %110 
                                       f32_4 %239 = OpFNegate %238 
                                       f32_4 %240 = OpLoad %146 
                                       f32_4 %241 = OpFAdd %239 %240 
                                                      OpStore %146 %241 
                                       f32_3 %242 = OpLoad %52 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpLoad %146 
                                       f32_4 %245 = OpFMul %243 %244 
                                       f32_4 %246 = OpLoad %110 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %110 %247 
                                Private f32* %248 = OpAccessChain %110 %25 
                                         f32 %249 = OpLoad %248 
                                Private f32* %250 = OpAccessChain %110 %196 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpExtInst %1 37 %249 %251 
                                Private f32* %253 = OpAccessChain %52 %30 
                                                      OpStore %253 %252 
                                Private f32* %254 = OpAccessChain %52 %30 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFNegate %255 
                                Private f32* %257 = OpAccessChain %110 %30 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %52 %30 
                                                      OpStore %260 %259 
                                Private f32* %263 = OpAccessChain %110 %25 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFNegate %264 
                                Private f32* %266 = OpAccessChain %110 %196 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFAdd %265 %267 
                                Private f32* %269 = OpAccessChain %262 %30 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %52 %30 
                                         f32 %271 = OpLoad %270 
                                         f32 %273 = OpFMul %271 %272 
                                         f32 %275 = OpFAdd %273 %274 
                                                      OpStore %95 %275 
                                Private f32* %276 = OpAccessChain %262 %30 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpLoad %95 
                                         f32 %279 = OpFDiv %277 %278 
                                Private f32* %280 = OpAccessChain %262 %30 
                                                      OpStore %280 %279 
                                Private f32* %281 = OpAccessChain %262 %30 
                                         f32 %282 = OpLoad %281 
                                Private f32* %283 = OpAccessChain %110 %153 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFAdd %282 %284 
                                Private f32* %286 = OpAccessChain %262 %30 
                                                      OpStore %286 %285 
                                Private f32* %287 = OpAccessChain %110 %30 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFAdd %288 %274 
                                                      OpStore %95 %289 
                                Private f32* %290 = OpAccessChain %52 %30 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpLoad %95 
                                         f32 %293 = OpFDiv %291 %292 
                                Private f32* %294 = OpAccessChain %52 %30 
                                                      OpStore %294 %293 
                                         f32 %295 = OpLoad %169 
                                         f32 %296 = OpFNegate %295 
                                         f32 %298 = OpFMul %296 %297 
                                Private f32* %299 = OpAccessChain %110 %30 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFAdd %298 %300 
                                Private f32* %302 = OpAccessChain %22 %30 
                                                      OpStore %302 %301 
                                       f32_3 %303 = OpLoad %137 
                                       f32_2 %304 = OpVectorShuffle %303 %303 0 1 
                                         f32 %308 = OpDot %304 %307 
                                                      OpStore %95 %308 
                                         f32 %309 = OpLoad %95 
                                         f32 %310 = OpExtInst %1 13 %309 
                                                      OpStore %95 %310 
                                         f32 %311 = OpLoad %95 
                                         f32 %313 = OpFMul %311 %312 
                                                      OpStore %95 %313 
                                         f32 %314 = OpLoad %95 
                                         f32 %315 = OpExtInst %1 10 %314 
                                                      OpStore %95 %315 
                                         f32 %316 = OpLoad %95 
                                         f32 %318 = OpFAdd %316 %317 
                                                      OpStore %95 %318 
                                Private f32* %319 = OpAccessChain %137 %25 
                                         f32 %320 = OpLoad %319 
                                Private f32* %321 = OpAccessChain %137 %30 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFAdd %320 %322 
                                Private f32* %324 = OpAccessChain %110 %30 
                                                      OpStore %324 %323 
                                Private f32* %326 = OpAccessChain %110 %30 
                                         f32 %327 = OpLoad %326 
                                Uniform f32* %328 = OpAccessChain %40 %147 %153 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFNegate %329 
                                         f32 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                         f32 %332 = OpLoad %325 
                                         f32 %333 = OpExtInst %1 13 %332 
                                                      OpStore %325 %333 
                                         f32 %334 = OpLoad %325 
                                         f32 %335 = OpFAdd %334 %108 
                                                      OpStore %325 %335 
                                         f32 %336 = OpLoad %325 
                                         f32 %338 = OpFMul %336 %337 
                                                      OpStore %325 %338 
                                Private f32* %340 = OpAccessChain %110 %30 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %40 %147 %153 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %341 %343 
                                                      OpStore %339 %344 
                                         f32 %345 = OpLoad %339 
                                         f32 %346 = OpExtInst %1 13 %345 
                                                      OpStore %339 %346 
                                         f32 %347 = OpLoad %339 
                                         f32 %349 = OpFMul %347 %348 
                                         f32 %351 = OpFAdd %349 %350 
                                                      OpStore %339 %351 
                                         f32 %352 = OpLoad %325 
                                         f32 %353 = OpLoad %339 
                                         f32 %354 = OpFMul %352 %353 
                                         f32 %356 = OpFAdd %354 %355 
                                                      OpStore %325 %356 
                                Private f32* %357 = OpAccessChain %110 %30 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpFMul %358 %337 
                                Private f32* %360 = OpAccessChain %110 %30 
                                                      OpStore %360 %359 
                                Private f32* %361 = OpAccessChain %110 %30 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpExtInst %1 10 %362 
                                Private f32* %364 = OpAccessChain %110 %30 
                                                      OpStore %364 %363 
                                Private f32* %367 = OpAccessChain %110 %30 
                                         f32 %368 = OpLoad %367 
                                        bool %369 = OpFOrdLessThan %366 %368 
                                                      OpStore %365 %369 
                                Private f32* %370 = OpAccessChain %22 %30 
                                         f32 %371 = OpLoad %370 
                                Uniform f32* %373 = OpAccessChain %40 %372 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFDiv %371 %374 
                                Private f32* %376 = OpAccessChain %22 %30 
                                                      OpStore %376 %375 
                                         f32 %377 = OpLoad %325 
                                         f32 %378 = OpFNegate %377 
                                Private f32* %379 = OpAccessChain %22 %30 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFAdd %378 %380 
                                                      OpStore %339 %381 
                                         f32 %382 = OpLoad %95 
                                         f32 %383 = OpFNegate %382 
                                Uniform f32* %385 = OpAccessChain %40 %384 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %383 %386 
                                         f32 %388 = OpLoad %339 
                                         f32 %389 = OpFAdd %387 %388 
                                                      OpStore %339 %389 
                                         f32 %390 = OpLoad %339 
                                         f32 %391 = OpExtInst %1 9 %390 
                                                      OpStore %339 %391 
                                         f32 %392 = OpLoad %339 
                                Uniform f32* %393 = OpAccessChain %40 %372 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFMul %392 %394 
                                                      OpStore %339 %395 
                                         f32 %396 = OpLoad %325 
                                Private f32* %397 = OpAccessChain %22 %30 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFAdd %396 %398 
                                Private f32* %400 = OpAccessChain %22 %30 
                                                      OpStore %400 %399 
                                         f32 %401 = OpLoad %95 
                                Uniform f32* %402 = OpAccessChain %40 %384 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %401 %403 
                                Private f32* %405 = OpAccessChain %22 %30 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFAdd %404 %406 
                                Private f32* %408 = OpAccessChain %22 %30 
                                                      OpStore %408 %407 
                                Private f32* %409 = OpAccessChain %22 %30 
                                         f32 %410 = OpLoad %409 
                                         f32 %411 = OpExtInst %1 2 %410 
                                Private f32* %412 = OpAccessChain %22 %30 
                                                      OpStore %412 %411 
                                Private f32* %413 = OpAccessChain %22 %30 
                                         f32 %414 = OpLoad %413 
                                Uniform f32* %415 = OpAccessChain %40 %372 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpFMul %414 %416 
                                Private f32* %418 = OpAccessChain %22 %30 
                                                      OpStore %418 %417 
                                        bool %420 = OpLoad %365 
                                                      OpSelectionMerge %422 None 
                                                      OpBranchConditional %420 %421 %424 
                                             %421 = OpLabel 
                                         f32 %423 = OpLoad %339 
                                                      OpStore %419 %423 
                                                      OpBranch %422 
                                             %424 = OpLabel 
                                Private f32* %425 = OpAccessChain %22 %30 
                                         f32 %426 = OpLoad %425 
                                                      OpStore %419 %426 
                                                      OpBranch %422 
                                             %422 = OpLabel 
                                         f32 %427 = OpLoad %419 
                                Private f32* %428 = OpAccessChain %22 %30 
                                                      OpStore %428 %427 
                                Private f32* %429 = OpAccessChain %22 %30 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpExtInst %1 40 %430 %74 
                                Private f32* %432 = OpAccessChain %22 %30 
                                                      OpStore %432 %431 
                                       f32_2 %433 = OpLoad %262 
                                       f32_3 %434 = OpVectorShuffle %433 %433 0 0 0 
                                       f32_3 %435 = OpExtInst %1 4 %434 
                                       f32_3 %437 = OpFAdd %435 %436 
                                       f32_4 %438 = OpLoad %110 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 5 6 3 
                                                      OpStore %110 %439 
                                       f32_4 %440 = OpLoad %110 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpExtInst %1 10 %441 
                                       f32_4 %443 = OpLoad %110 
                                       f32_4 %444 = OpVectorShuffle %443 %442 4 5 6 3 
                                                      OpStore %110 %444 
                                       f32_4 %445 = OpLoad %110 
                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
                                       f32_3 %448 = OpFMul %446 %447 
                                       f32_3 %451 = OpFAdd %448 %450 
                                       f32_4 %452 = OpLoad %110 
                                       f32_4 %453 = OpVectorShuffle %452 %451 4 5 6 3 
                                                      OpStore %110 %453 
                                       f32_4 %454 = OpLoad %110 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_3 %456 = OpExtInst %1 4 %455 
                                       f32_3 %458 = OpFAdd %456 %457 
                                       f32_4 %459 = OpLoad %110 
                                       f32_4 %460 = OpVectorShuffle %459 %458 4 5 6 3 
                                                      OpStore %110 %460 
                                       f32_4 %461 = OpLoad %110 
                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 2 
                                       f32_3 %463 = OpCompositeConstruct %74 %74 %74 
                                       f32_3 %464 = OpCompositeConstruct %108 %108 %108 
                                       f32_3 %465 = OpExtInst %1 43 %462 %463 %464 
                                       f32_4 %466 = OpLoad %110 
                                       f32_4 %467 = OpVectorShuffle %466 %465 4 5 6 3 
                                                      OpStore %110 %467 
                                       f32_4 %468 = OpLoad %110 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
                                       f32_3 %470 = OpFAdd %469 %457 
                                       f32_4 %471 = OpLoad %110 
                                       f32_4 %472 = OpVectorShuffle %471 %470 4 5 6 3 
                                                      OpStore %110 %472 
                                       f32_3 %473 = OpLoad %52 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 0 0 
                                       f32_4 %475 = OpLoad %110 
                                       f32_3 %476 = OpVectorShuffle %475 %475 0 1 2 
                                       f32_3 %477 = OpFMul %474 %476 
                                       f32_3 %479 = OpFAdd %477 %478 
                                                      OpStore %52 %479 
                                       f32_3 %480 = OpLoad %52 
                                       f32_3 %481 = OpLoad %22 
                                       f32_3 %482 = OpVectorShuffle %481 %481 0 0 0 
                                       f32_3 %483 = OpFMul %480 %482 
                                                      OpStore %22 %483 
                                       f32_3 %484 = OpLoad %22 
                                       f32_3 %486 = OpFMul %484 %485 
                                       f32_4 %487 = OpLoad %110 
                                       f32_4 %488 = OpVectorShuffle %487 %486 4 5 6 3 
                                                      OpStore %110 %488 
                                Private f32* %490 = OpAccessChain %9 %30 
                                         f32 %491 = OpLoad %490 
                                         f32 %493 = OpFAdd %491 %492 
                                Private f32* %494 = OpAccessChain %489 %30 
                                                      OpStore %494 %493 
                                Private f32* %495 = OpAccessChain %489 %30 
                                         f32 %496 = OpLoad %495 
                                         f32 %498 = OpFMul %496 %497 
                                Private f32* %499 = OpAccessChain %489 %30 
                                                      OpStore %499 %498 
                                Private f32* %500 = OpAccessChain %489 %30 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpExtInst %1 43 %501 %74 %108 
                                Private f32* %503 = OpAccessChain %489 %30 
                                                      OpStore %503 %502 
                                       f32_3 %504 = OpLoad %22 
                                       f32_3 %505 = OpFNegate %504 
                                       f32_3 %506 = OpFMul %505 %485 
                                       f32_3 %510 = OpFAdd %506 %509 
                                                      OpStore %22 %510 
                                       f32_3 %511 = OpLoad %489 
                                       f32_3 %512 = OpVectorShuffle %511 %511 0 0 0 
                                       f32_3 %513 = OpLoad %22 
                                       f32_3 %514 = OpFMul %512 %513 
                                       f32_4 %515 = OpLoad %110 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
                                       f32_3 %517 = OpFAdd %514 %516 
                                                      OpStore %22 %517 
                                       f32_4 %519 = OpLoad %9 
                                       f32_3 %520 = OpVectorShuffle %519 %519 0 1 2 
                                       f32_3 %522 = OpFMul %520 %521 
                                       f32_3 %523 = OpLoad %22 
                                       f32_3 %524 = OpFAdd %522 %523 
                                                      OpStore %518 %524 
                                Private f32* %525 = OpAccessChain %9 %196 
                                         f32 %526 = OpLoad %525 
                                Uniform f32* %528 = OpAccessChain %40 %527 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpFNegate %529 
                                         f32 %531 = OpFAdd %526 %530 
                                Private f32* %532 = OpAccessChain %489 %30 
                                                      OpStore %532 %531 
                                Private f32* %534 = OpAccessChain %489 %30 
                                         f32 %535 = OpLoad %534 
                                        bool %536 = OpFOrdLessThan %535 %74 
                                                      OpStore %533 %536 
                                        bool %537 = OpLoad %533 
                                         i32 %539 = OpSelect %537 %538 %147 
                                         i32 %541 = OpIMul %539 %540 
                                        bool %542 = OpINotEqual %541 %147 
                                                      OpSelectionMerge %544 None 
                                                      OpBranchConditional %542 %543 %544 
                                             %543 = OpLabel 
                                                      OpKill
                                             %544 = OpLabel 
                                       f32_3 %546 = OpLoad %139 
                                       f32_3 %547 = OpFNegate %546 
                              Uniform f32_3* %549 = OpAccessChain %40 %538 
                                       f32_3 %550 = OpLoad %549 
                                       f32_3 %551 = OpFAdd %547 %550 
                                                      OpStore %22 %551 
                                Uniform f32* %553 = OpAccessChain %40 %552 %147 %153 
                                         f32 %554 = OpLoad %553 
                                Private f32* %555 = OpAccessChain %110 %30 
                                                      OpStore %555 %554 
                                Uniform f32* %556 = OpAccessChain %40 %552 %538 %153 
                                         f32 %557 = OpLoad %556 
                                Private f32* %558 = OpAccessChain %110 %25 
                                                      OpStore %558 %557 
                                Uniform f32* %560 = OpAccessChain %40 %552 %559 %153 
                                         f32 %561 = OpLoad %560 
                                Private f32* %562 = OpAccessChain %110 %153 
                                                      OpStore %562 %561 
                                       f32_3 %563 = OpLoad %22 
                                       f32_4 %564 = OpLoad %110 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                                         f32 %566 = OpDot %563 %565 
                                Private f32* %567 = OpAccessChain %22 %30 
                                                      OpStore %567 %566 
                                       f32_3 %568 = OpLoad %139 
                              Uniform f32_4* %570 = OpAccessChain %40 %569 
                                       f32_4 %571 = OpLoad %570 
                                       f32_3 %572 = OpVectorShuffle %571 %571 0 1 2 
                                       f32_3 %573 = OpFNegate %572 
                                       f32_3 %574 = OpFAdd %568 %573 
                                                      OpStore %52 %574 
                                       f32_3 %575 = OpLoad %52 
                                       f32_3 %576 = OpLoad %52 
                                         f32 %577 = OpDot %575 %576 
                                Private f32* %578 = OpAccessChain %52 %30 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %52 %30 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpExtInst %1 31 %580 
                                Private f32* %582 = OpAccessChain %52 %30 
                                                      OpStore %582 %581 
                                Private f32* %583 = OpAccessChain %22 %30 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFNegate %584 
                                Private f32* %586 = OpAccessChain %52 %30 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpFAdd %585 %587 
                                Private f32* %589 = OpAccessChain %52 %30 
                                                      OpStore %589 %588 
                                Uniform f32* %590 = OpAccessChain %40 %569 %196 
                                         f32 %591 = OpLoad %590 
                                Private f32* %592 = OpAccessChain %52 %30 
                                         f32 %593 = OpLoad %592 
                                         f32 %594 = OpFMul %591 %593 
                                Private f32* %595 = OpAccessChain %22 %30 
                                         f32 %596 = OpLoad %595 
                                         f32 %597 = OpFAdd %594 %596 
                                Private f32* %598 = OpAccessChain %22 %30 
                                                      OpStore %598 %597 
                                Private f32* %599 = OpAccessChain %22 %30 
                                         f32 %600 = OpLoad %599 
                                Uniform f32* %602 = OpAccessChain %40 %601 %153 
                                         f32 %603 = OpLoad %602 
                                         f32 %604 = OpFMul %600 %603 
                                Uniform f32* %605 = OpAccessChain %40 %601 %196 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpFAdd %604 %606 
                                Private f32* %608 = OpAccessChain %22 %30 
                                                      OpStore %608 %607 
                                Private f32* %609 = OpAccessChain %22 %30 
                                         f32 %610 = OpLoad %609 
                                         f32 %611 = OpExtInst %1 43 %610 %74 %108 
                                Private f32* %612 = OpAccessChain %22 %30 
                                                      OpStore %612 %611 
                                Uniform f32* %614 = OpAccessChain %40 %613 %30 
                                         f32 %615 = OpLoad %614 
                                        bool %616 = OpFOrdEqual %615 %108 
                                                      OpStore %71 %616 
                                                      OpSelectionMerge %619 None 
                                                      OpBranchConditional %617 %618 %619 
                                             %618 = OpLabel 
                                        bool %620 = OpLoad %71 
                                                      OpSelectionMerge %622 None 
                                                      OpBranchConditional %620 %621 %622 
                                             %621 = OpLabel 
                                                      OpBranch %622 
                                             %622 = OpLabel 
                                                      OpBranch %619 
                                             %619 = OpLabel 
                                                      OpSelectionMerge %625 None 
                                                      OpBranchConditional %623 %624 %723 
                                             %624 = OpLabel 
                                Uniform f32* %627 = OpAccessChain %40 %613 %25 
                                         f32 %628 = OpLoad %627 
                                        bool %629 = OpFOrdEqual %628 %108 
                                                      OpStore %626 %629 
                                       f32_3 %630 = OpLoad %139 
                                       f32_3 %631 = OpVectorShuffle %630 %630 1 1 1 
                              Uniform f32_4* %633 = OpAccessChain %40 %632 %538 
                                       f32_4 %634 = OpLoad %633 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                       f32_3 %636 = OpFMul %631 %635 
                                       f32_4 %637 = OpLoad %110 
                                       f32_4 %638 = OpVectorShuffle %637 %636 4 5 6 3 
                                                      OpStore %110 %638 
                              Uniform f32_4* %639 = OpAccessChain %40 %632 %147 
                                       f32_4 %640 = OpLoad %639 
                                       f32_3 %641 = OpVectorShuffle %640 %640 0 1 2 
                                       f32_3 %642 = OpLoad %139 
                                       f32_3 %643 = OpVectorShuffle %642 %642 0 0 0 
                                       f32_3 %644 = OpFMul %641 %643 
                                       f32_4 %645 = OpLoad %110 
                                       f32_3 %646 = OpVectorShuffle %645 %645 0 1 2 
                                       f32_3 %647 = OpFAdd %644 %646 
                                       f32_4 %648 = OpLoad %110 
                                       f32_4 %649 = OpVectorShuffle %648 %647 4 5 6 3 
                                                      OpStore %110 %649 
                              Uniform f32_4* %650 = OpAccessChain %40 %632 %559 
                                       f32_4 %651 = OpLoad %650 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 1 2 
                                       f32_3 %653 = OpLoad %139 
                                       f32_3 %654 = OpVectorShuffle %653 %653 2 2 2 
                                       f32_3 %655 = OpFMul %652 %654 
                                       f32_4 %656 = OpLoad %110 
                                       f32_3 %657 = OpVectorShuffle %656 %656 0 1 2 
                                       f32_3 %658 = OpFAdd %655 %657 
                                       f32_4 %659 = OpLoad %110 
                                       f32_4 %660 = OpVectorShuffle %659 %658 4 5 6 3 
                                                      OpStore %110 %660 
                                       f32_4 %661 = OpLoad %110 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 2 
                              Uniform f32_4* %663 = OpAccessChain %40 %632 %601 
                                       f32_4 %664 = OpLoad %663 
                                       f32_3 %665 = OpVectorShuffle %664 %664 0 1 2 
                                       f32_3 %666 = OpFAdd %662 %665 
                                       f32_4 %667 = OpLoad %110 
                                       f32_4 %668 = OpVectorShuffle %667 %666 4 5 6 3 
                                                      OpStore %110 %668 
                                        bool %671 = OpLoad %626 
                                                      OpSelectionMerge %673 None 
                                                      OpBranchConditional %671 %672 %676 
                                             %672 = OpLabel 
                                       f32_4 %674 = OpLoad %110 
                                       f32_3 %675 = OpVectorShuffle %674 %674 0 1 2 
                                                      OpStore %670 %675 
                                                      OpBranch %673 
                                             %676 = OpLabel 
                                       f32_3 %677 = OpLoad %139 
                                                      OpStore %670 %677 
                                                      OpBranch %673 
                                             %673 = OpLabel 
                                       f32_3 %678 = OpLoad %670 
                                       f32_4 %679 = OpLoad %110 
                                       f32_4 %680 = OpVectorShuffle %679 %678 4 5 6 3 
                                                      OpStore %110 %680 
                                       f32_4 %681 = OpLoad %110 
                                       f32_3 %682 = OpVectorShuffle %681 %681 0 1 2 
                              Uniform f32_3* %684 = OpAccessChain %40 %683 
                                       f32_3 %685 = OpLoad %684 
                                       f32_3 %686 = OpFNegate %685 
                                       f32_3 %687 = OpFAdd %682 %686 
                                       f32_4 %688 = OpLoad %110 
                                       f32_4 %689 = OpVectorShuffle %688 %687 4 5 6 3 
                                                      OpStore %110 %689 
                                       f32_4 %690 = OpLoad %110 
                                       f32_3 %691 = OpVectorShuffle %690 %690 0 1 2 
                              Uniform f32_3* %693 = OpAccessChain %40 %692 
                                       f32_3 %694 = OpLoad %693 
                                       f32_3 %695 = OpFMul %691 %694 
                                       f32_4 %696 = OpLoad %110 
                                       f32_4 %697 = OpVectorShuffle %696 %695 0 4 5 6 
                                                      OpStore %110 %697 
                                Private f32* %698 = OpAccessChain %110 %25 
                                         f32 %699 = OpLoad %698 
                                         f32 %700 = OpFMul %699 %366 
                                         f32 %702 = OpFAdd %700 %701 
                                Private f32* %703 = OpAccessChain %262 %30 
                                                      OpStore %703 %702 
                                Uniform f32* %704 = OpAccessChain %40 %613 %153 
                                         f32 %705 = OpLoad %704 
                                         f32 %706 = OpFMul %705 %337 
                                         f32 %707 = OpFAdd %706 %701 
                                                      OpStore %95 %707 
                                         f32 %708 = OpLoad %95 
                                Private f32* %709 = OpAccessChain %262 %30 
                                         f32 %710 = OpLoad %709 
                                         f32 %711 = OpExtInst %1 40 %708 %710 
                                Private f32* %712 = OpAccessChain %110 %30 
                                                      OpStore %712 %711 
                  read_only Texture3DSampled %717 = OpLoad %716 
                                       f32_4 %718 = OpLoad %110 
                                       f32_3 %719 = OpVectorShuffle %718 %718 0 2 3 
                                       f32_4 %720 = OpImageSampleImplicitLod %717 %719 
                                                      OpStore %110 %720 
                                       f32_4 %722 = OpLoad %110 
                                                      OpStore %721 %722 
                                                      OpBranch %625 
                                             %723 = OpLabel 
                                Private f32* %724 = OpAccessChain %721 %30 
                                                      OpStore %724 %108 
                                Private f32* %725 = OpAccessChain %721 %25 
                                                      OpStore %725 %108 
                                Private f32* %726 = OpAccessChain %721 %153 
                                                      OpStore %726 %108 
                                Private f32* %727 = OpAccessChain %721 %196 
                                                      OpStore %727 %108 
                                                      OpBranch %625 
                                             %625 = OpLabel 
                                       f32_4 %728 = OpLoad %721 
                              Uniform f32_4* %729 = OpAccessChain %40 %559 
                                       f32_4 %730 = OpLoad %729 
                                         f32 %731 = OpDot %728 %730 
                                Private f32* %732 = OpAccessChain %489 %30 
                                                      OpStore %732 %731 
                                Private f32* %733 = OpAccessChain %489 %30 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpExtInst %1 43 %734 %74 %108 
                                Private f32* %736 = OpAccessChain %489 %30 
                                                      OpStore %736 %735 
                                       f32_4 %739 = OpLoad %738 
                                       f32_2 %740 = OpVectorShuffle %739 %739 0 1 
                                       f32_4 %741 = OpLoad %738 
                                       f32_2 %742 = OpVectorShuffle %741 %741 3 3 
                                       f32_2 %743 = OpFDiv %740 %742 
                                                      OpStore %262 %743 
                  read_only Texture2DSampled %746 = OpLoad %745 
                                       f32_2 %747 = OpLoad %262 
                                       f32_4 %748 = OpImageSampleImplicitLod %746 %747 
                                         f32 %749 = OpCompositeExtract %748 0 
                                                      OpStore %744 %749 
                                Private f32* %751 = OpAccessChain %22 %30 
                                         f32 %752 = OpLoad %751 
                                         f32 %753 = OpLoad %744 
                                         f32 %754 = OpFAdd %752 %753 
                                Private f32* %755 = OpAccessChain %750 %30 
                                                      OpStore %755 %754 
                                Private f32* %756 = OpAccessChain %750 %30 
                                         f32 %757 = OpLoad %756 
                                         f32 %758 = OpExtInst %1 43 %757 %74 %108 
                                Private f32* %759 = OpAccessChain %750 %30 
                                                      OpStore %759 %758 
                                Private f32* %760 = OpAccessChain %750 %30 
                                         f32 %761 = OpLoad %760 
                                Private f32* %762 = OpAccessChain %489 %30 
                                         f32 %763 = OpLoad %762 
                                         f32 %764 = OpExtInst %1 37 %761 %763 
                                Private f32* %765 = OpAccessChain %489 %30 
                                                      OpStore %765 %764 
                                        bool %767 = OpLoad %71 
                                                      OpSelectionMerge %769 None 
                                                      OpBranchConditional %767 %768 %772 
                                             %768 = OpLabel 
                                Private f32* %770 = OpAccessChain %489 %30 
                                         f32 %771 = OpLoad %770 
                                                      OpStore %766 %771 
                                                      OpBranch %769 
                                             %772 = OpLabel 
                                Private f32* %773 = OpAccessChain %750 %30 
                                         f32 %774 = OpLoad %773 
                                                      OpStore %766 %774 
                                                      OpBranch %769 
                                             %769 = OpLabel 
                                         f32 %775 = OpLoad %766 
                                Private f32* %776 = OpAccessChain %489 %30 
                                                      OpStore %776 %775 
                                       f32_3 %777 = OpLoad %518 
                              Uniform f32_4* %779 = OpAccessChain %40 %778 
                                       f32_4 %780 = OpLoad %779 
                                       f32_3 %781 = OpVectorShuffle %780 %780 0 1 2 
                                       f32_3 %782 = OpFMul %777 %781 
                                                      OpStore %750 %782 
                                       f32_3 %783 = OpLoad %489 
                                       f32_3 %784 = OpVectorShuffle %783 %783 0 0 0 
                                       f32_3 %785 = OpLoad %750 
                                       f32_3 %786 = OpFMul %784 %785 
                                                      OpStore %489 %786 
                                       f32_3 %789 = OpLoad %518 
                                       f32_3 %791 = OpLoad %790 
                                       f32_3 %792 = OpFMul %789 %791 
                                       f32_3 %793 = OpLoad %489 
                                       f32_3 %794 = OpFAdd %792 %793 
                                       f32_4 %795 = OpLoad %788 
                                       f32_4 %796 = OpVectorShuffle %795 %794 4 5 6 3 
                                                      OpStore %788 %796 
                                Private f32* %797 = OpAccessChain %9 %196 
                                         f32 %798 = OpLoad %797 
                                 Output f32* %800 = OpAccessChain %788 %196 
                                                      OpStore %800 %798 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat2;
    u_xlat3.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat3.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    vs_TEXCOORD3.xy = u_xlat1.xy * vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat21 = u_xlat1.y * u_xlat1.y;
    u_xlat21 = u_xlat1.x * u_xlat1.x + (-u_xlat21);
    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
    u_xlat1.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat1);
    u_xlat4.y = dot(unity_SHAg, u_xlat1);
    u_xlat4.z = dot(unity_SHAb, u_xlat1);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat1.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _StepValue;
uniform 	float _SkyBoost;
uniform 	float _SkyPower;
uniform 	float _CurvePower;
uniform 	float _CurveColorFactor;
uniform 	float _CurveFreq;
uniform 	float _DitherCohesionFactor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = log2(vs_TEXCOORD3.y);
    u_xlat1.x = u_xlat1.x * _SkyPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat7.x = vs_TEXCOORD3.y * vs_TEXCOORD3.y;
    u_xlat1.x = u_xlat7.x * _SkyBoost + u_xlat1.x;
    u_xlatb7 = u_xlat1.x<0.0;
    u_xlat1.x = (u_xlatb7) ? -1.0 : u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * _OverrideColor.xyz;
    u_xlat19 = vs_TEXCOORD3.x * _CurveFreq;
    u_xlat19 = u_xlat19 * 3.1400001;
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 + 1.0;
    u_xlat2.x = _CurveColorFactor + _CurveColorFactor;
    u_xlat19 = u_xlat19 / u_xlat2.x;
    u_xlat19 = u_xlat19 + -1.0;
    u_xlat19 = _CurvePower * u_xlat19 + 1.0;
    u_xlat2.xyw = vec3(u_xlat19) * u_xlat1.yzx;
    u_xlat3.xyz = vs_TEXCOORD2.xyy * vec3(0.00999999978, 0.00999999978, 0.0799999982);
    u_xlat4.y = (-_Time.x) * 0.333333343 + u_xlat3.z;
    u_xlat4.x = vs_TEXCOORD2.x * 0.0799999982;
    u_xlat10_4 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat16_1 = log2(u_xlat10_4.x);
    u_xlat16_1 = u_xlat16_1 * 1.5;
    u_xlat16_1 = exp2(u_xlat16_1);
    u_xlatb15 = u_xlat2.x>=u_xlat2.y;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat2.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.yz * vec2(u_xlat19) + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat15) * u_xlat5 + u_xlat4;
    u_xlatb7 = u_xlat2.w>=u_xlat4.x;
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat2.wyx;
    u_xlat4 = (-u_xlat2) + u_xlat4;
    u_xlat2 = u_xlat7.xxxx * u_xlat4 + u_xlat2;
    u_xlat7.x = min(u_xlat2.y, u_xlat2.w);
    u_xlat7.x = (-u_xlat7.x) + u_xlat2.x;
    u_xlat13 = (-u_xlat2.y) + u_xlat2.w;
    u_xlat19 = u_xlat7.x * 6.0 + 1.00000001e-010;
    u_xlat13 = u_xlat13 / u_xlat19;
    u_xlat13 = u_xlat13 + u_xlat2.z;
    u_xlat19 = u_xlat2.x + 1.00000001e-010;
    u_xlat7.x = u_xlat7.x / u_xlat19;
    u_xlat1.x = (-u_xlat16_1) * 2.0 + u_xlat2.x;
    u_xlat19 = dot(u_xlat3.xy, vec2(12.9898005, 78.2330017));
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 * 43758.5469;
    u_xlat19 = fract(u_xlat19);
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat2.x = u_xlat3.y + u_xlat3.x;
    u_xlat8.x = u_xlat2.x + (-_Time.z);
    u_xlat8.x = sin(u_xlat8.x);
    u_xlat8.x = u_xlat8.x + 1.0;
    u_xlat8.x = u_xlat8.x * 0.5;
    u_xlat14.x = u_xlat2.x + _Time.z;
    u_xlat14.x = sin(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * 0.099999994 + 0.150000006;
    u_xlat8.x = u_xlat8.x * u_xlat14.x + 0.349999994;
    u_xlat2.x = u_xlat2.x * 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlatb2 = 0.25<u_xlat2.x;
    u_xlat1.x = u_xlat1.x / _StepValue;
    u_xlat14.x = (-u_xlat8.x) + u_xlat1.x;
    u_xlat14.x = (-u_xlat19) * _DitherCohesionFactor + u_xlat14.x;
    u_xlat14.x = ceil(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _StepValue;
    u_xlat1.x = u_xlat8.x + u_xlat1.x;
    u_xlat1.x = u_xlat19 * _DitherCohesionFactor + u_xlat1.x;
    u_xlat1.x = roundEven(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _StepValue;
    u_xlat1.x = (u_xlatb2) ? u_xlat14.x : u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat2.xyz = abs(vec3(u_xlat13)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat2.xyz = fract(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat2.xyz = abs(u_xlat2.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat19 = u_xlat0.x + -0.00999999978;
    u_xlat19 = u_xlat19 * 1000.0;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(0.5, 0.5, 0.5) + vec3(0.0299999993, 0.0, 0.0700000003);
    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
    u_xlat19 = u_xlat0.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat19) + u_xlat2.x;
    u_xlat19 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat19;
    u_xlat19 = u_xlat19 * _LightShadowData.z + _LightShadowData.w;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb8 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat8.xyz = (bool(u_xlatb8)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat8.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat14.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat14.x, u_xlat8.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat8.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat14.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat14.xy);
    u_xlat19 = u_xlat19 + u_xlat10_3.x;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat8.x = min(u_xlat19, u_xlat8.x);
    u_xlat19 = (u_xlatb2) ? u_xlat8.x : u_xlat19;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 473
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %152 %158 %159 %172 %211 %214 %435 %454 %466 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %159 Location 159 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate %211 Location 211 
                                                      OpDecorate %214 Location 214 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %435 Location 435 
                                                      OpDecorate %454 Location 454 
                                                      OpDecorate %466 Location 466 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 13 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 15 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                              Private f32_4* %101 = OpVariable Private 
                                             %102 = OpTypeVector %6 2 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %146 %146 
                                             %151 = OpTypePointer Output %102 
                               Output f32_2* %152 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_2 %156 = OpConstantComposite %155 %155 
                               Output f32_2* %158 = OpVariable Output 
                                Input f32_4* %159 = OpVariable Input 
                                         i32 %162 = OpConstant 16 
                                             %171 = OpTypePointer Input %53 
                                Input f32_3* %172 = OpVariable Input 
                                         i32 %174 = OpConstant 14 
                                         u32 %179 = OpConstant 0 
                                             %180 = OpTypePointer Private %6 
                                         u32 %193 = OpConstant 2 
                                Private f32* %195 = OpVariable Private 
                                             %210 = OpTypePointer Output %53 
                               Output f32_3* %211 = OpVariable Output 
                               Output f32_3* %214 = OpVariable Output 
                                             %217 = OpTypePointer Private %53 
                              Private f32_3* %218 = OpVariable Private 
                              Private f32_4* %235 = OpVariable Private 
                              Private f32_3* %241 = OpVariable Private 
                                         i32 %242 = OpConstant 9 
                                         i32 %248 = OpConstant 10 
                                         i32 %254 = OpConstant 11 
                                         i32 %260 = OpConstant 12 
                                         u32 %269 = OpConstant 3 
                                         i32 %271 = OpConstant 6 
                                         i32 %277 = OpConstant 7 
                                         i32 %283 = OpConstant 8 
                                         f32 %293 = OpConstant 3.674022E-40 
                                       f32_3 %294 = OpConstantComposite %293 %293 %293 
                              Private f32_3* %296 = OpVariable Private 
                                         f32 %300 = OpConstant 3.674022E-40 
                                       f32_3 %301 = OpConstantComposite %300 %300 %300 
                                         f32 %306 = OpConstant 3.674022E-40 
                                       f32_3 %307 = OpConstantComposite %306 %306 %306 
                                         f32 %309 = OpConstant 3.674022E-40 
                                       f32_3 %310 = OpConstantComposite %309 %309 %309 
                              Private f32_4* %320 = OpVariable Private 
                              Private f32_4* %328 = OpVariable Private 
                                         f32 %364 = OpConstant 3.674022E-40 
                                       f32_4 %365 = OpConstantComposite %364 %364 %364 %364 
                                         i32 %370 = OpConstant 4 
                                       f32_4 %374 = OpConstantComposite %146 %146 %146 %146 
                                       f32_4 %382 = OpConstantComposite %293 %293 %293 %293 
                                         i32 %389 = OpConstant 5 
                               Output f32_3* %435 = OpVariable Output 
                                             %440 = OpTypePointer Uniform %6 
                               Output f32_4* %454 = OpVariable Output 
                               Output f32_4* %466 = OpVariable Output 
                                             %467 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %65 %92 
                                        f32_4 %98 = OpLoad %65 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                       f32_4 %103 = OpLoad %47 
                                       f32_2 %104 = OpVectorShuffle %103 %103 1 1 
                              Uniform f32_4* %105 = OpAccessChain %23 %68 %26 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %104 %107 
                                       f32_4 %109 = OpLoad %101 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 2 3 
                                                      OpStore %101 %110 
                              Uniform f32_4* %111 = OpAccessChain %23 %68 %31 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 0 1 
                                       f32_4 %114 = OpLoad %47 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 0 
                                       f32_2 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %101 
                                       f32_2 %118 = OpVectorShuffle %117 %117 0 1 
                                       f32_2 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %47 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 2 3 
                                                      OpStore %47 %121 
                              Uniform f32_4* %122 = OpAccessChain %23 %68 %39 
                                       f32_4 %123 = OpLoad %122 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_4 %125 = OpLoad %47 
                                       f32_2 %126 = OpVectorShuffle %125 %125 2 2 
                                       f32_2 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %47 
                                       f32_2 %129 = OpVectorShuffle %128 %128 0 1 
                                       f32_2 %130 = OpFAdd %127 %129 
                                       f32_4 %131 = OpLoad %47 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %47 %132 
                              Uniform f32_4* %133 = OpAccessChain %23 %68 %49 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_4 %136 = OpLoad %47 
                                       f32_2 %137 = OpVectorShuffle %136 %136 3 3 
                                       f32_2 %138 = OpFMul %135 %137 
                                       f32_4 %139 = OpLoad %47 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %47 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %47 %143 
                                       f32_4 %144 = OpLoad %47 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %47 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %47 %150 
                                       f32_4 %153 = OpLoad %47 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %157 = OpFMul %154 %156 
                                                      OpStore %152 %157 
                                       f32_4 %160 = OpLoad %159 
                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
                              Uniform f32_4* %163 = OpAccessChain %23 %162 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_2 %166 = OpFMul %161 %165 
                              Uniform f32_4* %167 = OpAccessChain %23 %162 
                                       f32_4 %168 = OpLoad %167 
                                       f32_2 %169 = OpVectorShuffle %168 %168 2 3 
                                       f32_2 %170 = OpFAdd %166 %169 
                                                      OpStore %158 %170 
                                       f32_3 %173 = OpLoad %172 
                              Uniform f32_4* %175 = OpAccessChain %23 %174 %31 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %173 %177 
                                Private f32* %181 = OpAccessChain %47 %179 
                                                      OpStore %181 %178 
                                       f32_3 %182 = OpLoad %172 
                              Uniform f32_4* %183 = OpAccessChain %23 %174 %26 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %187 = OpAccessChain %47 %93 
                                                      OpStore %187 %186 
                                       f32_3 %188 = OpLoad %172 
                              Uniform f32_4* %189 = OpAccessChain %23 %174 %39 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %188 %191 
                                Private f32* %194 = OpAccessChain %47 %193 
                                                      OpStore %194 %192 
                                       f32_4 %196 = OpLoad %47 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_4 %198 = OpLoad %47 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                         f32 %200 = OpDot %197 %199 
                                                      OpStore %195 %200 
                                         f32 %201 = OpLoad %195 
                                         f32 %202 = OpExtInst %1 32 %201 
                                                      OpStore %195 %202 
                                         f32 %203 = OpLoad %195 
                                       f32_3 %204 = OpCompositeConstruct %203 %203 %203 
                                       f32_4 %205 = OpLoad %47 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %47 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %47 %209 
                                       f32_4 %212 = OpLoad %47 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                                      OpStore %211 %213 
                                       f32_4 %215 = OpLoad %9 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                                      OpStore %214 %216 
                                Private f32* %219 = OpAccessChain %47 %93 
                                         f32 %220 = OpLoad %219 
                                Private f32* %221 = OpAccessChain %47 %93 
                                         f32 %222 = OpLoad %221 
                                         f32 %223 = OpFMul %220 %222 
                                Private f32* %224 = OpAccessChain %218 %179 
                                                      OpStore %224 %223 
                                Private f32* %225 = OpAccessChain %47 %179 
                                         f32 %226 = OpLoad %225 
                                Private f32* %227 = OpAccessChain %47 %179 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFMul %226 %228 
                                Private f32* %230 = OpAccessChain %218 %179 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %218 %179 
                                                      OpStore %234 %233 
                                       f32_4 %236 = OpLoad %47 
                                       f32_4 %237 = OpVectorShuffle %236 %236 1 2 2 0 
                                       f32_4 %238 = OpLoad %47 
                                       f32_4 %239 = OpVectorShuffle %238 %238 0 1 2 2 
                                       f32_4 %240 = OpFMul %237 %239 
                                                      OpStore %235 %240 
                              Uniform f32_4* %243 = OpAccessChain %23 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %235 
                                         f32 %246 = OpDot %244 %245 
                                Private f32* %247 = OpAccessChain %241 %179 
                                                      OpStore %247 %246 
                              Uniform f32_4* %249 = OpAccessChain %23 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_4 %251 = OpLoad %235 
                                         f32 %252 = OpDot %250 %251 
                                Private f32* %253 = OpAccessChain %241 %93 
                                                      OpStore %253 %252 
                              Uniform f32_4* %255 = OpAccessChain %23 %254 
                                       f32_4 %256 = OpLoad %255 
                                       f32_4 %257 = OpLoad %235 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %241 %193 
                                                      OpStore %259 %258 
                              Uniform f32_4* %261 = OpAccessChain %23 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_3 %264 = OpLoad %218 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %267 = OpLoad %241 
                                       f32_3 %268 = OpFAdd %266 %267 
                                                      OpStore %218 %268 
                                Private f32* %270 = OpAccessChain %47 %269 
                                                      OpStore %270 %146 
                              Uniform f32_4* %272 = OpAccessChain %23 %271 
                                       f32_4 %273 = OpLoad %272 
                                       f32_4 %274 = OpLoad %47 
                                         f32 %275 = OpDot %273 %274 
                                Private f32* %276 = OpAccessChain %241 %179 
                                                      OpStore %276 %275 
                              Uniform f32_4* %278 = OpAccessChain %23 %277 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpLoad %47 
                                         f32 %281 = OpDot %279 %280 
                                Private f32* %282 = OpAccessChain %241 %93 
                                                      OpStore %282 %281 
                              Uniform f32_4* %284 = OpAccessChain %23 %283 
                                       f32_4 %285 = OpLoad %284 
                                       f32_4 %286 = OpLoad %47 
                                         f32 %287 = OpDot %285 %286 
                                Private f32* %288 = OpAccessChain %241 %193 
                                                      OpStore %288 %287 
                                       f32_3 %289 = OpLoad %218 
                                       f32_3 %290 = OpLoad %241 
                                       f32_3 %291 = OpFAdd %289 %290 
                                                      OpStore %218 %291 
                                       f32_3 %292 = OpLoad %218 
                                       f32_3 %295 = OpExtInst %1 40 %292 %294 
                                                      OpStore %218 %295 
                                       f32_3 %297 = OpLoad %218 
                                       f32_3 %298 = OpExtInst %1 30 %297 
                                                      OpStore %296 %298 
                                       f32_3 %299 = OpLoad %296 
                                       f32_3 %302 = OpFMul %299 %301 
                                                      OpStore %296 %302 
                                       f32_3 %303 = OpLoad %296 
                                       f32_3 %304 = OpExtInst %1 29 %303 
                                                      OpStore %296 %304 
                                       f32_3 %305 = OpLoad %296 
                                       f32_3 %308 = OpFMul %305 %307 
                                       f32_3 %311 = OpFAdd %308 %310 
                                                      OpStore %296 %311 
                                       f32_3 %312 = OpLoad %296 
                                       f32_3 %313 = OpExtInst %1 40 %312 %294 
                                                      OpStore %296 %313 
                                       f32_4 %314 = OpLoad %9 
                                       f32_4 %315 = OpVectorShuffle %314 %314 1 1 1 1 
                                       f32_4 %316 = OpFNegate %315 
                              Uniform f32_4* %317 = OpAccessChain %23 %39 
                                       f32_4 %318 = OpLoad %317 
                                       f32_4 %319 = OpFAdd %316 %318 
                                                      OpStore %101 %319 
                                       f32_4 %321 = OpLoad %47 
                                       f32_4 %322 = OpVectorShuffle %321 %321 1 1 1 1 
                                       f32_4 %323 = OpLoad %101 
                                       f32_4 %324 = OpFMul %322 %323 
                                                      OpStore %320 %324 
                                       f32_4 %325 = OpLoad %101 
                                       f32_4 %326 = OpLoad %101 
                                       f32_4 %327 = OpFMul %325 %326 
                                                      OpStore %101 %327 
                                       f32_4 %329 = OpLoad %9 
                                       f32_4 %330 = OpVectorShuffle %329 %329 0 0 0 0 
                                       f32_4 %331 = OpFNegate %330 
                              Uniform f32_4* %332 = OpAccessChain %23 %26 
                                       f32_4 %333 = OpLoad %332 
                                       f32_4 %334 = OpFAdd %331 %333 
                                                      OpStore %328 %334 
                                       f32_4 %335 = OpLoad %9 
                                       f32_4 %336 = OpVectorShuffle %335 %335 2 2 2 2 
                                       f32_4 %337 = OpFNegate %336 
                              Uniform f32_4* %338 = OpAccessChain %23 %49 
                                       f32_4 %339 = OpLoad %338 
                                       f32_4 %340 = OpFAdd %337 %339 
                                                      OpStore %9 %340 
                                       f32_4 %341 = OpLoad %328 
                                       f32_4 %342 = OpLoad %47 
                                       f32_4 %343 = OpVectorShuffle %342 %342 0 0 0 0 
                                       f32_4 %344 = OpFMul %341 %343 
                                       f32_4 %345 = OpLoad %320 
                                       f32_4 %346 = OpFAdd %344 %345 
                                                      OpStore %320 %346 
                                       f32_4 %347 = OpLoad %9 
                                       f32_4 %348 = OpLoad %47 
                                       f32_4 %349 = OpVectorShuffle %348 %348 2 2 2 2 
                                       f32_4 %350 = OpFMul %347 %349 
                                       f32_4 %351 = OpLoad %320 
                                       f32_4 %352 = OpFAdd %350 %351 
                                                      OpStore %47 %352 
                                       f32_4 %353 = OpLoad %328 
                                       f32_4 %354 = OpLoad %328 
                                       f32_4 %355 = OpFMul %353 %354 
                                       f32_4 %356 = OpLoad %101 
                                       f32_4 %357 = OpFAdd %355 %356 
                                                      OpStore %101 %357 
                                       f32_4 %358 = OpLoad %9 
                                       f32_4 %359 = OpLoad %9 
                                       f32_4 %360 = OpFMul %358 %359 
                                       f32_4 %361 = OpLoad %101 
                                       f32_4 %362 = OpFAdd %360 %361 
                                                      OpStore %9 %362 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %366 = OpExtInst %1 40 %363 %365 
                                                      OpStore %9 %366 
                                       f32_4 %367 = OpLoad %9 
                                       f32_4 %368 = OpExtInst %1 32 %367 
                                                      OpStore %101 %368 
                                       f32_4 %369 = OpLoad %9 
                              Uniform f32_4* %371 = OpAccessChain %23 %370 
                                       f32_4 %372 = OpLoad %371 
                                       f32_4 %373 = OpFMul %369 %372 
                                       f32_4 %375 = OpFAdd %373 %374 
                                                      OpStore %9 %375 
                                       f32_4 %376 = OpLoad %9 
                                       f32_4 %377 = OpFDiv %374 %376 
                                                      OpStore %9 %377 
                                       f32_4 %378 = OpLoad %47 
                                       f32_4 %379 = OpLoad %101 
                                       f32_4 %380 = OpFMul %378 %379 
                                                      OpStore %47 %380 
                                       f32_4 %381 = OpLoad %47 
                                       f32_4 %383 = OpExtInst %1 40 %381 %382 
                                                      OpStore %47 %383 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpLoad %47 
                                       f32_4 %386 = OpFMul %384 %385 
                                                      OpStore %9 %386 
                                       f32_4 %387 = OpLoad %9 
                                       f32_3 %388 = OpVectorShuffle %387 %387 1 1 1 
                              Uniform f32_4* %390 = OpAccessChain %23 %389 %26 
                                       f32_4 %391 = OpLoad %390 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                       f32_3 %393 = OpFMul %388 %392 
                                       f32_4 %394 = OpLoad %47 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
                                                      OpStore %47 %395 
                              Uniform f32_4* %396 = OpAccessChain %23 %389 %31 
                                       f32_4 %397 = OpLoad %396 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 1 2 
                                       f32_4 %399 = OpLoad %9 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 0 0 
                                       f32_3 %401 = OpFMul %398 %400 
                                       f32_4 %402 = OpLoad %47 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
                                       f32_3 %404 = OpFAdd %401 %403 
                                       f32_4 %405 = OpLoad %47 
                                       f32_4 %406 = OpVectorShuffle %405 %404 4 5 6 3 
                                                      OpStore %47 %406 
                              Uniform f32_4* %407 = OpAccessChain %23 %389 %39 
                                       f32_4 %408 = OpLoad %407 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                       f32_4 %410 = OpLoad %9 
                                       f32_3 %411 = OpVectorShuffle %410 %410 2 2 2 
                                       f32_3 %412 = OpFMul %409 %411 
                                       f32_4 %413 = OpLoad %47 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                       f32_3 %415 = OpFAdd %412 %414 
                                       f32_4 %416 = OpLoad %9 
                                       f32_4 %417 = OpVectorShuffle %416 %415 4 5 6 3 
                                                      OpStore %9 %417 
                              Uniform f32_4* %418 = OpAccessChain %23 %389 %49 
                                       f32_4 %419 = OpLoad %418 
                                       f32_3 %420 = OpVectorShuffle %419 %419 0 1 2 
                                       f32_4 %421 = OpLoad %9 
                                       f32_3 %422 = OpVectorShuffle %421 %421 3 3 3 
                                       f32_3 %423 = OpFMul %420 %422 
                                       f32_4 %424 = OpLoad %9 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                       f32_3 %426 = OpFAdd %423 %425 
                                       f32_4 %427 = OpLoad %9 
                                       f32_4 %428 = OpVectorShuffle %427 %426 4 5 6 3 
                                                      OpStore %9 %428 
                                       f32_4 %429 = OpLoad %9 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                                       f32_3 %431 = OpLoad %296 
                                       f32_3 %432 = OpFAdd %430 %431 
                                       f32_4 %433 = OpLoad %9 
                                       f32_4 %434 = OpVectorShuffle %433 %432 4 5 6 3 
                                                      OpStore %9 %434 
                                       f32_4 %436 = OpLoad %9 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                                      OpStore %435 %437 
                                Private f32* %438 = OpAccessChain %65 %93 
                                         f32 %439 = OpLoad %438 
                                Uniform f32* %441 = OpAccessChain %23 %31 %179 
                                         f32 %442 = OpLoad %441 
                                         f32 %443 = OpFMul %439 %442 
                                Private f32* %444 = OpAccessChain %9 %179 
                                                      OpStore %444 %443 
                                Private f32* %445 = OpAccessChain %9 %179 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpFMul %446 %155 
                                Private f32* %448 = OpAccessChain %9 %269 
                                                      OpStore %448 %447 
                                       f32_4 %449 = OpLoad %65 
                                       f32_2 %450 = OpVectorShuffle %449 %449 0 3 
                                       f32_2 %451 = OpFMul %450 %156 
                                       f32_4 %452 = OpLoad %9 
                                       f32_4 %453 = OpVectorShuffle %452 %451 4 1 5 3 
                                                      OpStore %9 %453 
                                       f32_4 %455 = OpLoad %65 
                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
                                       f32_4 %457 = OpLoad %454 
                                       f32_4 %458 = OpVectorShuffle %457 %456 0 1 4 5 
                                                      OpStore %454 %458 
                                       f32_4 %459 = OpLoad %9 
                                       f32_2 %460 = OpVectorShuffle %459 %459 2 2 
                                       f32_4 %461 = OpLoad %9 
                                       f32_2 %462 = OpVectorShuffle %461 %461 0 3 
                                       f32_2 %463 = OpFAdd %460 %462 
                                       f32_4 %464 = OpLoad %454 
                                       f32_4 %465 = OpVectorShuffle %464 %463 4 5 2 3 
                                                      OpStore %454 %465 
                                                      OpStore %466 %382 
                                 Output f32* %468 = OpAccessChain %97 %31 %93 
                                         f32 %469 = OpLoad %468 
                                         f32 %470 = OpFNegate %469 
                                 Output f32* %471 = OpAccessChain %97 %31 %93 
                                                      OpStore %471 %470 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 802
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %23 %139 %738 %788 %790 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 RelaxedPrecision 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 RelaxedPrecision 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpMemberDecorate %38 6 Offset 38 
                                                      OpMemberDecorate %38 7 Offset 38 
                                                      OpMemberDecorate %38 8 Offset 38 
                                                      OpMemberDecorate %38 9 Offset 38 
                                                      OpMemberDecorate %38 10 RelaxedPrecision 
                                                      OpMemberDecorate %38 10 Offset 38 
                                                      OpMemberDecorate %38 11 Offset 38 
                                                      OpMemberDecorate %38 12 Offset 38 
                                                      OpMemberDecorate %38 13 Offset 38 
                                                      OpMemberDecorate %38 14 Offset 38 
                                                      OpMemberDecorate %38 15 Offset 38 
                                                      OpMemberDecorate %38 16 Offset 38 
                                                      OpMemberDecorate %38 17 Offset 38 
                                                      OpMemberDecorate %38 18 Offset 38 
                                                      OpMemberDecorate %38 19 RelaxedPrecision 
                                                      OpMemberDecorate %38 19 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %163 DescriptorSet 163 
                                                      OpDecorate %163 Binding 163 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %623 SpecId 623 
                                                      OpDecorate %716 DescriptorSet 716 
                                                      OpDecorate %716 Binding 716 
                                                      OpDecorate %721 RelaxedPrecision 
                                                      OpDecorate %728 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %735 RelaxedPrecision 
                                                      OpDecorate %738 Location 738 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %745 DescriptorSet 745 
                                                      OpDecorate %745 Binding 745 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %749 RelaxedPrecision 
                                                      OpDecorate %750 RelaxedPrecision 
                                                      OpDecorate %753 RelaxedPrecision 
                                                      OpDecorate %757 RelaxedPrecision 
                                                      OpDecorate %758 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %763 RelaxedPrecision 
                                                      OpDecorate %764 RelaxedPrecision 
                                                      OpDecorate %771 RelaxedPrecision 
                                                      OpDecorate %774 RelaxedPrecision 
                                                      OpDecorate %775 RelaxedPrecision 
                                                      OpDecorate %780 RelaxedPrecision 
                                                      OpDecorate %781 RelaxedPrecision 
                                                      OpDecorate %783 RelaxedPrecision 
                                                      OpDecorate %784 RelaxedPrecision 
                                                      OpDecorate %785 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %788 RelaxedPrecision 
                                                      OpDecorate %788 Location 788 
                                                      OpDecorate %790 RelaxedPrecision 
                                                      OpDecorate %790 Location 790 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %793 RelaxedPrecision 
                                                      OpDecorate %798 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                                 Input f32_2* %23 = OpVariable Input 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                          u32 %35 = OpConstant 4 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeArray %7 %35 
                                              %38 = OpTypeStruct %7 %20 %7 %7 %7 %36 %7 %37 %20 %20 %7 %7 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 14 
                                              %43 = OpTypePointer Uniform %6 
                               Private f32_3* %52 = OpVariable Private 
                                          i32 %61 = OpConstant 13 
                                              %69 = OpTypeBool 
                                              %70 = OpTypePointer Private %69 
                                Private bool* %71 = OpVariable Private 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Function %6 
                                          f32 %81 = OpConstant 3.674022E-40 
                                          i32 %89 = OpConstant 11 
                                              %90 = OpTypePointer Uniform %7 
                                 Private f32* %95 = OpVariable Private 
                                          i32 %98 = OpConstant 17 
                                         f32 %103 = OpConstant 3.674022E-40 
                                         f32 %108 = OpConstant 3.674022E-40 
                              Private f32_4* %110 = OpVariable Private 
                                         i32 %111 = OpConstant 16 
                                         i32 %124 = OpConstant 15 
                              Private f32_3* %137 = OpVariable Private 
                                             %138 = OpTypePointer Input %20 
                                Input f32_3* %139 = OpVariable Input 
                                         f32 %142 = OpConstant 3.674022E-40 
                                         f32 %143 = OpConstant 3.674022E-40 
                                       f32_3 %144 = OpConstantComposite %142 %142 %143 
                              Private f32_4* %146 = OpVariable Private 
                                         i32 %147 = OpConstant 0 
                                         f32 %151 = OpConstant 3.674022E-40 
                                         u32 %153 = OpConstant 2 
                                Private f32* %162 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %163 = OpVariable UniformConstant 
                                Private f32* %169 = OpVariable Private 
                                         f32 %173 = OpConstant 3.674022E-40 
                               Private bool* %177 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                                         f32 %195 = OpConstant 3.674022E-40 
                                         u32 %196 = OpConstant 3 
                              Private f32_4* %198 = OpVariable Private 
                                             %261 = OpTypePointer Private %15 
                              Private f32_2* %262 = OpVariable Private 
                                         f32 %272 = OpConstant 3.674022E-40 
                                         f32 %274 = OpConstant 3.674022E-40 
                                         f32 %297 = OpConstant 3.674022E-40 
                                         f32 %305 = OpConstant 3.674022E-40 
                                         f32 %306 = OpConstant 3.674022E-40 
                                       f32_2 %307 = OpConstantComposite %305 %306 
                                         f32 %312 = OpConstant 3.674022E-40 
                                         f32 %317 = OpConstant 3.674022E-40 
                                Private f32* %325 = OpVariable Private 
                                         f32 %337 = OpConstant 3.674022E-40 
                                Private f32* %339 = OpVariable Private 
                                         f32 %348 = OpConstant 3.674022E-40 
                                         f32 %350 = OpConstant 3.674022E-40 
                                         f32 %355 = OpConstant 3.674022E-40 
                               Private bool* %365 = OpVariable Private 
                                         f32 %366 = OpConstant 3.674022E-40 
                                         i32 %372 = OpConstant 12 
                                         i32 %384 = OpConstant 18 
                                       f32_3 %436 = OpConstantComposite %108 %195 %151 
                                       f32_3 %447 = OpConstantComposite %272 %272 %272 
                                         f32 %449 = OpConstant 3.674022E-40 
                                       f32_3 %450 = OpConstantComposite %449 %449 %449 
                                       f32_3 %457 = OpConstantComposite %81 %81 %81 
                                       f32_3 %478 = OpConstantComposite %108 %108 %108 
                                       f32_3 %485 = OpConstantComposite %337 %337 %337 
                              Private f32_3* %489 = OpVariable Private 
                                         f32 %492 = OpConstant 3.674022E-40 
                                         f32 %497 = OpConstant 3.674022E-40 
                                         f32 %507 = OpConstant 3.674022E-40 
                                         f32 %508 = OpConstant 3.674022E-40 
                                       f32_3 %509 = OpConstantComposite %507 %74 %508 
                              Private f32_3* %518 = OpVariable Private 
                                       f32_3 %521 = OpConstantComposite %297 %297 %297 
                                         i32 %527 = OpConstant 19 
                               Private bool* %533 = OpVariable Private 
                                         i32 %538 = OpConstant 1 
                                         i32 %540 = OpConstant -1 
                                             %548 = OpTypePointer Uniform %20 
                                         i32 %552 = OpConstant 5 
                                         i32 %559 = OpConstant 2 
                                         i32 %569 = OpConstant 4 
                                         i32 %601 = OpConstant 3 
                                         i32 %613 = OpConstant 6 
                                        bool %617 = OpConstantFalse 
                                        bool %623 = OpSpecConstantFalse 
                               Private bool* %626 = OpVariable Private 
                                         i32 %632 = OpConstant 7 
                                             %669 = OpTypePointer Function %20 
                                         i32 %683 = OpConstant 9 
                                         i32 %692 = OpConstant 8 
                                         f32 %701 = OpConstant 3.674022E-40 
                                             %713 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %714 = OpTypeSampledImage %713 
                                             %715 = OpTypePointer UniformConstant %714 
 UniformConstant read_only Texture3DSampled* %716 = OpVariable UniformConstant 
                              Private f32_4* %721 = OpVariable Private 
                                             %737 = OpTypePointer Input %7 
                                Input f32_4* %738 = OpVariable Input 
                                Private f32* %744 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %745 = OpVariable UniformConstant 
                              Private f32_3* %750 = OpVariable Private 
                                         i32 %778 = OpConstant 10 
                                             %787 = OpTypePointer Output %7 
                               Output f32_4* %788 = OpVariable Output 
                                Input f32_3* %790 = OpVariable Input 
                                             %799 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %77 = OpVariable Function 
                               Function f32* %184 = OpVariable Function 
                               Function f32* %223 = OpVariable Function 
                               Function f32* %419 = OpVariable Function 
                             Function f32_3* %670 = OpVariable Function 
                               Function f32* %766 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                   Input f32* %27 = OpAccessChain %23 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpExtInst %1 30 %28 
                                 Private f32* %32 = OpAccessChain %22 %30 
                                                      OpStore %32 %29 
                                 Private f32* %33 = OpAccessChain %22 %30 
                                          f32 %34 = OpLoad %33 
                                 Uniform f32* %44 = OpAccessChain %40 %42 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %34 %45 
                                 Private f32* %47 = OpAccessChain %22 %30 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %22 %30 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpExtInst %1 29 %49 
                                 Private f32* %51 = OpAccessChain %22 %30 
                                                      OpStore %51 %50 
                                   Input f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                   Input f32* %55 = OpAccessChain %23 %25 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFMul %54 %56 
                                 Private f32* %58 = OpAccessChain %52 %30 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %52 %30 
                                          f32 %60 = OpLoad %59 
                                 Uniform f32* %62 = OpAccessChain %40 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFMul %60 %63 
                                 Private f32* %65 = OpAccessChain %22 %30 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFAdd %64 %66 
                                 Private f32* %68 = OpAccessChain %22 %30 
                                                      OpStore %68 %67 
                                 Private f32* %72 = OpAccessChain %22 %30 
                                          f32 %73 = OpLoad %72 
                                         bool %75 = OpFOrdLessThan %73 %74 
                                                      OpStore %71 %75 
                                         bool %78 = OpLoad %71 
                                                      OpSelectionMerge %80 None 
                                                      OpBranchConditional %78 %79 %82 
                                              %79 = OpLabel 
                                                      OpStore %77 %81 
                                                      OpBranch %80 
                                              %82 = OpLabel 
                                 Private f32* %83 = OpAccessChain %22 %30 
                                          f32 %84 = OpLoad %83 
                                                      OpStore %77 %84 
                                                      OpBranch %80 
                                              %80 = OpLabel 
                                          f32 %85 = OpLoad %77 
                                 Private f32* %86 = OpAccessChain %22 %30 
                                                      OpStore %86 %85 
                                        f32_3 %87 = OpLoad %22 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 0 0 
                               Uniform f32_4* %91 = OpAccessChain %40 %89 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFMul %88 %93 
                                                      OpStore %22 %94 
                                   Input f32* %96 = OpAccessChain %23 %30 
                                          f32 %97 = OpLoad %96 
                                 Uniform f32* %99 = OpAccessChain %40 %98 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFMul %97 %100 
                                                      OpStore %95 %101 
                                         f32 %102 = OpLoad %95 
                                         f32 %104 = OpFMul %102 %103 
                                                      OpStore %95 %104 
                                         f32 %105 = OpLoad %95 
                                         f32 %106 = OpExtInst %1 13 %105 
                                                      OpStore %95 %106 
                                         f32 %107 = OpLoad %95 
                                         f32 %109 = OpFAdd %107 %108 
                                                      OpStore %95 %109 
                                Uniform f32* %112 = OpAccessChain %40 %111 
                                         f32 %113 = OpLoad %112 
                                Uniform f32* %114 = OpAccessChain %40 %111 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpFAdd %113 %115 
                                Private f32* %117 = OpAccessChain %110 %30 
                                                      OpStore %117 %116 
                                         f32 %118 = OpLoad %95 
                                Private f32* %119 = OpAccessChain %110 %30 
                                         f32 %120 = OpLoad %119 
                                         f32 %121 = OpFDiv %118 %120 
                                                      OpStore %95 %121 
                                         f32 %122 = OpLoad %95 
                                         f32 %123 = OpFAdd %122 %81 
                                                      OpStore %95 %123 
                                Uniform f32* %125 = OpAccessChain %40 %124 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpLoad %95 
                                         f32 %128 = OpFMul %126 %127 
                                         f32 %129 = OpFAdd %128 %108 
                                                      OpStore %95 %129 
                                         f32 %130 = OpLoad %95 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_3 %132 = OpLoad %22 
                                       f32_3 %133 = OpVectorShuffle %132 %132 1 2 0 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %110 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 6 
                                                      OpStore %110 %136 
                                       f32_3 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 1 
                                       f32_3 %145 = OpFMul %141 %144 
                                                      OpStore %137 %145 
                                Uniform f32* %148 = OpAccessChain %40 %147 %30 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFNegate %149 
                                         f32 %152 = OpFMul %150 %151 
                                Private f32* %154 = OpAccessChain %137 %153 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFAdd %152 %155 
                                Private f32* %157 = OpAccessChain %146 %25 
                                                      OpStore %157 %156 
                                  Input f32* %158 = OpAccessChain %139 %30 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %159 %143 
                                Private f32* %161 = OpAccessChain %146 %30 
                                                      OpStore %161 %160 
                  read_only Texture2DSampled %164 = OpLoad %163 
                                       f32_4 %165 = OpLoad %146 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_4 %167 = OpImageSampleImplicitLod %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                                      OpStore %162 %168 
                                         f32 %170 = OpLoad %162 
                                         f32 %171 = OpExtInst %1 30 %170 
                                                      OpStore %169 %171 
                                         f32 %172 = OpLoad %169 
                                         f32 %174 = OpFMul %172 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 29 %175 
                                                      OpStore %169 %176 
                                Private f32* %178 = OpAccessChain %110 %30 
                                         f32 %179 = OpLoad %178 
                                Private f32* %180 = OpAccessChain %110 %25 
                                         f32 %181 = OpLoad %180 
                                        bool %182 = OpFOrdGreaterThanEqual %179 %181 
                                                      OpStore %177 %182 
                                        bool %185 = OpLoad %177 
                                                      OpSelectionMerge %187 None 
                                                      OpBranchConditional %185 %186 %188 
                                             %186 = OpLabel 
                                                      OpStore %184 %108 
                                                      OpBranch %187 
                                             %188 = OpLabel 
                                                      OpStore %184 %74 
                                                      OpBranch %187 
                                             %187 = OpLabel 
                                         f32 %189 = OpLoad %184 
                                                      OpStore %183 %189 
                                       f32_4 %190 = OpLoad %110 
                                       f32_2 %191 = OpVectorShuffle %190 %190 1 0 
                                       f32_4 %192 = OpLoad %146 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 2 3 
                                                      OpStore %146 %193 
                                Private f32* %194 = OpAccessChain %146 %153 
                                                      OpStore %194 %81 
                                Private f32* %197 = OpAccessChain %146 %196 
                                                      OpStore %197 %195 
                                       f32_3 %199 = OpLoad %22 
                                       f32_2 %200 = OpVectorShuffle %199 %199 1 2 
                                         f32 %201 = OpLoad %95 
                                       f32_2 %202 = OpCompositeConstruct %201 %201 
                                       f32_2 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %146 
                                       f32_2 %205 = OpVectorShuffle %204 %204 0 1 
                                       f32_2 %206 = OpFNegate %205 
                                       f32_2 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %198 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 2 3 
                                                      OpStore %198 %209 
                                Private f32* %210 = OpAccessChain %198 %153 
                                                      OpStore %210 %108 
                                Private f32* %211 = OpAccessChain %198 %196 
                                                      OpStore %211 %81 
                                         f32 %212 = OpLoad %183 
                                       f32_4 %213 = OpCompositeConstruct %212 %212 %212 %212 
                                       f32_4 %214 = OpLoad %198 
                                       f32_4 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %146 
                                       f32_4 %217 = OpFAdd %215 %216 
                                                      OpStore %146 %217 
                                Private f32* %218 = OpAccessChain %110 %196 
                                         f32 %219 = OpLoad %218 
                                Private f32* %220 = OpAccessChain %146 %30 
                                         f32 %221 = OpLoad %220 
                                        bool %222 = OpFOrdGreaterThanEqual %219 %221 
                                                      OpStore %71 %222 
                                        bool %224 = OpLoad %71 
                                                      OpSelectionMerge %226 None 
                                                      OpBranchConditional %224 %225 %227 
                                             %225 = OpLabel 
                                                      OpStore %223 %108 
                                                      OpBranch %226 
                                             %227 = OpLabel 
                                                      OpStore %223 %74 
                                                      OpBranch %226 
                                             %226 = OpLabel 
                                         f32 %228 = OpLoad %223 
                                Private f32* %229 = OpAccessChain %52 %30 
                                                      OpStore %229 %228 
                                       f32_4 %230 = OpLoad %146 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 3 
                                       f32_4 %232 = OpLoad %110 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %110 %233 
                                       f32_4 %234 = OpLoad %110 
                                       f32_3 %235 = OpVectorShuffle %234 %234 3 1 0 
                                       f32_4 %236 = OpLoad %146 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 2 6 
                                                      OpStore %146 %237 
                                       f32_4 %238 = OpLoad %110 
                                       f32_4 %239 = OpFNegate %238 
                                       f32_4 %240 = OpLoad %146 
                                       f32_4 %241 = OpFAdd %239 %240 
                                                      OpStore %146 %241 
                                       f32_3 %242 = OpLoad %52 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpLoad %146 
                                       f32_4 %245 = OpFMul %243 %244 
                                       f32_4 %246 = OpLoad %110 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %110 %247 
                                Private f32* %248 = OpAccessChain %110 %25 
                                         f32 %249 = OpLoad %248 
                                Private f32* %250 = OpAccessChain %110 %196 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpExtInst %1 37 %249 %251 
                                Private f32* %253 = OpAccessChain %52 %30 
                                                      OpStore %253 %252 
                                Private f32* %254 = OpAccessChain %52 %30 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFNegate %255 
                                Private f32* %257 = OpAccessChain %110 %30 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %52 %30 
                                                      OpStore %260 %259 
                                Private f32* %263 = OpAccessChain %110 %25 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFNegate %264 
                                Private f32* %266 = OpAccessChain %110 %196 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFAdd %265 %267 
                                Private f32* %269 = OpAccessChain %262 %30 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %52 %30 
                                         f32 %271 = OpLoad %270 
                                         f32 %273 = OpFMul %271 %272 
                                         f32 %275 = OpFAdd %273 %274 
                                                      OpStore %95 %275 
                                Private f32* %276 = OpAccessChain %262 %30 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpLoad %95 
                                         f32 %279 = OpFDiv %277 %278 
                                Private f32* %280 = OpAccessChain %262 %30 
                                                      OpStore %280 %279 
                                Private f32* %281 = OpAccessChain %262 %30 
                                         f32 %282 = OpLoad %281 
                                Private f32* %283 = OpAccessChain %110 %153 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFAdd %282 %284 
                                Private f32* %286 = OpAccessChain %262 %30 
                                                      OpStore %286 %285 
                                Private f32* %287 = OpAccessChain %110 %30 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFAdd %288 %274 
                                                      OpStore %95 %289 
                                Private f32* %290 = OpAccessChain %52 %30 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpLoad %95 
                                         f32 %293 = OpFDiv %291 %292 
                                Private f32* %294 = OpAccessChain %52 %30 
                                                      OpStore %294 %293 
                                         f32 %295 = OpLoad %169 
                                         f32 %296 = OpFNegate %295 
                                         f32 %298 = OpFMul %296 %297 
                                Private f32* %299 = OpAccessChain %110 %30 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFAdd %298 %300 
                                Private f32* %302 = OpAccessChain %22 %30 
                                                      OpStore %302 %301 
                                       f32_3 %303 = OpLoad %137 
                                       f32_2 %304 = OpVectorShuffle %303 %303 0 1 
                                         f32 %308 = OpDot %304 %307 
                                                      OpStore %95 %308 
                                         f32 %309 = OpLoad %95 
                                         f32 %310 = OpExtInst %1 13 %309 
                                                      OpStore %95 %310 
                                         f32 %311 = OpLoad %95 
                                         f32 %313 = OpFMul %311 %312 
                                                      OpStore %95 %313 
                                         f32 %314 = OpLoad %95 
                                         f32 %315 = OpExtInst %1 10 %314 
                                                      OpStore %95 %315 
                                         f32 %316 = OpLoad %95 
                                         f32 %318 = OpFAdd %316 %317 
                                                      OpStore %95 %318 
                                Private f32* %319 = OpAccessChain %137 %25 
                                         f32 %320 = OpLoad %319 
                                Private f32* %321 = OpAccessChain %137 %30 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFAdd %320 %322 
                                Private f32* %324 = OpAccessChain %110 %30 
                                                      OpStore %324 %323 
                                Private f32* %326 = OpAccessChain %110 %30 
                                         f32 %327 = OpLoad %326 
                                Uniform f32* %328 = OpAccessChain %40 %147 %153 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFNegate %329 
                                         f32 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                         f32 %332 = OpLoad %325 
                                         f32 %333 = OpExtInst %1 13 %332 
                                                      OpStore %325 %333 
                                         f32 %334 = OpLoad %325 
                                         f32 %335 = OpFAdd %334 %108 
                                                      OpStore %325 %335 
                                         f32 %336 = OpLoad %325 
                                         f32 %338 = OpFMul %336 %337 
                                                      OpStore %325 %338 
                                Private f32* %340 = OpAccessChain %110 %30 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %40 %147 %153 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %341 %343 
                                                      OpStore %339 %344 
                                         f32 %345 = OpLoad %339 
                                         f32 %346 = OpExtInst %1 13 %345 
                                                      OpStore %339 %346 
                                         f32 %347 = OpLoad %339 
                                         f32 %349 = OpFMul %347 %348 
                                         f32 %351 = OpFAdd %349 %350 
                                                      OpStore %339 %351 
                                         f32 %352 = OpLoad %325 
                                         f32 %353 = OpLoad %339 
                                         f32 %354 = OpFMul %352 %353 
                                         f32 %356 = OpFAdd %354 %355 
                                                      OpStore %325 %356 
                                Private f32* %357 = OpAccessChain %110 %30 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpFMul %358 %337 
                                Private f32* %360 = OpAccessChain %110 %30 
                                                      OpStore %360 %359 
                                Private f32* %361 = OpAccessChain %110 %30 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpExtInst %1 10 %362 
                                Private f32* %364 = OpAccessChain %110 %30 
                                                      OpStore %364 %363 
                                Private f32* %367 = OpAccessChain %110 %30 
                                         f32 %368 = OpLoad %367 
                                        bool %369 = OpFOrdLessThan %366 %368 
                                                      OpStore %365 %369 
                                Private f32* %370 = OpAccessChain %22 %30 
                                         f32 %371 = OpLoad %370 
                                Uniform f32* %373 = OpAccessChain %40 %372 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFDiv %371 %374 
                                Private f32* %376 = OpAccessChain %22 %30 
                                                      OpStore %376 %375 
                                         f32 %377 = OpLoad %325 
                                         f32 %378 = OpFNegate %377 
                                Private f32* %379 = OpAccessChain %22 %30 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFAdd %378 %380 
                                                      OpStore %339 %381 
                                         f32 %382 = OpLoad %95 
                                         f32 %383 = OpFNegate %382 
                                Uniform f32* %385 = OpAccessChain %40 %384 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %383 %386 
                                         f32 %388 = OpLoad %339 
                                         f32 %389 = OpFAdd %387 %388 
                                                      OpStore %339 %389 
                                         f32 %390 = OpLoad %339 
                                         f32 %391 = OpExtInst %1 9 %390 
                                                      OpStore %339 %391 
                                         f32 %392 = OpLoad %339 
                                Uniform f32* %393 = OpAccessChain %40 %372 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFMul %392 %394 
                                                      OpStore %339 %395 
                                         f32 %396 = OpLoad %325 
                                Private f32* %397 = OpAccessChain %22 %30 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFAdd %396 %398 
                                Private f32* %400 = OpAccessChain %22 %30 
                                                      OpStore %400 %399 
                                         f32 %401 = OpLoad %95 
                                Uniform f32* %402 = OpAccessChain %40 %384 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %401 %403 
                                Private f32* %405 = OpAccessChain %22 %30 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFAdd %404 %406 
                                Private f32* %408 = OpAccessChain %22 %30 
                                                      OpStore %408 %407 
                                Private f32* %409 = OpAccessChain %22 %30 
                                         f32 %410 = OpLoad %409 
                                         f32 %411 = OpExtInst %1 2 %410 
                                Private f32* %412 = OpAccessChain %22 %30 
                                                      OpStore %412 %411 
                                Private f32* %413 = OpAccessChain %22 %30 
                                         f32 %414 = OpLoad %413 
                                Uniform f32* %415 = OpAccessChain %40 %372 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpFMul %414 %416 
                                Private f32* %418 = OpAccessChain %22 %30 
                                                      OpStore %418 %417 
                                        bool %420 = OpLoad %365 
                                                      OpSelectionMerge %422 None 
                                                      OpBranchConditional %420 %421 %424 
                                             %421 = OpLabel 
                                         f32 %423 = OpLoad %339 
                                                      OpStore %419 %423 
                                                      OpBranch %422 
                                             %424 = OpLabel 
                                Private f32* %425 = OpAccessChain %22 %30 
                                         f32 %426 = OpLoad %425 
                                                      OpStore %419 %426 
                                                      OpBranch %422 
                                             %422 = OpLabel 
                                         f32 %427 = OpLoad %419 
                                Private f32* %428 = OpAccessChain %22 %30 
                                                      OpStore %428 %427 
                                Private f32* %429 = OpAccessChain %22 %30 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpExtInst %1 40 %430 %74 
                                Private f32* %432 = OpAccessChain %22 %30 
                                                      OpStore %432 %431 
                                       f32_2 %433 = OpLoad %262 
                                       f32_3 %434 = OpVectorShuffle %433 %433 0 0 0 
                                       f32_3 %435 = OpExtInst %1 4 %434 
                                       f32_3 %437 = OpFAdd %435 %436 
                                       f32_4 %438 = OpLoad %110 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 5 6 3 
                                                      OpStore %110 %439 
                                       f32_4 %440 = OpLoad %110 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpExtInst %1 10 %441 
                                       f32_4 %443 = OpLoad %110 
                                       f32_4 %444 = OpVectorShuffle %443 %442 4 5 6 3 
                                                      OpStore %110 %444 
                                       f32_4 %445 = OpLoad %110 
                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
                                       f32_3 %448 = OpFMul %446 %447 
                                       f32_3 %451 = OpFAdd %448 %450 
                                       f32_4 %452 = OpLoad %110 
                                       f32_4 %453 = OpVectorShuffle %452 %451 4 5 6 3 
                                                      OpStore %110 %453 
                                       f32_4 %454 = OpLoad %110 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_3 %456 = OpExtInst %1 4 %455 
                                       f32_3 %458 = OpFAdd %456 %457 
                                       f32_4 %459 = OpLoad %110 
                                       f32_4 %460 = OpVectorShuffle %459 %458 4 5 6 3 
                                                      OpStore %110 %460 
                                       f32_4 %461 = OpLoad %110 
                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 2 
                                       f32_3 %463 = OpCompositeConstruct %74 %74 %74 
                                       f32_3 %464 = OpCompositeConstruct %108 %108 %108 
                                       f32_3 %465 = OpExtInst %1 43 %462 %463 %464 
                                       f32_4 %466 = OpLoad %110 
                                       f32_4 %467 = OpVectorShuffle %466 %465 4 5 6 3 
                                                      OpStore %110 %467 
                                       f32_4 %468 = OpLoad %110 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
                                       f32_3 %470 = OpFAdd %469 %457 
                                       f32_4 %471 = OpLoad %110 
                                       f32_4 %472 = OpVectorShuffle %471 %470 4 5 6 3 
                                                      OpStore %110 %472 
                                       f32_3 %473 = OpLoad %52 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 0 0 
                                       f32_4 %475 = OpLoad %110 
                                       f32_3 %476 = OpVectorShuffle %475 %475 0 1 2 
                                       f32_3 %477 = OpFMul %474 %476 
                                       f32_3 %479 = OpFAdd %477 %478 
                                                      OpStore %52 %479 
                                       f32_3 %480 = OpLoad %52 
                                       f32_3 %481 = OpLoad %22 
                                       f32_3 %482 = OpVectorShuffle %481 %481 0 0 0 
                                       f32_3 %483 = OpFMul %480 %482 
                                                      OpStore %22 %483 
                                       f32_3 %484 = OpLoad %22 
                                       f32_3 %486 = OpFMul %484 %485 
                                       f32_4 %487 = OpLoad %110 
                                       f32_4 %488 = OpVectorShuffle %487 %486 4 5 6 3 
                                                      OpStore %110 %488 
                                Private f32* %490 = OpAccessChain %9 %30 
                                         f32 %491 = OpLoad %490 
                                         f32 %493 = OpFAdd %491 %492 
                                Private f32* %494 = OpAccessChain %489 %30 
                                                      OpStore %494 %493 
                                Private f32* %495 = OpAccessChain %489 %30 
                                         f32 %496 = OpLoad %495 
                                         f32 %498 = OpFMul %496 %497 
                                Private f32* %499 = OpAccessChain %489 %30 
                                                      OpStore %499 %498 
                                Private f32* %500 = OpAccessChain %489 %30 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpExtInst %1 43 %501 %74 %108 
                                Private f32* %503 = OpAccessChain %489 %30 
                                                      OpStore %503 %502 
                                       f32_3 %504 = OpLoad %22 
                                       f32_3 %505 = OpFNegate %504 
                                       f32_3 %506 = OpFMul %505 %485 
                                       f32_3 %510 = OpFAdd %506 %509 
                                                      OpStore %22 %510 
                                       f32_3 %511 = OpLoad %489 
                                       f32_3 %512 = OpVectorShuffle %511 %511 0 0 0 
                                       f32_3 %513 = OpLoad %22 
                                       f32_3 %514 = OpFMul %512 %513 
                                       f32_4 %515 = OpLoad %110 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
                                       f32_3 %517 = OpFAdd %514 %516 
                                                      OpStore %22 %517 
                                       f32_4 %519 = OpLoad %9 
                                       f32_3 %520 = OpVectorShuffle %519 %519 0 1 2 
                                       f32_3 %522 = OpFMul %520 %521 
                                       f32_3 %523 = OpLoad %22 
                                       f32_3 %524 = OpFAdd %522 %523 
                                                      OpStore %518 %524 
                                Private f32* %525 = OpAccessChain %9 %196 
                                         f32 %526 = OpLoad %525 
                                Uniform f32* %528 = OpAccessChain %40 %527 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpFNegate %529 
                                         f32 %531 = OpFAdd %526 %530 
                                Private f32* %532 = OpAccessChain %489 %30 
                                                      OpStore %532 %531 
                                Private f32* %534 = OpAccessChain %489 %30 
                                         f32 %535 = OpLoad %534 
                                        bool %536 = OpFOrdLessThan %535 %74 
                                                      OpStore %533 %536 
                                        bool %537 = OpLoad %533 
                                         i32 %539 = OpSelect %537 %538 %147 
                                         i32 %541 = OpIMul %539 %540 
                                        bool %542 = OpINotEqual %541 %147 
                                                      OpSelectionMerge %544 None 
                                                      OpBranchConditional %542 %543 %544 
                                             %543 = OpLabel 
                                                      OpKill
                                             %544 = OpLabel 
                                       f32_3 %546 = OpLoad %139 
                                       f32_3 %547 = OpFNegate %546 
                              Uniform f32_3* %549 = OpAccessChain %40 %538 
                                       f32_3 %550 = OpLoad %549 
                                       f32_3 %551 = OpFAdd %547 %550 
                                                      OpStore %22 %551 
                                Uniform f32* %553 = OpAccessChain %40 %552 %147 %153 
                                         f32 %554 = OpLoad %553 
                                Private f32* %555 = OpAccessChain %110 %30 
                                                      OpStore %555 %554 
                                Uniform f32* %556 = OpAccessChain %40 %552 %538 %153 
                                         f32 %557 = OpLoad %556 
                                Private f32* %558 = OpAccessChain %110 %25 
                                                      OpStore %558 %557 
                                Uniform f32* %560 = OpAccessChain %40 %552 %559 %153 
                                         f32 %561 = OpLoad %560 
                                Private f32* %562 = OpAccessChain %110 %153 
                                                      OpStore %562 %561 
                                       f32_3 %563 = OpLoad %22 
                                       f32_4 %564 = OpLoad %110 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                                         f32 %566 = OpDot %563 %565 
                                Private f32* %567 = OpAccessChain %22 %30 
                                                      OpStore %567 %566 
                                       f32_3 %568 = OpLoad %139 
                              Uniform f32_4* %570 = OpAccessChain %40 %569 
                                       f32_4 %571 = OpLoad %570 
                                       f32_3 %572 = OpVectorShuffle %571 %571 0 1 2 
                                       f32_3 %573 = OpFNegate %572 
                                       f32_3 %574 = OpFAdd %568 %573 
                                                      OpStore %52 %574 
                                       f32_3 %575 = OpLoad %52 
                                       f32_3 %576 = OpLoad %52 
                                         f32 %577 = OpDot %575 %576 
                                Private f32* %578 = OpAccessChain %52 %30 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %52 %30 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpExtInst %1 31 %580 
                                Private f32* %582 = OpAccessChain %52 %30 
                                                      OpStore %582 %581 
                                Private f32* %583 = OpAccessChain %22 %30 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFNegate %584 
                                Private f32* %586 = OpAccessChain %52 %30 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpFAdd %585 %587 
                                Private f32* %589 = OpAccessChain %52 %30 
                                                      OpStore %589 %588 
                                Uniform f32* %590 = OpAccessChain %40 %569 %196 
                                         f32 %591 = OpLoad %590 
                                Private f32* %592 = OpAccessChain %52 %30 
                                         f32 %593 = OpLoad %592 
                                         f32 %594 = OpFMul %591 %593 
                                Private f32* %595 = OpAccessChain %22 %30 
                                         f32 %596 = OpLoad %595 
                                         f32 %597 = OpFAdd %594 %596 
                                Private f32* %598 = OpAccessChain %22 %30 
                                                      OpStore %598 %597 
                                Private f32* %599 = OpAccessChain %22 %30 
                                         f32 %600 = OpLoad %599 
                                Uniform f32* %602 = OpAccessChain %40 %601 %153 
                                         f32 %603 = OpLoad %602 
                                         f32 %604 = OpFMul %600 %603 
                                Uniform f32* %605 = OpAccessChain %40 %601 %196 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpFAdd %604 %606 
                                Private f32* %608 = OpAccessChain %22 %30 
                                                      OpStore %608 %607 
                                Private f32* %609 = OpAccessChain %22 %30 
                                         f32 %610 = OpLoad %609 
                                         f32 %611 = OpExtInst %1 43 %610 %74 %108 
                                Private f32* %612 = OpAccessChain %22 %30 
                                                      OpStore %612 %611 
                                Uniform f32* %614 = OpAccessChain %40 %613 %30 
                                         f32 %615 = OpLoad %614 
                                        bool %616 = OpFOrdEqual %615 %108 
                                                      OpStore %71 %616 
                                                      OpSelectionMerge %619 None 
                                                      OpBranchConditional %617 %618 %619 
                                             %618 = OpLabel 
                                        bool %620 = OpLoad %71 
                                                      OpSelectionMerge %622 None 
                                                      OpBranchConditional %620 %621 %622 
                                             %621 = OpLabel 
                                                      OpBranch %622 
                                             %622 = OpLabel 
                                                      OpBranch %619 
                                             %619 = OpLabel 
                                                      OpSelectionMerge %625 None 
                                                      OpBranchConditional %623 %624 %723 
                                             %624 = OpLabel 
                                Uniform f32* %627 = OpAccessChain %40 %613 %25 
                                         f32 %628 = OpLoad %627 
                                        bool %629 = OpFOrdEqual %628 %108 
                                                      OpStore %626 %629 
                                       f32_3 %630 = OpLoad %139 
                                       f32_3 %631 = OpVectorShuffle %630 %630 1 1 1 
                              Uniform f32_4* %633 = OpAccessChain %40 %632 %538 
                                       f32_4 %634 = OpLoad %633 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                       f32_3 %636 = OpFMul %631 %635 
                                       f32_4 %637 = OpLoad %110 
                                       f32_4 %638 = OpVectorShuffle %637 %636 4 5 6 3 
                                                      OpStore %110 %638 
                              Uniform f32_4* %639 = OpAccessChain %40 %632 %147 
                                       f32_4 %640 = OpLoad %639 
                                       f32_3 %641 = OpVectorShuffle %640 %640 0 1 2 
                                       f32_3 %642 = OpLoad %139 
                                       f32_3 %643 = OpVectorShuffle %642 %642 0 0 0 
                                       f32_3 %644 = OpFMul %641 %643 
                                       f32_4 %645 = OpLoad %110 
                                       f32_3 %646 = OpVectorShuffle %645 %645 0 1 2 
                                       f32_3 %647 = OpFAdd %644 %646 
                                       f32_4 %648 = OpLoad %110 
                                       f32_4 %649 = OpVectorShuffle %648 %647 4 5 6 3 
                                                      OpStore %110 %649 
                              Uniform f32_4* %650 = OpAccessChain %40 %632 %559 
                                       f32_4 %651 = OpLoad %650 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 1 2 
                                       f32_3 %653 = OpLoad %139 
                                       f32_3 %654 = OpVectorShuffle %653 %653 2 2 2 
                                       f32_3 %655 = OpFMul %652 %654 
                                       f32_4 %656 = OpLoad %110 
                                       f32_3 %657 = OpVectorShuffle %656 %656 0 1 2 
                                       f32_3 %658 = OpFAdd %655 %657 
                                       f32_4 %659 = OpLoad %110 
                                       f32_4 %660 = OpVectorShuffle %659 %658 4 5 6 3 
                                                      OpStore %110 %660 
                                       f32_4 %661 = OpLoad %110 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 2 
                              Uniform f32_4* %663 = OpAccessChain %40 %632 %601 
                                       f32_4 %664 = OpLoad %663 
                                       f32_3 %665 = OpVectorShuffle %664 %664 0 1 2 
                                       f32_3 %666 = OpFAdd %662 %665 
                                       f32_4 %667 = OpLoad %110 
                                       f32_4 %668 = OpVectorShuffle %667 %666 4 5 6 3 
                                                      OpStore %110 %668 
                                        bool %671 = OpLoad %626 
                                                      OpSelectionMerge %673 None 
                                                      OpBranchConditional %671 %672 %676 
                                             %672 = OpLabel 
                                       f32_4 %674 = OpLoad %110 
                                       f32_3 %675 = OpVectorShuffle %674 %674 0 1 2 
                                                      OpStore %670 %675 
                                                      OpBranch %673 
                                             %676 = OpLabel 
                                       f32_3 %677 = OpLoad %139 
                                                      OpStore %670 %677 
                                                      OpBranch %673 
                                             %673 = OpLabel 
                                       f32_3 %678 = OpLoad %670 
                                       f32_4 %679 = OpLoad %110 
                                       f32_4 %680 = OpVectorShuffle %679 %678 4 5 6 3 
                                                      OpStore %110 %680 
                                       f32_4 %681 = OpLoad %110 
                                       f32_3 %682 = OpVectorShuffle %681 %681 0 1 2 
                              Uniform f32_3* %684 = OpAccessChain %40 %683 
                                       f32_3 %685 = OpLoad %684 
                                       f32_3 %686 = OpFNegate %685 
                                       f32_3 %687 = OpFAdd %682 %686 
                                       f32_4 %688 = OpLoad %110 
                                       f32_4 %689 = OpVectorShuffle %688 %687 4 5 6 3 
                                                      OpStore %110 %689 
                                       f32_4 %690 = OpLoad %110 
                                       f32_3 %691 = OpVectorShuffle %690 %690 0 1 2 
                              Uniform f32_3* %693 = OpAccessChain %40 %692 
                                       f32_3 %694 = OpLoad %693 
                                       f32_3 %695 = OpFMul %691 %694 
                                       f32_4 %696 = OpLoad %110 
                                       f32_4 %697 = OpVectorShuffle %696 %695 0 4 5 6 
                                                      OpStore %110 %697 
                                Private f32* %698 = OpAccessChain %110 %25 
                                         f32 %699 = OpLoad %698 
                                         f32 %700 = OpFMul %699 %366 
                                         f32 %702 = OpFAdd %700 %701 
                                Private f32* %703 = OpAccessChain %262 %30 
                                                      OpStore %703 %702 
                                Uniform f32* %704 = OpAccessChain %40 %613 %153 
                                         f32 %705 = OpLoad %704 
                                         f32 %706 = OpFMul %705 %337 
                                         f32 %707 = OpFAdd %706 %701 
                                                      OpStore %95 %707 
                                         f32 %708 = OpLoad %95 
                                Private f32* %709 = OpAccessChain %262 %30 
                                         f32 %710 = OpLoad %709 
                                         f32 %711 = OpExtInst %1 40 %708 %710 
                                Private f32* %712 = OpAccessChain %110 %30 
                                                      OpStore %712 %711 
                  read_only Texture3DSampled %717 = OpLoad %716 
                                       f32_4 %718 = OpLoad %110 
                                       f32_3 %719 = OpVectorShuffle %718 %718 0 2 3 
                                       f32_4 %720 = OpImageSampleImplicitLod %717 %719 
                                                      OpStore %110 %720 
                                       f32_4 %722 = OpLoad %110 
                                                      OpStore %721 %722 
                                                      OpBranch %625 
                                             %723 = OpLabel 
                                Private f32* %724 = OpAccessChain %721 %30 
                                                      OpStore %724 %108 
                                Private f32* %725 = OpAccessChain %721 %25 
                                                      OpStore %725 %108 
                                Private f32* %726 = OpAccessChain %721 %153 
                                                      OpStore %726 %108 
                                Private f32* %727 = OpAccessChain %721 %196 
                                                      OpStore %727 %108 
                                                      OpBranch %625 
                                             %625 = OpLabel 
                                       f32_4 %728 = OpLoad %721 
                              Uniform f32_4* %729 = OpAccessChain %40 %559 
                                       f32_4 %730 = OpLoad %729 
                                         f32 %731 = OpDot %728 %730 
                                Private f32* %732 = OpAccessChain %489 %30 
                                                      OpStore %732 %731 
                                Private f32* %733 = OpAccessChain %489 %30 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpExtInst %1 43 %734 %74 %108 
                                Private f32* %736 = OpAccessChain %489 %30 
                                                      OpStore %736 %735 
                                       f32_4 %739 = OpLoad %738 
                                       f32_2 %740 = OpVectorShuffle %739 %739 0 1 
                                       f32_4 %741 = OpLoad %738 
                                       f32_2 %742 = OpVectorShuffle %741 %741 3 3 
                                       f32_2 %743 = OpFDiv %740 %742 
                                                      OpStore %262 %743 
                  read_only Texture2DSampled %746 = OpLoad %745 
                                       f32_2 %747 = OpLoad %262 
                                       f32_4 %748 = OpImageSampleImplicitLod %746 %747 
                                         f32 %749 = OpCompositeExtract %748 0 
                                                      OpStore %744 %749 
                                Private f32* %751 = OpAccessChain %22 %30 
                                         f32 %752 = OpLoad %751 
                                         f32 %753 = OpLoad %744 
                                         f32 %754 = OpFAdd %752 %753 
                                Private f32* %755 = OpAccessChain %750 %30 
                                                      OpStore %755 %754 
                                Private f32* %756 = OpAccessChain %750 %30 
                                         f32 %757 = OpLoad %756 
                                         f32 %758 = OpExtInst %1 43 %757 %74 %108 
                                Private f32* %759 = OpAccessChain %750 %30 
                                                      OpStore %759 %758 
                                Private f32* %760 = OpAccessChain %750 %30 
                                         f32 %761 = OpLoad %760 
                                Private f32* %762 = OpAccessChain %489 %30 
                                         f32 %763 = OpLoad %762 
                                         f32 %764 = OpExtInst %1 37 %761 %763 
                                Private f32* %765 = OpAccessChain %489 %30 
                                                      OpStore %765 %764 
                                        bool %767 = OpLoad %71 
                                                      OpSelectionMerge %769 None 
                                                      OpBranchConditional %767 %768 %772 
                                             %768 = OpLabel 
                                Private f32* %770 = OpAccessChain %489 %30 
                                         f32 %771 = OpLoad %770 
                                                      OpStore %766 %771 
                                                      OpBranch %769 
                                             %772 = OpLabel 
                                Private f32* %773 = OpAccessChain %750 %30 
                                         f32 %774 = OpLoad %773 
                                                      OpStore %766 %774 
                                                      OpBranch %769 
                                             %769 = OpLabel 
                                         f32 %775 = OpLoad %766 
                                Private f32* %776 = OpAccessChain %489 %30 
                                                      OpStore %776 %775 
                                       f32_3 %777 = OpLoad %518 
                              Uniform f32_4* %779 = OpAccessChain %40 %778 
                                       f32_4 %780 = OpLoad %779 
                                       f32_3 %781 = OpVectorShuffle %780 %780 0 1 2 
                                       f32_3 %782 = OpFMul %777 %781 
                                                      OpStore %750 %782 
                                       f32_3 %783 = OpLoad %489 
                                       f32_3 %784 = OpVectorShuffle %783 %783 0 0 0 
                                       f32_3 %785 = OpLoad %750 
                                       f32_3 %786 = OpFMul %784 %785 
                                                      OpStore %489 %786 
                                       f32_3 %789 = OpLoad %518 
                                       f32_3 %791 = OpLoad %790 
                                       f32_3 %792 = OpFMul %789 %791 
                                       f32_3 %793 = OpLoad %489 
                                       f32_3 %794 = OpFAdd %792 %793 
                                       f32_4 %795 = OpLoad %788 
                                       f32_4 %796 = OpVectorShuffle %795 %794 4 5 6 3 
                                                      OpStore %788 %796 
                                Private f32* %797 = OpAccessChain %9 %196 
                                         f32 %798 = OpLoad %797 
                                 Output f32* %800 = OpAccessChain %788 %196 
                                                      OpStore %800 %798 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 9001
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  Blend One One, One One
  ColorMask RGB 0
  ZWrite Off
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 83662
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    vs_TEXCOORD3.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _OverrideColor;
uniform 	float _StepValue;
uniform 	float _SkyBoost;
uniform 	float _SkyPower;
uniform 	float _CurvePower;
uniform 	float _CurveColorFactor;
uniform 	float _CurveFreq;
uniform 	float _DitherCohesionFactor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
float u_xlat13;
float u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat19;
float u_xlat16_19;
bool u_xlatb19;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = log2(vs_TEXCOORD3.y);
    u_xlat1.x = u_xlat1.x * _SkyPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat7.x = vs_TEXCOORD3.y * vs_TEXCOORD3.y;
    u_xlat1.x = u_xlat7.x * _SkyBoost + u_xlat1.x;
    u_xlatb7 = u_xlat1.x<0.0;
    u_xlat1.x = (u_xlatb7) ? -1.0 : u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * _OverrideColor.xyz;
    u_xlat19 = vs_TEXCOORD3.x * _CurveFreq;
    u_xlat19 = u_xlat19 * 3.1400001;
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 + 1.0;
    u_xlat2.x = _CurveColorFactor + _CurveColorFactor;
    u_xlat19 = u_xlat19 / u_xlat2.x;
    u_xlat19 = u_xlat19 + -1.0;
    u_xlat19 = _CurvePower * u_xlat19 + 1.0;
    u_xlat2.xyw = vec3(u_xlat19) * u_xlat1.yzx;
    u_xlat3.xyz = vs_TEXCOORD2.xyy * vec3(0.00999999978, 0.00999999978, 0.0799999982);
    u_xlat4.y = (-_Time.x) * 0.333333343 + u_xlat3.z;
    u_xlat4.x = vs_TEXCOORD2.x * 0.0799999982;
    u_xlat10_4 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat16_1 = log2(u_xlat10_4.x);
    u_xlat16_1 = u_xlat16_1 * 1.5;
    u_xlat16_1 = exp2(u_xlat16_1);
    u_xlatb15 = u_xlat2.x>=u_xlat2.y;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat2.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.yz * vec2(u_xlat19) + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat15) * u_xlat5 + u_xlat4;
    u_xlatb7 = u_xlat2.w>=u_xlat4.x;
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat2.wyx;
    u_xlat4 = (-u_xlat2) + u_xlat4;
    u_xlat2 = u_xlat7.xxxx * u_xlat4 + u_xlat2;
    u_xlat7.x = min(u_xlat2.y, u_xlat2.w);
    u_xlat7.x = (-u_xlat7.x) + u_xlat2.x;
    u_xlat13 = (-u_xlat2.y) + u_xlat2.w;
    u_xlat19 = u_xlat7.x * 6.0 + 1.00000001e-010;
    u_xlat13 = u_xlat13 / u_xlat19;
    u_xlat13 = u_xlat13 + u_xlat2.z;
    u_xlat19 = u_xlat2.x + 1.00000001e-010;
    u_xlat7.x = u_xlat7.x / u_xlat19;
    u_xlat1.x = (-u_xlat16_1) * 2.0 + u_xlat2.x;
    u_xlat19 = dot(u_xlat3.xy, vec2(12.9898005, 78.2330017));
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 * 43758.5469;
    u_xlat19 = fract(u_xlat19);
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat2.x = u_xlat3.y + u_xlat3.x;
    u_xlat8 = u_xlat2.x + (-_Time.z);
    u_xlat8 = sin(u_xlat8);
    u_xlat8 = u_xlat8 + 1.0;
    u_xlat8 = u_xlat8 * 0.5;
    u_xlat14 = u_xlat2.x + _Time.z;
    u_xlat14 = sin(u_xlat14);
    u_xlat14 = u_xlat14 * 0.099999994 + 0.150000006;
    u_xlat8 = u_xlat8 * u_xlat14 + 0.349999994;
    u_xlat2.x = u_xlat2.x * 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlatb2 = 0.25<u_xlat2.x;
    u_xlat1.x = u_xlat1.x / _StepValue;
    u_xlat14 = (-u_xlat8) + u_xlat1.x;
    u_xlat14 = (-u_xlat19) * _DitherCohesionFactor + u_xlat14;
    u_xlat14 = ceil(u_xlat14);
    u_xlat14 = u_xlat14 * _StepValue;
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat19 * _DitherCohesionFactor + u_xlat1.x;
    u_xlat1.x = roundEven(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _StepValue;
    u_xlat1.x = (u_xlatb2) ? u_xlat14 : u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat2.xyz = abs(vec3(u_xlat13)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat2.xyz = fract(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat2.xyz = abs(u_xlat2.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_19 = u_xlat10_0.x + -0.00999999978;
    u_xlat16_19 = u_xlat16_19 * 1000.0;
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(0.5, 0.5, 0.5) + vec3(0.0299999993, 0.0, 0.0700000003);
    u_xlat1.xyz = vec3(u_xlat16_19) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb19){
        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat19 = u_xlat2.y * 0.25 + 0.75;
        u_xlat8 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat19, u_xlat8);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat19 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xx);
    u_xlat1.x = u_xlat19 * u_xlat10_2.w;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 206
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %145 %151 %152 %164 %194 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %194 Location 194 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_2 %140 = OpConstantComposite %139 %139 
                                             %144 = OpTypePointer Output %95 
                               Output f32_2* %145 = OpVariable Output 
                                         f32 %148 = OpConstant 3.674022E-40 
                                       f32_2 %149 = OpConstantComposite %148 %148 
                               Output f32_2* %151 = OpVariable Output 
                                Input f32_4* %152 = OpVariable Input 
                                             %163 = OpTypePointer Input %50 
                                Input f32_3* %164 = OpVariable Input 
                                         u32 %170 = OpConstant 0 
                                             %171 = OpTypePointer Private %6 
                                         u32 %184 = OpConstant 2 
                                Private f32* %186 = OpVariable Private 
                               Output f32_3* %194 = OpVariable Output 
                                             %200 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %96 = OpLoad %44 
                                        f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                               Uniform f32_4* %98 = OpAccessChain %21 %36 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %97 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
                                                      OpStore %9 %103 
                              Uniform f32_4* %104 = OpAccessChain %21 %36 %23 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %107 = OpLoad %44 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 0 
                                       f32_2 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %9 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %36 %36 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpLoad %44 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 2 
                                       f32_2 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %9 %125 
                              Uniform f32_4* %126 = OpAccessChain %21 %36 %46 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                                       f32_4 %129 = OpLoad %44 
                                       f32_2 %130 = OpVectorShuffle %129 %129 3 3 
                                       f32_2 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_2 %134 = OpFAdd %131 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 3 
                                                      OpStore %9 %136 
                                       f32_4 %137 = OpLoad %9 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %9 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %9 %143 
                                       f32_4 %146 = OpLoad %9 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_2 %150 = OpFMul %147 %149 
                                                      OpStore %145 %150 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                              Uniform f32_4* %155 = OpAccessChain %21 %46 
                                       f32_4 %156 = OpLoad %155 
                                       f32_2 %157 = OpVectorShuffle %156 %156 0 1 
                                       f32_2 %158 = OpFMul %154 %157 
                              Uniform f32_4* %159 = OpAccessChain %21 %46 
                                       f32_4 %160 = OpLoad %159 
                                       f32_2 %161 = OpVectorShuffle %160 %160 2 3 
                                       f32_2 %162 = OpFAdd %158 %161 
                                                      OpStore %151 %162 
                                       f32_3 %165 = OpLoad %164 
                              Uniform f32_4* %166 = OpAccessChain %21 %24 %23 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                Private f32* %172 = OpAccessChain %9 %170 
                                                      OpStore %172 %169 
                                       f32_3 %173 = OpLoad %164 
                              Uniform f32_4* %174 = OpAccessChain %21 %24 %24 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %173 %176 
                                Private f32* %178 = OpAccessChain %9 %81 
                                                      OpStore %178 %177 
                                       f32_3 %179 = OpLoad %164 
                              Uniform f32_4* %180 = OpAccessChain %21 %24 %36 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                         f32 %183 = OpDot %179 %182 
                                Private f32* %185 = OpAccessChain %9 %184 
                                                      OpStore %185 %183 
                                       f32_4 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %188 %190 
                                                      OpStore %186 %191 
                                         f32 %192 = OpLoad %186 
                                         f32 %193 = OpExtInst %1 32 %192 
                                                      OpStore %186 %193 
                                         f32 %195 = OpLoad %186 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %196 %198 
                                                      OpStore %194 %199 
                                 Output f32* %201 = OpAccessChain %85 %23 %81 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFNegate %202 
                                 Output f32* %204 = OpAccessChain %85 %23 %81 
                                                      OpStore %204 %203 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 727
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %23 %139 %715 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 RelaxedPrecision 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpMemberDecorate %38 6 RelaxedPrecision 
                                                      OpMemberDecorate %38 6 Offset 38 
                                                      OpMemberDecorate %38 7 Offset 38 
                                                      OpMemberDecorate %38 8 Offset 38 
                                                      OpMemberDecorate %38 9 Offset 38 
                                                      OpMemberDecorate %38 10 Offset 38 
                                                      OpMemberDecorate %38 11 Offset 38 
                                                      OpMemberDecorate %38 12 Offset 38 
                                                      OpMemberDecorate %38 13 Offset 38 
                                                      OpMemberDecorate %38 14 Offset 38 
                                                      OpMemberDecorate %38 15 Offset 38 
                                                      OpMemberDecorate %38 16 RelaxedPrecision 
                                                      OpMemberDecorate %38 16 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %163 DescriptorSet 163 
                                                      OpDecorate %163 Binding 163 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %580 SpecId 580 
                                                      OpDecorate %670 DescriptorSet 670 
                                                      OpDecorate %670 Binding 670 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %685 RelaxedPrecision 
                                                      OpDecorate %688 RelaxedPrecision 
                                                      OpDecorate %689 RelaxedPrecision 
                                                      OpDecorate %695 DescriptorSet 695 
                                                      OpDecorate %695 Binding 695 
                                                      OpDecorate %703 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %715 Location 715 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %723 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                                 Input f32_2* %23 = OpVariable Input 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                          u32 %35 = OpConstant 4 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeArray %7 %35 
                                              %38 = OpTypeStruct %7 %7 %7 %36 %20 %20 %7 %37 %7 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 11 
                                              %43 = OpTypePointer Uniform %6 
                               Private f32_3* %52 = OpVariable Private 
                                          i32 %61 = OpConstant 10 
                                              %69 = OpTypeBool 
                                              %70 = OpTypePointer Private %69 
                                Private bool* %71 = OpVariable Private 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Function %6 
                                          f32 %81 = OpConstant 3.674022E-40 
                                          i32 %89 = OpConstant 8 
                                              %90 = OpTypePointer Uniform %7 
                                 Private f32* %95 = OpVariable Private 
                                          i32 %98 = OpConstant 14 
                                         f32 %103 = OpConstant 3.674022E-40 
                                         f32 %108 = OpConstant 3.674022E-40 
                              Private f32_4* %110 = OpVariable Private 
                                         i32 %111 = OpConstant 13 
                                         i32 %124 = OpConstant 12 
                              Private f32_3* %137 = OpVariable Private 
                                             %138 = OpTypePointer Input %20 
                                Input f32_3* %139 = OpVariable Input 
                                         f32 %142 = OpConstant 3.674022E-40 
                                         f32 %143 = OpConstant 3.674022E-40 
                                       f32_3 %144 = OpConstantComposite %142 %142 %143 
                              Private f32_4* %146 = OpVariable Private 
                                         i32 %147 = OpConstant 0 
                                         f32 %151 = OpConstant 3.674022E-40 
                                         u32 %153 = OpConstant 2 
                                Private f32* %162 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %163 = OpVariable UniformConstant 
                                Private f32* %169 = OpVariable Private 
                                         f32 %173 = OpConstant 3.674022E-40 
                               Private bool* %177 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                                         f32 %195 = OpConstant 3.674022E-40 
                                         u32 %196 = OpConstant 3 
                              Private f32_4* %198 = OpVariable Private 
                                Private f32* %261 = OpVariable Private 
                                         f32 %270 = OpConstant 3.674022E-40 
                                         f32 %272 = OpConstant 3.674022E-40 
                                         f32 %291 = OpConstant 3.674022E-40 
                                         f32 %299 = OpConstant 3.674022E-40 
                                         f32 %300 = OpConstant 3.674022E-40 
                                       f32_2 %301 = OpConstantComposite %299 %300 
                                         f32 %306 = OpConstant 3.674022E-40 
                                         f32 %311 = OpConstant 3.674022E-40 
                                Private f32* %319 = OpVariable Private 
                                         f32 %331 = OpConstant 3.674022E-40 
                                Private f32* %333 = OpVariable Private 
                                         f32 %342 = OpConstant 3.674022E-40 
                                         f32 %344 = OpConstant 3.674022E-40 
                                         f32 %349 = OpConstant 3.674022E-40 
                               Private bool* %359 = OpVariable Private 
                                         f32 %360 = OpConstant 3.674022E-40 
                                         i32 %366 = OpConstant 9 
                                         i32 %378 = OpConstant 15 
                                       f32_3 %430 = OpConstantComposite %108 %195 %151 
                                       f32_3 %441 = OpConstantComposite %270 %270 %270 
                                         f32 %443 = OpConstant 3.674022E-40 
                                       f32_3 %444 = OpConstantComposite %443 %443 %443 
                                       f32_3 %451 = OpConstantComposite %81 %81 %81 
                                       f32_3 %472 = OpConstantComposite %108 %108 %108 
                                       f32_3 %479 = OpConstantComposite %331 %331 %331 
                              Private f32_3* %483 = OpVariable Private 
                                         f32 %486 = OpConstant 3.674022E-40 
                                         f32 %491 = OpConstant 3.674022E-40 
                                         f32 %501 = OpConstant 3.674022E-40 
                                         f32 %502 = OpConstant 3.674022E-40 
                                       f32_3 %503 = OpConstantComposite %501 %74 %502 
                              Private f32_3* %512 = OpVariable Private 
                                       f32_3 %515 = OpConstantComposite %291 %291 %291 
                                         i32 %521 = OpConstant 16 
                               Private bool* %527 = OpVariable Private 
                                         i32 %532 = OpConstant 1 
                                         i32 %534 = OpConstant -1 
                                         i32 %542 = OpConstant 7 
                                         i32 %555 = OpConstant 2 
                                         i32 %565 = OpConstant 3 
                               Private bool* %570 = OpVariable Private 
                                        bool %574 = OpConstantFalse 
                                        bool %580 = OpSpecConstantFalse 
                                             %624 = OpTypePointer Function %20 
                                         i32 %638 = OpConstant 5 
                                             %639 = OpTypePointer Uniform %20 
                                         i32 %648 = OpConstant 4 
                                         f32 %657 = OpConstant 3.674022E-40 
                                             %667 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %668 = OpTypeSampledImage %667 
                                             %669 = OpTypePointer UniformConstant %668 
 UniformConstant read_only Texture3DSampled* %670 = OpVariable UniformConstant 
                              Private f32_4* %675 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %695 = OpVariable UniformConstant 
                                         i32 %709 = OpConstant 6 
                                             %714 = OpTypePointer Output %7 
                               Output f32_4* %715 = OpVariable Output 
                                             %724 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %77 = OpVariable Function 
                               Function f32* %184 = OpVariable Function 
                               Function f32* %223 = OpVariable Function 
                               Function f32* %413 = OpVariable Function 
                             Function f32_3* %625 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                   Input f32* %27 = OpAccessChain %23 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpExtInst %1 30 %28 
                                 Private f32* %32 = OpAccessChain %22 %30 
                                                      OpStore %32 %29 
                                 Private f32* %33 = OpAccessChain %22 %30 
                                          f32 %34 = OpLoad %33 
                                 Uniform f32* %44 = OpAccessChain %40 %42 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %34 %45 
                                 Private f32* %47 = OpAccessChain %22 %30 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %22 %30 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpExtInst %1 29 %49 
                                 Private f32* %51 = OpAccessChain %22 %30 
                                                      OpStore %51 %50 
                                   Input f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                   Input f32* %55 = OpAccessChain %23 %25 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFMul %54 %56 
                                 Private f32* %58 = OpAccessChain %52 %30 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %52 %30 
                                          f32 %60 = OpLoad %59 
                                 Uniform f32* %62 = OpAccessChain %40 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFMul %60 %63 
                                 Private f32* %65 = OpAccessChain %22 %30 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFAdd %64 %66 
                                 Private f32* %68 = OpAccessChain %22 %30 
                                                      OpStore %68 %67 
                                 Private f32* %72 = OpAccessChain %22 %30 
                                          f32 %73 = OpLoad %72 
                                         bool %75 = OpFOrdLessThan %73 %74 
                                                      OpStore %71 %75 
                                         bool %78 = OpLoad %71 
                                                      OpSelectionMerge %80 None 
                                                      OpBranchConditional %78 %79 %82 
                                              %79 = OpLabel 
                                                      OpStore %77 %81 
                                                      OpBranch %80 
                                              %82 = OpLabel 
                                 Private f32* %83 = OpAccessChain %22 %30 
                                          f32 %84 = OpLoad %83 
                                                      OpStore %77 %84 
                                                      OpBranch %80 
                                              %80 = OpLabel 
                                          f32 %85 = OpLoad %77 
                                 Private f32* %86 = OpAccessChain %22 %30 
                                                      OpStore %86 %85 
                                        f32_3 %87 = OpLoad %22 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 0 0 
                               Uniform f32_4* %91 = OpAccessChain %40 %89 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFMul %88 %93 
                                                      OpStore %22 %94 
                                   Input f32* %96 = OpAccessChain %23 %30 
                                          f32 %97 = OpLoad %96 
                                 Uniform f32* %99 = OpAccessChain %40 %98 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFMul %97 %100 
                                                      OpStore %95 %101 
                                         f32 %102 = OpLoad %95 
                                         f32 %104 = OpFMul %102 %103 
                                                      OpStore %95 %104 
                                         f32 %105 = OpLoad %95 
                                         f32 %106 = OpExtInst %1 13 %105 
                                                      OpStore %95 %106 
                                         f32 %107 = OpLoad %95 
                                         f32 %109 = OpFAdd %107 %108 
                                                      OpStore %95 %109 
                                Uniform f32* %112 = OpAccessChain %40 %111 
                                         f32 %113 = OpLoad %112 
                                Uniform f32* %114 = OpAccessChain %40 %111 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpFAdd %113 %115 
                                Private f32* %117 = OpAccessChain %110 %30 
                                                      OpStore %117 %116 
                                         f32 %118 = OpLoad %95 
                                Private f32* %119 = OpAccessChain %110 %30 
                                         f32 %120 = OpLoad %119 
                                         f32 %121 = OpFDiv %118 %120 
                                                      OpStore %95 %121 
                                         f32 %122 = OpLoad %95 
                                         f32 %123 = OpFAdd %122 %81 
                                                      OpStore %95 %123 
                                Uniform f32* %125 = OpAccessChain %40 %124 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpLoad %95 
                                         f32 %128 = OpFMul %126 %127 
                                         f32 %129 = OpFAdd %128 %108 
                                                      OpStore %95 %129 
                                         f32 %130 = OpLoad %95 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_3 %132 = OpLoad %22 
                                       f32_3 %133 = OpVectorShuffle %132 %132 1 2 0 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %110 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 6 
                                                      OpStore %110 %136 
                                       f32_3 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 1 
                                       f32_3 %145 = OpFMul %141 %144 
                                                      OpStore %137 %145 
                                Uniform f32* %148 = OpAccessChain %40 %147 %30 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFNegate %149 
                                         f32 %152 = OpFMul %150 %151 
                                Private f32* %154 = OpAccessChain %137 %153 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFAdd %152 %155 
                                Private f32* %157 = OpAccessChain %146 %25 
                                                      OpStore %157 %156 
                                  Input f32* %158 = OpAccessChain %139 %30 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %159 %143 
                                Private f32* %161 = OpAccessChain %146 %30 
                                                      OpStore %161 %160 
                  read_only Texture2DSampled %164 = OpLoad %163 
                                       f32_4 %165 = OpLoad %146 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_4 %167 = OpImageSampleImplicitLod %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                                      OpStore %162 %168 
                                         f32 %170 = OpLoad %162 
                                         f32 %171 = OpExtInst %1 30 %170 
                                                      OpStore %169 %171 
                                         f32 %172 = OpLoad %169 
                                         f32 %174 = OpFMul %172 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 29 %175 
                                                      OpStore %169 %176 
                                Private f32* %178 = OpAccessChain %110 %30 
                                         f32 %179 = OpLoad %178 
                                Private f32* %180 = OpAccessChain %110 %25 
                                         f32 %181 = OpLoad %180 
                                        bool %182 = OpFOrdGreaterThanEqual %179 %181 
                                                      OpStore %177 %182 
                                        bool %185 = OpLoad %177 
                                                      OpSelectionMerge %187 None 
                                                      OpBranchConditional %185 %186 %188 
                                             %186 = OpLabel 
                                                      OpStore %184 %108 
                                                      OpBranch %187 
                                             %188 = OpLabel 
                                                      OpStore %184 %74 
                                                      OpBranch %187 
                                             %187 = OpLabel 
                                         f32 %189 = OpLoad %184 
                                                      OpStore %183 %189 
                                       f32_4 %190 = OpLoad %110 
                                       f32_2 %191 = OpVectorShuffle %190 %190 1 0 
                                       f32_4 %192 = OpLoad %146 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 2 3 
                                                      OpStore %146 %193 
                                Private f32* %194 = OpAccessChain %146 %153 
                                                      OpStore %194 %81 
                                Private f32* %197 = OpAccessChain %146 %196 
                                                      OpStore %197 %195 
                                       f32_3 %199 = OpLoad %22 
                                       f32_2 %200 = OpVectorShuffle %199 %199 1 2 
                                         f32 %201 = OpLoad %95 
                                       f32_2 %202 = OpCompositeConstruct %201 %201 
                                       f32_2 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %146 
                                       f32_2 %205 = OpVectorShuffle %204 %204 0 1 
                                       f32_2 %206 = OpFNegate %205 
                                       f32_2 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %198 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 2 3 
                                                      OpStore %198 %209 
                                Private f32* %210 = OpAccessChain %198 %153 
                                                      OpStore %210 %108 
                                Private f32* %211 = OpAccessChain %198 %196 
                                                      OpStore %211 %81 
                                         f32 %212 = OpLoad %183 
                                       f32_4 %213 = OpCompositeConstruct %212 %212 %212 %212 
                                       f32_4 %214 = OpLoad %198 
                                       f32_4 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %146 
                                       f32_4 %217 = OpFAdd %215 %216 
                                                      OpStore %146 %217 
                                Private f32* %218 = OpAccessChain %110 %196 
                                         f32 %219 = OpLoad %218 
                                Private f32* %220 = OpAccessChain %146 %30 
                                         f32 %221 = OpLoad %220 
                                        bool %222 = OpFOrdGreaterThanEqual %219 %221 
                                                      OpStore %71 %222 
                                        bool %224 = OpLoad %71 
                                                      OpSelectionMerge %226 None 
                                                      OpBranchConditional %224 %225 %227 
                                             %225 = OpLabel 
                                                      OpStore %223 %108 
                                                      OpBranch %226 
                                             %227 = OpLabel 
                                                      OpStore %223 %74 
                                                      OpBranch %226 
                                             %226 = OpLabel 
                                         f32 %228 = OpLoad %223 
                                Private f32* %229 = OpAccessChain %52 %30 
                                                      OpStore %229 %228 
                                       f32_4 %230 = OpLoad %146 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 3 
                                       f32_4 %232 = OpLoad %110 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %110 %233 
                                       f32_4 %234 = OpLoad %110 
                                       f32_3 %235 = OpVectorShuffle %234 %234 3 1 0 
                                       f32_4 %236 = OpLoad %146 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 2 6 
                                                      OpStore %146 %237 
                                       f32_4 %238 = OpLoad %110 
                                       f32_4 %239 = OpFNegate %238 
                                       f32_4 %240 = OpLoad %146 
                                       f32_4 %241 = OpFAdd %239 %240 
                                                      OpStore %146 %241 
                                       f32_3 %242 = OpLoad %52 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpLoad %146 
                                       f32_4 %245 = OpFMul %243 %244 
                                       f32_4 %246 = OpLoad %110 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %110 %247 
                                Private f32* %248 = OpAccessChain %110 %25 
                                         f32 %249 = OpLoad %248 
                                Private f32* %250 = OpAccessChain %110 %196 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpExtInst %1 37 %249 %251 
                                Private f32* %253 = OpAccessChain %52 %30 
                                                      OpStore %253 %252 
                                Private f32* %254 = OpAccessChain %52 %30 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFNegate %255 
                                Private f32* %257 = OpAccessChain %110 %30 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %52 %30 
                                                      OpStore %260 %259 
                                Private f32* %262 = OpAccessChain %110 %25 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpFNegate %263 
                                Private f32* %265 = OpAccessChain %110 %196 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpFAdd %264 %266 
                                                      OpStore %261 %267 
                                Private f32* %268 = OpAccessChain %52 %30 
                                         f32 %269 = OpLoad %268 
                                         f32 %271 = OpFMul %269 %270 
                                         f32 %273 = OpFAdd %271 %272 
                                                      OpStore %95 %273 
                                         f32 %274 = OpLoad %261 
                                         f32 %275 = OpLoad %95 
                                         f32 %276 = OpFDiv %274 %275 
                                                      OpStore %261 %276 
                                         f32 %277 = OpLoad %261 
                                Private f32* %278 = OpAccessChain %110 %153 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFAdd %277 %279 
                                                      OpStore %261 %280 
                                Private f32* %281 = OpAccessChain %110 %30 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpFAdd %282 %272 
                                                      OpStore %95 %283 
                                Private f32* %284 = OpAccessChain %52 %30 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpLoad %95 
                                         f32 %287 = OpFDiv %285 %286 
                                Private f32* %288 = OpAccessChain %52 %30 
                                                      OpStore %288 %287 
                                         f32 %289 = OpLoad %169 
                                         f32 %290 = OpFNegate %289 
                                         f32 %292 = OpFMul %290 %291 
                                Private f32* %293 = OpAccessChain %110 %30 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFAdd %292 %294 
                                Private f32* %296 = OpAccessChain %22 %30 
                                                      OpStore %296 %295 
                                       f32_3 %297 = OpLoad %137 
                                       f32_2 %298 = OpVectorShuffle %297 %297 0 1 
                                         f32 %302 = OpDot %298 %301 
                                                      OpStore %95 %302 
                                         f32 %303 = OpLoad %95 
                                         f32 %304 = OpExtInst %1 13 %303 
                                                      OpStore %95 %304 
                                         f32 %305 = OpLoad %95 
                                         f32 %307 = OpFMul %305 %306 
                                                      OpStore %95 %307 
                                         f32 %308 = OpLoad %95 
                                         f32 %309 = OpExtInst %1 10 %308 
                                                      OpStore %95 %309 
                                         f32 %310 = OpLoad %95 
                                         f32 %312 = OpFAdd %310 %311 
                                                      OpStore %95 %312 
                                Private f32* %313 = OpAccessChain %137 %25 
                                         f32 %314 = OpLoad %313 
                                Private f32* %315 = OpAccessChain %137 %30 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpFAdd %314 %316 
                                Private f32* %318 = OpAccessChain %110 %30 
                                                      OpStore %318 %317 
                                Private f32* %320 = OpAccessChain %110 %30 
                                         f32 %321 = OpLoad %320 
                                Uniform f32* %322 = OpAccessChain %40 %147 %153 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFNegate %323 
                                         f32 %325 = OpFAdd %321 %324 
                                                      OpStore %319 %325 
                                         f32 %326 = OpLoad %319 
                                         f32 %327 = OpExtInst %1 13 %326 
                                                      OpStore %319 %327 
                                         f32 %328 = OpLoad %319 
                                         f32 %329 = OpFAdd %328 %108 
                                                      OpStore %319 %329 
                                         f32 %330 = OpLoad %319 
                                         f32 %332 = OpFMul %330 %331 
                                                      OpStore %319 %332 
                                Private f32* %334 = OpAccessChain %110 %30 
                                         f32 %335 = OpLoad %334 
                                Uniform f32* %336 = OpAccessChain %40 %147 %153 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpFAdd %335 %337 
                                                      OpStore %333 %338 
                                         f32 %339 = OpLoad %333 
                                         f32 %340 = OpExtInst %1 13 %339 
                                                      OpStore %333 %340 
                                         f32 %341 = OpLoad %333 
                                         f32 %343 = OpFMul %341 %342 
                                         f32 %345 = OpFAdd %343 %344 
                                                      OpStore %333 %345 
                                         f32 %346 = OpLoad %319 
                                         f32 %347 = OpLoad %333 
                                         f32 %348 = OpFMul %346 %347 
                                         f32 %350 = OpFAdd %348 %349 
                                                      OpStore %319 %350 
                                Private f32* %351 = OpAccessChain %110 %30 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpFMul %352 %331 
                                Private f32* %354 = OpAccessChain %110 %30 
                                                      OpStore %354 %353 
                                Private f32* %355 = OpAccessChain %110 %30 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpExtInst %1 10 %356 
                                Private f32* %358 = OpAccessChain %110 %30 
                                                      OpStore %358 %357 
                                Private f32* %361 = OpAccessChain %110 %30 
                                         f32 %362 = OpLoad %361 
                                        bool %363 = OpFOrdLessThan %360 %362 
                                                      OpStore %359 %363 
                                Private f32* %364 = OpAccessChain %22 %30 
                                         f32 %365 = OpLoad %364 
                                Uniform f32* %367 = OpAccessChain %40 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFDiv %365 %368 
                                Private f32* %370 = OpAccessChain %22 %30 
                                                      OpStore %370 %369 
                                         f32 %371 = OpLoad %319 
                                         f32 %372 = OpFNegate %371 
                                Private f32* %373 = OpAccessChain %22 %30 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFAdd %372 %374 
                                                      OpStore %333 %375 
                                         f32 %376 = OpLoad %95 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %379 = OpAccessChain %40 %378 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFMul %377 %380 
                                         f32 %382 = OpLoad %333 
                                         f32 %383 = OpFAdd %381 %382 
                                                      OpStore %333 %383 
                                         f32 %384 = OpLoad %333 
                                         f32 %385 = OpExtInst %1 9 %384 
                                                      OpStore %333 %385 
                                         f32 %386 = OpLoad %333 
                                Uniform f32* %387 = OpAccessChain %40 %366 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFMul %386 %388 
                                                      OpStore %333 %389 
                                         f32 %390 = OpLoad %319 
                                Private f32* %391 = OpAccessChain %22 %30 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFAdd %390 %392 
                                Private f32* %394 = OpAccessChain %22 %30 
                                                      OpStore %394 %393 
                                         f32 %395 = OpLoad %95 
                                Uniform f32* %396 = OpAccessChain %40 %378 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFMul %395 %397 
                                Private f32* %399 = OpAccessChain %22 %30 
                                         f32 %400 = OpLoad %399 
                                         f32 %401 = OpFAdd %398 %400 
                                Private f32* %402 = OpAccessChain %22 %30 
                                                      OpStore %402 %401 
                                Private f32* %403 = OpAccessChain %22 %30 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpExtInst %1 2 %404 
                                Private f32* %406 = OpAccessChain %22 %30 
                                                      OpStore %406 %405 
                                Private f32* %407 = OpAccessChain %22 %30 
                                         f32 %408 = OpLoad %407 
                                Uniform f32* %409 = OpAccessChain %40 %366 
                                         f32 %410 = OpLoad %409 
                                         f32 %411 = OpFMul %408 %410 
                                Private f32* %412 = OpAccessChain %22 %30 
                                                      OpStore %412 %411 
                                        bool %414 = OpLoad %359 
                                                      OpSelectionMerge %416 None 
                                                      OpBranchConditional %414 %415 %418 
                                             %415 = OpLabel 
                                         f32 %417 = OpLoad %333 
                                                      OpStore %413 %417 
                                                      OpBranch %416 
                                             %418 = OpLabel 
                                Private f32* %419 = OpAccessChain %22 %30 
                                         f32 %420 = OpLoad %419 
                                                      OpStore %413 %420 
                                                      OpBranch %416 
                                             %416 = OpLabel 
                                         f32 %421 = OpLoad %413 
                                Private f32* %422 = OpAccessChain %22 %30 
                                                      OpStore %422 %421 
                                Private f32* %423 = OpAccessChain %22 %30 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpExtInst %1 40 %424 %74 
                                Private f32* %426 = OpAccessChain %22 %30 
                                                      OpStore %426 %425 
                                         f32 %427 = OpLoad %261 
                                       f32_3 %428 = OpCompositeConstruct %427 %427 %427 
                                       f32_3 %429 = OpExtInst %1 4 %428 
                                       f32_3 %431 = OpFAdd %429 %430 
                                       f32_4 %432 = OpLoad %110 
                                       f32_4 %433 = OpVectorShuffle %432 %431 4 5 6 3 
                                                      OpStore %110 %433 
                                       f32_4 %434 = OpLoad %110 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_3 %436 = OpExtInst %1 10 %435 
                                       f32_4 %437 = OpLoad %110 
                                       f32_4 %438 = OpVectorShuffle %437 %436 4 5 6 3 
                                                      OpStore %110 %438 
                                       f32_4 %439 = OpLoad %110 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                       f32_3 %442 = OpFMul %440 %441 
                                       f32_3 %445 = OpFAdd %442 %444 
                                       f32_4 %446 = OpLoad %110 
                                       f32_4 %447 = OpVectorShuffle %446 %445 4 5 6 3 
                                                      OpStore %110 %447 
                                       f32_4 %448 = OpLoad %110 
                                       f32_3 %449 = OpVectorShuffle %448 %448 0 1 2 
                                       f32_3 %450 = OpExtInst %1 4 %449 
                                       f32_3 %452 = OpFAdd %450 %451 
                                       f32_4 %453 = OpLoad %110 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 6 3 
                                                      OpStore %110 %454 
                                       f32_4 %455 = OpLoad %110 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpCompositeConstruct %74 %74 %74 
                                       f32_3 %458 = OpCompositeConstruct %108 %108 %108 
                                       f32_3 %459 = OpExtInst %1 43 %456 %457 %458 
                                       f32_4 %460 = OpLoad %110 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 6 3 
                                                      OpStore %110 %461 
                                       f32_4 %462 = OpLoad %110 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                       f32_3 %464 = OpFAdd %463 %451 
                                       f32_4 %465 = OpLoad %110 
                                       f32_4 %466 = OpVectorShuffle %465 %464 4 5 6 3 
                                                      OpStore %110 %466 
                                       f32_3 %467 = OpLoad %52 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 0 0 
                                       f32_4 %469 = OpLoad %110 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_3 %471 = OpFMul %468 %470 
                                       f32_3 %473 = OpFAdd %471 %472 
                                                      OpStore %52 %473 
                                       f32_3 %474 = OpLoad %52 
                                       f32_3 %475 = OpLoad %22 
                                       f32_3 %476 = OpVectorShuffle %475 %475 0 0 0 
                                       f32_3 %477 = OpFMul %474 %476 
                                                      OpStore %22 %477 
                                       f32_3 %478 = OpLoad %22 
                                       f32_3 %480 = OpFMul %478 %479 
                                       f32_4 %481 = OpLoad %110 
                                       f32_4 %482 = OpVectorShuffle %481 %480 4 5 6 3 
                                                      OpStore %110 %482 
                                Private f32* %484 = OpAccessChain %9 %30 
                                         f32 %485 = OpLoad %484 
                                         f32 %487 = OpFAdd %485 %486 
                                Private f32* %488 = OpAccessChain %483 %30 
                                                      OpStore %488 %487 
                                Private f32* %489 = OpAccessChain %483 %30 
                                         f32 %490 = OpLoad %489 
                                         f32 %492 = OpFMul %490 %491 
                                Private f32* %493 = OpAccessChain %483 %30 
                                                      OpStore %493 %492 
                                Private f32* %494 = OpAccessChain %483 %30 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpExtInst %1 43 %495 %74 %108 
                                Private f32* %497 = OpAccessChain %483 %30 
                                                      OpStore %497 %496 
                                       f32_3 %498 = OpLoad %22 
                                       f32_3 %499 = OpFNegate %498 
                                       f32_3 %500 = OpFMul %499 %479 
                                       f32_3 %504 = OpFAdd %500 %503 
                                                      OpStore %22 %504 
                                       f32_3 %505 = OpLoad %483 
                                       f32_3 %506 = OpVectorShuffle %505 %505 0 0 0 
                                       f32_3 %507 = OpLoad %22 
                                       f32_3 %508 = OpFMul %506 %507 
                                       f32_4 %509 = OpLoad %110 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                       f32_3 %511 = OpFAdd %508 %510 
                                                      OpStore %22 %511 
                                       f32_4 %513 = OpLoad %9 
                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
                                       f32_3 %516 = OpFMul %514 %515 
                                       f32_3 %517 = OpLoad %22 
                                       f32_3 %518 = OpFAdd %516 %517 
                                                      OpStore %512 %518 
                                Private f32* %519 = OpAccessChain %9 %196 
                                         f32 %520 = OpLoad %519 
                                Uniform f32* %522 = OpAccessChain %40 %521 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFNegate %523 
                                         f32 %525 = OpFAdd %520 %524 
                                Private f32* %526 = OpAccessChain %483 %30 
                                                      OpStore %526 %525 
                                Private f32* %528 = OpAccessChain %483 %30 
                                         f32 %529 = OpLoad %528 
                                        bool %530 = OpFOrdLessThan %529 %74 
                                                      OpStore %527 %530 
                                        bool %531 = OpLoad %527 
                                         i32 %533 = OpSelect %531 %532 %147 
                                         i32 %535 = OpIMul %533 %534 
                                        bool %536 = OpINotEqual %535 %147 
                                                      OpSelectionMerge %538 None 
                                                      OpBranchConditional %536 %537 %538 
                                             %537 = OpLabel 
                                                      OpKill
                                             %538 = OpLabel 
                                       f32_3 %540 = OpLoad %139 
                                       f32_3 %541 = OpVectorShuffle %540 %540 1 1 1 
                              Uniform f32_4* %543 = OpAccessChain %40 %542 %532 
                                       f32_4 %544 = OpLoad %543 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFMul %541 %545 
                                                      OpStore %22 %546 
                              Uniform f32_4* %547 = OpAccessChain %40 %542 %147 
                                       f32_4 %548 = OpLoad %547 
                                       f32_3 %549 = OpVectorShuffle %548 %548 0 1 2 
                                       f32_3 %550 = OpLoad %139 
                                       f32_3 %551 = OpVectorShuffle %550 %550 0 0 0 
                                       f32_3 %552 = OpFMul %549 %551 
                                       f32_3 %553 = OpLoad %22 
                                       f32_3 %554 = OpFAdd %552 %553 
                                                      OpStore %22 %554 
                              Uniform f32_4* %556 = OpAccessChain %40 %542 %555 
                                       f32_4 %557 = OpLoad %556 
                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 2 
                                       f32_3 %559 = OpLoad %139 
                                       f32_3 %560 = OpVectorShuffle %559 %559 2 2 2 
                                       f32_3 %561 = OpFMul %558 %560 
                                       f32_3 %562 = OpLoad %22 
                                       f32_3 %563 = OpFAdd %561 %562 
                                                      OpStore %22 %563 
                                       f32_3 %564 = OpLoad %22 
                              Uniform f32_4* %566 = OpAccessChain %40 %542 %565 
                                       f32_4 %567 = OpLoad %566 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 1 2 
                                       f32_3 %569 = OpFAdd %564 %568 
                                                      OpStore %22 %569 
                                Uniform f32* %571 = OpAccessChain %40 %555 %30 
                                         f32 %572 = OpLoad %571 
                                        bool %573 = OpFOrdEqual %572 %108 
                                                      OpStore %570 %573 
                                                      OpSelectionMerge %576 None 
                                                      OpBranchConditional %574 %575 %576 
                                             %575 = OpLabel 
                                        bool %577 = OpLoad %570 
                                                      OpSelectionMerge %579 None 
                                                      OpBranchConditional %577 %578 %579 
                                             %578 = OpLabel 
                                                      OpBranch %579 
                                             %579 = OpLabel 
                                                      OpBranch %576 
                                             %576 = OpLabel 
                                                      OpSelectionMerge %582 None 
                                                      OpBranchConditional %580 %581 %677 
                                             %581 = OpLabel 
                                Uniform f32* %583 = OpAccessChain %40 %555 %25 
                                         f32 %584 = OpLoad %583 
                                        bool %585 = OpFOrdEqual %584 %108 
                                                      OpStore %570 %585 
                                       f32_3 %586 = OpLoad %139 
                                       f32_3 %587 = OpVectorShuffle %586 %586 1 1 1 
                              Uniform f32_4* %588 = OpAccessChain %40 %565 %532 
                                       f32_4 %589 = OpLoad %588 
                                       f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
                                       f32_3 %591 = OpFMul %587 %590 
                                       f32_4 %592 = OpLoad %110 
                                       f32_4 %593 = OpVectorShuffle %592 %591 4 5 6 3 
                                                      OpStore %110 %593 
                              Uniform f32_4* %594 = OpAccessChain %40 %565 %147 
                                       f32_4 %595 = OpLoad %594 
                                       f32_3 %596 = OpVectorShuffle %595 %595 0 1 2 
                                       f32_3 %597 = OpLoad %139 
                                       f32_3 %598 = OpVectorShuffle %597 %597 0 0 0 
                                       f32_3 %599 = OpFMul %596 %598 
                                       f32_4 %600 = OpLoad %110 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_3 %602 = OpFAdd %599 %601 
                                       f32_4 %603 = OpLoad %110 
                                       f32_4 %604 = OpVectorShuffle %603 %602 4 5 6 3 
                                                      OpStore %110 %604 
                              Uniform f32_4* %605 = OpAccessChain %40 %565 %555 
                                       f32_4 %606 = OpLoad %605 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 1 2 
                                       f32_3 %608 = OpLoad %139 
                                       f32_3 %609 = OpVectorShuffle %608 %608 2 2 2 
                                       f32_3 %610 = OpFMul %607 %609 
                                       f32_4 %611 = OpLoad %110 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 1 2 
                                       f32_3 %613 = OpFAdd %610 %612 
                                       f32_4 %614 = OpLoad %110 
                                       f32_4 %615 = OpVectorShuffle %614 %613 4 5 6 3 
                                                      OpStore %110 %615 
                                       f32_4 %616 = OpLoad %110 
                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
                              Uniform f32_4* %618 = OpAccessChain %40 %565 %565 
                                       f32_4 %619 = OpLoad %618 
                                       f32_3 %620 = OpVectorShuffle %619 %619 0 1 2 
                                       f32_3 %621 = OpFAdd %617 %620 
                                       f32_4 %622 = OpLoad %110 
                                       f32_4 %623 = OpVectorShuffle %622 %621 4 5 6 3 
                                                      OpStore %110 %623 
                                        bool %626 = OpLoad %570 
                                                      OpSelectionMerge %628 None 
                                                      OpBranchConditional %626 %627 %631 
                                             %627 = OpLabel 
                                       f32_4 %629 = OpLoad %110 
                                       f32_3 %630 = OpVectorShuffle %629 %629 0 1 2 
                                                      OpStore %625 %630 
                                                      OpBranch %628 
                                             %631 = OpLabel 
                                       f32_3 %632 = OpLoad %139 
                                                      OpStore %625 %632 
                                                      OpBranch %628 
                                             %628 = OpLabel 
                                       f32_3 %633 = OpLoad %625 
                                       f32_4 %634 = OpLoad %110 
                                       f32_4 %635 = OpVectorShuffle %634 %633 4 5 6 3 
                                                      OpStore %110 %635 
                                       f32_4 %636 = OpLoad %110 
                                       f32_3 %637 = OpVectorShuffle %636 %636 0 1 2 
                              Uniform f32_3* %640 = OpAccessChain %40 %638 
                                       f32_3 %641 = OpLoad %640 
                                       f32_3 %642 = OpFNegate %641 
                                       f32_3 %643 = OpFAdd %637 %642 
                                       f32_4 %644 = OpLoad %110 
                                       f32_4 %645 = OpVectorShuffle %644 %643 4 5 6 3 
                                                      OpStore %110 %645 
                                       f32_4 %646 = OpLoad %110 
                                       f32_3 %647 = OpVectorShuffle %646 %646 0 1 2 
                              Uniform f32_3* %649 = OpAccessChain %40 %648 
                                       f32_3 %650 = OpLoad %649 
                                       f32_3 %651 = OpFMul %647 %650 
                                       f32_4 %652 = OpLoad %110 
                                       f32_4 %653 = OpVectorShuffle %652 %651 0 4 5 6 
                                                      OpStore %110 %653 
                                Private f32* %654 = OpAccessChain %110 %25 
                                         f32 %655 = OpLoad %654 
                                         f32 %656 = OpFMul %655 %360 
                                         f32 %658 = OpFAdd %656 %657 
                                                      OpStore %95 %658 
                                Uniform f32* %659 = OpAccessChain %40 %555 %153 
                                         f32 %660 = OpLoad %659 
                                         f32 %661 = OpFMul %660 %331 
                                         f32 %662 = OpFAdd %661 %657 
                                                      OpStore %319 %662 
                                         f32 %663 = OpLoad %95 
                                         f32 %664 = OpLoad %319 
                                         f32 %665 = OpExtInst %1 40 %663 %664 
                                Private f32* %666 = OpAccessChain %110 %30 
                                                      OpStore %666 %665 
                  read_only Texture3DSampled %671 = OpLoad %670 
                                       f32_4 %672 = OpLoad %110 
                                       f32_3 %673 = OpVectorShuffle %672 %672 0 2 3 
                                       f32_4 %674 = OpImageSampleImplicitLod %671 %673 
                                                      OpStore %110 %674 
                                       f32_4 %676 = OpLoad %110 
                                                      OpStore %675 %676 
                                                      OpBranch %582 
                                             %677 = OpLabel 
                                Private f32* %678 = OpAccessChain %675 %30 
                                                      OpStore %678 %108 
                                Private f32* %679 = OpAccessChain %675 %25 
                                                      OpStore %679 %108 
                                Private f32* %680 = OpAccessChain %675 %153 
                                                      OpStore %680 %108 
                                Private f32* %681 = OpAccessChain %675 %196 
                                                      OpStore %681 %108 
                                                      OpBranch %582 
                                             %582 = OpLabel 
                                       f32_4 %682 = OpLoad %675 
                              Uniform f32_4* %683 = OpAccessChain %40 %532 
                                       f32_4 %684 = OpLoad %683 
                                         f32 %685 = OpDot %682 %684 
                                Private f32* %686 = OpAccessChain %483 %30 
                                                      OpStore %686 %685 
                                Private f32* %687 = OpAccessChain %483 %30 
                                         f32 %688 = OpLoad %687 
                                         f32 %689 = OpExtInst %1 43 %688 %74 %108 
                                Private f32* %690 = OpAccessChain %483 %30 
                                                      OpStore %690 %689 
                                       f32_3 %691 = OpLoad %22 
                                       f32_3 %692 = OpLoad %22 
                                         f32 %693 = OpDot %691 %692 
                                Private f32* %694 = OpAccessChain %22 %30 
                                                      OpStore %694 %693 
                  read_only Texture2DSampled %696 = OpLoad %695 
                                       f32_3 %697 = OpLoad %22 
                                       f32_2 %698 = OpVectorShuffle %697 %697 0 0 
                                       f32_4 %699 = OpImageSampleImplicitLod %696 %698 
                                         f32 %700 = OpCompositeExtract %699 3 
                                Private f32* %701 = OpAccessChain %22 %30 
                                                      OpStore %701 %700 
                                Private f32* %702 = OpAccessChain %483 %30 
                                         f32 %703 = OpLoad %702 
                                Private f32* %704 = OpAccessChain %22 %30 
                                         f32 %705 = OpLoad %704 
                                         f32 %706 = OpFMul %703 %705 
                                Private f32* %707 = OpAccessChain %22 %30 
                                                      OpStore %707 %706 
                                       f32_3 %708 = OpLoad %512 
                              Uniform f32_4* %710 = OpAccessChain %40 %709 
                                       f32_4 %711 = OpLoad %710 
                                       f32_3 %712 = OpVectorShuffle %711 %711 0 1 2 
                                       f32_3 %713 = OpFMul %708 %712 
                                                      OpStore %483 %713 
                                       f32_3 %716 = OpLoad %22 
                                       f32_3 %717 = OpVectorShuffle %716 %716 0 0 0 
                                       f32_3 %718 = OpLoad %483 
                                       f32_3 %719 = OpFMul %717 %718 
                                       f32_4 %720 = OpLoad %715 
                                       f32_4 %721 = OpVectorShuffle %720 %719 4 5 6 3 
                                                      OpStore %715 %721 
                                Private f32* %722 = OpAccessChain %9 %196 
                                         f32 %723 = OpLoad %722 
                                 Output f32* %725 = OpAccessChain %715 %196 
                                                      OpStore %725 %723 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    vs_TEXCOORD3.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _StepValue;
uniform 	float _SkyBoost;
uniform 	float _SkyPower;
uniform 	float _CurvePower;
uniform 	float _CurveColorFactor;
uniform 	float _CurveFreq;
uniform 	float _DitherCohesionFactor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
float u_xlat13;
float u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat19;
float u_xlat16_19;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = log2(vs_TEXCOORD3.y);
    u_xlat1.x = u_xlat1.x * _SkyPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat7.x = vs_TEXCOORD3.y * vs_TEXCOORD3.y;
    u_xlat1.x = u_xlat7.x * _SkyBoost + u_xlat1.x;
    u_xlatb7 = u_xlat1.x<0.0;
    u_xlat1.x = (u_xlatb7) ? -1.0 : u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * _OverrideColor.xyz;
    u_xlat19 = vs_TEXCOORD3.x * _CurveFreq;
    u_xlat19 = u_xlat19 * 3.1400001;
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 + 1.0;
    u_xlat2.x = _CurveColorFactor + _CurveColorFactor;
    u_xlat19 = u_xlat19 / u_xlat2.x;
    u_xlat19 = u_xlat19 + -1.0;
    u_xlat19 = _CurvePower * u_xlat19 + 1.0;
    u_xlat2.xyw = vec3(u_xlat19) * u_xlat1.yzx;
    u_xlat3.xyz = vs_TEXCOORD2.xyy * vec3(0.00999999978, 0.00999999978, 0.0799999982);
    u_xlat4.y = (-_Time.x) * 0.333333343 + u_xlat3.z;
    u_xlat4.x = vs_TEXCOORD2.x * 0.0799999982;
    u_xlat10_4 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat16_1 = log2(u_xlat10_4.x);
    u_xlat16_1 = u_xlat16_1 * 1.5;
    u_xlat16_1 = exp2(u_xlat16_1);
    u_xlatb15 = u_xlat2.x>=u_xlat2.y;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat2.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.yz * vec2(u_xlat19) + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat15) * u_xlat5 + u_xlat4;
    u_xlatb7 = u_xlat2.w>=u_xlat4.x;
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat2.wyx;
    u_xlat4 = (-u_xlat2) + u_xlat4;
    u_xlat2 = u_xlat7.xxxx * u_xlat4 + u_xlat2;
    u_xlat7.x = min(u_xlat2.y, u_xlat2.w);
    u_xlat7.x = (-u_xlat7.x) + u_xlat2.x;
    u_xlat13 = (-u_xlat2.y) + u_xlat2.w;
    u_xlat19 = u_xlat7.x * 6.0 + 1.00000001e-010;
    u_xlat13 = u_xlat13 / u_xlat19;
    u_xlat13 = u_xlat13 + u_xlat2.z;
    u_xlat19 = u_xlat2.x + 1.00000001e-010;
    u_xlat7.x = u_xlat7.x / u_xlat19;
    u_xlat1.x = (-u_xlat16_1) * 2.0 + u_xlat2.x;
    u_xlat19 = dot(u_xlat3.xy, vec2(12.9898005, 78.2330017));
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 * 43758.5469;
    u_xlat19 = fract(u_xlat19);
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat2.x = u_xlat3.y + u_xlat3.x;
    u_xlat8 = u_xlat2.x + (-_Time.z);
    u_xlat8 = sin(u_xlat8);
    u_xlat8 = u_xlat8 + 1.0;
    u_xlat8 = u_xlat8 * 0.5;
    u_xlat14 = u_xlat2.x + _Time.z;
    u_xlat14 = sin(u_xlat14);
    u_xlat14 = u_xlat14 * 0.099999994 + 0.150000006;
    u_xlat8 = u_xlat8 * u_xlat14 + 0.349999994;
    u_xlat2.x = u_xlat2.x * 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlatb2 = 0.25<u_xlat2.x;
    u_xlat1.x = u_xlat1.x / _StepValue;
    u_xlat14 = (-u_xlat8) + u_xlat1.x;
    u_xlat14 = (-u_xlat19) * _DitherCohesionFactor + u_xlat14;
    u_xlat14 = ceil(u_xlat14);
    u_xlat14 = u_xlat14 * _StepValue;
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat19 * _DitherCohesionFactor + u_xlat1.x;
    u_xlat1.x = roundEven(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _StepValue;
    u_xlat1.x = (u_xlatb2) ? u_xlat14 : u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat2.xyz = abs(vec3(u_xlat13)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat2.xyz = fract(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat2.xyz = abs(u_xlat2.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_19 = u_xlat10_0.x + -0.00999999978;
    u_xlat16_19 = u_xlat16_19 * 1000.0;
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(0.5, 0.5, 0.5) + vec3(0.0299999993, 0.0, 0.0700000003);
    u_xlat1.xyz = vec3(u_xlat16_19) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat7.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat1.y * 0.25 + 0.75;
        u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat7.x, u_xlat2.x);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat1.x = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 206
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %145 %151 %152 %164 %194 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %194 Location 194 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_2 %140 = OpConstantComposite %139 %139 
                                             %144 = OpTypePointer Output %95 
                               Output f32_2* %145 = OpVariable Output 
                                         f32 %148 = OpConstant 3.674022E-40 
                                       f32_2 %149 = OpConstantComposite %148 %148 
                               Output f32_2* %151 = OpVariable Output 
                                Input f32_4* %152 = OpVariable Input 
                                             %163 = OpTypePointer Input %50 
                                Input f32_3* %164 = OpVariable Input 
                                         u32 %170 = OpConstant 0 
                                             %171 = OpTypePointer Private %6 
                                         u32 %184 = OpConstant 2 
                                Private f32* %186 = OpVariable Private 
                               Output f32_3* %194 = OpVariable Output 
                                             %200 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %96 = OpLoad %44 
                                        f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                               Uniform f32_4* %98 = OpAccessChain %21 %36 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %97 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
                                                      OpStore %9 %103 
                              Uniform f32_4* %104 = OpAccessChain %21 %36 %23 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %107 = OpLoad %44 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 0 
                                       f32_2 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %9 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %36 %36 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpLoad %44 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 2 
                                       f32_2 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %9 %125 
                              Uniform f32_4* %126 = OpAccessChain %21 %36 %46 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                                       f32_4 %129 = OpLoad %44 
                                       f32_2 %130 = OpVectorShuffle %129 %129 3 3 
                                       f32_2 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_2 %134 = OpFAdd %131 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 3 
                                                      OpStore %9 %136 
                                       f32_4 %137 = OpLoad %9 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %9 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %9 %143 
                                       f32_4 %146 = OpLoad %9 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_2 %150 = OpFMul %147 %149 
                                                      OpStore %145 %150 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                              Uniform f32_4* %155 = OpAccessChain %21 %46 
                                       f32_4 %156 = OpLoad %155 
                                       f32_2 %157 = OpVectorShuffle %156 %156 0 1 
                                       f32_2 %158 = OpFMul %154 %157 
                              Uniform f32_4* %159 = OpAccessChain %21 %46 
                                       f32_4 %160 = OpLoad %159 
                                       f32_2 %161 = OpVectorShuffle %160 %160 2 3 
                                       f32_2 %162 = OpFAdd %158 %161 
                                                      OpStore %151 %162 
                                       f32_3 %165 = OpLoad %164 
                              Uniform f32_4* %166 = OpAccessChain %21 %24 %23 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                Private f32* %172 = OpAccessChain %9 %170 
                                                      OpStore %172 %169 
                                       f32_3 %173 = OpLoad %164 
                              Uniform f32_4* %174 = OpAccessChain %21 %24 %24 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %173 %176 
                                Private f32* %178 = OpAccessChain %9 %81 
                                                      OpStore %178 %177 
                                       f32_3 %179 = OpLoad %164 
                              Uniform f32_4* %180 = OpAccessChain %21 %24 %36 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                         f32 %183 = OpDot %179 %182 
                                Private f32* %185 = OpAccessChain %9 %184 
                                                      OpStore %185 %183 
                                       f32_4 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %188 %190 
                                                      OpStore %186 %191 
                                         f32 %192 = OpLoad %186 
                                         f32 %193 = OpExtInst %1 32 %192 
                                                      OpStore %186 %193 
                                         f32 %195 = OpLoad %186 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %196 %198 
                                                      OpStore %194 %199 
                                 Output f32* %201 = OpAccessChain %85 %23 %81 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFNegate %202 
                                 Output f32* %204 = OpAccessChain %85 %23 %81 
                                                      OpStore %204 %203 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 680
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %21 %140 %668 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 Location 21 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 RelaxedPrecision 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 RelaxedPrecision 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpMemberDecorate %36 7 Offset 36 
                                                      OpMemberDecorate %36 8 Offset 36 
                                                      OpMemberDecorate %36 9 Offset 36 
                                                      OpMemberDecorate %36 10 Offset 36 
                                                      OpMemberDecorate %36 11 Offset 36 
                                                      OpMemberDecorate %36 12 Offset 36 
                                                      OpMemberDecorate %36 13 Offset 36 
                                                      OpMemberDecorate %36 14 Offset 36 
                                                      OpMemberDecorate %36 15 RelaxedPrecision 
                                                      OpMemberDecorate %36 15 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %164 DescriptorSet 164 
                                                      OpDecorate %164 Binding 164 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %539 RelaxedPrecision 
                                                      OpDecorate %560 SpecId 560 
                                                      OpDecorate %643 DescriptorSet 643 
                                                      OpDecorate %643 Binding 643 
                                                      OpDecorate %654 RelaxedPrecision 
                                                      OpDecorate %656 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %659 RelaxedPrecision 
                                                      OpDecorate %660 RelaxedPrecision 
                                                      OpDecorate %664 RelaxedPrecision 
                                                      OpDecorate %665 RelaxedPrecision 
                                                      OpDecorate %668 RelaxedPrecision 
                                                      OpDecorate %668 Location 668 
                                                      OpDecorate %669 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %671 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %676 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                 Input f32_2* %21 = OpVariable Input 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Input %6 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          u32 %33 = OpConstant 4 
                                              %34 = OpTypeArray %7 %33 
                                              %35 = OpTypeVector %6 3 
                                              %36 = OpTypeStruct %7 %7 %7 %34 %35 %35 %7 %7 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 10 
                                              %41 = OpTypePointer Uniform %6 
                                              %50 = OpTypePointer Private %35 
                               Private f32_3* %51 = OpVariable Private 
                                          i32 %60 = OpConstant 9 
                                              %68 = OpTypeBool 
                                              %69 = OpTypePointer Private %68 
                                Private bool* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                              %75 = OpTypePointer Function %6 
                                          f32 %80 = OpConstant 3.674022E-40 
                                          i32 %88 = OpConstant 7 
                                              %89 = OpTypePointer Uniform %7 
                                 Private f32* %96 = OpVariable Private 
                                          i32 %99 = OpConstant 13 
                                         f32 %104 = OpConstant 3.674022E-40 
                                         f32 %109 = OpConstant 3.674022E-40 
                              Private f32_4* %111 = OpVariable Private 
                                         i32 %112 = OpConstant 12 
                                         i32 %125 = OpConstant 11 
                              Private f32_3* %138 = OpVariable Private 
                                             %139 = OpTypePointer Input %35 
                                Input f32_3* %140 = OpVariable Input 
                                         f32 %143 = OpConstant 3.674022E-40 
                                         f32 %144 = OpConstant 3.674022E-40 
                                       f32_3 %145 = OpConstantComposite %143 %143 %144 
                              Private f32_4* %147 = OpVariable Private 
                                         i32 %148 = OpConstant 0 
                                         f32 %152 = OpConstant 3.674022E-40 
                                         u32 %154 = OpConstant 2 
                                Private f32* %163 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %164 = OpVariable UniformConstant 
                              Private f32_4* %170 = OpVariable Private 
                                         f32 %176 = OpConstant 3.674022E-40 
                               Private bool* %183 = OpVariable Private 
                                Private f32* %189 = OpVariable Private 
                                         f32 %201 = OpConstant 3.674022E-40 
                                         u32 %202 = OpConstant 3 
                              Private f32_4* %204 = OpVariable Private 
                                Private f32* %267 = OpVariable Private 
                                         f32 %276 = OpConstant 3.674022E-40 
                                         f32 %278 = OpConstant 3.674022E-40 
                                         f32 %298 = OpConstant 3.674022E-40 
                                         f32 %306 = OpConstant 3.674022E-40 
                                         f32 %307 = OpConstant 3.674022E-40 
                                       f32_2 %308 = OpConstantComposite %306 %307 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                                Private f32* %326 = OpVariable Private 
                                         f32 %338 = OpConstant 3.674022E-40 
                                Private f32* %340 = OpVariable Private 
                                         f32 %349 = OpConstant 3.674022E-40 
                                         f32 %351 = OpConstant 3.674022E-40 
                                         f32 %356 = OpConstant 3.674022E-40 
                               Private bool* %366 = OpVariable Private 
                                         f32 %367 = OpConstant 3.674022E-40 
                                         i32 %373 = OpConstant 8 
                                         i32 %385 = OpConstant 14 
                                       f32_3 %437 = OpConstantComposite %109 %201 %152 
                                       f32_3 %448 = OpConstantComposite %276 %276 %276 
                                         f32 %450 = OpConstant 3.674022E-40 
                                       f32_3 %451 = OpConstantComposite %450 %450 %450 
                                       f32_3 %458 = OpConstantComposite %80 %80 %80 
                                       f32_3 %479 = OpConstantComposite %109 %109 %109 
                                       f32_3 %489 = OpConstantComposite %338 %338 %338 
                                Private f32* %493 = OpVariable Private 
                                         f32 %496 = OpConstant 3.674022E-40 
                                         f32 %499 = OpConstant 3.674022E-40 
                                         f32 %507 = OpConstant 3.674022E-40 
                                         f32 %508 = OpConstant 3.674022E-40 
                                       f32_3 %509 = OpConstantComposite %507 %73 %508 
                              Private f32_3* %523 = OpVariable Private 
                                       f32_3 %526 = OpConstantComposite %298 %298 %298 
                                         i32 %533 = OpConstant 15 
                               Private bool* %538 = OpVariable Private 
                                         i32 %542 = OpConstant 1 
                                         i32 %544 = OpConstant -1 
                                         i32 %550 = OpConstant 2 
                                        bool %554 = OpConstantFalse 
                                        bool %560 = OpSpecConstantFalse 
                                         i32 %568 = OpConstant 3 
                                             %594 = OpTypePointer Function %35 
                                         i32 %607 = OpConstant 5 
                                             %608 = OpTypePointer Uniform %35 
                                         i32 %617 = OpConstant 4 
                                         f32 %626 = OpConstant 3.674022E-40 
                                             %640 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %641 = OpTypeSampledImage %640 
                                             %642 = OpTypePointer UniformConstant %641 
 UniformConstant read_only Texture3DSampled* %643 = OpVariable UniformConstant 
                              Private f32_3* %660 = OpVariable Private 
                                         i32 %662 = OpConstant 6 
                                             %667 = OpTypePointer Output %7 
                               Output f32_4* %668 = OpVariable Output 
                                             %677 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %76 = OpVariable Function 
                               Function f32* %190 = OpVariable Function 
                               Function f32* %229 = OpVariable Function 
                               Function f32* %420 = OpVariable Function 
                             Function f32_3* %595 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                   Input f32* %25 = OpAccessChain %21 %23 
                                          f32 %26 = OpLoad %25 
                                          f32 %27 = OpExtInst %1 30 %26 
                                 Private f32* %30 = OpAccessChain %20 %28 
                                                      OpStore %30 %27 
                                 Private f32* %31 = OpAccessChain %20 %28 
                                          f32 %32 = OpLoad %31 
                                 Uniform f32* %42 = OpAccessChain %38 %40 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %32 %43 
                                 Private f32* %45 = OpAccessChain %20 %28 
                                                      OpStore %45 %44 
                                 Private f32* %46 = OpAccessChain %20 %28 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpExtInst %1 29 %47 
                                 Private f32* %49 = OpAccessChain %20 %28 
                                                      OpStore %49 %48 
                                   Input f32* %52 = OpAccessChain %21 %23 
                                          f32 %53 = OpLoad %52 
                                   Input f32* %54 = OpAccessChain %21 %23 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFMul %53 %55 
                                 Private f32* %57 = OpAccessChain %51 %28 
                                                      OpStore %57 %56 
                                 Private f32* %58 = OpAccessChain %51 %28 
                                          f32 %59 = OpLoad %58 
                                 Uniform f32* %61 = OpAccessChain %38 %60 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %59 %62 
                                 Private f32* %64 = OpAccessChain %20 %28 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %63 %65 
                                 Private f32* %67 = OpAccessChain %20 %28 
                                                      OpStore %67 %66 
                                 Private f32* %71 = OpAccessChain %20 %28 
                                          f32 %72 = OpLoad %71 
                                         bool %74 = OpFOrdLessThan %72 %73 
                                                      OpStore %70 %74 
                                         bool %77 = OpLoad %70 
                                                      OpSelectionMerge %79 None 
                                                      OpBranchConditional %77 %78 %81 
                                              %78 = OpLabel 
                                                      OpStore %76 %80 
                                                      OpBranch %79 
                                              %81 = OpLabel 
                                 Private f32* %82 = OpAccessChain %20 %28 
                                          f32 %83 = OpLoad %82 
                                                      OpStore %76 %83 
                                                      OpBranch %79 
                                              %79 = OpLabel 
                                          f32 %84 = OpLoad %76 
                                 Private f32* %85 = OpAccessChain %20 %28 
                                                      OpStore %85 %84 
                                        f32_4 %86 = OpLoad %20 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 0 0 
                               Uniform f32_4* %90 = OpAccessChain %38 %88 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                        f32_4 %94 = OpLoad %20 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %20 %95 
                                   Input f32* %97 = OpAccessChain %21 %28 
                                          f32 %98 = OpLoad %97 
                                Uniform f32* %100 = OpAccessChain %38 %99 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFMul %98 %101 
                                                      OpStore %96 %102 
                                         f32 %103 = OpLoad %96 
                                         f32 %105 = OpFMul %103 %104 
                                                      OpStore %96 %105 
                                         f32 %106 = OpLoad %96 
                                         f32 %107 = OpExtInst %1 13 %106 
                                                      OpStore %96 %107 
                                         f32 %108 = OpLoad %96 
                                         f32 %110 = OpFAdd %108 %109 
                                                      OpStore %96 %110 
                                Uniform f32* %113 = OpAccessChain %38 %112 
                                         f32 %114 = OpLoad %113 
                                Uniform f32* %115 = OpAccessChain %38 %112 
                                         f32 %116 = OpLoad %115 
                                         f32 %117 = OpFAdd %114 %116 
                                Private f32* %118 = OpAccessChain %111 %28 
                                                      OpStore %118 %117 
                                         f32 %119 = OpLoad %96 
                                Private f32* %120 = OpAccessChain %111 %28 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFDiv %119 %121 
                                                      OpStore %96 %122 
                                         f32 %123 = OpLoad %96 
                                         f32 %124 = OpFAdd %123 %80 
                                                      OpStore %96 %124 
                                Uniform f32* %126 = OpAccessChain %38 %125 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpLoad %96 
                                         f32 %129 = OpFMul %127 %128 
                                         f32 %130 = OpFAdd %129 %109 
                                                      OpStore %96 %130 
                                         f32 %131 = OpLoad %96 
                                       f32_3 %132 = OpCompositeConstruct %131 %131 %131 
                                       f32_4 %133 = OpLoad %20 
                                       f32_3 %134 = OpVectorShuffle %133 %133 1 2 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %111 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 6 
                                                      OpStore %111 %137 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %138 %146 
                                Uniform f32* %149 = OpAccessChain %38 %148 %28 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFNegate %150 
                                         f32 %153 = OpFMul %151 %152 
                                Private f32* %155 = OpAccessChain %138 %154 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFAdd %153 %156 
                                Private f32* %158 = OpAccessChain %147 %23 
                                                      OpStore %158 %157 
                                  Input f32* %159 = OpAccessChain %140 %28 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %160 %144 
                                Private f32* %162 = OpAccessChain %147 %28 
                                                      OpStore %162 %161 
                  read_only Texture2DSampled %165 = OpLoad %164 
                                       f32_4 %166 = OpLoad %147 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_4 %168 = OpImageSampleImplicitLod %165 %167 
                                         f32 %169 = OpCompositeExtract %168 0 
                                                      OpStore %163 %169 
                                         f32 %171 = OpLoad %163 
                                         f32 %172 = OpExtInst %1 30 %171 
                                Private f32* %173 = OpAccessChain %170 %28 
                                                      OpStore %173 %172 
                                Private f32* %174 = OpAccessChain %170 %28 
                                         f32 %175 = OpLoad %174 
                                         f32 %177 = OpFMul %175 %176 
                                Private f32* %178 = OpAccessChain %170 %28 
                                                      OpStore %178 %177 
                                Private f32* %179 = OpAccessChain %170 %28 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpExtInst %1 29 %180 
                                Private f32* %182 = OpAccessChain %170 %28 
                                                      OpStore %182 %181 
                                Private f32* %184 = OpAccessChain %111 %28 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %111 %23 
                                         f32 %187 = OpLoad %186 
                                        bool %188 = OpFOrdGreaterThanEqual %185 %187 
                                                      OpStore %183 %188 
                                        bool %191 = OpLoad %183 
                                                      OpSelectionMerge %193 None 
                                                      OpBranchConditional %191 %192 %194 
                                             %192 = OpLabel 
                                                      OpStore %190 %109 
                                                      OpBranch %193 
                                             %194 = OpLabel 
                                                      OpStore %190 %73 
                                                      OpBranch %193 
                                             %193 = OpLabel 
                                         f32 %195 = OpLoad %190 
                                                      OpStore %189 %195 
                                       f32_4 %196 = OpLoad %111 
                                       f32_2 %197 = OpVectorShuffle %196 %196 1 0 
                                       f32_4 %198 = OpLoad %147 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 3 
                                                      OpStore %147 %199 
                                Private f32* %200 = OpAccessChain %147 %154 
                                                      OpStore %200 %80 
                                Private f32* %203 = OpAccessChain %147 %202 
                                                      OpStore %203 %201 
                                       f32_4 %205 = OpLoad %20 
                                       f32_2 %206 = OpVectorShuffle %205 %205 1 2 
                                         f32 %207 = OpLoad %96 
                                       f32_2 %208 = OpCompositeConstruct %207 %207 
                                       f32_2 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %147 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 1 
                                       f32_2 %212 = OpFNegate %211 
                                       f32_2 %213 = OpFAdd %209 %212 
                                       f32_4 %214 = OpLoad %204 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %204 %215 
                                Private f32* %216 = OpAccessChain %204 %154 
                                                      OpStore %216 %109 
                                Private f32* %217 = OpAccessChain %204 %202 
                                                      OpStore %217 %80 
                                         f32 %218 = OpLoad %189 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                       f32_4 %220 = OpLoad %204 
                                       f32_4 %221 = OpFMul %219 %220 
                                       f32_4 %222 = OpLoad %147 
                                       f32_4 %223 = OpFAdd %221 %222 
                                                      OpStore %147 %223 
                                Private f32* %224 = OpAccessChain %111 %202 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %147 %28 
                                         f32 %227 = OpLoad %226 
                                        bool %228 = OpFOrdGreaterThanEqual %225 %227 
                                                      OpStore %70 %228 
                                        bool %230 = OpLoad %70 
                                                      OpSelectionMerge %232 None 
                                                      OpBranchConditional %230 %231 %233 
                                             %231 = OpLabel 
                                                      OpStore %229 %109 
                                                      OpBranch %232 
                                             %233 = OpLabel 
                                                      OpStore %229 %73 
                                                      OpBranch %232 
                                             %232 = OpLabel 
                                         f32 %234 = OpLoad %229 
                                Private f32* %235 = OpAccessChain %51 %28 
                                                      OpStore %235 %234 
                                       f32_4 %236 = OpLoad %147 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 3 
                                       f32_4 %238 = OpLoad %111 
                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 6 3 
                                                      OpStore %111 %239 
                                       f32_4 %240 = OpLoad %111 
                                       f32_3 %241 = OpVectorShuffle %240 %240 3 1 0 
                                       f32_4 %242 = OpLoad %147 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 2 6 
                                                      OpStore %147 %243 
                                       f32_4 %244 = OpLoad %111 
                                       f32_4 %245 = OpFNegate %244 
                                       f32_4 %246 = OpLoad %147 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %147 %247 
                                       f32_3 %248 = OpLoad %51 
                                       f32_4 %249 = OpVectorShuffle %248 %248 0 0 0 0 
                                       f32_4 %250 = OpLoad %147 
                                       f32_4 %251 = OpFMul %249 %250 
                                       f32_4 %252 = OpLoad %111 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %111 %253 
                                Private f32* %254 = OpAccessChain %111 %23 
                                         f32 %255 = OpLoad %254 
                                Private f32* %256 = OpAccessChain %111 %202 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpExtInst %1 37 %255 %257 
                                Private f32* %259 = OpAccessChain %51 %28 
                                                      OpStore %259 %258 
                                Private f32* %260 = OpAccessChain %51 %28 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpFNegate %261 
                                Private f32* %263 = OpAccessChain %111 %28 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %51 %28 
                                                      OpStore %266 %265 
                                Private f32* %268 = OpAccessChain %111 %23 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                Private f32* %271 = OpAccessChain %111 %202 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpFAdd %270 %272 
                                                      OpStore %267 %273 
                                Private f32* %274 = OpAccessChain %51 %28 
                                         f32 %275 = OpLoad %274 
                                         f32 %277 = OpFMul %275 %276 
                                         f32 %279 = OpFAdd %277 %278 
                                                      OpStore %96 %279 
                                         f32 %280 = OpLoad %267 
                                         f32 %281 = OpLoad %96 
                                         f32 %282 = OpFDiv %280 %281 
                                                      OpStore %267 %282 
                                         f32 %283 = OpLoad %267 
                                Private f32* %284 = OpAccessChain %111 %154 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpFAdd %283 %285 
                                                      OpStore %267 %286 
                                Private f32* %287 = OpAccessChain %111 %28 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFAdd %288 %278 
                                                      OpStore %96 %289 
                                Private f32* %290 = OpAccessChain %51 %28 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpLoad %96 
                                         f32 %293 = OpFDiv %291 %292 
                                Private f32* %294 = OpAccessChain %51 %28 
                                                      OpStore %294 %293 
                                Private f32* %295 = OpAccessChain %170 %28 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpFNegate %296 
                                         f32 %299 = OpFMul %297 %298 
                                Private f32* %300 = OpAccessChain %111 %28 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                Private f32* %303 = OpAccessChain %20 %28 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %138 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                         f32 %309 = OpDot %305 %308 
                                                      OpStore %96 %309 
                                         f32 %310 = OpLoad %96 
                                         f32 %311 = OpExtInst %1 13 %310 
                                                      OpStore %96 %311 
                                         f32 %312 = OpLoad %96 
                                         f32 %314 = OpFMul %312 %313 
                                                      OpStore %96 %314 
                                         f32 %315 = OpLoad %96 
                                         f32 %316 = OpExtInst %1 10 %315 
                                                      OpStore %96 %316 
                                         f32 %317 = OpLoad %96 
                                         f32 %319 = OpFAdd %317 %318 
                                                      OpStore %96 %319 
                                Private f32* %320 = OpAccessChain %138 %23 
                                         f32 %321 = OpLoad %320 
                                Private f32* %322 = OpAccessChain %138 %28 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFAdd %321 %323 
                                Private f32* %325 = OpAccessChain %111 %28 
                                                      OpStore %325 %324 
                                Private f32* %327 = OpAccessChain %111 %28 
                                         f32 %328 = OpLoad %327 
                                Uniform f32* %329 = OpAccessChain %38 %148 %154 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFNegate %330 
                                         f32 %332 = OpFAdd %328 %331 
                                                      OpStore %326 %332 
                                         f32 %333 = OpLoad %326 
                                         f32 %334 = OpExtInst %1 13 %333 
                                                      OpStore %326 %334 
                                         f32 %335 = OpLoad %326 
                                         f32 %336 = OpFAdd %335 %109 
                                                      OpStore %326 %336 
                                         f32 %337 = OpLoad %326 
                                         f32 %339 = OpFMul %337 %338 
                                                      OpStore %326 %339 
                                Private f32* %341 = OpAccessChain %111 %28 
                                         f32 %342 = OpLoad %341 
                                Uniform f32* %343 = OpAccessChain %38 %148 %154 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFAdd %342 %344 
                                                      OpStore %340 %345 
                                         f32 %346 = OpLoad %340 
                                         f32 %347 = OpExtInst %1 13 %346 
                                                      OpStore %340 %347 
                                         f32 %348 = OpLoad %340 
                                         f32 %350 = OpFMul %348 %349 
                                         f32 %352 = OpFAdd %350 %351 
                                                      OpStore %340 %352 
                                         f32 %353 = OpLoad %326 
                                         f32 %354 = OpLoad %340 
                                         f32 %355 = OpFMul %353 %354 
                                         f32 %357 = OpFAdd %355 %356 
                                                      OpStore %326 %357 
                                Private f32* %358 = OpAccessChain %111 %28 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFMul %359 %338 
                                Private f32* %361 = OpAccessChain %111 %28 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %111 %28 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpExtInst %1 10 %363 
                                Private f32* %365 = OpAccessChain %111 %28 
                                                      OpStore %365 %364 
                                Private f32* %368 = OpAccessChain %111 %28 
                                         f32 %369 = OpLoad %368 
                                        bool %370 = OpFOrdLessThan %367 %369 
                                                      OpStore %366 %370 
                                Private f32* %371 = OpAccessChain %20 %28 
                                         f32 %372 = OpLoad %371 
                                Uniform f32* %374 = OpAccessChain %38 %373 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpFDiv %372 %375 
                                Private f32* %377 = OpAccessChain %20 %28 
                                                      OpStore %377 %376 
                                         f32 %378 = OpLoad %326 
                                         f32 %379 = OpFNegate %378 
                                Private f32* %380 = OpAccessChain %20 %28 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFAdd %379 %381 
                                                      OpStore %340 %382 
                                         f32 %383 = OpLoad %96 
                                         f32 %384 = OpFNegate %383 
                                Uniform f32* %386 = OpAccessChain %38 %385 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpFMul %384 %387 
                                         f32 %389 = OpLoad %340 
                                         f32 %390 = OpFAdd %388 %389 
                                                      OpStore %340 %390 
                                         f32 %391 = OpLoad %340 
                                         f32 %392 = OpExtInst %1 9 %391 
                                                      OpStore %340 %392 
                                         f32 %393 = OpLoad %340 
                                Uniform f32* %394 = OpAccessChain %38 %373 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %340 %396 
                                         f32 %397 = OpLoad %326 
                                Private f32* %398 = OpAccessChain %20 %28 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFAdd %397 %399 
                                Private f32* %401 = OpAccessChain %20 %28 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %96 
                                Uniform f32* %403 = OpAccessChain %38 %385 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFMul %402 %404 
                                Private f32* %406 = OpAccessChain %20 %28 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpFAdd %405 %407 
                                Private f32* %409 = OpAccessChain %20 %28 
                                                      OpStore %409 %408 
                                Private f32* %410 = OpAccessChain %20 %28 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpExtInst %1 2 %411 
                                Private f32* %413 = OpAccessChain %20 %28 
                                                      OpStore %413 %412 
                                Private f32* %414 = OpAccessChain %20 %28 
                                         f32 %415 = OpLoad %414 
                                Uniform f32* %416 = OpAccessChain %38 %373 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFMul %415 %417 
                                Private f32* %419 = OpAccessChain %20 %28 
                                                      OpStore %419 %418 
                                        bool %421 = OpLoad %366 
                                                      OpSelectionMerge %423 None 
                                                      OpBranchConditional %421 %422 %425 
                                             %422 = OpLabel 
                                         f32 %424 = OpLoad %340 
                                                      OpStore %420 %424 
                                                      OpBranch %423 
                                             %425 = OpLabel 
                                Private f32* %426 = OpAccessChain %20 %28 
                                         f32 %427 = OpLoad %426 
                                                      OpStore %420 %427 
                                                      OpBranch %423 
                                             %423 = OpLabel 
                                         f32 %428 = OpLoad %420 
                                Private f32* %429 = OpAccessChain %20 %28 
                                                      OpStore %429 %428 
                                Private f32* %430 = OpAccessChain %20 %28 
                                         f32 %431 = OpLoad %430 
                                         f32 %432 = OpExtInst %1 40 %431 %73 
                                Private f32* %433 = OpAccessChain %20 %28 
                                                      OpStore %433 %432 
                                         f32 %434 = OpLoad %267 
                                       f32_3 %435 = OpCompositeConstruct %434 %434 %434 
                                       f32_3 %436 = OpExtInst %1 4 %435 
                                       f32_3 %438 = OpFAdd %436 %437 
                                       f32_4 %439 = OpLoad %111 
                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
                                                      OpStore %111 %440 
                                       f32_4 %441 = OpLoad %111 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_3 %443 = OpExtInst %1 10 %442 
                                       f32_4 %444 = OpLoad %111 
                                       f32_4 %445 = OpVectorShuffle %444 %443 4 5 6 3 
                                                      OpStore %111 %445 
                                       f32_4 %446 = OpLoad %111 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 1 2 
                                       f32_3 %449 = OpFMul %447 %448 
                                       f32_3 %452 = OpFAdd %449 %451 
                                       f32_4 %453 = OpLoad %111 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 6 3 
                                                      OpStore %111 %454 
                                       f32_4 %455 = OpLoad %111 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpExtInst %1 4 %456 
                                       f32_3 %459 = OpFAdd %457 %458 
                                       f32_4 %460 = OpLoad %111 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 6 3 
                                                      OpStore %111 %461 
                                       f32_4 %462 = OpLoad %111 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                       f32_3 %464 = OpCompositeConstruct %73 %73 %73 
                                       f32_3 %465 = OpCompositeConstruct %109 %109 %109 
                                       f32_3 %466 = OpExtInst %1 43 %463 %464 %465 
                                       f32_4 %467 = OpLoad %111 
                                       f32_4 %468 = OpVectorShuffle %467 %466 4 5 6 3 
                                                      OpStore %111 %468 
                                       f32_4 %469 = OpLoad %111 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_3 %471 = OpFAdd %470 %458 
                                       f32_4 %472 = OpLoad %111 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %111 %473 
                                       f32_3 %474 = OpLoad %51 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 0 0 
                                       f32_4 %476 = OpLoad %111 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFMul %475 %477 
                                       f32_3 %480 = OpFAdd %478 %479 
                                                      OpStore %51 %480 
                                       f32_3 %481 = OpLoad %51 
                                       f32_4 %482 = OpLoad %20 
                                       f32_3 %483 = OpVectorShuffle %482 %482 0 0 0 
                                       f32_3 %484 = OpFMul %481 %483 
                                       f32_4 %485 = OpLoad %20 
                                       f32_4 %486 = OpVectorShuffle %485 %484 4 5 6 3 
                                                      OpStore %20 %486 
                                       f32_4 %487 = OpLoad %20 
                                       f32_3 %488 = OpVectorShuffle %487 %487 0 1 2 
                                       f32_3 %490 = OpFMul %488 %489 
                                       f32_4 %491 = OpLoad %111 
                                       f32_4 %492 = OpVectorShuffle %491 %490 4 5 6 3 
                                                      OpStore %111 %492 
                                Private f32* %494 = OpAccessChain %9 %28 
                                         f32 %495 = OpLoad %494 
                                         f32 %497 = OpFAdd %495 %496 
                                                      OpStore %493 %497 
                                         f32 %498 = OpLoad %493 
                                         f32 %500 = OpFMul %498 %499 
                                                      OpStore %493 %500 
                                         f32 %501 = OpLoad %493 
                                         f32 %502 = OpExtInst %1 43 %501 %73 %109 
                                                      OpStore %493 %502 
                                       f32_4 %503 = OpLoad %20 
                                       f32_3 %504 = OpVectorShuffle %503 %503 0 1 2 
                                       f32_3 %505 = OpFNegate %504 
                                       f32_3 %506 = OpFMul %505 %489 
                                       f32_3 %510 = OpFAdd %506 %509 
                                       f32_4 %511 = OpLoad %20 
                                       f32_4 %512 = OpVectorShuffle %511 %510 4 5 6 3 
                                                      OpStore %20 %512 
                                         f32 %513 = OpLoad %493 
                                       f32_3 %514 = OpCompositeConstruct %513 %513 %513 
                                       f32_4 %515 = OpLoad %20 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
                                       f32_3 %517 = OpFMul %514 %516 
                                       f32_4 %518 = OpLoad %111 
                                       f32_3 %519 = OpVectorShuffle %518 %518 0 1 2 
                                       f32_3 %520 = OpFAdd %517 %519 
                                       f32_4 %521 = OpLoad %20 
                                       f32_4 %522 = OpVectorShuffle %521 %520 4 5 6 3 
                                                      OpStore %20 %522 
                                       f32_4 %524 = OpLoad %9 
                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
                                       f32_3 %527 = OpFMul %525 %526 
                                       f32_4 %528 = OpLoad %20 
                                       f32_3 %529 = OpVectorShuffle %528 %528 0 1 2 
                                       f32_3 %530 = OpFAdd %527 %529 
                                                      OpStore %523 %530 
                                Private f32* %531 = OpAccessChain %9 %202 
                                         f32 %532 = OpLoad %531 
                                Uniform f32* %534 = OpAccessChain %38 %533 
                                         f32 %535 = OpLoad %534 
                                         f32 %536 = OpFNegate %535 
                                         f32 %537 = OpFAdd %532 %536 
                                                      OpStore %493 %537 
                                         f32 %539 = OpLoad %493 
                                        bool %540 = OpFOrdLessThan %539 %73 
                                                      OpStore %538 %540 
                                        bool %541 = OpLoad %538 
                                         i32 %543 = OpSelect %541 %542 %148 
                                         i32 %545 = OpIMul %543 %544 
                                        bool %546 = OpINotEqual %545 %148 
                                                      OpSelectionMerge %548 None 
                                                      OpBranchConditional %546 %547 %548 
                                             %547 = OpLabel 
                                                      OpKill
                                             %548 = OpLabel 
                                Uniform f32* %551 = OpAccessChain %38 %550 %28 
                                         f32 %552 = OpLoad %551 
                                        bool %553 = OpFOrdEqual %552 %109 
                                                      OpStore %538 %553 
                                                      OpSelectionMerge %556 None 
                                                      OpBranchConditional %554 %555 %556 
                                             %555 = OpLabel 
                                        bool %557 = OpLoad %538 
                                                      OpSelectionMerge %559 None 
                                                      OpBranchConditional %557 %558 %559 
                                             %558 = OpLabel 
                                                      OpBranch %559 
                                             %559 = OpLabel 
                                                      OpBranch %556 
                                             %556 = OpLabel 
                                                      OpSelectionMerge %562 None 
                                                      OpBranchConditional %560 %561 %649 
                                             %561 = OpLabel 
                                Uniform f32* %563 = OpAccessChain %38 %550 %23 
                                         f32 %564 = OpLoad %563 
                                        bool %565 = OpFOrdEqual %564 %109 
                                                      OpStore %538 %565 
                                       f32_3 %566 = OpLoad %140 
                                       f32_3 %567 = OpVectorShuffle %566 %566 1 1 1 
                              Uniform f32_4* %569 = OpAccessChain %38 %568 %542 
                                       f32_4 %570 = OpLoad %569 
                                       f32_3 %571 = OpVectorShuffle %570 %570 0 1 2 
                                       f32_3 %572 = OpFMul %567 %571 
                                                      OpStore %51 %572 
                              Uniform f32_4* %573 = OpAccessChain %38 %568 %148 
                                       f32_4 %574 = OpLoad %573 
                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
                                       f32_3 %576 = OpLoad %140 
                                       f32_3 %577 = OpVectorShuffle %576 %576 0 0 0 
                                       f32_3 %578 = OpFMul %575 %577 
                                       f32_3 %579 = OpLoad %51 
                                       f32_3 %580 = OpFAdd %578 %579 
                                                      OpStore %51 %580 
                              Uniform f32_4* %581 = OpAccessChain %38 %568 %550 
                                       f32_4 %582 = OpLoad %581 
                                       f32_3 %583 = OpVectorShuffle %582 %582 0 1 2 
                                       f32_3 %584 = OpLoad %140 
                                       f32_3 %585 = OpVectorShuffle %584 %584 2 2 2 
                                       f32_3 %586 = OpFMul %583 %585 
                                       f32_3 %587 = OpLoad %51 
                                       f32_3 %588 = OpFAdd %586 %587 
                                                      OpStore %51 %588 
                                       f32_3 %589 = OpLoad %51 
                              Uniform f32_4* %590 = OpAccessChain %38 %568 %568 
                                       f32_4 %591 = OpLoad %590 
                                       f32_3 %592 = OpVectorShuffle %591 %591 0 1 2 
                                       f32_3 %593 = OpFAdd %589 %592 
                                                      OpStore %51 %593 
                                        bool %596 = OpLoad %538 
                                                      OpSelectionMerge %598 None 
                                                      OpBranchConditional %596 %597 %600 
                                             %597 = OpLabel 
                                       f32_3 %599 = OpLoad %51 
                                                      OpStore %595 %599 
                                                      OpBranch %598 
                                             %600 = OpLabel 
                                       f32_3 %601 = OpLoad %140 
                                                      OpStore %595 %601 
                                                      OpBranch %598 
                                             %598 = OpLabel 
                                       f32_3 %602 = OpLoad %595 
                                       f32_4 %603 = OpLoad %20 
                                       f32_4 %604 = OpVectorShuffle %603 %602 4 5 6 3 
                                                      OpStore %20 %604 
                                       f32_4 %605 = OpLoad %20 
                                       f32_3 %606 = OpVectorShuffle %605 %605 0 1 2 
                              Uniform f32_3* %609 = OpAccessChain %38 %607 
                                       f32_3 %610 = OpLoad %609 
                                       f32_3 %611 = OpFNegate %610 
                                       f32_3 %612 = OpFAdd %606 %611 
                                       f32_4 %613 = OpLoad %20 
                                       f32_4 %614 = OpVectorShuffle %613 %612 4 5 6 3 
                                                      OpStore %20 %614 
                                       f32_4 %615 = OpLoad %20 
                                       f32_3 %616 = OpVectorShuffle %615 %615 0 1 2 
                              Uniform f32_3* %618 = OpAccessChain %38 %617 
                                       f32_3 %619 = OpLoad %618 
                                       f32_3 %620 = OpFMul %616 %619 
                                       f32_4 %621 = OpLoad %20 
                                       f32_4 %622 = OpVectorShuffle %621 %620 0 4 5 6 
                                                      OpStore %20 %622 
                                Private f32* %623 = OpAccessChain %20 %23 
                                         f32 %624 = OpLoad %623 
                                         f32 %625 = OpFMul %624 %367 
                                         f32 %627 = OpFAdd %625 %626 
                                Private f32* %628 = OpAccessChain %51 %28 
                                                      OpStore %628 %627 
                                Uniform f32* %629 = OpAccessChain %38 %550 %154 
                                         f32 %630 = OpLoad %629 
                                         f32 %631 = OpFMul %630 %338 
                                         f32 %632 = OpFAdd %631 %626 
                                Private f32* %633 = OpAccessChain %111 %28 
                                                      OpStore %633 %632 
                                Private f32* %634 = OpAccessChain %51 %28 
                                         f32 %635 = OpLoad %634 
                                Private f32* %636 = OpAccessChain %111 %28 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpExtInst %1 40 %635 %637 
                                Private f32* %639 = OpAccessChain %20 %28 
                                                      OpStore %639 %638 
                  read_only Texture3DSampled %644 = OpLoad %643 
                                       f32_4 %645 = OpLoad %20 
                                       f32_3 %646 = OpVectorShuffle %645 %645 0 2 3 
                                       f32_4 %647 = OpImageSampleImplicitLod %644 %646 
                                                      OpStore %20 %647 
                                       f32_4 %648 = OpLoad %20 
                                                      OpStore %170 %648 
                                                      OpBranch %562 
                                             %649 = OpLabel 
                                Private f32* %650 = OpAccessChain %170 %28 
                                                      OpStore %650 %109 
                                Private f32* %651 = OpAccessChain %170 %23 
                                                      OpStore %651 %109 
                                Private f32* %652 = OpAccessChain %170 %154 
                                                      OpStore %652 %109 
                                Private f32* %653 = OpAccessChain %170 %202 
                                                      OpStore %653 %109 
                                                      OpBranch %562 
                                             %562 = OpLabel 
                                       f32_4 %654 = OpLoad %170 
                              Uniform f32_4* %655 = OpAccessChain %38 %542 
                                       f32_4 %656 = OpLoad %655 
                                         f32 %657 = OpDot %654 %656 
                                                      OpStore %493 %657 
                                         f32 %658 = OpLoad %493 
                                         f32 %659 = OpExtInst %1 43 %658 %73 %109 
                                                      OpStore %493 %659 
                                       f32_3 %661 = OpLoad %523 
                              Uniform f32_4* %663 = OpAccessChain %38 %662 
                                       f32_4 %664 = OpLoad %663 
                                       f32_3 %665 = OpVectorShuffle %664 %664 0 1 2 
                                       f32_3 %666 = OpFMul %661 %665 
                                                      OpStore %660 %666 
                                         f32 %669 = OpLoad %493 
                                       f32_3 %670 = OpCompositeConstruct %669 %669 %669 
                                       f32_3 %671 = OpLoad %660 
                                       f32_3 %672 = OpFMul %670 %671 
                                       f32_4 %673 = OpLoad %668 
                                       f32_4 %674 = OpVectorShuffle %673 %672 4 5 6 3 
                                                      OpStore %668 %674 
                                Private f32* %675 = OpAccessChain %9 %202 
                                         f32 %676 = OpLoad %675 
                                 Output f32* %678 = OpAccessChain %668 %202 
                                                      OpStore %678 %676 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    vs_TEXCOORD3.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _OverrideColor;
uniform 	float _StepValue;
uniform 	float _SkyBoost;
uniform 	float _SkyPower;
uniform 	float _CurvePower;
uniform 	float _CurveColorFactor;
uniform 	float _CurveFreq;
uniform 	float _DitherCohesionFactor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat13;
vec2 u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat19;
float u_xlat16_19;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = log2(vs_TEXCOORD3.y);
    u_xlat1.x = u_xlat1.x * _SkyPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat7.x = vs_TEXCOORD3.y * vs_TEXCOORD3.y;
    u_xlat1.x = u_xlat7.x * _SkyBoost + u_xlat1.x;
    u_xlatb7 = u_xlat1.x<0.0;
    u_xlat1.x = (u_xlatb7) ? -1.0 : u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * _OverrideColor.xyz;
    u_xlat19 = vs_TEXCOORD3.x * _CurveFreq;
    u_xlat19 = u_xlat19 * 3.1400001;
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 + 1.0;
    u_xlat2.x = _CurveColorFactor + _CurveColorFactor;
    u_xlat19 = u_xlat19 / u_xlat2.x;
    u_xlat19 = u_xlat19 + -1.0;
    u_xlat19 = _CurvePower * u_xlat19 + 1.0;
    u_xlat2.xyw = vec3(u_xlat19) * u_xlat1.yzx;
    u_xlat3.xyz = vs_TEXCOORD2.xyy * vec3(0.00999999978, 0.00999999978, 0.0799999982);
    u_xlat4.y = (-_Time.x) * 0.333333343 + u_xlat3.z;
    u_xlat4.x = vs_TEXCOORD2.x * 0.0799999982;
    u_xlat10_4 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat16_1 = log2(u_xlat10_4.x);
    u_xlat16_1 = u_xlat16_1 * 1.5;
    u_xlat16_1 = exp2(u_xlat16_1);
    u_xlatb15 = u_xlat2.x>=u_xlat2.y;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat2.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.yz * vec2(u_xlat19) + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat15) * u_xlat5 + u_xlat4;
    u_xlatb7 = u_xlat2.w>=u_xlat4.x;
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat2.wyx;
    u_xlat4 = (-u_xlat2) + u_xlat4;
    u_xlat2 = u_xlat7.xxxx * u_xlat4 + u_xlat2;
    u_xlat7.x = min(u_xlat2.y, u_xlat2.w);
    u_xlat7.x = (-u_xlat7.x) + u_xlat2.x;
    u_xlat13 = (-u_xlat2.y) + u_xlat2.w;
    u_xlat19 = u_xlat7.x * 6.0 + 1.00000001e-010;
    u_xlat13 = u_xlat13 / u_xlat19;
    u_xlat13 = u_xlat13 + u_xlat2.z;
    u_xlat19 = u_xlat2.x + 1.00000001e-010;
    u_xlat7.x = u_xlat7.x / u_xlat19;
    u_xlat1.x = (-u_xlat16_1) * 2.0 + u_xlat2.x;
    u_xlat19 = dot(u_xlat3.xy, vec2(12.9898005, 78.2330017));
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 * 43758.5469;
    u_xlat19 = fract(u_xlat19);
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat2.x = u_xlat3.y + u_xlat3.x;
    u_xlat8.x = u_xlat2.x + (-_Time.z);
    u_xlat8.x = sin(u_xlat8.x);
    u_xlat8.x = u_xlat8.x + 1.0;
    u_xlat8.x = u_xlat8.x * 0.5;
    u_xlat14.x = u_xlat2.x + _Time.z;
    u_xlat14.x = sin(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * 0.099999994 + 0.150000006;
    u_xlat8.x = u_xlat8.x * u_xlat14.x + 0.349999994;
    u_xlat2.x = u_xlat2.x * 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlatb2 = 0.25<u_xlat2.x;
    u_xlat1.x = u_xlat1.x / _StepValue;
    u_xlat14.x = (-u_xlat8.x) + u_xlat1.x;
    u_xlat14.x = (-u_xlat19) * _DitherCohesionFactor + u_xlat14.x;
    u_xlat14.x = ceil(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _StepValue;
    u_xlat1.x = u_xlat8.x + u_xlat1.x;
    u_xlat1.x = u_xlat19 * _DitherCohesionFactor + u_xlat1.x;
    u_xlat1.x = roundEven(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _StepValue;
    u_xlat1.x = (u_xlatb2) ? u_xlat14.x : u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat2.xyz = abs(vec3(u_xlat13)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat2.xyz = fract(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat2.xyz = abs(u_xlat2.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_19 = u_xlat10_0.x + -0.00999999978;
    u_xlat16_19 = u_xlat16_19 * 1000.0;
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(0.5, 0.5, 0.5) + vec3(0.0299999993, 0.0, 0.0700000003);
    u_xlat1.xyz = vec3(u_xlat16_19) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat8.xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat8.xyz;
        u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat8.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat8.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat8.x, u_xlat3.x);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat2.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb8 = 0.0<u_xlat1.z;
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat14.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
    u_xlat10_3 = texture(_LightTexture0, u_xlat14.xy);
    u_xlat19 = u_xlat8.x * u_xlat10_3.w;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_3 = texture(_LightTextureB0, u_xlat1.xx);
    u_xlat1.x = u_xlat19 * u_xlat10_3.w;
    u_xlat1.x = u_xlat2.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 206
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %145 %151 %152 %164 %194 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %194 Location 194 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_2 %140 = OpConstantComposite %139 %139 
                                             %144 = OpTypePointer Output %95 
                               Output f32_2* %145 = OpVariable Output 
                                         f32 %148 = OpConstant 3.674022E-40 
                                       f32_2 %149 = OpConstantComposite %148 %148 
                               Output f32_2* %151 = OpVariable Output 
                                Input f32_4* %152 = OpVariable Input 
                                             %163 = OpTypePointer Input %50 
                                Input f32_3* %164 = OpVariable Input 
                                         u32 %170 = OpConstant 0 
                                             %171 = OpTypePointer Private %6 
                                         u32 %184 = OpConstant 2 
                                Private f32* %186 = OpVariable Private 
                               Output f32_3* %194 = OpVariable Output 
                                             %200 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %96 = OpLoad %44 
                                        f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                               Uniform f32_4* %98 = OpAccessChain %21 %36 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %97 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
                                                      OpStore %9 %103 
                              Uniform f32_4* %104 = OpAccessChain %21 %36 %23 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %107 = OpLoad %44 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 0 
                                       f32_2 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %9 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %36 %36 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpLoad %44 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 2 
                                       f32_2 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %9 %125 
                              Uniform f32_4* %126 = OpAccessChain %21 %36 %46 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                                       f32_4 %129 = OpLoad %44 
                                       f32_2 %130 = OpVectorShuffle %129 %129 3 3 
                                       f32_2 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_2 %134 = OpFAdd %131 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 3 
                                                      OpStore %9 %136 
                                       f32_4 %137 = OpLoad %9 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %9 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %9 %143 
                                       f32_4 %146 = OpLoad %9 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_2 %150 = OpFMul %147 %149 
                                                      OpStore %145 %150 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                              Uniform f32_4* %155 = OpAccessChain %21 %46 
                                       f32_4 %156 = OpLoad %155 
                                       f32_2 %157 = OpVectorShuffle %156 %156 0 1 
                                       f32_2 %158 = OpFMul %154 %157 
                              Uniform f32_4* %159 = OpAccessChain %21 %46 
                                       f32_4 %160 = OpLoad %159 
                                       f32_2 %161 = OpVectorShuffle %160 %160 2 3 
                                       f32_2 %162 = OpFAdd %158 %161 
                                                      OpStore %151 %162 
                                       f32_3 %165 = OpLoad %164 
                              Uniform f32_4* %166 = OpAccessChain %21 %24 %23 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                Private f32* %172 = OpAccessChain %9 %170 
                                                      OpStore %172 %169 
                                       f32_3 %173 = OpLoad %164 
                              Uniform f32_4* %174 = OpAccessChain %21 %24 %24 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %173 %176 
                                Private f32* %178 = OpAccessChain %9 %81 
                                                      OpStore %178 %177 
                                       f32_3 %179 = OpLoad %164 
                              Uniform f32_4* %180 = OpAccessChain %21 %24 %36 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                         f32 %183 = OpDot %179 %182 
                                Private f32* %185 = OpAccessChain %9 %184 
                                                      OpStore %185 %183 
                                       f32_4 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %188 %190 
                                                      OpStore %186 %191 
                                         f32 %192 = OpLoad %186 
                                         f32 %193 = OpExtInst %1 32 %192 
                                                      OpStore %186 %193 
                                         f32 %195 = OpLoad %186 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %196 %198 
                                                      OpStore %194 %199 
                                 Output f32* %201 = OpAccessChain %85 %23 %81 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFNegate %202 
                                 Output f32* %204 = OpAccessChain %85 %23 %81 
                                                      OpStore %204 %203 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 769
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %21 %141 %757 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 Location 21 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpMemberDecorate %37 0 Offset 37 
                                                      OpMemberDecorate %37 1 RelaxedPrecision 
                                                      OpMemberDecorate %37 1 Offset 37 
                                                      OpMemberDecorate %37 2 Offset 37 
                                                      OpMemberDecorate %37 3 Offset 37 
                                                      OpMemberDecorate %37 4 Offset 37 
                                                      OpMemberDecorate %37 5 Offset 37 
                                                      OpMemberDecorate %37 6 RelaxedPrecision 
                                                      OpMemberDecorate %37 6 Offset 37 
                                                      OpMemberDecorate %37 7 Offset 37 
                                                      OpMemberDecorate %37 8 Offset 37 
                                                      OpMemberDecorate %37 9 Offset 37 
                                                      OpMemberDecorate %37 10 Offset 37 
                                                      OpMemberDecorate %37 11 Offset 37 
                                                      OpMemberDecorate %37 12 Offset 37 
                                                      OpMemberDecorate %37 13 Offset 37 
                                                      OpMemberDecorate %37 14 Offset 37 
                                                      OpMemberDecorate %37 15 Offset 37 
                                                      OpMemberDecorate %37 16 RelaxedPrecision 
                                                      OpMemberDecorate %37 16 Offset 37 
                                                      OpDecorate %37 Block 
                                                      OpDecorate %39 DescriptorSet 39 
                                                      OpDecorate %39 Binding 39 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %165 DescriptorSet 165 
                                                      OpDecorate %165 Binding 165 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %538 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %542 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %545 RelaxedPrecision 
                                                      OpDecorate %591 SpecId 591 
                                                      OpDecorate %673 DescriptorSet 673 
                                                      OpDecorate %673 Binding 673 
                                                      OpDecorate %678 RelaxedPrecision 
                                                      OpDecorate %685 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %688 RelaxedPrecision 
                                                      OpDecorate %689 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %701 RelaxedPrecision 
                                                      OpDecorate %716 DescriptorSet 716 
                                                      OpDecorate %716 Binding 716 
                                                      OpDecorate %724 RelaxedPrecision 
                                                      OpDecorate %733 DescriptorSet 733 
                                                      OpDecorate %733 Binding 733 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                                      OpDecorate %749 RelaxedPrecision 
                                                      OpDecorate %753 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %757 RelaxedPrecision 
                                                      OpDecorate %757 Location 757 
                                                      OpDecorate %758 RelaxedPrecision 
                                                      OpDecorate %759 RelaxedPrecision 
                                                      OpDecorate %760 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %765 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                 Input f32_2* %21 = OpVariable Input 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Input %6 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          u32 %33 = OpConstant 4 
                                              %34 = OpTypeArray %7 %33 
                                              %35 = OpTypeVector %6 3 
                                              %36 = OpTypeArray %7 %33 
                                              %37 = OpTypeStruct %7 %7 %7 %34 %35 %35 %7 %36 %7 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %38 = OpTypePointer Uniform %37 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %39 = OpVariable Uniform 
                                              %40 = OpTypeInt 32 1 
                                          i32 %41 = OpConstant 11 
                                              %42 = OpTypePointer Uniform %6 
                                              %51 = OpTypePointer Private %35 
                               Private f32_3* %52 = OpVariable Private 
                                          i32 %61 = OpConstant 10 
                                              %69 = OpTypeBool 
                                              %70 = OpTypePointer Private %69 
                                Private bool* %71 = OpVariable Private 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Function %6 
                                          f32 %81 = OpConstant 3.674022E-40 
                                          i32 %89 = OpConstant 8 
                                              %90 = OpTypePointer Uniform %7 
                                 Private f32* %97 = OpVariable Private 
                                         i32 %100 = OpConstant 14 
                                         f32 %105 = OpConstant 3.674022E-40 
                                         f32 %110 = OpConstant 3.674022E-40 
                              Private f32_4* %112 = OpVariable Private 
                                         i32 %113 = OpConstant 13 
                                         i32 %126 = OpConstant 12 
                              Private f32_3* %139 = OpVariable Private 
                                             %140 = OpTypePointer Input %35 
                                Input f32_3* %141 = OpVariable Input 
                                         f32 %144 = OpConstant 3.674022E-40 
                                         f32 %145 = OpConstant 3.674022E-40 
                                       f32_3 %146 = OpConstantComposite %144 %144 %145 
                              Private f32_4* %148 = OpVariable Private 
                                         i32 %149 = OpConstant 0 
                                         f32 %153 = OpConstant 3.674022E-40 
                                         u32 %155 = OpConstant 2 
                                Private f32* %164 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %165 = OpVariable UniformConstant 
                                Private f32* %171 = OpVariable Private 
                                         f32 %175 = OpConstant 3.674022E-40 
                               Private bool* %179 = OpVariable Private 
                                Private f32* %185 = OpVariable Private 
                                         f32 %197 = OpConstant 3.674022E-40 
                                         u32 %198 = OpConstant 3 
                              Private f32_4* %200 = OpVariable Private 
                                Private f32* %263 = OpVariable Private 
                                         f32 %272 = OpConstant 3.674022E-40 
                                         f32 %274 = OpConstant 3.674022E-40 
                                         f32 %293 = OpConstant 3.674022E-40 
                                         f32 %301 = OpConstant 3.674022E-40 
                                         f32 %302 = OpConstant 3.674022E-40 
                                       f32_2 %303 = OpConstantComposite %301 %302 
                                         f32 %308 = OpConstant 3.674022E-40 
                                         f32 %313 = OpConstant 3.674022E-40 
                              Private f32_3* %321 = OpVariable Private 
                                         f32 %339 = OpConstant 3.674022E-40 
                                Private f32* %342 = OpVariable Private 
                                         f32 %351 = OpConstant 3.674022E-40 
                                         f32 %353 = OpConstant 3.674022E-40 
                                         f32 %359 = OpConstant 3.674022E-40 
                               Private bool* %370 = OpVariable Private 
                                         f32 %371 = OpConstant 3.674022E-40 
                                         i32 %377 = OpConstant 9 
                                         i32 %390 = OpConstant 15 
                                       f32_3 %443 = OpConstantComposite %110 %197 %153 
                                       f32_3 %454 = OpConstantComposite %272 %272 %272 
                                         f32 %456 = OpConstant 3.674022E-40 
                                       f32_3 %457 = OpConstantComposite %456 %456 %456 
                                       f32_3 %464 = OpConstantComposite %81 %81 %81 
                                       f32_3 %485 = OpConstantComposite %110 %110 %110 
                                       f32_3 %495 = OpConstantComposite %339 %339 %339 
                                Private f32* %499 = OpVariable Private 
                                         f32 %502 = OpConstant 3.674022E-40 
                                         f32 %505 = OpConstant 3.674022E-40 
                                         f32 %513 = OpConstant 3.674022E-40 
                                         f32 %514 = OpConstant 3.674022E-40 
                                       f32_3 %515 = OpConstantComposite %513 %74 %514 
                              Private f32_3* %529 = OpVariable Private 
                                       f32_3 %532 = OpConstantComposite %293 %293 %293 
                                         i32 %539 = OpConstant 16 
                               Private bool* %544 = OpVariable Private 
                                         i32 %548 = OpConstant 1 
                                         i32 %550 = OpConstant -1 
                                         i32 %558 = OpConstant 7 
                                         i32 %569 = OpConstant 2 
                                         i32 %578 = OpConstant 3 
                                        bool %585 = OpConstantFalse 
                                        bool %591 = OpSpecConstantFalse 
                                             %624 = OpTypePointer Function %35 
                                         i32 %637 = OpConstant 5 
                                             %638 = OpTypePointer Uniform %35 
                                         i32 %647 = OpConstant 4 
                                         f32 %656 = OpConstant 3.674022E-40 
                                             %670 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %671 = OpTypeSampledImage %670 
                                             %672 = OpTypePointer UniformConstant %671 
 UniformConstant read_only Texture3DSampled* %673 = OpVariable UniformConstant 
                              Private f32_4* %678 = OpVariable Private 
                               Private bool* %691 = OpVariable Private 
                              Private f32_3* %695 = OpVariable Private 
                                       f32_2 %712 = OpConstantComposite %339 %339 
 UniformConstant read_only Texture2DSampled* %716 = OpVariable UniformConstant 
 UniformConstant read_only Texture2DSampled* %733 = OpVariable UniformConstant 
                                         i32 %751 = OpConstant 6 
                                             %756 = OpTypePointer Output %7 
                               Output f32_4* %757 = OpVariable Output 
                                             %766 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %77 = OpVariable Function 
                               Function f32* %186 = OpVariable Function 
                               Function f32* %225 = OpVariable Function 
                               Function f32* %426 = OpVariable Function 
                             Function f32_3* %625 = OpVariable Function 
                               Function f32* %696 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                   Input f32* %25 = OpAccessChain %21 %23 
                                          f32 %26 = OpLoad %25 
                                          f32 %27 = OpExtInst %1 30 %26 
                                 Private f32* %30 = OpAccessChain %20 %28 
                                                      OpStore %30 %27 
                                 Private f32* %31 = OpAccessChain %20 %28 
                                          f32 %32 = OpLoad %31 
                                 Uniform f32* %43 = OpAccessChain %39 %41 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %32 %44 
                                 Private f32* %46 = OpAccessChain %20 %28 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %20 %28 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 29 %48 
                                 Private f32* %50 = OpAccessChain %20 %28 
                                                      OpStore %50 %49 
                                   Input f32* %53 = OpAccessChain %21 %23 
                                          f32 %54 = OpLoad %53 
                                   Input f32* %55 = OpAccessChain %21 %23 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFMul %54 %56 
                                 Private f32* %58 = OpAccessChain %52 %28 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %52 %28 
                                          f32 %60 = OpLoad %59 
                                 Uniform f32* %62 = OpAccessChain %39 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFMul %60 %63 
                                 Private f32* %65 = OpAccessChain %20 %28 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFAdd %64 %66 
                                 Private f32* %68 = OpAccessChain %20 %28 
                                                      OpStore %68 %67 
                                 Private f32* %72 = OpAccessChain %20 %28 
                                          f32 %73 = OpLoad %72 
                                         bool %75 = OpFOrdLessThan %73 %74 
                                                      OpStore %71 %75 
                                         bool %78 = OpLoad %71 
                                                      OpSelectionMerge %80 None 
                                                      OpBranchConditional %78 %79 %82 
                                              %79 = OpLabel 
                                                      OpStore %77 %81 
                                                      OpBranch %80 
                                              %82 = OpLabel 
                                 Private f32* %83 = OpAccessChain %20 %28 
                                          f32 %84 = OpLoad %83 
                                                      OpStore %77 %84 
                                                      OpBranch %80 
                                              %80 = OpLabel 
                                          f32 %85 = OpLoad %77 
                                 Private f32* %86 = OpAccessChain %20 %28 
                                                      OpStore %86 %85 
                                        f32_4 %87 = OpLoad %20 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 0 0 
                               Uniform f32_4* %91 = OpAccessChain %39 %89 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFMul %88 %93 
                                        f32_4 %95 = OpLoad %20 
                                        f32_4 %96 = OpVectorShuffle %95 %94 4 5 6 3 
                                                      OpStore %20 %96 
                                   Input f32* %98 = OpAccessChain %21 %28 
                                          f32 %99 = OpLoad %98 
                                Uniform f32* %101 = OpAccessChain %39 %100 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFMul %99 %102 
                                                      OpStore %97 %103 
                                         f32 %104 = OpLoad %97 
                                         f32 %106 = OpFMul %104 %105 
                                                      OpStore %97 %106 
                                         f32 %107 = OpLoad %97 
                                         f32 %108 = OpExtInst %1 13 %107 
                                                      OpStore %97 %108 
                                         f32 %109 = OpLoad %97 
                                         f32 %111 = OpFAdd %109 %110 
                                                      OpStore %97 %111 
                                Uniform f32* %114 = OpAccessChain %39 %113 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %116 = OpAccessChain %39 %113 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFAdd %115 %117 
                                Private f32* %119 = OpAccessChain %112 %28 
                                                      OpStore %119 %118 
                                         f32 %120 = OpLoad %97 
                                Private f32* %121 = OpAccessChain %112 %28 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFDiv %120 %122 
                                                      OpStore %97 %123 
                                         f32 %124 = OpLoad %97 
                                         f32 %125 = OpFAdd %124 %81 
                                                      OpStore %97 %125 
                                Uniform f32* %127 = OpAccessChain %39 %126 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpLoad %97 
                                         f32 %130 = OpFMul %128 %129 
                                         f32 %131 = OpFAdd %130 %110 
                                                      OpStore %97 %131 
                                         f32 %132 = OpLoad %97 
                                       f32_3 %133 = OpCompositeConstruct %132 %132 %132 
                                       f32_4 %134 = OpLoad %20 
                                       f32_3 %135 = OpVectorShuffle %134 %134 1 2 0 
                                       f32_3 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %112 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 6 
                                                      OpStore %112 %138 
                                       f32_3 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 1 
                                       f32_3 %147 = OpFMul %143 %146 
                                                      OpStore %139 %147 
                                Uniform f32* %150 = OpAccessChain %39 %149 %28 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                         f32 %154 = OpFMul %152 %153 
                                Private f32* %156 = OpAccessChain %139 %155 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFAdd %154 %157 
                                Private f32* %159 = OpAccessChain %148 %23 
                                                      OpStore %159 %158 
                                  Input f32* %160 = OpAccessChain %141 %28 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFMul %161 %145 
                                Private f32* %163 = OpAccessChain %148 %28 
                                                      OpStore %163 %162 
                  read_only Texture2DSampled %166 = OpLoad %165 
                                       f32_4 %167 = OpLoad %148 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                       f32_4 %169 = OpImageSampleImplicitLod %166 %168 
                                         f32 %170 = OpCompositeExtract %169 0 
                                                      OpStore %164 %170 
                                         f32 %172 = OpLoad %164 
                                         f32 %173 = OpExtInst %1 30 %172 
                                                      OpStore %171 %173 
                                         f32 %174 = OpLoad %171 
                                         f32 %176 = OpFMul %174 %175 
                                                      OpStore %171 %176 
                                         f32 %177 = OpLoad %171 
                                         f32 %178 = OpExtInst %1 29 %177 
                                                      OpStore %171 %178 
                                Private f32* %180 = OpAccessChain %112 %28 
                                         f32 %181 = OpLoad %180 
                                Private f32* %182 = OpAccessChain %112 %23 
                                         f32 %183 = OpLoad %182 
                                        bool %184 = OpFOrdGreaterThanEqual %181 %183 
                                                      OpStore %179 %184 
                                        bool %187 = OpLoad %179 
                                                      OpSelectionMerge %189 None 
                                                      OpBranchConditional %187 %188 %190 
                                             %188 = OpLabel 
                                                      OpStore %186 %110 
                                                      OpBranch %189 
                                             %190 = OpLabel 
                                                      OpStore %186 %74 
                                                      OpBranch %189 
                                             %189 = OpLabel 
                                         f32 %191 = OpLoad %186 
                                                      OpStore %185 %191 
                                       f32_4 %192 = OpLoad %112 
                                       f32_2 %193 = OpVectorShuffle %192 %192 1 0 
                                       f32_4 %194 = OpLoad %148 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 2 3 
                                                      OpStore %148 %195 
                                Private f32* %196 = OpAccessChain %148 %155 
                                                      OpStore %196 %81 
                                Private f32* %199 = OpAccessChain %148 %198 
                                                      OpStore %199 %197 
                                       f32_4 %201 = OpLoad %20 
                                       f32_2 %202 = OpVectorShuffle %201 %201 1 2 
                                         f32 %203 = OpLoad %97 
                                       f32_2 %204 = OpCompositeConstruct %203 %203 
                                       f32_2 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %148 
                                       f32_2 %207 = OpVectorShuffle %206 %206 0 1 
                                       f32_2 %208 = OpFNegate %207 
                                       f32_2 %209 = OpFAdd %205 %208 
                                       f32_4 %210 = OpLoad %200 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 2 3 
                                                      OpStore %200 %211 
                                Private f32* %212 = OpAccessChain %200 %155 
                                                      OpStore %212 %110 
                                Private f32* %213 = OpAccessChain %200 %198 
                                                      OpStore %213 %81 
                                         f32 %214 = OpLoad %185 
                                       f32_4 %215 = OpCompositeConstruct %214 %214 %214 %214 
                                       f32_4 %216 = OpLoad %200 
                                       f32_4 %217 = OpFMul %215 %216 
                                       f32_4 %218 = OpLoad %148 
                                       f32_4 %219 = OpFAdd %217 %218 
                                                      OpStore %148 %219 
                                Private f32* %220 = OpAccessChain %112 %198 
                                         f32 %221 = OpLoad %220 
                                Private f32* %222 = OpAccessChain %148 %28 
                                         f32 %223 = OpLoad %222 
                                        bool %224 = OpFOrdGreaterThanEqual %221 %223 
                                                      OpStore %71 %224 
                                        bool %226 = OpLoad %71 
                                                      OpSelectionMerge %228 None 
                                                      OpBranchConditional %226 %227 %229 
                                             %227 = OpLabel 
                                                      OpStore %225 %110 
                                                      OpBranch %228 
                                             %229 = OpLabel 
                                                      OpStore %225 %74 
                                                      OpBranch %228 
                                             %228 = OpLabel 
                                         f32 %230 = OpLoad %225 
                                Private f32* %231 = OpAccessChain %52 %28 
                                                      OpStore %231 %230 
                                       f32_4 %232 = OpLoad %148 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 3 
                                       f32_4 %234 = OpLoad %112 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
                                                      OpStore %112 %235 
                                       f32_4 %236 = OpLoad %112 
                                       f32_3 %237 = OpVectorShuffle %236 %236 3 1 0 
                                       f32_4 %238 = OpLoad %148 
                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 2 6 
                                                      OpStore %148 %239 
                                       f32_4 %240 = OpLoad %112 
                                       f32_4 %241 = OpFNegate %240 
                                       f32_4 %242 = OpLoad %148 
                                       f32_4 %243 = OpFAdd %241 %242 
                                                      OpStore %148 %243 
                                       f32_3 %244 = OpLoad %52 
                                       f32_4 %245 = OpVectorShuffle %244 %244 0 0 0 0 
                                       f32_4 %246 = OpLoad %148 
                                       f32_4 %247 = OpFMul %245 %246 
                                       f32_4 %248 = OpLoad %112 
                                       f32_4 %249 = OpFAdd %247 %248 
                                                      OpStore %112 %249 
                                Private f32* %250 = OpAccessChain %112 %23 
                                         f32 %251 = OpLoad %250 
                                Private f32* %252 = OpAccessChain %112 %198 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpExtInst %1 37 %251 %253 
                                Private f32* %255 = OpAccessChain %52 %28 
                                                      OpStore %255 %254 
                                Private f32* %256 = OpAccessChain %52 %28 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFNegate %257 
                                Private f32* %259 = OpAccessChain %112 %28 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFAdd %258 %260 
                                Private f32* %262 = OpAccessChain %52 %28 
                                                      OpStore %262 %261 
                                Private f32* %264 = OpAccessChain %112 %23 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFNegate %265 
                                Private f32* %267 = OpAccessChain %112 %198 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFAdd %266 %268 
                                                      OpStore %263 %269 
                                Private f32* %270 = OpAccessChain %52 %28 
                                         f32 %271 = OpLoad %270 
                                         f32 %273 = OpFMul %271 %272 
                                         f32 %275 = OpFAdd %273 %274 
                                                      OpStore %97 %275 
                                         f32 %276 = OpLoad %263 
                                         f32 %277 = OpLoad %97 
                                         f32 %278 = OpFDiv %276 %277 
                                                      OpStore %263 %278 
                                         f32 %279 = OpLoad %263 
                                Private f32* %280 = OpAccessChain %112 %155 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpFAdd %279 %281 
                                                      OpStore %263 %282 
                                Private f32* %283 = OpAccessChain %112 %28 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFAdd %284 %274 
                                                      OpStore %97 %285 
                                Private f32* %286 = OpAccessChain %52 %28 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpLoad %97 
                                         f32 %289 = OpFDiv %287 %288 
                                Private f32* %290 = OpAccessChain %52 %28 
                                                      OpStore %290 %289 
                                         f32 %291 = OpLoad %171 
                                         f32 %292 = OpFNegate %291 
                                         f32 %294 = OpFMul %292 %293 
                                Private f32* %295 = OpAccessChain %112 %28 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpFAdd %294 %296 
                                Private f32* %298 = OpAccessChain %20 %28 
                                                      OpStore %298 %297 
                                       f32_3 %299 = OpLoad %139 
                                       f32_2 %300 = OpVectorShuffle %299 %299 0 1 
                                         f32 %304 = OpDot %300 %303 
                                                      OpStore %97 %304 
                                         f32 %305 = OpLoad %97 
                                         f32 %306 = OpExtInst %1 13 %305 
                                                      OpStore %97 %306 
                                         f32 %307 = OpLoad %97 
                                         f32 %309 = OpFMul %307 %308 
                                                      OpStore %97 %309 
                                         f32 %310 = OpLoad %97 
                                         f32 %311 = OpExtInst %1 10 %310 
                                                      OpStore %97 %311 
                                         f32 %312 = OpLoad %97 
                                         f32 %314 = OpFAdd %312 %313 
                                                      OpStore %97 %314 
                                Private f32* %315 = OpAccessChain %139 %23 
                                         f32 %316 = OpLoad %315 
                                Private f32* %317 = OpAccessChain %139 %28 
                                         f32 %318 = OpLoad %317 
                                         f32 %319 = OpFAdd %316 %318 
                                Private f32* %320 = OpAccessChain %112 %28 
                                                      OpStore %320 %319 
                                Private f32* %322 = OpAccessChain %112 %28 
                                         f32 %323 = OpLoad %322 
                                Uniform f32* %324 = OpAccessChain %39 %149 %155 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFNegate %325 
                                         f32 %327 = OpFAdd %323 %326 
                                Private f32* %328 = OpAccessChain %321 %28 
                                                      OpStore %328 %327 
                                Private f32* %329 = OpAccessChain %321 %28 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpExtInst %1 13 %330 
                                Private f32* %332 = OpAccessChain %321 %28 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %321 %28 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFAdd %334 %110 
                                Private f32* %336 = OpAccessChain %321 %28 
                                                      OpStore %336 %335 
                                Private f32* %337 = OpAccessChain %321 %28 
                                         f32 %338 = OpLoad %337 
                                         f32 %340 = OpFMul %338 %339 
                                Private f32* %341 = OpAccessChain %321 %28 
                                                      OpStore %341 %340 
                                Private f32* %343 = OpAccessChain %112 %28 
                                         f32 %344 = OpLoad %343 
                                Uniform f32* %345 = OpAccessChain %39 %149 %155 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFAdd %344 %346 
                                                      OpStore %342 %347 
                                         f32 %348 = OpLoad %342 
                                         f32 %349 = OpExtInst %1 13 %348 
                                                      OpStore %342 %349 
                                         f32 %350 = OpLoad %342 
                                         f32 %352 = OpFMul %350 %351 
                                         f32 %354 = OpFAdd %352 %353 
                                                      OpStore %342 %354 
                                Private f32* %355 = OpAccessChain %321 %28 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpLoad %342 
                                         f32 %358 = OpFMul %356 %357 
                                         f32 %360 = OpFAdd %358 %359 
                                Private f32* %361 = OpAccessChain %321 %28 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %112 %28 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFMul %363 %339 
                                Private f32* %365 = OpAccessChain %112 %28 
                                                      OpStore %365 %364 
                                Private f32* %366 = OpAccessChain %112 %28 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpExtInst %1 10 %367 
                                Private f32* %369 = OpAccessChain %112 %28 
                                                      OpStore %369 %368 
                                Private f32* %372 = OpAccessChain %112 %28 
                                         f32 %373 = OpLoad %372 
                                        bool %374 = OpFOrdLessThan %371 %373 
                                                      OpStore %370 %374 
                                Private f32* %375 = OpAccessChain %20 %28 
                                         f32 %376 = OpLoad %375 
                                Uniform f32* %378 = OpAccessChain %39 %377 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFDiv %376 %379 
                                Private f32* %381 = OpAccessChain %20 %28 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %321 %28 
                                         f32 %383 = OpLoad %382 
                                         f32 %384 = OpFNegate %383 
                                Private f32* %385 = OpAccessChain %20 %28 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %342 %387 
                                         f32 %388 = OpLoad %97 
                                         f32 %389 = OpFNegate %388 
                                Uniform f32* %391 = OpAccessChain %39 %390 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFMul %389 %392 
                                         f32 %394 = OpLoad %342 
                                         f32 %395 = OpFAdd %393 %394 
                                                      OpStore %342 %395 
                                         f32 %396 = OpLoad %342 
                                         f32 %397 = OpExtInst %1 9 %396 
                                                      OpStore %342 %397 
                                         f32 %398 = OpLoad %342 
                                Uniform f32* %399 = OpAccessChain %39 %377 
                                         f32 %400 = OpLoad %399 
                                         f32 %401 = OpFMul %398 %400 
                                                      OpStore %342 %401 
                                Private f32* %402 = OpAccessChain %321 %28 
                                         f32 %403 = OpLoad %402 
                                Private f32* %404 = OpAccessChain %20 %28 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFAdd %403 %405 
                                Private f32* %407 = OpAccessChain %20 %28 
                                                      OpStore %407 %406 
                                         f32 %408 = OpLoad %97 
                                Uniform f32* %409 = OpAccessChain %39 %390 
                                         f32 %410 = OpLoad %409 
                                         f32 %411 = OpFMul %408 %410 
                                Private f32* %412 = OpAccessChain %20 %28 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpFAdd %411 %413 
                                Private f32* %415 = OpAccessChain %20 %28 
                                                      OpStore %415 %414 
                                Private f32* %416 = OpAccessChain %20 %28 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpExtInst %1 2 %417 
                                Private f32* %419 = OpAccessChain %20 %28 
                                                      OpStore %419 %418 
                                Private f32* %420 = OpAccessChain %20 %28 
                                         f32 %421 = OpLoad %420 
                                Uniform f32* %422 = OpAccessChain %39 %377 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFMul %421 %423 
                                Private f32* %425 = OpAccessChain %20 %28 
                                                      OpStore %425 %424 
                                        bool %427 = OpLoad %370 
                                                      OpSelectionMerge %429 None 
                                                      OpBranchConditional %427 %428 %431 
                                             %428 = OpLabel 
                                         f32 %430 = OpLoad %342 
                                                      OpStore %426 %430 
                                                      OpBranch %429 
                                             %431 = OpLabel 
                                Private f32* %432 = OpAccessChain %20 %28 
                                         f32 %433 = OpLoad %432 
                                                      OpStore %426 %433 
                                                      OpBranch %429 
                                             %429 = OpLabel 
                                         f32 %434 = OpLoad %426 
                                Private f32* %435 = OpAccessChain %20 %28 
                                                      OpStore %435 %434 
                                Private f32* %436 = OpAccessChain %20 %28 
                                         f32 %437 = OpLoad %436 
                                         f32 %438 = OpExtInst %1 40 %437 %74 
                                Private f32* %439 = OpAccessChain %20 %28 
                                                      OpStore %439 %438 
                                         f32 %440 = OpLoad %263 
                                       f32_3 %441 = OpCompositeConstruct %440 %440 %440 
                                       f32_3 %442 = OpExtInst %1 4 %441 
                                       f32_3 %444 = OpFAdd %442 %443 
                                       f32_4 %445 = OpLoad %112 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %112 %446 
                                       f32_4 %447 = OpLoad %112 
                                       f32_3 %448 = OpVectorShuffle %447 %447 0 1 2 
                                       f32_3 %449 = OpExtInst %1 10 %448 
                                       f32_4 %450 = OpLoad %112 
                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 6 3 
                                                      OpStore %112 %451 
                                       f32_4 %452 = OpLoad %112 
                                       f32_3 %453 = OpVectorShuffle %452 %452 0 1 2 
                                       f32_3 %455 = OpFMul %453 %454 
                                       f32_3 %458 = OpFAdd %455 %457 
                                       f32_4 %459 = OpLoad %112 
                                       f32_4 %460 = OpVectorShuffle %459 %458 4 5 6 3 
                                                      OpStore %112 %460 
                                       f32_4 %461 = OpLoad %112 
                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 2 
                                       f32_3 %463 = OpExtInst %1 4 %462 
                                       f32_3 %465 = OpFAdd %463 %464 
                                       f32_4 %466 = OpLoad %112 
                                       f32_4 %467 = OpVectorShuffle %466 %465 4 5 6 3 
                                                      OpStore %112 %467 
                                       f32_4 %468 = OpLoad %112 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
                                       f32_3 %470 = OpCompositeConstruct %74 %74 %74 
                                       f32_3 %471 = OpCompositeConstruct %110 %110 %110 
                                       f32_3 %472 = OpExtInst %1 43 %469 %470 %471 
                                       f32_4 %473 = OpLoad %112 
                                       f32_4 %474 = OpVectorShuffle %473 %472 4 5 6 3 
                                                      OpStore %112 %474 
                                       f32_4 %475 = OpLoad %112 
                                       f32_3 %476 = OpVectorShuffle %475 %475 0 1 2 
                                       f32_3 %477 = OpFAdd %476 %464 
                                       f32_4 %478 = OpLoad %112 
                                       f32_4 %479 = OpVectorShuffle %478 %477 4 5 6 3 
                                                      OpStore %112 %479 
                                       f32_3 %480 = OpLoad %52 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 0 0 
                                       f32_4 %482 = OpLoad %112 
                                       f32_3 %483 = OpVectorShuffle %482 %482 0 1 2 
                                       f32_3 %484 = OpFMul %481 %483 
                                       f32_3 %486 = OpFAdd %484 %485 
                                                      OpStore %52 %486 
                                       f32_3 %487 = OpLoad %52 
                                       f32_4 %488 = OpLoad %20 
                                       f32_3 %489 = OpVectorShuffle %488 %488 0 0 0 
                                       f32_3 %490 = OpFMul %487 %489 
                                       f32_4 %491 = OpLoad %20 
                                       f32_4 %492 = OpVectorShuffle %491 %490 4 5 6 3 
                                                      OpStore %20 %492 
                                       f32_4 %493 = OpLoad %20 
                                       f32_3 %494 = OpVectorShuffle %493 %493 0 1 2 
                                       f32_3 %496 = OpFMul %494 %495 
                                       f32_4 %497 = OpLoad %112 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 6 3 
                                                      OpStore %112 %498 
                                Private f32* %500 = OpAccessChain %9 %28 
                                         f32 %501 = OpLoad %500 
                                         f32 %503 = OpFAdd %501 %502 
                                                      OpStore %499 %503 
                                         f32 %504 = OpLoad %499 
                                         f32 %506 = OpFMul %504 %505 
                                                      OpStore %499 %506 
                                         f32 %507 = OpLoad %499 
                                         f32 %508 = OpExtInst %1 43 %507 %74 %110 
                                                      OpStore %499 %508 
                                       f32_4 %509 = OpLoad %20 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                       f32_3 %511 = OpFNegate %510 
                                       f32_3 %512 = OpFMul %511 %495 
                                       f32_3 %516 = OpFAdd %512 %515 
                                       f32_4 %517 = OpLoad %20 
                                       f32_4 %518 = OpVectorShuffle %517 %516 4 5 6 3 
                                                      OpStore %20 %518 
                                         f32 %519 = OpLoad %499 
                                       f32_3 %520 = OpCompositeConstruct %519 %519 %519 
                                       f32_4 %521 = OpLoad %20 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_3 %523 = OpFMul %520 %522 
                                       f32_4 %524 = OpLoad %112 
                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
                                       f32_3 %526 = OpFAdd %523 %525 
                                       f32_4 %527 = OpLoad %20 
                                       f32_4 %528 = OpVectorShuffle %527 %526 4 5 6 3 
                                                      OpStore %20 %528 
                                       f32_4 %530 = OpLoad %9 
                                       f32_3 %531 = OpVectorShuffle %530 %530 0 1 2 
                                       f32_3 %533 = OpFMul %531 %532 
                                       f32_4 %534 = OpLoad %20 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 1 2 
                                       f32_3 %536 = OpFAdd %533 %535 
                                                      OpStore %529 %536 
                                Private f32* %537 = OpAccessChain %9 %198 
                                         f32 %538 = OpLoad %537 
                                Uniform f32* %540 = OpAccessChain %39 %539 
                                         f32 %541 = OpLoad %540 
                                         f32 %542 = OpFNegate %541 
                                         f32 %543 = OpFAdd %538 %542 
                                                      OpStore %499 %543 
                                         f32 %545 = OpLoad %499 
                                        bool %546 = OpFOrdLessThan %545 %74 
                                                      OpStore %544 %546 
                                        bool %547 = OpLoad %544 
                                         i32 %549 = OpSelect %547 %548 %149 
                                         i32 %551 = OpIMul %549 %550 
                                        bool %552 = OpINotEqual %551 %149 
                                                      OpSelectionMerge %554 None 
                                                      OpBranchConditional %552 %553 %554 
                                             %553 = OpLabel 
                                                      OpKill
                                             %554 = OpLabel 
                                       f32_3 %556 = OpLoad %141 
                                       f32_4 %557 = OpVectorShuffle %556 %556 1 1 1 1 
                              Uniform f32_4* %559 = OpAccessChain %39 %558 %548 
                                       f32_4 %560 = OpLoad %559 
                                       f32_4 %561 = OpFMul %557 %560 
                                                      OpStore %20 %561 
                              Uniform f32_4* %562 = OpAccessChain %39 %558 %149 
                                       f32_4 %563 = OpLoad %562 
                                       f32_3 %564 = OpLoad %141 
                                       f32_4 %565 = OpVectorShuffle %564 %564 0 0 0 0 
                                       f32_4 %566 = OpFMul %563 %565 
                                       f32_4 %567 = OpLoad %20 
                                       f32_4 %568 = OpFAdd %566 %567 
                                                      OpStore %20 %568 
                              Uniform f32_4* %570 = OpAccessChain %39 %558 %569 
                                       f32_4 %571 = OpLoad %570 
                                       f32_3 %572 = OpLoad %141 
                                       f32_4 %573 = OpVectorShuffle %572 %572 2 2 2 2 
                                       f32_4 %574 = OpFMul %571 %573 
                                       f32_4 %575 = OpLoad %20 
                                       f32_4 %576 = OpFAdd %574 %575 
                                                      OpStore %20 %576 
                                       f32_4 %577 = OpLoad %20 
                              Uniform f32_4* %579 = OpAccessChain %39 %558 %578 
                                       f32_4 %580 = OpLoad %579 
                                       f32_4 %581 = OpFAdd %577 %580 
                                                      OpStore %20 %581 
                                Uniform f32* %582 = OpAccessChain %39 %569 %28 
                                         f32 %583 = OpLoad %582 
                                        bool %584 = OpFOrdEqual %583 %110 
                                                      OpStore %370 %584 
                                                      OpSelectionMerge %587 None 
                                                      OpBranchConditional %585 %586 %587 
                                             %586 = OpLabel 
                                        bool %588 = OpLoad %370 
                                                      OpSelectionMerge %590 None 
                                                      OpBranchConditional %588 %589 %590 
                                             %589 = OpLabel 
                                                      OpBranch %590 
                                             %590 = OpLabel 
                                                      OpBranch %587 
                                             %587 = OpLabel 
                                                      OpSelectionMerge %593 None 
                                                      OpBranchConditional %591 %592 %680 
                                             %592 = OpLabel 
                                Uniform f32* %594 = OpAccessChain %39 %569 %23 
                                         f32 %595 = OpLoad %594 
                                        bool %596 = OpFOrdEqual %595 %110 
                                                      OpStore %370 %596 
                                       f32_3 %597 = OpLoad %141 
                                       f32_3 %598 = OpVectorShuffle %597 %597 1 1 1 
                              Uniform f32_4* %599 = OpAccessChain %39 %578 %548 
                                       f32_4 %600 = OpLoad %599 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_3 %602 = OpFMul %598 %601 
                                                      OpStore %321 %602 
                              Uniform f32_4* %603 = OpAccessChain %39 %578 %149 
                                       f32_4 %604 = OpLoad %603 
                                       f32_3 %605 = OpVectorShuffle %604 %604 0 1 2 
                                       f32_3 %606 = OpLoad %141 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 0 0 
                                       f32_3 %608 = OpFMul %605 %607 
                                       f32_3 %609 = OpLoad %321 
                                       f32_3 %610 = OpFAdd %608 %609 
                                                      OpStore %321 %610 
                              Uniform f32_4* %611 = OpAccessChain %39 %578 %569 
                                       f32_4 %612 = OpLoad %611 
                                       f32_3 %613 = OpVectorShuffle %612 %612 0 1 2 
                                       f32_3 %614 = OpLoad %141 
                                       f32_3 %615 = OpVectorShuffle %614 %614 2 2 2 
                                       f32_3 %616 = OpFMul %613 %615 
                                       f32_3 %617 = OpLoad %321 
                                       f32_3 %618 = OpFAdd %616 %617 
                                                      OpStore %321 %618 
                                       f32_3 %619 = OpLoad %321 
                              Uniform f32_4* %620 = OpAccessChain %39 %578 %578 
                                       f32_4 %621 = OpLoad %620 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
                                       f32_3 %623 = OpFAdd %619 %622 
                                                      OpStore %321 %623 
                                        bool %626 = OpLoad %370 
                                                      OpSelectionMerge %628 None 
                                                      OpBranchConditional %626 %627 %630 
                                             %627 = OpLabel 
                                       f32_3 %629 = OpLoad %321 
                                                      OpStore %625 %629 
                                                      OpBranch %628 
                                             %630 = OpLabel 
                                       f32_3 %631 = OpLoad %141 
                                                      OpStore %625 %631 
                                                      OpBranch %628 
                                             %628 = OpLabel 
                                       f32_3 %632 = OpLoad %625 
                                       f32_4 %633 = OpLoad %112 
                                       f32_4 %634 = OpVectorShuffle %633 %632 4 5 6 3 
                                                      OpStore %112 %634 
                                       f32_4 %635 = OpLoad %112 
                                       f32_3 %636 = OpVectorShuffle %635 %635 0 1 2 
                              Uniform f32_3* %639 = OpAccessChain %39 %637 
                                       f32_3 %640 = OpLoad %639 
                                       f32_3 %641 = OpFNegate %640 
                                       f32_3 %642 = OpFAdd %636 %641 
                                       f32_4 %643 = OpLoad %112 
                                       f32_4 %644 = OpVectorShuffle %643 %642 4 5 6 3 
                                                      OpStore %112 %644 
                                       f32_4 %645 = OpLoad %112 
                                       f32_3 %646 = OpVectorShuffle %645 %645 0 1 2 
                              Uniform f32_3* %648 = OpAccessChain %39 %647 
                                       f32_3 %649 = OpLoad %648 
                                       f32_3 %650 = OpFMul %646 %649 
                                       f32_4 %651 = OpLoad %112 
                                       f32_4 %652 = OpVectorShuffle %651 %650 0 4 5 6 
                                                      OpStore %112 %652 
                                Private f32* %653 = OpAccessChain %112 %23 
                                         f32 %654 = OpLoad %653 
                                         f32 %655 = OpFMul %654 %371 
                                         f32 %657 = OpFAdd %655 %656 
                                Private f32* %658 = OpAccessChain %321 %28 
                                                      OpStore %658 %657 
                                Uniform f32* %659 = OpAccessChain %39 %569 %155 
                                         f32 %660 = OpLoad %659 
                                         f32 %661 = OpFMul %660 %339 
                                         f32 %662 = OpFAdd %661 %656 
                                Private f32* %663 = OpAccessChain %139 %28 
                                                      OpStore %663 %662 
                                Private f32* %664 = OpAccessChain %321 %28 
                                         f32 %665 = OpLoad %664 
                                Private f32* %666 = OpAccessChain %139 %28 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpExtInst %1 40 %665 %667 
                                Private f32* %669 = OpAccessChain %112 %28 
                                                      OpStore %669 %668 
                  read_only Texture3DSampled %674 = OpLoad %673 
                                       f32_4 %675 = OpLoad %112 
                                       f32_3 %676 = OpVectorShuffle %675 %675 0 2 3 
                                       f32_4 %677 = OpImageSampleImplicitLod %674 %676 
                                                      OpStore %112 %677 
                                       f32_4 %679 = OpLoad %112 
                                                      OpStore %678 %679 
                                                      OpBranch %593 
                                             %680 = OpLabel 
                                Private f32* %681 = OpAccessChain %678 %28 
                                                      OpStore %681 %110 
                                Private f32* %682 = OpAccessChain %678 %23 
                                                      OpStore %682 %110 
                                Private f32* %683 = OpAccessChain %678 %155 
                                                      OpStore %683 %110 
                                Private f32* %684 = OpAccessChain %678 %198 
                                                      OpStore %684 %110 
                                                      OpBranch %593 
                                             %593 = OpLabel 
                                       f32_4 %685 = OpLoad %678 
                              Uniform f32_4* %686 = OpAccessChain %39 %548 
                                       f32_4 %687 = OpLoad %686 
                                         f32 %688 = OpDot %685 %687 
                                                      OpStore %499 %688 
                                         f32 %689 = OpLoad %499 
                                         f32 %690 = OpExtInst %1 43 %689 %74 %110 
                                                      OpStore %499 %690 
                                Private f32* %692 = OpAccessChain %20 %155 
                                         f32 %693 = OpLoad %692 
                                        bool %694 = OpFOrdLessThan %74 %693 
                                                      OpStore %691 %694 
                                        bool %697 = OpLoad %691 
                                                      OpSelectionMerge %699 None 
                                                      OpBranchConditional %697 %698 %700 
                                             %698 = OpLabel 
                                                      OpStore %696 %110 
                                                      OpBranch %699 
                                             %700 = OpLabel 
                                                      OpStore %696 %74 
                                                      OpBranch %699 
                                             %699 = OpLabel 
                                         f32 %701 = OpLoad %696 
                                Private f32* %702 = OpAccessChain %695 %28 
                                                      OpStore %702 %701 
                                       f32_4 %703 = OpLoad %20 
                                       f32_2 %704 = OpVectorShuffle %703 %703 0 1 
                                       f32_4 %705 = OpLoad %20 
                                       f32_2 %706 = OpVectorShuffle %705 %705 3 3 
                                       f32_2 %707 = OpFDiv %704 %706 
                                       f32_3 %708 = OpLoad %139 
                                       f32_3 %709 = OpVectorShuffle %708 %707 3 4 2 
                                                      OpStore %139 %709 
                                       f32_3 %710 = OpLoad %139 
                                       f32_2 %711 = OpVectorShuffle %710 %710 0 1 
                                       f32_2 %713 = OpFAdd %711 %712 
                                       f32_3 %714 = OpLoad %139 
                                       f32_3 %715 = OpVectorShuffle %714 %713 3 4 2 
                                                      OpStore %139 %715 
                  read_only Texture2DSampled %717 = OpLoad %716 
                                       f32_3 %718 = OpLoad %139 
                                       f32_2 %719 = OpVectorShuffle %718 %718 0 1 
                                       f32_4 %720 = OpImageSampleImplicitLod %717 %719 
                                         f32 %721 = OpCompositeExtract %720 3 
                                                      OpStore %97 %721 
                                         f32 %722 = OpLoad %97 
                                Private f32* %723 = OpAccessChain %695 %28 
                                         f32 %724 = OpLoad %723 
                                         f32 %725 = OpFMul %722 %724 
                                Private f32* %726 = OpAccessChain %695 %28 
                                                      OpStore %726 %725 
                                       f32_4 %727 = OpLoad %20 
                                       f32_3 %728 = OpVectorShuffle %727 %727 0 1 2 
                                       f32_4 %729 = OpLoad %20 
                                       f32_3 %730 = OpVectorShuffle %729 %729 0 1 2 
                                         f32 %731 = OpDot %728 %730 
                                Private f32* %732 = OpAccessChain %20 %28 
                                                      OpStore %732 %731 
                  read_only Texture2DSampled %734 = OpLoad %733 
                                       f32_4 %735 = OpLoad %20 
                                       f32_2 %736 = OpVectorShuffle %735 %735 0 0 
                                       f32_4 %737 = OpImageSampleImplicitLod %734 %736 
                                         f32 %738 = OpCompositeExtract %737 3 
                                Private f32* %739 = OpAccessChain %20 %28 
                                                      OpStore %739 %738 
                                Private f32* %740 = OpAccessChain %20 %28 
                                         f32 %741 = OpLoad %740 
                                Private f32* %742 = OpAccessChain %695 %28 
                                         f32 %743 = OpLoad %742 
                                         f32 %744 = OpFMul %741 %743 
                                Private f32* %745 = OpAccessChain %695 %28 
                                                      OpStore %745 %744 
                                         f32 %746 = OpLoad %499 
                                Private f32* %747 = OpAccessChain %695 %28 
                                         f32 %748 = OpLoad %747 
                                         f32 %749 = OpFMul %746 %748 
                                                      OpStore %499 %749 
                                       f32_3 %750 = OpLoad %529 
                              Uniform f32_4* %752 = OpAccessChain %39 %751 
                                       f32_4 %753 = OpLoad %752 
                                       f32_3 %754 = OpVectorShuffle %753 %753 0 1 2 
                                       f32_3 %755 = OpFMul %750 %754 
                                                      OpStore %695 %755 
                                         f32 %758 = OpLoad %499 
                                       f32_3 %759 = OpCompositeConstruct %758 %758 %758 
                                       f32_3 %760 = OpLoad %695 
                                       f32_3 %761 = OpFMul %759 %760 
                                       f32_4 %762 = OpLoad %757 
                                       f32_4 %763 = OpVectorShuffle %762 %761 4 5 6 3 
                                                      OpStore %757 %763 
                                Private f32* %764 = OpAccessChain %9 %198 
                                         f32 %765 = OpLoad %764 
                                 Output f32* %767 = OpAccessChain %757 %198 
                                                      OpStore %767 %765 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    vs_TEXCOORD3.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _OverrideColor;
uniform 	float _StepValue;
uniform 	float _SkyBoost;
uniform 	float _SkyPower;
uniform 	float _CurvePower;
uniform 	float _CurveColorFactor;
uniform 	float _CurveFreq;
uniform 	float _DitherCohesionFactor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
float u_xlat13;
float u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat19;
float u_xlat16_19;
bool u_xlatb19;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = log2(vs_TEXCOORD3.y);
    u_xlat1.x = u_xlat1.x * _SkyPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat7.x = vs_TEXCOORD3.y * vs_TEXCOORD3.y;
    u_xlat1.x = u_xlat7.x * _SkyBoost + u_xlat1.x;
    u_xlatb7 = u_xlat1.x<0.0;
    u_xlat1.x = (u_xlatb7) ? -1.0 : u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * _OverrideColor.xyz;
    u_xlat19 = vs_TEXCOORD3.x * _CurveFreq;
    u_xlat19 = u_xlat19 * 3.1400001;
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 + 1.0;
    u_xlat2.x = _CurveColorFactor + _CurveColorFactor;
    u_xlat19 = u_xlat19 / u_xlat2.x;
    u_xlat19 = u_xlat19 + -1.0;
    u_xlat19 = _CurvePower * u_xlat19 + 1.0;
    u_xlat2.xyw = vec3(u_xlat19) * u_xlat1.yzx;
    u_xlat3.xyz = vs_TEXCOORD2.xyy * vec3(0.00999999978, 0.00999999978, 0.0799999982);
    u_xlat4.y = (-_Time.x) * 0.333333343 + u_xlat3.z;
    u_xlat4.x = vs_TEXCOORD2.x * 0.0799999982;
    u_xlat10_4 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat16_1 = log2(u_xlat10_4.x);
    u_xlat16_1 = u_xlat16_1 * 1.5;
    u_xlat16_1 = exp2(u_xlat16_1);
    u_xlatb15 = u_xlat2.x>=u_xlat2.y;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat2.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.yz * vec2(u_xlat19) + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat15) * u_xlat5 + u_xlat4;
    u_xlatb7 = u_xlat2.w>=u_xlat4.x;
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat2.wyx;
    u_xlat4 = (-u_xlat2) + u_xlat4;
    u_xlat2 = u_xlat7.xxxx * u_xlat4 + u_xlat2;
    u_xlat7.x = min(u_xlat2.y, u_xlat2.w);
    u_xlat7.x = (-u_xlat7.x) + u_xlat2.x;
    u_xlat13 = (-u_xlat2.y) + u_xlat2.w;
    u_xlat19 = u_xlat7.x * 6.0 + 1.00000001e-010;
    u_xlat13 = u_xlat13 / u_xlat19;
    u_xlat13 = u_xlat13 + u_xlat2.z;
    u_xlat19 = u_xlat2.x + 1.00000001e-010;
    u_xlat7.x = u_xlat7.x / u_xlat19;
    u_xlat1.x = (-u_xlat16_1) * 2.0 + u_xlat2.x;
    u_xlat19 = dot(u_xlat3.xy, vec2(12.9898005, 78.2330017));
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 * 43758.5469;
    u_xlat19 = fract(u_xlat19);
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat2.x = u_xlat3.y + u_xlat3.x;
    u_xlat8 = u_xlat2.x + (-_Time.z);
    u_xlat8 = sin(u_xlat8);
    u_xlat8 = u_xlat8 + 1.0;
    u_xlat8 = u_xlat8 * 0.5;
    u_xlat14 = u_xlat2.x + _Time.z;
    u_xlat14 = sin(u_xlat14);
    u_xlat14 = u_xlat14 * 0.099999994 + 0.150000006;
    u_xlat8 = u_xlat8 * u_xlat14 + 0.349999994;
    u_xlat2.x = u_xlat2.x * 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlatb2 = 0.25<u_xlat2.x;
    u_xlat1.x = u_xlat1.x / _StepValue;
    u_xlat14 = (-u_xlat8) + u_xlat1.x;
    u_xlat14 = (-u_xlat19) * _DitherCohesionFactor + u_xlat14;
    u_xlat14 = ceil(u_xlat14);
    u_xlat14 = u_xlat14 * _StepValue;
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat19 * _DitherCohesionFactor + u_xlat1.x;
    u_xlat1.x = roundEven(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _StepValue;
    u_xlat1.x = (u_xlatb2) ? u_xlat14 : u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat2.xyz = abs(vec3(u_xlat13)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat2.xyz = fract(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat2.xyz = abs(u_xlat2.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_19 = u_xlat10_0.x + -0.00999999978;
    u_xlat16_19 = u_xlat16_19 * 1000.0;
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(0.5, 0.5, 0.5) + vec3(0.0299999993, 0.0, 0.0700000003);
    u_xlat1.xyz = vec3(u_xlat16_19) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb19){
        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat19 = u_xlat2.y * 0.25 + 0.75;
        u_xlat8 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat19, u_xlat8);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat19 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat2.xx);
    u_xlat10_3 = texture(_LightTexture0, u_xlat1.xyz);
    u_xlat16_1 = u_xlat10_2.w * u_xlat10_3.w;
    u_xlat1.x = u_xlat19 * u_xlat16_1;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 206
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %145 %151 %152 %164 %194 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %194 Location 194 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_2 %140 = OpConstantComposite %139 %139 
                                             %144 = OpTypePointer Output %95 
                               Output f32_2* %145 = OpVariable Output 
                                         f32 %148 = OpConstant 3.674022E-40 
                                       f32_2 %149 = OpConstantComposite %148 %148 
                               Output f32_2* %151 = OpVariable Output 
                                Input f32_4* %152 = OpVariable Input 
                                             %163 = OpTypePointer Input %50 
                                Input f32_3* %164 = OpVariable Input 
                                         u32 %170 = OpConstant 0 
                                             %171 = OpTypePointer Private %6 
                                         u32 %184 = OpConstant 2 
                                Private f32* %186 = OpVariable Private 
                               Output f32_3* %194 = OpVariable Output 
                                             %200 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %96 = OpLoad %44 
                                        f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                               Uniform f32_4* %98 = OpAccessChain %21 %36 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %97 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
                                                      OpStore %9 %103 
                              Uniform f32_4* %104 = OpAccessChain %21 %36 %23 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %107 = OpLoad %44 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 0 
                                       f32_2 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %9 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %36 %36 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpLoad %44 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 2 
                                       f32_2 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %9 %125 
                              Uniform f32_4* %126 = OpAccessChain %21 %36 %46 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                                       f32_4 %129 = OpLoad %44 
                                       f32_2 %130 = OpVectorShuffle %129 %129 3 3 
                                       f32_2 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_2 %134 = OpFAdd %131 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 3 
                                                      OpStore %9 %136 
                                       f32_4 %137 = OpLoad %9 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %9 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %9 %143 
                                       f32_4 %146 = OpLoad %9 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_2 %150 = OpFMul %147 %149 
                                                      OpStore %145 %150 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                              Uniform f32_4* %155 = OpAccessChain %21 %46 
                                       f32_4 %156 = OpLoad %155 
                                       f32_2 %157 = OpVectorShuffle %156 %156 0 1 
                                       f32_2 %158 = OpFMul %154 %157 
                              Uniform f32_4* %159 = OpAccessChain %21 %46 
                                       f32_4 %160 = OpLoad %159 
                                       f32_2 %161 = OpVectorShuffle %160 %160 2 3 
                                       f32_2 %162 = OpFAdd %158 %161 
                                                      OpStore %151 %162 
                                       f32_3 %165 = OpLoad %164 
                              Uniform f32_4* %166 = OpAccessChain %21 %24 %23 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                Private f32* %172 = OpAccessChain %9 %170 
                                                      OpStore %172 %169 
                                       f32_3 %173 = OpLoad %164 
                              Uniform f32_4* %174 = OpAccessChain %21 %24 %24 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %173 %176 
                                Private f32* %178 = OpAccessChain %9 %81 
                                                      OpStore %178 %177 
                                       f32_3 %179 = OpLoad %164 
                              Uniform f32_4* %180 = OpAccessChain %21 %24 %36 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                         f32 %183 = OpDot %179 %182 
                                Private f32* %185 = OpAccessChain %9 %184 
                                                      OpStore %185 %183 
                                       f32_4 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %188 %190 
                                                      OpStore %186 %191 
                                         f32 %192 = OpLoad %186 
                                         f32 %193 = OpExtInst %1 32 %192 
                                                      OpStore %186 %193 
                                         f32 %195 = OpLoad %186 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %196 %198 
                                                      OpStore %194 %199 
                                 Output f32* %201 = OpAccessChain %85 %23 %81 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFNegate %202 
                                 Output f32* %204 = OpAccessChain %85 %23 %81 
                                                      OpStore %204 %203 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 739
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %23 %139 %727 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 RelaxedPrecision 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpMemberDecorate %38 6 RelaxedPrecision 
                                                      OpMemberDecorate %38 6 Offset 38 
                                                      OpMemberDecorate %38 7 Offset 38 
                                                      OpMemberDecorate %38 8 Offset 38 
                                                      OpMemberDecorate %38 9 Offset 38 
                                                      OpMemberDecorate %38 10 Offset 38 
                                                      OpMemberDecorate %38 11 Offset 38 
                                                      OpMemberDecorate %38 12 Offset 38 
                                                      OpMemberDecorate %38 13 Offset 38 
                                                      OpMemberDecorate %38 14 Offset 38 
                                                      OpMemberDecorate %38 15 Offset 38 
                                                      OpMemberDecorate %38 16 RelaxedPrecision 
                                                      OpMemberDecorate %38 16 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %163 DescriptorSet 163 
                                                      OpDecorate %163 Binding 163 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %580 SpecId 580 
                                                      OpDecorate %670 DescriptorSet 670 
                                                      OpDecorate %670 Binding 670 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %685 RelaxedPrecision 
                                                      OpDecorate %688 RelaxedPrecision 
                                                      OpDecorate %689 RelaxedPrecision 
                                                      OpDecorate %694 DescriptorSet 694 
                                                      OpDecorate %694 Binding 694 
                                                      OpDecorate %703 DescriptorSet 703 
                                                      OpDecorate %703 Binding 703 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %723 RelaxedPrecision 
                                                      OpDecorate %724 RelaxedPrecision 
                                                      OpDecorate %727 RelaxedPrecision 
                                                      OpDecorate %727 Location 727 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %735 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                                 Input f32_2* %23 = OpVariable Input 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                          u32 %35 = OpConstant 4 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeArray %7 %35 
                                              %38 = OpTypeStruct %7 %7 %7 %36 %20 %20 %7 %37 %7 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 11 
                                              %43 = OpTypePointer Uniform %6 
                               Private f32_3* %52 = OpVariable Private 
                                          i32 %61 = OpConstant 10 
                                              %69 = OpTypeBool 
                                              %70 = OpTypePointer Private %69 
                                Private bool* %71 = OpVariable Private 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Function %6 
                                          f32 %81 = OpConstant 3.674022E-40 
                                          i32 %89 = OpConstant 8 
                                              %90 = OpTypePointer Uniform %7 
                                 Private f32* %95 = OpVariable Private 
                                          i32 %98 = OpConstant 14 
                                         f32 %103 = OpConstant 3.674022E-40 
                                         f32 %108 = OpConstant 3.674022E-40 
                              Private f32_4* %110 = OpVariable Private 
                                         i32 %111 = OpConstant 13 
                                         i32 %124 = OpConstant 12 
                              Private f32_3* %137 = OpVariable Private 
                                             %138 = OpTypePointer Input %20 
                                Input f32_3* %139 = OpVariable Input 
                                         f32 %142 = OpConstant 3.674022E-40 
                                         f32 %143 = OpConstant 3.674022E-40 
                                       f32_3 %144 = OpConstantComposite %142 %142 %143 
                              Private f32_4* %146 = OpVariable Private 
                                         i32 %147 = OpConstant 0 
                                         f32 %151 = OpConstant 3.674022E-40 
                                         u32 %153 = OpConstant 2 
                                Private f32* %162 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %163 = OpVariable UniformConstant 
                                Private f32* %169 = OpVariable Private 
                                         f32 %173 = OpConstant 3.674022E-40 
                               Private bool* %177 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                                         f32 %195 = OpConstant 3.674022E-40 
                                         u32 %196 = OpConstant 3 
                              Private f32_4* %198 = OpVariable Private 
                                Private f32* %261 = OpVariable Private 
                                         f32 %270 = OpConstant 3.674022E-40 
                                         f32 %272 = OpConstant 3.674022E-40 
                                         f32 %291 = OpConstant 3.674022E-40 
                                         f32 %299 = OpConstant 3.674022E-40 
                                         f32 %300 = OpConstant 3.674022E-40 
                                       f32_2 %301 = OpConstantComposite %299 %300 
                                         f32 %306 = OpConstant 3.674022E-40 
                                         f32 %311 = OpConstant 3.674022E-40 
                                Private f32* %319 = OpVariable Private 
                                         f32 %331 = OpConstant 3.674022E-40 
                                Private f32* %333 = OpVariable Private 
                                         f32 %342 = OpConstant 3.674022E-40 
                                         f32 %344 = OpConstant 3.674022E-40 
                                         f32 %349 = OpConstant 3.674022E-40 
                               Private bool* %359 = OpVariable Private 
                                         f32 %360 = OpConstant 3.674022E-40 
                                         i32 %366 = OpConstant 9 
                                         i32 %378 = OpConstant 15 
                                       f32_3 %430 = OpConstantComposite %108 %195 %151 
                                       f32_3 %441 = OpConstantComposite %270 %270 %270 
                                         f32 %443 = OpConstant 3.674022E-40 
                                       f32_3 %444 = OpConstantComposite %443 %443 %443 
                                       f32_3 %451 = OpConstantComposite %81 %81 %81 
                                       f32_3 %472 = OpConstantComposite %108 %108 %108 
                                       f32_3 %479 = OpConstantComposite %331 %331 %331 
                              Private f32_3* %483 = OpVariable Private 
                                         f32 %486 = OpConstant 3.674022E-40 
                                         f32 %491 = OpConstant 3.674022E-40 
                                         f32 %501 = OpConstant 3.674022E-40 
                                         f32 %502 = OpConstant 3.674022E-40 
                                       f32_3 %503 = OpConstantComposite %501 %74 %502 
                              Private f32_3* %512 = OpVariable Private 
                                       f32_3 %515 = OpConstantComposite %291 %291 %291 
                                         i32 %521 = OpConstant 16 
                               Private bool* %527 = OpVariable Private 
                                         i32 %532 = OpConstant 1 
                                         i32 %534 = OpConstant -1 
                                         i32 %542 = OpConstant 7 
                                         i32 %555 = OpConstant 2 
                                         i32 %565 = OpConstant 3 
                               Private bool* %570 = OpVariable Private 
                                        bool %574 = OpConstantFalse 
                                        bool %580 = OpSpecConstantFalse 
                                             %624 = OpTypePointer Function %20 
                                         i32 %638 = OpConstant 5 
                                             %639 = OpTypePointer Uniform %20 
                                         i32 %648 = OpConstant 4 
                                         f32 %657 = OpConstant 3.674022E-40 
                                             %667 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %668 = OpTypeSampledImage %667 
                                             %669 = OpTypePointer UniformConstant %668 
 UniformConstant read_only Texture3DSampled* %670 = OpVariable UniformConstant 
                              Private f32_4* %675 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %694 = OpVariable UniformConstant 
                                             %700 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %701 = OpTypeSampledImage %700 
                                             %702 = OpTypePointer UniformConstant %701 
UniformConstant read_only TextureCubeSampled* %703 = OpVariable UniformConstant 
                                         i32 %721 = OpConstant 6 
                                             %726 = OpTypePointer Output %7 
                               Output f32_4* %727 = OpVariable Output 
                                             %736 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %77 = OpVariable Function 
                               Function f32* %184 = OpVariable Function 
                               Function f32* %223 = OpVariable Function 
                               Function f32* %413 = OpVariable Function 
                             Function f32_3* %625 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                   Input f32* %27 = OpAccessChain %23 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpExtInst %1 30 %28 
                                 Private f32* %32 = OpAccessChain %22 %30 
                                                      OpStore %32 %29 
                                 Private f32* %33 = OpAccessChain %22 %30 
                                          f32 %34 = OpLoad %33 
                                 Uniform f32* %44 = OpAccessChain %40 %42 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %34 %45 
                                 Private f32* %47 = OpAccessChain %22 %30 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %22 %30 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpExtInst %1 29 %49 
                                 Private f32* %51 = OpAccessChain %22 %30 
                                                      OpStore %51 %50 
                                   Input f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                   Input f32* %55 = OpAccessChain %23 %25 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFMul %54 %56 
                                 Private f32* %58 = OpAccessChain %52 %30 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %52 %30 
                                          f32 %60 = OpLoad %59 
                                 Uniform f32* %62 = OpAccessChain %40 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFMul %60 %63 
                                 Private f32* %65 = OpAccessChain %22 %30 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFAdd %64 %66 
                                 Private f32* %68 = OpAccessChain %22 %30 
                                                      OpStore %68 %67 
                                 Private f32* %72 = OpAccessChain %22 %30 
                                          f32 %73 = OpLoad %72 
                                         bool %75 = OpFOrdLessThan %73 %74 
                                                      OpStore %71 %75 
                                         bool %78 = OpLoad %71 
                                                      OpSelectionMerge %80 None 
                                                      OpBranchConditional %78 %79 %82 
                                              %79 = OpLabel 
                                                      OpStore %77 %81 
                                                      OpBranch %80 
                                              %82 = OpLabel 
                                 Private f32* %83 = OpAccessChain %22 %30 
                                          f32 %84 = OpLoad %83 
                                                      OpStore %77 %84 
                                                      OpBranch %80 
                                              %80 = OpLabel 
                                          f32 %85 = OpLoad %77 
                                 Private f32* %86 = OpAccessChain %22 %30 
                                                      OpStore %86 %85 
                                        f32_3 %87 = OpLoad %22 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 0 0 
                               Uniform f32_4* %91 = OpAccessChain %40 %89 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFMul %88 %93 
                                                      OpStore %22 %94 
                                   Input f32* %96 = OpAccessChain %23 %30 
                                          f32 %97 = OpLoad %96 
                                 Uniform f32* %99 = OpAccessChain %40 %98 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFMul %97 %100 
                                                      OpStore %95 %101 
                                         f32 %102 = OpLoad %95 
                                         f32 %104 = OpFMul %102 %103 
                                                      OpStore %95 %104 
                                         f32 %105 = OpLoad %95 
                                         f32 %106 = OpExtInst %1 13 %105 
                                                      OpStore %95 %106 
                                         f32 %107 = OpLoad %95 
                                         f32 %109 = OpFAdd %107 %108 
                                                      OpStore %95 %109 
                                Uniform f32* %112 = OpAccessChain %40 %111 
                                         f32 %113 = OpLoad %112 
                                Uniform f32* %114 = OpAccessChain %40 %111 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpFAdd %113 %115 
                                Private f32* %117 = OpAccessChain %110 %30 
                                                      OpStore %117 %116 
                                         f32 %118 = OpLoad %95 
                                Private f32* %119 = OpAccessChain %110 %30 
                                         f32 %120 = OpLoad %119 
                                         f32 %121 = OpFDiv %118 %120 
                                                      OpStore %95 %121 
                                         f32 %122 = OpLoad %95 
                                         f32 %123 = OpFAdd %122 %81 
                                                      OpStore %95 %123 
                                Uniform f32* %125 = OpAccessChain %40 %124 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpLoad %95 
                                         f32 %128 = OpFMul %126 %127 
                                         f32 %129 = OpFAdd %128 %108 
                                                      OpStore %95 %129 
                                         f32 %130 = OpLoad %95 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_3 %132 = OpLoad %22 
                                       f32_3 %133 = OpVectorShuffle %132 %132 1 2 0 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %110 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 6 
                                                      OpStore %110 %136 
                                       f32_3 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 1 
                                       f32_3 %145 = OpFMul %141 %144 
                                                      OpStore %137 %145 
                                Uniform f32* %148 = OpAccessChain %40 %147 %30 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFNegate %149 
                                         f32 %152 = OpFMul %150 %151 
                                Private f32* %154 = OpAccessChain %137 %153 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFAdd %152 %155 
                                Private f32* %157 = OpAccessChain %146 %25 
                                                      OpStore %157 %156 
                                  Input f32* %158 = OpAccessChain %139 %30 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %159 %143 
                                Private f32* %161 = OpAccessChain %146 %30 
                                                      OpStore %161 %160 
                  read_only Texture2DSampled %164 = OpLoad %163 
                                       f32_4 %165 = OpLoad %146 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_4 %167 = OpImageSampleImplicitLod %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                                      OpStore %162 %168 
                                         f32 %170 = OpLoad %162 
                                         f32 %171 = OpExtInst %1 30 %170 
                                                      OpStore %169 %171 
                                         f32 %172 = OpLoad %169 
                                         f32 %174 = OpFMul %172 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 29 %175 
                                                      OpStore %169 %176 
                                Private f32* %178 = OpAccessChain %110 %30 
                                         f32 %179 = OpLoad %178 
                                Private f32* %180 = OpAccessChain %110 %25 
                                         f32 %181 = OpLoad %180 
                                        bool %182 = OpFOrdGreaterThanEqual %179 %181 
                                                      OpStore %177 %182 
                                        bool %185 = OpLoad %177 
                                                      OpSelectionMerge %187 None 
                                                      OpBranchConditional %185 %186 %188 
                                             %186 = OpLabel 
                                                      OpStore %184 %108 
                                                      OpBranch %187 
                                             %188 = OpLabel 
                                                      OpStore %184 %74 
                                                      OpBranch %187 
                                             %187 = OpLabel 
                                         f32 %189 = OpLoad %184 
                                                      OpStore %183 %189 
                                       f32_4 %190 = OpLoad %110 
                                       f32_2 %191 = OpVectorShuffle %190 %190 1 0 
                                       f32_4 %192 = OpLoad %146 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 2 3 
                                                      OpStore %146 %193 
                                Private f32* %194 = OpAccessChain %146 %153 
                                                      OpStore %194 %81 
                                Private f32* %197 = OpAccessChain %146 %196 
                                                      OpStore %197 %195 
                                       f32_3 %199 = OpLoad %22 
                                       f32_2 %200 = OpVectorShuffle %199 %199 1 2 
                                         f32 %201 = OpLoad %95 
                                       f32_2 %202 = OpCompositeConstruct %201 %201 
                                       f32_2 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %146 
                                       f32_2 %205 = OpVectorShuffle %204 %204 0 1 
                                       f32_2 %206 = OpFNegate %205 
                                       f32_2 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %198 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 2 3 
                                                      OpStore %198 %209 
                                Private f32* %210 = OpAccessChain %198 %153 
                                                      OpStore %210 %108 
                                Private f32* %211 = OpAccessChain %198 %196 
                                                      OpStore %211 %81 
                                         f32 %212 = OpLoad %183 
                                       f32_4 %213 = OpCompositeConstruct %212 %212 %212 %212 
                                       f32_4 %214 = OpLoad %198 
                                       f32_4 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %146 
                                       f32_4 %217 = OpFAdd %215 %216 
                                                      OpStore %146 %217 
                                Private f32* %218 = OpAccessChain %110 %196 
                                         f32 %219 = OpLoad %218 
                                Private f32* %220 = OpAccessChain %146 %30 
                                         f32 %221 = OpLoad %220 
                                        bool %222 = OpFOrdGreaterThanEqual %219 %221 
                                                      OpStore %71 %222 
                                        bool %224 = OpLoad %71 
                                                      OpSelectionMerge %226 None 
                                                      OpBranchConditional %224 %225 %227 
                                             %225 = OpLabel 
                                                      OpStore %223 %108 
                                                      OpBranch %226 
                                             %227 = OpLabel 
                                                      OpStore %223 %74 
                                                      OpBranch %226 
                                             %226 = OpLabel 
                                         f32 %228 = OpLoad %223 
                                Private f32* %229 = OpAccessChain %52 %30 
                                                      OpStore %229 %228 
                                       f32_4 %230 = OpLoad %146 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 3 
                                       f32_4 %232 = OpLoad %110 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %110 %233 
                                       f32_4 %234 = OpLoad %110 
                                       f32_3 %235 = OpVectorShuffle %234 %234 3 1 0 
                                       f32_4 %236 = OpLoad %146 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 2 6 
                                                      OpStore %146 %237 
                                       f32_4 %238 = OpLoad %110 
                                       f32_4 %239 = OpFNegate %238 
                                       f32_4 %240 = OpLoad %146 
                                       f32_4 %241 = OpFAdd %239 %240 
                                                      OpStore %146 %241 
                                       f32_3 %242 = OpLoad %52 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpLoad %146 
                                       f32_4 %245 = OpFMul %243 %244 
                                       f32_4 %246 = OpLoad %110 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %110 %247 
                                Private f32* %248 = OpAccessChain %110 %25 
                                         f32 %249 = OpLoad %248 
                                Private f32* %250 = OpAccessChain %110 %196 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpExtInst %1 37 %249 %251 
                                Private f32* %253 = OpAccessChain %52 %30 
                                                      OpStore %253 %252 
                                Private f32* %254 = OpAccessChain %52 %30 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFNegate %255 
                                Private f32* %257 = OpAccessChain %110 %30 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %52 %30 
                                                      OpStore %260 %259 
                                Private f32* %262 = OpAccessChain %110 %25 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpFNegate %263 
                                Private f32* %265 = OpAccessChain %110 %196 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpFAdd %264 %266 
                                                      OpStore %261 %267 
                                Private f32* %268 = OpAccessChain %52 %30 
                                         f32 %269 = OpLoad %268 
                                         f32 %271 = OpFMul %269 %270 
                                         f32 %273 = OpFAdd %271 %272 
                                                      OpStore %95 %273 
                                         f32 %274 = OpLoad %261 
                                         f32 %275 = OpLoad %95 
                                         f32 %276 = OpFDiv %274 %275 
                                                      OpStore %261 %276 
                                         f32 %277 = OpLoad %261 
                                Private f32* %278 = OpAccessChain %110 %153 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFAdd %277 %279 
                                                      OpStore %261 %280 
                                Private f32* %281 = OpAccessChain %110 %30 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpFAdd %282 %272 
                                                      OpStore %95 %283 
                                Private f32* %284 = OpAccessChain %52 %30 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpLoad %95 
                                         f32 %287 = OpFDiv %285 %286 
                                Private f32* %288 = OpAccessChain %52 %30 
                                                      OpStore %288 %287 
                                         f32 %289 = OpLoad %169 
                                         f32 %290 = OpFNegate %289 
                                         f32 %292 = OpFMul %290 %291 
                                Private f32* %293 = OpAccessChain %110 %30 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFAdd %292 %294 
                                Private f32* %296 = OpAccessChain %22 %30 
                                                      OpStore %296 %295 
                                       f32_3 %297 = OpLoad %137 
                                       f32_2 %298 = OpVectorShuffle %297 %297 0 1 
                                         f32 %302 = OpDot %298 %301 
                                                      OpStore %95 %302 
                                         f32 %303 = OpLoad %95 
                                         f32 %304 = OpExtInst %1 13 %303 
                                                      OpStore %95 %304 
                                         f32 %305 = OpLoad %95 
                                         f32 %307 = OpFMul %305 %306 
                                                      OpStore %95 %307 
                                         f32 %308 = OpLoad %95 
                                         f32 %309 = OpExtInst %1 10 %308 
                                                      OpStore %95 %309 
                                         f32 %310 = OpLoad %95 
                                         f32 %312 = OpFAdd %310 %311 
                                                      OpStore %95 %312 
                                Private f32* %313 = OpAccessChain %137 %25 
                                         f32 %314 = OpLoad %313 
                                Private f32* %315 = OpAccessChain %137 %30 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpFAdd %314 %316 
                                Private f32* %318 = OpAccessChain %110 %30 
                                                      OpStore %318 %317 
                                Private f32* %320 = OpAccessChain %110 %30 
                                         f32 %321 = OpLoad %320 
                                Uniform f32* %322 = OpAccessChain %40 %147 %153 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFNegate %323 
                                         f32 %325 = OpFAdd %321 %324 
                                                      OpStore %319 %325 
                                         f32 %326 = OpLoad %319 
                                         f32 %327 = OpExtInst %1 13 %326 
                                                      OpStore %319 %327 
                                         f32 %328 = OpLoad %319 
                                         f32 %329 = OpFAdd %328 %108 
                                                      OpStore %319 %329 
                                         f32 %330 = OpLoad %319 
                                         f32 %332 = OpFMul %330 %331 
                                                      OpStore %319 %332 
                                Private f32* %334 = OpAccessChain %110 %30 
                                         f32 %335 = OpLoad %334 
                                Uniform f32* %336 = OpAccessChain %40 %147 %153 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpFAdd %335 %337 
                                                      OpStore %333 %338 
                                         f32 %339 = OpLoad %333 
                                         f32 %340 = OpExtInst %1 13 %339 
                                                      OpStore %333 %340 
                                         f32 %341 = OpLoad %333 
                                         f32 %343 = OpFMul %341 %342 
                                         f32 %345 = OpFAdd %343 %344 
                                                      OpStore %333 %345 
                                         f32 %346 = OpLoad %319 
                                         f32 %347 = OpLoad %333 
                                         f32 %348 = OpFMul %346 %347 
                                         f32 %350 = OpFAdd %348 %349 
                                                      OpStore %319 %350 
                                Private f32* %351 = OpAccessChain %110 %30 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpFMul %352 %331 
                                Private f32* %354 = OpAccessChain %110 %30 
                                                      OpStore %354 %353 
                                Private f32* %355 = OpAccessChain %110 %30 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpExtInst %1 10 %356 
                                Private f32* %358 = OpAccessChain %110 %30 
                                                      OpStore %358 %357 
                                Private f32* %361 = OpAccessChain %110 %30 
                                         f32 %362 = OpLoad %361 
                                        bool %363 = OpFOrdLessThan %360 %362 
                                                      OpStore %359 %363 
                                Private f32* %364 = OpAccessChain %22 %30 
                                         f32 %365 = OpLoad %364 
                                Uniform f32* %367 = OpAccessChain %40 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFDiv %365 %368 
                                Private f32* %370 = OpAccessChain %22 %30 
                                                      OpStore %370 %369 
                                         f32 %371 = OpLoad %319 
                                         f32 %372 = OpFNegate %371 
                                Private f32* %373 = OpAccessChain %22 %30 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFAdd %372 %374 
                                                      OpStore %333 %375 
                                         f32 %376 = OpLoad %95 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %379 = OpAccessChain %40 %378 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFMul %377 %380 
                                         f32 %382 = OpLoad %333 
                                         f32 %383 = OpFAdd %381 %382 
                                                      OpStore %333 %383 
                                         f32 %384 = OpLoad %333 
                                         f32 %385 = OpExtInst %1 9 %384 
                                                      OpStore %333 %385 
                                         f32 %386 = OpLoad %333 
                                Uniform f32* %387 = OpAccessChain %40 %366 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFMul %386 %388 
                                                      OpStore %333 %389 
                                         f32 %390 = OpLoad %319 
                                Private f32* %391 = OpAccessChain %22 %30 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFAdd %390 %392 
                                Private f32* %394 = OpAccessChain %22 %30 
                                                      OpStore %394 %393 
                                         f32 %395 = OpLoad %95 
                                Uniform f32* %396 = OpAccessChain %40 %378 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFMul %395 %397 
                                Private f32* %399 = OpAccessChain %22 %30 
                                         f32 %400 = OpLoad %399 
                                         f32 %401 = OpFAdd %398 %400 
                                Private f32* %402 = OpAccessChain %22 %30 
                                                      OpStore %402 %401 
                                Private f32* %403 = OpAccessChain %22 %30 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpExtInst %1 2 %404 
                                Private f32* %406 = OpAccessChain %22 %30 
                                                      OpStore %406 %405 
                                Private f32* %407 = OpAccessChain %22 %30 
                                         f32 %408 = OpLoad %407 
                                Uniform f32* %409 = OpAccessChain %40 %366 
                                         f32 %410 = OpLoad %409 
                                         f32 %411 = OpFMul %408 %410 
                                Private f32* %412 = OpAccessChain %22 %30 
                                                      OpStore %412 %411 
                                        bool %414 = OpLoad %359 
                                                      OpSelectionMerge %416 None 
                                                      OpBranchConditional %414 %415 %418 
                                             %415 = OpLabel 
                                         f32 %417 = OpLoad %333 
                                                      OpStore %413 %417 
                                                      OpBranch %416 
                                             %418 = OpLabel 
                                Private f32* %419 = OpAccessChain %22 %30 
                                         f32 %420 = OpLoad %419 
                                                      OpStore %413 %420 
                                                      OpBranch %416 
                                             %416 = OpLabel 
                                         f32 %421 = OpLoad %413 
                                Private f32* %422 = OpAccessChain %22 %30 
                                                      OpStore %422 %421 
                                Private f32* %423 = OpAccessChain %22 %30 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpExtInst %1 40 %424 %74 
                                Private f32* %426 = OpAccessChain %22 %30 
                                                      OpStore %426 %425 
                                         f32 %427 = OpLoad %261 
                                       f32_3 %428 = OpCompositeConstruct %427 %427 %427 
                                       f32_3 %429 = OpExtInst %1 4 %428 
                                       f32_3 %431 = OpFAdd %429 %430 
                                       f32_4 %432 = OpLoad %110 
                                       f32_4 %433 = OpVectorShuffle %432 %431 4 5 6 3 
                                                      OpStore %110 %433 
                                       f32_4 %434 = OpLoad %110 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_3 %436 = OpExtInst %1 10 %435 
                                       f32_4 %437 = OpLoad %110 
                                       f32_4 %438 = OpVectorShuffle %437 %436 4 5 6 3 
                                                      OpStore %110 %438 
                                       f32_4 %439 = OpLoad %110 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                       f32_3 %442 = OpFMul %440 %441 
                                       f32_3 %445 = OpFAdd %442 %444 
                                       f32_4 %446 = OpLoad %110 
                                       f32_4 %447 = OpVectorShuffle %446 %445 4 5 6 3 
                                                      OpStore %110 %447 
                                       f32_4 %448 = OpLoad %110 
                                       f32_3 %449 = OpVectorShuffle %448 %448 0 1 2 
                                       f32_3 %450 = OpExtInst %1 4 %449 
                                       f32_3 %452 = OpFAdd %450 %451 
                                       f32_4 %453 = OpLoad %110 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 6 3 
                                                      OpStore %110 %454 
                                       f32_4 %455 = OpLoad %110 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpCompositeConstruct %74 %74 %74 
                                       f32_3 %458 = OpCompositeConstruct %108 %108 %108 
                                       f32_3 %459 = OpExtInst %1 43 %456 %457 %458 
                                       f32_4 %460 = OpLoad %110 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 6 3 
                                                      OpStore %110 %461 
                                       f32_4 %462 = OpLoad %110 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                       f32_3 %464 = OpFAdd %463 %451 
                                       f32_4 %465 = OpLoad %110 
                                       f32_4 %466 = OpVectorShuffle %465 %464 4 5 6 3 
                                                      OpStore %110 %466 
                                       f32_3 %467 = OpLoad %52 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 0 0 
                                       f32_4 %469 = OpLoad %110 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_3 %471 = OpFMul %468 %470 
                                       f32_3 %473 = OpFAdd %471 %472 
                                                      OpStore %52 %473 
                                       f32_3 %474 = OpLoad %52 
                                       f32_3 %475 = OpLoad %22 
                                       f32_3 %476 = OpVectorShuffle %475 %475 0 0 0 
                                       f32_3 %477 = OpFMul %474 %476 
                                                      OpStore %22 %477 
                                       f32_3 %478 = OpLoad %22 
                                       f32_3 %480 = OpFMul %478 %479 
                                       f32_4 %481 = OpLoad %110 
                                       f32_4 %482 = OpVectorShuffle %481 %480 4 5 6 3 
                                                      OpStore %110 %482 
                                Private f32* %484 = OpAccessChain %9 %30 
                                         f32 %485 = OpLoad %484 
                                         f32 %487 = OpFAdd %485 %486 
                                Private f32* %488 = OpAccessChain %483 %30 
                                                      OpStore %488 %487 
                                Private f32* %489 = OpAccessChain %483 %30 
                                         f32 %490 = OpLoad %489 
                                         f32 %492 = OpFMul %490 %491 
                                Private f32* %493 = OpAccessChain %483 %30 
                                                      OpStore %493 %492 
                                Private f32* %494 = OpAccessChain %483 %30 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpExtInst %1 43 %495 %74 %108 
                                Private f32* %497 = OpAccessChain %483 %30 
                                                      OpStore %497 %496 
                                       f32_3 %498 = OpLoad %22 
                                       f32_3 %499 = OpFNegate %498 
                                       f32_3 %500 = OpFMul %499 %479 
                                       f32_3 %504 = OpFAdd %500 %503 
                                                      OpStore %22 %504 
                                       f32_3 %505 = OpLoad %483 
                                       f32_3 %506 = OpVectorShuffle %505 %505 0 0 0 
                                       f32_3 %507 = OpLoad %22 
                                       f32_3 %508 = OpFMul %506 %507 
                                       f32_4 %509 = OpLoad %110 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                       f32_3 %511 = OpFAdd %508 %510 
                                                      OpStore %22 %511 
                                       f32_4 %513 = OpLoad %9 
                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
                                       f32_3 %516 = OpFMul %514 %515 
                                       f32_3 %517 = OpLoad %22 
                                       f32_3 %518 = OpFAdd %516 %517 
                                                      OpStore %512 %518 
                                Private f32* %519 = OpAccessChain %9 %196 
                                         f32 %520 = OpLoad %519 
                                Uniform f32* %522 = OpAccessChain %40 %521 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFNegate %523 
                                         f32 %525 = OpFAdd %520 %524 
                                Private f32* %526 = OpAccessChain %483 %30 
                                                      OpStore %526 %525 
                                Private f32* %528 = OpAccessChain %483 %30 
                                         f32 %529 = OpLoad %528 
                                        bool %530 = OpFOrdLessThan %529 %74 
                                                      OpStore %527 %530 
                                        bool %531 = OpLoad %527 
                                         i32 %533 = OpSelect %531 %532 %147 
                                         i32 %535 = OpIMul %533 %534 
                                        bool %536 = OpINotEqual %535 %147 
                                                      OpSelectionMerge %538 None 
                                                      OpBranchConditional %536 %537 %538 
                                             %537 = OpLabel 
                                                      OpKill
                                             %538 = OpLabel 
                                       f32_3 %540 = OpLoad %139 
                                       f32_3 %541 = OpVectorShuffle %540 %540 1 1 1 
                              Uniform f32_4* %543 = OpAccessChain %40 %542 %532 
                                       f32_4 %544 = OpLoad %543 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFMul %541 %545 
                                                      OpStore %22 %546 
                              Uniform f32_4* %547 = OpAccessChain %40 %542 %147 
                                       f32_4 %548 = OpLoad %547 
                                       f32_3 %549 = OpVectorShuffle %548 %548 0 1 2 
                                       f32_3 %550 = OpLoad %139 
                                       f32_3 %551 = OpVectorShuffle %550 %550 0 0 0 
                                       f32_3 %552 = OpFMul %549 %551 
                                       f32_3 %553 = OpLoad %22 
                                       f32_3 %554 = OpFAdd %552 %553 
                                                      OpStore %22 %554 
                              Uniform f32_4* %556 = OpAccessChain %40 %542 %555 
                                       f32_4 %557 = OpLoad %556 
                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 2 
                                       f32_3 %559 = OpLoad %139 
                                       f32_3 %560 = OpVectorShuffle %559 %559 2 2 2 
                                       f32_3 %561 = OpFMul %558 %560 
                                       f32_3 %562 = OpLoad %22 
                                       f32_3 %563 = OpFAdd %561 %562 
                                                      OpStore %22 %563 
                                       f32_3 %564 = OpLoad %22 
                              Uniform f32_4* %566 = OpAccessChain %40 %542 %565 
                                       f32_4 %567 = OpLoad %566 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 1 2 
                                       f32_3 %569 = OpFAdd %564 %568 
                                                      OpStore %22 %569 
                                Uniform f32* %571 = OpAccessChain %40 %555 %30 
                                         f32 %572 = OpLoad %571 
                                        bool %573 = OpFOrdEqual %572 %108 
                                                      OpStore %570 %573 
                                                      OpSelectionMerge %576 None 
                                                      OpBranchConditional %574 %575 %576 
                                             %575 = OpLabel 
                                        bool %577 = OpLoad %570 
                                                      OpSelectionMerge %579 None 
                                                      OpBranchConditional %577 %578 %579 
                                             %578 = OpLabel 
                                                      OpBranch %579 
                                             %579 = OpLabel 
                                                      OpBranch %576 
                                             %576 = OpLabel 
                                                      OpSelectionMerge %582 None 
                                                      OpBranchConditional %580 %581 %677 
                                             %581 = OpLabel 
                                Uniform f32* %583 = OpAccessChain %40 %555 %25 
                                         f32 %584 = OpLoad %583 
                                        bool %585 = OpFOrdEqual %584 %108 
                                                      OpStore %570 %585 
                                       f32_3 %586 = OpLoad %139 
                                       f32_3 %587 = OpVectorShuffle %586 %586 1 1 1 
                              Uniform f32_4* %588 = OpAccessChain %40 %565 %532 
                                       f32_4 %589 = OpLoad %588 
                                       f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
                                       f32_3 %591 = OpFMul %587 %590 
                                       f32_4 %592 = OpLoad %110 
                                       f32_4 %593 = OpVectorShuffle %592 %591 4 5 6 3 
                                                      OpStore %110 %593 
                              Uniform f32_4* %594 = OpAccessChain %40 %565 %147 
                                       f32_4 %595 = OpLoad %594 
                                       f32_3 %596 = OpVectorShuffle %595 %595 0 1 2 
                                       f32_3 %597 = OpLoad %139 
                                       f32_3 %598 = OpVectorShuffle %597 %597 0 0 0 
                                       f32_3 %599 = OpFMul %596 %598 
                                       f32_4 %600 = OpLoad %110 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_3 %602 = OpFAdd %599 %601 
                                       f32_4 %603 = OpLoad %110 
                                       f32_4 %604 = OpVectorShuffle %603 %602 4 5 6 3 
                                                      OpStore %110 %604 
                              Uniform f32_4* %605 = OpAccessChain %40 %565 %555 
                                       f32_4 %606 = OpLoad %605 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 1 2 
                                       f32_3 %608 = OpLoad %139 
                                       f32_3 %609 = OpVectorShuffle %608 %608 2 2 2 
                                       f32_3 %610 = OpFMul %607 %609 
                                       f32_4 %611 = OpLoad %110 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 1 2 
                                       f32_3 %613 = OpFAdd %610 %612 
                                       f32_4 %614 = OpLoad %110 
                                       f32_4 %615 = OpVectorShuffle %614 %613 4 5 6 3 
                                                      OpStore %110 %615 
                                       f32_4 %616 = OpLoad %110 
                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
                              Uniform f32_4* %618 = OpAccessChain %40 %565 %565 
                                       f32_4 %619 = OpLoad %618 
                                       f32_3 %620 = OpVectorShuffle %619 %619 0 1 2 
                                       f32_3 %621 = OpFAdd %617 %620 
                                       f32_4 %622 = OpLoad %110 
                                       f32_4 %623 = OpVectorShuffle %622 %621 4 5 6 3 
                                                      OpStore %110 %623 
                                        bool %626 = OpLoad %570 
                                                      OpSelectionMerge %628 None 
                                                      OpBranchConditional %626 %627 %631 
                                             %627 = OpLabel 
                                       f32_4 %629 = OpLoad %110 
                                       f32_3 %630 = OpVectorShuffle %629 %629 0 1 2 
                                                      OpStore %625 %630 
                                                      OpBranch %628 
                                             %631 = OpLabel 
                                       f32_3 %632 = OpLoad %139 
                                                      OpStore %625 %632 
                                                      OpBranch %628 
                                             %628 = OpLabel 
                                       f32_3 %633 = OpLoad %625 
                                       f32_4 %634 = OpLoad %110 
                                       f32_4 %635 = OpVectorShuffle %634 %633 4 5 6 3 
                                                      OpStore %110 %635 
                                       f32_4 %636 = OpLoad %110 
                                       f32_3 %637 = OpVectorShuffle %636 %636 0 1 2 
                              Uniform f32_3* %640 = OpAccessChain %40 %638 
                                       f32_3 %641 = OpLoad %640 
                                       f32_3 %642 = OpFNegate %641 
                                       f32_3 %643 = OpFAdd %637 %642 
                                       f32_4 %644 = OpLoad %110 
                                       f32_4 %645 = OpVectorShuffle %644 %643 4 5 6 3 
                                                      OpStore %110 %645 
                                       f32_4 %646 = OpLoad %110 
                                       f32_3 %647 = OpVectorShuffle %646 %646 0 1 2 
                              Uniform f32_3* %649 = OpAccessChain %40 %648 
                                       f32_3 %650 = OpLoad %649 
                                       f32_3 %651 = OpFMul %647 %650 
                                       f32_4 %652 = OpLoad %110 
                                       f32_4 %653 = OpVectorShuffle %652 %651 0 4 5 6 
                                                      OpStore %110 %653 
                                Private f32* %654 = OpAccessChain %110 %25 
                                         f32 %655 = OpLoad %654 
                                         f32 %656 = OpFMul %655 %360 
                                         f32 %658 = OpFAdd %656 %657 
                                                      OpStore %95 %658 
                                Uniform f32* %659 = OpAccessChain %40 %555 %153 
                                         f32 %660 = OpLoad %659 
                                         f32 %661 = OpFMul %660 %331 
                                         f32 %662 = OpFAdd %661 %657 
                                                      OpStore %319 %662 
                                         f32 %663 = OpLoad %95 
                                         f32 %664 = OpLoad %319 
                                         f32 %665 = OpExtInst %1 40 %663 %664 
                                Private f32* %666 = OpAccessChain %110 %30 
                                                      OpStore %666 %665 
                  read_only Texture3DSampled %671 = OpLoad %670 
                                       f32_4 %672 = OpLoad %110 
                                       f32_3 %673 = OpVectorShuffle %672 %672 0 2 3 
                                       f32_4 %674 = OpImageSampleImplicitLod %671 %673 
                                                      OpStore %110 %674 
                                       f32_4 %676 = OpLoad %110 
                                                      OpStore %675 %676 
                                                      OpBranch %582 
                                             %677 = OpLabel 
                                Private f32* %678 = OpAccessChain %675 %30 
                                                      OpStore %678 %108 
                                Private f32* %679 = OpAccessChain %675 %25 
                                                      OpStore %679 %108 
                                Private f32* %680 = OpAccessChain %675 %153 
                                                      OpStore %680 %108 
                                Private f32* %681 = OpAccessChain %675 %196 
                                                      OpStore %681 %108 
                                                      OpBranch %582 
                                             %582 = OpLabel 
                                       f32_4 %682 = OpLoad %675 
                              Uniform f32_4* %683 = OpAccessChain %40 %532 
                                       f32_4 %684 = OpLoad %683 
                                         f32 %685 = OpDot %682 %684 
                                Private f32* %686 = OpAccessChain %483 %30 
                                                      OpStore %686 %685 
                                Private f32* %687 = OpAccessChain %483 %30 
                                         f32 %688 = OpLoad %687 
                                         f32 %689 = OpExtInst %1 43 %688 %74 %108 
                                Private f32* %690 = OpAccessChain %483 %30 
                                                      OpStore %690 %689 
                                       f32_3 %691 = OpLoad %22 
                                       f32_3 %692 = OpLoad %22 
                                         f32 %693 = OpDot %691 %692 
                                                      OpStore %95 %693 
                  read_only Texture2DSampled %695 = OpLoad %694 
                                         f32 %696 = OpLoad %95 
                                       f32_2 %697 = OpCompositeConstruct %696 %696 
                                       f32_4 %698 = OpImageSampleImplicitLod %695 %697 
                                         f32 %699 = OpCompositeExtract %698 3 
                                                      OpStore %95 %699 
                read_only TextureCubeSampled %704 = OpLoad %703 
                                       f32_3 %705 = OpLoad %22 
                                       f32_4 %706 = OpImageSampleImplicitLod %704 %705 
                                         f32 %707 = OpCompositeExtract %706 3 
                                Private f32* %708 = OpAccessChain %22 %30 
                                                      OpStore %708 %707 
                                Private f32* %709 = OpAccessChain %22 %30 
                                         f32 %710 = OpLoad %709 
                                         f32 %711 = OpLoad %95 
                                         f32 %712 = OpFMul %710 %711 
                                Private f32* %713 = OpAccessChain %22 %30 
                                                      OpStore %713 %712 
                                Private f32* %714 = OpAccessChain %483 %30 
                                         f32 %715 = OpLoad %714 
                                Private f32* %716 = OpAccessChain %22 %30 
                                         f32 %717 = OpLoad %716 
                                         f32 %718 = OpFMul %715 %717 
                                Private f32* %719 = OpAccessChain %22 %30 
                                                      OpStore %719 %718 
                                       f32_3 %720 = OpLoad %512 
                              Uniform f32_4* %722 = OpAccessChain %40 %721 
                                       f32_4 %723 = OpLoad %722 
                                       f32_3 %724 = OpVectorShuffle %723 %723 0 1 2 
                                       f32_3 %725 = OpFMul %720 %724 
                                                      OpStore %483 %725 
                                       f32_3 %728 = OpLoad %22 
                                       f32_3 %729 = OpVectorShuffle %728 %728 0 0 0 
                                       f32_3 %730 = OpLoad %483 
                                       f32_3 %731 = OpFMul %729 %730 
                                       f32_4 %732 = OpLoad %727 
                                       f32_4 %733 = OpVectorShuffle %732 %731 4 5 6 3 
                                                      OpStore %727 %733 
                                Private f32* %734 = OpAccessChain %9 %196 
                                         f32 %735 = OpLoad %734 
                                 Output f32* %737 = OpAccessChain %727 %196 
                                                      OpStore %737 %735 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    vs_TEXCOORD3.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _OverrideColor;
uniform 	float _StepValue;
uniform 	float _SkyBoost;
uniform 	float _SkyPower;
uniform 	float _CurvePower;
uniform 	float _CurveColorFactor;
uniform 	float _CurveFreq;
uniform 	float _DitherCohesionFactor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
float u_xlat13;
bool u_xlatb13;
float u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat19;
float u_xlat16_19;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = log2(vs_TEXCOORD3.y);
    u_xlat1.x = u_xlat1.x * _SkyPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat7.x = vs_TEXCOORD3.y * vs_TEXCOORD3.y;
    u_xlat1.x = u_xlat7.x * _SkyBoost + u_xlat1.x;
    u_xlatb7 = u_xlat1.x<0.0;
    u_xlat1.x = (u_xlatb7) ? -1.0 : u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * _OverrideColor.xyz;
    u_xlat19 = vs_TEXCOORD3.x * _CurveFreq;
    u_xlat19 = u_xlat19 * 3.1400001;
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 + 1.0;
    u_xlat2.x = _CurveColorFactor + _CurveColorFactor;
    u_xlat19 = u_xlat19 / u_xlat2.x;
    u_xlat19 = u_xlat19 + -1.0;
    u_xlat19 = _CurvePower * u_xlat19 + 1.0;
    u_xlat2.xyw = vec3(u_xlat19) * u_xlat1.yzx;
    u_xlat3.xyz = vs_TEXCOORD2.xyy * vec3(0.00999999978, 0.00999999978, 0.0799999982);
    u_xlat4.y = (-_Time.x) * 0.333333343 + u_xlat3.z;
    u_xlat4.x = vs_TEXCOORD2.x * 0.0799999982;
    u_xlat10_4 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat16_1 = log2(u_xlat10_4.x);
    u_xlat16_1 = u_xlat16_1 * 1.5;
    u_xlat16_1 = exp2(u_xlat16_1);
    u_xlatb15 = u_xlat2.x>=u_xlat2.y;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat2.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.yz * vec2(u_xlat19) + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat15) * u_xlat5 + u_xlat4;
    u_xlatb7 = u_xlat2.w>=u_xlat4.x;
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat2.wyx;
    u_xlat4 = (-u_xlat2) + u_xlat4;
    u_xlat2 = u_xlat7.xxxx * u_xlat4 + u_xlat2;
    u_xlat7.x = min(u_xlat2.y, u_xlat2.w);
    u_xlat7.x = (-u_xlat7.x) + u_xlat2.x;
    u_xlat13 = (-u_xlat2.y) + u_xlat2.w;
    u_xlat19 = u_xlat7.x * 6.0 + 1.00000001e-010;
    u_xlat13 = u_xlat13 / u_xlat19;
    u_xlat13 = u_xlat13 + u_xlat2.z;
    u_xlat19 = u_xlat2.x + 1.00000001e-010;
    u_xlat7.x = u_xlat7.x / u_xlat19;
    u_xlat1.x = (-u_xlat16_1) * 2.0 + u_xlat2.x;
    u_xlat19 = dot(u_xlat3.xy, vec2(12.9898005, 78.2330017));
    u_xlat19 = sin(u_xlat19);
    u_xlat19 = u_xlat19 * 43758.5469;
    u_xlat19 = fract(u_xlat19);
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat2.x = u_xlat3.y + u_xlat3.x;
    u_xlat8 = u_xlat2.x + (-_Time.z);
    u_xlat8 = sin(u_xlat8);
    u_xlat8 = u_xlat8 + 1.0;
    u_xlat8 = u_xlat8 * 0.5;
    u_xlat14 = u_xlat2.x + _Time.z;
    u_xlat14 = sin(u_xlat14);
    u_xlat14 = u_xlat14 * 0.099999994 + 0.150000006;
    u_xlat8 = u_xlat8 * u_xlat14 + 0.349999994;
    u_xlat2.x = u_xlat2.x * 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlatb2 = 0.25<u_xlat2.x;
    u_xlat1.x = u_xlat1.x / _StepValue;
    u_xlat14 = (-u_xlat8) + u_xlat1.x;
    u_xlat14 = (-u_xlat19) * _DitherCohesionFactor + u_xlat14;
    u_xlat14 = ceil(u_xlat14);
    u_xlat14 = u_xlat14 * _StepValue;
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat19 * _DitherCohesionFactor + u_xlat1.x;
    u_xlat1.x = roundEven(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _StepValue;
    u_xlat1.x = (u_xlatb2) ? u_xlat14 : u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat2.xyz = abs(vec3(u_xlat13)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat2.xyz = fract(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat2.xyz = abs(u_xlat2.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_19 = u_xlat10_0.x + -0.00999999978;
    u_xlat16_19 = u_xlat16_19 * 1000.0;
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(0.5, 0.5, 0.5) + vec3(0.0299999993, 0.0, 0.0700000003);
    u_xlat1.xyz = vec3(u_xlat16_19) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat19 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat19, u_xlat13);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xy);
    u_xlat1.x = u_xlat13 * u_xlat10_2.w;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 206
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %145 %151 %152 %164 %194 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %194 Location 194 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_2 %140 = OpConstantComposite %139 %139 
                                             %144 = OpTypePointer Output %95 
                               Output f32_2* %145 = OpVariable Output 
                                         f32 %148 = OpConstant 3.674022E-40 
                                       f32_2 %149 = OpConstantComposite %148 %148 
                               Output f32_2* %151 = OpVariable Output 
                                Input f32_4* %152 = OpVariable Input 
                                             %163 = OpTypePointer Input %50 
                                Input f32_3* %164 = OpVariable Input 
                                         u32 %170 = OpConstant 0 
                                             %171 = OpTypePointer Private %6 
                                         u32 %184 = OpConstant 2 
                                Private f32* %186 = OpVariable Private 
                               Output f32_3* %194 = OpVariable Output 
                                             %200 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %96 = OpLoad %44 
                                        f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                               Uniform f32_4* %98 = OpAccessChain %21 %36 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %97 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
                                                      OpStore %9 %103 
                              Uniform f32_4* %104 = OpAccessChain %21 %36 %23 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %107 = OpLoad %44 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 0 
                                       f32_2 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %9 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %36 %36 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpLoad %44 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 2 
                                       f32_2 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %9 %125 
                              Uniform f32_4* %126 = OpAccessChain %21 %36 %46 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                                       f32_4 %129 = OpLoad %44 
                                       f32_2 %130 = OpVectorShuffle %129 %129 3 3 
                                       f32_2 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_2 %134 = OpFAdd %131 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 3 
                                                      OpStore %9 %136 
                                       f32_4 %137 = OpLoad %9 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %9 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %9 %143 
                                       f32_4 %146 = OpLoad %9 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_2 %150 = OpFMul %147 %149 
                                                      OpStore %145 %150 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                              Uniform f32_4* %155 = OpAccessChain %21 %46 
                                       f32_4 %156 = OpLoad %155 
                                       f32_2 %157 = OpVectorShuffle %156 %156 0 1 
                                       f32_2 %158 = OpFMul %154 %157 
                              Uniform f32_4* %159 = OpAccessChain %21 %46 
                                       f32_4 %160 = OpLoad %159 
                                       f32_2 %161 = OpVectorShuffle %160 %160 2 3 
                                       f32_2 %162 = OpFAdd %158 %161 
                                                      OpStore %151 %162 
                                       f32_3 %165 = OpLoad %164 
                              Uniform f32_4* %166 = OpAccessChain %21 %24 %23 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                Private f32* %172 = OpAccessChain %9 %170 
                                                      OpStore %172 %169 
                                       f32_3 %173 = OpLoad %164 
                              Uniform f32_4* %174 = OpAccessChain %21 %24 %24 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %173 %176 
                                Private f32* %178 = OpAccessChain %9 %81 
                                                      OpStore %178 %177 
                                       f32_3 %179 = OpLoad %164 
                              Uniform f32_4* %180 = OpAccessChain %21 %24 %36 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                         f32 %183 = OpDot %179 %182 
                                Private f32* %185 = OpAccessChain %9 %184 
                                                      OpStore %185 %183 
                                       f32_4 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %188 %190 
                                                      OpStore %186 %191 
                                         f32 %192 = OpLoad %186 
                                         f32 %193 = OpExtInst %1 32 %192 
                                                      OpStore %186 %193 
                                         f32 %195 = OpLoad %186 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %196 %198 
                                                      OpStore %194 %199 
                                 Output f32* %201 = OpAccessChain %85 %23 %81 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFNegate %202 
                                 Output f32* %204 = OpAccessChain %85 %23 %81 
                                                      OpStore %204 %203 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 734
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %23 %139 %722 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 RelaxedPrecision 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpMemberDecorate %38 6 RelaxedPrecision 
                                                      OpMemberDecorate %38 6 Offset 38 
                                                      OpMemberDecorate %38 7 Offset 38 
                                                      OpMemberDecorate %38 8 Offset 38 
                                                      OpMemberDecorate %38 9 Offset 38 
                                                      OpMemberDecorate %38 10 Offset 38 
                                                      OpMemberDecorate %38 11 Offset 38 
                                                      OpMemberDecorate %38 12 Offset 38 
                                                      OpMemberDecorate %38 13 Offset 38 
                                                      OpMemberDecorate %38 14 Offset 38 
                                                      OpMemberDecorate %38 15 Offset 38 
                                                      OpMemberDecorate %38 16 RelaxedPrecision 
                                                      OpMemberDecorate %38 16 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %163 DescriptorSet 163 
                                                      OpDecorate %163 Binding 163 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %591 SpecId 591 
                                                      OpDecorate %681 DescriptorSet 681 
                                                      OpDecorate %681 Binding 681 
                                                      OpDecorate %686 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %696 RelaxedPrecision 
                                                      OpDecorate %699 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %702 DescriptorSet 702 
                                                      OpDecorate %702 Binding 702 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %719 RelaxedPrecision 
                                                      OpDecorate %722 RelaxedPrecision 
                                                      OpDecorate %722 Location 722 
                                                      OpDecorate %725 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                                 Input f32_2* %23 = OpVariable Input 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                          u32 %35 = OpConstant 4 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeArray %7 %35 
                                              %38 = OpTypeStruct %7 %7 %7 %36 %20 %20 %7 %37 %7 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 11 
                                              %43 = OpTypePointer Uniform %6 
                               Private f32_3* %52 = OpVariable Private 
                                          i32 %61 = OpConstant 10 
                                              %69 = OpTypeBool 
                                              %70 = OpTypePointer Private %69 
                                Private bool* %71 = OpVariable Private 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Function %6 
                                          f32 %81 = OpConstant 3.674022E-40 
                                          i32 %89 = OpConstant 8 
                                              %90 = OpTypePointer Uniform %7 
                                 Private f32* %95 = OpVariable Private 
                                          i32 %98 = OpConstant 14 
                                         f32 %103 = OpConstant 3.674022E-40 
                                         f32 %108 = OpConstant 3.674022E-40 
                              Private f32_4* %110 = OpVariable Private 
                                         i32 %111 = OpConstant 13 
                                         i32 %124 = OpConstant 12 
                              Private f32_3* %137 = OpVariable Private 
                                             %138 = OpTypePointer Input %20 
                                Input f32_3* %139 = OpVariable Input 
                                         f32 %142 = OpConstant 3.674022E-40 
                                         f32 %143 = OpConstant 3.674022E-40 
                                       f32_3 %144 = OpConstantComposite %142 %142 %143 
                              Private f32_4* %146 = OpVariable Private 
                                         i32 %147 = OpConstant 0 
                                         f32 %151 = OpConstant 3.674022E-40 
                                         u32 %153 = OpConstant 2 
                                Private f32* %162 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %163 = OpVariable UniformConstant 
                                Private f32* %169 = OpVariable Private 
                                         f32 %173 = OpConstant 3.674022E-40 
                               Private bool* %177 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                                         f32 %195 = OpConstant 3.674022E-40 
                                         u32 %196 = OpConstant 3 
                              Private f32_4* %198 = OpVariable Private 
                                Private f32* %261 = OpVariable Private 
                                         f32 %270 = OpConstant 3.674022E-40 
                                         f32 %272 = OpConstant 3.674022E-40 
                                         f32 %291 = OpConstant 3.674022E-40 
                                         f32 %299 = OpConstant 3.674022E-40 
                                         f32 %300 = OpConstant 3.674022E-40 
                                       f32_2 %301 = OpConstantComposite %299 %300 
                                         f32 %306 = OpConstant 3.674022E-40 
                                         f32 %311 = OpConstant 3.674022E-40 
                                Private f32* %319 = OpVariable Private 
                                         f32 %331 = OpConstant 3.674022E-40 
                                Private f32* %333 = OpVariable Private 
                                         f32 %342 = OpConstant 3.674022E-40 
                                         f32 %344 = OpConstant 3.674022E-40 
                                         f32 %349 = OpConstant 3.674022E-40 
                               Private bool* %359 = OpVariable Private 
                                         f32 %360 = OpConstant 3.674022E-40 
                                         i32 %366 = OpConstant 9 
                                         i32 %378 = OpConstant 15 
                                       f32_3 %430 = OpConstantComposite %108 %195 %151 
                                       f32_3 %441 = OpConstantComposite %270 %270 %270 
                                         f32 %443 = OpConstant 3.674022E-40 
                                       f32_3 %444 = OpConstantComposite %443 %443 %443 
                                       f32_3 %451 = OpConstantComposite %81 %81 %81 
                                       f32_3 %472 = OpConstantComposite %108 %108 %108 
                                       f32_3 %479 = OpConstantComposite %331 %331 %331 
                              Private f32_3* %483 = OpVariable Private 
                                         f32 %486 = OpConstant 3.674022E-40 
                                         f32 %491 = OpConstant 3.674022E-40 
                                         f32 %501 = OpConstant 3.674022E-40 
                                         f32 %502 = OpConstant 3.674022E-40 
                                       f32_3 %503 = OpConstantComposite %501 %74 %502 
                              Private f32_3* %512 = OpVariable Private 
                                       f32_3 %515 = OpConstantComposite %291 %291 %291 
                                         i32 %521 = OpConstant 16 
                               Private bool* %527 = OpVariable Private 
                                         i32 %532 = OpConstant 1 
                                         i32 %534 = OpConstant -1 
                                         i32 %542 = OpConstant 7 
                                         i32 %560 = OpConstant 2 
                                         i32 %574 = OpConstant 3 
                               Private bool* %581 = OpVariable Private 
                                        bool %585 = OpConstantFalse 
                                        bool %591 = OpSpecConstantFalse 
                                             %635 = OpTypePointer Function %20 
                                         i32 %649 = OpConstant 5 
                                             %650 = OpTypePointer Uniform %20 
                                         i32 %659 = OpConstant 4 
                                         f32 %668 = OpConstant 3.674022E-40 
                                             %678 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %679 = OpTypeSampledImage %678 
                                             %680 = OpTypePointer UniformConstant %679 
 UniformConstant read_only Texture3DSampled* %681 = OpVariable UniformConstant 
                              Private f32_4* %686 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %702 = OpVariable UniformConstant 
                                         i32 %716 = OpConstant 6 
                                             %721 = OpTypePointer Output %7 
                               Output f32_4* %722 = OpVariable Output 
                                             %731 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %77 = OpVariable Function 
                               Function f32* %184 = OpVariable Function 
                               Function f32* %223 = OpVariable Function 
                               Function f32* %413 = OpVariable Function 
                             Function f32_3* %636 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                   Input f32* %27 = OpAccessChain %23 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpExtInst %1 30 %28 
                                 Private f32* %32 = OpAccessChain %22 %30 
                                                      OpStore %32 %29 
                                 Private f32* %33 = OpAccessChain %22 %30 
                                          f32 %34 = OpLoad %33 
                                 Uniform f32* %44 = OpAccessChain %40 %42 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %34 %45 
                                 Private f32* %47 = OpAccessChain %22 %30 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %22 %30 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpExtInst %1 29 %49 
                                 Private f32* %51 = OpAccessChain %22 %30 
                                                      OpStore %51 %50 
                                   Input f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                   Input f32* %55 = OpAccessChain %23 %25 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFMul %54 %56 
                                 Private f32* %58 = OpAccessChain %52 %30 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %52 %30 
                                          f32 %60 = OpLoad %59 
                                 Uniform f32* %62 = OpAccessChain %40 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFMul %60 %63 
                                 Private f32* %65 = OpAccessChain %22 %30 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFAdd %64 %66 
                                 Private f32* %68 = OpAccessChain %22 %30 
                                                      OpStore %68 %67 
                                 Private f32* %72 = OpAccessChain %22 %30 
                                          f32 %73 = OpLoad %72 
                                         bool %75 = OpFOrdLessThan %73 %74 
                                                      OpStore %71 %75 
                                         bool %78 = OpLoad %71 
                                                      OpSelectionMerge %80 None 
                                                      OpBranchConditional %78 %79 %82 
                                              %79 = OpLabel 
                                                      OpStore %77 %81 
                                                      OpBranch %80 
                                              %82 = OpLabel 
                                 Private f32* %83 = OpAccessChain %22 %30 
                                          f32 %84 = OpLoad %83 
                                                      OpStore %77 %84 
                                                      OpBranch %80 
                                              %80 = OpLabel 
                                          f32 %85 = OpLoad %77 
                                 Private f32* %86 = OpAccessChain %22 %30 
                                                      OpStore %86 %85 
                                        f32_3 %87 = OpLoad %22 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 0 0 
                               Uniform f32_4* %91 = OpAccessChain %40 %89 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFMul %88 %93 
                                                      OpStore %22 %94 
                                   Input f32* %96 = OpAccessChain %23 %30 
                                          f32 %97 = OpLoad %96 
                                 Uniform f32* %99 = OpAccessChain %40 %98 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFMul %97 %100 
                                                      OpStore %95 %101 
                                         f32 %102 = OpLoad %95 
                                         f32 %104 = OpFMul %102 %103 
                                                      OpStore %95 %104 
                                         f32 %105 = OpLoad %95 
                                         f32 %106 = OpExtInst %1 13 %105 
                                                      OpStore %95 %106 
                                         f32 %107 = OpLoad %95 
                                         f32 %109 = OpFAdd %107 %108 
                                                      OpStore %95 %109 
                                Uniform f32* %112 = OpAccessChain %40 %111 
                                         f32 %113 = OpLoad %112 
                                Uniform f32* %114 = OpAccessChain %40 %111 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpFAdd %113 %115 
                                Private f32* %117 = OpAccessChain %110 %30 
                                                      OpStore %117 %116 
                                         f32 %118 = OpLoad %95 
                                Private f32* %119 = OpAccessChain %110 %30 
                                         f32 %120 = OpLoad %119 
                                         f32 %121 = OpFDiv %118 %120 
                                                      OpStore %95 %121 
                                         f32 %122 = OpLoad %95 
                                         f32 %123 = OpFAdd %122 %81 
                                                      OpStore %95 %123 
                                Uniform f32* %125 = OpAccessChain %40 %124 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpLoad %95 
                                         f32 %128 = OpFMul %126 %127 
                                         f32 %129 = OpFAdd %128 %108 
                                                      OpStore %95 %129 
                                         f32 %130 = OpLoad %95 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_3 %132 = OpLoad %22 
                                       f32_3 %133 = OpVectorShuffle %132 %132 1 2 0 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %110 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 6 
                                                      OpStore %110 %136 
                                       f32_3 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 1 
                                       f32_3 %145 = OpFMul %141 %144 
                                                      OpStore %137 %145 
                                Uniform f32* %148 = OpAccessChain %40 %147 %30 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFNegate %149 
                                         f32 %152 = OpFMul %150 %151 
                                Private f32* %154 = OpAccessChain %137 %153 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFAdd %152 %155 
                                Private f32* %157 = OpAccessChain %146 %25 
                                                      OpStore %157 %156 
                                  Input f32* %158 = OpAccessChain %139 %30 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %159 %143 
                                Private f32* %161 = OpAccessChain %146 %30 
                                                      OpStore %161 %160 
                  read_only Texture2DSampled %164 = OpLoad %163 
                                       f32_4 %165 = OpLoad %146 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_4 %167 = OpImageSampleImplicitLod %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                                      OpStore %162 %168 
                                         f32 %170 = OpLoad %162 
                                         f32 %171 = OpExtInst %1 30 %170 
                                                      OpStore %169 %171 
                                         f32 %172 = OpLoad %169 
                                         f32 %174 = OpFMul %172 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 29 %175 
                                                      OpStore %169 %176 
                                Private f32* %178 = OpAccessChain %110 %30 
                                         f32 %179 = OpLoad %178 
                                Private f32* %180 = OpAccessChain %110 %25 
                                         f32 %181 = OpLoad %180 
                                        bool %182 = OpFOrdGreaterThanEqual %179 %181 
                                                      OpStore %177 %182 
                                        bool %185 = OpLoad %177 
                                                      OpSelectionMerge %187 None 
                                                      OpBranchConditional %185 %186 %188 
                                             %186 = OpLabel 
                                                      OpStore %184 %108 
                                                      OpBranch %187 
                                             %188 = OpLabel 
                                                      OpStore %184 %74 
                                                      OpBranch %187 
                                             %187 = OpLabel 
                                         f32 %189 = OpLoad %184 
                                                      OpStore %183 %189 
                                       f32_4 %190 = OpLoad %110 
                                       f32_2 %191 = OpVectorShuffle %190 %190 1 0 
                                       f32_4 %192 = OpLoad %146 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 2 3 
                                                      OpStore %146 %193 
                                Private f32* %194 = OpAccessChain %146 %153 
                                                      OpStore %194 %81 
                                Private f32* %197 = OpAccessChain %146 %196 
                                                      OpStore %197 %195 
                                       f32_3 %199 = OpLoad %22 
                                       f32_2 %200 = OpVectorShuffle %199 %199 1 2 
                                         f32 %201 = OpLoad %95 
                                       f32_2 %202 = OpCompositeConstruct %201 %201 
                                       f32_2 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %146 
                                       f32_2 %205 = OpVectorShuffle %204 %204 0 1 
                                       f32_2 %206 = OpFNegate %205 
                                       f32_2 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %198 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 2 3 
                                                      OpStore %198 %209 
                                Private f32* %210 = OpAccessChain %198 %153 
                                                      OpStore %210 %108 
                                Private f32* %211 = OpAccessChain %198 %196 
                                                      OpStore %211 %81 
                                         f32 %212 = OpLoad %183 
                                       f32_4 %213 = OpCompositeConstruct %212 %212 %212 %212 
                                       f32_4 %214 = OpLoad %198 
                                       f32_4 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %146 
                                       f32_4 %217 = OpFAdd %215 %216 
                                                      OpStore %146 %217 
                                Private f32* %218 = OpAccessChain %110 %196 
                                         f32 %219 = OpLoad %218 
                                Private f32* %220 = OpAccessChain %146 %30 
                                         f32 %221 = OpLoad %220 
                                        bool %222 = OpFOrdGreaterThanEqual %219 %221 
                                                      OpStore %71 %222 
                                        bool %224 = OpLoad %71 
                                                      OpSelectionMerge %226 None 
                                                      OpBranchConditional %224 %225 %227 
                                             %225 = OpLabel 
                                                      OpStore %223 %108 
                                                      OpBranch %226 
                                             %227 = OpLabel 
                                                      OpStore %223 %74 
                                                      OpBranch %226 
                                             %226 = OpLabel 
                                         f32 %228 = OpLoad %223 
                                Private f32* %229 = OpAccessChain %52 %30 
                                                      OpStore %229 %228 
                                       f32_4 %230 = OpLoad %146 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 3 
                                       f32_4 %232 = OpLoad %110 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %110 %233 
                                       f32_4 %234 = OpLoad %110 
                                       f32_3 %235 = OpVectorShuffle %234 %234 3 1 0 
                                       f32_4 %236 = OpLoad %146 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 2 6 
                                                      OpStore %146 %237 
                                       f32_4 %238 = OpLoad %110 
                                       f32_4 %239 = OpFNegate %238 
                                       f32_4 %240 = OpLoad %146 
                                       f32_4 %241 = OpFAdd %239 %240 
                                                      OpStore %146 %241 
                                       f32_3 %242 = OpLoad %52 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpLoad %146 
                                       f32_4 %245 = OpFMul %243 %244 
                                       f32_4 %246 = OpLoad %110 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %110 %247 
                                Private f32* %248 = OpAccessChain %110 %25 
                                         f32 %249 = OpLoad %248 
                                Private f32* %250 = OpAccessChain %110 %196 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpExtInst %1 37 %249 %251 
                                Private f32* %253 = OpAccessChain %52 %30 
                                                      OpStore %253 %252 
                                Private f32* %254 = OpAccessChain %52 %30 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFNegate %255 
                                Private f32* %257 = OpAccessChain %110 %30 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %52 %30 
                                                      OpStore %260 %259 
                                Private f32* %262 = OpAccessChain %110 %25 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpFNegate %263 
                                Private f32* %265 = OpAccessChain %110 %196 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpFAdd %264 %266 
                                                      OpStore %261 %267 
                                Private f32* %268 = OpAccessChain %52 %30 
                                         f32 %269 = OpLoad %268 
                                         f32 %271 = OpFMul %269 %270 
                                         f32 %273 = OpFAdd %271 %272 
                                                      OpStore %95 %273 
                                         f32 %274 = OpLoad %261 
                                         f32 %275 = OpLoad %95 
                                         f32 %276 = OpFDiv %274 %275 
                                                      OpStore %261 %276 
                                         f32 %277 = OpLoad %261 
                                Private f32* %278 = OpAccessChain %110 %153 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFAdd %277 %279 
                                                      OpStore %261 %280 
                                Private f32* %281 = OpAccessChain %110 %30 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpFAdd %282 %272 
                                                      OpStore %95 %283 
                                Private f32* %284 = OpAccessChain %52 %30 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpLoad %95 
                                         f32 %287 = OpFDiv %285 %286 
                                Private f32* %288 = OpAccessChain %52 %30 
                                                      OpStore %288 %287 
                                         f32 %289 = OpLoad %169 
                                         f32 %290 = OpFNegate %289 
                                         f32 %292 = OpFMul %290 %291 
                                Private f32* %293 = OpAccessChain %110 %30 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFAdd %292 %294 
                                Private f32* %296 = OpAccessChain %22 %30 
                                                      OpStore %296 %295 
                                       f32_3 %297 = OpLoad %137 
                                       f32_2 %298 = OpVectorShuffle %297 %297 0 1 
                                         f32 %302 = OpDot %298 %301 
                                                      OpStore %95 %302 
                                         f32 %303 = OpLoad %95 
                                         f32 %304 = OpExtInst %1 13 %303 
                                                      OpStore %95 %304 
                                         f32 %305 = OpLoad %95 
                                         f32 %307 = OpFMul %305 %306 
                                                      OpStore %95 %307 
                                         f32 %308 = OpLoad %95 
                                         f32 %309 = OpExtInst %1 10 %308 
                                                      OpStore %95 %309 
                                         f32 %310 = OpLoad %95 
                                         f32 %312 = OpFAdd %310 %311 
                                                      OpStore %95 %312 
                                Private f32* %313 = OpAccessChain %137 %25 
                                         f32 %314 = OpLoad %313 
                                Private f32* %315 = OpAccessChain %137 %30 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpFAdd %314 %316 
                                Private f32* %318 = OpAccessChain %110 %30 
                                                      OpStore %318 %317 
                                Private f32* %320 = OpAccessChain %110 %30 
                                         f32 %321 = OpLoad %320 
                                Uniform f32* %322 = OpAccessChain %40 %147 %153 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFNegate %323 
                                         f32 %325 = OpFAdd %321 %324 
                                                      OpStore %319 %325 
                                         f32 %326 = OpLoad %319 
                                         f32 %327 = OpExtInst %1 13 %326 
                                                      OpStore %319 %327 
                                         f32 %328 = OpLoad %319 
                                         f32 %329 = OpFAdd %328 %108 
                                                      OpStore %319 %329 
                                         f32 %330 = OpLoad %319 
                                         f32 %332 = OpFMul %330 %331 
                                                      OpStore %319 %332 
                                Private f32* %334 = OpAccessChain %110 %30 
                                         f32 %335 = OpLoad %334 
                                Uniform f32* %336 = OpAccessChain %40 %147 %153 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpFAdd %335 %337 
                                                      OpStore %333 %338 
                                         f32 %339 = OpLoad %333 
                                         f32 %340 = OpExtInst %1 13 %339 
                                                      OpStore %333 %340 
                                         f32 %341 = OpLoad %333 
                                         f32 %343 = OpFMul %341 %342 
                                         f32 %345 = OpFAdd %343 %344 
                                                      OpStore %333 %345 
                                         f32 %346 = OpLoad %319 
                                         f32 %347 = OpLoad %333 
                                         f32 %348 = OpFMul %346 %347 
                                         f32 %350 = OpFAdd %348 %349 
                                                      OpStore %319 %350 
                                Private f32* %351 = OpAccessChain %110 %30 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpFMul %352 %331 
                                Private f32* %354 = OpAccessChain %110 %30 
                                                      OpStore %354 %353 
                                Private f32* %355 = OpAccessChain %110 %30 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpExtInst %1 10 %356 
                                Private f32* %358 = OpAccessChain %110 %30 
                                                      OpStore %358 %357 
                                Private f32* %361 = OpAccessChain %110 %30 
                                         f32 %362 = OpLoad %361 
                                        bool %363 = OpFOrdLessThan %360 %362 
                                                      OpStore %359 %363 
                                Private f32* %364 = OpAccessChain %22 %30 
                                         f32 %365 = OpLoad %364 
                                Uniform f32* %367 = OpAccessChain %40 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFDiv %365 %368 
                                Private f32* %370 = OpAccessChain %22 %30 
                                                      OpStore %370 %369 
                                         f32 %371 = OpLoad %319 
                                         f32 %372 = OpFNegate %371 
                                Private f32* %373 = OpAccessChain %22 %30 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFAdd %372 %374 
                                                      OpStore %333 %375 
                                         f32 %376 = OpLoad %95 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %379 = OpAccessChain %40 %378 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFMul %377 %380 
                                         f32 %382 = OpLoad %333 
                                         f32 %383 = OpFAdd %381 %382 
                                                      OpStore %333 %383 
                                         f32 %384 = OpLoad %333 
                                         f32 %385 = OpExtInst %1 9 %384 
                                                      OpStore %333 %385 
                                         f32 %386 = OpLoad %333 
                                Uniform f32* %387 = OpAccessChain %40 %366 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFMul %386 %388 
                                                      OpStore %333 %389 
                                         f32 %390 = OpLoad %319 
                                Private f32* %391 = OpAccessChain %22 %30 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFAdd %390 %392 
                                Private f32* %394 = OpAccessChain %22 %30 
                                                      OpStore %394 %393 
                                         f32 %395 = OpLoad %95 
                                Uniform f32* %396 = OpAccessChain %40 %378 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFMul %395 %397 
                                Private f32* %399 = OpAccessChain %22 %30 
                                         f32 %400 = OpLoad %399 
                                         f32 %401 = OpFAdd %398 %400 
                                Private f32* %402 = OpAccessChain %22 %30 
                                                      OpStore %402 %401 
                                Private f32* %403 = OpAccessChain %22 %30 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpExtInst %1 2 %404 
                                Private f32* %406 = OpAccessChain %22 %30 
                                                      OpStore %406 %405 
                                Private f32* %407 = OpAccessChain %22 %30 
                                         f32 %408 = OpLoad %407 
                                Uniform f32* %409 = OpAccessChain %40 %366 
                                         f32 %410 = OpLoad %409 
                                         f32 %411 = OpFMul %408 %410 
                                Private f32* %412 = OpAccessChain %22 %30 
                                                      OpStore %412 %411 
                                        bool %414 = OpLoad %359 
                                                      OpSelectionMerge %416 None 
                                                      OpBranchConditional %414 %415 %418 
                                             %415 = OpLabel 
                                         f32 %417 = OpLoad %333 
                                                      OpStore %413 %417 
                                                      OpBranch %416 
                                             %418 = OpLabel 
                                Private f32* %419 = OpAccessChain %22 %30 
                                         f32 %420 = OpLoad %419 
                                                      OpStore %413 %420 
                                                      OpBranch %416 
                                             %416 = OpLabel 
                                         f32 %421 = OpLoad %413 
                                Private f32* %422 = OpAccessChain %22 %30 
                                                      OpStore %422 %421 
                                Private f32* %423 = OpAccessChain %22 %30 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpExtInst %1 40 %424 %74 
                                Private f32* %426 = OpAccessChain %22 %30 
                                                      OpStore %426 %425 
                                         f32 %427 = OpLoad %261 
                                       f32_3 %428 = OpCompositeConstruct %427 %427 %427 
                                       f32_3 %429 = OpExtInst %1 4 %428 
                                       f32_3 %431 = OpFAdd %429 %430 
                                       f32_4 %432 = OpLoad %110 
                                       f32_4 %433 = OpVectorShuffle %432 %431 4 5 6 3 
                                                      OpStore %110 %433 
                                       f32_4 %434 = OpLoad %110 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_3 %436 = OpExtInst %1 10 %435 
                                       f32_4 %437 = OpLoad %110 
                                       f32_4 %438 = OpVectorShuffle %437 %436 4 5 6 3 
                                                      OpStore %110 %438 
                                       f32_4 %439 = OpLoad %110 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                       f32_3 %442 = OpFMul %440 %441 
                                       f32_3 %445 = OpFAdd %442 %444 
                                       f32_4 %446 = OpLoad %110 
                                       f32_4 %447 = OpVectorShuffle %446 %445 4 5 6 3 
                                                      OpStore %110 %447 
                                       f32_4 %448 = OpLoad %110 
                                       f32_3 %449 = OpVectorShuffle %448 %448 0 1 2 
                                       f32_3 %450 = OpExtInst %1 4 %449 
                                       f32_3 %452 = OpFAdd %450 %451 
                                       f32_4 %453 = OpLoad %110 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 6 3 
                                                      OpStore %110 %454 
                                       f32_4 %455 = OpLoad %110 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpCompositeConstruct %74 %74 %74 
                                       f32_3 %458 = OpCompositeConstruct %108 %108 %108 
                                       f32_3 %459 = OpExtInst %1 43 %456 %457 %458 
                                       f32_4 %460 = OpLoad %110 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 6 3 
                                                      OpStore %110 %461 
                                       f32_4 %462 = OpLoad %110 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                       f32_3 %464 = OpFAdd %463 %451 
                                       f32_4 %465 = OpLoad %110 
                                       f32_4 %466 = OpVectorShuffle %465 %464 4 5 6 3 
                                                      OpStore %110 %466 
                                       f32_3 %467 = OpLoad %52 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 0 0 
                                       f32_4 %469 = OpLoad %110 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_3 %471 = OpFMul %468 %470 
                                       f32_3 %473 = OpFAdd %471 %472 
                                                      OpStore %52 %473 
                                       f32_3 %474 = OpLoad %52 
                                       f32_3 %475 = OpLoad %22 
                                       f32_3 %476 = OpVectorShuffle %475 %475 0 0 0 
                                       f32_3 %477 = OpFMul %474 %476 
                                                      OpStore %22 %477 
                                       f32_3 %478 = OpLoad %22 
                                       f32_3 %480 = OpFMul %478 %479 
                                       f32_4 %481 = OpLoad %110 
                                       f32_4 %482 = OpVectorShuffle %481 %480 4 5 6 3 
                                                      OpStore %110 %482 
                                Private f32* %484 = OpAccessChain %9 %30 
                                         f32 %485 = OpLoad %484 
                                         f32 %487 = OpFAdd %485 %486 
                                Private f32* %488 = OpAccessChain %483 %30 
                                                      OpStore %488 %487 
                                Private f32* %489 = OpAccessChain %483 %30 
                                         f32 %490 = OpLoad %489 
                                         f32 %492 = OpFMul %490 %491 
                                Private f32* %493 = OpAccessChain %483 %30 
                                                      OpStore %493 %492 
                                Private f32* %494 = OpAccessChain %483 %30 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpExtInst %1 43 %495 %74 %108 
                                Private f32* %497 = OpAccessChain %483 %30 
                                                      OpStore %497 %496 
                                       f32_3 %498 = OpLoad %22 
                                       f32_3 %499 = OpFNegate %498 
                                       f32_3 %500 = OpFMul %499 %479 
                                       f32_3 %504 = OpFAdd %500 %503 
                                                      OpStore %22 %504 
                                       f32_3 %505 = OpLoad %483 
                                       f32_3 %506 = OpVectorShuffle %505 %505 0 0 0 
                                       f32_3 %507 = OpLoad %22 
                                       f32_3 %508 = OpFMul %506 %507 
                                       f32_4 %509 = OpLoad %110 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                       f32_3 %511 = OpFAdd %508 %510 
                                                      OpStore %22 %511 
                                       f32_4 %513 = OpLoad %9 
                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
                                       f32_3 %516 = OpFMul %514 %515 
                                       f32_3 %517 = OpLoad %22 
                                       f32_3 %518 = OpFAdd %516 %517 
                                                      OpStore %512 %518 
                                Private f32* %519 = OpAccessChain %9 %196 
                                         f32 %520 = OpLoad %519 
                                Uniform f32* %522 = OpAccessChain %40 %521 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFNegate %523 
                                         f32 %525 = OpFAdd %520 %524 
                                Private f32* %526 = OpAccessChain %483 %30 
                                                      OpStore %526 %525 
                                Private f32* %528 = OpAccessChain %483 %30 
                                         f32 %529 = OpLoad %528 
                                        bool %530 = OpFOrdLessThan %529 %74 
                                                      OpStore %527 %530 
                                        bool %531 = OpLoad %527 
                                         i32 %533 = OpSelect %531 %532 %147 
                                         i32 %535 = OpIMul %533 %534 
                                        bool %536 = OpINotEqual %535 %147 
                                                      OpSelectionMerge %538 None 
                                                      OpBranchConditional %536 %537 %538 
                                             %537 = OpLabel 
                                                      OpKill
                                             %538 = OpLabel 
                                       f32_3 %540 = OpLoad %139 
                                       f32_2 %541 = OpVectorShuffle %540 %540 1 1 
                              Uniform f32_4* %543 = OpAccessChain %40 %542 %532 
                                       f32_4 %544 = OpLoad %543 
                                       f32_2 %545 = OpVectorShuffle %544 %544 0 1 
                                       f32_2 %546 = OpFMul %541 %545 
                                       f32_3 %547 = OpLoad %22 
                                       f32_3 %548 = OpVectorShuffle %547 %546 3 4 2 
                                                      OpStore %22 %548 
                              Uniform f32_4* %549 = OpAccessChain %40 %542 %147 
                                       f32_4 %550 = OpLoad %549 
                                       f32_2 %551 = OpVectorShuffle %550 %550 0 1 
                                       f32_3 %552 = OpLoad %139 
                                       f32_2 %553 = OpVectorShuffle %552 %552 0 0 
                                       f32_2 %554 = OpFMul %551 %553 
                                       f32_3 %555 = OpLoad %22 
                                       f32_2 %556 = OpVectorShuffle %555 %555 0 1 
                                       f32_2 %557 = OpFAdd %554 %556 
                                       f32_3 %558 = OpLoad %22 
                                       f32_3 %559 = OpVectorShuffle %558 %557 3 4 2 
                                                      OpStore %22 %559 
                              Uniform f32_4* %561 = OpAccessChain %40 %542 %560 
                                       f32_4 %562 = OpLoad %561 
                                       f32_2 %563 = OpVectorShuffle %562 %562 0 1 
                                       f32_3 %564 = OpLoad %139 
                                       f32_2 %565 = OpVectorShuffle %564 %564 2 2 
                                       f32_2 %566 = OpFMul %563 %565 
                                       f32_3 %567 = OpLoad %22 
                                       f32_2 %568 = OpVectorShuffle %567 %567 0 1 
                                       f32_2 %569 = OpFAdd %566 %568 
                                       f32_3 %570 = OpLoad %22 
                                       f32_3 %571 = OpVectorShuffle %570 %569 3 4 2 
                                                      OpStore %22 %571 
                                       f32_3 %572 = OpLoad %22 
                                       f32_2 %573 = OpVectorShuffle %572 %572 0 1 
                              Uniform f32_4* %575 = OpAccessChain %40 %542 %574 
                                       f32_4 %576 = OpLoad %575 
                                       f32_2 %577 = OpVectorShuffle %576 %576 0 1 
                                       f32_2 %578 = OpFAdd %573 %577 
                                       f32_3 %579 = OpLoad %22 
                                       f32_3 %580 = OpVectorShuffle %579 %578 3 4 2 
                                                      OpStore %22 %580 
                                Uniform f32* %582 = OpAccessChain %40 %560 %30 
                                         f32 %583 = OpLoad %582 
                                        bool %584 = OpFOrdEqual %583 %108 
                                                      OpStore %581 %584 
                                                      OpSelectionMerge %587 None 
                                                      OpBranchConditional %585 %586 %587 
                                             %586 = OpLabel 
                                        bool %588 = OpLoad %581 
                                                      OpSelectionMerge %590 None 
                                                      OpBranchConditional %588 %589 %590 
                                             %589 = OpLabel 
                                                      OpBranch %590 
                                             %590 = OpLabel 
                                                      OpBranch %587 
                                             %587 = OpLabel 
                                                      OpSelectionMerge %593 None 
                                                      OpBranchConditional %591 %592 %688 
                                             %592 = OpLabel 
                                Uniform f32* %594 = OpAccessChain %40 %560 %25 
                                         f32 %595 = OpLoad %594 
                                        bool %596 = OpFOrdEqual %595 %108 
                                                      OpStore %581 %596 
                                       f32_3 %597 = OpLoad %139 
                                       f32_3 %598 = OpVectorShuffle %597 %597 1 1 1 
                              Uniform f32_4* %599 = OpAccessChain %40 %574 %532 
                                       f32_4 %600 = OpLoad %599 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_3 %602 = OpFMul %598 %601 
                                       f32_4 %603 = OpLoad %110 
                                       f32_4 %604 = OpVectorShuffle %603 %602 4 5 6 3 
                                                      OpStore %110 %604 
                              Uniform f32_4* %605 = OpAccessChain %40 %574 %147 
                                       f32_4 %606 = OpLoad %605 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 1 2 
                                       f32_3 %608 = OpLoad %139 
                                       f32_3 %609 = OpVectorShuffle %608 %608 0 0 0 
                                       f32_3 %610 = OpFMul %607 %609 
                                       f32_4 %611 = OpLoad %110 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 1 2 
                                       f32_3 %613 = OpFAdd %610 %612 
                                       f32_4 %614 = OpLoad %110 
                                       f32_4 %615 = OpVectorShuffle %614 %613 4 5 6 3 
                                                      OpStore %110 %615 
                              Uniform f32_4* %616 = OpAccessChain %40 %574 %560 
                                       f32_4 %617 = OpLoad %616 
                                       f32_3 %618 = OpVectorShuffle %617 %617 0 1 2 
                                       f32_3 %619 = OpLoad %139 
                                       f32_3 %620 = OpVectorShuffle %619 %619 2 2 2 
                                       f32_3 %621 = OpFMul %618 %620 
                                       f32_4 %622 = OpLoad %110 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                                       f32_3 %624 = OpFAdd %621 %623 
                                       f32_4 %625 = OpLoad %110 
                                       f32_4 %626 = OpVectorShuffle %625 %624 4 5 6 3 
                                                      OpStore %110 %626 
                                       f32_4 %627 = OpLoad %110 
                                       f32_3 %628 = OpVectorShuffle %627 %627 0 1 2 
                              Uniform f32_4* %629 = OpAccessChain %40 %574 %574 
                                       f32_4 %630 = OpLoad %629 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
                                       f32_3 %632 = OpFAdd %628 %631 
                                       f32_4 %633 = OpLoad %110 
                                       f32_4 %634 = OpVectorShuffle %633 %632 4 5 6 3 
                                                      OpStore %110 %634 
                                        bool %637 = OpLoad %581 
                                                      OpSelectionMerge %639 None 
                                                      OpBranchConditional %637 %638 %642 
                                             %638 = OpLabel 
                                       f32_4 %640 = OpLoad %110 
                                       f32_3 %641 = OpVectorShuffle %640 %640 0 1 2 
                                                      OpStore %636 %641 
                                                      OpBranch %639 
                                             %642 = OpLabel 
                                       f32_3 %643 = OpLoad %139 
                                                      OpStore %636 %643 
                                                      OpBranch %639 
                                             %639 = OpLabel 
                                       f32_3 %644 = OpLoad %636 
                                       f32_4 %645 = OpLoad %110 
                                       f32_4 %646 = OpVectorShuffle %645 %644 4 5 6 3 
                                                      OpStore %110 %646 
                                       f32_4 %647 = OpLoad %110 
                                       f32_3 %648 = OpVectorShuffle %647 %647 0 1 2 
                              Uniform f32_3* %651 = OpAccessChain %40 %649 
                                       f32_3 %652 = OpLoad %651 
                                       f32_3 %653 = OpFNegate %652 
                                       f32_3 %654 = OpFAdd %648 %653 
                                       f32_4 %655 = OpLoad %110 
                                       f32_4 %656 = OpVectorShuffle %655 %654 4 5 6 3 
                                                      OpStore %110 %656 
                                       f32_4 %657 = OpLoad %110 
                                       f32_3 %658 = OpVectorShuffle %657 %657 0 1 2 
                              Uniform f32_3* %660 = OpAccessChain %40 %659 
                                       f32_3 %661 = OpLoad %660 
                                       f32_3 %662 = OpFMul %658 %661 
                                       f32_4 %663 = OpLoad %110 
                                       f32_4 %664 = OpVectorShuffle %663 %662 0 4 5 6 
                                                      OpStore %110 %664 
                                Private f32* %665 = OpAccessChain %110 %25 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpFMul %666 %360 
                                         f32 %669 = OpFAdd %667 %668 
                                                      OpStore %261 %669 
                                Uniform f32* %670 = OpAccessChain %40 %560 %153 
                                         f32 %671 = OpLoad %670 
                                         f32 %672 = OpFMul %671 %331 
                                         f32 %673 = OpFAdd %672 %668 
                                                      OpStore %95 %673 
                                         f32 %674 = OpLoad %95 
                                         f32 %675 = OpLoad %261 
                                         f32 %676 = OpExtInst %1 40 %674 %675 
                                Private f32* %677 = OpAccessChain %110 %30 
                                                      OpStore %677 %676 
                  read_only Texture3DSampled %682 = OpLoad %681 
                                       f32_4 %683 = OpLoad %110 
                                       f32_3 %684 = OpVectorShuffle %683 %683 0 2 3 
                                       f32_4 %685 = OpImageSampleImplicitLod %682 %684 
                                                      OpStore %110 %685 
                                       f32_4 %687 = OpLoad %110 
                                                      OpStore %686 %687 
                                                      OpBranch %593 
                                             %688 = OpLabel 
                                Private f32* %689 = OpAccessChain %686 %30 
                                                      OpStore %689 %108 
                                Private f32* %690 = OpAccessChain %686 %25 
                                                      OpStore %690 %108 
                                Private f32* %691 = OpAccessChain %686 %153 
                                                      OpStore %691 %108 
                                Private f32* %692 = OpAccessChain %686 %196 
                                                      OpStore %692 %108 
                                                      OpBranch %593 
                                             %593 = OpLabel 
                                       f32_4 %693 = OpLoad %686 
                              Uniform f32_4* %694 = OpAccessChain %40 %532 
                                       f32_4 %695 = OpLoad %694 
                                         f32 %696 = OpDot %693 %695 
                                Private f32* %697 = OpAccessChain %483 %30 
                                                      OpStore %697 %696 
                                Private f32* %698 = OpAccessChain %483 %30 
                                         f32 %699 = OpLoad %698 
                                         f32 %700 = OpExtInst %1 43 %699 %74 %108 
                                Private f32* %701 = OpAccessChain %483 %30 
                                                      OpStore %701 %700 
                  read_only Texture2DSampled %703 = OpLoad %702 
                                       f32_3 %704 = OpLoad %22 
                                       f32_2 %705 = OpVectorShuffle %704 %704 0 1 
                                       f32_4 %706 = OpImageSampleImplicitLod %703 %705 
                                         f32 %707 = OpCompositeExtract %706 3 
                                Private f32* %708 = OpAccessChain %22 %30 
                                                      OpStore %708 %707 
                                Private f32* %709 = OpAccessChain %483 %30 
                                         f32 %710 = OpLoad %709 
                                Private f32* %711 = OpAccessChain %22 %30 
                                         f32 %712 = OpLoad %711 
                                         f32 %713 = OpFMul %710 %712 
                                Private f32* %714 = OpAccessChain %22 %30 
                                                      OpStore %714 %713 
                                       f32_3 %715 = OpLoad %512 
                              Uniform f32_4* %717 = OpAccessChain %40 %716 
                                       f32_4 %718 = OpLoad %717 
                                       f32_3 %719 = OpVectorShuffle %718 %718 0 1 2 
                                       f32_3 %720 = OpFMul %715 %719 
                                                      OpStore %483 %720 
                                       f32_3 %723 = OpLoad %22 
                                       f32_3 %724 = OpVectorShuffle %723 %723 0 0 0 
                                       f32_3 %725 = OpLoad %483 
                                       f32_3 %726 = OpFMul %724 %725 
                                       f32_4 %727 = OpLoad %722 
                                       f32_4 %728 = OpVectorShuffle %727 %726 4 5 6 3 
                                                      OpStore %722 %728 
                                Private f32* %729 = OpAccessChain %9 %196 
                                         f32 %730 = OpLoad %729 
                                 Output f32* %732 = OpAccessChain %722 %196 
                                                      OpStore %732 %730 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "META"
  LOD 9001
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "META" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 170290
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD2;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    vs_TEXCOORD2.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _OverrideColor;
uniform 	float _StepValue;
uniform 	float _SkyBoost;
uniform 	float _SkyPower;
uniform 	float _CurvePower;
uniform 	float _CurveColorFactor;
uniform 	float _CurveFreq;
uniform 	float _DitherCohesionFactor;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec3 u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat12;
float u_xlat16_12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat12 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = log2(vs_TEXCOORD2.y);
    u_xlat12 = u_xlat12 * _SkyPower;
    u_xlat12 = exp2(u_xlat12);
    u_xlat1.x = vs_TEXCOORD2.y * vs_TEXCOORD2.y;
    u_xlat12 = u_xlat1.x * _SkyBoost + u_xlat12;
    u_xlatb1 = u_xlat12<0.0;
    u_xlat12 = (u_xlatb1) ? -1.0 : u_xlat12;
    u_xlat1.xyz = vec3(u_xlat12) * _OverrideColor.xyz;
    u_xlat12 = vs_TEXCOORD2.x * _CurveFreq;
    u_xlat12 = u_xlat12 * 3.1400001;
    u_xlat12 = sin(u_xlat12);
    u_xlat12 = u_xlat12 + 1.0;
    u_xlat13 = _CurveColorFactor + _CurveColorFactor;
    u_xlat12 = u_xlat12 / u_xlat13;
    u_xlat12 = u_xlat12 + -1.0;
    u_xlat12 = _CurvePower * u_xlat12 + 1.0;
    u_xlat2.xyw = vec3(u_xlat12) * u_xlat1.yzx;
    u_xlat3.xy = u_xlat2.yx;
    u_xlat1.xy = u_xlat1.yz * vec2(u_xlat12) + (-u_xlat3.xy);
    u_xlatb12 = u_xlat3.y>=u_xlat2.y;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat3.z = float(-1.0);
    u_xlat3.w = float(0.666666687);
    u_xlat1.z = float(1.0);
    u_xlat1.w = float(-1.0);
    u_xlat1 = vec4(u_xlat12) * u_xlat1 + u_xlat3;
    u_xlatb12 = u_xlat2.w>=u_xlat1.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat1.xyw;
    u_xlat1.xyw = u_xlat2.wyx;
    u_xlat1 = (-u_xlat2) + u_xlat1;
    u_xlat1 = vec4(u_xlat12) * u_xlat1 + u_xlat2;
    u_xlat12 = min(u_xlat1.y, u_xlat1.w);
    u_xlat12 = (-u_xlat12) + u_xlat1.x;
    u_xlat2.x = u_xlat12 * 6.0 + 1.00000001e-010;
    u_xlat5.x = (-u_xlat1.y) + u_xlat1.w;
    u_xlat5.x = u_xlat5.x / u_xlat2.x;
    u_xlat5.x = u_xlat5.x + u_xlat1.z;
    u_xlat5.xyz = abs(u_xlat5.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat5.xyz = fract(u_xlat5.xyz);
    u_xlat5.xyz = u_xlat5.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat5.xyz = abs(u_xlat5.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = clamp(u_xlat5.xyz, 0.0, 1.0);
    u_xlat5.xyz = u_xlat5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = u_xlat1.x + 1.00000001e-010;
    u_xlat12 = u_xlat12 / u_xlat2.x;
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat2.x = vs_TEXCOORD1.x * 0.0799999982;
    u_xlat3.xyz = vs_TEXCOORD1.xyy * vec3(0.00999999978, 0.00999999978, 0.0799999982);
    u_xlat2.y = (-_Time.x) * 0.333333343 + u_xlat3.z;
    u_xlat10_2 = texture(_NoiseTex, u_xlat2.xy);
    u_xlat16_12 = log2(u_xlat10_2.x);
    u_xlat16_12 = u_xlat16_12 * 1.5;
    u_xlat16_12 = exp2(u_xlat16_12);
    u_xlat12 = (-u_xlat16_12) * 2.0 + u_xlat1.x;
    u_xlat12 = u_xlat12 / _StepValue;
    u_xlat1.x = u_xlat3.y + u_xlat3.x;
    u_xlat2.x = dot(u_xlat3.xy, vec2(12.9898005, 78.2330017));
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 43758.5469;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat6 = u_xlat1.x + (-_Time.z);
    u_xlat2.y = sin(u_xlat6);
    u_xlat2.xy = u_xlat2.xy + vec2(-0.5, 1.0);
    u_xlat6 = u_xlat2.y * 0.5;
    u_xlat10 = u_xlat1.x + _Time.z;
    u_xlat1.x = u_xlat1.x * 0.5;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlatb1 = 0.25<u_xlat1.x;
    u_xlat10 = sin(u_xlat10);
    u_xlat10 = u_xlat10 * 0.099999994 + 0.150000006;
    u_xlat6 = u_xlat6 * u_xlat10 + 0.349999994;
    u_xlat10 = u_xlat12 + (-u_xlat6);
    u_xlat12 = u_xlat12 + u_xlat6;
    u_xlat12 = u_xlat2.x * _DitherCohesionFactor + u_xlat12;
    u_xlat2.x = (-u_xlat2.x) * _DitherCohesionFactor + u_xlat10;
    u_xlat2.x = ceil(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _StepValue;
    u_xlat12 = roundEven(u_xlat12);
    u_xlat12 = u_xlat12 * _StepValue;
    u_xlat12 = (u_xlatb1) ? u_xlat2.x : u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12);
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(0.5, 0.5, 0.5) + vec3(0.0299999993, 0.0, 0.0700000003);
    u_xlat16_12 = u_xlat10_0.x + -0.00999999978;
    u_xlat16_12 = u_xlat16_12 * 1000.0;
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
    u_xlat1.xyz = vec3(u_xlat16_12) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat12 = unity_OneOverOutputBoost;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 284
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %13 %32 %89 %166 %200 %259 %265 %266 
                                                      OpDecorate %13 Location 13 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %164 0 BuiltIn 164 
                                                      OpMemberDecorate %164 1 BuiltIn 164 
                                                      OpMemberDecorate %164 2 BuiltIn 164 
                                                      OpDecorate %164 Block 
                                                      OpDecorate %200 Location 200 
                                                      OpDecorate %259 Location 259 
                                                      OpDecorate %265 Location 265 
                                                      OpDecorate %266 Location 266 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypePointer Input %11 
                                 Input f32_4* %13 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 2 
                                              %16 = OpTypePointer Input %9 
                                              %20 = OpTypePointer Private %11 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypePointer Function %9 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %30 = OpTypePointer Private %9 
                                 Input f32_4* %32 = OpVariable Input 
                                              %33 = OpTypeVector %9 2 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %11 %36 
                                              %38 = OpTypeArray %11 %36 
                                              %39 = OpTypeVector %14 4 
                                              %40 = OpTypeStruct %37 %38 %11 %11 %39 %11 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 2 
                                              %45 = OpTypePointer Uniform %11 
                                              %56 = OpTypeVector %9 3 
                                              %57 = OpTypePointer Function %56 
                                          i32 %59 = OpConstant 4 
                                              %60 = OpTypeVector %6 4 
                                              %61 = OpTypePointer Uniform %39 
                                          u32 %65 = OpConstant 0 
                                Private bool* %77 = OpVariable Private 
                               Private f32_4* %81 = OpVariable Private 
                                 Input f32_4* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                                         i32 %120 = OpConstant 0 
                                         i32 %121 = OpConstant 1 
                                         u32 %162 = OpConstant 1 
                                             %163 = OpTypeArray %9 %162 
                                             %164 = OpTypeStruct %11 %9 %163 
                                             %165 = OpTypePointer Output %164 
        Output struct {f32_4; f32; f32[1];}* %166 = OpVariable Output 
                                             %174 = OpTypePointer Output %11 
                                             %199 = OpTypePointer Output %56 
                               Output f32_3* %200 = OpVariable Output 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_2 %254 = OpConstantComposite %253 %253 
                                             %258 = OpTypePointer Output %33 
                               Output f32_2* %259 = OpVariable Output 
                                         f32 %262 = OpConstant 3.674022E-40 
                                       f32_2 %263 = OpConstantComposite %262 %262 
                               Output f32_2* %265 = OpVariable Output 
                                Input f32_4* %266 = OpVariable Input 
                                         i32 %269 = OpConstant 5 
                                             %278 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %23 = OpVariable Function 
                              Function f32_3* %58 = OpVariable Function 
                                Function f32* %82 = OpVariable Function 
                             Function f32_3* %103 = OpVariable Function 
                                   Input f32* %17 = OpAccessChain %13 %15 
                                          f32 %18 = OpLoad %17 
                                         bool %19 = OpFOrdLessThan %10 %18 
                                                      OpStore %8 %19 
                                         bool %24 = OpLoad %8 
                                                      OpSelectionMerge %26 None 
                                                      OpBranchConditional %24 %25 %28 
                                              %25 = OpLabel 
                                                      OpStore %23 %27 
                                                      OpBranch %26 
                                              %28 = OpLabel 
                                                      OpStore %23 %10 
                                                      OpBranch %26 
                                              %26 = OpLabel 
                                          f32 %29 = OpLoad %23 
                                 Private f32* %31 = OpAccessChain %21 %15 
                                                      OpStore %31 %29 
                                        f32_4 %34 = OpLoad %32 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                        f32_4 %54 = OpLoad %21 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 2 3 
                                                      OpStore %21 %55 
                               Uniform u32_4* %62 = OpAccessChain %42 %59 
                                        u32_4 %63 = OpLoad %62 
                                          u32 %64 = OpCompositeExtract %63 0 
                                         bool %66 = OpINotEqual %64 %65 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %71 
                                              %67 = OpLabel 
                                        f32_4 %69 = OpLoad %21 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %58 %70 
                                                      OpBranch %68 
                                              %71 = OpLabel 
                                        f32_4 %72 = OpLoad %13 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                                      OpStore %58 %73 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                        f32_3 %74 = OpLoad %58 
                                        f32_4 %75 = OpLoad %21 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %21 %76 
                                 Private f32* %78 = OpAccessChain %21 %15 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %10 %79 
                                                      OpStore %77 %80 
                                         bool %83 = OpLoad %77 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %86 
                                              %84 = OpLabel 
                                                      OpStore %82 %27 
                                                      OpBranch %85 
                                              %86 = OpLabel 
                                                      OpStore %82 %10 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %87 = OpLoad %82 
                                 Private f32* %88 = OpAccessChain %81 %15 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                               Uniform f32_4* %93 = OpAccessChain %42 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                        f32_2 %96 = OpFMul %91 %95 
                               Uniform f32_4* %97 = OpAccessChain %42 %92 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 2 3 
                                       f32_2 %100 = OpFAdd %96 %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %81 %102 
                              Uniform u32_4* %104 = OpAccessChain %42 %59 
                                       u32_4 %105 = OpLoad %104 
                                         u32 %106 = OpCompositeExtract %105 1 
                                        bool %107 = OpINotEqual %106 %65 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %81 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %103 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_4 %113 = OpLoad %21 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %103 %114 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %115 = OpLoad %103 
                                       f32_4 %116 = OpLoad %21 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %21 %117 
                                       f32_4 %118 = OpLoad %21 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %122 = OpAccessChain %42 %120 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpFMul %119 %123 
                                                      OpStore %81 %124 
                              Uniform f32_4* %125 = OpAccessChain %42 %120 %120 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %21 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %81 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %81 %131 
                              Uniform f32_4* %132 = OpAccessChain %42 %120 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpLoad %21 
                                       f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
                                       f32_4 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %81 
                                       f32_4 %138 = OpFAdd %136 %137 
                                                      OpStore %21 %138 
                                       f32_4 %139 = OpLoad %21 
                              Uniform f32_4* %140 = OpAccessChain %42 %120 %92 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpFAdd %139 %141 
                                                      OpStore %21 %142 
                                       f32_4 %143 = OpLoad %21 
                                       f32_4 %144 = OpVectorShuffle %143 %143 1 1 1 1 
                              Uniform f32_4* %145 = OpAccessChain %42 %121 %121 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %144 %146 
                                                      OpStore %81 %147 
                              Uniform f32_4* %148 = OpAccessChain %42 %121 %120 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpLoad %21 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 0 0 0 
                                       f32_4 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %81 
                                       f32_4 %154 = OpFAdd %152 %153 
                                                      OpStore %81 %154 
                              Uniform f32_4* %155 = OpAccessChain %42 %121 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_4 %157 = OpLoad %21 
                                       f32_4 %158 = OpVectorShuffle %157 %157 2 2 2 2 
                                       f32_4 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpFAdd %159 %160 
                                                      OpStore %81 %161 
                              Uniform f32_4* %167 = OpAccessChain %42 %121 %92 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %21 
                                       f32_4 %170 = OpVectorShuffle %169 %169 3 3 3 3 
                                       f32_4 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %81 
                                       f32_4 %173 = OpFAdd %171 %172 
                               Output f32_4* %175 = OpAccessChain %166 %120 
                                                      OpStore %175 %173 
                                       f32_4 %176 = OpLoad %13 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 1 1 1 
                              Uniform f32_4* %178 = OpAccessChain %42 %120 %121 
                                       f32_4 %179 = OpLoad %178 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %21 %180 
                              Uniform f32_4* %181 = OpAccessChain %42 %120 %120 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %13 
                                       f32_4 %184 = OpVectorShuffle %183 %183 0 0 0 0 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %21 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %21 %187 
                              Uniform f32_4* %188 = OpAccessChain %42 %120 %44 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %13 
                                       f32_4 %191 = OpVectorShuffle %190 %190 2 2 2 2 
                                       f32_4 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %21 
                                       f32_4 %194 = OpFAdd %192 %193 
                                                      OpStore %21 %194 
                                       f32_4 %195 = OpLoad %21 
                              Uniform f32_4* %196 = OpAccessChain %42 %120 %92 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpFAdd %195 %197 
                                                      OpStore %81 %198 
                              Uniform f32_4* %201 = OpAccessChain %42 %120 %92 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                       f32_4 %204 = OpLoad %13 
                                       f32_3 %205 = OpVectorShuffle %204 %204 3 3 3 
                                       f32_3 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %21 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFAdd %206 %208 
                                                      OpStore %200 %209 
                                       f32_4 %210 = OpLoad %81 
                                       f32_2 %211 = OpVectorShuffle %210 %210 1 1 
                              Uniform f32_4* %212 = OpAccessChain %42 %121 %121 
                                       f32_4 %213 = OpLoad %212 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                                       f32_2 %215 = OpFMul %211 %214 
                                       f32_4 %216 = OpLoad %21 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 2 3 
                                                      OpStore %21 %217 
                              Uniform f32_4* %218 = OpAccessChain %42 %121 %120 
                                       f32_4 %219 = OpLoad %218 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_4 %221 = OpLoad %81 
                                       f32_2 %222 = OpVectorShuffle %221 %221 0 0 
                                       f32_2 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %21 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 1 
                                       f32_2 %226 = OpFAdd %223 %225 
                                       f32_4 %227 = OpLoad %21 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore %21 %228 
                              Uniform f32_4* %229 = OpAccessChain %42 %121 %44 
                                       f32_4 %230 = OpLoad %229 
                                       f32_2 %231 = OpVectorShuffle %230 %230 0 1 
                                       f32_4 %232 = OpLoad %81 
                                       f32_2 %233 = OpVectorShuffle %232 %232 2 2 
                                       f32_2 %234 = OpFMul %231 %233 
                                       f32_4 %235 = OpLoad %21 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                                       f32_2 %237 = OpFAdd %234 %236 
                                       f32_4 %238 = OpLoad %21 
                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 2 3 
                                                      OpStore %21 %239 
                              Uniform f32_4* %240 = OpAccessChain %42 %121 %92 
                                       f32_4 %241 = OpLoad %240 
                                       f32_2 %242 = OpVectorShuffle %241 %241 0 1 
                                       f32_4 %243 = OpLoad %81 
                                       f32_2 %244 = OpVectorShuffle %243 %243 3 3 
                                       f32_2 %245 = OpFMul %242 %244 
                                       f32_4 %246 = OpLoad %21 
                                       f32_2 %247 = OpVectorShuffle %246 %246 0 1 
                                       f32_2 %248 = OpFAdd %245 %247 
                                       f32_4 %249 = OpLoad %21 
                                       f32_4 %250 = OpVectorShuffle %249 %248 4 5 2 3 
                                                      OpStore %21 %250 
                                       f32_4 %251 = OpLoad %21 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 1 
                                       f32_2 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %21 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
                                                      OpStore %21 %257 
                                       f32_4 %260 = OpLoad %21 
                                       f32_2 %261 = OpVectorShuffle %260 %260 0 1 
                                       f32_2 %264 = OpFMul %261 %263 
                                                      OpStore %259 %264 
                                       f32_4 %267 = OpLoad %266 
                                       f32_2 %268 = OpVectorShuffle %267 %267 0 1 
                              Uniform f32_4* %270 = OpAccessChain %42 %269 
                                       f32_4 %271 = OpLoad %270 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
                                       f32_2 %273 = OpFMul %268 %272 
                              Uniform f32_4* %274 = OpAccessChain %42 %269 
                                       f32_4 %275 = OpLoad %274 
                                       f32_2 %276 = OpVectorShuffle %275 %275 2 3 
                                       f32_2 %277 = OpFAdd %273 %276 
                                                      OpStore %265 %277 
                                 Output f32* %279 = OpAccessChain %166 %120 %162 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFNegate %280 
                                 Output f32* %282 = OpAccessChain %166 %120 %162 
                                                      OpStore %282 %281 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 594
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %54 %304 %580 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpMemberDecorate %27 8 Offset 27 
                                                      OpMemberDecorate %27 9 Offset 27 
                                                      OpMemberDecorate %27 10 Offset 27 
                                                      OpMemberDecorate %27 11 Offset 27 
                                                      OpMemberDecorate %27 12 RelaxedPrecision 
                                                      OpMemberDecorate %27 12 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %54 Location 54 
                                                      OpDecorate %304 Location 304 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %326 DescriptorSet 326 
                                                      OpDecorate %326 Binding 326 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %577 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %580 Location 580 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 3 
                                              %26 = OpTypeVector %22 4 
                                              %27 = OpTypeStruct %7 %7 %6 %6 %6 %6 %6 %6 %6 %26 %6 %6 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; u32_4; f32; f32; f32;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 12 
                                              %32 = OpTypePointer Uniform %6 
                                              %37 = OpTypeBool 
                                              %38 = OpTypePointer Private %37 
                                Private bool* %39 = OpVariable Private 
                                          f32 %41 = OpConstant 3.674022E-40 
                                          i32 %44 = OpConstant 0 
                                          i32 %45 = OpConstant 1 
                                          i32 %47 = OpConstant -1 
                                 Private f32* %53 = OpVariable Private 
                                 Input f32_2* %54 = OpVariable Input 
                                          u32 %55 = OpConstant 1 
                                              %56 = OpTypePointer Input %6 
                                          i32 %61 = OpConstant 4 
                               Private f32_4* %67 = OpVariable Private 
                                          u32 %73 = OpConstant 0 
                                          i32 %77 = OpConstant 3 
                                Private bool* %83 = OpVariable Private 
                                              %86 = OpTypePointer Function %6 
                                          f32 %91 = OpConstant 3.674022E-40 
                                              %96 = OpTypeVector %6 3 
                                              %98 = OpTypePointer Uniform %7 
                                         i32 %107 = OpConstant 7 
                                         f32 %112 = OpConstant 3.674022E-40 
                                         f32 %117 = OpConstant 3.674022E-40 
                                Private f32* %119 = OpVariable Private 
                                         i32 %120 = OpConstant 6 
                                         i32 %131 = OpConstant 5 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %145 = OpVariable Private 
                                         u32 %172 = OpConstant 2 
                                         f32 %174 = OpConstant 3.674022E-40 
                                         f32 %224 = OpConstant 3.674022E-40 
                                         f32 %226 = OpConstant 3.674022E-40 
                                Private f32* %229 = OpVariable Private 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %117 %174 %250 
                                       f32_3 %262 = OpConstantComposite %224 %224 %224 
                                         f32 %264 = OpConstant 3.674022E-40 
                                       f32_3 %265 = OpConstantComposite %264 %264 %264 
                                       f32_3 %272 = OpConstantComposite %91 %91 %91 
                                       f32_3 %299 = OpConstantComposite %117 %117 %117 
                                             %303 = OpTypePointer Input %96 
                                Input f32_3* %304 = OpVariable Input 
                                         f32 %307 = OpConstant 3.674022E-40 
                                             %310 = OpTypePointer Private %96 
                              Private f32_3* %311 = OpVariable Private 
                                         f32 %314 = OpConstant 3.674022E-40 
                                       f32_3 %315 = OpConstantComposite %314 %314 %307 
                                Private f32* %325 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %326 = OpVariable UniformConstant 
                                Private f32* %332 = OpVariable Private 
                                         f32 %336 = OpConstant 3.674022E-40 
                                         f32 %342 = OpConstant 3.674022E-40 
                                         i32 %348 = OpConstant 2 
                                         f32 %359 = OpConstant 3.674022E-40 
                                         f32 %360 = OpConstant 3.674022E-40 
                                       f32_2 %361 = OpConstantComposite %359 %360 
                                         f32 %370 = OpConstant 3.674022E-40 
                                Private f32* %377 = OpVariable Private 
                                         f32 %388 = OpConstant 3.674022E-40 
                                       f32_2 %389 = OpConstantComposite %388 %117 
                                         f32 %395 = OpConstant 3.674022E-40 
                                Private f32* %397 = OpVariable Private 
                               Private bool* %406 = OpVariable Private 
                                         f32 %407 = OpConstant 3.674022E-40 
                                         f32 %413 = OpConstant 3.674022E-40 
                                         f32 %415 = OpConstant 3.674022E-40 
                                         f32 %420 = OpConstant 3.674022E-40 
                                         i32 %431 = OpConstant 8 
                                       f32_3 %482 = OpConstantComposite %395 %395 %395 
                                         f32 %490 = OpConstant 3.674022E-40 
                                         f32 %491 = OpConstant 3.674022E-40 
                                       f32_3 %492 = OpConstantComposite %490 %41 %491 
                                Private f32* %496 = OpVariable Private 
                                         f32 %499 = OpConstant 3.674022E-40 
                                         f32 %502 = OpConstant 3.674022E-40 
                              Private f32_3* %516 = OpVariable Private 
                                       f32_3 %519 = OpConstantComposite %342 %342 %342 
                                         i32 %526 = OpConstant 10 
                                         i32 %538 = OpConstant 11 
                              Private f32_4* %551 = OpVariable Private 
                                             %552 = OpTypePointer Function %96 
                                         i32 %554 = OpConstant 9 
                                             %555 = OpTypeVector %37 4 
                                             %556 = OpTypePointer Uniform %26 
                                       f32_3 %565 = OpConstantComposite %41 %41 %41 
                                             %579 = OpTypePointer Output %7 
                               Output f32_4* %580 = OpVariable Output 
                                             %581 = OpTypePointer Function %7 
                                       f32_4 %589 = OpConstantComposite %41 %41 %41 %117 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %87 = OpVariable Function 
                               Function f32* %166 = OpVariable Function 
                               Function f32* %189 = OpVariable Function 
                               Function f32* %462 = OpVariable Function 
                             Function f32_3* %553 = OpVariable Function 
                               Function f32* %569 = OpVariable Function 
                             Function f32_4* %582 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %23 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %33 = OpAccessChain %29 %31 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFNegate %34 
                                          f32 %36 = OpFAdd %25 %35 
                                                      OpStore %21 %36 
                                          f32 %40 = OpLoad %21 
                                         bool %42 = OpFOrdLessThan %40 %41 
                                                      OpStore %39 %42 
                                         bool %43 = OpLoad %39 
                                          i32 %46 = OpSelect %43 %45 %44 
                                          i32 %48 = OpIMul %46 %47 
                                         bool %49 = OpINotEqual %48 %44 
                                                      OpSelectionMerge %51 None 
                                                      OpBranchConditional %49 %50 %51 
                                              %50 = OpLabel 
                                                      OpKill
                                              %51 = OpLabel 
                                   Input f32* %57 = OpAccessChain %54 %55 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpExtInst %1 30 %58 
                                                      OpStore %53 %59 
                                          f32 %60 = OpLoad %53 
                                 Uniform f32* %62 = OpAccessChain %29 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFMul %60 %63 
                                                      OpStore %53 %64 
                                          f32 %65 = OpLoad %53 
                                          f32 %66 = OpExtInst %1 29 %65 
                                                      OpStore %53 %66 
                                   Input f32* %68 = OpAccessChain %54 %55 
                                          f32 %69 = OpLoad %68 
                                   Input f32* %70 = OpAccessChain %54 %55 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFMul %69 %71 
                                 Private f32* %74 = OpAccessChain %67 %73 
                                                      OpStore %74 %72 
                                 Private f32* %75 = OpAccessChain %67 %73 
                                          f32 %76 = OpLoad %75 
                                 Uniform f32* %78 = OpAccessChain %29 %77 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFMul %76 %79 
                                          f32 %81 = OpLoad %53 
                                          f32 %82 = OpFAdd %80 %81 
                                                      OpStore %53 %82 
                                          f32 %84 = OpLoad %53 
                                         bool %85 = OpFOrdLessThan %84 %41 
                                                      OpStore %83 %85 
                                         bool %88 = OpLoad %83 
                                                      OpSelectionMerge %90 None 
                                                      OpBranchConditional %88 %89 %92 
                                              %89 = OpLabel 
                                                      OpStore %87 %91 
                                                      OpBranch %90 
                                              %92 = OpLabel 
                                          f32 %93 = OpLoad %53 
                                                      OpStore %87 %93 
                                                      OpBranch %90 
                                              %90 = OpLabel 
                                          f32 %94 = OpLoad %87 
                                                      OpStore %53 %94 
                                          f32 %95 = OpLoad %53 
                                        f32_3 %97 = OpCompositeConstruct %95 %95 %95 
                               Uniform f32_4* %99 = OpAccessChain %29 %45 
                                       f32_4 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_3 %102 = OpFMul %97 %101 
                                       f32_4 %103 = OpLoad %67 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %67 %104 
                                  Input f32* %105 = OpAccessChain %54 %73 
                                         f32 %106 = OpLoad %105 
                                Uniform f32* %108 = OpAccessChain %29 %107 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFMul %106 %109 
                                                      OpStore %53 %110 
                                         f32 %111 = OpLoad %53 
                                         f32 %113 = OpFMul %111 %112 
                                                      OpStore %53 %113 
                                         f32 %114 = OpLoad %53 
                                         f32 %115 = OpExtInst %1 13 %114 
                                                      OpStore %53 %115 
                                         f32 %116 = OpLoad %53 
                                         f32 %118 = OpFAdd %116 %117 
                                                      OpStore %53 %118 
                                Uniform f32* %121 = OpAccessChain %29 %120 
                                         f32 %122 = OpLoad %121 
                                Uniform f32* %123 = OpAccessChain %29 %120 
                                         f32 %124 = OpLoad %123 
                                         f32 %125 = OpFAdd %122 %124 
                                                      OpStore %119 %125 
                                         f32 %126 = OpLoad %53 
                                         f32 %127 = OpLoad %119 
                                         f32 %128 = OpFDiv %126 %127 
                                                      OpStore %53 %128 
                                         f32 %129 = OpLoad %53 
                                         f32 %130 = OpFAdd %129 %91 
                                                      OpStore %53 %130 
                                Uniform f32* %132 = OpAccessChain %29 %131 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpLoad %53 
                                         f32 %135 = OpFMul %133 %134 
                                         f32 %136 = OpFAdd %135 %117 
                                                      OpStore %53 %136 
                                         f32 %138 = OpLoad %53 
                                       f32_3 %139 = OpCompositeConstruct %138 %138 %138 
                                       f32_4 %140 = OpLoad %67 
                                       f32_3 %141 = OpVectorShuffle %140 %140 1 2 0 
                                       f32_3 %142 = OpFMul %139 %141 
                                       f32_4 %143 = OpLoad %137 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 2 6 
                                                      OpStore %137 %144 
                                       f32_4 %146 = OpLoad %137 
                                       f32_2 %147 = OpVectorShuffle %146 %146 1 0 
                                       f32_4 %148 = OpLoad %145 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 2 3 
                                                      OpStore %145 %149 
                                       f32_4 %150 = OpLoad %67 
                                       f32_2 %151 = OpVectorShuffle %150 %150 1 2 
                                         f32 %152 = OpLoad %53 
                                       f32_2 %153 = OpCompositeConstruct %152 %152 
                                       f32_2 %154 = OpFMul %151 %153 
                                       f32_4 %155 = OpLoad %145 
                                       f32_2 %156 = OpVectorShuffle %155 %155 0 1 
                                       f32_2 %157 = OpFNegate %156 
                                       f32_2 %158 = OpFAdd %154 %157 
                                       f32_4 %159 = OpLoad %67 
                                       f32_4 %160 = OpVectorShuffle %159 %158 4 5 2 3 
                                                      OpStore %67 %160 
                                Private f32* %161 = OpAccessChain %145 %55 
                                         f32 %162 = OpLoad %161 
                                Private f32* %163 = OpAccessChain %137 %55 
                                         f32 %164 = OpLoad %163 
                                        bool %165 = OpFOrdGreaterThanEqual %162 %164 
                                                      OpStore %39 %165 
                                        bool %167 = OpLoad %39 
                                                      OpSelectionMerge %169 None 
                                                      OpBranchConditional %167 %168 %170 
                                             %168 = OpLabel 
                                                      OpStore %166 %117 
                                                      OpBranch %169 
                                             %170 = OpLabel 
                                                      OpStore %166 %41 
                                                      OpBranch %169 
                                             %169 = OpLabel 
                                         f32 %171 = OpLoad %166 
                                                      OpStore %53 %171 
                                Private f32* %173 = OpAccessChain %145 %172 
                                                      OpStore %173 %91 
                                Private f32* %175 = OpAccessChain %145 %23 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %67 %172 
                                                      OpStore %176 %117 
                                Private f32* %177 = OpAccessChain %67 %23 
                                                      OpStore %177 %91 
                                         f32 %178 = OpLoad %53 
                                       f32_4 %179 = OpCompositeConstruct %178 %178 %178 %178 
                                       f32_4 %180 = OpLoad %67 
                                       f32_4 %181 = OpFMul %179 %180 
                                       f32_4 %182 = OpLoad %145 
                                       f32_4 %183 = OpFAdd %181 %182 
                                                      OpStore %67 %183 
                                Private f32* %184 = OpAccessChain %137 %23 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %67 %73 
                                         f32 %187 = OpLoad %186 
                                        bool %188 = OpFOrdGreaterThanEqual %185 %187 
                                                      OpStore %39 %188 
                                        bool %190 = OpLoad %39 
                                                      OpSelectionMerge %192 None 
                                                      OpBranchConditional %190 %191 %193 
                                             %191 = OpLabel 
                                                      OpStore %189 %117 
                                                      OpBranch %192 
                                             %193 = OpLabel 
                                                      OpStore %189 %41 
                                                      OpBranch %192 
                                             %192 = OpLabel 
                                         f32 %194 = OpLoad %189 
                                                      OpStore %53 %194 
                                       f32_4 %195 = OpLoad %67 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 3 
                                       f32_4 %197 = OpLoad %137 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %137 %198 
                                       f32_4 %199 = OpLoad %137 
                                       f32_3 %200 = OpVectorShuffle %199 %199 3 1 0 
                                       f32_4 %201 = OpLoad %67 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 2 6 
                                                      OpStore %67 %202 
                                       f32_4 %203 = OpLoad %137 
                                       f32_4 %204 = OpFNegate %203 
                                       f32_4 %205 = OpLoad %67 
                                       f32_4 %206 = OpFAdd %204 %205 
                                                      OpStore %67 %206 
                                         f32 %207 = OpLoad %53 
                                       f32_4 %208 = OpCompositeConstruct %207 %207 %207 %207 
                                       f32_4 %209 = OpLoad %67 
                                       f32_4 %210 = OpFMul %208 %209 
                                       f32_4 %211 = OpLoad %137 
                                       f32_4 %212 = OpFAdd %210 %211 
                                                      OpStore %137 %212 
                                Private f32* %213 = OpAccessChain %137 %55 
                                         f32 %214 = OpLoad %213 
                                Private f32* %215 = OpAccessChain %137 %23 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpExtInst %1 37 %214 %216 
                                                      OpStore %53 %217 
                                         f32 %218 = OpLoad %53 
                                         f32 %219 = OpFNegate %218 
                                Private f32* %220 = OpAccessChain %137 %73 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpFAdd %219 %221 
                                                      OpStore %53 %222 
                                         f32 %223 = OpLoad %53 
                                         f32 %225 = OpFMul %223 %224 
                                         f32 %227 = OpFAdd %225 %226 
                                Private f32* %228 = OpAccessChain %67 %73 
                                                      OpStore %228 %227 
                                Private f32* %230 = OpAccessChain %137 %55 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                Private f32* %233 = OpAccessChain %137 %23 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFAdd %232 %234 
                                                      OpStore %229 %235 
                                         f32 %236 = OpLoad %229 
                                Private f32* %237 = OpAccessChain %67 %73 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFDiv %236 %238 
                                Private f32* %240 = OpAccessChain %67 %73 
                                                      OpStore %240 %239 
                                Private f32* %241 = OpAccessChain %137 %172 
                                         f32 %242 = OpLoad %241 
                                Private f32* %243 = OpAccessChain %67 %73 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFAdd %242 %244 
                                Private f32* %246 = OpAccessChain %67 %73 
                                                      OpStore %246 %245 
                                       f32_4 %247 = OpLoad %67 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpExtInst %1 4 %248 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %67 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %67 %254 
                                       f32_4 %255 = OpLoad %67 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpExtInst %1 10 %256 
                                       f32_4 %258 = OpLoad %67 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %67 %259 
                                       f32_4 %260 = OpLoad %67 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_3 %263 = OpFMul %261 %262 
                                       f32_3 %266 = OpFAdd %263 %265 
                                       f32_4 %267 = OpLoad %67 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %67 %268 
                                       f32_4 %269 = OpLoad %67 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpExtInst %1 4 %270 
                                       f32_3 %273 = OpFAdd %271 %272 
                                       f32_4 %274 = OpLoad %67 
                                       f32_4 %275 = OpVectorShuffle %274 %273 4 5 6 3 
                                                      OpStore %67 %275 
                                       f32_4 %276 = OpLoad %67 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpCompositeConstruct %41 %41 %41 
                                       f32_3 %279 = OpCompositeConstruct %117 %117 %117 
                                       f32_3 %280 = OpExtInst %1 43 %277 %278 %279 
                                       f32_4 %281 = OpLoad %67 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %67 %282 
                                       f32_4 %283 = OpLoad %67 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_3 %285 = OpFAdd %284 %272 
                                       f32_4 %286 = OpLoad %67 
                                       f32_4 %287 = OpVectorShuffle %286 %285 4 5 6 3 
                                                      OpStore %67 %287 
                                Private f32* %288 = OpAccessChain %137 %73 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFAdd %289 %226 
                                                      OpStore %119 %290 
                                         f32 %291 = OpLoad %53 
                                         f32 %292 = OpLoad %119 
                                         f32 %293 = OpFDiv %291 %292 
                                                      OpStore %53 %293 
                                         f32 %294 = OpLoad %53 
                                       f32_3 %295 = OpCompositeConstruct %294 %294 %294 
                                       f32_4 %296 = OpLoad %67 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_3 %298 = OpFMul %295 %297 
                                       f32_3 %300 = OpFAdd %298 %299 
                                       f32_4 %301 = OpLoad %67 
                                       f32_4 %302 = OpVectorShuffle %301 %300 4 5 6 3 
                                                      OpStore %67 %302 
                                  Input f32* %305 = OpAccessChain %304 %73 
                                         f32 %306 = OpLoad %305 
                                         f32 %308 = OpFMul %306 %307 
                                Private f32* %309 = OpAccessChain %145 %73 
                                                      OpStore %309 %308 
                                       f32_3 %312 = OpLoad %304 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 1 
                                       f32_3 %316 = OpFMul %313 %315 
                                                      OpStore %311 %316 
                                Uniform f32* %317 = OpAccessChain %29 %44 %73 
                                         f32 %318 = OpLoad %317 
                                         f32 %319 = OpFNegate %318 
                                         f32 %320 = OpFMul %319 %250 
                                Private f32* %321 = OpAccessChain %311 %172 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFAdd %320 %322 
                                Private f32* %324 = OpAccessChain %145 %55 
                                                      OpStore %324 %323 
                  read_only Texture2DSampled %327 = OpLoad %326 
                                       f32_4 %328 = OpLoad %145 
                                       f32_2 %329 = OpVectorShuffle %328 %328 0 1 
                                       f32_4 %330 = OpImageSampleImplicitLod %327 %329 
                                         f32 %331 = OpCompositeExtract %330 0 
                                                      OpStore %325 %331 
                                         f32 %333 = OpLoad %325 
                                         f32 %334 = OpExtInst %1 30 %333 
                                                      OpStore %332 %334 
                                         f32 %335 = OpLoad %332 
                                         f32 %337 = OpFMul %335 %336 
                                                      OpStore %332 %337 
                                         f32 %338 = OpLoad %332 
                                         f32 %339 = OpExtInst %1 29 %338 
                                                      OpStore %332 %339 
                                         f32 %340 = OpLoad %332 
                                         f32 %341 = OpFNegate %340 
                                         f32 %343 = OpFMul %341 %342 
                                Private f32* %344 = OpAccessChain %137 %73 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFAdd %343 %345 
                                                      OpStore %53 %346 
                                         f32 %347 = OpLoad %53 
                                Uniform f32* %349 = OpAccessChain %29 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFDiv %347 %350 
                                                      OpStore %53 %351 
                                Private f32* %352 = OpAccessChain %311 %55 
                                         f32 %353 = OpLoad %352 
                                Private f32* %354 = OpAccessChain %311 %73 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFAdd %353 %355 
                                                      OpStore %119 %356 
                                       f32_3 %357 = OpLoad %311 
                                       f32_2 %358 = OpVectorShuffle %357 %357 0 1 
                                         f32 %362 = OpDot %358 %361 
                                Private f32* %363 = OpAccessChain %145 %73 
                                                      OpStore %363 %362 
                                Private f32* %364 = OpAccessChain %145 %73 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpExtInst %1 13 %365 
                                Private f32* %367 = OpAccessChain %145 %73 
                                                      OpStore %367 %366 
                                Private f32* %368 = OpAccessChain %145 %73 
                                         f32 %369 = OpLoad %368 
                                         f32 %371 = OpFMul %369 %370 
                                Private f32* %372 = OpAccessChain %145 %73 
                                                      OpStore %372 %371 
                                Private f32* %373 = OpAccessChain %145 %73 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpExtInst %1 10 %374 
                                Private f32* %376 = OpAccessChain %145 %73 
                                                      OpStore %376 %375 
                                         f32 %378 = OpLoad %119 
                                Uniform f32* %379 = OpAccessChain %29 %44 %172 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFNegate %380 
                                         f32 %382 = OpFAdd %378 %381 
                                                      OpStore %377 %382 
                                         f32 %383 = OpLoad %377 
                                         f32 %384 = OpExtInst %1 13 %383 
                                Private f32* %385 = OpAccessChain %145 %55 
                                                      OpStore %385 %384 
                                       f32_4 %386 = OpLoad %145 
                                       f32_2 %387 = OpVectorShuffle %386 %386 0 1 
                                       f32_2 %390 = OpFAdd %387 %389 
                                       f32_4 %391 = OpLoad %145 
                                       f32_4 %392 = OpVectorShuffle %391 %390 4 5 2 3 
                                                      OpStore %145 %392 
                                Private f32* %393 = OpAccessChain %145 %55 
                                         f32 %394 = OpLoad %393 
                                         f32 %396 = OpFMul %394 %395 
                                                      OpStore %377 %396 
                                         f32 %398 = OpLoad %119 
                                Uniform f32* %399 = OpAccessChain %29 %44 %172 
                                         f32 %400 = OpLoad %399 
                                         f32 %401 = OpFAdd %398 %400 
                                                      OpStore %397 %401 
                                         f32 %402 = OpLoad %119 
                                         f32 %403 = OpFMul %402 %395 
                                                      OpStore %119 %403 
                                         f32 %404 = OpLoad %119 
                                         f32 %405 = OpExtInst %1 10 %404 
                                                      OpStore %119 %405 
                                         f32 %408 = OpLoad %119 
                                        bool %409 = OpFOrdLessThan %407 %408 
                                                      OpStore %406 %409 
                                         f32 %410 = OpLoad %397 
                                         f32 %411 = OpExtInst %1 13 %410 
                                                      OpStore %397 %411 
                                         f32 %412 = OpLoad %397 
                                         f32 %414 = OpFMul %412 %413 
                                         f32 %416 = OpFAdd %414 %415 
                                                      OpStore %397 %416 
                                         f32 %417 = OpLoad %377 
                                         f32 %418 = OpLoad %397 
                                         f32 %419 = OpFMul %417 %418 
                                         f32 %421 = OpFAdd %419 %420 
                                                      OpStore %377 %421 
                                         f32 %422 = OpLoad %53 
                                         f32 %423 = OpLoad %377 
                                         f32 %424 = OpFNegate %423 
                                         f32 %425 = OpFAdd %422 %424 
                                                      OpStore %397 %425 
                                         f32 %426 = OpLoad %53 
                                         f32 %427 = OpLoad %377 
                                         f32 %428 = OpFAdd %426 %427 
                                                      OpStore %53 %428 
                                Private f32* %429 = OpAccessChain %145 %73 
                                         f32 %430 = OpLoad %429 
                                Uniform f32* %432 = OpAccessChain %29 %431 
                                         f32 %433 = OpLoad %432 
                                         f32 %434 = OpFMul %430 %433 
                                         f32 %435 = OpLoad %53 
                                         f32 %436 = OpFAdd %434 %435 
                                                      OpStore %53 %436 
                                Private f32* %437 = OpAccessChain %145 %73 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpFNegate %438 
                                Uniform f32* %440 = OpAccessChain %29 %431 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %439 %441 
                                         f32 %443 = OpLoad %397 
                                         f32 %444 = OpFAdd %442 %443 
                                Private f32* %445 = OpAccessChain %145 %73 
                                                      OpStore %445 %444 
                                Private f32* %446 = OpAccessChain %145 %73 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpExtInst %1 9 %447 
                                Private f32* %449 = OpAccessChain %145 %73 
                                                      OpStore %449 %448 
                                Private f32* %450 = OpAccessChain %145 %73 
                                         f32 %451 = OpLoad %450 
                                Uniform f32* %452 = OpAccessChain %29 %348 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFMul %451 %453 
                                Private f32* %455 = OpAccessChain %145 %73 
                                                      OpStore %455 %454 
                                         f32 %456 = OpLoad %53 
                                         f32 %457 = OpExtInst %1 2 %456 
                                                      OpStore %53 %457 
                                         f32 %458 = OpLoad %53 
                                Uniform f32* %459 = OpAccessChain %29 %348 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpFMul %458 %460 
                                                      OpStore %53 %461 
                                        bool %463 = OpLoad %406 
                                                      OpSelectionMerge %465 None 
                                                      OpBranchConditional %463 %464 %468 
                                             %464 = OpLabel 
                                Private f32* %466 = OpAccessChain %145 %73 
                                         f32 %467 = OpLoad %466 
                                                      OpStore %462 %467 
                                                      OpBranch %465 
                                             %468 = OpLabel 
                                         f32 %469 = OpLoad %53 
                                                      OpStore %462 %469 
                                                      OpBranch %465 
                                             %465 = OpLabel 
                                         f32 %470 = OpLoad %462 
                                                      OpStore %53 %470 
                                         f32 %471 = OpLoad %53 
                                         f32 %472 = OpExtInst %1 40 %471 %41 
                                                      OpStore %53 %472 
                                       f32_4 %473 = OpLoad %67 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 1 2 
                                         f32 %475 = OpLoad %53 
                                       f32_3 %476 = OpCompositeConstruct %475 %475 %475 
                                       f32_3 %477 = OpFMul %474 %476 
                                       f32_4 %478 = OpLoad %67 
                                       f32_4 %479 = OpVectorShuffle %478 %477 4 5 6 3 
                                                      OpStore %67 %479 
                                       f32_4 %480 = OpLoad %67 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 2 
                                       f32_3 %483 = OpFMul %481 %482 
                                       f32_4 %484 = OpLoad %145 
                                       f32_4 %485 = OpVectorShuffle %484 %483 4 5 6 3 
                                                      OpStore %145 %485 
                                       f32_4 %486 = OpLoad %67 
                                       f32_3 %487 = OpVectorShuffle %486 %486 0 1 2 
                                       f32_3 %488 = OpFNegate %487 
                                       f32_3 %489 = OpFMul %488 %482 
                                       f32_3 %493 = OpFAdd %489 %492 
                                       f32_4 %494 = OpLoad %67 
                                       f32_4 %495 = OpVectorShuffle %494 %493 4 5 6 3 
                                                      OpStore %67 %495 
                                Private f32* %497 = OpAccessChain %9 %73 
                                         f32 %498 = OpLoad %497 
                                         f32 %500 = OpFAdd %498 %499 
                                                      OpStore %496 %500 
                                         f32 %501 = OpLoad %496 
                                         f32 %503 = OpFMul %501 %502 
                                                      OpStore %496 %503 
                                         f32 %504 = OpLoad %496 
                                         f32 %505 = OpExtInst %1 43 %504 %41 %117 
                                                      OpStore %496 %505 
                                         f32 %506 = OpLoad %496 
                                       f32_3 %507 = OpCompositeConstruct %506 %506 %506 
                                       f32_4 %508 = OpLoad %67 
                                       f32_3 %509 = OpVectorShuffle %508 %508 0 1 2 
                                       f32_3 %510 = OpFMul %507 %509 
                                       f32_4 %511 = OpLoad %145 
                                       f32_3 %512 = OpVectorShuffle %511 %511 0 1 2 
                                       f32_3 %513 = OpFAdd %510 %512 
                                       f32_4 %514 = OpLoad %67 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 5 6 3 
                                                      OpStore %67 %515 
                                       f32_4 %517 = OpLoad %9 
                                       f32_3 %518 = OpVectorShuffle %517 %517 0 1 2 
                                       f32_3 %520 = OpFMul %518 %519 
                                       f32_4 %521 = OpLoad %67 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_3 %523 = OpFAdd %520 %522 
                                                      OpStore %516 %523 
                                       f32_3 %524 = OpLoad %516 
                                       f32_3 %525 = OpExtInst %1 30 %524 
                                                      OpStore %516 %525 
                                Uniform f32* %527 = OpAccessChain %29 %526 
                                         f32 %528 = OpLoad %527 
                                                      OpStore %53 %528 
                                         f32 %529 = OpLoad %53 
                                         f32 %530 = OpExtInst %1 43 %529 %41 %117 
                                                      OpStore %53 %530 
                                       f32_3 %531 = OpLoad %516 
                                         f32 %532 = OpLoad %53 
                                       f32_3 %533 = OpCompositeConstruct %532 %532 %532 
                                       f32_3 %534 = OpFMul %531 %533 
                                                      OpStore %516 %534 
                                       f32_3 %535 = OpLoad %516 
                                       f32_3 %536 = OpExtInst %1 29 %535 
                                                      OpStore %516 %536 
                                       f32_3 %537 = OpLoad %516 
                                Uniform f32* %539 = OpAccessChain %29 %538 
                                         f32 %540 = OpLoad %539 
                                Uniform f32* %541 = OpAccessChain %29 %538 
                                         f32 %542 = OpLoad %541 
                                Uniform f32* %543 = OpAccessChain %29 %538 
                                         f32 %544 = OpLoad %543 
                                       f32_3 %545 = OpCompositeConstruct %540 %542 %544 
                                         f32 %546 = OpCompositeExtract %545 0 
                                         f32 %547 = OpCompositeExtract %545 1 
                                         f32 %548 = OpCompositeExtract %545 2 
                                       f32_3 %549 = OpCompositeConstruct %546 %547 %548 
                                       f32_3 %550 = OpExtInst %1 37 %537 %549 
                                                      OpStore %516 %550 
                              Uniform u32_4* %557 = OpAccessChain %29 %554 
                                       u32_4 %558 = OpLoad %557 
                                         u32 %559 = OpCompositeExtract %558 0 
                                        bool %560 = OpINotEqual %559 %73 
                                                      OpSelectionMerge %562 None 
                                                      OpBranchConditional %560 %561 %564 
                                             %561 = OpLabel 
                                       f32_3 %563 = OpLoad %516 
                                                      OpStore %553 %563 
                                                      OpBranch %562 
                                             %564 = OpLabel 
                                                      OpStore %553 %565 
                                                      OpBranch %562 
                                             %562 = OpLabel 
                                       f32_3 %566 = OpLoad %553 
                                       f32_4 %567 = OpLoad %551 
                                       f32_4 %568 = OpVectorShuffle %567 %566 4 5 6 3 
                                                      OpStore %551 %568 
                              Uniform u32_4* %570 = OpAccessChain %29 %554 
                                       u32_4 %571 = OpLoad %570 
                                         u32 %572 = OpCompositeExtract %571 0 
                                        bool %573 = OpINotEqual %572 %73 
                                                      OpSelectionMerge %575 None 
                                                      OpBranchConditional %573 %574 %576 
                                             %574 = OpLabel 
                                                      OpStore %569 %117 
                                                      OpBranch %575 
                                             %576 = OpLabel 
                                                      OpStore %569 %41 
                                                      OpBranch %575 
                                             %575 = OpLabel 
                                         f32 %577 = OpLoad %569 
                                Private f32* %578 = OpAccessChain %551 %23 
                                                      OpStore %578 %577 
                              Uniform u32_4* %583 = OpAccessChain %29 %554 
                                       u32_4 %584 = OpLoad %583 
                                         u32 %585 = OpCompositeExtract %584 1 
                                        bool %586 = OpINotEqual %585 %73 
                                                      OpSelectionMerge %588 None 
                                                      OpBranchConditional %586 %587 %590 
                                             %587 = OpLabel 
                                                      OpStore %582 %589 
                                                      OpBranch %588 
                                             %590 = OpLabel 
                                       f32_4 %591 = OpLoad %551 
                                                      OpStore %582 %591 
                                                      OpBranch %588 
                                             %588 = OpLabel 
                                       f32_4 %592 = OpLoad %582 
                                                      OpStore %580 %592 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
}
Fallback "Brave/LitTk2dCustomFalloffCutout"
}