//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Brave/LitTk2dCustomFalloffCutout" {
Properties {
_MainTex ("Base (RGB)", 2D) = "white" { }
_Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
_MaxValue ("Max Value", Float) = 1
}
SubShader {
 LOD 110
 Tags { "IGNOREPROJECTOR" = "False" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
 Pass {
  Name "FORWARD"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
  ColorMask RGB 0
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 7975
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat5.x = u_xlat1.y * 0.25 + 0.75;
        u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat5.x, u_xlat2.x);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat1.x = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    u_xlat1.w = u_xlat10_0.w;
    u_xlat1 = u_xlat1 + u_xlat2;
    u_xlatb12 = u_xlat1.y>=u_xlat1.z;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat2.xy = u_xlat1.zy;
    u_xlat2.z = float(-1.0);
    u_xlat2.w = float(0.666666687);
    u_xlat3.xy = u_xlat1.yz + (-u_xlat2.xy);
    u_xlat3.z = float(1.0);
    u_xlat3.w = float(-1.0);
    u_xlat2 = vec4(u_xlat12) * u_xlat3 + u_xlat2;
    u_xlatb12 = u_xlat1.x>=u_xlat2.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat3.xyz = u_xlat2.xyw;
    u_xlat3.w = u_xlat1.x;
    u_xlat2.xyw = u_xlat3.wyx;
    u_xlat2 = (-u_xlat3) + u_xlat2;
    u_xlat2 = vec4(u_xlat12) * u_xlat2 + u_xlat3;
    u_xlat12 = min(u_xlat2.y, u_xlat2.w);
    u_xlat12 = (-u_xlat12) + u_xlat2.x;
    u_xlat1.x = (-u_xlat2.y) + u_xlat2.w;
    u_xlat5.x = u_xlat12 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat5.x;
    u_xlat1.x = u_xlat1.x + u_xlat2.z;
    u_xlat5.x = u_xlat2.x + 1.00000001e-010;
    u_xlat12 = u_xlat12 / u_xlat5.x;
    u_xlatb5 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);
    u_xlat16_4 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat4.x = u_xlat5.x * u_xlat16_4 + u_xlat10_0.z;
    u_xlatb8 = u_xlat10_0.x>=u_xlat4.x;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat4.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat8 * u_xlat0 + u_xlat4.x;
    u_xlat0 = u_xlat0 * _MaxValue;
    u_xlat0 = min(u_xlat0, u_xlat2.x);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 160
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %93 %94 %107 %138 %144 %147 %149 %152 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %107 Location 107 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %152 Location 152 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %89 = OpTypePointer Output %7 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                                Output f32_2* %93 = OpVariable Output 
                                 Input f32_4* %94 = OpVariable Input 
                                             %105 = OpTypeVector %6 3 
                                             %106 = OpTypePointer Input %105 
                                Input f32_3* %107 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                                             %114 = OpTypePointer Private %6 
                                         u32 %127 = OpConstant 2 
                                Private f32* %129 = OpVariable Private 
                                             %137 = OpTypePointer Output %105 
                               Output f32_3* %138 = OpVariable Output 
                               Output f32_3* %144 = OpVariable Output 
                               Output f32_4* %147 = OpVariable Output 
                               Output f32_3* %149 = OpVariable Output 
                                         f32 %150 = OpConstant 3.674022E-40 
                                       f32_3 %151 = OpConstantComposite %150 %150 %150 
                               Output f32_4* %152 = OpVariable Output 
                                       f32_4 %153 = OpConstantComposite %150 %150 %150 %150 
                                             %154 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %36 %24 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %36 %23 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %36 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %82 = OpAccessChain %21 %36 %46 
                                        f32_4 %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %44 
                                        f32_4 %85 = OpVectorShuffle %84 %84 3 3 3 3 
                                        f32_4 %86 = OpFMul %83 %85 
                                        f32_4 %87 = OpLoad %57 
                                        f32_4 %88 = OpFAdd %86 %87 
                                Output f32_4* %90 = OpAccessChain %81 %23 
                                                      OpStore %90 %88 
                                        f32_4 %95 = OpLoad %94 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                               Uniform f32_4* %97 = OpAccessChain %21 %46 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_2 %100 = OpFMul %96 %99 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 2 3 
                                       f32_2 %104 = OpFAdd %100 %103 
                                                      OpStore %93 %104 
                                       f32_3 %108 = OpLoad %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %23 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %115 = OpAccessChain %44 %113 
                                                      OpStore %115 %112 
                                       f32_3 %116 = OpLoad %107 
                              Uniform f32_4* %117 = OpAccessChain %21 %24 %24 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %116 %119 
                                Private f32* %121 = OpAccessChain %44 %77 
                                                      OpStore %121 %120 
                                       f32_3 %122 = OpLoad %107 
                              Uniform f32_4* %123 = OpAccessChain %21 %24 %36 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %128 = OpAccessChain %44 %127 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %44 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %44 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %136 = OpExtInst %1 32 %135 
                                                      OpStore %129 %136 
                                         f32 %139 = OpLoad %129 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %140 %142 
                                                      OpStore %138 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore %144 %146 
                                       f32_4 %148 = OpLoad %9 
                                                      OpStore %147 %148 
                                                      OpStore %149 %151 
                                                      OpStore %152 %153 
                                 Output f32* %155 = OpAccessChain %81 %23 %77 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFNegate %156 
                                 Output f32* %158 = OpAccessChain %81 %23 %77 
                                                      OpStore %158 %157 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 450
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %78 %197 %203 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %29 0 RelaxedPrecision 
                                                      OpMemberDecorate %29 0 Offset 29 
                                                      OpMemberDecorate %29 1 Offset 29 
                                                      OpMemberDecorate %29 2 Offset 29 
                                                      OpMemberDecorate %29 3 Offset 29 
                                                      OpMemberDecorate %29 4 Offset 29 
                                                      OpMemberDecorate %29 5 RelaxedPrecision 
                                                      OpMemberDecorate %29 5 Offset 29 
                                                      OpMemberDecorate %29 6 Offset 29 
                                                      OpMemberDecorate %29 7 RelaxedPrecision 
                                                      OpMemberDecorate %29 7 Offset 29 
                                                      OpDecorate %29 Block 
                                                      OpDecorate %31 DescriptorSet 31 
                                                      OpDecorate %31 Binding 31 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %68 SpecId 68 
                                                      OpDecorate %78 Location 78 
                                                      OpDecorate %162 DescriptorSet 162 
                                                      OpDecorate %162 Binding 162 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %197 Location 197 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %203 Location 203 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeStruct %7 %7 %27 %28 %28 %7 %6 %6 
                                              %30 = OpTypePointer Uniform %29 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32;}* %31 = OpVariable Uniform 
                                              %32 = OpTypeInt 32 1 
                                          i32 %33 = OpConstant 7 
                                              %34 = OpTypePointer Uniform %6 
                                          u32 %39 = OpConstant 0 
                                              %41 = OpTypeBool 
                                              %42 = OpTypePointer Private %41 
                                Private bool* %43 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                          i32 %49 = OpConstant 0 
                                          i32 %50 = OpConstant 1 
                                          i32 %52 = OpConstant -1 
                                          f32 %60 = OpConstant 3.674022E-40 
                                         bool %62 = OpConstantFalse 
                                         bool %68 = OpSpecConstantFalse 
                                          u32 %71 = OpConstant 1 
                                              %75 = OpTypePointer Private %28 
                               Private f32_3* %76 = OpVariable Private 
                                              %77 = OpTypePointer Input %28 
                                 Input f32_3* %78 = OpVariable Input 
                                          i32 %81 = OpConstant 2 
                                              %82 = OpTypePointer Uniform %7 
                                         i32 %104 = OpConstant 3 
                              Private f32_4* %109 = OpVariable Private 
                                             %110 = OpTypePointer Function %28 
                                         i32 %123 = OpConstant 4 
                                             %124 = OpTypePointer Uniform %28 
                              Private f32_4* %131 = OpVariable Private 
                                         f32 %141 = OpConstant 3.674022E-40 
                                         f32 %143 = OpConstant 3.674022E-40 
                                         u32 %146 = OpConstant 2 
                                         f32 %149 = OpConstant 3.674022E-40 
                                             %159 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %160 = OpTypeSampledImage %159 
                                             %161 = OpTypePointer UniformConstant %160 
 UniformConstant read_only Texture3DSampled* %162 = OpVariable UniformConstant 
                              Private f32_3* %173 = OpVariable Private 
                              Private f32_3* %183 = OpVariable Private 
                                         i32 %186 = OpConstant 5 
                                Input f32_3* %197 = OpVariable Input 
                                             %202 = OpTypePointer Output %7 
                               Output f32_4* %203 = OpVariable Output 
                                             %206 = OpTypePointer Output %6 
                               Private bool* %208 = OpVariable Private 
                                Private f32* %214 = OpVariable Private 
                                             %215 = OpTypePointer Function %6 
                                             %222 = OpTypePointer Private %15 
                              Private f32_2* %223 = OpVariable Private 
                              Private f32_2* %230 = OpVariable Private 
                                         f32 %232 = OpConstant 3.674022E-40 
                                         f32 %247 = OpConstant 3.674022E-40 
                                       f32_2 %248 = OpConstantComposite %232 %247 
                              Private f32_4* %272 = OpVariable Private 
                                Private f32* %303 = OpVariable Private 
                                         f32 %319 = OpConstant 3.674022E-40 
                                         f32 %321 = OpConstant 3.674022E-40 
                               Private bool* %341 = OpVariable Private 
                                Private f32* %354 = OpVariable Private 
                              Private f32_3* %361 = OpVariable Private 
                               Private bool* %370 = OpVariable Private 
                                Private f32* %376 = OpVariable Private 
                              Private f32_3* %383 = OpVariable Private 
                                         i32 %401 = OpConstant 6 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_3 %416 = OpConstantComposite %60 %247 %415 
                                       f32_3 %421 = OpConstantComposite %319 %319 %319 
                                         f32 %423 = OpConstant 3.674022E-40 
                                       f32_3 %424 = OpConstantComposite %423 %423 %423 
                                       f32_3 %428 = OpConstantComposite %232 %232 %232 
                                       f32_3 %440 = OpConstantComposite %60 %60 %60 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %111 = OpVariable Function 
                               Function f32* %216 = OpVariable Function 
                               Function f32* %257 = OpVariable Function 
                               Function f32* %347 = OpVariable Function 
                               Function f32* %377 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %35 = OpAccessChain %31 %33 
                                          f32 %36 = OpLoad %35 
                                          f32 %37 = OpFNegate %36 
                                          f32 %38 = OpFAdd %25 %37 
                                 Private f32* %40 = OpAccessChain %20 %39 
                                                      OpStore %40 %38 
                                 Private f32* %44 = OpAccessChain %20 %39 
                                          f32 %45 = OpLoad %44 
                                         bool %47 = OpFOrdLessThan %45 %46 
                                                      OpStore %43 %47 
                                         bool %48 = OpLoad %43 
                                          i32 %51 = OpSelect %48 %50 %49 
                                          i32 %53 = OpIMul %51 %52 
                                         bool %54 = OpINotEqual %53 %49 
                                                      OpSelectionMerge %56 None 
                                                      OpBranchConditional %54 %55 %56 
                                              %55 = OpLabel 
                                                      OpKill
                                              %56 = OpLabel 
                                 Uniform f32* %58 = OpAccessChain %31 %50 %39 
                                          f32 %59 = OpLoad %58 
                                         bool %61 = OpFOrdEqual %59 %60 
                                                      OpStore %43 %61 
                                                      OpSelectionMerge %64 None 
                                                      OpBranchConditional %62 %63 %64 
                                              %63 = OpLabel 
                                         bool %65 = OpLoad %43 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpBranch %67 
                                              %67 = OpLabel 
                                                      OpBranch %64 
                                              %64 = OpLabel 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %168 
                                              %69 = OpLabel 
                                 Uniform f32* %72 = OpAccessChain %31 %50 %71 
                                          f32 %73 = OpLoad %72 
                                         bool %74 = OpFOrdEqual %73 %60 
                                                      OpStore %43 %74 
                                        f32_3 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %31 %81 %50 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %76 %86 
                               Uniform f32_4* %87 = OpAccessChain %31 %81 %49 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpLoad %78 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpFMul %89 %91 
                                        f32_3 %93 = OpLoad %76 
                                        f32_3 %94 = OpFAdd %92 %93 
                                                      OpStore %76 %94 
                               Uniform f32_4* %95 = OpAccessChain %31 %81 %81 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpLoad %78 
                                        f32_3 %99 = OpVectorShuffle %98 %98 2 2 2 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_3 %101 = OpLoad %76 
                                       f32_3 %102 = OpFAdd %100 %101 
                                                      OpStore %76 %102 
                                       f32_3 %103 = OpLoad %76 
                              Uniform f32_4* %105 = OpAccessChain %31 %81 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFAdd %103 %107 
                                                      OpStore %76 %108 
                                        bool %112 = OpLoad %43 
                                                      OpSelectionMerge %114 None 
                                                      OpBranchConditional %112 %113 %116 
                                             %113 = OpLabel 
                                       f32_3 %115 = OpLoad %76 
                                                      OpStore %111 %115 
                                                      OpBranch %114 
                                             %116 = OpLabel 
                                       f32_3 %117 = OpLoad %78 
                                                      OpStore %111 %117 
                                                      OpBranch %114 
                                             %114 = OpLabel 
                                       f32_3 %118 = OpLoad %111 
                                       f32_4 %119 = OpLoad %109 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
                                                      OpStore %109 %120 
                                       f32_4 %121 = OpLoad %109 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                              Uniform f32_3* %125 = OpAccessChain %31 %123 
                                       f32_3 %126 = OpLoad %125 
                                       f32_3 %127 = OpFNegate %126 
                                       f32_3 %128 = OpFAdd %122 %127 
                                       f32_4 %129 = OpLoad %109 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %109 %130 
                                       f32_4 %132 = OpLoad %109 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                              Uniform f32_3* %134 = OpAccessChain %31 %104 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %131 
                                       f32_4 %138 = OpVectorShuffle %137 %136 0 4 5 6 
                                                      OpStore %131 %138 
                                Private f32* %139 = OpAccessChain %131 %71 
                                         f32 %140 = OpLoad %139 
                                         f32 %142 = OpFMul %140 %141 
                                         f32 %144 = OpFAdd %142 %143 
                                Private f32* %145 = OpAccessChain %109 %39 
                                                      OpStore %145 %144 
                                Uniform f32* %147 = OpAccessChain %31 %50 %146 
                                         f32 %148 = OpLoad %147 
                                         f32 %150 = OpFMul %148 %149 
                                         f32 %151 = OpFAdd %150 %143 
                                Private f32* %152 = OpAccessChain %76 %39 
                                                      OpStore %152 %151 
                                Private f32* %153 = OpAccessChain %76 %39 
                                         f32 %154 = OpLoad %153 
                                Private f32* %155 = OpAccessChain %109 %39 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpExtInst %1 40 %154 %156 
                                Private f32* %158 = OpAccessChain %131 %39 
                                                      OpStore %158 %157 
                  read_only Texture3DSampled %163 = OpLoad %162 
                                       f32_4 %164 = OpLoad %131 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 2 3 
                                       f32_4 %166 = OpImageSampleImplicitLod %163 %165 
                                                      OpStore %131 %166 
                                       f32_4 %167 = OpLoad %131 
                                                      OpStore %20 %167 
                                                      OpBranch %70 
                                             %168 = OpLabel 
                                Private f32* %169 = OpAccessChain %20 %39 
                                                      OpStore %169 %60 
                                Private f32* %170 = OpAccessChain %20 %71 
                                                      OpStore %170 %60 
                                Private f32* %171 = OpAccessChain %20 %146 
                                                      OpStore %171 %60 
                                Private f32* %172 = OpAccessChain %20 %22 
                                                      OpStore %172 %60 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                       f32_4 %174 = OpLoad %20 
                              Uniform f32_4* %175 = OpAccessChain %31 %49 
                                       f32_4 %176 = OpLoad %175 
                                         f32 %177 = OpDot %174 %176 
                                Private f32* %178 = OpAccessChain %173 %39 
                                                      OpStore %178 %177 
                                Private f32* %179 = OpAccessChain %173 %39 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpExtInst %1 43 %180 %46 %60 
                                Private f32* %182 = OpAccessChain %173 %39 
                                                      OpStore %182 %181 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                              Uniform f32_4* %187 = OpAccessChain %31 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpFMul %185 %189 
                                                      OpStore %183 %190 
                                       f32_3 %191 = OpLoad %173 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 0 0 
                                       f32_3 %193 = OpLoad %183 
                                       f32_3 %194 = OpFMul %192 %193 
                                                      OpStore %173 %194 
                                       f32_4 %195 = OpLoad %9 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %198 = OpLoad %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_3 %200 = OpLoad %173 
                                       f32_3 %201 = OpFAdd %199 %200 
                                                      OpStore %173 %201 
                                Private f32* %204 = OpAccessChain %9 %22 
                                         f32 %205 = OpLoad %204 
                                 Output f32* %207 = OpAccessChain %203 %22 
                                                      OpStore %207 %205 
                                Private f32* %209 = OpAccessChain %173 %71 
                                         f32 %210 = OpLoad %209 
                                Private f32* %211 = OpAccessChain %173 %146 
                                         f32 %212 = OpLoad %211 
                                        bool %213 = OpFOrdGreaterThanEqual %210 %212 
                                                      OpStore %208 %213 
                                        bool %217 = OpLoad %208 
                                                      OpSelectionMerge %219 None 
                                                      OpBranchConditional %217 %218 %220 
                                             %218 = OpLabel 
                                                      OpStore %216 %60 
                                                      OpBranch %219 
                                             %220 = OpLabel 
                                                      OpStore %216 %46 
                                                      OpBranch %219 
                                             %219 = OpLabel 
                                         f32 %221 = OpLoad %216 
                                                      OpStore %214 %221 
                                       f32_3 %224 = OpLoad %173 
                                       f32_2 %225 = OpVectorShuffle %224 %224 2 1 
                                       f32_2 %226 = OpFNegate %225 
                                       f32_3 %227 = OpLoad %173 
                                       f32_2 %228 = OpVectorShuffle %227 %227 1 2 
                                       f32_2 %229 = OpFAdd %226 %228 
                                                      OpStore %223 %229 
                                Private f32* %231 = OpAccessChain %230 %39 
                                                      OpStore %231 %60 
                                Private f32* %233 = OpAccessChain %230 %71 
                                                      OpStore %233 %232 
                                         f32 %234 = OpLoad %214 
                                       f32_2 %235 = OpCompositeConstruct %234 %234 
                                       f32_2 %236 = OpLoad %223 
                                       f32_2 %237 = OpFMul %235 %236 
                                       f32_3 %238 = OpLoad %173 
                                       f32_2 %239 = OpVectorShuffle %238 %238 2 1 
                                       f32_2 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %131 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 2 3 
                                                      OpStore %131 %242 
                                         f32 %243 = OpLoad %214 
                                       f32_2 %244 = OpCompositeConstruct %243 %243 
                                       f32_2 %245 = OpLoad %230 
                                       f32_2 %246 = OpFMul %244 %245 
                                       f32_2 %249 = OpFAdd %246 %248 
                                       f32_4 %250 = OpLoad %131 
                                       f32_4 %251 = OpVectorShuffle %250 %249 0 1 4 5 
                                                      OpStore %131 %251 
                                Private f32* %252 = OpAccessChain %173 %39 
                                         f32 %253 = OpLoad %252 
                                Private f32* %254 = OpAccessChain %131 %39 
                                         f32 %255 = OpLoad %254 
                                        bool %256 = OpFOrdGreaterThanEqual %253 %255 
                                                      OpStore %208 %256 
                                        bool %258 = OpLoad %208 
                                                      OpSelectionMerge %260 None 
                                                      OpBranchConditional %258 %259 %261 
                                             %259 = OpLabel 
                                                      OpStore %257 %60 
                                                      OpBranch %260 
                                             %261 = OpLabel 
                                                      OpStore %257 %46 
                                                      OpBranch %260 
                                             %260 = OpLabel 
                                         f32 %262 = OpLoad %257 
                                                      OpStore %214 %262 
                                       f32_4 %263 = OpLoad %131 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 3 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_4 %266 = OpLoad %109 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %109 %267 
                                Private f32* %268 = OpAccessChain %173 %39 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                Private f32* %271 = OpAccessChain %109 %22 
                                                      OpStore %271 %270 
                                Private f32* %273 = OpAccessChain %109 %39 
                                         f32 %274 = OpLoad %273 
                                Private f32* %275 = OpAccessChain %173 %39 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpFAdd %274 %276 
                                Private f32* %278 = OpAccessChain %272 %39 
                                                      OpStore %278 %277 
                                       f32_4 %279 = OpLoad %131 
                                       f32_3 %280 = OpVectorShuffle %279 %279 1 2 0 
                                       f32_4 %281 = OpLoad %109 
                                       f32_3 %282 = OpVectorShuffle %281 %281 1 2 3 
                                       f32_3 %283 = OpFAdd %280 %282 
                                       f32_4 %284 = OpLoad %272 
                                       f32_4 %285 = OpVectorShuffle %284 %283 0 4 5 6 
                                                      OpStore %272 %285 
                                         f32 %286 = OpLoad %214 
                                       f32_3 %287 = OpCompositeConstruct %286 %286 %286 
                                       f32_4 %288 = OpLoad %272 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %131 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 3 
                                       f32_3 %293 = OpFAdd %290 %292 
                                       f32_4 %294 = OpLoad %109 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %109 %295 
                                         f32 %296 = OpLoad %214 
                                Private f32* %297 = OpAccessChain %272 %22 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %296 %298 
                                Private f32* %300 = OpAccessChain %173 %39 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                                      OpStore %214 %302 
                                Private f32* %304 = OpAccessChain %109 %71 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpLoad %214 
                                         f32 %307 = OpExtInst %1 37 %305 %306 
                                                      OpStore %303 %307 
                                         f32 %308 = OpLoad %303 
                                         f32 %309 = OpFNegate %308 
                                Private f32* %310 = OpAccessChain %109 %39 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFAdd %309 %311 
                                                      OpStore %303 %312 
                                Private f32* %313 = OpAccessChain %109 %71 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                         f32 %316 = OpLoad %214 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %214 %317 
                                         f32 %318 = OpLoad %303 
                                         f32 %320 = OpFMul %318 %319 
                                         f32 %322 = OpFAdd %320 %321 
                                Private f32* %323 = OpAccessChain %76 %39 
                                                      OpStore %323 %322 
                                         f32 %324 = OpLoad %214 
                                Private f32* %325 = OpAccessChain %76 %39 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpFDiv %324 %326 
                                                      OpStore %214 %327 
                                         f32 %328 = OpLoad %214 
                                Private f32* %329 = OpAccessChain %109 %146 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFAdd %328 %330 
                                                      OpStore %214 %331 
                                Private f32* %332 = OpAccessChain %109 %39 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpFAdd %333 %321 
                                Private f32* %335 = OpAccessChain %76 %39 
                                                      OpStore %335 %334 
                                         f32 %336 = OpLoad %303 
                                Private f32* %337 = OpAccessChain %76 %39 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFDiv %336 %338 
                                Private f32* %340 = OpAccessChain %76 %39 
                                                      OpStore %340 %339 
                                Private f32* %342 = OpAccessChain %9 %71 
                                         f32 %343 = OpLoad %342 
                                Private f32* %344 = OpAccessChain %9 %146 
                                         f32 %345 = OpLoad %344 
                                        bool %346 = OpFOrdGreaterThanEqual %343 %345 
                                                      OpStore %341 %346 
                                        bool %348 = OpLoad %341 
                                                      OpSelectionMerge %350 None 
                                                      OpBranchConditional %348 %349 %351 
                                             %349 = OpLabel 
                                                      OpStore %347 %60 
                                                      OpBranch %350 
                                             %351 = OpLabel 
                                                      OpStore %347 %46 
                                                      OpBranch %350 
                                             %350 = OpLabel 
                                         f32 %352 = OpLoad %347 
                                Private f32* %353 = OpAccessChain %230 %39 
                                                      OpStore %353 %352 
                                Private f32* %355 = OpAccessChain %9 %146 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpFNegate %356 
                                Private f32* %358 = OpAccessChain %9 %71 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                                      OpStore %354 %360 
                                Private f32* %362 = OpAccessChain %230 %39 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpLoad %354 
                                         f32 %365 = OpFMul %363 %364 
                                Private f32* %366 = OpAccessChain %9 %146 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpFAdd %365 %367 
                                Private f32* %369 = OpAccessChain %361 %39 
                                                      OpStore %369 %368 
                                Private f32* %371 = OpAccessChain %9 %39 
                                         f32 %372 = OpLoad %371 
                                Private f32* %373 = OpAccessChain %361 %39 
                                         f32 %374 = OpLoad %373 
                                        bool %375 = OpFOrdGreaterThanEqual %372 %374 
                                                      OpStore %370 %375 
                                        bool %378 = OpLoad %370 
                                                      OpSelectionMerge %380 None 
                                                      OpBranchConditional %378 %379 %381 
                                             %379 = OpLabel 
                                                      OpStore %377 %60 
                                                      OpBranch %380 
                                             %381 = OpLabel 
                                                      OpStore %377 %46 
                                                      OpBranch %380 
                                             %380 = OpLabel 
                                         f32 %382 = OpLoad %377 
                                                      OpStore %376 %382 
                                Private f32* %384 = OpAccessChain %361 %39 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFNegate %385 
                                Private f32* %387 = OpAccessChain %9 %39 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFAdd %386 %388 
                                Private f32* %390 = OpAccessChain %383 %39 
                                                      OpStore %390 %389 
                                         f32 %391 = OpLoad %376 
                                Private f32* %392 = OpAccessChain %383 %39 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                Private f32* %395 = OpAccessChain %361 %39 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFAdd %394 %396 
                                Private f32* %398 = OpAccessChain %383 %39 
                                                      OpStore %398 %397 
                                Private f32* %399 = OpAccessChain %383 %39 
                                         f32 %400 = OpLoad %399 
                                Uniform f32* %402 = OpAccessChain %31 %401 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %400 %403 
                                Private f32* %405 = OpAccessChain %383 %39 
                                                      OpStore %405 %404 
                                Private f32* %406 = OpAccessChain %383 %39 
                                         f32 %407 = OpLoad %406 
                                Private f32* %408 = OpAccessChain %109 %39 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpExtInst %1 37 %407 %409 
                                Private f32* %411 = OpAccessChain %383 %39 
                                                      OpStore %411 %410 
                                         f32 %412 = OpLoad %214 
                                       f32_3 %413 = OpCompositeConstruct %412 %412 %412 
                                       f32_3 %414 = OpExtInst %1 4 %413 
                                       f32_3 %417 = OpFAdd %414 %416 
                                                      OpStore %361 %417 
                                       f32_3 %418 = OpLoad %361 
                                       f32_3 %419 = OpExtInst %1 10 %418 
                                                      OpStore %361 %419 
                                       f32_3 %420 = OpLoad %361 
                                       f32_3 %422 = OpFMul %420 %421 
                                       f32_3 %425 = OpFAdd %422 %424 
                                                      OpStore %361 %425 
                                       f32_3 %426 = OpLoad %361 
                                       f32_3 %427 = OpExtInst %1 4 %426 
                                       f32_3 %429 = OpFAdd %427 %428 
                                                      OpStore %361 %429 
                                       f32_3 %430 = OpLoad %361 
                                       f32_3 %431 = OpCompositeConstruct %46 %46 %46 
                                       f32_3 %432 = OpCompositeConstruct %60 %60 %60 
                                       f32_3 %433 = OpExtInst %1 43 %430 %431 %432 
                                                      OpStore %361 %433 
                                       f32_3 %434 = OpLoad %361 
                                       f32_3 %435 = OpFAdd %434 %428 
                                                      OpStore %361 %435 
                                       f32_3 %436 = OpLoad %76 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 0 0 
                                       f32_3 %438 = OpLoad %361 
                                       f32_3 %439 = OpFMul %437 %438 
                                       f32_3 %441 = OpFAdd %439 %440 
                                                      OpStore %361 %441 
                                       f32_3 %442 = OpLoad %361 
                                       f32_3 %443 = OpLoad %383 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 0 0 
                                       f32_3 %445 = OpFMul %442 %444 
                                                      OpStore %383 %445 
                                       f32_3 %446 = OpLoad %383 
                                       f32_4 %447 = OpLoad %203 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 5 6 3 
                                                      OpStore %203 %448 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat1);
    u_xlat2.y = dot(unity_SHAg, u_xlat1);
    u_xlat2.z = dot(unity_SHAb, u_xlat1);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat5.x = u_xlat1.y * 0.25 + 0.75;
        u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat5.x, u_xlat2.x);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat1.x = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    u_xlat1.w = u_xlat10_0.w;
    u_xlat1 = u_xlat1 + u_xlat2;
    u_xlatb12 = u_xlat1.y>=u_xlat1.z;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat2.xy = u_xlat1.zy;
    u_xlat2.z = float(-1.0);
    u_xlat2.w = float(0.666666687);
    u_xlat3.xy = u_xlat1.yz + (-u_xlat2.xy);
    u_xlat3.z = float(1.0);
    u_xlat3.w = float(-1.0);
    u_xlat2 = vec4(u_xlat12) * u_xlat3 + u_xlat2;
    u_xlatb12 = u_xlat1.x>=u_xlat2.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat3.xyz = u_xlat2.xyw;
    u_xlat3.w = u_xlat1.x;
    u_xlat2.xyw = u_xlat3.wyx;
    u_xlat2 = (-u_xlat3) + u_xlat2;
    u_xlat2 = vec4(u_xlat12) * u_xlat2 + u_xlat3;
    u_xlat12 = min(u_xlat2.y, u_xlat2.w);
    u_xlat12 = (-u_xlat12) + u_xlat2.x;
    u_xlat1.x = (-u_xlat2.y) + u_xlat2.w;
    u_xlat5.x = u_xlat12 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat5.x;
    u_xlat1.x = u_xlat1.x + u_xlat2.z;
    u_xlat5.x = u_xlat2.x + 1.00000001e-010;
    u_xlat12 = u_xlat12 / u_xlat5.x;
    u_xlatb5 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);
    u_xlat16_4 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat4.x = u_xlat5.x * u_xlat16_4 + u_xlat10_0.z;
    u_xlatb8 = u_xlat10_0.x>=u_xlat4.x;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat4.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat8 * u_xlat0 + u_xlat4.x;
    u_xlat0 = u_xlat0 * _MaxValue;
    u_xlat0 = min(u_xlat0, u_xlat2.x);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 275
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %83 %95 %96 %110 %149 %152 %155 %264 %267 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %81 0 BuiltIn 81 
                                                      OpMemberDecorate %81 1 BuiltIn 81 
                                                      OpMemberDecorate %81 2 BuiltIn 81 
                                                      OpDecorate %81 Block 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %264 Location 264 
                                                      OpDecorate %267 Location 267 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %58 = OpVariable Private 
                                          i32 %61 = OpConstant 9 
                                          u32 %79 = OpConstant 1 
                                              %80 = OpTypeArray %6 %79 
                                              %81 = OpTypeStruct %7 %6 %80 
                                              %82 = OpTypePointer Output %81 
         Output struct {f32_4; f32; f32[1];}* %83 = OpVariable Output 
                                              %91 = OpTypePointer Output %7 
                                              %93 = OpTypeVector %6 2 
                                              %94 = OpTypePointer Output %93 
                                Output f32_2* %95 = OpVariable Output 
                                 Input f32_4* %96 = OpVariable Input 
                                          i32 %99 = OpConstant 10 
                                             %108 = OpTypeVector %6 3 
                                             %109 = OpTypePointer Input %108 
                                Input f32_3* %110 = OpVariable Input 
                                         i32 %112 = OpConstant 8 
                                         u32 %117 = OpConstant 0 
                                             %118 = OpTypePointer Private %6 
                                         u32 %131 = OpConstant 2 
                                Private f32* %133 = OpVariable Private 
                                             %148 = OpTypePointer Output %108 
                               Output f32_3* %149 = OpVariable Output 
                               Output f32_3* %152 = OpVariable Output 
                               Output f32_4* %155 = OpVariable Output 
                                             %157 = OpTypePointer Private %108 
                              Private f32_3* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                              Private f32_3* %181 = OpVariable Private 
                                         i32 %187 = OpConstant 4 
                                         i32 %193 = OpConstant 5 
                                         i32 %199 = OpConstant 6 
                                         f32 %208 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 3 
                                         f32 %230 = OpConstant 3.674022E-40 
                                       f32_3 %231 = OpConstantComposite %230 %230 %230 
                                         f32 %239 = OpConstant 3.674022E-40 
                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_3 %252 = OpConstantComposite %251 %251 %251 
                                         f32 %254 = OpConstant 3.674022E-40 
                                       f32_3 %255 = OpConstantComposite %254 %254 %254 
                               Output f32_3* %264 = OpVariable Output 
                               Output f32_4* %267 = OpVariable Output 
                                       f32_4 %268 = OpConstantComposite %230 %230 %230 %230 
                                             %269 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %51 = OpAccessChain %21 %23 %47 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %11 
                                        f32_4 %54 = OpVectorShuffle %53 %53 3 3 3 3 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %9 %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %21 %61 %24 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %60 %63 
                                                      OpStore %58 %64 
                               Uniform f32_4* %65 = OpAccessChain %21 %61 %29 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %45 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %58 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %58 %71 
                               Uniform f32_4* %72 = OpAccessChain %21 %61 %37 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %45 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %58 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %58 %78 
                               Uniform f32_4* %84 = OpAccessChain %21 %61 %47 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpLoad %45 
                                        f32_4 %87 = OpVectorShuffle %86 %86 3 3 3 3 
                                        f32_4 %88 = OpFMul %85 %87 
                                        f32_4 %89 = OpLoad %58 
                                        f32_4 %90 = OpFAdd %88 %89 
                                Output f32_4* %92 = OpAccessChain %83 %29 
                                                      OpStore %92 %90 
                                        f32_4 %97 = OpLoad %96 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %100 = OpAccessChain %21 %99 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %98 %102 
                              Uniform f32_4* %104 = OpAccessChain %21 %99 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                                      OpStore %95 %107 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %113 = OpAccessChain %21 %112 %29 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                         f32 %116 = OpDot %111 %115 
                                Private f32* %119 = OpAccessChain %45 %117 
                                                      OpStore %119 %116 
                                       f32_3 %120 = OpLoad %110 
                              Uniform f32_4* %121 = OpAccessChain %21 %112 %24 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %120 %123 
                                Private f32* %125 = OpAccessChain %45 %79 
                                                      OpStore %125 %124 
                                       f32_3 %126 = OpLoad %110 
                              Uniform f32_4* %127 = OpAccessChain %21 %112 %37 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                         f32 %130 = OpDot %126 %129 
                                Private f32* %132 = OpAccessChain %45 %131 
                                                      OpStore %132 %130 
                                       f32_4 %134 = OpLoad %45 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                         f32 %138 = OpDot %135 %137 
                                                      OpStore %133 %138 
                                         f32 %139 = OpLoad %133 
                                         f32 %140 = OpExtInst %1 32 %139 
                                                      OpStore %133 %140 
                                         f32 %141 = OpLoad %133 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %45 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %45 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %45 %147 
                                       f32_4 %150 = OpLoad %45 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                                      OpStore %149 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                                      OpStore %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                                      OpStore %155 %156 
                                Private f32* %159 = OpAccessChain %45 %79 
                                         f32 %160 = OpLoad %159 
                                Private f32* %161 = OpAccessChain %45 %79 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %160 %162 
                                Private f32* %164 = OpAccessChain %158 %117 
                                                      OpStore %164 %163 
                                Private f32* %165 = OpAccessChain %45 %117 
                                         f32 %166 = OpLoad %165 
                                Private f32* %167 = OpAccessChain %45 %117 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                Private f32* %170 = OpAccessChain %158 %117 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFNegate %171 
                                         f32 %173 = OpFAdd %169 %172 
                                Private f32* %174 = OpAccessChain %158 %117 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %45 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 2 2 0 
                                       f32_4 %178 = OpLoad %45 
                                       f32_4 %179 = OpVectorShuffle %178 %178 0 1 2 2 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %175 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %47 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %175 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %181 %117 
                                                      OpStore %186 %185 
                              Uniform f32_4* %188 = OpAccessChain %21 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %175 
                                         f32 %191 = OpDot %189 %190 
                                Private f32* %192 = OpAccessChain %181 %79 
                                                      OpStore %192 %191 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %175 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %181 %131 
                                                      OpStore %198 %197 
                              Uniform f32_4* %200 = OpAccessChain %21 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpLoad %158 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 0 0 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_3 %206 = OpLoad %181 
                                       f32_3 %207 = OpFAdd %205 %206 
                                                      OpStore %158 %207 
                                Private f32* %210 = OpAccessChain %45 %209 
                                                      OpStore %210 %208 
                              Uniform f32_4* %211 = OpAccessChain %21 %29 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %45 
                                         f32 %214 = OpDot %212 %213 
                                Private f32* %215 = OpAccessChain %181 %117 
                                                      OpStore %215 %214 
                              Uniform f32_4* %216 = OpAccessChain %21 %24 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %45 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %181 %79 
                                                      OpStore %220 %219 
                              Uniform f32_4* %221 = OpAccessChain %21 %37 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %45 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %181 %131 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %158 
                                       f32_3 %227 = OpLoad %181 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %158 %228 
                                       f32_3 %229 = OpLoad %158 
                                       f32_3 %232 = OpExtInst %1 40 %229 %231 
                                                      OpStore %158 %232 
                                       f32_3 %233 = OpLoad %158 
                                       f32_3 %234 = OpExtInst %1 30 %233 
                                       f32_4 %235 = OpLoad %45 
                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 6 3 
                                                      OpStore %45 %236 
                                       f32_4 %237 = OpLoad %45 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %241 = OpFMul %238 %240 
                                       f32_4 %242 = OpLoad %45 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %45 %243 
                                       f32_4 %244 = OpLoad %45 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                       f32_3 %246 = OpExtInst %1 29 %245 
                                       f32_4 %247 = OpLoad %45 
                                       f32_4 %248 = OpVectorShuffle %247 %246 4 5 6 3 
                                                      OpStore %45 %248 
                                       f32_4 %249 = OpLoad %45 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %256 = OpFAdd %253 %255 
                                       f32_4 %257 = OpLoad %45 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %45 %258 
                                       f32_4 %259 = OpLoad %45 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpExtInst %1 40 %260 %231 
                                       f32_4 %262 = OpLoad %45 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %45 %263 
                                       f32_4 %265 = OpLoad %45 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                                      OpStore %264 %266 
                                                      OpStore %267 %268 
                                 Output f32* %270 = OpAccessChain %83 %29 %79 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpFNegate %271 
                                 Output f32* %273 = OpAccessChain %83 %29 %79 
                                                      OpStore %273 %272 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 450
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %78 %197 %203 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %29 0 RelaxedPrecision 
                                                      OpMemberDecorate %29 0 Offset 29 
                                                      OpMemberDecorate %29 1 Offset 29 
                                                      OpMemberDecorate %29 2 Offset 29 
                                                      OpMemberDecorate %29 3 Offset 29 
                                                      OpMemberDecorate %29 4 Offset 29 
                                                      OpMemberDecorate %29 5 RelaxedPrecision 
                                                      OpMemberDecorate %29 5 Offset 29 
                                                      OpMemberDecorate %29 6 Offset 29 
                                                      OpMemberDecorate %29 7 RelaxedPrecision 
                                                      OpMemberDecorate %29 7 Offset 29 
                                                      OpDecorate %29 Block 
                                                      OpDecorate %31 DescriptorSet 31 
                                                      OpDecorate %31 Binding 31 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %68 SpecId 68 
                                                      OpDecorate %78 Location 78 
                                                      OpDecorate %162 DescriptorSet 162 
                                                      OpDecorate %162 Binding 162 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %197 Location 197 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %203 Location 203 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeStruct %7 %7 %27 %28 %28 %7 %6 %6 
                                              %30 = OpTypePointer Uniform %29 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32;}* %31 = OpVariable Uniform 
                                              %32 = OpTypeInt 32 1 
                                          i32 %33 = OpConstant 7 
                                              %34 = OpTypePointer Uniform %6 
                                          u32 %39 = OpConstant 0 
                                              %41 = OpTypeBool 
                                              %42 = OpTypePointer Private %41 
                                Private bool* %43 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                          i32 %49 = OpConstant 0 
                                          i32 %50 = OpConstant 1 
                                          i32 %52 = OpConstant -1 
                                          f32 %60 = OpConstant 3.674022E-40 
                                         bool %62 = OpConstantFalse 
                                         bool %68 = OpSpecConstantFalse 
                                          u32 %71 = OpConstant 1 
                                              %75 = OpTypePointer Private %28 
                               Private f32_3* %76 = OpVariable Private 
                                              %77 = OpTypePointer Input %28 
                                 Input f32_3* %78 = OpVariable Input 
                                          i32 %81 = OpConstant 2 
                                              %82 = OpTypePointer Uniform %7 
                                         i32 %104 = OpConstant 3 
                              Private f32_4* %109 = OpVariable Private 
                                             %110 = OpTypePointer Function %28 
                                         i32 %123 = OpConstant 4 
                                             %124 = OpTypePointer Uniform %28 
                              Private f32_4* %131 = OpVariable Private 
                                         f32 %141 = OpConstant 3.674022E-40 
                                         f32 %143 = OpConstant 3.674022E-40 
                                         u32 %146 = OpConstant 2 
                                         f32 %149 = OpConstant 3.674022E-40 
                                             %159 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %160 = OpTypeSampledImage %159 
                                             %161 = OpTypePointer UniformConstant %160 
 UniformConstant read_only Texture3DSampled* %162 = OpVariable UniformConstant 
                              Private f32_3* %173 = OpVariable Private 
                              Private f32_3* %183 = OpVariable Private 
                                         i32 %186 = OpConstant 5 
                                Input f32_3* %197 = OpVariable Input 
                                             %202 = OpTypePointer Output %7 
                               Output f32_4* %203 = OpVariable Output 
                                             %206 = OpTypePointer Output %6 
                               Private bool* %208 = OpVariable Private 
                                Private f32* %214 = OpVariable Private 
                                             %215 = OpTypePointer Function %6 
                                             %222 = OpTypePointer Private %15 
                              Private f32_2* %223 = OpVariable Private 
                              Private f32_2* %230 = OpVariable Private 
                                         f32 %232 = OpConstant 3.674022E-40 
                                         f32 %247 = OpConstant 3.674022E-40 
                                       f32_2 %248 = OpConstantComposite %232 %247 
                              Private f32_4* %272 = OpVariable Private 
                                Private f32* %303 = OpVariable Private 
                                         f32 %319 = OpConstant 3.674022E-40 
                                         f32 %321 = OpConstant 3.674022E-40 
                               Private bool* %341 = OpVariable Private 
                                Private f32* %354 = OpVariable Private 
                              Private f32_3* %361 = OpVariable Private 
                               Private bool* %370 = OpVariable Private 
                                Private f32* %376 = OpVariable Private 
                              Private f32_3* %383 = OpVariable Private 
                                         i32 %401 = OpConstant 6 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_3 %416 = OpConstantComposite %60 %247 %415 
                                       f32_3 %421 = OpConstantComposite %319 %319 %319 
                                         f32 %423 = OpConstant 3.674022E-40 
                                       f32_3 %424 = OpConstantComposite %423 %423 %423 
                                       f32_3 %428 = OpConstantComposite %232 %232 %232 
                                       f32_3 %440 = OpConstantComposite %60 %60 %60 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %111 = OpVariable Function 
                               Function f32* %216 = OpVariable Function 
                               Function f32* %257 = OpVariable Function 
                               Function f32* %347 = OpVariable Function 
                               Function f32* %377 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %35 = OpAccessChain %31 %33 
                                          f32 %36 = OpLoad %35 
                                          f32 %37 = OpFNegate %36 
                                          f32 %38 = OpFAdd %25 %37 
                                 Private f32* %40 = OpAccessChain %20 %39 
                                                      OpStore %40 %38 
                                 Private f32* %44 = OpAccessChain %20 %39 
                                          f32 %45 = OpLoad %44 
                                         bool %47 = OpFOrdLessThan %45 %46 
                                                      OpStore %43 %47 
                                         bool %48 = OpLoad %43 
                                          i32 %51 = OpSelect %48 %50 %49 
                                          i32 %53 = OpIMul %51 %52 
                                         bool %54 = OpINotEqual %53 %49 
                                                      OpSelectionMerge %56 None 
                                                      OpBranchConditional %54 %55 %56 
                                              %55 = OpLabel 
                                                      OpKill
                                              %56 = OpLabel 
                                 Uniform f32* %58 = OpAccessChain %31 %50 %39 
                                          f32 %59 = OpLoad %58 
                                         bool %61 = OpFOrdEqual %59 %60 
                                                      OpStore %43 %61 
                                                      OpSelectionMerge %64 None 
                                                      OpBranchConditional %62 %63 %64 
                                              %63 = OpLabel 
                                         bool %65 = OpLoad %43 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpBranch %67 
                                              %67 = OpLabel 
                                                      OpBranch %64 
                                              %64 = OpLabel 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %168 
                                              %69 = OpLabel 
                                 Uniform f32* %72 = OpAccessChain %31 %50 %71 
                                          f32 %73 = OpLoad %72 
                                         bool %74 = OpFOrdEqual %73 %60 
                                                      OpStore %43 %74 
                                        f32_3 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %31 %81 %50 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %76 %86 
                               Uniform f32_4* %87 = OpAccessChain %31 %81 %49 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpLoad %78 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpFMul %89 %91 
                                        f32_3 %93 = OpLoad %76 
                                        f32_3 %94 = OpFAdd %92 %93 
                                                      OpStore %76 %94 
                               Uniform f32_4* %95 = OpAccessChain %31 %81 %81 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpLoad %78 
                                        f32_3 %99 = OpVectorShuffle %98 %98 2 2 2 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_3 %101 = OpLoad %76 
                                       f32_3 %102 = OpFAdd %100 %101 
                                                      OpStore %76 %102 
                                       f32_3 %103 = OpLoad %76 
                              Uniform f32_4* %105 = OpAccessChain %31 %81 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFAdd %103 %107 
                                                      OpStore %76 %108 
                                        bool %112 = OpLoad %43 
                                                      OpSelectionMerge %114 None 
                                                      OpBranchConditional %112 %113 %116 
                                             %113 = OpLabel 
                                       f32_3 %115 = OpLoad %76 
                                                      OpStore %111 %115 
                                                      OpBranch %114 
                                             %116 = OpLabel 
                                       f32_3 %117 = OpLoad %78 
                                                      OpStore %111 %117 
                                                      OpBranch %114 
                                             %114 = OpLabel 
                                       f32_3 %118 = OpLoad %111 
                                       f32_4 %119 = OpLoad %109 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
                                                      OpStore %109 %120 
                                       f32_4 %121 = OpLoad %109 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                              Uniform f32_3* %125 = OpAccessChain %31 %123 
                                       f32_3 %126 = OpLoad %125 
                                       f32_3 %127 = OpFNegate %126 
                                       f32_3 %128 = OpFAdd %122 %127 
                                       f32_4 %129 = OpLoad %109 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %109 %130 
                                       f32_4 %132 = OpLoad %109 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                              Uniform f32_3* %134 = OpAccessChain %31 %104 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %131 
                                       f32_4 %138 = OpVectorShuffle %137 %136 0 4 5 6 
                                                      OpStore %131 %138 
                                Private f32* %139 = OpAccessChain %131 %71 
                                         f32 %140 = OpLoad %139 
                                         f32 %142 = OpFMul %140 %141 
                                         f32 %144 = OpFAdd %142 %143 
                                Private f32* %145 = OpAccessChain %109 %39 
                                                      OpStore %145 %144 
                                Uniform f32* %147 = OpAccessChain %31 %50 %146 
                                         f32 %148 = OpLoad %147 
                                         f32 %150 = OpFMul %148 %149 
                                         f32 %151 = OpFAdd %150 %143 
                                Private f32* %152 = OpAccessChain %76 %39 
                                                      OpStore %152 %151 
                                Private f32* %153 = OpAccessChain %76 %39 
                                         f32 %154 = OpLoad %153 
                                Private f32* %155 = OpAccessChain %109 %39 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpExtInst %1 40 %154 %156 
                                Private f32* %158 = OpAccessChain %131 %39 
                                                      OpStore %158 %157 
                  read_only Texture3DSampled %163 = OpLoad %162 
                                       f32_4 %164 = OpLoad %131 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 2 3 
                                       f32_4 %166 = OpImageSampleImplicitLod %163 %165 
                                                      OpStore %131 %166 
                                       f32_4 %167 = OpLoad %131 
                                                      OpStore %20 %167 
                                                      OpBranch %70 
                                             %168 = OpLabel 
                                Private f32* %169 = OpAccessChain %20 %39 
                                                      OpStore %169 %60 
                                Private f32* %170 = OpAccessChain %20 %71 
                                                      OpStore %170 %60 
                                Private f32* %171 = OpAccessChain %20 %146 
                                                      OpStore %171 %60 
                                Private f32* %172 = OpAccessChain %20 %22 
                                                      OpStore %172 %60 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                       f32_4 %174 = OpLoad %20 
                              Uniform f32_4* %175 = OpAccessChain %31 %49 
                                       f32_4 %176 = OpLoad %175 
                                         f32 %177 = OpDot %174 %176 
                                Private f32* %178 = OpAccessChain %173 %39 
                                                      OpStore %178 %177 
                                Private f32* %179 = OpAccessChain %173 %39 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpExtInst %1 43 %180 %46 %60 
                                Private f32* %182 = OpAccessChain %173 %39 
                                                      OpStore %182 %181 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                              Uniform f32_4* %187 = OpAccessChain %31 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpFMul %185 %189 
                                                      OpStore %183 %190 
                                       f32_3 %191 = OpLoad %173 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 0 0 
                                       f32_3 %193 = OpLoad %183 
                                       f32_3 %194 = OpFMul %192 %193 
                                                      OpStore %173 %194 
                                       f32_4 %195 = OpLoad %9 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %198 = OpLoad %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_3 %200 = OpLoad %173 
                                       f32_3 %201 = OpFAdd %199 %200 
                                                      OpStore %173 %201 
                                Private f32* %204 = OpAccessChain %9 %22 
                                         f32 %205 = OpLoad %204 
                                 Output f32* %207 = OpAccessChain %203 %22 
                                                      OpStore %207 %205 
                                Private f32* %209 = OpAccessChain %173 %71 
                                         f32 %210 = OpLoad %209 
                                Private f32* %211 = OpAccessChain %173 %146 
                                         f32 %212 = OpLoad %211 
                                        bool %213 = OpFOrdGreaterThanEqual %210 %212 
                                                      OpStore %208 %213 
                                        bool %217 = OpLoad %208 
                                                      OpSelectionMerge %219 None 
                                                      OpBranchConditional %217 %218 %220 
                                             %218 = OpLabel 
                                                      OpStore %216 %60 
                                                      OpBranch %219 
                                             %220 = OpLabel 
                                                      OpStore %216 %46 
                                                      OpBranch %219 
                                             %219 = OpLabel 
                                         f32 %221 = OpLoad %216 
                                                      OpStore %214 %221 
                                       f32_3 %224 = OpLoad %173 
                                       f32_2 %225 = OpVectorShuffle %224 %224 2 1 
                                       f32_2 %226 = OpFNegate %225 
                                       f32_3 %227 = OpLoad %173 
                                       f32_2 %228 = OpVectorShuffle %227 %227 1 2 
                                       f32_2 %229 = OpFAdd %226 %228 
                                                      OpStore %223 %229 
                                Private f32* %231 = OpAccessChain %230 %39 
                                                      OpStore %231 %60 
                                Private f32* %233 = OpAccessChain %230 %71 
                                                      OpStore %233 %232 
                                         f32 %234 = OpLoad %214 
                                       f32_2 %235 = OpCompositeConstruct %234 %234 
                                       f32_2 %236 = OpLoad %223 
                                       f32_2 %237 = OpFMul %235 %236 
                                       f32_3 %238 = OpLoad %173 
                                       f32_2 %239 = OpVectorShuffle %238 %238 2 1 
                                       f32_2 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %131 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 2 3 
                                                      OpStore %131 %242 
                                         f32 %243 = OpLoad %214 
                                       f32_2 %244 = OpCompositeConstruct %243 %243 
                                       f32_2 %245 = OpLoad %230 
                                       f32_2 %246 = OpFMul %244 %245 
                                       f32_2 %249 = OpFAdd %246 %248 
                                       f32_4 %250 = OpLoad %131 
                                       f32_4 %251 = OpVectorShuffle %250 %249 0 1 4 5 
                                                      OpStore %131 %251 
                                Private f32* %252 = OpAccessChain %173 %39 
                                         f32 %253 = OpLoad %252 
                                Private f32* %254 = OpAccessChain %131 %39 
                                         f32 %255 = OpLoad %254 
                                        bool %256 = OpFOrdGreaterThanEqual %253 %255 
                                                      OpStore %208 %256 
                                        bool %258 = OpLoad %208 
                                                      OpSelectionMerge %260 None 
                                                      OpBranchConditional %258 %259 %261 
                                             %259 = OpLabel 
                                                      OpStore %257 %60 
                                                      OpBranch %260 
                                             %261 = OpLabel 
                                                      OpStore %257 %46 
                                                      OpBranch %260 
                                             %260 = OpLabel 
                                         f32 %262 = OpLoad %257 
                                                      OpStore %214 %262 
                                       f32_4 %263 = OpLoad %131 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 3 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_4 %266 = OpLoad %109 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %109 %267 
                                Private f32* %268 = OpAccessChain %173 %39 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                Private f32* %271 = OpAccessChain %109 %22 
                                                      OpStore %271 %270 
                                Private f32* %273 = OpAccessChain %109 %39 
                                         f32 %274 = OpLoad %273 
                                Private f32* %275 = OpAccessChain %173 %39 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpFAdd %274 %276 
                                Private f32* %278 = OpAccessChain %272 %39 
                                                      OpStore %278 %277 
                                       f32_4 %279 = OpLoad %131 
                                       f32_3 %280 = OpVectorShuffle %279 %279 1 2 0 
                                       f32_4 %281 = OpLoad %109 
                                       f32_3 %282 = OpVectorShuffle %281 %281 1 2 3 
                                       f32_3 %283 = OpFAdd %280 %282 
                                       f32_4 %284 = OpLoad %272 
                                       f32_4 %285 = OpVectorShuffle %284 %283 0 4 5 6 
                                                      OpStore %272 %285 
                                         f32 %286 = OpLoad %214 
                                       f32_3 %287 = OpCompositeConstruct %286 %286 %286 
                                       f32_4 %288 = OpLoad %272 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %131 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 3 
                                       f32_3 %293 = OpFAdd %290 %292 
                                       f32_4 %294 = OpLoad %109 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %109 %295 
                                         f32 %296 = OpLoad %214 
                                Private f32* %297 = OpAccessChain %272 %22 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %296 %298 
                                Private f32* %300 = OpAccessChain %173 %39 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                                      OpStore %214 %302 
                                Private f32* %304 = OpAccessChain %109 %71 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpLoad %214 
                                         f32 %307 = OpExtInst %1 37 %305 %306 
                                                      OpStore %303 %307 
                                         f32 %308 = OpLoad %303 
                                         f32 %309 = OpFNegate %308 
                                Private f32* %310 = OpAccessChain %109 %39 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFAdd %309 %311 
                                                      OpStore %303 %312 
                                Private f32* %313 = OpAccessChain %109 %71 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                         f32 %316 = OpLoad %214 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %214 %317 
                                         f32 %318 = OpLoad %303 
                                         f32 %320 = OpFMul %318 %319 
                                         f32 %322 = OpFAdd %320 %321 
                                Private f32* %323 = OpAccessChain %76 %39 
                                                      OpStore %323 %322 
                                         f32 %324 = OpLoad %214 
                                Private f32* %325 = OpAccessChain %76 %39 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpFDiv %324 %326 
                                                      OpStore %214 %327 
                                         f32 %328 = OpLoad %214 
                                Private f32* %329 = OpAccessChain %109 %146 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFAdd %328 %330 
                                                      OpStore %214 %331 
                                Private f32* %332 = OpAccessChain %109 %39 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpFAdd %333 %321 
                                Private f32* %335 = OpAccessChain %76 %39 
                                                      OpStore %335 %334 
                                         f32 %336 = OpLoad %303 
                                Private f32* %337 = OpAccessChain %76 %39 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFDiv %336 %338 
                                Private f32* %340 = OpAccessChain %76 %39 
                                                      OpStore %340 %339 
                                Private f32* %342 = OpAccessChain %9 %71 
                                         f32 %343 = OpLoad %342 
                                Private f32* %344 = OpAccessChain %9 %146 
                                         f32 %345 = OpLoad %344 
                                        bool %346 = OpFOrdGreaterThanEqual %343 %345 
                                                      OpStore %341 %346 
                                        bool %348 = OpLoad %341 
                                                      OpSelectionMerge %350 None 
                                                      OpBranchConditional %348 %349 %351 
                                             %349 = OpLabel 
                                                      OpStore %347 %60 
                                                      OpBranch %350 
                                             %351 = OpLabel 
                                                      OpStore %347 %46 
                                                      OpBranch %350 
                                             %350 = OpLabel 
                                         f32 %352 = OpLoad %347 
                                Private f32* %353 = OpAccessChain %230 %39 
                                                      OpStore %353 %352 
                                Private f32* %355 = OpAccessChain %9 %146 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpFNegate %356 
                                Private f32* %358 = OpAccessChain %9 %71 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                                      OpStore %354 %360 
                                Private f32* %362 = OpAccessChain %230 %39 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpLoad %354 
                                         f32 %365 = OpFMul %363 %364 
                                Private f32* %366 = OpAccessChain %9 %146 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpFAdd %365 %367 
                                Private f32* %369 = OpAccessChain %361 %39 
                                                      OpStore %369 %368 
                                Private f32* %371 = OpAccessChain %9 %39 
                                         f32 %372 = OpLoad %371 
                                Private f32* %373 = OpAccessChain %361 %39 
                                         f32 %374 = OpLoad %373 
                                        bool %375 = OpFOrdGreaterThanEqual %372 %374 
                                                      OpStore %370 %375 
                                        bool %378 = OpLoad %370 
                                                      OpSelectionMerge %380 None 
                                                      OpBranchConditional %378 %379 %381 
                                             %379 = OpLabel 
                                                      OpStore %377 %60 
                                                      OpBranch %380 
                                             %381 = OpLabel 
                                                      OpStore %377 %46 
                                                      OpBranch %380 
                                             %380 = OpLabel 
                                         f32 %382 = OpLoad %377 
                                                      OpStore %376 %382 
                                Private f32* %384 = OpAccessChain %361 %39 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFNegate %385 
                                Private f32* %387 = OpAccessChain %9 %39 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFAdd %386 %388 
                                Private f32* %390 = OpAccessChain %383 %39 
                                                      OpStore %390 %389 
                                         f32 %391 = OpLoad %376 
                                Private f32* %392 = OpAccessChain %383 %39 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                Private f32* %395 = OpAccessChain %361 %39 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFAdd %394 %396 
                                Private f32* %398 = OpAccessChain %383 %39 
                                                      OpStore %398 %397 
                                Private f32* %399 = OpAccessChain %383 %39 
                                         f32 %400 = OpLoad %399 
                                Uniform f32* %402 = OpAccessChain %31 %401 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %400 %403 
                                Private f32* %405 = OpAccessChain %383 %39 
                                                      OpStore %405 %404 
                                Private f32* %406 = OpAccessChain %383 %39 
                                         f32 %407 = OpLoad %406 
                                Private f32* %408 = OpAccessChain %109 %39 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpExtInst %1 37 %407 %409 
                                Private f32* %411 = OpAccessChain %383 %39 
                                                      OpStore %411 %410 
                                         f32 %412 = OpLoad %214 
                                       f32_3 %413 = OpCompositeConstruct %412 %412 %412 
                                       f32_3 %414 = OpExtInst %1 4 %413 
                                       f32_3 %417 = OpFAdd %414 %416 
                                                      OpStore %361 %417 
                                       f32_3 %418 = OpLoad %361 
                                       f32_3 %419 = OpExtInst %1 10 %418 
                                                      OpStore %361 %419 
                                       f32_3 %420 = OpLoad %361 
                                       f32_3 %422 = OpFMul %420 %421 
                                       f32_3 %425 = OpFAdd %422 %424 
                                                      OpStore %361 %425 
                                       f32_3 %426 = OpLoad %361 
                                       f32_3 %427 = OpExtInst %1 4 %426 
                                       f32_3 %429 = OpFAdd %427 %428 
                                                      OpStore %361 %429 
                                       f32_3 %430 = OpLoad %361 
                                       f32_3 %431 = OpCompositeConstruct %46 %46 %46 
                                       f32_3 %432 = OpCompositeConstruct %60 %60 %60 
                                       f32_3 %433 = OpExtInst %1 43 %430 %431 %432 
                                                      OpStore %361 %433 
                                       f32_3 %434 = OpLoad %361 
                                       f32_3 %435 = OpFAdd %434 %428 
                                                      OpStore %361 %435 
                                       f32_3 %436 = OpLoad %76 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 0 0 
                                       f32_3 %438 = OpLoad %361 
                                       f32_3 %439 = OpFMul %437 %438 
                                       f32_3 %441 = OpFAdd %439 %440 
                                                      OpStore %361 %441 
                                       f32_3 %442 = OpLoad %361 
                                       f32_3 %443 = OpLoad %383 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 0 0 
                                       f32_3 %445 = OpFMul %442 %444 
                                                      OpStore %383 %445 
                                       f32_3 %446 = OpLoad %383 
                                       f32_4 %447 = OpLoad %203 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 5 6 3 
                                                      OpStore %203 %448 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat11;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    vs_TEXCOORD1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
float u_xlat8;
bool u_xlatb8;
float u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat5.x = (-u_xlat1.x) + u_xlat5.x;
    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat9 = u_xlat2.y * 0.25 + 0.75;
        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat9);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat9 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat1.x = u_xlat1.x + u_xlat10_2.x;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat9 = min(u_xlat1.x, u_xlat9);
    u_xlat1.x = (u_xlatb5) ? u_xlat9 : u_xlat1.x;
    u_xlat2.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    u_xlat1.w = u_xlat10_0.w;
    u_xlat1 = u_xlat1 + u_xlat2;
    u_xlatb12 = u_xlat1.y>=u_xlat1.z;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat2.xy = u_xlat1.zy;
    u_xlat2.z = float(-1.0);
    u_xlat2.w = float(0.666666687);
    u_xlat3.xy = u_xlat1.yz + (-u_xlat2.xy);
    u_xlat3.z = float(1.0);
    u_xlat3.w = float(-1.0);
    u_xlat2 = vec4(u_xlat12) * u_xlat3 + u_xlat2;
    u_xlatb12 = u_xlat1.x>=u_xlat2.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat3.xyz = u_xlat2.xyw;
    u_xlat3.w = u_xlat1.x;
    u_xlat2.xyw = u_xlat3.wyx;
    u_xlat2 = (-u_xlat3) + u_xlat2;
    u_xlat2 = vec4(u_xlat12) * u_xlat2 + u_xlat3;
    u_xlat12 = min(u_xlat2.y, u_xlat2.w);
    u_xlat12 = (-u_xlat12) + u_xlat2.x;
    u_xlat1.x = (-u_xlat2.y) + u_xlat2.w;
    u_xlat5.x = u_xlat12 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat5.x;
    u_xlat1.x = u_xlat1.x + u_xlat2.z;
    u_xlat5.x = u_xlat2.x + 1.00000001e-010;
    u_xlat12 = u_xlat12 / u_xlat5.x;
    u_xlatb5 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);
    u_xlat16_4 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat4.x = u_xlat5.x * u_xlat16_4 + u_xlat10_0.z;
    u_xlatb8 = u_xlat10_0.x>=u_xlat4.x;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat4.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat8 * u_xlat0 + u_xlat4.x;
    u_xlat0 = u_xlat0 * _MaxValue;
    u_xlat0 = min(u_xlat0, u_xlat2.x);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %88 %94 %95 %109 %140 %146 %149 %151 %173 %185 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %86 0 BuiltIn 86 
                                                      OpMemberDecorate %86 1 BuiltIn 86 
                                                      OpMemberDecorate %86 2 BuiltIn 86 
                                                      OpDecorate %86 Block 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %109 Location 109 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %173 Location 173 
                                                      OpDecorate %185 Location 185 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %84 = OpConstant 1 
                                              %85 = OpTypeArray %6 %84 
                                              %86 = OpTypeStruct %7 %6 %85 
                                              %87 = OpTypePointer Output %86 
         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
                                              %90 = OpTypePointer Output %7 
                                              %92 = OpTypeVector %6 2 
                                              %93 = OpTypePointer Output %92 
                                Output f32_2* %94 = OpVariable Output 
                                 Input f32_4* %95 = OpVariable Input 
                                          i32 %98 = OpConstant 4 
                                             %107 = OpTypeVector %6 3 
                                             %108 = OpTypePointer Input %107 
                                Input f32_3* %109 = OpVariable Input 
                                         u32 %115 = OpConstant 0 
                                             %116 = OpTypePointer Private %6 
                                         u32 %129 = OpConstant 2 
                                Private f32* %131 = OpVariable Private 
                                             %139 = OpTypePointer Output %107 
                               Output f32_3* %140 = OpVariable Output 
                               Output f32_3* %146 = OpVariable Output 
                               Output f32_4* %149 = OpVariable Output 
                               Output f32_3* %151 = OpVariable Output 
                                         f32 %152 = OpConstant 3.674022E-40 
                                       f32_3 %153 = OpConstantComposite %152 %152 %152 
                                             %156 = OpTypePointer Uniform %6 
                                         f32 %163 = OpConstant 3.674022E-40 
                                         u32 %165 = OpConstant 3 
                                       f32_2 %169 = OpConstantComposite %163 %163 
                               Output f32_4* %173 = OpVariable Output 
                               Output f32_4* %185 = OpVariable Output 
                                       f32_4 %186 = OpConstantComposite %152 %152 %152 %152 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %46 %23 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %46 %28 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %46 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %77 = OpAccessChain %21 %46 %46 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %44 
                                        f32_4 %80 = OpVectorShuffle %79 %79 3 3 3 3 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %57 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %44 %83 
                                        f32_4 %89 = OpLoad %44 
                                Output f32_4* %91 = OpAccessChain %88 %28 
                                                      OpStore %91 %89 
                                        f32_4 %96 = OpLoad %95 
                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
                               Uniform f32_4* %99 = OpAccessChain %21 %98 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                       f32_2 %102 = OpFMul %97 %101 
                              Uniform f32_4* %103 = OpAccessChain %21 %98 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_2 %106 = OpFAdd %102 %105 
                                                      OpStore %94 %106 
                                       f32_3 %110 = OpLoad %109 
                              Uniform f32_4* %111 = OpAccessChain %21 %36 %28 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                         f32 %114 = OpDot %110 %113 
                                Private f32* %117 = OpAccessChain %57 %115 
                                                      OpStore %117 %114 
                                       f32_3 %118 = OpLoad %109 
                              Uniform f32_4* %119 = OpAccessChain %21 %36 %23 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                         f32 %122 = OpDot %118 %121 
                                Private f32* %123 = OpAccessChain %57 %84 
                                                      OpStore %123 %122 
                                       f32_3 %124 = OpLoad %109 
                              Uniform f32_4* %125 = OpAccessChain %21 %36 %36 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %124 %127 
                                Private f32* %130 = OpAccessChain %57 %129 
                                                      OpStore %130 %128 
                                       f32_4 %132 = OpLoad %57 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_4 %134 = OpLoad %57 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %133 %135 
                                                      OpStore %131 %136 
                                         f32 %137 = OpLoad %131 
                                         f32 %138 = OpExtInst %1 32 %137 
                                                      OpStore %131 %138 
                                         f32 %141 = OpLoad %131 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %57 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                                      OpStore %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                                      OpStore %149 %150 
                                                      OpStore %151 %153 
                                Private f32* %154 = OpAccessChain %44 %84 
                                         f32 %155 = OpLoad %154 
                                Uniform f32* %157 = OpAccessChain %21 %28 %115 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFMul %155 %158 
                                Private f32* %160 = OpAccessChain %9 %115 
                                                      OpStore %160 %159 
                                Private f32* %161 = OpAccessChain %9 %115 
                                         f32 %162 = OpLoad %161 
                                         f32 %164 = OpFMul %162 %163 
                                Private f32* %166 = OpAccessChain %9 %165 
                                                      OpStore %166 %164 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 3 
                                       f32_2 %170 = OpFMul %168 %169 
                                       f32_4 %171 = OpLoad %9 
                                       f32_4 %172 = OpVectorShuffle %171 %170 4 1 5 3 
                                                      OpStore %9 %172 
                                       f32_4 %174 = OpLoad %44 
                                       f32_2 %175 = OpVectorShuffle %174 %174 2 3 
                                       f32_4 %176 = OpLoad %173 
                                       f32_4 %177 = OpVectorShuffle %176 %175 0 1 4 5 
                                                      OpStore %173 %177 
                                       f32_4 %178 = OpLoad %9 
                                       f32_2 %179 = OpVectorShuffle %178 %178 2 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 3 
                                       f32_2 %182 = OpFAdd %179 %181 
                                       f32_4 %183 = OpLoad %173 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 2 3 
                                                      OpStore %173 %184 
                                                      OpStore %185 %186 
                                 Output f32* %188 = OpAccessChain %88 %28 %84 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %88 %28 %84 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 570
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %61 %270 %323 %329 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %28 ArrayStride 28 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 RelaxedPrecision 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 RelaxedPrecision 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpMemberDecorate %30 8 Offset 30 
                                                      OpMemberDecorate %30 9 RelaxedPrecision 
                                                      OpMemberDecorate %30 9 Offset 30 
                                                      OpMemberDecorate %30 10 Offset 30 
                                                      OpMemberDecorate %30 11 RelaxedPrecision 
                                                      OpMemberDecorate %30 11 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %61 Location 61 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %149 SpecId 149 
                                                      OpDecorate %248 DescriptorSet 248 
                                                      OpDecorate %248 Binding 248 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %270 Location 270 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %277 DescriptorSet 277 
                                                      OpDecorate %277 Binding 277 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %323 Location 323 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %329 Location 329 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                              %26 = OpTypeVector %6 3 
                                          u32 %27 = OpConstant 4 
                                              %28 = OpTypeArray %7 %27 
                                              %29 = OpTypeArray %7 %27 
                                              %30 = OpTypeStruct %26 %7 %7 %7 %28 %7 %29 %26 %26 %7 %6 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 11 
                                              %35 = OpTypePointer Uniform %6 
                                          u32 %40 = OpConstant 0 
                                              %42 = OpTypeBool 
                                              %43 = OpTypePointer Private %42 
                                Private bool* %44 = OpVariable Private 
                                          f32 %47 = OpConstant 3.674022E-40 
                                          i32 %50 = OpConstant 0 
                                          i32 %51 = OpConstant 1 
                                          i32 %53 = OpConstant -1 
                               Private f32_4* %59 = OpVariable Private 
                                              %60 = OpTypePointer Input %26 
                                 Input f32_3* %61 = OpVariable Input 
                                              %64 = OpTypePointer Uniform %26 
                               Private f32_4* %70 = OpVariable Private 
                                          i32 %71 = OpConstant 4 
                                          u32 %72 = OpConstant 2 
                                          u32 %78 = OpConstant 1 
                                          i32 %80 = OpConstant 2 
                                              %90 = OpTypePointer Private %26 
                               Private f32_3* %91 = OpVariable Private 
                                          i32 %93 = OpConstant 3 
                                              %94 = OpTypePointer Uniform %7 
                                         f32 %135 = OpConstant 3.674022E-40 
                               Private bool* %138 = OpVariable Private 
                                         i32 %139 = OpConstant 5 
                                        bool %143 = OpConstantFalse 
                                        bool %149 = OpSpecConstantFalse 
                               Private bool* %152 = OpVariable Private 
                                         i32 %158 = OpConstant 6 
                                             %195 = OpTypePointer Function %26 
                                         i32 %209 = OpConstant 8 
                              Private f32_4* %216 = OpVariable Private 
                                         i32 %219 = OpConstant 7 
                                             %225 = OpTypePointer Private %15 
                              Private f32_2* %226 = OpVariable Private 
                                         f32 %229 = OpConstant 3.674022E-40 
                                         f32 %231 = OpConstant 3.674022E-40 
                                Private f32* %234 = OpVariable Private 
                                         f32 %237 = OpConstant 3.674022E-40 
                                             %245 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %246 = OpTypeSampledImage %245 
                                             %247 = OpTypePointer UniformConstant %246 
 UniformConstant read_only Texture3DSampled* %248 = OpVariable UniformConstant 
                              Private f32_3* %259 = OpVariable Private 
                                             %269 = OpTypePointer Input %7 
                                Input f32_4* %270 = OpVariable Input 
                                Private f32* %276 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %277 = OpVariable UniformConstant 
                              Private f32_3* %282 = OpVariable Private 
                                             %298 = OpTypePointer Function %6 
                                         i32 %312 = OpConstant 9 
                                Input f32_3* %323 = OpVariable Input 
                                             %328 = OpTypePointer Output %7 
                               Output f32_4* %329 = OpVariable Output 
                                             %332 = OpTypePointer Output %6 
                               Private bool* %334 = OpVariable Private 
                                Private f32* %340 = OpVariable Private 
                              Private f32_2* %347 = OpVariable Private 
                                         f32 %355 = OpConstant 3.674022E-40 
                                         f32 %370 = OpConstant 3.674022E-40 
                                       f32_2 %371 = OpConstantComposite %355 %370 
                                         f32 %440 = OpConstant 3.674022E-40 
                                         f32 %442 = OpConstant 3.674022E-40 
                                Private f32* %474 = OpVariable Private 
                              Private f32_3* %481 = OpVariable Private 
                               Private bool* %490 = OpVariable Private 
                                Private f32* %496 = OpVariable Private 
                              Private f32_3* %503 = OpVariable Private 
                                         i32 %521 = OpConstant 10 
                                         f32 %535 = OpConstant 3.674022E-40 
                                       f32_3 %536 = OpConstantComposite %135 %370 %535 
                                       f32_3 %541 = OpConstantComposite %440 %440 %440 
                                         f32 %543 = OpConstant 3.674022E-40 
                                       f32_3 %544 = OpConstantComposite %543 %543 %543 
                                       f32_3 %548 = OpConstantComposite %355 %355 %355 
                                       f32_3 %560 = OpConstantComposite %135 %135 %135 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %196 = OpVariable Function 
                               Function f32* %299 = OpVariable Function 
                               Function f32* %341 = OpVariable Function 
                               Function f32* %380 = OpVariable Function 
                               Function f32* %467 = OpVariable Function 
                               Function f32* %497 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                 Private f32* %41 = OpAccessChain %20 %40 
                                                      OpStore %41 %39 
                                 Private f32* %45 = OpAccessChain %20 %40 
                                          f32 %46 = OpLoad %45 
                                         bool %48 = OpFOrdLessThan %46 %47 
                                                      OpStore %44 %48 
                                         bool %49 = OpLoad %44 
                                          i32 %52 = OpSelect %49 %51 %50 
                                          i32 %54 = OpIMul %52 %53 
                                         bool %55 = OpINotEqual %54 %50 
                                                      OpSelectionMerge %57 None 
                                                      OpBranchConditional %55 %56 %57 
                                              %56 = OpLabel 
                                                      OpKill
                                              %57 = OpLabel 
                                        f32_3 %62 = OpLoad %61 
                                        f32_3 %63 = OpFNegate %62 
                               Uniform f32_3* %65 = OpAccessChain %32 %50 
                                        f32_3 %66 = OpLoad %65 
                                        f32_3 %67 = OpFAdd %63 %66 
                                        f32_4 %68 = OpLoad %59 
                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 6 3 
                                                      OpStore %59 %69 
                                 Uniform f32* %73 = OpAccessChain %32 %71 %50 %72 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %70 %40 
                                                      OpStore %75 %74 
                                 Uniform f32* %76 = OpAccessChain %32 %71 %51 %72 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %79 = OpAccessChain %70 %78 
                                                      OpStore %79 %77 
                                 Uniform f32* %81 = OpAccessChain %32 %71 %80 %72 
                                          f32 %82 = OpLoad %81 
                                 Private f32* %83 = OpAccessChain %70 %72 
                                                      OpStore %83 %82 
                                        f32_4 %84 = OpLoad %59 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_4 %86 = OpLoad %70 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                          f32 %88 = OpDot %85 %87 
                                 Private f32* %89 = OpAccessChain %59 %40 
                                                      OpStore %89 %88 
                                        f32_3 %92 = OpLoad %61 
                               Uniform f32_4* %95 = OpAccessChain %32 %93 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFNegate %97 
                                        f32_3 %99 = OpFAdd %92 %98 
                                                      OpStore %91 %99 
                                       f32_3 %100 = OpLoad %91 
                                       f32_3 %101 = OpLoad %91 
                                         f32 %102 = OpDot %100 %101 
                                Private f32* %103 = OpAccessChain %91 %40 
                                                      OpStore %103 %102 
                                Private f32* %104 = OpAccessChain %91 %40 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpExtInst %1 31 %105 
                                Private f32* %107 = OpAccessChain %91 %40 
                                                      OpStore %107 %106 
                                Private f32* %108 = OpAccessChain %59 %40 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                Private f32* %111 = OpAccessChain %91 %40 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFAdd %110 %112 
                                Private f32* %114 = OpAccessChain %91 %40 
                                                      OpStore %114 %113 
                                Uniform f32* %115 = OpAccessChain %32 %93 %22 
                                         f32 %116 = OpLoad %115 
                                Private f32* %117 = OpAccessChain %91 %40 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFMul %116 %118 
                                Private f32* %120 = OpAccessChain %59 %40 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %119 %121 
                                Private f32* %123 = OpAccessChain %59 %40 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %59 %40 
                                         f32 %125 = OpLoad %124 
                                Uniform f32* %126 = OpAccessChain %32 %80 %72 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %32 %80 %22 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFAdd %128 %130 
                                Private f32* %132 = OpAccessChain %59 %40 
                                                      OpStore %132 %131 
                                Private f32* %133 = OpAccessChain %59 %40 
                                         f32 %134 = OpLoad %133 
                                         f32 %136 = OpExtInst %1 43 %134 %47 %135 
                                Private f32* %137 = OpAccessChain %59 %40 
                                                      OpStore %137 %136 
                                Uniform f32* %140 = OpAccessChain %32 %139 %40 
                                         f32 %141 = OpLoad %140 
                                        bool %142 = OpFOrdEqual %141 %135 
                                                      OpStore %138 %142 
                                                      OpSelectionMerge %145 None 
                                                      OpBranchConditional %143 %144 %145 
                                             %144 = OpLabel 
                                        bool %146 = OpLoad %138 
                                                      OpSelectionMerge %148 None 
                                                      OpBranchConditional %146 %147 %148 
                                             %147 = OpLabel 
                                                      OpBranch %148 
                                             %148 = OpLabel 
                                                      OpBranch %145 
                                             %145 = OpLabel 
                                                      OpSelectionMerge %151 None 
                                                      OpBranchConditional %149 %150 %254 
                                             %150 = OpLabel 
                                Uniform f32* %153 = OpAccessChain %32 %139 %78 
                                         f32 %154 = OpLoad %153 
                                        bool %155 = OpFOrdEqual %154 %135 
                                                      OpStore %152 %155 
                                       f32_3 %156 = OpLoad %61 
                                       f32_3 %157 = OpVectorShuffle %156 %156 1 1 1 
                              Uniform f32_4* %159 = OpAccessChain %32 %158 %51 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFMul %157 %161 
                                       f32_4 %163 = OpLoad %70 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %70 %164 
                              Uniform f32_4* %165 = OpAccessChain %32 %158 %50 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpLoad %61 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 0 0 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_4 %171 = OpLoad %70 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %173 = OpFAdd %170 %172 
                                       f32_4 %174 = OpLoad %70 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                                      OpStore %70 %175 
                              Uniform f32_4* %176 = OpAccessChain %32 %158 %80 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpLoad %61 
                                       f32_3 %180 = OpVectorShuffle %179 %179 2 2 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_4 %182 = OpLoad %70 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFAdd %181 %183 
                                       f32_4 %185 = OpLoad %70 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
                                                      OpStore %70 %186 
                                       f32_4 %187 = OpLoad %70 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                              Uniform f32_4* %189 = OpAccessChain %32 %158 %93 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFAdd %188 %191 
                                       f32_4 %193 = OpLoad %70 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %70 %194 
                                        bool %197 = OpLoad %152 
                                                      OpSelectionMerge %199 None 
                                                      OpBranchConditional %197 %198 %202 
                                             %198 = OpLabel 
                                       f32_4 %200 = OpLoad %70 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                                      OpStore %196 %201 
                                                      OpBranch %199 
                                             %202 = OpLabel 
                                       f32_3 %203 = OpLoad %61 
                                                      OpStore %196 %203 
                                                      OpBranch %199 
                                             %199 = OpLabel 
                                       f32_3 %204 = OpLoad %196 
                                       f32_4 %205 = OpLoad %70 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 6 3 
                                                      OpStore %70 %206 
                                       f32_4 %207 = OpLoad %70 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                              Uniform f32_3* %210 = OpAccessChain %32 %209 
                                       f32_3 %211 = OpLoad %210 
                                       f32_3 %212 = OpFNegate %211 
                                       f32_3 %213 = OpFAdd %208 %212 
                                       f32_4 %214 = OpLoad %70 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 6 3 
                                                      OpStore %70 %215 
                                       f32_4 %217 = OpLoad %70 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                              Uniform f32_3* %220 = OpAccessChain %32 %219 
                                       f32_3 %221 = OpLoad %220 
                                       f32_3 %222 = OpFMul %218 %221 
                                       f32_4 %223 = OpLoad %216 
                                       f32_4 %224 = OpVectorShuffle %223 %222 0 4 5 6 
                                                      OpStore %216 %224 
                                Private f32* %227 = OpAccessChain %216 %78 
                                         f32 %228 = OpLoad %227 
                                         f32 %230 = OpFMul %228 %229 
                                         f32 %232 = OpFAdd %230 %231 
                                Private f32* %233 = OpAccessChain %226 %40 
                                                      OpStore %233 %232 
                                Uniform f32* %235 = OpAccessChain %32 %139 %72 
                                         f32 %236 = OpLoad %235 
                                         f32 %238 = OpFMul %236 %237 
                                         f32 %239 = OpFAdd %238 %231 
                                                      OpStore %234 %239 
                                         f32 %240 = OpLoad %234 
                                Private f32* %241 = OpAccessChain %226 %40 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpExtInst %1 40 %240 %242 
                                Private f32* %244 = OpAccessChain %216 %40 
                                                      OpStore %244 %243 
                  read_only Texture3DSampled %249 = OpLoad %248 
                                       f32_4 %250 = OpLoad %216 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 2 3 
                                       f32_4 %252 = OpImageSampleImplicitLod %249 %251 
                                                      OpStore %216 %252 
                                       f32_4 %253 = OpLoad %216 
                                                      OpStore %20 %253 
                                                      OpBranch %151 
                                             %254 = OpLabel 
                                Private f32* %255 = OpAccessChain %20 %40 
                                                      OpStore %255 %135 
                                Private f32* %256 = OpAccessChain %20 %78 
                                                      OpStore %256 %135 
                                Private f32* %257 = OpAccessChain %20 %72 
                                                      OpStore %257 %135 
                                Private f32* %258 = OpAccessChain %20 %22 
                                                      OpStore %258 %135 
                                                      OpBranch %151 
                                             %151 = OpLabel 
                                       f32_4 %260 = OpLoad %20 
                              Uniform f32_4* %261 = OpAccessChain %32 %51 
                                       f32_4 %262 = OpLoad %261 
                                         f32 %263 = OpDot %260 %262 
                                Private f32* %264 = OpAccessChain %259 %40 
                                                      OpStore %264 %263 
                                Private f32* %265 = OpAccessChain %259 %40 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpExtInst %1 43 %266 %47 %135 
                                Private f32* %268 = OpAccessChain %259 %40 
                                                      OpStore %268 %267 
                                       f32_4 %271 = OpLoad %270 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
                                       f32_4 %273 = OpLoad %270 
                                       f32_2 %274 = OpVectorShuffle %273 %273 3 3 
                                       f32_2 %275 = OpFDiv %272 %274 
                                                      OpStore %226 %275 
                  read_only Texture2DSampled %278 = OpLoad %277 
                                       f32_2 %279 = OpLoad %226 
                                       f32_4 %280 = OpImageSampleImplicitLod %278 %279 
                                         f32 %281 = OpCompositeExtract %280 0 
                                                      OpStore %276 %281 
                                Private f32* %283 = OpAccessChain %59 %40 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpLoad %276 
                                         f32 %286 = OpFAdd %284 %285 
                                Private f32* %287 = OpAccessChain %282 %40 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %282 %40 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpExtInst %1 43 %289 %47 %135 
                                Private f32* %291 = OpAccessChain %282 %40 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %282 %40 
                                         f32 %293 = OpLoad %292 
                                Private f32* %294 = OpAccessChain %259 %40 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 37 %293 %295 
                                Private f32* %297 = OpAccessChain %259 %40 
                                                      OpStore %297 %296 
                                        bool %300 = OpLoad %138 
                                                      OpSelectionMerge %302 None 
                                                      OpBranchConditional %300 %301 %305 
                                             %301 = OpLabel 
                                Private f32* %303 = OpAccessChain %259 %40 
                                         f32 %304 = OpLoad %303 
                                                      OpStore %299 %304 
                                                      OpBranch %302 
                                             %305 = OpLabel 
                                Private f32* %306 = OpAccessChain %282 %40 
                                         f32 %307 = OpLoad %306 
                                                      OpStore %299 %307 
                                                      OpBranch %302 
                                             %302 = OpLabel 
                                         f32 %308 = OpLoad %299 
                                Private f32* %309 = OpAccessChain %259 %40 
                                                      OpStore %309 %308 
                                       f32_4 %310 = OpLoad %9 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                              Uniform f32_4* %313 = OpAccessChain %32 %312 
                                       f32_4 %314 = OpLoad %313 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                       f32_3 %316 = OpFMul %311 %315 
                                                      OpStore %282 %316 
                                       f32_3 %317 = OpLoad %259 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 0 0 
                                       f32_3 %319 = OpLoad %282 
                                       f32_3 %320 = OpFMul %318 %319 
                                                      OpStore %259 %320 
                                       f32_4 %321 = OpLoad %9 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_3 %324 = OpLoad %323 
                                       f32_3 %325 = OpFMul %322 %324 
                                       f32_3 %326 = OpLoad %259 
                                       f32_3 %327 = OpFAdd %325 %326 
                                                      OpStore %259 %327 
                                Private f32* %330 = OpAccessChain %9 %22 
                                         f32 %331 = OpLoad %330 
                                 Output f32* %333 = OpAccessChain %329 %22 
                                                      OpStore %333 %331 
                                Private f32* %335 = OpAccessChain %259 %78 
                                         f32 %336 = OpLoad %335 
                                Private f32* %337 = OpAccessChain %259 %72 
                                         f32 %338 = OpLoad %337 
                                        bool %339 = OpFOrdGreaterThanEqual %336 %338 
                                                      OpStore %334 %339 
                                        bool %342 = OpLoad %334 
                                                      OpSelectionMerge %344 None 
                                                      OpBranchConditional %342 %343 %345 
                                             %343 = OpLabel 
                                                      OpStore %341 %135 
                                                      OpBranch %344 
                                             %345 = OpLabel 
                                                      OpStore %341 %47 
                                                      OpBranch %344 
                                             %344 = OpLabel 
                                         f32 %346 = OpLoad %341 
                                                      OpStore %340 %346 
                                       f32_3 %348 = OpLoad %259 
                                       f32_2 %349 = OpVectorShuffle %348 %348 2 1 
                                       f32_2 %350 = OpFNegate %349 
                                       f32_3 %351 = OpLoad %259 
                                       f32_2 %352 = OpVectorShuffle %351 %351 1 2 
                                       f32_2 %353 = OpFAdd %350 %352 
                                                      OpStore %347 %353 
                                Private f32* %354 = OpAccessChain %226 %40 
                                                      OpStore %354 %135 
                                Private f32* %356 = OpAccessChain %226 %78 
                                                      OpStore %356 %355 
                                         f32 %357 = OpLoad %340 
                                       f32_2 %358 = OpCompositeConstruct %357 %357 
                                       f32_2 %359 = OpLoad %347 
                                       f32_2 %360 = OpFMul %358 %359 
                                       f32_3 %361 = OpLoad %259 
                                       f32_2 %362 = OpVectorShuffle %361 %361 2 1 
                                       f32_2 %363 = OpFAdd %360 %362 
                                       f32_4 %364 = OpLoad %216 
                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 2 3 
                                                      OpStore %216 %365 
                                         f32 %366 = OpLoad %340 
                                       f32_2 %367 = OpCompositeConstruct %366 %366 
                                       f32_2 %368 = OpLoad %226 
                                       f32_2 %369 = OpFMul %367 %368 
                                       f32_2 %372 = OpFAdd %369 %371 
                                       f32_4 %373 = OpLoad %216 
                                       f32_4 %374 = OpVectorShuffle %373 %372 0 1 4 5 
                                                      OpStore %216 %374 
                                Private f32* %375 = OpAccessChain %259 %40 
                                         f32 %376 = OpLoad %375 
                                Private f32* %377 = OpAccessChain %216 %40 
                                         f32 %378 = OpLoad %377 
                                        bool %379 = OpFOrdGreaterThanEqual %376 %378 
                                                      OpStore %334 %379 
                                        bool %381 = OpLoad %334 
                                                      OpSelectionMerge %383 None 
                                                      OpBranchConditional %381 %382 %384 
                                             %382 = OpLabel 
                                                      OpStore %380 %135 
                                                      OpBranch %383 
                                             %384 = OpLabel 
                                                      OpStore %380 %47 
                                                      OpBranch %383 
                                             %383 = OpLabel 
                                         f32 %385 = OpLoad %380 
                                                      OpStore %340 %385 
                                       f32_4 %386 = OpLoad %216 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 3 
                                       f32_3 %388 = OpFNegate %387 
                                       f32_4 %389 = OpLoad %59 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 6 3 
                                                      OpStore %59 %390 
                                Private f32* %391 = OpAccessChain %259 %40 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFNegate %392 
                                Private f32* %394 = OpAccessChain %59 %22 
                                                      OpStore %394 %393 
                                Private f32* %395 = OpAccessChain %59 %40 
                                         f32 %396 = OpLoad %395 
                                Private f32* %397 = OpAccessChain %259 %40 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFAdd %396 %398 
                                Private f32* %400 = OpAccessChain %70 %40 
                                                      OpStore %400 %399 
                                       f32_4 %401 = OpLoad %216 
                                       f32_3 %402 = OpVectorShuffle %401 %401 1 2 0 
                                       f32_4 %403 = OpLoad %59 
                                       f32_3 %404 = OpVectorShuffle %403 %403 1 2 3 
                                       f32_3 %405 = OpFAdd %402 %404 
                                       f32_4 %406 = OpLoad %70 
                                       f32_4 %407 = OpVectorShuffle %406 %405 0 4 5 6 
                                                      OpStore %70 %407 
                                         f32 %408 = OpLoad %340 
                                       f32_3 %409 = OpCompositeConstruct %408 %408 %408 
                                       f32_4 %410 = OpLoad %70 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                       f32_3 %412 = OpFMul %409 %411 
                                       f32_4 %413 = OpLoad %216 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 3 
                                       f32_3 %415 = OpFAdd %412 %414 
                                       f32_4 %416 = OpLoad %59 
                                       f32_4 %417 = OpVectorShuffle %416 %415 4 5 6 3 
                                                      OpStore %59 %417 
                                         f32 %418 = OpLoad %340 
                                Private f32* %419 = OpAccessChain %70 %22 
                                         f32 %420 = OpLoad %419 
                                         f32 %421 = OpFMul %418 %420 
                                Private f32* %422 = OpAccessChain %259 %40 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFAdd %421 %423 
                                                      OpStore %340 %424 
                                Private f32* %425 = OpAccessChain %59 %78 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpLoad %340 
                                         f32 %428 = OpExtInst %1 37 %426 %427 
                                                      OpStore %234 %428 
                                         f32 %429 = OpLoad %234 
                                         f32 %430 = OpFNegate %429 
                                Private f32* %431 = OpAccessChain %59 %40 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpFAdd %430 %432 
                                                      OpStore %234 %433 
                                Private f32* %434 = OpAccessChain %59 %78 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpFNegate %435 
                                         f32 %437 = OpLoad %340 
                                         f32 %438 = OpFAdd %436 %437 
                                                      OpStore %340 %438 
                                         f32 %439 = OpLoad %234 
                                         f32 %441 = OpFMul %439 %440 
                                         f32 %443 = OpFAdd %441 %442 
                                Private f32* %444 = OpAccessChain %91 %40 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %340 
                                Private f32* %446 = OpAccessChain %91 %40 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFDiv %445 %447 
                                                      OpStore %340 %448 
                                         f32 %449 = OpLoad %340 
                                Private f32* %450 = OpAccessChain %59 %72 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFAdd %449 %451 
                                                      OpStore %340 %452 
                                Private f32* %453 = OpAccessChain %59 %40 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpFAdd %454 %442 
                                Private f32* %456 = OpAccessChain %91 %40 
                                                      OpStore %456 %455 
                                         f32 %457 = OpLoad %234 
                                Private f32* %458 = OpAccessChain %91 %40 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFDiv %457 %459 
                                Private f32* %461 = OpAccessChain %91 %40 
                                                      OpStore %461 %460 
                                Private f32* %462 = OpAccessChain %9 %78 
                                         f32 %463 = OpLoad %462 
                                Private f32* %464 = OpAccessChain %9 %72 
                                         f32 %465 = OpLoad %464 
                                        bool %466 = OpFOrdGreaterThanEqual %463 %465 
                                                      OpStore %152 %466 
                                        bool %468 = OpLoad %152 
                                                      OpSelectionMerge %470 None 
                                                      OpBranchConditional %468 %469 %471 
                                             %469 = OpLabel 
                                                      OpStore %467 %135 
                                                      OpBranch %470 
                                             %471 = OpLabel 
                                                      OpStore %467 %47 
                                                      OpBranch %470 
                                             %470 = OpLabel 
                                         f32 %472 = OpLoad %467 
                                Private f32* %473 = OpAccessChain %226 %40 
                                                      OpStore %473 %472 
                                Private f32* %475 = OpAccessChain %9 %72 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFNegate %476 
                                Private f32* %478 = OpAccessChain %9 %78 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFAdd %477 %479 
                                                      OpStore %474 %480 
                                Private f32* %482 = OpAccessChain %226 %40 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpLoad %474 
                                         f32 %485 = OpFMul %483 %484 
                                Private f32* %486 = OpAccessChain %9 %72 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFAdd %485 %487 
                                Private f32* %489 = OpAccessChain %481 %40 
                                                      OpStore %489 %488 
                                Private f32* %491 = OpAccessChain %9 %40 
                                         f32 %492 = OpLoad %491 
                                Private f32* %493 = OpAccessChain %481 %40 
                                         f32 %494 = OpLoad %493 
                                        bool %495 = OpFOrdGreaterThanEqual %492 %494 
                                                      OpStore %490 %495 
                                        bool %498 = OpLoad %490 
                                                      OpSelectionMerge %500 None 
                                                      OpBranchConditional %498 %499 %501 
                                             %499 = OpLabel 
                                                      OpStore %497 %135 
                                                      OpBranch %500 
                                             %501 = OpLabel 
                                                      OpStore %497 %47 
                                                      OpBranch %500 
                                             %500 = OpLabel 
                                         f32 %502 = OpLoad %497 
                                                      OpStore %496 %502 
                                Private f32* %504 = OpAccessChain %481 %40 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpFNegate %505 
                                Private f32* %507 = OpAccessChain %9 %40 
                                         f32 %508 = OpLoad %507 
                                         f32 %509 = OpFAdd %506 %508 
                                Private f32* %510 = OpAccessChain %503 %40 
                                                      OpStore %510 %509 
                                         f32 %511 = OpLoad %496 
                                Private f32* %512 = OpAccessChain %503 %40 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFMul %511 %513 
                                Private f32* %515 = OpAccessChain %481 %40 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFAdd %514 %516 
                                Private f32* %518 = OpAccessChain %503 %40 
                                                      OpStore %518 %517 
                                Private f32* %519 = OpAccessChain %503 %40 
                                         f32 %520 = OpLoad %519 
                                Uniform f32* %522 = OpAccessChain %32 %521 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %520 %523 
                                Private f32* %525 = OpAccessChain %503 %40 
                                                      OpStore %525 %524 
                                Private f32* %526 = OpAccessChain %503 %40 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %59 %40 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpExtInst %1 37 %527 %529 
                                Private f32* %531 = OpAccessChain %503 %40 
                                                      OpStore %531 %530 
                                         f32 %532 = OpLoad %340 
                                       f32_3 %533 = OpCompositeConstruct %532 %532 %532 
                                       f32_3 %534 = OpExtInst %1 4 %533 
                                       f32_3 %537 = OpFAdd %534 %536 
                                                      OpStore %481 %537 
                                       f32_3 %538 = OpLoad %481 
                                       f32_3 %539 = OpExtInst %1 10 %538 
                                                      OpStore %481 %539 
                                       f32_3 %540 = OpLoad %481 
                                       f32_3 %542 = OpFMul %540 %541 
                                       f32_3 %545 = OpFAdd %542 %544 
                                                      OpStore %481 %545 
                                       f32_3 %546 = OpLoad %481 
                                       f32_3 %547 = OpExtInst %1 4 %546 
                                       f32_3 %549 = OpFAdd %547 %548 
                                                      OpStore %481 %549 
                                       f32_3 %550 = OpLoad %481 
                                       f32_3 %551 = OpCompositeConstruct %47 %47 %47 
                                       f32_3 %552 = OpCompositeConstruct %135 %135 %135 
                                       f32_3 %553 = OpExtInst %1 43 %550 %551 %552 
                                                      OpStore %481 %553 
                                       f32_3 %554 = OpLoad %481 
                                       f32_3 %555 = OpFAdd %554 %548 
                                                      OpStore %481 %555 
                                       f32_3 %556 = OpLoad %91 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 0 0 
                                       f32_3 %558 = OpLoad %481 
                                       f32_3 %559 = OpFMul %557 %558 
                                       f32_3 %561 = OpFAdd %559 %560 
                                                      OpStore %481 %561 
                                       f32_3 %562 = OpLoad %481 
                                       f32_3 %563 = OpLoad %503 
                                       f32_3 %564 = OpVectorShuffle %563 %563 0 0 0 
                                       f32_3 %565 = OpFMul %562 %564 
                                                      OpStore %503 %565 
                                       f32_3 %566 = OpLoad %503 
                                       f32_4 %567 = OpLoad %329 
                                       f32_4 %568 = OpVectorShuffle %567 %566 4 5 6 3 
                                                      OpStore %329 %568 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
float u_xlat8;
bool u_xlatb8;
float u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat5.x = (-u_xlat1.x) + u_xlat5.x;
    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat9 = u_xlat2.y * 0.25 + 0.75;
        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat9);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat9 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat1.x = u_xlat1.x + u_xlat10_2.x;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat9 = min(u_xlat1.x, u_xlat9);
    u_xlat1.x = (u_xlatb5) ? u_xlat9 : u_xlat1.x;
    u_xlat2.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    u_xlat1.w = u_xlat10_0.w;
    u_xlat1 = u_xlat1 + u_xlat2;
    u_xlatb12 = u_xlat1.y>=u_xlat1.z;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat2.xy = u_xlat1.zy;
    u_xlat2.z = float(-1.0);
    u_xlat2.w = float(0.666666687);
    u_xlat3.xy = u_xlat1.yz + (-u_xlat2.xy);
    u_xlat3.z = float(1.0);
    u_xlat3.w = float(-1.0);
    u_xlat2 = vec4(u_xlat12) * u_xlat3 + u_xlat2;
    u_xlatb12 = u_xlat1.x>=u_xlat2.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat3.xyz = u_xlat2.xyw;
    u_xlat3.w = u_xlat1.x;
    u_xlat2.xyw = u_xlat3.wyx;
    u_xlat2 = (-u_xlat3) + u_xlat2;
    u_xlat2 = vec4(u_xlat12) * u_xlat2 + u_xlat3;
    u_xlat12 = min(u_xlat2.y, u_xlat2.w);
    u_xlat12 = (-u_xlat12) + u_xlat2.x;
    u_xlat1.x = (-u_xlat2.y) + u_xlat2.w;
    u_xlat5.x = u_xlat12 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat5.x;
    u_xlat1.x = u_xlat1.x + u_xlat2.z;
    u_xlat5.x = u_xlat2.x + 1.00000001e-010;
    u_xlat12 = u_xlat12 / u_xlat5.x;
    u_xlatb5 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);
    u_xlat16_4 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat4.x = u_xlat5.x * u_xlat16_4 + u_xlat10_0.z;
    u_xlatb8 = u_xlat10_0.x>=u_xlat4.x;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat4.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat8 * u_xlat0 + u_xlat4.x;
    u_xlat0 = u_xlat0 * _MaxValue;
    u_xlat0 = min(u_xlat0, u_xlat2.x);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 303
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %96 %97 %111 %150 %153 %156 %266 %283 %295 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %111 Location 111 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %266 Location 266 
                                                      OpDecorate %283 Location 283 
                                                      OpDecorate %295 Location 295 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %58 = OpVariable Private 
                                          i32 %61 = OpConstant 10 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %92 = OpTypePointer Output %7 
                                              %94 = OpTypeVector %6 2 
                                              %95 = OpTypePointer Output %94 
                                Output f32_2* %96 = OpVariable Output 
                                 Input f32_4* %97 = OpVariable Input 
                                         i32 %100 = OpConstant 11 
                                             %109 = OpTypeVector %6 3 
                                             %110 = OpTypePointer Input %109 
                                Input f32_3* %111 = OpVariable Input 
                                         i32 %113 = OpConstant 9 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                                             %149 = OpTypePointer Output %109 
                               Output f32_3* %150 = OpVariable Output 
                               Output f32_3* %153 = OpVariable Output 
                               Output f32_4* %156 = OpVariable Output 
                                             %158 = OpTypePointer Private %109 
                              Private f32_3* %159 = OpVariable Private 
                              Private f32_4* %176 = OpVariable Private 
                              Private f32_3* %182 = OpVariable Private 
                                         i32 %183 = OpConstant 4 
                                         i32 %189 = OpConstant 5 
                                         i32 %195 = OpConstant 6 
                                         i32 %201 = OpConstant 7 
                                         f32 %210 = OpConstant 3.674022E-40 
                                         u32 %211 = OpConstant 3 
                                         f32 %232 = OpConstant 3.674022E-40 
                                       f32_3 %233 = OpConstantComposite %232 %232 %232 
                                         f32 %241 = OpConstant 3.674022E-40 
                                       f32_3 %242 = OpConstantComposite %241 %241 %241 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                                         f32 %256 = OpConstant 3.674022E-40 
                                       f32_3 %257 = OpConstantComposite %256 %256 %256 
                               Output f32_3* %266 = OpVariable Output 
                                             %271 = OpTypePointer Uniform %6 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                               Output f32_4* %283 = OpVariable Output 
                               Output f32_4* %295 = OpVariable Output 
                                       f32_4 %296 = OpConstantComposite %232 %232 %232 %232 
                                             %297 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %51 = OpAccessChain %21 %23 %47 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %11 
                                        f32_4 %54 = OpVectorShuffle %53 %53 3 3 3 3 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %9 %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %21 %61 %24 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %60 %63 
                                                      OpStore %58 %64 
                               Uniform f32_4* %65 = OpAccessChain %21 %61 %29 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %45 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %58 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %58 %71 
                               Uniform f32_4* %72 = OpAccessChain %21 %61 %37 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %45 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %58 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %58 %78 
                               Uniform f32_4* %79 = OpAccessChain %21 %61 %47 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %45 
                                        f32_4 %82 = OpVectorShuffle %81 %81 3 3 3 3 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %58 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %45 %85 
                                        f32_4 %91 = OpLoad %45 
                                Output f32_4* %93 = OpAccessChain %90 %29 
                                                      OpStore %93 %91 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %100 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %99 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %100 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %96 %108 
                                       f32_3 %112 = OpLoad %111 
                              Uniform f32_4* %114 = OpAccessChain %21 %113 %29 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %112 %116 
                                Private f32* %120 = OpAccessChain %58 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %111 
                              Uniform f32_4* %122 = OpAccessChain %21 %113 %24 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %58 %86 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %111 
                              Uniform f32_4* %128 = OpAccessChain %21 %113 %37 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %58 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %58 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %58 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %142 = OpLoad %134 
                                       f32_3 %143 = OpCompositeConstruct %142 %142 %142 
                                       f32_4 %144 = OpLoad %58 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %58 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %58 %148 
                                       f32_4 %151 = OpLoad %58 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                                      OpStore %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                                      OpStore %153 %155 
                                       f32_4 %157 = OpLoad %9 
                                                      OpStore %156 %157 
                                Private f32* %160 = OpAccessChain %58 %86 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %58 %86 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                Private f32* %165 = OpAccessChain %159 %118 
                                                      OpStore %165 %164 
                                Private f32* %166 = OpAccessChain %58 %118 
                                         f32 %167 = OpLoad %166 
                                Private f32* %168 = OpAccessChain %58 %118 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFMul %167 %169 
                                Private f32* %171 = OpAccessChain %159 %118 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFNegate %172 
                                         f32 %174 = OpFAdd %170 %173 
                                Private f32* %175 = OpAccessChain %159 %118 
                                                      OpStore %175 %174 
                                       f32_4 %177 = OpLoad %58 
                                       f32_4 %178 = OpVectorShuffle %177 %177 1 2 2 0 
                                       f32_4 %179 = OpLoad %58 
                                       f32_4 %180 = OpVectorShuffle %179 %179 0 1 2 2 
                                       f32_4 %181 = OpFMul %178 %180 
                                                      OpStore %176 %181 
                              Uniform f32_4* %184 = OpAccessChain %21 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpLoad %176 
                                         f32 %187 = OpDot %185 %186 
                                Private f32* %188 = OpAccessChain %182 %118 
                                                      OpStore %188 %187 
                              Uniform f32_4* %190 = OpAccessChain %21 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpLoad %176 
                                         f32 %193 = OpDot %191 %192 
                                Private f32* %194 = OpAccessChain %182 %86 
                                                      OpStore %194 %193 
                              Uniform f32_4* %196 = OpAccessChain %21 %195 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpLoad %176 
                                         f32 %199 = OpDot %197 %198 
                                Private f32* %200 = OpAccessChain %182 %132 
                                                      OpStore %200 %199 
                              Uniform f32_4* %202 = OpAccessChain %21 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpLoad %159 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 0 0 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_3 %208 = OpLoad %182 
                                       f32_3 %209 = OpFAdd %207 %208 
                                                      OpStore %159 %209 
                                Private f32* %212 = OpAccessChain %58 %211 
                                                      OpStore %212 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %24 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %58 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %182 %118 
                                                      OpStore %217 %216 
                              Uniform f32_4* %218 = OpAccessChain %21 %37 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpLoad %58 
                                         f32 %221 = OpDot %219 %220 
                                Private f32* %222 = OpAccessChain %182 %86 
                                                      OpStore %222 %221 
                              Uniform f32_4* %223 = OpAccessChain %21 %47 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %58 
                                         f32 %226 = OpDot %224 %225 
                                Private f32* %227 = OpAccessChain %182 %132 
                                                      OpStore %227 %226 
                                       f32_3 %228 = OpLoad %159 
                                       f32_3 %229 = OpLoad %182 
                                       f32_3 %230 = OpFAdd %228 %229 
                                                      OpStore %159 %230 
                                       f32_3 %231 = OpLoad %159 
                                       f32_3 %234 = OpExtInst %1 40 %231 %233 
                                                      OpStore %159 %234 
                                       f32_3 %235 = OpLoad %159 
                                       f32_3 %236 = OpExtInst %1 30 %235 
                                       f32_4 %237 = OpLoad %58 
                                       f32_4 %238 = OpVectorShuffle %237 %236 4 5 6 3 
                                                      OpStore %58 %238 
                                       f32_4 %239 = OpLoad %58 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %58 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %58 %245 
                                       f32_4 %246 = OpLoad %58 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_3 %248 = OpExtInst %1 29 %247 
                                       f32_4 %249 = OpLoad %58 
                                       f32_4 %250 = OpVectorShuffle %249 %248 4 5 6 3 
                                                      OpStore %58 %250 
                                       f32_4 %251 = OpLoad %58 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %255 = OpFMul %252 %254 
                                       f32_3 %258 = OpFAdd %255 %257 
                                       f32_4 %259 = OpLoad %58 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %58 %260 
                                       f32_4 %261 = OpLoad %58 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpExtInst %1 40 %262 %233 
                                       f32_4 %264 = OpLoad %58 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %58 %265 
                                       f32_4 %267 = OpLoad %58 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                                      OpStore %266 %268 
                                Private f32* %269 = OpAccessChain %45 %86 
                                         f32 %270 = OpLoad %269 
                                Uniform f32* %272 = OpAccessChain %21 %29 %118 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %270 %273 
                                Private f32* %275 = OpAccessChain %45 %86 
                                                      OpStore %275 %274 
                                       f32_4 %276 = OpLoad %45 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 3 1 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %58 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 1 5 6 
                                                      OpStore %58 %282 
                                       f32_4 %284 = OpLoad %45 
                                       f32_2 %285 = OpVectorShuffle %284 %284 2 3 
                                       f32_4 %286 = OpLoad %283 
                                       f32_4 %287 = OpVectorShuffle %286 %285 0 1 4 5 
                                                      OpStore %283 %287 
                                       f32_4 %288 = OpLoad %58 
                                       f32_2 %289 = OpVectorShuffle %288 %288 2 2 
                                       f32_4 %290 = OpLoad %58 
                                       f32_2 %291 = OpVectorShuffle %290 %290 0 3 
                                       f32_2 %292 = OpFAdd %289 %291 
                                       f32_4 %293 = OpLoad %283 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 2 3 
                                                      OpStore %283 %294 
                                                      OpStore %295 %296 
                                 Output f32* %298 = OpAccessChain %90 %29 %86 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFNegate %299 
                                 Output f32* %301 = OpAccessChain %90 %29 %86 
                                                      OpStore %301 %300 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 570
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %61 %270 %323 %329 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %28 ArrayStride 28 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 RelaxedPrecision 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 RelaxedPrecision 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpMemberDecorate %30 8 Offset 30 
                                                      OpMemberDecorate %30 9 RelaxedPrecision 
                                                      OpMemberDecorate %30 9 Offset 30 
                                                      OpMemberDecorate %30 10 Offset 30 
                                                      OpMemberDecorate %30 11 RelaxedPrecision 
                                                      OpMemberDecorate %30 11 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %61 Location 61 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %149 SpecId 149 
                                                      OpDecorate %248 DescriptorSet 248 
                                                      OpDecorate %248 Binding 248 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %270 Location 270 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %277 DescriptorSet 277 
                                                      OpDecorate %277 Binding 277 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %323 Location 323 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %329 Location 329 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                              %26 = OpTypeVector %6 3 
                                          u32 %27 = OpConstant 4 
                                              %28 = OpTypeArray %7 %27 
                                              %29 = OpTypeArray %7 %27 
                                              %30 = OpTypeStruct %26 %7 %7 %7 %28 %7 %29 %26 %26 %7 %6 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 11 
                                              %35 = OpTypePointer Uniform %6 
                                          u32 %40 = OpConstant 0 
                                              %42 = OpTypeBool 
                                              %43 = OpTypePointer Private %42 
                                Private bool* %44 = OpVariable Private 
                                          f32 %47 = OpConstant 3.674022E-40 
                                          i32 %50 = OpConstant 0 
                                          i32 %51 = OpConstant 1 
                                          i32 %53 = OpConstant -1 
                               Private f32_4* %59 = OpVariable Private 
                                              %60 = OpTypePointer Input %26 
                                 Input f32_3* %61 = OpVariable Input 
                                              %64 = OpTypePointer Uniform %26 
                               Private f32_4* %70 = OpVariable Private 
                                          i32 %71 = OpConstant 4 
                                          u32 %72 = OpConstant 2 
                                          u32 %78 = OpConstant 1 
                                          i32 %80 = OpConstant 2 
                                              %90 = OpTypePointer Private %26 
                               Private f32_3* %91 = OpVariable Private 
                                          i32 %93 = OpConstant 3 
                                              %94 = OpTypePointer Uniform %7 
                                         f32 %135 = OpConstant 3.674022E-40 
                               Private bool* %138 = OpVariable Private 
                                         i32 %139 = OpConstant 5 
                                        bool %143 = OpConstantFalse 
                                        bool %149 = OpSpecConstantFalse 
                               Private bool* %152 = OpVariable Private 
                                         i32 %158 = OpConstant 6 
                                             %195 = OpTypePointer Function %26 
                                         i32 %209 = OpConstant 8 
                              Private f32_4* %216 = OpVariable Private 
                                         i32 %219 = OpConstant 7 
                                             %225 = OpTypePointer Private %15 
                              Private f32_2* %226 = OpVariable Private 
                                         f32 %229 = OpConstant 3.674022E-40 
                                         f32 %231 = OpConstant 3.674022E-40 
                                Private f32* %234 = OpVariable Private 
                                         f32 %237 = OpConstant 3.674022E-40 
                                             %245 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %246 = OpTypeSampledImage %245 
                                             %247 = OpTypePointer UniformConstant %246 
 UniformConstant read_only Texture3DSampled* %248 = OpVariable UniformConstant 
                              Private f32_3* %259 = OpVariable Private 
                                             %269 = OpTypePointer Input %7 
                                Input f32_4* %270 = OpVariable Input 
                                Private f32* %276 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %277 = OpVariable UniformConstant 
                              Private f32_3* %282 = OpVariable Private 
                                             %298 = OpTypePointer Function %6 
                                         i32 %312 = OpConstant 9 
                                Input f32_3* %323 = OpVariable Input 
                                             %328 = OpTypePointer Output %7 
                               Output f32_4* %329 = OpVariable Output 
                                             %332 = OpTypePointer Output %6 
                               Private bool* %334 = OpVariable Private 
                                Private f32* %340 = OpVariable Private 
                              Private f32_2* %347 = OpVariable Private 
                                         f32 %355 = OpConstant 3.674022E-40 
                                         f32 %370 = OpConstant 3.674022E-40 
                                       f32_2 %371 = OpConstantComposite %355 %370 
                                         f32 %440 = OpConstant 3.674022E-40 
                                         f32 %442 = OpConstant 3.674022E-40 
                                Private f32* %474 = OpVariable Private 
                              Private f32_3* %481 = OpVariable Private 
                               Private bool* %490 = OpVariable Private 
                                Private f32* %496 = OpVariable Private 
                              Private f32_3* %503 = OpVariable Private 
                                         i32 %521 = OpConstant 10 
                                         f32 %535 = OpConstant 3.674022E-40 
                                       f32_3 %536 = OpConstantComposite %135 %370 %535 
                                       f32_3 %541 = OpConstantComposite %440 %440 %440 
                                         f32 %543 = OpConstant 3.674022E-40 
                                       f32_3 %544 = OpConstantComposite %543 %543 %543 
                                       f32_3 %548 = OpConstantComposite %355 %355 %355 
                                       f32_3 %560 = OpConstantComposite %135 %135 %135 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %196 = OpVariable Function 
                               Function f32* %299 = OpVariable Function 
                               Function f32* %341 = OpVariable Function 
                               Function f32* %380 = OpVariable Function 
                               Function f32* %467 = OpVariable Function 
                               Function f32* %497 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                 Private f32* %41 = OpAccessChain %20 %40 
                                                      OpStore %41 %39 
                                 Private f32* %45 = OpAccessChain %20 %40 
                                          f32 %46 = OpLoad %45 
                                         bool %48 = OpFOrdLessThan %46 %47 
                                                      OpStore %44 %48 
                                         bool %49 = OpLoad %44 
                                          i32 %52 = OpSelect %49 %51 %50 
                                          i32 %54 = OpIMul %52 %53 
                                         bool %55 = OpINotEqual %54 %50 
                                                      OpSelectionMerge %57 None 
                                                      OpBranchConditional %55 %56 %57 
                                              %56 = OpLabel 
                                                      OpKill
                                              %57 = OpLabel 
                                        f32_3 %62 = OpLoad %61 
                                        f32_3 %63 = OpFNegate %62 
                               Uniform f32_3* %65 = OpAccessChain %32 %50 
                                        f32_3 %66 = OpLoad %65 
                                        f32_3 %67 = OpFAdd %63 %66 
                                        f32_4 %68 = OpLoad %59 
                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 6 3 
                                                      OpStore %59 %69 
                                 Uniform f32* %73 = OpAccessChain %32 %71 %50 %72 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %70 %40 
                                                      OpStore %75 %74 
                                 Uniform f32* %76 = OpAccessChain %32 %71 %51 %72 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %79 = OpAccessChain %70 %78 
                                                      OpStore %79 %77 
                                 Uniform f32* %81 = OpAccessChain %32 %71 %80 %72 
                                          f32 %82 = OpLoad %81 
                                 Private f32* %83 = OpAccessChain %70 %72 
                                                      OpStore %83 %82 
                                        f32_4 %84 = OpLoad %59 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_4 %86 = OpLoad %70 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                          f32 %88 = OpDot %85 %87 
                                 Private f32* %89 = OpAccessChain %59 %40 
                                                      OpStore %89 %88 
                                        f32_3 %92 = OpLoad %61 
                               Uniform f32_4* %95 = OpAccessChain %32 %93 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFNegate %97 
                                        f32_3 %99 = OpFAdd %92 %98 
                                                      OpStore %91 %99 
                                       f32_3 %100 = OpLoad %91 
                                       f32_3 %101 = OpLoad %91 
                                         f32 %102 = OpDot %100 %101 
                                Private f32* %103 = OpAccessChain %91 %40 
                                                      OpStore %103 %102 
                                Private f32* %104 = OpAccessChain %91 %40 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpExtInst %1 31 %105 
                                Private f32* %107 = OpAccessChain %91 %40 
                                                      OpStore %107 %106 
                                Private f32* %108 = OpAccessChain %59 %40 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                Private f32* %111 = OpAccessChain %91 %40 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFAdd %110 %112 
                                Private f32* %114 = OpAccessChain %91 %40 
                                                      OpStore %114 %113 
                                Uniform f32* %115 = OpAccessChain %32 %93 %22 
                                         f32 %116 = OpLoad %115 
                                Private f32* %117 = OpAccessChain %91 %40 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFMul %116 %118 
                                Private f32* %120 = OpAccessChain %59 %40 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %119 %121 
                                Private f32* %123 = OpAccessChain %59 %40 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %59 %40 
                                         f32 %125 = OpLoad %124 
                                Uniform f32* %126 = OpAccessChain %32 %80 %72 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %32 %80 %22 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFAdd %128 %130 
                                Private f32* %132 = OpAccessChain %59 %40 
                                                      OpStore %132 %131 
                                Private f32* %133 = OpAccessChain %59 %40 
                                         f32 %134 = OpLoad %133 
                                         f32 %136 = OpExtInst %1 43 %134 %47 %135 
                                Private f32* %137 = OpAccessChain %59 %40 
                                                      OpStore %137 %136 
                                Uniform f32* %140 = OpAccessChain %32 %139 %40 
                                         f32 %141 = OpLoad %140 
                                        bool %142 = OpFOrdEqual %141 %135 
                                                      OpStore %138 %142 
                                                      OpSelectionMerge %145 None 
                                                      OpBranchConditional %143 %144 %145 
                                             %144 = OpLabel 
                                        bool %146 = OpLoad %138 
                                                      OpSelectionMerge %148 None 
                                                      OpBranchConditional %146 %147 %148 
                                             %147 = OpLabel 
                                                      OpBranch %148 
                                             %148 = OpLabel 
                                                      OpBranch %145 
                                             %145 = OpLabel 
                                                      OpSelectionMerge %151 None 
                                                      OpBranchConditional %149 %150 %254 
                                             %150 = OpLabel 
                                Uniform f32* %153 = OpAccessChain %32 %139 %78 
                                         f32 %154 = OpLoad %153 
                                        bool %155 = OpFOrdEqual %154 %135 
                                                      OpStore %152 %155 
                                       f32_3 %156 = OpLoad %61 
                                       f32_3 %157 = OpVectorShuffle %156 %156 1 1 1 
                              Uniform f32_4* %159 = OpAccessChain %32 %158 %51 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFMul %157 %161 
                                       f32_4 %163 = OpLoad %70 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %70 %164 
                              Uniform f32_4* %165 = OpAccessChain %32 %158 %50 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpLoad %61 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 0 0 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_4 %171 = OpLoad %70 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %173 = OpFAdd %170 %172 
                                       f32_4 %174 = OpLoad %70 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                                      OpStore %70 %175 
                              Uniform f32_4* %176 = OpAccessChain %32 %158 %80 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpLoad %61 
                                       f32_3 %180 = OpVectorShuffle %179 %179 2 2 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_4 %182 = OpLoad %70 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFAdd %181 %183 
                                       f32_4 %185 = OpLoad %70 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
                                                      OpStore %70 %186 
                                       f32_4 %187 = OpLoad %70 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                              Uniform f32_4* %189 = OpAccessChain %32 %158 %93 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFAdd %188 %191 
                                       f32_4 %193 = OpLoad %70 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %70 %194 
                                        bool %197 = OpLoad %152 
                                                      OpSelectionMerge %199 None 
                                                      OpBranchConditional %197 %198 %202 
                                             %198 = OpLabel 
                                       f32_4 %200 = OpLoad %70 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                                      OpStore %196 %201 
                                                      OpBranch %199 
                                             %202 = OpLabel 
                                       f32_3 %203 = OpLoad %61 
                                                      OpStore %196 %203 
                                                      OpBranch %199 
                                             %199 = OpLabel 
                                       f32_3 %204 = OpLoad %196 
                                       f32_4 %205 = OpLoad %70 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 6 3 
                                                      OpStore %70 %206 
                                       f32_4 %207 = OpLoad %70 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                              Uniform f32_3* %210 = OpAccessChain %32 %209 
                                       f32_3 %211 = OpLoad %210 
                                       f32_3 %212 = OpFNegate %211 
                                       f32_3 %213 = OpFAdd %208 %212 
                                       f32_4 %214 = OpLoad %70 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 6 3 
                                                      OpStore %70 %215 
                                       f32_4 %217 = OpLoad %70 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                              Uniform f32_3* %220 = OpAccessChain %32 %219 
                                       f32_3 %221 = OpLoad %220 
                                       f32_3 %222 = OpFMul %218 %221 
                                       f32_4 %223 = OpLoad %216 
                                       f32_4 %224 = OpVectorShuffle %223 %222 0 4 5 6 
                                                      OpStore %216 %224 
                                Private f32* %227 = OpAccessChain %216 %78 
                                         f32 %228 = OpLoad %227 
                                         f32 %230 = OpFMul %228 %229 
                                         f32 %232 = OpFAdd %230 %231 
                                Private f32* %233 = OpAccessChain %226 %40 
                                                      OpStore %233 %232 
                                Uniform f32* %235 = OpAccessChain %32 %139 %72 
                                         f32 %236 = OpLoad %235 
                                         f32 %238 = OpFMul %236 %237 
                                         f32 %239 = OpFAdd %238 %231 
                                                      OpStore %234 %239 
                                         f32 %240 = OpLoad %234 
                                Private f32* %241 = OpAccessChain %226 %40 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpExtInst %1 40 %240 %242 
                                Private f32* %244 = OpAccessChain %216 %40 
                                                      OpStore %244 %243 
                  read_only Texture3DSampled %249 = OpLoad %248 
                                       f32_4 %250 = OpLoad %216 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 2 3 
                                       f32_4 %252 = OpImageSampleImplicitLod %249 %251 
                                                      OpStore %216 %252 
                                       f32_4 %253 = OpLoad %216 
                                                      OpStore %20 %253 
                                                      OpBranch %151 
                                             %254 = OpLabel 
                                Private f32* %255 = OpAccessChain %20 %40 
                                                      OpStore %255 %135 
                                Private f32* %256 = OpAccessChain %20 %78 
                                                      OpStore %256 %135 
                                Private f32* %257 = OpAccessChain %20 %72 
                                                      OpStore %257 %135 
                                Private f32* %258 = OpAccessChain %20 %22 
                                                      OpStore %258 %135 
                                                      OpBranch %151 
                                             %151 = OpLabel 
                                       f32_4 %260 = OpLoad %20 
                              Uniform f32_4* %261 = OpAccessChain %32 %51 
                                       f32_4 %262 = OpLoad %261 
                                         f32 %263 = OpDot %260 %262 
                                Private f32* %264 = OpAccessChain %259 %40 
                                                      OpStore %264 %263 
                                Private f32* %265 = OpAccessChain %259 %40 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpExtInst %1 43 %266 %47 %135 
                                Private f32* %268 = OpAccessChain %259 %40 
                                                      OpStore %268 %267 
                                       f32_4 %271 = OpLoad %270 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
                                       f32_4 %273 = OpLoad %270 
                                       f32_2 %274 = OpVectorShuffle %273 %273 3 3 
                                       f32_2 %275 = OpFDiv %272 %274 
                                                      OpStore %226 %275 
                  read_only Texture2DSampled %278 = OpLoad %277 
                                       f32_2 %279 = OpLoad %226 
                                       f32_4 %280 = OpImageSampleImplicitLod %278 %279 
                                         f32 %281 = OpCompositeExtract %280 0 
                                                      OpStore %276 %281 
                                Private f32* %283 = OpAccessChain %59 %40 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpLoad %276 
                                         f32 %286 = OpFAdd %284 %285 
                                Private f32* %287 = OpAccessChain %282 %40 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %282 %40 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpExtInst %1 43 %289 %47 %135 
                                Private f32* %291 = OpAccessChain %282 %40 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %282 %40 
                                         f32 %293 = OpLoad %292 
                                Private f32* %294 = OpAccessChain %259 %40 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 37 %293 %295 
                                Private f32* %297 = OpAccessChain %259 %40 
                                                      OpStore %297 %296 
                                        bool %300 = OpLoad %138 
                                                      OpSelectionMerge %302 None 
                                                      OpBranchConditional %300 %301 %305 
                                             %301 = OpLabel 
                                Private f32* %303 = OpAccessChain %259 %40 
                                         f32 %304 = OpLoad %303 
                                                      OpStore %299 %304 
                                                      OpBranch %302 
                                             %305 = OpLabel 
                                Private f32* %306 = OpAccessChain %282 %40 
                                         f32 %307 = OpLoad %306 
                                                      OpStore %299 %307 
                                                      OpBranch %302 
                                             %302 = OpLabel 
                                         f32 %308 = OpLoad %299 
                                Private f32* %309 = OpAccessChain %259 %40 
                                                      OpStore %309 %308 
                                       f32_4 %310 = OpLoad %9 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                              Uniform f32_4* %313 = OpAccessChain %32 %312 
                                       f32_4 %314 = OpLoad %313 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                       f32_3 %316 = OpFMul %311 %315 
                                                      OpStore %282 %316 
                                       f32_3 %317 = OpLoad %259 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 0 0 
                                       f32_3 %319 = OpLoad %282 
                                       f32_3 %320 = OpFMul %318 %319 
                                                      OpStore %259 %320 
                                       f32_4 %321 = OpLoad %9 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_3 %324 = OpLoad %323 
                                       f32_3 %325 = OpFMul %322 %324 
                                       f32_3 %326 = OpLoad %259 
                                       f32_3 %327 = OpFAdd %325 %326 
                                                      OpStore %259 %327 
                                Private f32* %330 = OpAccessChain %9 %22 
                                         f32 %331 = OpLoad %330 
                                 Output f32* %333 = OpAccessChain %329 %22 
                                                      OpStore %333 %331 
                                Private f32* %335 = OpAccessChain %259 %78 
                                         f32 %336 = OpLoad %335 
                                Private f32* %337 = OpAccessChain %259 %72 
                                         f32 %338 = OpLoad %337 
                                        bool %339 = OpFOrdGreaterThanEqual %336 %338 
                                                      OpStore %334 %339 
                                        bool %342 = OpLoad %334 
                                                      OpSelectionMerge %344 None 
                                                      OpBranchConditional %342 %343 %345 
                                             %343 = OpLabel 
                                                      OpStore %341 %135 
                                                      OpBranch %344 
                                             %345 = OpLabel 
                                                      OpStore %341 %47 
                                                      OpBranch %344 
                                             %344 = OpLabel 
                                         f32 %346 = OpLoad %341 
                                                      OpStore %340 %346 
                                       f32_3 %348 = OpLoad %259 
                                       f32_2 %349 = OpVectorShuffle %348 %348 2 1 
                                       f32_2 %350 = OpFNegate %349 
                                       f32_3 %351 = OpLoad %259 
                                       f32_2 %352 = OpVectorShuffle %351 %351 1 2 
                                       f32_2 %353 = OpFAdd %350 %352 
                                                      OpStore %347 %353 
                                Private f32* %354 = OpAccessChain %226 %40 
                                                      OpStore %354 %135 
                                Private f32* %356 = OpAccessChain %226 %78 
                                                      OpStore %356 %355 
                                         f32 %357 = OpLoad %340 
                                       f32_2 %358 = OpCompositeConstruct %357 %357 
                                       f32_2 %359 = OpLoad %347 
                                       f32_2 %360 = OpFMul %358 %359 
                                       f32_3 %361 = OpLoad %259 
                                       f32_2 %362 = OpVectorShuffle %361 %361 2 1 
                                       f32_2 %363 = OpFAdd %360 %362 
                                       f32_4 %364 = OpLoad %216 
                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 2 3 
                                                      OpStore %216 %365 
                                         f32 %366 = OpLoad %340 
                                       f32_2 %367 = OpCompositeConstruct %366 %366 
                                       f32_2 %368 = OpLoad %226 
                                       f32_2 %369 = OpFMul %367 %368 
                                       f32_2 %372 = OpFAdd %369 %371 
                                       f32_4 %373 = OpLoad %216 
                                       f32_4 %374 = OpVectorShuffle %373 %372 0 1 4 5 
                                                      OpStore %216 %374 
                                Private f32* %375 = OpAccessChain %259 %40 
                                         f32 %376 = OpLoad %375 
                                Private f32* %377 = OpAccessChain %216 %40 
                                         f32 %378 = OpLoad %377 
                                        bool %379 = OpFOrdGreaterThanEqual %376 %378 
                                                      OpStore %334 %379 
                                        bool %381 = OpLoad %334 
                                                      OpSelectionMerge %383 None 
                                                      OpBranchConditional %381 %382 %384 
                                             %382 = OpLabel 
                                                      OpStore %380 %135 
                                                      OpBranch %383 
                                             %384 = OpLabel 
                                                      OpStore %380 %47 
                                                      OpBranch %383 
                                             %383 = OpLabel 
                                         f32 %385 = OpLoad %380 
                                                      OpStore %340 %385 
                                       f32_4 %386 = OpLoad %216 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 3 
                                       f32_3 %388 = OpFNegate %387 
                                       f32_4 %389 = OpLoad %59 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 6 3 
                                                      OpStore %59 %390 
                                Private f32* %391 = OpAccessChain %259 %40 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFNegate %392 
                                Private f32* %394 = OpAccessChain %59 %22 
                                                      OpStore %394 %393 
                                Private f32* %395 = OpAccessChain %59 %40 
                                         f32 %396 = OpLoad %395 
                                Private f32* %397 = OpAccessChain %259 %40 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFAdd %396 %398 
                                Private f32* %400 = OpAccessChain %70 %40 
                                                      OpStore %400 %399 
                                       f32_4 %401 = OpLoad %216 
                                       f32_3 %402 = OpVectorShuffle %401 %401 1 2 0 
                                       f32_4 %403 = OpLoad %59 
                                       f32_3 %404 = OpVectorShuffle %403 %403 1 2 3 
                                       f32_3 %405 = OpFAdd %402 %404 
                                       f32_4 %406 = OpLoad %70 
                                       f32_4 %407 = OpVectorShuffle %406 %405 0 4 5 6 
                                                      OpStore %70 %407 
                                         f32 %408 = OpLoad %340 
                                       f32_3 %409 = OpCompositeConstruct %408 %408 %408 
                                       f32_4 %410 = OpLoad %70 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                       f32_3 %412 = OpFMul %409 %411 
                                       f32_4 %413 = OpLoad %216 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 3 
                                       f32_3 %415 = OpFAdd %412 %414 
                                       f32_4 %416 = OpLoad %59 
                                       f32_4 %417 = OpVectorShuffle %416 %415 4 5 6 3 
                                                      OpStore %59 %417 
                                         f32 %418 = OpLoad %340 
                                Private f32* %419 = OpAccessChain %70 %22 
                                         f32 %420 = OpLoad %419 
                                         f32 %421 = OpFMul %418 %420 
                                Private f32* %422 = OpAccessChain %259 %40 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFAdd %421 %423 
                                                      OpStore %340 %424 
                                Private f32* %425 = OpAccessChain %59 %78 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpLoad %340 
                                         f32 %428 = OpExtInst %1 37 %426 %427 
                                                      OpStore %234 %428 
                                         f32 %429 = OpLoad %234 
                                         f32 %430 = OpFNegate %429 
                                Private f32* %431 = OpAccessChain %59 %40 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpFAdd %430 %432 
                                                      OpStore %234 %433 
                                Private f32* %434 = OpAccessChain %59 %78 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpFNegate %435 
                                         f32 %437 = OpLoad %340 
                                         f32 %438 = OpFAdd %436 %437 
                                                      OpStore %340 %438 
                                         f32 %439 = OpLoad %234 
                                         f32 %441 = OpFMul %439 %440 
                                         f32 %443 = OpFAdd %441 %442 
                                Private f32* %444 = OpAccessChain %91 %40 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %340 
                                Private f32* %446 = OpAccessChain %91 %40 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFDiv %445 %447 
                                                      OpStore %340 %448 
                                         f32 %449 = OpLoad %340 
                                Private f32* %450 = OpAccessChain %59 %72 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFAdd %449 %451 
                                                      OpStore %340 %452 
                                Private f32* %453 = OpAccessChain %59 %40 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpFAdd %454 %442 
                                Private f32* %456 = OpAccessChain %91 %40 
                                                      OpStore %456 %455 
                                         f32 %457 = OpLoad %234 
                                Private f32* %458 = OpAccessChain %91 %40 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFDiv %457 %459 
                                Private f32* %461 = OpAccessChain %91 %40 
                                                      OpStore %461 %460 
                                Private f32* %462 = OpAccessChain %9 %78 
                                         f32 %463 = OpLoad %462 
                                Private f32* %464 = OpAccessChain %9 %72 
                                         f32 %465 = OpLoad %464 
                                        bool %466 = OpFOrdGreaterThanEqual %463 %465 
                                                      OpStore %152 %466 
                                        bool %468 = OpLoad %152 
                                                      OpSelectionMerge %470 None 
                                                      OpBranchConditional %468 %469 %471 
                                             %469 = OpLabel 
                                                      OpStore %467 %135 
                                                      OpBranch %470 
                                             %471 = OpLabel 
                                                      OpStore %467 %47 
                                                      OpBranch %470 
                                             %470 = OpLabel 
                                         f32 %472 = OpLoad %467 
                                Private f32* %473 = OpAccessChain %226 %40 
                                                      OpStore %473 %472 
                                Private f32* %475 = OpAccessChain %9 %72 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFNegate %476 
                                Private f32* %478 = OpAccessChain %9 %78 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFAdd %477 %479 
                                                      OpStore %474 %480 
                                Private f32* %482 = OpAccessChain %226 %40 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpLoad %474 
                                         f32 %485 = OpFMul %483 %484 
                                Private f32* %486 = OpAccessChain %9 %72 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFAdd %485 %487 
                                Private f32* %489 = OpAccessChain %481 %40 
                                                      OpStore %489 %488 
                                Private f32* %491 = OpAccessChain %9 %40 
                                         f32 %492 = OpLoad %491 
                                Private f32* %493 = OpAccessChain %481 %40 
                                         f32 %494 = OpLoad %493 
                                        bool %495 = OpFOrdGreaterThanEqual %492 %494 
                                                      OpStore %490 %495 
                                        bool %498 = OpLoad %490 
                                                      OpSelectionMerge %500 None 
                                                      OpBranchConditional %498 %499 %501 
                                             %499 = OpLabel 
                                                      OpStore %497 %135 
                                                      OpBranch %500 
                                             %501 = OpLabel 
                                                      OpStore %497 %47 
                                                      OpBranch %500 
                                             %500 = OpLabel 
                                         f32 %502 = OpLoad %497 
                                                      OpStore %496 %502 
                                Private f32* %504 = OpAccessChain %481 %40 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpFNegate %505 
                                Private f32* %507 = OpAccessChain %9 %40 
                                         f32 %508 = OpLoad %507 
                                         f32 %509 = OpFAdd %506 %508 
                                Private f32* %510 = OpAccessChain %503 %40 
                                                      OpStore %510 %509 
                                         f32 %511 = OpLoad %496 
                                Private f32* %512 = OpAccessChain %503 %40 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFMul %511 %513 
                                Private f32* %515 = OpAccessChain %481 %40 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFAdd %514 %516 
                                Private f32* %518 = OpAccessChain %503 %40 
                                                      OpStore %518 %517 
                                Private f32* %519 = OpAccessChain %503 %40 
                                         f32 %520 = OpLoad %519 
                                Uniform f32* %522 = OpAccessChain %32 %521 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %520 %523 
                                Private f32* %525 = OpAccessChain %503 %40 
                                                      OpStore %525 %524 
                                Private f32* %526 = OpAccessChain %503 %40 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %59 %40 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpExtInst %1 37 %527 %529 
                                Private f32* %531 = OpAccessChain %503 %40 
                                                      OpStore %531 %530 
                                         f32 %532 = OpLoad %340 
                                       f32_3 %533 = OpCompositeConstruct %532 %532 %532 
                                       f32_3 %534 = OpExtInst %1 4 %533 
                                       f32_3 %537 = OpFAdd %534 %536 
                                                      OpStore %481 %537 
                                       f32_3 %538 = OpLoad %481 
                                       f32_3 %539 = OpExtInst %1 10 %538 
                                                      OpStore %481 %539 
                                       f32_3 %540 = OpLoad %481 
                                       f32_3 %542 = OpFMul %540 %541 
                                       f32_3 %545 = OpFAdd %542 %544 
                                                      OpStore %481 %545 
                                       f32_3 %546 = OpLoad %481 
                                       f32_3 %547 = OpExtInst %1 4 %546 
                                       f32_3 %549 = OpFAdd %547 %548 
                                                      OpStore %481 %549 
                                       f32_3 %550 = OpLoad %481 
                                       f32_3 %551 = OpCompositeConstruct %47 %47 %47 
                                       f32_3 %552 = OpCompositeConstruct %135 %135 %135 
                                       f32_3 %553 = OpExtInst %1 43 %550 %551 %552 
                                                      OpStore %481 %553 
                                       f32_3 %554 = OpLoad %481 
                                       f32_3 %555 = OpFAdd %554 %548 
                                                      OpStore %481 %555 
                                       f32_3 %556 = OpLoad %91 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 0 0 
                                       f32_3 %558 = OpLoad %481 
                                       f32_3 %559 = OpFMul %557 %558 
                                       f32_3 %561 = OpFAdd %559 %560 
                                                      OpStore %481 %561 
                                       f32_3 %562 = OpLoad %481 
                                       f32_3 %563 = OpLoad %503 
                                       f32_3 %564 = OpVectorShuffle %563 %563 0 0 0 
                                       f32_3 %565 = OpFMul %562 %564 
                                                      OpStore %503 %565 
                                       f32_3 %566 = OpLoad %503 
                                       f32_4 %567 = OpLoad %329 
                                       f32_4 %568 = OpVectorShuffle %567 %566 4 5 6 3 
                                                      OpStore %329 %568 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat5.x = u_xlat1.y * 0.25 + 0.75;
        u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat5.x, u_xlat2.x);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat1.x = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    u_xlat1.w = u_xlat10_0.w;
    u_xlat1 = u_xlat1 + u_xlat2;
    u_xlatb12 = u_xlat1.y>=u_xlat1.z;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat2.xy = u_xlat1.zy;
    u_xlat2.z = float(-1.0);
    u_xlat2.w = float(0.666666687);
    u_xlat3.xy = u_xlat1.yz + (-u_xlat2.xy);
    u_xlat3.z = float(1.0);
    u_xlat3.w = float(-1.0);
    u_xlat2 = vec4(u_xlat12) * u_xlat3 + u_xlat2;
    u_xlatb12 = u_xlat1.x>=u_xlat2.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat3.xyz = u_xlat2.xyw;
    u_xlat3.w = u_xlat1.x;
    u_xlat2.xyw = u_xlat3.wyx;
    u_xlat2 = (-u_xlat3) + u_xlat2;
    u_xlat2 = vec4(u_xlat12) * u_xlat2 + u_xlat3;
    u_xlat12 = min(u_xlat2.y, u_xlat2.w);
    u_xlat12 = (-u_xlat12) + u_xlat2.x;
    u_xlat1.x = (-u_xlat2.y) + u_xlat2.w;
    u_xlat5.x = u_xlat12 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat5.x;
    u_xlat1.x = u_xlat1.x + u_xlat2.z;
    u_xlat5.x = u_xlat2.x + 1.00000001e-010;
    u_xlat12 = u_xlat12 / u_xlat5.x;
    u_xlatb5 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);
    u_xlat16_4 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat4.x = u_xlat5.x * u_xlat16_4 + u_xlat10_0.z;
    u_xlatb8 = u_xlat10_0.x>=u_xlat4.x;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat4.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat8 * u_xlat0 + u_xlat4.x;
    u_xlat0 = u_xlat0 * _MaxValue;
    u_xlat0 = min(u_xlat0, u_xlat2.x);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 285
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %85 %97 %98 %112 %151 %154 %157 %275 %278 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %275 Location 275 
                                                      OpDecorate %278 Location 278 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 5 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 7 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                         i32 %101 = OpConstant 8 
                                             %110 = OpTypeVector %6 3 
                                             %111 = OpTypePointer Input %110 
                                Input f32_3* %112 = OpVariable Input 
                                         i32 %114 = OpConstant 6 
                                         u32 %119 = OpConstant 0 
                                             %120 = OpTypePointer Private %6 
                                         u32 %133 = OpConstant 2 
                                Private f32* %135 = OpVariable Private 
                                             %150 = OpTypePointer Output %110 
                               Output f32_3* %151 = OpVariable Output 
                               Output f32_3* %154 = OpVariable Output 
                               Output f32_4* %157 = OpVariable Output 
                              Private f32_4* %165 = OpVariable Private 
                              Private f32_4* %173 = OpVariable Private 
                                         f32 %209 = OpConstant 3.674022E-40 
                                       f32_4 %210 = OpConstantComposite %209 %209 %209 %209 
                                         f32 %218 = OpConstant 3.674022E-40 
                                       f32_4 %219 = OpConstantComposite %218 %218 %218 %218 
                                         f32 %227 = OpConstant 3.674022E-40 
                                       f32_4 %228 = OpConstantComposite %227 %227 %227 %227 
                                         i32 %235 = OpConstant 4 
                               Output f32_3* %275 = OpVariable Output 
                               Output f32_4* %278 = OpVariable Output 
                                             %279 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %86 = OpAccessChain %23 %63 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %60 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %31 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %101 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %100 %104 
                              Uniform f32_4* %106 = OpAccessChain %23 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                                      OpStore %97 %109 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %115 = OpAccessChain %23 %114 %31 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                         f32 %118 = OpDot %113 %117 
                                Private f32* %121 = OpAccessChain %47 %119 
                                                      OpStore %121 %118 
                                       f32_3 %122 = OpLoad %112 
                              Uniform f32_4* %123 = OpAccessChain %23 %114 %26 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %127 = OpAccessChain %47 %81 
                                                      OpStore %127 %126 
                                       f32_3 %128 = OpLoad %112 
                              Uniform f32_4* %129 = OpAccessChain %23 %114 %39 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                         f32 %132 = OpDot %128 %131 
                                Private f32* %134 = OpAccessChain %47 %133 
                                                      OpStore %134 %132 
                                       f32_4 %136 = OpLoad %47 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_4 %138 = OpLoad %47 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                         f32 %140 = OpDot %137 %139 
                                                      OpStore %135 %140 
                                         f32 %141 = OpLoad %135 
                                         f32 %142 = OpExtInst %1 32 %141 
                                                      OpStore %135 %142 
                                         f32 %143 = OpLoad %135 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %47 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %47 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %47 %149 
                                       f32_4 %152 = OpLoad %47 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %151 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                                      OpStore %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                                      OpStore %157 %158 
                                       f32_4 %159 = OpLoad %9 
                                       f32_4 %160 = OpVectorShuffle %159 %159 1 1 1 1 
                                       f32_4 %161 = OpFNegate %160 
                              Uniform f32_4* %162 = OpAccessChain %23 %26 
                                       f32_4 %163 = OpLoad %162 
                                       f32_4 %164 = OpFAdd %161 %163 
                                                      OpStore %60 %164 
                                       f32_4 %166 = OpLoad %47 
                                       f32_4 %167 = OpVectorShuffle %166 %166 1 1 1 1 
                                       f32_4 %168 = OpLoad %60 
                                       f32_4 %169 = OpFMul %167 %168 
                                                      OpStore %165 %169 
                                       f32_4 %170 = OpLoad %60 
                                       f32_4 %171 = OpLoad %60 
                                       f32_4 %172 = OpFMul %170 %171 
                                                      OpStore %60 %172 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %174 0 0 0 0 
                                       f32_4 %176 = OpFNegate %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %31 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %173 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_4 %181 = OpVectorShuffle %180 %180 2 2 2 2 
                                       f32_4 %182 = OpFNegate %181 
                              Uniform f32_4* %183 = OpAccessChain %23 %39 
                                       f32_4 %184 = OpLoad %183 
                                       f32_4 %185 = OpFAdd %182 %184 
                                                      OpStore %9 %185 
                                       f32_4 %186 = OpLoad %173 
                                       f32_4 %187 = OpLoad %47 
                                       f32_4 %188 = OpVectorShuffle %187 %187 0 0 0 0 
                                       f32_4 %189 = OpFMul %186 %188 
                                       f32_4 %190 = OpLoad %165 
                                       f32_4 %191 = OpFAdd %189 %190 
                                                      OpStore %165 %191 
                                       f32_4 %192 = OpLoad %9 
                                       f32_4 %193 = OpLoad %47 
                                       f32_4 %194 = OpVectorShuffle %193 %193 2 2 2 2 
                                       f32_4 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %165 
                                       f32_4 %197 = OpFAdd %195 %196 
                                                      OpStore %47 %197 
                                       f32_4 %198 = OpLoad %173 
                                       f32_4 %199 = OpLoad %173 
                                       f32_4 %200 = OpFMul %198 %199 
                                       f32_4 %201 = OpLoad %60 
                                       f32_4 %202 = OpFAdd %200 %201 
                                                      OpStore %60 %202 
                                       f32_4 %203 = OpLoad %9 
                                       f32_4 %204 = OpLoad %9 
                                       f32_4 %205 = OpFMul %203 %204 
                                       f32_4 %206 = OpLoad %60 
                                       f32_4 %207 = OpFAdd %205 %206 
                                                      OpStore %9 %207 
                                       f32_4 %208 = OpLoad %9 
                                       f32_4 %211 = OpExtInst %1 40 %208 %210 
                                                      OpStore %9 %211 
                                       f32_4 %212 = OpLoad %9 
                                       f32_4 %213 = OpExtInst %1 32 %212 
                                                      OpStore %60 %213 
                                       f32_4 %214 = OpLoad %9 
                              Uniform f32_4* %215 = OpAccessChain %23 %49 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpFMul %214 %216 
                                       f32_4 %220 = OpFAdd %217 %219 
                                                      OpStore %9 %220 
                                       f32_4 %221 = OpLoad %9 
                                       f32_4 %222 = OpFDiv %219 %221 
                                                      OpStore %9 %222 
                                       f32_4 %223 = OpLoad %47 
                                       f32_4 %224 = OpLoad %60 
                                       f32_4 %225 = OpFMul %223 %224 
                                                      OpStore %47 %225 
                                       f32_4 %226 = OpLoad %47 
                                       f32_4 %229 = OpExtInst %1 40 %226 %228 
                                                      OpStore %47 %229 
                                       f32_4 %230 = OpLoad %9 
                                       f32_4 %231 = OpLoad %47 
                                       f32_4 %232 = OpFMul %230 %231 
                                                      OpStore %9 %232 
                                       f32_4 %233 = OpLoad %9 
                                       f32_3 %234 = OpVectorShuffle %233 %233 1 1 1 
                              Uniform f32_4* %236 = OpAccessChain %23 %235 %26 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpFMul %234 %238 
                                       f32_4 %240 = OpLoad %47 
                                       f32_4 %241 = OpVectorShuffle %240 %239 4 5 6 3 
                                                      OpStore %47 %241 
                              Uniform f32_4* %242 = OpAccessChain %23 %235 %31 
                                       f32_4 %243 = OpLoad %242 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_4 %245 = OpLoad %9 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 0 0 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %47 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %250 = OpFAdd %247 %249 
                                       f32_4 %251 = OpLoad %47 
                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 6 3 
                                                      OpStore %47 %252 
                              Uniform f32_4* %253 = OpAccessChain %23 %235 %39 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_4 %256 = OpLoad %9 
                                       f32_3 %257 = OpVectorShuffle %256 %256 2 2 2 
                                       f32_3 %258 = OpFMul %255 %257 
                                       f32_4 %259 = OpLoad %47 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpFAdd %258 %260 
                                       f32_4 %262 = OpLoad %9 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %9 %263 
                              Uniform f32_4* %264 = OpAccessChain %23 %235 %49 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_4 %267 = OpLoad %9 
                                       f32_3 %268 = OpVectorShuffle %267 %267 3 3 3 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_4 %270 = OpLoad %9 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_3 %272 = OpFAdd %269 %271 
                                       f32_4 %273 = OpLoad %9 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
                                                      OpStore %9 %274 
                                       f32_4 %276 = OpLoad %9 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                                      OpStore %275 %277 
                                                      OpStore %278 %228 
                                 Output f32* %280 = OpAccessChain %85 %31 %81 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpFNegate %281 
                                 Output f32* %283 = OpAccessChain %85 %31 %81 
                                                      OpStore %283 %282 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 450
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %78 %197 %203 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %29 0 RelaxedPrecision 
                                                      OpMemberDecorate %29 0 Offset 29 
                                                      OpMemberDecorate %29 1 Offset 29 
                                                      OpMemberDecorate %29 2 Offset 29 
                                                      OpMemberDecorate %29 3 Offset 29 
                                                      OpMemberDecorate %29 4 Offset 29 
                                                      OpMemberDecorate %29 5 RelaxedPrecision 
                                                      OpMemberDecorate %29 5 Offset 29 
                                                      OpMemberDecorate %29 6 Offset 29 
                                                      OpMemberDecorate %29 7 RelaxedPrecision 
                                                      OpMemberDecorate %29 7 Offset 29 
                                                      OpDecorate %29 Block 
                                                      OpDecorate %31 DescriptorSet 31 
                                                      OpDecorate %31 Binding 31 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %68 SpecId 68 
                                                      OpDecorate %78 Location 78 
                                                      OpDecorate %162 DescriptorSet 162 
                                                      OpDecorate %162 Binding 162 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %197 Location 197 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %203 Location 203 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeStruct %7 %7 %27 %28 %28 %7 %6 %6 
                                              %30 = OpTypePointer Uniform %29 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32;}* %31 = OpVariable Uniform 
                                              %32 = OpTypeInt 32 1 
                                          i32 %33 = OpConstant 7 
                                              %34 = OpTypePointer Uniform %6 
                                          u32 %39 = OpConstant 0 
                                              %41 = OpTypeBool 
                                              %42 = OpTypePointer Private %41 
                                Private bool* %43 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                          i32 %49 = OpConstant 0 
                                          i32 %50 = OpConstant 1 
                                          i32 %52 = OpConstant -1 
                                          f32 %60 = OpConstant 3.674022E-40 
                                         bool %62 = OpConstantFalse 
                                         bool %68 = OpSpecConstantFalse 
                                          u32 %71 = OpConstant 1 
                                              %75 = OpTypePointer Private %28 
                               Private f32_3* %76 = OpVariable Private 
                                              %77 = OpTypePointer Input %28 
                                 Input f32_3* %78 = OpVariable Input 
                                          i32 %81 = OpConstant 2 
                                              %82 = OpTypePointer Uniform %7 
                                         i32 %104 = OpConstant 3 
                              Private f32_4* %109 = OpVariable Private 
                                             %110 = OpTypePointer Function %28 
                                         i32 %123 = OpConstant 4 
                                             %124 = OpTypePointer Uniform %28 
                              Private f32_4* %131 = OpVariable Private 
                                         f32 %141 = OpConstant 3.674022E-40 
                                         f32 %143 = OpConstant 3.674022E-40 
                                         u32 %146 = OpConstant 2 
                                         f32 %149 = OpConstant 3.674022E-40 
                                             %159 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %160 = OpTypeSampledImage %159 
                                             %161 = OpTypePointer UniformConstant %160 
 UniformConstant read_only Texture3DSampled* %162 = OpVariable UniformConstant 
                              Private f32_3* %173 = OpVariable Private 
                              Private f32_3* %183 = OpVariable Private 
                                         i32 %186 = OpConstant 5 
                                Input f32_3* %197 = OpVariable Input 
                                             %202 = OpTypePointer Output %7 
                               Output f32_4* %203 = OpVariable Output 
                                             %206 = OpTypePointer Output %6 
                               Private bool* %208 = OpVariable Private 
                                Private f32* %214 = OpVariable Private 
                                             %215 = OpTypePointer Function %6 
                                             %222 = OpTypePointer Private %15 
                              Private f32_2* %223 = OpVariable Private 
                              Private f32_2* %230 = OpVariable Private 
                                         f32 %232 = OpConstant 3.674022E-40 
                                         f32 %247 = OpConstant 3.674022E-40 
                                       f32_2 %248 = OpConstantComposite %232 %247 
                              Private f32_4* %272 = OpVariable Private 
                                Private f32* %303 = OpVariable Private 
                                         f32 %319 = OpConstant 3.674022E-40 
                                         f32 %321 = OpConstant 3.674022E-40 
                               Private bool* %341 = OpVariable Private 
                                Private f32* %354 = OpVariable Private 
                              Private f32_3* %361 = OpVariable Private 
                               Private bool* %370 = OpVariable Private 
                                Private f32* %376 = OpVariable Private 
                              Private f32_3* %383 = OpVariable Private 
                                         i32 %401 = OpConstant 6 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_3 %416 = OpConstantComposite %60 %247 %415 
                                       f32_3 %421 = OpConstantComposite %319 %319 %319 
                                         f32 %423 = OpConstant 3.674022E-40 
                                       f32_3 %424 = OpConstantComposite %423 %423 %423 
                                       f32_3 %428 = OpConstantComposite %232 %232 %232 
                                       f32_3 %440 = OpConstantComposite %60 %60 %60 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %111 = OpVariable Function 
                               Function f32* %216 = OpVariable Function 
                               Function f32* %257 = OpVariable Function 
                               Function f32* %347 = OpVariable Function 
                               Function f32* %377 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %35 = OpAccessChain %31 %33 
                                          f32 %36 = OpLoad %35 
                                          f32 %37 = OpFNegate %36 
                                          f32 %38 = OpFAdd %25 %37 
                                 Private f32* %40 = OpAccessChain %20 %39 
                                                      OpStore %40 %38 
                                 Private f32* %44 = OpAccessChain %20 %39 
                                          f32 %45 = OpLoad %44 
                                         bool %47 = OpFOrdLessThan %45 %46 
                                                      OpStore %43 %47 
                                         bool %48 = OpLoad %43 
                                          i32 %51 = OpSelect %48 %50 %49 
                                          i32 %53 = OpIMul %51 %52 
                                         bool %54 = OpINotEqual %53 %49 
                                                      OpSelectionMerge %56 None 
                                                      OpBranchConditional %54 %55 %56 
                                              %55 = OpLabel 
                                                      OpKill
                                              %56 = OpLabel 
                                 Uniform f32* %58 = OpAccessChain %31 %50 %39 
                                          f32 %59 = OpLoad %58 
                                         bool %61 = OpFOrdEqual %59 %60 
                                                      OpStore %43 %61 
                                                      OpSelectionMerge %64 None 
                                                      OpBranchConditional %62 %63 %64 
                                              %63 = OpLabel 
                                         bool %65 = OpLoad %43 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpBranch %67 
                                              %67 = OpLabel 
                                                      OpBranch %64 
                                              %64 = OpLabel 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %168 
                                              %69 = OpLabel 
                                 Uniform f32* %72 = OpAccessChain %31 %50 %71 
                                          f32 %73 = OpLoad %72 
                                         bool %74 = OpFOrdEqual %73 %60 
                                                      OpStore %43 %74 
                                        f32_3 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %31 %81 %50 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %76 %86 
                               Uniform f32_4* %87 = OpAccessChain %31 %81 %49 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpLoad %78 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpFMul %89 %91 
                                        f32_3 %93 = OpLoad %76 
                                        f32_3 %94 = OpFAdd %92 %93 
                                                      OpStore %76 %94 
                               Uniform f32_4* %95 = OpAccessChain %31 %81 %81 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpLoad %78 
                                        f32_3 %99 = OpVectorShuffle %98 %98 2 2 2 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_3 %101 = OpLoad %76 
                                       f32_3 %102 = OpFAdd %100 %101 
                                                      OpStore %76 %102 
                                       f32_3 %103 = OpLoad %76 
                              Uniform f32_4* %105 = OpAccessChain %31 %81 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFAdd %103 %107 
                                                      OpStore %76 %108 
                                        bool %112 = OpLoad %43 
                                                      OpSelectionMerge %114 None 
                                                      OpBranchConditional %112 %113 %116 
                                             %113 = OpLabel 
                                       f32_3 %115 = OpLoad %76 
                                                      OpStore %111 %115 
                                                      OpBranch %114 
                                             %116 = OpLabel 
                                       f32_3 %117 = OpLoad %78 
                                                      OpStore %111 %117 
                                                      OpBranch %114 
                                             %114 = OpLabel 
                                       f32_3 %118 = OpLoad %111 
                                       f32_4 %119 = OpLoad %109 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
                                                      OpStore %109 %120 
                                       f32_4 %121 = OpLoad %109 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                              Uniform f32_3* %125 = OpAccessChain %31 %123 
                                       f32_3 %126 = OpLoad %125 
                                       f32_3 %127 = OpFNegate %126 
                                       f32_3 %128 = OpFAdd %122 %127 
                                       f32_4 %129 = OpLoad %109 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %109 %130 
                                       f32_4 %132 = OpLoad %109 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                              Uniform f32_3* %134 = OpAccessChain %31 %104 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %131 
                                       f32_4 %138 = OpVectorShuffle %137 %136 0 4 5 6 
                                                      OpStore %131 %138 
                                Private f32* %139 = OpAccessChain %131 %71 
                                         f32 %140 = OpLoad %139 
                                         f32 %142 = OpFMul %140 %141 
                                         f32 %144 = OpFAdd %142 %143 
                                Private f32* %145 = OpAccessChain %109 %39 
                                                      OpStore %145 %144 
                                Uniform f32* %147 = OpAccessChain %31 %50 %146 
                                         f32 %148 = OpLoad %147 
                                         f32 %150 = OpFMul %148 %149 
                                         f32 %151 = OpFAdd %150 %143 
                                Private f32* %152 = OpAccessChain %76 %39 
                                                      OpStore %152 %151 
                                Private f32* %153 = OpAccessChain %76 %39 
                                         f32 %154 = OpLoad %153 
                                Private f32* %155 = OpAccessChain %109 %39 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpExtInst %1 40 %154 %156 
                                Private f32* %158 = OpAccessChain %131 %39 
                                                      OpStore %158 %157 
                  read_only Texture3DSampled %163 = OpLoad %162 
                                       f32_4 %164 = OpLoad %131 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 2 3 
                                       f32_4 %166 = OpImageSampleImplicitLod %163 %165 
                                                      OpStore %131 %166 
                                       f32_4 %167 = OpLoad %131 
                                                      OpStore %20 %167 
                                                      OpBranch %70 
                                             %168 = OpLabel 
                                Private f32* %169 = OpAccessChain %20 %39 
                                                      OpStore %169 %60 
                                Private f32* %170 = OpAccessChain %20 %71 
                                                      OpStore %170 %60 
                                Private f32* %171 = OpAccessChain %20 %146 
                                                      OpStore %171 %60 
                                Private f32* %172 = OpAccessChain %20 %22 
                                                      OpStore %172 %60 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                       f32_4 %174 = OpLoad %20 
                              Uniform f32_4* %175 = OpAccessChain %31 %49 
                                       f32_4 %176 = OpLoad %175 
                                         f32 %177 = OpDot %174 %176 
                                Private f32* %178 = OpAccessChain %173 %39 
                                                      OpStore %178 %177 
                                Private f32* %179 = OpAccessChain %173 %39 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpExtInst %1 43 %180 %46 %60 
                                Private f32* %182 = OpAccessChain %173 %39 
                                                      OpStore %182 %181 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                              Uniform f32_4* %187 = OpAccessChain %31 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpFMul %185 %189 
                                                      OpStore %183 %190 
                                       f32_3 %191 = OpLoad %173 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 0 0 
                                       f32_3 %193 = OpLoad %183 
                                       f32_3 %194 = OpFMul %192 %193 
                                                      OpStore %173 %194 
                                       f32_4 %195 = OpLoad %9 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %198 = OpLoad %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_3 %200 = OpLoad %173 
                                       f32_3 %201 = OpFAdd %199 %200 
                                                      OpStore %173 %201 
                                Private f32* %204 = OpAccessChain %9 %22 
                                         f32 %205 = OpLoad %204 
                                 Output f32* %207 = OpAccessChain %203 %22 
                                                      OpStore %207 %205 
                                Private f32* %209 = OpAccessChain %173 %71 
                                         f32 %210 = OpLoad %209 
                                Private f32* %211 = OpAccessChain %173 %146 
                                         f32 %212 = OpLoad %211 
                                        bool %213 = OpFOrdGreaterThanEqual %210 %212 
                                                      OpStore %208 %213 
                                        bool %217 = OpLoad %208 
                                                      OpSelectionMerge %219 None 
                                                      OpBranchConditional %217 %218 %220 
                                             %218 = OpLabel 
                                                      OpStore %216 %60 
                                                      OpBranch %219 
                                             %220 = OpLabel 
                                                      OpStore %216 %46 
                                                      OpBranch %219 
                                             %219 = OpLabel 
                                         f32 %221 = OpLoad %216 
                                                      OpStore %214 %221 
                                       f32_3 %224 = OpLoad %173 
                                       f32_2 %225 = OpVectorShuffle %224 %224 2 1 
                                       f32_2 %226 = OpFNegate %225 
                                       f32_3 %227 = OpLoad %173 
                                       f32_2 %228 = OpVectorShuffle %227 %227 1 2 
                                       f32_2 %229 = OpFAdd %226 %228 
                                                      OpStore %223 %229 
                                Private f32* %231 = OpAccessChain %230 %39 
                                                      OpStore %231 %60 
                                Private f32* %233 = OpAccessChain %230 %71 
                                                      OpStore %233 %232 
                                         f32 %234 = OpLoad %214 
                                       f32_2 %235 = OpCompositeConstruct %234 %234 
                                       f32_2 %236 = OpLoad %223 
                                       f32_2 %237 = OpFMul %235 %236 
                                       f32_3 %238 = OpLoad %173 
                                       f32_2 %239 = OpVectorShuffle %238 %238 2 1 
                                       f32_2 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %131 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 2 3 
                                                      OpStore %131 %242 
                                         f32 %243 = OpLoad %214 
                                       f32_2 %244 = OpCompositeConstruct %243 %243 
                                       f32_2 %245 = OpLoad %230 
                                       f32_2 %246 = OpFMul %244 %245 
                                       f32_2 %249 = OpFAdd %246 %248 
                                       f32_4 %250 = OpLoad %131 
                                       f32_4 %251 = OpVectorShuffle %250 %249 0 1 4 5 
                                                      OpStore %131 %251 
                                Private f32* %252 = OpAccessChain %173 %39 
                                         f32 %253 = OpLoad %252 
                                Private f32* %254 = OpAccessChain %131 %39 
                                         f32 %255 = OpLoad %254 
                                        bool %256 = OpFOrdGreaterThanEqual %253 %255 
                                                      OpStore %208 %256 
                                        bool %258 = OpLoad %208 
                                                      OpSelectionMerge %260 None 
                                                      OpBranchConditional %258 %259 %261 
                                             %259 = OpLabel 
                                                      OpStore %257 %60 
                                                      OpBranch %260 
                                             %261 = OpLabel 
                                                      OpStore %257 %46 
                                                      OpBranch %260 
                                             %260 = OpLabel 
                                         f32 %262 = OpLoad %257 
                                                      OpStore %214 %262 
                                       f32_4 %263 = OpLoad %131 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 3 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_4 %266 = OpLoad %109 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %109 %267 
                                Private f32* %268 = OpAccessChain %173 %39 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                Private f32* %271 = OpAccessChain %109 %22 
                                                      OpStore %271 %270 
                                Private f32* %273 = OpAccessChain %109 %39 
                                         f32 %274 = OpLoad %273 
                                Private f32* %275 = OpAccessChain %173 %39 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpFAdd %274 %276 
                                Private f32* %278 = OpAccessChain %272 %39 
                                                      OpStore %278 %277 
                                       f32_4 %279 = OpLoad %131 
                                       f32_3 %280 = OpVectorShuffle %279 %279 1 2 0 
                                       f32_4 %281 = OpLoad %109 
                                       f32_3 %282 = OpVectorShuffle %281 %281 1 2 3 
                                       f32_3 %283 = OpFAdd %280 %282 
                                       f32_4 %284 = OpLoad %272 
                                       f32_4 %285 = OpVectorShuffle %284 %283 0 4 5 6 
                                                      OpStore %272 %285 
                                         f32 %286 = OpLoad %214 
                                       f32_3 %287 = OpCompositeConstruct %286 %286 %286 
                                       f32_4 %288 = OpLoad %272 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %131 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 3 
                                       f32_3 %293 = OpFAdd %290 %292 
                                       f32_4 %294 = OpLoad %109 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %109 %295 
                                         f32 %296 = OpLoad %214 
                                Private f32* %297 = OpAccessChain %272 %22 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %296 %298 
                                Private f32* %300 = OpAccessChain %173 %39 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                                      OpStore %214 %302 
                                Private f32* %304 = OpAccessChain %109 %71 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpLoad %214 
                                         f32 %307 = OpExtInst %1 37 %305 %306 
                                                      OpStore %303 %307 
                                         f32 %308 = OpLoad %303 
                                         f32 %309 = OpFNegate %308 
                                Private f32* %310 = OpAccessChain %109 %39 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFAdd %309 %311 
                                                      OpStore %303 %312 
                                Private f32* %313 = OpAccessChain %109 %71 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                         f32 %316 = OpLoad %214 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %214 %317 
                                         f32 %318 = OpLoad %303 
                                         f32 %320 = OpFMul %318 %319 
                                         f32 %322 = OpFAdd %320 %321 
                                Private f32* %323 = OpAccessChain %76 %39 
                                                      OpStore %323 %322 
                                         f32 %324 = OpLoad %214 
                                Private f32* %325 = OpAccessChain %76 %39 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpFDiv %324 %326 
                                                      OpStore %214 %327 
                                         f32 %328 = OpLoad %214 
                                Private f32* %329 = OpAccessChain %109 %146 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFAdd %328 %330 
                                                      OpStore %214 %331 
                                Private f32* %332 = OpAccessChain %109 %39 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpFAdd %333 %321 
                                Private f32* %335 = OpAccessChain %76 %39 
                                                      OpStore %335 %334 
                                         f32 %336 = OpLoad %303 
                                Private f32* %337 = OpAccessChain %76 %39 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFDiv %336 %338 
                                Private f32* %340 = OpAccessChain %76 %39 
                                                      OpStore %340 %339 
                                Private f32* %342 = OpAccessChain %9 %71 
                                         f32 %343 = OpLoad %342 
                                Private f32* %344 = OpAccessChain %9 %146 
                                         f32 %345 = OpLoad %344 
                                        bool %346 = OpFOrdGreaterThanEqual %343 %345 
                                                      OpStore %341 %346 
                                        bool %348 = OpLoad %341 
                                                      OpSelectionMerge %350 None 
                                                      OpBranchConditional %348 %349 %351 
                                             %349 = OpLabel 
                                                      OpStore %347 %60 
                                                      OpBranch %350 
                                             %351 = OpLabel 
                                                      OpStore %347 %46 
                                                      OpBranch %350 
                                             %350 = OpLabel 
                                         f32 %352 = OpLoad %347 
                                Private f32* %353 = OpAccessChain %230 %39 
                                                      OpStore %353 %352 
                                Private f32* %355 = OpAccessChain %9 %146 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpFNegate %356 
                                Private f32* %358 = OpAccessChain %9 %71 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                                      OpStore %354 %360 
                                Private f32* %362 = OpAccessChain %230 %39 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpLoad %354 
                                         f32 %365 = OpFMul %363 %364 
                                Private f32* %366 = OpAccessChain %9 %146 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpFAdd %365 %367 
                                Private f32* %369 = OpAccessChain %361 %39 
                                                      OpStore %369 %368 
                                Private f32* %371 = OpAccessChain %9 %39 
                                         f32 %372 = OpLoad %371 
                                Private f32* %373 = OpAccessChain %361 %39 
                                         f32 %374 = OpLoad %373 
                                        bool %375 = OpFOrdGreaterThanEqual %372 %374 
                                                      OpStore %370 %375 
                                        bool %378 = OpLoad %370 
                                                      OpSelectionMerge %380 None 
                                                      OpBranchConditional %378 %379 %381 
                                             %379 = OpLabel 
                                                      OpStore %377 %60 
                                                      OpBranch %380 
                                             %381 = OpLabel 
                                                      OpStore %377 %46 
                                                      OpBranch %380 
                                             %380 = OpLabel 
                                         f32 %382 = OpLoad %377 
                                                      OpStore %376 %382 
                                Private f32* %384 = OpAccessChain %361 %39 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFNegate %385 
                                Private f32* %387 = OpAccessChain %9 %39 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFAdd %386 %388 
                                Private f32* %390 = OpAccessChain %383 %39 
                                                      OpStore %390 %389 
                                         f32 %391 = OpLoad %376 
                                Private f32* %392 = OpAccessChain %383 %39 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                Private f32* %395 = OpAccessChain %361 %39 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFAdd %394 %396 
                                Private f32* %398 = OpAccessChain %383 %39 
                                                      OpStore %398 %397 
                                Private f32* %399 = OpAccessChain %383 %39 
                                         f32 %400 = OpLoad %399 
                                Uniform f32* %402 = OpAccessChain %31 %401 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %400 %403 
                                Private f32* %405 = OpAccessChain %383 %39 
                                                      OpStore %405 %404 
                                Private f32* %406 = OpAccessChain %383 %39 
                                         f32 %407 = OpLoad %406 
                                Private f32* %408 = OpAccessChain %109 %39 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpExtInst %1 37 %407 %409 
                                Private f32* %411 = OpAccessChain %383 %39 
                                                      OpStore %411 %410 
                                         f32 %412 = OpLoad %214 
                                       f32_3 %413 = OpCompositeConstruct %412 %412 %412 
                                       f32_3 %414 = OpExtInst %1 4 %413 
                                       f32_3 %417 = OpFAdd %414 %416 
                                                      OpStore %361 %417 
                                       f32_3 %418 = OpLoad %361 
                                       f32_3 %419 = OpExtInst %1 10 %418 
                                                      OpStore %361 %419 
                                       f32_3 %420 = OpLoad %361 
                                       f32_3 %422 = OpFMul %420 %421 
                                       f32_3 %425 = OpFAdd %422 %424 
                                                      OpStore %361 %425 
                                       f32_3 %426 = OpLoad %361 
                                       f32_3 %427 = OpExtInst %1 4 %426 
                                       f32_3 %429 = OpFAdd %427 %428 
                                                      OpStore %361 %429 
                                       f32_3 %430 = OpLoad %361 
                                       f32_3 %431 = OpCompositeConstruct %46 %46 %46 
                                       f32_3 %432 = OpCompositeConstruct %60 %60 %60 
                                       f32_3 %433 = OpExtInst %1 43 %430 %431 %432 
                                                      OpStore %361 %433 
                                       f32_3 %434 = OpLoad %361 
                                       f32_3 %435 = OpFAdd %434 %428 
                                                      OpStore %361 %435 
                                       f32_3 %436 = OpLoad %76 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 0 0 
                                       f32_3 %438 = OpLoad %361 
                                       f32_3 %439 = OpFMul %437 %438 
                                       f32_3 %441 = OpFAdd %439 %440 
                                                      OpStore %361 %441 
                                       f32_3 %442 = OpLoad %361 
                                       f32_3 %443 = OpLoad %383 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 0 0 
                                       f32_3 %445 = OpFMul %442 %444 
                                                      OpStore %383 %445 
                                       f32_3 %446 = OpLoad %383 
                                       f32_4 %447 = OpLoad %203 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 5 6 3 
                                                      OpStore %203 %448 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat5.x = u_xlat1.y * 0.25 + 0.75;
        u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat5.x, u_xlat2.x);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat1.x = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    u_xlat1.w = u_xlat10_0.w;
    u_xlat1 = u_xlat1 + u_xlat2;
    u_xlatb12 = u_xlat1.y>=u_xlat1.z;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat2.xy = u_xlat1.zy;
    u_xlat2.z = float(-1.0);
    u_xlat2.w = float(0.666666687);
    u_xlat3.xy = u_xlat1.yz + (-u_xlat2.xy);
    u_xlat3.z = float(1.0);
    u_xlat3.w = float(-1.0);
    u_xlat2 = vec4(u_xlat12) * u_xlat3 + u_xlat2;
    u_xlatb12 = u_xlat1.x>=u_xlat2.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat3.xyz = u_xlat2.xyw;
    u_xlat3.w = u_xlat1.x;
    u_xlat2.xyw = u_xlat3.wyx;
    u_xlat2 = (-u_xlat3) + u_xlat2;
    u_xlat2 = vec4(u_xlat12) * u_xlat2 + u_xlat3;
    u_xlat12 = min(u_xlat2.y, u_xlat2.w);
    u_xlat12 = (-u_xlat12) + u_xlat2.x;
    u_xlat1.x = (-u_xlat2.y) + u_xlat2.w;
    u_xlat5.x = u_xlat12 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat5.x;
    u_xlat1.x = u_xlat1.x + u_xlat2.z;
    u_xlat5.x = u_xlat2.x + 1.00000001e-010;
    u_xlat12 = u_xlat12 / u_xlat5.x;
    u_xlatb5 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);
    u_xlat16_4 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat4.x = u_xlat5.x * u_xlat16_4 + u_xlat10_0.z;
    u_xlatb8 = u_xlat10_0.x>=u_xlat4.x;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat4.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat8 * u_xlat0 + u_xlat4.x;
    u_xlat0 = u_xlat0 * _MaxValue;
    u_xlat0 = min(u_xlat0, u_xlat2.x);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 387
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %85 %97 %98 %112 %151 %154 %157 %377 %380 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %377 Location 377 
                                                      OpDecorate %380 Location 380 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 12 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 14 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                         i32 %101 = OpConstant 15 
                                             %110 = OpTypeVector %6 3 
                                             %111 = OpTypePointer Input %110 
                                Input f32_3* %112 = OpVariable Input 
                                         i32 %114 = OpConstant 13 
                                         u32 %119 = OpConstant 0 
                                             %120 = OpTypePointer Private %6 
                                         u32 %133 = OpConstant 2 
                                Private f32* %135 = OpVariable Private 
                                             %150 = OpTypePointer Output %110 
                               Output f32_3* %151 = OpVariable Output 
                               Output f32_3* %154 = OpVariable Output 
                               Output f32_4* %157 = OpVariable Output 
                                             %159 = OpTypePointer Private %110 
                              Private f32_3* %160 = OpVariable Private 
                              Private f32_4* %177 = OpVariable Private 
                              Private f32_3* %183 = OpVariable Private 
                                         i32 %184 = OpConstant 8 
                                         i32 %190 = OpConstant 9 
                                         i32 %196 = OpConstant 10 
                                         i32 %202 = OpConstant 11 
                                         f32 %211 = OpConstant 3.674022E-40 
                                         u32 %212 = OpConstant 3 
                                         i32 %214 = OpConstant 5 
                                         i32 %220 = OpConstant 6 
                                         i32 %226 = OpConstant 7 
                                         f32 %236 = OpConstant 3.674022E-40 
                                       f32_3 %237 = OpConstantComposite %236 %236 %236 
                              Private f32_3* %239 = OpVariable Private 
                                         f32 %243 = OpConstant 3.674022E-40 
                                       f32_3 %244 = OpConstantComposite %243 %243 %243 
                                         f32 %249 = OpConstant 3.674022E-40 
                                       f32_3 %250 = OpConstantComposite %249 %249 %249 
                                         f32 %252 = OpConstant 3.674022E-40 
                                       f32_3 %253 = OpConstantComposite %252 %252 %252 
                              Private f32_4* %263 = OpVariable Private 
                              Private f32_4* %271 = OpVariable Private 
                                         f32 %307 = OpConstant 3.674022E-40 
                                       f32_4 %308 = OpConstantComposite %307 %307 %307 %307 
                                       f32_4 %316 = OpConstantComposite %211 %211 %211 %211 
                                       f32_4 %324 = OpConstantComposite %236 %236 %236 %236 
                                         i32 %331 = OpConstant 4 
                               Output f32_3* %377 = OpVariable Output 
                               Output f32_4* %380 = OpVariable Output 
                                             %381 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %86 = OpAccessChain %23 %63 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %60 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %31 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %101 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %100 %104 
                              Uniform f32_4* %106 = OpAccessChain %23 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                                      OpStore %97 %109 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %115 = OpAccessChain %23 %114 %31 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                         f32 %118 = OpDot %113 %117 
                                Private f32* %121 = OpAccessChain %47 %119 
                                                      OpStore %121 %118 
                                       f32_3 %122 = OpLoad %112 
                              Uniform f32_4* %123 = OpAccessChain %23 %114 %26 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %127 = OpAccessChain %47 %81 
                                                      OpStore %127 %126 
                                       f32_3 %128 = OpLoad %112 
                              Uniform f32_4* %129 = OpAccessChain %23 %114 %39 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                         f32 %132 = OpDot %128 %131 
                                Private f32* %134 = OpAccessChain %47 %133 
                                                      OpStore %134 %132 
                                       f32_4 %136 = OpLoad %47 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_4 %138 = OpLoad %47 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                         f32 %140 = OpDot %137 %139 
                                                      OpStore %135 %140 
                                         f32 %141 = OpLoad %135 
                                         f32 %142 = OpExtInst %1 32 %141 
                                                      OpStore %135 %142 
                                         f32 %143 = OpLoad %135 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %47 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %47 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %47 %149 
                                       f32_4 %152 = OpLoad %47 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %151 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                                      OpStore %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                                      OpStore %157 %158 
                                Private f32* %161 = OpAccessChain %47 %81 
                                         f32 %162 = OpLoad %161 
                                Private f32* %163 = OpAccessChain %47 %81 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFMul %162 %164 
                                Private f32* %166 = OpAccessChain %160 %119 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %47 %119 
                                         f32 %168 = OpLoad %167 
                                Private f32* %169 = OpAccessChain %47 %119 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFMul %168 %170 
                                Private f32* %172 = OpAccessChain %160 %119 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                         f32 %175 = OpFAdd %171 %174 
                                Private f32* %176 = OpAccessChain %160 %119 
                                                      OpStore %176 %175 
                                       f32_4 %178 = OpLoad %47 
                                       f32_4 %179 = OpVectorShuffle %178 %178 1 2 2 0 
                                       f32_4 %180 = OpLoad %47 
                                       f32_4 %181 = OpVectorShuffle %180 %180 0 1 2 2 
                                       f32_4 %182 = OpFMul %179 %181 
                                                      OpStore %177 %182 
                              Uniform f32_4* %185 = OpAccessChain %23 %184 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %177 
                                         f32 %188 = OpDot %186 %187 
                                Private f32* %189 = OpAccessChain %183 %119 
                                                      OpStore %189 %188 
                              Uniform f32_4* %191 = OpAccessChain %23 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_4 %193 = OpLoad %177 
                                         f32 %194 = OpDot %192 %193 
                                Private f32* %195 = OpAccessChain %183 %81 
                                                      OpStore %195 %194 
                              Uniform f32_4* %197 = OpAccessChain %23 %196 
                                       f32_4 %198 = OpLoad %197 
                                       f32_4 %199 = OpLoad %177 
                                         f32 %200 = OpDot %198 %199 
                                Private f32* %201 = OpAccessChain %183 %133 
                                                      OpStore %201 %200 
                              Uniform f32_4* %203 = OpAccessChain %23 %202 
                                       f32_4 %204 = OpLoad %203 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpLoad %160 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 0 0 
                                       f32_3 %208 = OpFMul %205 %207 
                                       f32_3 %209 = OpLoad %183 
                                       f32_3 %210 = OpFAdd %208 %209 
                                                      OpStore %160 %210 
                                Private f32* %213 = OpAccessChain %47 %212 
                                                      OpStore %213 %211 
                              Uniform f32_4* %215 = OpAccessChain %23 %214 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %47 
                                         f32 %218 = OpDot %216 %217 
                                Private f32* %219 = OpAccessChain %183 %119 
                                                      OpStore %219 %218 
                              Uniform f32_4* %221 = OpAccessChain %23 %220 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %47 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %183 %81 
                                                      OpStore %225 %224 
                              Uniform f32_4* %227 = OpAccessChain %23 %226 
                                       f32_4 %228 = OpLoad %227 
                                       f32_4 %229 = OpLoad %47 
                                         f32 %230 = OpDot %228 %229 
                                Private f32* %231 = OpAccessChain %183 %133 
                                                      OpStore %231 %230 
                                       f32_3 %232 = OpLoad %160 
                                       f32_3 %233 = OpLoad %183 
                                       f32_3 %234 = OpFAdd %232 %233 
                                                      OpStore %160 %234 
                                       f32_3 %235 = OpLoad %160 
                                       f32_3 %238 = OpExtInst %1 40 %235 %237 
                                                      OpStore %160 %238 
                                       f32_3 %240 = OpLoad %160 
                                       f32_3 %241 = OpExtInst %1 30 %240 
                                                      OpStore %239 %241 
                                       f32_3 %242 = OpLoad %239 
                                       f32_3 %245 = OpFMul %242 %244 
                                                      OpStore %239 %245 
                                       f32_3 %246 = OpLoad %239 
                                       f32_3 %247 = OpExtInst %1 29 %246 
                                                      OpStore %239 %247 
                                       f32_3 %248 = OpLoad %239 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %254 = OpFAdd %251 %253 
                                                      OpStore %239 %254 
                                       f32_3 %255 = OpLoad %239 
                                       f32_3 %256 = OpExtInst %1 40 %255 %237 
                                                      OpStore %239 %256 
                                       f32_4 %257 = OpLoad %9 
                                       f32_4 %258 = OpVectorShuffle %257 %257 1 1 1 1 
                                       f32_4 %259 = OpFNegate %258 
                              Uniform f32_4* %260 = OpAccessChain %23 %26 
                                       f32_4 %261 = OpLoad %260 
                                       f32_4 %262 = OpFAdd %259 %261 
                                                      OpStore %60 %262 
                                       f32_4 %264 = OpLoad %47 
                                       f32_4 %265 = OpVectorShuffle %264 %264 1 1 1 1 
                                       f32_4 %266 = OpLoad %60 
                                       f32_4 %267 = OpFMul %265 %266 
                                                      OpStore %263 %267 
                                       f32_4 %268 = OpLoad %60 
                                       f32_4 %269 = OpLoad %60 
                                       f32_4 %270 = OpFMul %268 %269 
                                                      OpStore %60 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %272 0 0 0 0 
                                       f32_4 %274 = OpFNegate %273 
                              Uniform f32_4* %275 = OpAccessChain %23 %31 
                                       f32_4 %276 = OpLoad %275 
                                       f32_4 %277 = OpFAdd %274 %276 
                                                      OpStore %271 %277 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpVectorShuffle %278 %278 2 2 2 2 
                                       f32_4 %280 = OpFNegate %279 
                              Uniform f32_4* %281 = OpAccessChain %23 %39 
                                       f32_4 %282 = OpLoad %281 
                                       f32_4 %283 = OpFAdd %280 %282 
                                                      OpStore %9 %283 
                                       f32_4 %284 = OpLoad %271 
                                       f32_4 %285 = OpLoad %47 
                                       f32_4 %286 = OpVectorShuffle %285 %285 0 0 0 0 
                                       f32_4 %287 = OpFMul %284 %286 
                                       f32_4 %288 = OpLoad %263 
                                       f32_4 %289 = OpFAdd %287 %288 
                                                      OpStore %263 %289 
                                       f32_4 %290 = OpLoad %9 
                                       f32_4 %291 = OpLoad %47 
                                       f32_4 %292 = OpVectorShuffle %291 %291 2 2 2 2 
                                       f32_4 %293 = OpFMul %290 %292 
                                       f32_4 %294 = OpLoad %263 
                                       f32_4 %295 = OpFAdd %293 %294 
                                                      OpStore %47 %295 
                                       f32_4 %296 = OpLoad %271 
                                       f32_4 %297 = OpLoad %271 
                                       f32_4 %298 = OpFMul %296 %297 
                                       f32_4 %299 = OpLoad %60 
                                       f32_4 %300 = OpFAdd %298 %299 
                                                      OpStore %60 %300 
                                       f32_4 %301 = OpLoad %9 
                                       f32_4 %302 = OpLoad %9 
                                       f32_4 %303 = OpFMul %301 %302 
                                       f32_4 %304 = OpLoad %60 
                                       f32_4 %305 = OpFAdd %303 %304 
                                                      OpStore %9 %305 
                                       f32_4 %306 = OpLoad %9 
                                       f32_4 %309 = OpExtInst %1 40 %306 %308 
                                                      OpStore %9 %309 
                                       f32_4 %310 = OpLoad %9 
                                       f32_4 %311 = OpExtInst %1 32 %310 
                                                      OpStore %60 %311 
                                       f32_4 %312 = OpLoad %9 
                              Uniform f32_4* %313 = OpAccessChain %23 %49 
                                       f32_4 %314 = OpLoad %313 
                                       f32_4 %315 = OpFMul %312 %314 
                                       f32_4 %317 = OpFAdd %315 %316 
                                                      OpStore %9 %317 
                                       f32_4 %318 = OpLoad %9 
                                       f32_4 %319 = OpFDiv %316 %318 
                                                      OpStore %9 %319 
                                       f32_4 %320 = OpLoad %47 
                                       f32_4 %321 = OpLoad %60 
                                       f32_4 %322 = OpFMul %320 %321 
                                                      OpStore %47 %322 
                                       f32_4 %323 = OpLoad %47 
                                       f32_4 %325 = OpExtInst %1 40 %323 %324 
                                                      OpStore %47 %325 
                                       f32_4 %326 = OpLoad %9 
                                       f32_4 %327 = OpLoad %47 
                                       f32_4 %328 = OpFMul %326 %327 
                                                      OpStore %9 %328 
                                       f32_4 %329 = OpLoad %9 
                                       f32_3 %330 = OpVectorShuffle %329 %329 1 1 1 
                              Uniform f32_4* %332 = OpAccessChain %23 %331 %26 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_3 %335 = OpFMul %330 %334 
                                       f32_4 %336 = OpLoad %47 
                                       f32_4 %337 = OpVectorShuffle %336 %335 4 5 6 3 
                                                      OpStore %47 %337 
                              Uniform f32_4* %338 = OpAccessChain %23 %331 %31 
                                       f32_4 %339 = OpLoad %338 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_4 %341 = OpLoad %9 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 0 0 
                                       f32_3 %343 = OpFMul %340 %342 
                                       f32_4 %344 = OpLoad %47 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                       f32_3 %346 = OpFAdd %343 %345 
                                       f32_4 %347 = OpLoad %47 
                                       f32_4 %348 = OpVectorShuffle %347 %346 4 5 6 3 
                                                      OpStore %47 %348 
                              Uniform f32_4* %349 = OpAccessChain %23 %331 %39 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 2 2 2 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_4 %355 = OpLoad %47 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %9 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %9 %359 
                              Uniform f32_4* %360 = OpAccessChain %23 %331 %49 
                                       f32_4 %361 = OpLoad %360 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                       f32_4 %363 = OpLoad %9 
                                       f32_3 %364 = OpVectorShuffle %363 %363 3 3 3 
                                       f32_3 %365 = OpFMul %362 %364 
                                       f32_4 %366 = OpLoad %9 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_3 %368 = OpFAdd %365 %367 
                                       f32_4 %369 = OpLoad %9 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %9 %370 
                                       f32_4 %371 = OpLoad %9 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpLoad %239 
                                       f32_3 %374 = OpFAdd %372 %373 
                                       f32_4 %375 = OpLoad %9 
                                       f32_4 %376 = OpVectorShuffle %375 %374 4 5 6 3 
                                                      OpStore %9 %376 
                                       f32_4 %378 = OpLoad %9 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                                      OpStore %377 %379 
                                                      OpStore %380 %324 
                                 Output f32* %382 = OpAccessChain %85 %31 %81 
                                         f32 %383 = OpLoad %382 
                                         f32 %384 = OpFNegate %383 
                                 Output f32* %385 = OpAccessChain %85 %31 %81 
                                                      OpStore %385 %384 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 450
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %78 %197 %203 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %29 0 RelaxedPrecision 
                                                      OpMemberDecorate %29 0 Offset 29 
                                                      OpMemberDecorate %29 1 Offset 29 
                                                      OpMemberDecorate %29 2 Offset 29 
                                                      OpMemberDecorate %29 3 Offset 29 
                                                      OpMemberDecorate %29 4 Offset 29 
                                                      OpMemberDecorate %29 5 RelaxedPrecision 
                                                      OpMemberDecorate %29 5 Offset 29 
                                                      OpMemberDecorate %29 6 Offset 29 
                                                      OpMemberDecorate %29 7 RelaxedPrecision 
                                                      OpMemberDecorate %29 7 Offset 29 
                                                      OpDecorate %29 Block 
                                                      OpDecorate %31 DescriptorSet 31 
                                                      OpDecorate %31 Binding 31 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %68 SpecId 68 
                                                      OpDecorate %78 Location 78 
                                                      OpDecorate %162 DescriptorSet 162 
                                                      OpDecorate %162 Binding 162 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %197 Location 197 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %203 Location 203 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeStruct %7 %7 %27 %28 %28 %7 %6 %6 
                                              %30 = OpTypePointer Uniform %29 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32;}* %31 = OpVariable Uniform 
                                              %32 = OpTypeInt 32 1 
                                          i32 %33 = OpConstant 7 
                                              %34 = OpTypePointer Uniform %6 
                                          u32 %39 = OpConstant 0 
                                              %41 = OpTypeBool 
                                              %42 = OpTypePointer Private %41 
                                Private bool* %43 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                          i32 %49 = OpConstant 0 
                                          i32 %50 = OpConstant 1 
                                          i32 %52 = OpConstant -1 
                                          f32 %60 = OpConstant 3.674022E-40 
                                         bool %62 = OpConstantFalse 
                                         bool %68 = OpSpecConstantFalse 
                                          u32 %71 = OpConstant 1 
                                              %75 = OpTypePointer Private %28 
                               Private f32_3* %76 = OpVariable Private 
                                              %77 = OpTypePointer Input %28 
                                 Input f32_3* %78 = OpVariable Input 
                                          i32 %81 = OpConstant 2 
                                              %82 = OpTypePointer Uniform %7 
                                         i32 %104 = OpConstant 3 
                              Private f32_4* %109 = OpVariable Private 
                                             %110 = OpTypePointer Function %28 
                                         i32 %123 = OpConstant 4 
                                             %124 = OpTypePointer Uniform %28 
                              Private f32_4* %131 = OpVariable Private 
                                         f32 %141 = OpConstant 3.674022E-40 
                                         f32 %143 = OpConstant 3.674022E-40 
                                         u32 %146 = OpConstant 2 
                                         f32 %149 = OpConstant 3.674022E-40 
                                             %159 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %160 = OpTypeSampledImage %159 
                                             %161 = OpTypePointer UniformConstant %160 
 UniformConstant read_only Texture3DSampled* %162 = OpVariable UniformConstant 
                              Private f32_3* %173 = OpVariable Private 
                              Private f32_3* %183 = OpVariable Private 
                                         i32 %186 = OpConstant 5 
                                Input f32_3* %197 = OpVariable Input 
                                             %202 = OpTypePointer Output %7 
                               Output f32_4* %203 = OpVariable Output 
                                             %206 = OpTypePointer Output %6 
                               Private bool* %208 = OpVariable Private 
                                Private f32* %214 = OpVariable Private 
                                             %215 = OpTypePointer Function %6 
                                             %222 = OpTypePointer Private %15 
                              Private f32_2* %223 = OpVariable Private 
                              Private f32_2* %230 = OpVariable Private 
                                         f32 %232 = OpConstant 3.674022E-40 
                                         f32 %247 = OpConstant 3.674022E-40 
                                       f32_2 %248 = OpConstantComposite %232 %247 
                              Private f32_4* %272 = OpVariable Private 
                                Private f32* %303 = OpVariable Private 
                                         f32 %319 = OpConstant 3.674022E-40 
                                         f32 %321 = OpConstant 3.674022E-40 
                               Private bool* %341 = OpVariable Private 
                                Private f32* %354 = OpVariable Private 
                              Private f32_3* %361 = OpVariable Private 
                               Private bool* %370 = OpVariable Private 
                                Private f32* %376 = OpVariable Private 
                              Private f32_3* %383 = OpVariable Private 
                                         i32 %401 = OpConstant 6 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_3 %416 = OpConstantComposite %60 %247 %415 
                                       f32_3 %421 = OpConstantComposite %319 %319 %319 
                                         f32 %423 = OpConstant 3.674022E-40 
                                       f32_3 %424 = OpConstantComposite %423 %423 %423 
                                       f32_3 %428 = OpConstantComposite %232 %232 %232 
                                       f32_3 %440 = OpConstantComposite %60 %60 %60 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %111 = OpVariable Function 
                               Function f32* %216 = OpVariable Function 
                               Function f32* %257 = OpVariable Function 
                               Function f32* %347 = OpVariable Function 
                               Function f32* %377 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %35 = OpAccessChain %31 %33 
                                          f32 %36 = OpLoad %35 
                                          f32 %37 = OpFNegate %36 
                                          f32 %38 = OpFAdd %25 %37 
                                 Private f32* %40 = OpAccessChain %20 %39 
                                                      OpStore %40 %38 
                                 Private f32* %44 = OpAccessChain %20 %39 
                                          f32 %45 = OpLoad %44 
                                         bool %47 = OpFOrdLessThan %45 %46 
                                                      OpStore %43 %47 
                                         bool %48 = OpLoad %43 
                                          i32 %51 = OpSelect %48 %50 %49 
                                          i32 %53 = OpIMul %51 %52 
                                         bool %54 = OpINotEqual %53 %49 
                                                      OpSelectionMerge %56 None 
                                                      OpBranchConditional %54 %55 %56 
                                              %55 = OpLabel 
                                                      OpKill
                                              %56 = OpLabel 
                                 Uniform f32* %58 = OpAccessChain %31 %50 %39 
                                          f32 %59 = OpLoad %58 
                                         bool %61 = OpFOrdEqual %59 %60 
                                                      OpStore %43 %61 
                                                      OpSelectionMerge %64 None 
                                                      OpBranchConditional %62 %63 %64 
                                              %63 = OpLabel 
                                         bool %65 = OpLoad %43 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpBranch %67 
                                              %67 = OpLabel 
                                                      OpBranch %64 
                                              %64 = OpLabel 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %168 
                                              %69 = OpLabel 
                                 Uniform f32* %72 = OpAccessChain %31 %50 %71 
                                          f32 %73 = OpLoad %72 
                                         bool %74 = OpFOrdEqual %73 %60 
                                                      OpStore %43 %74 
                                        f32_3 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %31 %81 %50 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %76 %86 
                               Uniform f32_4* %87 = OpAccessChain %31 %81 %49 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpLoad %78 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpFMul %89 %91 
                                        f32_3 %93 = OpLoad %76 
                                        f32_3 %94 = OpFAdd %92 %93 
                                                      OpStore %76 %94 
                               Uniform f32_4* %95 = OpAccessChain %31 %81 %81 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpLoad %78 
                                        f32_3 %99 = OpVectorShuffle %98 %98 2 2 2 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_3 %101 = OpLoad %76 
                                       f32_3 %102 = OpFAdd %100 %101 
                                                      OpStore %76 %102 
                                       f32_3 %103 = OpLoad %76 
                              Uniform f32_4* %105 = OpAccessChain %31 %81 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFAdd %103 %107 
                                                      OpStore %76 %108 
                                        bool %112 = OpLoad %43 
                                                      OpSelectionMerge %114 None 
                                                      OpBranchConditional %112 %113 %116 
                                             %113 = OpLabel 
                                       f32_3 %115 = OpLoad %76 
                                                      OpStore %111 %115 
                                                      OpBranch %114 
                                             %116 = OpLabel 
                                       f32_3 %117 = OpLoad %78 
                                                      OpStore %111 %117 
                                                      OpBranch %114 
                                             %114 = OpLabel 
                                       f32_3 %118 = OpLoad %111 
                                       f32_4 %119 = OpLoad %109 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
                                                      OpStore %109 %120 
                                       f32_4 %121 = OpLoad %109 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                              Uniform f32_3* %125 = OpAccessChain %31 %123 
                                       f32_3 %126 = OpLoad %125 
                                       f32_3 %127 = OpFNegate %126 
                                       f32_3 %128 = OpFAdd %122 %127 
                                       f32_4 %129 = OpLoad %109 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %109 %130 
                                       f32_4 %132 = OpLoad %109 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                              Uniform f32_3* %134 = OpAccessChain %31 %104 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %131 
                                       f32_4 %138 = OpVectorShuffle %137 %136 0 4 5 6 
                                                      OpStore %131 %138 
                                Private f32* %139 = OpAccessChain %131 %71 
                                         f32 %140 = OpLoad %139 
                                         f32 %142 = OpFMul %140 %141 
                                         f32 %144 = OpFAdd %142 %143 
                                Private f32* %145 = OpAccessChain %109 %39 
                                                      OpStore %145 %144 
                                Uniform f32* %147 = OpAccessChain %31 %50 %146 
                                         f32 %148 = OpLoad %147 
                                         f32 %150 = OpFMul %148 %149 
                                         f32 %151 = OpFAdd %150 %143 
                                Private f32* %152 = OpAccessChain %76 %39 
                                                      OpStore %152 %151 
                                Private f32* %153 = OpAccessChain %76 %39 
                                         f32 %154 = OpLoad %153 
                                Private f32* %155 = OpAccessChain %109 %39 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpExtInst %1 40 %154 %156 
                                Private f32* %158 = OpAccessChain %131 %39 
                                                      OpStore %158 %157 
                  read_only Texture3DSampled %163 = OpLoad %162 
                                       f32_4 %164 = OpLoad %131 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 2 3 
                                       f32_4 %166 = OpImageSampleImplicitLod %163 %165 
                                                      OpStore %131 %166 
                                       f32_4 %167 = OpLoad %131 
                                                      OpStore %20 %167 
                                                      OpBranch %70 
                                             %168 = OpLabel 
                                Private f32* %169 = OpAccessChain %20 %39 
                                                      OpStore %169 %60 
                                Private f32* %170 = OpAccessChain %20 %71 
                                                      OpStore %170 %60 
                                Private f32* %171 = OpAccessChain %20 %146 
                                                      OpStore %171 %60 
                                Private f32* %172 = OpAccessChain %20 %22 
                                                      OpStore %172 %60 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                       f32_4 %174 = OpLoad %20 
                              Uniform f32_4* %175 = OpAccessChain %31 %49 
                                       f32_4 %176 = OpLoad %175 
                                         f32 %177 = OpDot %174 %176 
                                Private f32* %178 = OpAccessChain %173 %39 
                                                      OpStore %178 %177 
                                Private f32* %179 = OpAccessChain %173 %39 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpExtInst %1 43 %180 %46 %60 
                                Private f32* %182 = OpAccessChain %173 %39 
                                                      OpStore %182 %181 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                              Uniform f32_4* %187 = OpAccessChain %31 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpFMul %185 %189 
                                                      OpStore %183 %190 
                                       f32_3 %191 = OpLoad %173 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 0 0 
                                       f32_3 %193 = OpLoad %183 
                                       f32_3 %194 = OpFMul %192 %193 
                                                      OpStore %173 %194 
                                       f32_4 %195 = OpLoad %9 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %198 = OpLoad %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_3 %200 = OpLoad %173 
                                       f32_3 %201 = OpFAdd %199 %200 
                                                      OpStore %173 %201 
                                Private f32* %204 = OpAccessChain %9 %22 
                                         f32 %205 = OpLoad %204 
                                 Output f32* %207 = OpAccessChain %203 %22 
                                                      OpStore %207 %205 
                                Private f32* %209 = OpAccessChain %173 %71 
                                         f32 %210 = OpLoad %209 
                                Private f32* %211 = OpAccessChain %173 %146 
                                         f32 %212 = OpLoad %211 
                                        bool %213 = OpFOrdGreaterThanEqual %210 %212 
                                                      OpStore %208 %213 
                                        bool %217 = OpLoad %208 
                                                      OpSelectionMerge %219 None 
                                                      OpBranchConditional %217 %218 %220 
                                             %218 = OpLabel 
                                                      OpStore %216 %60 
                                                      OpBranch %219 
                                             %220 = OpLabel 
                                                      OpStore %216 %46 
                                                      OpBranch %219 
                                             %219 = OpLabel 
                                         f32 %221 = OpLoad %216 
                                                      OpStore %214 %221 
                                       f32_3 %224 = OpLoad %173 
                                       f32_2 %225 = OpVectorShuffle %224 %224 2 1 
                                       f32_2 %226 = OpFNegate %225 
                                       f32_3 %227 = OpLoad %173 
                                       f32_2 %228 = OpVectorShuffle %227 %227 1 2 
                                       f32_2 %229 = OpFAdd %226 %228 
                                                      OpStore %223 %229 
                                Private f32* %231 = OpAccessChain %230 %39 
                                                      OpStore %231 %60 
                                Private f32* %233 = OpAccessChain %230 %71 
                                                      OpStore %233 %232 
                                         f32 %234 = OpLoad %214 
                                       f32_2 %235 = OpCompositeConstruct %234 %234 
                                       f32_2 %236 = OpLoad %223 
                                       f32_2 %237 = OpFMul %235 %236 
                                       f32_3 %238 = OpLoad %173 
                                       f32_2 %239 = OpVectorShuffle %238 %238 2 1 
                                       f32_2 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %131 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 2 3 
                                                      OpStore %131 %242 
                                         f32 %243 = OpLoad %214 
                                       f32_2 %244 = OpCompositeConstruct %243 %243 
                                       f32_2 %245 = OpLoad %230 
                                       f32_2 %246 = OpFMul %244 %245 
                                       f32_2 %249 = OpFAdd %246 %248 
                                       f32_4 %250 = OpLoad %131 
                                       f32_4 %251 = OpVectorShuffle %250 %249 0 1 4 5 
                                                      OpStore %131 %251 
                                Private f32* %252 = OpAccessChain %173 %39 
                                         f32 %253 = OpLoad %252 
                                Private f32* %254 = OpAccessChain %131 %39 
                                         f32 %255 = OpLoad %254 
                                        bool %256 = OpFOrdGreaterThanEqual %253 %255 
                                                      OpStore %208 %256 
                                        bool %258 = OpLoad %208 
                                                      OpSelectionMerge %260 None 
                                                      OpBranchConditional %258 %259 %261 
                                             %259 = OpLabel 
                                                      OpStore %257 %60 
                                                      OpBranch %260 
                                             %261 = OpLabel 
                                                      OpStore %257 %46 
                                                      OpBranch %260 
                                             %260 = OpLabel 
                                         f32 %262 = OpLoad %257 
                                                      OpStore %214 %262 
                                       f32_4 %263 = OpLoad %131 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 3 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_4 %266 = OpLoad %109 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %109 %267 
                                Private f32* %268 = OpAccessChain %173 %39 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                Private f32* %271 = OpAccessChain %109 %22 
                                                      OpStore %271 %270 
                                Private f32* %273 = OpAccessChain %109 %39 
                                         f32 %274 = OpLoad %273 
                                Private f32* %275 = OpAccessChain %173 %39 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpFAdd %274 %276 
                                Private f32* %278 = OpAccessChain %272 %39 
                                                      OpStore %278 %277 
                                       f32_4 %279 = OpLoad %131 
                                       f32_3 %280 = OpVectorShuffle %279 %279 1 2 0 
                                       f32_4 %281 = OpLoad %109 
                                       f32_3 %282 = OpVectorShuffle %281 %281 1 2 3 
                                       f32_3 %283 = OpFAdd %280 %282 
                                       f32_4 %284 = OpLoad %272 
                                       f32_4 %285 = OpVectorShuffle %284 %283 0 4 5 6 
                                                      OpStore %272 %285 
                                         f32 %286 = OpLoad %214 
                                       f32_3 %287 = OpCompositeConstruct %286 %286 %286 
                                       f32_4 %288 = OpLoad %272 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %131 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 3 
                                       f32_3 %293 = OpFAdd %290 %292 
                                       f32_4 %294 = OpLoad %109 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %109 %295 
                                         f32 %296 = OpLoad %214 
                                Private f32* %297 = OpAccessChain %272 %22 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %296 %298 
                                Private f32* %300 = OpAccessChain %173 %39 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                                      OpStore %214 %302 
                                Private f32* %304 = OpAccessChain %109 %71 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpLoad %214 
                                         f32 %307 = OpExtInst %1 37 %305 %306 
                                                      OpStore %303 %307 
                                         f32 %308 = OpLoad %303 
                                         f32 %309 = OpFNegate %308 
                                Private f32* %310 = OpAccessChain %109 %39 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFAdd %309 %311 
                                                      OpStore %303 %312 
                                Private f32* %313 = OpAccessChain %109 %71 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                         f32 %316 = OpLoad %214 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %214 %317 
                                         f32 %318 = OpLoad %303 
                                         f32 %320 = OpFMul %318 %319 
                                         f32 %322 = OpFAdd %320 %321 
                                Private f32* %323 = OpAccessChain %76 %39 
                                                      OpStore %323 %322 
                                         f32 %324 = OpLoad %214 
                                Private f32* %325 = OpAccessChain %76 %39 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpFDiv %324 %326 
                                                      OpStore %214 %327 
                                         f32 %328 = OpLoad %214 
                                Private f32* %329 = OpAccessChain %109 %146 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFAdd %328 %330 
                                                      OpStore %214 %331 
                                Private f32* %332 = OpAccessChain %109 %39 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpFAdd %333 %321 
                                Private f32* %335 = OpAccessChain %76 %39 
                                                      OpStore %335 %334 
                                         f32 %336 = OpLoad %303 
                                Private f32* %337 = OpAccessChain %76 %39 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFDiv %336 %338 
                                Private f32* %340 = OpAccessChain %76 %39 
                                                      OpStore %340 %339 
                                Private f32* %342 = OpAccessChain %9 %71 
                                         f32 %343 = OpLoad %342 
                                Private f32* %344 = OpAccessChain %9 %146 
                                         f32 %345 = OpLoad %344 
                                        bool %346 = OpFOrdGreaterThanEqual %343 %345 
                                                      OpStore %341 %346 
                                        bool %348 = OpLoad %341 
                                                      OpSelectionMerge %350 None 
                                                      OpBranchConditional %348 %349 %351 
                                             %349 = OpLabel 
                                                      OpStore %347 %60 
                                                      OpBranch %350 
                                             %351 = OpLabel 
                                                      OpStore %347 %46 
                                                      OpBranch %350 
                                             %350 = OpLabel 
                                         f32 %352 = OpLoad %347 
                                Private f32* %353 = OpAccessChain %230 %39 
                                                      OpStore %353 %352 
                                Private f32* %355 = OpAccessChain %9 %146 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpFNegate %356 
                                Private f32* %358 = OpAccessChain %9 %71 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                                      OpStore %354 %360 
                                Private f32* %362 = OpAccessChain %230 %39 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpLoad %354 
                                         f32 %365 = OpFMul %363 %364 
                                Private f32* %366 = OpAccessChain %9 %146 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpFAdd %365 %367 
                                Private f32* %369 = OpAccessChain %361 %39 
                                                      OpStore %369 %368 
                                Private f32* %371 = OpAccessChain %9 %39 
                                         f32 %372 = OpLoad %371 
                                Private f32* %373 = OpAccessChain %361 %39 
                                         f32 %374 = OpLoad %373 
                                        bool %375 = OpFOrdGreaterThanEqual %372 %374 
                                                      OpStore %370 %375 
                                        bool %378 = OpLoad %370 
                                                      OpSelectionMerge %380 None 
                                                      OpBranchConditional %378 %379 %381 
                                             %379 = OpLabel 
                                                      OpStore %377 %60 
                                                      OpBranch %380 
                                             %381 = OpLabel 
                                                      OpStore %377 %46 
                                                      OpBranch %380 
                                             %380 = OpLabel 
                                         f32 %382 = OpLoad %377 
                                                      OpStore %376 %382 
                                Private f32* %384 = OpAccessChain %361 %39 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFNegate %385 
                                Private f32* %387 = OpAccessChain %9 %39 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFAdd %386 %388 
                                Private f32* %390 = OpAccessChain %383 %39 
                                                      OpStore %390 %389 
                                         f32 %391 = OpLoad %376 
                                Private f32* %392 = OpAccessChain %383 %39 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                Private f32* %395 = OpAccessChain %361 %39 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFAdd %394 %396 
                                Private f32* %398 = OpAccessChain %383 %39 
                                                      OpStore %398 %397 
                                Private f32* %399 = OpAccessChain %383 %39 
                                         f32 %400 = OpLoad %399 
                                Uniform f32* %402 = OpAccessChain %31 %401 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %400 %403 
                                Private f32* %405 = OpAccessChain %383 %39 
                                                      OpStore %405 %404 
                                Private f32* %406 = OpAccessChain %383 %39 
                                         f32 %407 = OpLoad %406 
                                Private f32* %408 = OpAccessChain %109 %39 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpExtInst %1 37 %407 %409 
                                Private f32* %411 = OpAccessChain %383 %39 
                                                      OpStore %411 %410 
                                         f32 %412 = OpLoad %214 
                                       f32_3 %413 = OpCompositeConstruct %412 %412 %412 
                                       f32_3 %414 = OpExtInst %1 4 %413 
                                       f32_3 %417 = OpFAdd %414 %416 
                                                      OpStore %361 %417 
                                       f32_3 %418 = OpLoad %361 
                                       f32_3 %419 = OpExtInst %1 10 %418 
                                                      OpStore %361 %419 
                                       f32_3 %420 = OpLoad %361 
                                       f32_3 %422 = OpFMul %420 %421 
                                       f32_3 %425 = OpFAdd %422 %424 
                                                      OpStore %361 %425 
                                       f32_3 %426 = OpLoad %361 
                                       f32_3 %427 = OpExtInst %1 4 %426 
                                       f32_3 %429 = OpFAdd %427 %428 
                                                      OpStore %361 %429 
                                       f32_3 %430 = OpLoad %361 
                                       f32_3 %431 = OpCompositeConstruct %46 %46 %46 
                                       f32_3 %432 = OpCompositeConstruct %60 %60 %60 
                                       f32_3 %433 = OpExtInst %1 43 %430 %431 %432 
                                                      OpStore %361 %433 
                                       f32_3 %434 = OpLoad %361 
                                       f32_3 %435 = OpFAdd %434 %428 
                                                      OpStore %361 %435 
                                       f32_3 %436 = OpLoad %76 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 0 0 
                                       f32_3 %438 = OpLoad %361 
                                       f32_3 %439 = OpFMul %437 %438 
                                       f32_3 %441 = OpFAdd %439 %440 
                                                      OpStore %361 %441 
                                       f32_3 %442 = OpLoad %361 
                                       f32_3 %443 = OpLoad %383 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 0 0 
                                       f32_3 %445 = OpFMul %442 %444 
                                                      OpStore %383 %445 
                                       f32_3 %446 = OpLoad %383 
                                       f32_4 %447 = OpLoad %203 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 5 6 3 
                                                      OpStore %203 %448 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
float u_xlat8;
bool u_xlatb8;
float u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat5.x = (-u_xlat1.x) + u_xlat5.x;
    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat9 = u_xlat2.y * 0.25 + 0.75;
        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat9);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat9 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat1.x = u_xlat1.x + u_xlat10_2.x;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat9 = min(u_xlat1.x, u_xlat9);
    u_xlat1.x = (u_xlatb5) ? u_xlat9 : u_xlat1.x;
    u_xlat2.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    u_xlat1.w = u_xlat10_0.w;
    u_xlat1 = u_xlat1 + u_xlat2;
    u_xlatb12 = u_xlat1.y>=u_xlat1.z;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat2.xy = u_xlat1.zy;
    u_xlat2.z = float(-1.0);
    u_xlat2.w = float(0.666666687);
    u_xlat3.xy = u_xlat1.yz + (-u_xlat2.xy);
    u_xlat3.z = float(1.0);
    u_xlat3.w = float(-1.0);
    u_xlat2 = vec4(u_xlat12) * u_xlat3 + u_xlat2;
    u_xlatb12 = u_xlat1.x>=u_xlat2.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat3.xyz = u_xlat2.xyw;
    u_xlat3.w = u_xlat1.x;
    u_xlat2.xyw = u_xlat3.wyx;
    u_xlat2 = (-u_xlat3) + u_xlat2;
    u_xlat2 = vec4(u_xlat12) * u_xlat2 + u_xlat3;
    u_xlat12 = min(u_xlat2.y, u_xlat2.w);
    u_xlat12 = (-u_xlat12) + u_xlat2.x;
    u_xlat1.x = (-u_xlat2.y) + u_xlat2.w;
    u_xlat5.x = u_xlat12 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat5.x;
    u_xlat1.x = u_xlat1.x + u_xlat2.z;
    u_xlat5.x = u_xlat2.x + 1.00000001e-010;
    u_xlat12 = u_xlat12 / u_xlat5.x;
    u_xlatb5 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);
    u_xlat16_4 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat4.x = u_xlat5.x * u_xlat16_4 + u_xlat10_0.z;
    u_xlatb8 = u_xlat10_0.x>=u_xlat4.x;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat4.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat8 * u_xlat0 + u_xlat4.x;
    u_xlat0 = u_xlat0 * _MaxValue;
    u_xlat0 = min(u_xlat0, u_xlat2.x);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 319
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %92 %98 %99 %113 %152 %155 %158 %278 %300 %312 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %278 Location 278 
                                                      OpDecorate %300 Location 300 
                                                      OpDecorate %312 Location 312 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 6 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 8 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 9 
                                             %111 = OpTypeVector %6 3 
                                             %112 = OpTypePointer Input %111 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 7 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                                             %151 = OpTypePointer Output %111 
                               Output f32_3* %152 = OpVariable Output 
                               Output f32_3* %155 = OpVariable Output 
                               Output f32_4* %158 = OpVariable Output 
                              Private f32_4* %160 = OpVariable Private 
                              Private f32_4* %167 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                                         f32 %211 = OpConstant 3.674022E-40 
                                       f32_4 %212 = OpConstantComposite %211 %211 %211 %211 
                                         i32 %217 = OpConstant 4 
                                         f32 %221 = OpConstant 3.674022E-40 
                                       f32_4 %222 = OpConstantComposite %221 %221 %221 %221 
                                         f32 %230 = OpConstant 3.674022E-40 
                                       f32_4 %231 = OpConstantComposite %230 %230 %230 %230 
                                         i32 %238 = OpConstant 5 
                               Output f32_3* %278 = OpVariable Output 
                                             %283 = OpTypePointer Uniform %6 
                                         f32 %290 = OpConstant 3.674022E-40 
                                         u32 %292 = OpConstant 3 
                                       f32_2 %296 = OpConstantComposite %290 %290 
                               Output f32_4* %300 = OpVariable Output 
                               Output f32_4* %312 = OpVariable Output 
                                             %313 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %81 = OpAccessChain %23 %63 %49 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %47 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %60 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %47 %87 
                                        f32_4 %93 = OpLoad %47 
                                Output f32_4* %95 = OpAccessChain %92 %31 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %23 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %23 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %23 %115 %31 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %60 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %23 %115 %26 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %60 %88 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %23 %115 %39 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %60 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %60 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %60 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %60 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %60 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %60 %150 
                                       f32_4 %153 = OpLoad %60 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                                      OpStore %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore %155 %157 
                                       f32_4 %159 = OpLoad %9 
                                                      OpStore %158 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %161 1 1 1 1 
                                       f32_4 %163 = OpFNegate %162 
                              Uniform f32_4* %164 = OpAccessChain %23 %39 
                                       f32_4 %165 = OpLoad %164 
                                       f32_4 %166 = OpFAdd %163 %165 
                                                      OpStore %160 %166 
                                       f32_4 %168 = OpLoad %60 
                                       f32_4 %169 = OpVectorShuffle %168 %168 1 1 1 1 
                                       f32_4 %170 = OpLoad %160 
                                       f32_4 %171 = OpFMul %169 %170 
                                                      OpStore %167 %171 
                                       f32_4 %172 = OpLoad %160 
                                       f32_4 %173 = OpLoad %160 
                                       f32_4 %174 = OpFMul %172 %173 
                                                      OpStore %160 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 0 0 0 0 
                                       f32_4 %178 = OpFNegate %177 
                              Uniform f32_4* %179 = OpAccessChain %23 %26 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpFAdd %178 %180 
                                                      OpStore %175 %181 
                                       f32_4 %182 = OpLoad %9 
                                       f32_4 %183 = OpVectorShuffle %182 %182 2 2 2 2 
                                       f32_4 %184 = OpFNegate %183 
                              Uniform f32_4* %185 = OpAccessChain %23 %49 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpFAdd %184 %186 
                                                      OpStore %9 %187 
                                       f32_4 %188 = OpLoad %175 
                                       f32_4 %189 = OpLoad %60 
                                       f32_4 %190 = OpVectorShuffle %189 %189 0 0 0 0 
                                       f32_4 %191 = OpFMul %188 %190 
                                       f32_4 %192 = OpLoad %167 
                                       f32_4 %193 = OpFAdd %191 %192 
                                                      OpStore %167 %193 
                                       f32_4 %194 = OpLoad %9 
                                       f32_4 %195 = OpLoad %60 
                                       f32_4 %196 = OpVectorShuffle %195 %195 2 2 2 2 
                                       f32_4 %197 = OpFMul %194 %196 
                                       f32_4 %198 = OpLoad %167 
                                       f32_4 %199 = OpFAdd %197 %198 
                                                      OpStore %60 %199 
                                       f32_4 %200 = OpLoad %175 
                                       f32_4 %201 = OpLoad %175 
                                       f32_4 %202 = OpFMul %200 %201 
                                       f32_4 %203 = OpLoad %160 
                                       f32_4 %204 = OpFAdd %202 %203 
                                                      OpStore %160 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFMul %205 %206 
                                       f32_4 %208 = OpLoad %160 
                                       f32_4 %209 = OpFAdd %207 %208 
                                                      OpStore %9 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %213 = OpExtInst %1 40 %210 %212 
                                                      OpStore %9 %213 
                                       f32_4 %214 = OpLoad %9 
                                       f32_4 %215 = OpExtInst %1 32 %214 
                                                      OpStore %160 %215 
                                       f32_4 %216 = OpLoad %9 
                              Uniform f32_4* %218 = OpAccessChain %23 %217 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpFMul %216 %219 
                                       f32_4 %223 = OpFAdd %220 %222 
                                                      OpStore %9 %223 
                                       f32_4 %224 = OpLoad %9 
                                       f32_4 %225 = OpFDiv %222 %224 
                                                      OpStore %9 %225 
                                       f32_4 %226 = OpLoad %60 
                                       f32_4 %227 = OpLoad %160 
                                       f32_4 %228 = OpFMul %226 %227 
                                                      OpStore %60 %228 
                                       f32_4 %229 = OpLoad %60 
                                       f32_4 %232 = OpExtInst %1 40 %229 %231 
                                                      OpStore %60 %232 
                                       f32_4 %233 = OpLoad %9 
                                       f32_4 %234 = OpLoad %60 
                                       f32_4 %235 = OpFMul %233 %234 
                                                      OpStore %9 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 1 1 1 
                              Uniform f32_4* %239 = OpAccessChain %23 %238 %26 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFMul %237 %241 
                                       f32_4 %243 = OpLoad %60 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %60 %244 
                              Uniform f32_4* %245 = OpAccessChain %23 %238 %31 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 0 0 
                                       f32_3 %250 = OpFMul %247 %249 
                                       f32_4 %251 = OpLoad %60 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFAdd %250 %252 
                                       f32_4 %254 = OpLoad %60 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %60 %255 
                              Uniform f32_4* %256 = OpAccessChain %23 %238 %39 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 2 2 2 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_4 %262 = OpLoad %60 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_3 %264 = OpFAdd %261 %263 
                                       f32_4 %265 = OpLoad %9 
                                       f32_4 %266 = OpVectorShuffle %265 %264 4 5 6 3 
                                                      OpStore %9 %266 
                              Uniform f32_4* %267 = OpAccessChain %23 %238 %49 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_4 %270 = OpLoad %9 
                                       f32_3 %271 = OpVectorShuffle %270 %270 3 3 3 
                                       f32_3 %272 = OpFMul %269 %271 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %275 = OpFAdd %272 %274 
                                       f32_4 %276 = OpLoad %9 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 6 3 
                                                      OpStore %9 %277 
                                       f32_4 %279 = OpLoad %9 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                                      OpStore %278 %280 
                                Private f32* %281 = OpAccessChain %47 %88 
                                         f32 %282 = OpLoad %281 
                                Uniform f32* %284 = OpAccessChain %23 %31 %120 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpFMul %282 %285 
                                Private f32* %287 = OpAccessChain %9 %120 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %9 %120 
                                         f32 %289 = OpLoad %288 
                                         f32 %291 = OpFMul %289 %290 
                                Private f32* %293 = OpAccessChain %9 %292 
                                                      OpStore %293 %291 
                                       f32_4 %294 = OpLoad %47 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 3 
                                       f32_2 %297 = OpFMul %295 %296 
                                       f32_4 %298 = OpLoad %9 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 1 5 3 
                                                      OpStore %9 %299 
                                       f32_4 %301 = OpLoad %47 
                                       f32_2 %302 = OpVectorShuffle %301 %301 2 3 
                                       f32_4 %303 = OpLoad %300 
                                       f32_4 %304 = OpVectorShuffle %303 %302 0 1 4 5 
                                                      OpStore %300 %304 
                                       f32_4 %305 = OpLoad %9 
                                       f32_2 %306 = OpVectorShuffle %305 %305 2 2 
                                       f32_4 %307 = OpLoad %9 
                                       f32_2 %308 = OpVectorShuffle %307 %307 0 3 
                                       f32_2 %309 = OpFAdd %306 %308 
                                       f32_4 %310 = OpLoad %300 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 2 3 
                                                      OpStore %300 %311 
                                                      OpStore %312 %231 
                                 Output f32* %314 = OpAccessChain %92 %31 %88 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFNegate %315 
                                 Output f32* %317 = OpAccessChain %92 %31 %88 
                                                      OpStore %317 %316 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 570
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %61 %270 %323 %329 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %28 ArrayStride 28 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 RelaxedPrecision 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 RelaxedPrecision 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpMemberDecorate %30 8 Offset 30 
                                                      OpMemberDecorate %30 9 RelaxedPrecision 
                                                      OpMemberDecorate %30 9 Offset 30 
                                                      OpMemberDecorate %30 10 Offset 30 
                                                      OpMemberDecorate %30 11 RelaxedPrecision 
                                                      OpMemberDecorate %30 11 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %61 Location 61 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %149 SpecId 149 
                                                      OpDecorate %248 DescriptorSet 248 
                                                      OpDecorate %248 Binding 248 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %270 Location 270 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %277 DescriptorSet 277 
                                                      OpDecorate %277 Binding 277 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %323 Location 323 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %329 Location 329 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                              %26 = OpTypeVector %6 3 
                                          u32 %27 = OpConstant 4 
                                              %28 = OpTypeArray %7 %27 
                                              %29 = OpTypeArray %7 %27 
                                              %30 = OpTypeStruct %26 %7 %7 %7 %28 %7 %29 %26 %26 %7 %6 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 11 
                                              %35 = OpTypePointer Uniform %6 
                                          u32 %40 = OpConstant 0 
                                              %42 = OpTypeBool 
                                              %43 = OpTypePointer Private %42 
                                Private bool* %44 = OpVariable Private 
                                          f32 %47 = OpConstant 3.674022E-40 
                                          i32 %50 = OpConstant 0 
                                          i32 %51 = OpConstant 1 
                                          i32 %53 = OpConstant -1 
                               Private f32_4* %59 = OpVariable Private 
                                              %60 = OpTypePointer Input %26 
                                 Input f32_3* %61 = OpVariable Input 
                                              %64 = OpTypePointer Uniform %26 
                               Private f32_4* %70 = OpVariable Private 
                                          i32 %71 = OpConstant 4 
                                          u32 %72 = OpConstant 2 
                                          u32 %78 = OpConstant 1 
                                          i32 %80 = OpConstant 2 
                                              %90 = OpTypePointer Private %26 
                               Private f32_3* %91 = OpVariable Private 
                                          i32 %93 = OpConstant 3 
                                              %94 = OpTypePointer Uniform %7 
                                         f32 %135 = OpConstant 3.674022E-40 
                               Private bool* %138 = OpVariable Private 
                                         i32 %139 = OpConstant 5 
                                        bool %143 = OpConstantFalse 
                                        bool %149 = OpSpecConstantFalse 
                               Private bool* %152 = OpVariable Private 
                                         i32 %158 = OpConstant 6 
                                             %195 = OpTypePointer Function %26 
                                         i32 %209 = OpConstant 8 
                              Private f32_4* %216 = OpVariable Private 
                                         i32 %219 = OpConstant 7 
                                             %225 = OpTypePointer Private %15 
                              Private f32_2* %226 = OpVariable Private 
                                         f32 %229 = OpConstant 3.674022E-40 
                                         f32 %231 = OpConstant 3.674022E-40 
                                Private f32* %234 = OpVariable Private 
                                         f32 %237 = OpConstant 3.674022E-40 
                                             %245 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %246 = OpTypeSampledImage %245 
                                             %247 = OpTypePointer UniformConstant %246 
 UniformConstant read_only Texture3DSampled* %248 = OpVariable UniformConstant 
                              Private f32_3* %259 = OpVariable Private 
                                             %269 = OpTypePointer Input %7 
                                Input f32_4* %270 = OpVariable Input 
                                Private f32* %276 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %277 = OpVariable UniformConstant 
                              Private f32_3* %282 = OpVariable Private 
                                             %298 = OpTypePointer Function %6 
                                         i32 %312 = OpConstant 9 
                                Input f32_3* %323 = OpVariable Input 
                                             %328 = OpTypePointer Output %7 
                               Output f32_4* %329 = OpVariable Output 
                                             %332 = OpTypePointer Output %6 
                               Private bool* %334 = OpVariable Private 
                                Private f32* %340 = OpVariable Private 
                              Private f32_2* %347 = OpVariable Private 
                                         f32 %355 = OpConstant 3.674022E-40 
                                         f32 %370 = OpConstant 3.674022E-40 
                                       f32_2 %371 = OpConstantComposite %355 %370 
                                         f32 %440 = OpConstant 3.674022E-40 
                                         f32 %442 = OpConstant 3.674022E-40 
                                Private f32* %474 = OpVariable Private 
                              Private f32_3* %481 = OpVariable Private 
                               Private bool* %490 = OpVariable Private 
                                Private f32* %496 = OpVariable Private 
                              Private f32_3* %503 = OpVariable Private 
                                         i32 %521 = OpConstant 10 
                                         f32 %535 = OpConstant 3.674022E-40 
                                       f32_3 %536 = OpConstantComposite %135 %370 %535 
                                       f32_3 %541 = OpConstantComposite %440 %440 %440 
                                         f32 %543 = OpConstant 3.674022E-40 
                                       f32_3 %544 = OpConstantComposite %543 %543 %543 
                                       f32_3 %548 = OpConstantComposite %355 %355 %355 
                                       f32_3 %560 = OpConstantComposite %135 %135 %135 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %196 = OpVariable Function 
                               Function f32* %299 = OpVariable Function 
                               Function f32* %341 = OpVariable Function 
                               Function f32* %380 = OpVariable Function 
                               Function f32* %467 = OpVariable Function 
                               Function f32* %497 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                 Private f32* %41 = OpAccessChain %20 %40 
                                                      OpStore %41 %39 
                                 Private f32* %45 = OpAccessChain %20 %40 
                                          f32 %46 = OpLoad %45 
                                         bool %48 = OpFOrdLessThan %46 %47 
                                                      OpStore %44 %48 
                                         bool %49 = OpLoad %44 
                                          i32 %52 = OpSelect %49 %51 %50 
                                          i32 %54 = OpIMul %52 %53 
                                         bool %55 = OpINotEqual %54 %50 
                                                      OpSelectionMerge %57 None 
                                                      OpBranchConditional %55 %56 %57 
                                              %56 = OpLabel 
                                                      OpKill
                                              %57 = OpLabel 
                                        f32_3 %62 = OpLoad %61 
                                        f32_3 %63 = OpFNegate %62 
                               Uniform f32_3* %65 = OpAccessChain %32 %50 
                                        f32_3 %66 = OpLoad %65 
                                        f32_3 %67 = OpFAdd %63 %66 
                                        f32_4 %68 = OpLoad %59 
                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 6 3 
                                                      OpStore %59 %69 
                                 Uniform f32* %73 = OpAccessChain %32 %71 %50 %72 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %70 %40 
                                                      OpStore %75 %74 
                                 Uniform f32* %76 = OpAccessChain %32 %71 %51 %72 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %79 = OpAccessChain %70 %78 
                                                      OpStore %79 %77 
                                 Uniform f32* %81 = OpAccessChain %32 %71 %80 %72 
                                          f32 %82 = OpLoad %81 
                                 Private f32* %83 = OpAccessChain %70 %72 
                                                      OpStore %83 %82 
                                        f32_4 %84 = OpLoad %59 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_4 %86 = OpLoad %70 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                          f32 %88 = OpDot %85 %87 
                                 Private f32* %89 = OpAccessChain %59 %40 
                                                      OpStore %89 %88 
                                        f32_3 %92 = OpLoad %61 
                               Uniform f32_4* %95 = OpAccessChain %32 %93 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFNegate %97 
                                        f32_3 %99 = OpFAdd %92 %98 
                                                      OpStore %91 %99 
                                       f32_3 %100 = OpLoad %91 
                                       f32_3 %101 = OpLoad %91 
                                         f32 %102 = OpDot %100 %101 
                                Private f32* %103 = OpAccessChain %91 %40 
                                                      OpStore %103 %102 
                                Private f32* %104 = OpAccessChain %91 %40 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpExtInst %1 31 %105 
                                Private f32* %107 = OpAccessChain %91 %40 
                                                      OpStore %107 %106 
                                Private f32* %108 = OpAccessChain %59 %40 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                Private f32* %111 = OpAccessChain %91 %40 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFAdd %110 %112 
                                Private f32* %114 = OpAccessChain %91 %40 
                                                      OpStore %114 %113 
                                Uniform f32* %115 = OpAccessChain %32 %93 %22 
                                         f32 %116 = OpLoad %115 
                                Private f32* %117 = OpAccessChain %91 %40 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFMul %116 %118 
                                Private f32* %120 = OpAccessChain %59 %40 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %119 %121 
                                Private f32* %123 = OpAccessChain %59 %40 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %59 %40 
                                         f32 %125 = OpLoad %124 
                                Uniform f32* %126 = OpAccessChain %32 %80 %72 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %32 %80 %22 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFAdd %128 %130 
                                Private f32* %132 = OpAccessChain %59 %40 
                                                      OpStore %132 %131 
                                Private f32* %133 = OpAccessChain %59 %40 
                                         f32 %134 = OpLoad %133 
                                         f32 %136 = OpExtInst %1 43 %134 %47 %135 
                                Private f32* %137 = OpAccessChain %59 %40 
                                                      OpStore %137 %136 
                                Uniform f32* %140 = OpAccessChain %32 %139 %40 
                                         f32 %141 = OpLoad %140 
                                        bool %142 = OpFOrdEqual %141 %135 
                                                      OpStore %138 %142 
                                                      OpSelectionMerge %145 None 
                                                      OpBranchConditional %143 %144 %145 
                                             %144 = OpLabel 
                                        bool %146 = OpLoad %138 
                                                      OpSelectionMerge %148 None 
                                                      OpBranchConditional %146 %147 %148 
                                             %147 = OpLabel 
                                                      OpBranch %148 
                                             %148 = OpLabel 
                                                      OpBranch %145 
                                             %145 = OpLabel 
                                                      OpSelectionMerge %151 None 
                                                      OpBranchConditional %149 %150 %254 
                                             %150 = OpLabel 
                                Uniform f32* %153 = OpAccessChain %32 %139 %78 
                                         f32 %154 = OpLoad %153 
                                        bool %155 = OpFOrdEqual %154 %135 
                                                      OpStore %152 %155 
                                       f32_3 %156 = OpLoad %61 
                                       f32_3 %157 = OpVectorShuffle %156 %156 1 1 1 
                              Uniform f32_4* %159 = OpAccessChain %32 %158 %51 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFMul %157 %161 
                                       f32_4 %163 = OpLoad %70 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %70 %164 
                              Uniform f32_4* %165 = OpAccessChain %32 %158 %50 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpLoad %61 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 0 0 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_4 %171 = OpLoad %70 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %173 = OpFAdd %170 %172 
                                       f32_4 %174 = OpLoad %70 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                                      OpStore %70 %175 
                              Uniform f32_4* %176 = OpAccessChain %32 %158 %80 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpLoad %61 
                                       f32_3 %180 = OpVectorShuffle %179 %179 2 2 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_4 %182 = OpLoad %70 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFAdd %181 %183 
                                       f32_4 %185 = OpLoad %70 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
                                                      OpStore %70 %186 
                                       f32_4 %187 = OpLoad %70 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                              Uniform f32_4* %189 = OpAccessChain %32 %158 %93 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFAdd %188 %191 
                                       f32_4 %193 = OpLoad %70 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %70 %194 
                                        bool %197 = OpLoad %152 
                                                      OpSelectionMerge %199 None 
                                                      OpBranchConditional %197 %198 %202 
                                             %198 = OpLabel 
                                       f32_4 %200 = OpLoad %70 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                                      OpStore %196 %201 
                                                      OpBranch %199 
                                             %202 = OpLabel 
                                       f32_3 %203 = OpLoad %61 
                                                      OpStore %196 %203 
                                                      OpBranch %199 
                                             %199 = OpLabel 
                                       f32_3 %204 = OpLoad %196 
                                       f32_4 %205 = OpLoad %70 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 6 3 
                                                      OpStore %70 %206 
                                       f32_4 %207 = OpLoad %70 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                              Uniform f32_3* %210 = OpAccessChain %32 %209 
                                       f32_3 %211 = OpLoad %210 
                                       f32_3 %212 = OpFNegate %211 
                                       f32_3 %213 = OpFAdd %208 %212 
                                       f32_4 %214 = OpLoad %70 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 6 3 
                                                      OpStore %70 %215 
                                       f32_4 %217 = OpLoad %70 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                              Uniform f32_3* %220 = OpAccessChain %32 %219 
                                       f32_3 %221 = OpLoad %220 
                                       f32_3 %222 = OpFMul %218 %221 
                                       f32_4 %223 = OpLoad %216 
                                       f32_4 %224 = OpVectorShuffle %223 %222 0 4 5 6 
                                                      OpStore %216 %224 
                                Private f32* %227 = OpAccessChain %216 %78 
                                         f32 %228 = OpLoad %227 
                                         f32 %230 = OpFMul %228 %229 
                                         f32 %232 = OpFAdd %230 %231 
                                Private f32* %233 = OpAccessChain %226 %40 
                                                      OpStore %233 %232 
                                Uniform f32* %235 = OpAccessChain %32 %139 %72 
                                         f32 %236 = OpLoad %235 
                                         f32 %238 = OpFMul %236 %237 
                                         f32 %239 = OpFAdd %238 %231 
                                                      OpStore %234 %239 
                                         f32 %240 = OpLoad %234 
                                Private f32* %241 = OpAccessChain %226 %40 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpExtInst %1 40 %240 %242 
                                Private f32* %244 = OpAccessChain %216 %40 
                                                      OpStore %244 %243 
                  read_only Texture3DSampled %249 = OpLoad %248 
                                       f32_4 %250 = OpLoad %216 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 2 3 
                                       f32_4 %252 = OpImageSampleImplicitLod %249 %251 
                                                      OpStore %216 %252 
                                       f32_4 %253 = OpLoad %216 
                                                      OpStore %20 %253 
                                                      OpBranch %151 
                                             %254 = OpLabel 
                                Private f32* %255 = OpAccessChain %20 %40 
                                                      OpStore %255 %135 
                                Private f32* %256 = OpAccessChain %20 %78 
                                                      OpStore %256 %135 
                                Private f32* %257 = OpAccessChain %20 %72 
                                                      OpStore %257 %135 
                                Private f32* %258 = OpAccessChain %20 %22 
                                                      OpStore %258 %135 
                                                      OpBranch %151 
                                             %151 = OpLabel 
                                       f32_4 %260 = OpLoad %20 
                              Uniform f32_4* %261 = OpAccessChain %32 %51 
                                       f32_4 %262 = OpLoad %261 
                                         f32 %263 = OpDot %260 %262 
                                Private f32* %264 = OpAccessChain %259 %40 
                                                      OpStore %264 %263 
                                Private f32* %265 = OpAccessChain %259 %40 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpExtInst %1 43 %266 %47 %135 
                                Private f32* %268 = OpAccessChain %259 %40 
                                                      OpStore %268 %267 
                                       f32_4 %271 = OpLoad %270 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
                                       f32_4 %273 = OpLoad %270 
                                       f32_2 %274 = OpVectorShuffle %273 %273 3 3 
                                       f32_2 %275 = OpFDiv %272 %274 
                                                      OpStore %226 %275 
                  read_only Texture2DSampled %278 = OpLoad %277 
                                       f32_2 %279 = OpLoad %226 
                                       f32_4 %280 = OpImageSampleImplicitLod %278 %279 
                                         f32 %281 = OpCompositeExtract %280 0 
                                                      OpStore %276 %281 
                                Private f32* %283 = OpAccessChain %59 %40 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpLoad %276 
                                         f32 %286 = OpFAdd %284 %285 
                                Private f32* %287 = OpAccessChain %282 %40 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %282 %40 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpExtInst %1 43 %289 %47 %135 
                                Private f32* %291 = OpAccessChain %282 %40 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %282 %40 
                                         f32 %293 = OpLoad %292 
                                Private f32* %294 = OpAccessChain %259 %40 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 37 %293 %295 
                                Private f32* %297 = OpAccessChain %259 %40 
                                                      OpStore %297 %296 
                                        bool %300 = OpLoad %138 
                                                      OpSelectionMerge %302 None 
                                                      OpBranchConditional %300 %301 %305 
                                             %301 = OpLabel 
                                Private f32* %303 = OpAccessChain %259 %40 
                                         f32 %304 = OpLoad %303 
                                                      OpStore %299 %304 
                                                      OpBranch %302 
                                             %305 = OpLabel 
                                Private f32* %306 = OpAccessChain %282 %40 
                                         f32 %307 = OpLoad %306 
                                                      OpStore %299 %307 
                                                      OpBranch %302 
                                             %302 = OpLabel 
                                         f32 %308 = OpLoad %299 
                                Private f32* %309 = OpAccessChain %259 %40 
                                                      OpStore %309 %308 
                                       f32_4 %310 = OpLoad %9 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                              Uniform f32_4* %313 = OpAccessChain %32 %312 
                                       f32_4 %314 = OpLoad %313 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                       f32_3 %316 = OpFMul %311 %315 
                                                      OpStore %282 %316 
                                       f32_3 %317 = OpLoad %259 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 0 0 
                                       f32_3 %319 = OpLoad %282 
                                       f32_3 %320 = OpFMul %318 %319 
                                                      OpStore %259 %320 
                                       f32_4 %321 = OpLoad %9 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_3 %324 = OpLoad %323 
                                       f32_3 %325 = OpFMul %322 %324 
                                       f32_3 %326 = OpLoad %259 
                                       f32_3 %327 = OpFAdd %325 %326 
                                                      OpStore %259 %327 
                                Private f32* %330 = OpAccessChain %9 %22 
                                         f32 %331 = OpLoad %330 
                                 Output f32* %333 = OpAccessChain %329 %22 
                                                      OpStore %333 %331 
                                Private f32* %335 = OpAccessChain %259 %78 
                                         f32 %336 = OpLoad %335 
                                Private f32* %337 = OpAccessChain %259 %72 
                                         f32 %338 = OpLoad %337 
                                        bool %339 = OpFOrdGreaterThanEqual %336 %338 
                                                      OpStore %334 %339 
                                        bool %342 = OpLoad %334 
                                                      OpSelectionMerge %344 None 
                                                      OpBranchConditional %342 %343 %345 
                                             %343 = OpLabel 
                                                      OpStore %341 %135 
                                                      OpBranch %344 
                                             %345 = OpLabel 
                                                      OpStore %341 %47 
                                                      OpBranch %344 
                                             %344 = OpLabel 
                                         f32 %346 = OpLoad %341 
                                                      OpStore %340 %346 
                                       f32_3 %348 = OpLoad %259 
                                       f32_2 %349 = OpVectorShuffle %348 %348 2 1 
                                       f32_2 %350 = OpFNegate %349 
                                       f32_3 %351 = OpLoad %259 
                                       f32_2 %352 = OpVectorShuffle %351 %351 1 2 
                                       f32_2 %353 = OpFAdd %350 %352 
                                                      OpStore %347 %353 
                                Private f32* %354 = OpAccessChain %226 %40 
                                                      OpStore %354 %135 
                                Private f32* %356 = OpAccessChain %226 %78 
                                                      OpStore %356 %355 
                                         f32 %357 = OpLoad %340 
                                       f32_2 %358 = OpCompositeConstruct %357 %357 
                                       f32_2 %359 = OpLoad %347 
                                       f32_2 %360 = OpFMul %358 %359 
                                       f32_3 %361 = OpLoad %259 
                                       f32_2 %362 = OpVectorShuffle %361 %361 2 1 
                                       f32_2 %363 = OpFAdd %360 %362 
                                       f32_4 %364 = OpLoad %216 
                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 2 3 
                                                      OpStore %216 %365 
                                         f32 %366 = OpLoad %340 
                                       f32_2 %367 = OpCompositeConstruct %366 %366 
                                       f32_2 %368 = OpLoad %226 
                                       f32_2 %369 = OpFMul %367 %368 
                                       f32_2 %372 = OpFAdd %369 %371 
                                       f32_4 %373 = OpLoad %216 
                                       f32_4 %374 = OpVectorShuffle %373 %372 0 1 4 5 
                                                      OpStore %216 %374 
                                Private f32* %375 = OpAccessChain %259 %40 
                                         f32 %376 = OpLoad %375 
                                Private f32* %377 = OpAccessChain %216 %40 
                                         f32 %378 = OpLoad %377 
                                        bool %379 = OpFOrdGreaterThanEqual %376 %378 
                                                      OpStore %334 %379 
                                        bool %381 = OpLoad %334 
                                                      OpSelectionMerge %383 None 
                                                      OpBranchConditional %381 %382 %384 
                                             %382 = OpLabel 
                                                      OpStore %380 %135 
                                                      OpBranch %383 
                                             %384 = OpLabel 
                                                      OpStore %380 %47 
                                                      OpBranch %383 
                                             %383 = OpLabel 
                                         f32 %385 = OpLoad %380 
                                                      OpStore %340 %385 
                                       f32_4 %386 = OpLoad %216 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 3 
                                       f32_3 %388 = OpFNegate %387 
                                       f32_4 %389 = OpLoad %59 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 6 3 
                                                      OpStore %59 %390 
                                Private f32* %391 = OpAccessChain %259 %40 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFNegate %392 
                                Private f32* %394 = OpAccessChain %59 %22 
                                                      OpStore %394 %393 
                                Private f32* %395 = OpAccessChain %59 %40 
                                         f32 %396 = OpLoad %395 
                                Private f32* %397 = OpAccessChain %259 %40 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFAdd %396 %398 
                                Private f32* %400 = OpAccessChain %70 %40 
                                                      OpStore %400 %399 
                                       f32_4 %401 = OpLoad %216 
                                       f32_3 %402 = OpVectorShuffle %401 %401 1 2 0 
                                       f32_4 %403 = OpLoad %59 
                                       f32_3 %404 = OpVectorShuffle %403 %403 1 2 3 
                                       f32_3 %405 = OpFAdd %402 %404 
                                       f32_4 %406 = OpLoad %70 
                                       f32_4 %407 = OpVectorShuffle %406 %405 0 4 5 6 
                                                      OpStore %70 %407 
                                         f32 %408 = OpLoad %340 
                                       f32_3 %409 = OpCompositeConstruct %408 %408 %408 
                                       f32_4 %410 = OpLoad %70 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                       f32_3 %412 = OpFMul %409 %411 
                                       f32_4 %413 = OpLoad %216 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 3 
                                       f32_3 %415 = OpFAdd %412 %414 
                                       f32_4 %416 = OpLoad %59 
                                       f32_4 %417 = OpVectorShuffle %416 %415 4 5 6 3 
                                                      OpStore %59 %417 
                                         f32 %418 = OpLoad %340 
                                Private f32* %419 = OpAccessChain %70 %22 
                                         f32 %420 = OpLoad %419 
                                         f32 %421 = OpFMul %418 %420 
                                Private f32* %422 = OpAccessChain %259 %40 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFAdd %421 %423 
                                                      OpStore %340 %424 
                                Private f32* %425 = OpAccessChain %59 %78 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpLoad %340 
                                         f32 %428 = OpExtInst %1 37 %426 %427 
                                                      OpStore %234 %428 
                                         f32 %429 = OpLoad %234 
                                         f32 %430 = OpFNegate %429 
                                Private f32* %431 = OpAccessChain %59 %40 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpFAdd %430 %432 
                                                      OpStore %234 %433 
                                Private f32* %434 = OpAccessChain %59 %78 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpFNegate %435 
                                         f32 %437 = OpLoad %340 
                                         f32 %438 = OpFAdd %436 %437 
                                                      OpStore %340 %438 
                                         f32 %439 = OpLoad %234 
                                         f32 %441 = OpFMul %439 %440 
                                         f32 %443 = OpFAdd %441 %442 
                                Private f32* %444 = OpAccessChain %91 %40 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %340 
                                Private f32* %446 = OpAccessChain %91 %40 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFDiv %445 %447 
                                                      OpStore %340 %448 
                                         f32 %449 = OpLoad %340 
                                Private f32* %450 = OpAccessChain %59 %72 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFAdd %449 %451 
                                                      OpStore %340 %452 
                                Private f32* %453 = OpAccessChain %59 %40 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpFAdd %454 %442 
                                Private f32* %456 = OpAccessChain %91 %40 
                                                      OpStore %456 %455 
                                         f32 %457 = OpLoad %234 
                                Private f32* %458 = OpAccessChain %91 %40 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFDiv %457 %459 
                                Private f32* %461 = OpAccessChain %91 %40 
                                                      OpStore %461 %460 
                                Private f32* %462 = OpAccessChain %9 %78 
                                         f32 %463 = OpLoad %462 
                                Private f32* %464 = OpAccessChain %9 %72 
                                         f32 %465 = OpLoad %464 
                                        bool %466 = OpFOrdGreaterThanEqual %463 %465 
                                                      OpStore %152 %466 
                                        bool %468 = OpLoad %152 
                                                      OpSelectionMerge %470 None 
                                                      OpBranchConditional %468 %469 %471 
                                             %469 = OpLabel 
                                                      OpStore %467 %135 
                                                      OpBranch %470 
                                             %471 = OpLabel 
                                                      OpStore %467 %47 
                                                      OpBranch %470 
                                             %470 = OpLabel 
                                         f32 %472 = OpLoad %467 
                                Private f32* %473 = OpAccessChain %226 %40 
                                                      OpStore %473 %472 
                                Private f32* %475 = OpAccessChain %9 %72 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFNegate %476 
                                Private f32* %478 = OpAccessChain %9 %78 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFAdd %477 %479 
                                                      OpStore %474 %480 
                                Private f32* %482 = OpAccessChain %226 %40 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpLoad %474 
                                         f32 %485 = OpFMul %483 %484 
                                Private f32* %486 = OpAccessChain %9 %72 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFAdd %485 %487 
                                Private f32* %489 = OpAccessChain %481 %40 
                                                      OpStore %489 %488 
                                Private f32* %491 = OpAccessChain %9 %40 
                                         f32 %492 = OpLoad %491 
                                Private f32* %493 = OpAccessChain %481 %40 
                                         f32 %494 = OpLoad %493 
                                        bool %495 = OpFOrdGreaterThanEqual %492 %494 
                                                      OpStore %490 %495 
                                        bool %498 = OpLoad %490 
                                                      OpSelectionMerge %500 None 
                                                      OpBranchConditional %498 %499 %501 
                                             %499 = OpLabel 
                                                      OpStore %497 %135 
                                                      OpBranch %500 
                                             %501 = OpLabel 
                                                      OpStore %497 %47 
                                                      OpBranch %500 
                                             %500 = OpLabel 
                                         f32 %502 = OpLoad %497 
                                                      OpStore %496 %502 
                                Private f32* %504 = OpAccessChain %481 %40 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpFNegate %505 
                                Private f32* %507 = OpAccessChain %9 %40 
                                         f32 %508 = OpLoad %507 
                                         f32 %509 = OpFAdd %506 %508 
                                Private f32* %510 = OpAccessChain %503 %40 
                                                      OpStore %510 %509 
                                         f32 %511 = OpLoad %496 
                                Private f32* %512 = OpAccessChain %503 %40 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFMul %511 %513 
                                Private f32* %515 = OpAccessChain %481 %40 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFAdd %514 %516 
                                Private f32* %518 = OpAccessChain %503 %40 
                                                      OpStore %518 %517 
                                Private f32* %519 = OpAccessChain %503 %40 
                                         f32 %520 = OpLoad %519 
                                Uniform f32* %522 = OpAccessChain %32 %521 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %520 %523 
                                Private f32* %525 = OpAccessChain %503 %40 
                                                      OpStore %525 %524 
                                Private f32* %526 = OpAccessChain %503 %40 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %59 %40 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpExtInst %1 37 %527 %529 
                                Private f32* %531 = OpAccessChain %503 %40 
                                                      OpStore %531 %530 
                                         f32 %532 = OpLoad %340 
                                       f32_3 %533 = OpCompositeConstruct %532 %532 %532 
                                       f32_3 %534 = OpExtInst %1 4 %533 
                                       f32_3 %537 = OpFAdd %534 %536 
                                                      OpStore %481 %537 
                                       f32_3 %538 = OpLoad %481 
                                       f32_3 %539 = OpExtInst %1 10 %538 
                                                      OpStore %481 %539 
                                       f32_3 %540 = OpLoad %481 
                                       f32_3 %542 = OpFMul %540 %541 
                                       f32_3 %545 = OpFAdd %542 %544 
                                                      OpStore %481 %545 
                                       f32_3 %546 = OpLoad %481 
                                       f32_3 %547 = OpExtInst %1 4 %546 
                                       f32_3 %549 = OpFAdd %547 %548 
                                                      OpStore %481 %549 
                                       f32_3 %550 = OpLoad %481 
                                       f32_3 %551 = OpCompositeConstruct %47 %47 %47 
                                       f32_3 %552 = OpCompositeConstruct %135 %135 %135 
                                       f32_3 %553 = OpExtInst %1 43 %550 %551 %552 
                                                      OpStore %481 %553 
                                       f32_3 %554 = OpLoad %481 
                                       f32_3 %555 = OpFAdd %554 %548 
                                                      OpStore %481 %555 
                                       f32_3 %556 = OpLoad %91 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 0 0 
                                       f32_3 %558 = OpLoad %481 
                                       f32_3 %559 = OpFMul %557 %558 
                                       f32_3 %561 = OpFAdd %559 %560 
                                                      OpStore %481 %561 
                                       f32_3 %562 = OpLoad %481 
                                       f32_3 %563 = OpLoad %503 
                                       f32_3 %564 = OpVectorShuffle %563 %563 0 0 0 
                                       f32_3 %565 = OpFMul %562 %564 
                                                      OpStore %503 %565 
                                       f32_3 %566 = OpLoad %503 
                                       f32_4 %567 = OpLoad %329 
                                       f32_4 %568 = OpVectorShuffle %567 %566 4 5 6 3 
                                                      OpStore %329 %568 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat21;
float u_xlat23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat21 = u_xlat2.y * u_xlat2.y;
    u_xlat21 = u_xlat2.x * u_xlat2.x + (-u_xlat21);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat2);
    u_xlat4.y = dot(unity_SHAg, u_xlat2);
    u_xlat4.z = dot(unity_SHAb, u_xlat2);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
float u_xlat8;
bool u_xlatb8;
float u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat5.x = (-u_xlat1.x) + u_xlat5.x;
    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat9 = u_xlat2.y * 0.25 + 0.75;
        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat9);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat9 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat1.x = u_xlat1.x + u_xlat10_2.x;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat9 = min(u_xlat1.x, u_xlat9);
    u_xlat1.x = (u_xlatb5) ? u_xlat9 : u_xlat1.x;
    u_xlat2.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat2.w = 0.0;
    u_xlat1.w = u_xlat10_0.w;
    u_xlat1 = u_xlat1 + u_xlat2;
    u_xlatb12 = u_xlat1.y>=u_xlat1.z;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat2.xy = u_xlat1.zy;
    u_xlat2.z = float(-1.0);
    u_xlat2.w = float(0.666666687);
    u_xlat3.xy = u_xlat1.yz + (-u_xlat2.xy);
    u_xlat3.z = float(1.0);
    u_xlat3.w = float(-1.0);
    u_xlat2 = vec4(u_xlat12) * u_xlat3 + u_xlat2;
    u_xlatb12 = u_xlat1.x>=u_xlat2.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat3.xyz = u_xlat2.xyw;
    u_xlat3.w = u_xlat1.x;
    u_xlat2.xyw = u_xlat3.wyx;
    u_xlat2 = (-u_xlat3) + u_xlat2;
    u_xlat2 = vec4(u_xlat12) * u_xlat2 + u_xlat3;
    u_xlat12 = min(u_xlat2.y, u_xlat2.w);
    u_xlat12 = (-u_xlat12) + u_xlat2.x;
    u_xlat1.x = (-u_xlat2.y) + u_xlat2.w;
    u_xlat5.x = u_xlat12 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat5.x;
    u_xlat1.x = u_xlat1.x + u_xlat2.z;
    u_xlat5.x = u_xlat2.x + 1.00000001e-010;
    u_xlat12 = u_xlat12 / u_xlat5.x;
    u_xlatb5 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);
    u_xlat16_4 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat4.x = u_xlat5.x * u_xlat16_4 + u_xlat10_0.z;
    u_xlatb8 = u_xlat10_0.x>=u_xlat4.x;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat4.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat8 * u_xlat0 + u_xlat4.x;
    u_xlat0 = u_xlat0 * _MaxValue;
    u_xlat0 = min(u_xlat0, u_xlat2.x);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 421
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %92 %98 %99 %113 %152 %155 %158 %381 %402 %414 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %381 Location 381 
                                                      OpDecorate %402 Location 402 
                                                      OpDecorate %414 Location 414 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 13 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 15 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 16 
                                             %111 = OpTypeVector %6 3 
                                             %112 = OpTypePointer Input %111 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 14 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                                             %151 = OpTypePointer Output %111 
                               Output f32_3* %152 = OpVariable Output 
                               Output f32_3* %155 = OpVariable Output 
                               Output f32_4* %158 = OpVariable Output 
                                             %160 = OpTypePointer Private %111 
                              Private f32_3* %161 = OpVariable Private 
                              Private f32_4* %178 = OpVariable Private 
                              Private f32_3* %184 = OpVariable Private 
                                         i32 %185 = OpConstant 9 
                                         i32 %191 = OpConstant 10 
                                         i32 %197 = OpConstant 11 
                                         i32 %203 = OpConstant 12 
                                         f32 %212 = OpConstant 3.674022E-40 
                                         u32 %213 = OpConstant 3 
                                         i32 %215 = OpConstant 6 
                                         i32 %221 = OpConstant 7 
                                         i32 %227 = OpConstant 8 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                              Private f32_3* %241 = OpVariable Private 
                                         f32 %245 = OpConstant 3.674022E-40 
                                       f32_3 %246 = OpConstantComposite %245 %245 %245 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_3 %252 = OpConstantComposite %251 %251 %251 
                                         f32 %254 = OpConstant 3.674022E-40 
                                       f32_3 %255 = OpConstantComposite %254 %254 %254 
                              Private f32_4* %259 = OpVariable Private 
                              Private f32_4* %266 = OpVariable Private 
                              Private f32_4* %274 = OpVariable Private 
                                         f32 %310 = OpConstant 3.674022E-40 
                                       f32_4 %311 = OpConstantComposite %310 %310 %310 %310 
                                         i32 %316 = OpConstant 4 
                                       f32_4 %320 = OpConstantComposite %212 %212 %212 %212 
                                       f32_4 %328 = OpConstantComposite %238 %238 %238 %238 
                                         i32 %335 = OpConstant 5 
                               Output f32_3* %381 = OpVariable Output 
                                             %386 = OpTypePointer Uniform %6 
                                         f32 %393 = OpConstant 3.674022E-40 
                                       f32_2 %398 = OpConstantComposite %393 %393 
                               Output f32_4* %402 = OpVariable Output 
                               Output f32_4* %414 = OpVariable Output 
                                             %415 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %81 = OpAccessChain %23 %63 %49 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %47 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %60 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %47 %87 
                                        f32_4 %93 = OpLoad %47 
                                Output f32_4* %95 = OpAccessChain %92 %31 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %23 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %23 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %23 %115 %31 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %60 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %23 %115 %26 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %60 %88 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %23 %115 %39 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %60 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %60 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %60 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %60 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %60 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %60 %150 
                                       f32_4 %153 = OpLoad %60 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                                      OpStore %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore %155 %157 
                                       f32_4 %159 = OpLoad %9 
                                                      OpStore %158 %159 
                                Private f32* %162 = OpAccessChain %60 %88 
                                         f32 %163 = OpLoad %162 
                                Private f32* %164 = OpAccessChain %60 %88 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                Private f32* %167 = OpAccessChain %161 %120 
                                                      OpStore %167 %166 
                                Private f32* %168 = OpAccessChain %60 %120 
                                         f32 %169 = OpLoad %168 
                                Private f32* %170 = OpAccessChain %60 %120 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFMul %169 %171 
                                Private f32* %173 = OpAccessChain %161 %120 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpFNegate %174 
                                         f32 %176 = OpFAdd %172 %175 
                                Private f32* %177 = OpAccessChain %161 %120 
                                                      OpStore %177 %176 
                                       f32_4 %179 = OpLoad %60 
                                       f32_4 %180 = OpVectorShuffle %179 %179 1 2 2 0 
                                       f32_4 %181 = OpLoad %60 
                                       f32_4 %182 = OpVectorShuffle %181 %181 0 1 2 2 
                                       f32_4 %183 = OpFMul %180 %182 
                                                      OpStore %178 %183 
                              Uniform f32_4* %186 = OpAccessChain %23 %185 
                                       f32_4 %187 = OpLoad %186 
                                       f32_4 %188 = OpLoad %178 
                                         f32 %189 = OpDot %187 %188 
                                Private f32* %190 = OpAccessChain %184 %120 
                                                      OpStore %190 %189 
                              Uniform f32_4* %192 = OpAccessChain %23 %191 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpLoad %178 
                                         f32 %195 = OpDot %193 %194 
                                Private f32* %196 = OpAccessChain %184 %88 
                                                      OpStore %196 %195 
                              Uniform f32_4* %198 = OpAccessChain %23 %197 
                                       f32_4 %199 = OpLoad %198 
                                       f32_4 %200 = OpLoad %178 
                                         f32 %201 = OpDot %199 %200 
                                Private f32* %202 = OpAccessChain %184 %134 
                                                      OpStore %202 %201 
                              Uniform f32_4* %204 = OpAccessChain %23 %203 
                                       f32_4 %205 = OpLoad %204 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_3 %207 = OpLoad %161 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 0 0 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_3 %210 = OpLoad %184 
                                       f32_3 %211 = OpFAdd %209 %210 
                                                      OpStore %161 %211 
                                Private f32* %214 = OpAccessChain %60 %213 
                                                      OpStore %214 %212 
                              Uniform f32_4* %216 = OpAccessChain %23 %215 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %60 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %178 %120 
                                                      OpStore %220 %219 
                              Uniform f32_4* %222 = OpAccessChain %23 %221 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %60 
                                         f32 %225 = OpDot %223 %224 
                                Private f32* %226 = OpAccessChain %178 %88 
                                                      OpStore %226 %225 
                              Uniform f32_4* %228 = OpAccessChain %23 %227 
                                       f32_4 %229 = OpLoad %228 
                                       f32_4 %230 = OpLoad %60 
                                         f32 %231 = OpDot %229 %230 
                                Private f32* %232 = OpAccessChain %178 %134 
                                                      OpStore %232 %231 
                                       f32_3 %233 = OpLoad %161 
                                       f32_4 %234 = OpLoad %178 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %236 = OpFAdd %233 %235 
                                                      OpStore %161 %236 
                                       f32_3 %237 = OpLoad %161 
                                       f32_3 %240 = OpExtInst %1 40 %237 %239 
                                                      OpStore %161 %240 
                                       f32_3 %242 = OpLoad %161 
                                       f32_3 %243 = OpExtInst %1 30 %242 
                                                      OpStore %241 %243 
                                       f32_3 %244 = OpLoad %241 
                                       f32_3 %247 = OpFMul %244 %246 
                                                      OpStore %241 %247 
                                       f32_3 %248 = OpLoad %241 
                                       f32_3 %249 = OpExtInst %1 29 %248 
                                                      OpStore %241 %249 
                                       f32_3 %250 = OpLoad %241 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %256 = OpFAdd %253 %255 
                                                      OpStore %241 %256 
                                       f32_3 %257 = OpLoad %241 
                                       f32_3 %258 = OpExtInst %1 40 %257 %239 
                                                      OpStore %241 %258 
                                       f32_4 %260 = OpLoad %9 
                                       f32_4 %261 = OpVectorShuffle %260 %260 1 1 1 1 
                                       f32_4 %262 = OpFNegate %261 
                              Uniform f32_4* %263 = OpAccessChain %23 %39 
                                       f32_4 %264 = OpLoad %263 
                                       f32_4 %265 = OpFAdd %262 %264 
                                                      OpStore %259 %265 
                                       f32_4 %267 = OpLoad %60 
                                       f32_4 %268 = OpVectorShuffle %267 %267 1 1 1 1 
                                       f32_4 %269 = OpLoad %259 
                                       f32_4 %270 = OpFMul %268 %269 
                                                      OpStore %266 %270 
                                       f32_4 %271 = OpLoad %259 
                                       f32_4 %272 = OpLoad %259 
                                       f32_4 %273 = OpFMul %271 %272 
                                                      OpStore %259 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %275 0 0 0 0 
                                       f32_4 %277 = OpFNegate %276 
                              Uniform f32_4* %278 = OpAccessChain %23 %26 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpFAdd %277 %279 
                                                      OpStore %274 %280 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %281 2 2 2 2 
                                       f32_4 %283 = OpFNegate %282 
                              Uniform f32_4* %284 = OpAccessChain %23 %49 
                                       f32_4 %285 = OpLoad %284 
                                       f32_4 %286 = OpFAdd %283 %285 
                                                      OpStore %9 %286 
                                       f32_4 %287 = OpLoad %274 
                                       f32_4 %288 = OpLoad %60 
                                       f32_4 %289 = OpVectorShuffle %288 %288 0 0 0 0 
                                       f32_4 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %266 
                                       f32_4 %292 = OpFAdd %290 %291 
                                                      OpStore %266 %292 
                                       f32_4 %293 = OpLoad %9 
                                       f32_4 %294 = OpLoad %60 
                                       f32_4 %295 = OpVectorShuffle %294 %294 2 2 2 2 
                                       f32_4 %296 = OpFMul %293 %295 
                                       f32_4 %297 = OpLoad %266 
                                       f32_4 %298 = OpFAdd %296 %297 
                                                      OpStore %60 %298 
                                       f32_4 %299 = OpLoad %274 
                                       f32_4 %300 = OpLoad %274 
                                       f32_4 %301 = OpFMul %299 %300 
                                       f32_4 %302 = OpLoad %259 
                                       f32_4 %303 = OpFAdd %301 %302 
                                                      OpStore %259 %303 
                                       f32_4 %304 = OpLoad %9 
                                       f32_4 %305 = OpLoad %9 
                                       f32_4 %306 = OpFMul %304 %305 
                                       f32_4 %307 = OpLoad %259 
                                       f32_4 %308 = OpFAdd %306 %307 
                                                      OpStore %9 %308 
                                       f32_4 %309 = OpLoad %9 
                                       f32_4 %312 = OpExtInst %1 40 %309 %311 
                                                      OpStore %9 %312 
                                       f32_4 %313 = OpLoad %9 
                                       f32_4 %314 = OpExtInst %1 32 %313 
                                                      OpStore %259 %314 
                                       f32_4 %315 = OpLoad %9 
                              Uniform f32_4* %317 = OpAccessChain %23 %316 
                                       f32_4 %318 = OpLoad %317 
                                       f32_4 %319 = OpFMul %315 %318 
                                       f32_4 %321 = OpFAdd %319 %320 
                                                      OpStore %9 %321 
                                       f32_4 %322 = OpLoad %9 
                                       f32_4 %323 = OpFDiv %320 %322 
                                                      OpStore %9 %323 
                                       f32_4 %324 = OpLoad %60 
                                       f32_4 %325 = OpLoad %259 
                                       f32_4 %326 = OpFMul %324 %325 
                                                      OpStore %60 %326 
                                       f32_4 %327 = OpLoad %60 
                                       f32_4 %329 = OpExtInst %1 40 %327 %328 
                                                      OpStore %60 %329 
                                       f32_4 %330 = OpLoad %9 
                                       f32_4 %331 = OpLoad %60 
                                       f32_4 %332 = OpFMul %330 %331 
                                                      OpStore %9 %332 
                                       f32_4 %333 = OpLoad %9 
                                       f32_3 %334 = OpVectorShuffle %333 %333 1 1 1 
                              Uniform f32_4* %336 = OpAccessChain %23 %335 %26 
                                       f32_4 %337 = OpLoad %336 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %339 = OpFMul %334 %338 
                                       f32_4 %340 = OpLoad %60 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                                      OpStore %60 %341 
                              Uniform f32_4* %342 = OpAccessChain %23 %335 %31 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_4 %345 = OpLoad %9 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 0 0 
                                       f32_3 %347 = OpFMul %344 %346 
                                       f32_4 %348 = OpLoad %60 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                       f32_3 %350 = OpFAdd %347 %349 
                                       f32_4 %351 = OpLoad %60 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %60 %352 
                              Uniform f32_4* %353 = OpAccessChain %23 %335 %39 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %9 
                                       f32_3 %357 = OpVectorShuffle %356 %356 2 2 2 
                                       f32_3 %358 = OpFMul %355 %357 
                                       f32_4 %359 = OpLoad %60 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %361 = OpFAdd %358 %360 
                                       f32_4 %362 = OpLoad %9 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %9 %363 
                              Uniform f32_4* %364 = OpAccessChain %23 %335 %49 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_4 %367 = OpLoad %9 
                                       f32_3 %368 = OpVectorShuffle %367 %367 3 3 3 
                                       f32_3 %369 = OpFMul %366 %368 
                                       f32_4 %370 = OpLoad %9 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFAdd %369 %371 
                                       f32_4 %373 = OpLoad %9 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 5 6 3 
                                                      OpStore %9 %374 
                                       f32_4 %375 = OpLoad %9 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpLoad %241 
                                       f32_3 %378 = OpFAdd %376 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %9 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                                      OpStore %381 %383 
                                Private f32* %384 = OpAccessChain %47 %88 
                                         f32 %385 = OpLoad %384 
                                Uniform f32* %387 = OpAccessChain %23 %31 %120 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFMul %385 %388 
                                Private f32* %390 = OpAccessChain %9 %120 
                                                      OpStore %390 %389 
                                Private f32* %391 = OpAccessChain %9 %120 
                                         f32 %392 = OpLoad %391 
                                         f32 %394 = OpFMul %392 %393 
                                Private f32* %395 = OpAccessChain %9 %213 
                                                      OpStore %395 %394 
                                       f32_4 %396 = OpLoad %47 
                                       f32_2 %397 = OpVectorShuffle %396 %396 0 3 
                                       f32_2 %399 = OpFMul %397 %398 
                                       f32_4 %400 = OpLoad %9 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 1 5 3 
                                                      OpStore %9 %401 
                                       f32_4 %403 = OpLoad %47 
                                       f32_2 %404 = OpVectorShuffle %403 %403 2 3 
                                       f32_4 %405 = OpLoad %402 
                                       f32_4 %406 = OpVectorShuffle %405 %404 0 1 4 5 
                                                      OpStore %402 %406 
                                       f32_4 %407 = OpLoad %9 
                                       f32_2 %408 = OpVectorShuffle %407 %407 2 2 
                                       f32_4 %409 = OpLoad %9 
                                       f32_2 %410 = OpVectorShuffle %409 %409 0 3 
                                       f32_2 %411 = OpFAdd %408 %410 
                                       f32_4 %412 = OpLoad %402 
                                       f32_4 %413 = OpVectorShuffle %412 %411 4 5 2 3 
                                                      OpStore %402 %413 
                                                      OpStore %414 %328 
                                 Output f32* %416 = OpAccessChain %92 %31 %88 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFNegate %417 
                                 Output f32* %419 = OpAccessChain %92 %31 %88 
                                                      OpStore %419 %418 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 570
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %61 %270 %323 %329 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %28 ArrayStride 28 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 RelaxedPrecision 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 RelaxedPrecision 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpMemberDecorate %30 8 Offset 30 
                                                      OpMemberDecorate %30 9 RelaxedPrecision 
                                                      OpMemberDecorate %30 9 Offset 30 
                                                      OpMemberDecorate %30 10 Offset 30 
                                                      OpMemberDecorate %30 11 RelaxedPrecision 
                                                      OpMemberDecorate %30 11 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %61 Location 61 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %149 SpecId 149 
                                                      OpDecorate %248 DescriptorSet 248 
                                                      OpDecorate %248 Binding 248 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %270 Location 270 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %277 DescriptorSet 277 
                                                      OpDecorate %277 Binding 277 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %323 Location 323 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %329 Location 329 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                              %26 = OpTypeVector %6 3 
                                          u32 %27 = OpConstant 4 
                                              %28 = OpTypeArray %7 %27 
                                              %29 = OpTypeArray %7 %27 
                                              %30 = OpTypeStruct %26 %7 %7 %7 %28 %7 %29 %26 %26 %7 %6 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 11 
                                              %35 = OpTypePointer Uniform %6 
                                          u32 %40 = OpConstant 0 
                                              %42 = OpTypeBool 
                                              %43 = OpTypePointer Private %42 
                                Private bool* %44 = OpVariable Private 
                                          f32 %47 = OpConstant 3.674022E-40 
                                          i32 %50 = OpConstant 0 
                                          i32 %51 = OpConstant 1 
                                          i32 %53 = OpConstant -1 
                               Private f32_4* %59 = OpVariable Private 
                                              %60 = OpTypePointer Input %26 
                                 Input f32_3* %61 = OpVariable Input 
                                              %64 = OpTypePointer Uniform %26 
                               Private f32_4* %70 = OpVariable Private 
                                          i32 %71 = OpConstant 4 
                                          u32 %72 = OpConstant 2 
                                          u32 %78 = OpConstant 1 
                                          i32 %80 = OpConstant 2 
                                              %90 = OpTypePointer Private %26 
                               Private f32_3* %91 = OpVariable Private 
                                          i32 %93 = OpConstant 3 
                                              %94 = OpTypePointer Uniform %7 
                                         f32 %135 = OpConstant 3.674022E-40 
                               Private bool* %138 = OpVariable Private 
                                         i32 %139 = OpConstant 5 
                                        bool %143 = OpConstantFalse 
                                        bool %149 = OpSpecConstantFalse 
                               Private bool* %152 = OpVariable Private 
                                         i32 %158 = OpConstant 6 
                                             %195 = OpTypePointer Function %26 
                                         i32 %209 = OpConstant 8 
                              Private f32_4* %216 = OpVariable Private 
                                         i32 %219 = OpConstant 7 
                                             %225 = OpTypePointer Private %15 
                              Private f32_2* %226 = OpVariable Private 
                                         f32 %229 = OpConstant 3.674022E-40 
                                         f32 %231 = OpConstant 3.674022E-40 
                                Private f32* %234 = OpVariable Private 
                                         f32 %237 = OpConstant 3.674022E-40 
                                             %245 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %246 = OpTypeSampledImage %245 
                                             %247 = OpTypePointer UniformConstant %246 
 UniformConstant read_only Texture3DSampled* %248 = OpVariable UniformConstant 
                              Private f32_3* %259 = OpVariable Private 
                                             %269 = OpTypePointer Input %7 
                                Input f32_4* %270 = OpVariable Input 
                                Private f32* %276 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %277 = OpVariable UniformConstant 
                              Private f32_3* %282 = OpVariable Private 
                                             %298 = OpTypePointer Function %6 
                                         i32 %312 = OpConstant 9 
                                Input f32_3* %323 = OpVariable Input 
                                             %328 = OpTypePointer Output %7 
                               Output f32_4* %329 = OpVariable Output 
                                             %332 = OpTypePointer Output %6 
                               Private bool* %334 = OpVariable Private 
                                Private f32* %340 = OpVariable Private 
                              Private f32_2* %347 = OpVariable Private 
                                         f32 %355 = OpConstant 3.674022E-40 
                                         f32 %370 = OpConstant 3.674022E-40 
                                       f32_2 %371 = OpConstantComposite %355 %370 
                                         f32 %440 = OpConstant 3.674022E-40 
                                         f32 %442 = OpConstant 3.674022E-40 
                                Private f32* %474 = OpVariable Private 
                              Private f32_3* %481 = OpVariable Private 
                               Private bool* %490 = OpVariable Private 
                                Private f32* %496 = OpVariable Private 
                              Private f32_3* %503 = OpVariable Private 
                                         i32 %521 = OpConstant 10 
                                         f32 %535 = OpConstant 3.674022E-40 
                                       f32_3 %536 = OpConstantComposite %135 %370 %535 
                                       f32_3 %541 = OpConstantComposite %440 %440 %440 
                                         f32 %543 = OpConstant 3.674022E-40 
                                       f32_3 %544 = OpConstantComposite %543 %543 %543 
                                       f32_3 %548 = OpConstantComposite %355 %355 %355 
                                       f32_3 %560 = OpConstantComposite %135 %135 %135 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %196 = OpVariable Function 
                               Function f32* %299 = OpVariable Function 
                               Function f32* %341 = OpVariable Function 
                               Function f32* %380 = OpVariable Function 
                               Function f32* %467 = OpVariable Function 
                               Function f32* %497 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                 Private f32* %41 = OpAccessChain %20 %40 
                                                      OpStore %41 %39 
                                 Private f32* %45 = OpAccessChain %20 %40 
                                          f32 %46 = OpLoad %45 
                                         bool %48 = OpFOrdLessThan %46 %47 
                                                      OpStore %44 %48 
                                         bool %49 = OpLoad %44 
                                          i32 %52 = OpSelect %49 %51 %50 
                                          i32 %54 = OpIMul %52 %53 
                                         bool %55 = OpINotEqual %54 %50 
                                                      OpSelectionMerge %57 None 
                                                      OpBranchConditional %55 %56 %57 
                                              %56 = OpLabel 
                                                      OpKill
                                              %57 = OpLabel 
                                        f32_3 %62 = OpLoad %61 
                                        f32_3 %63 = OpFNegate %62 
                               Uniform f32_3* %65 = OpAccessChain %32 %50 
                                        f32_3 %66 = OpLoad %65 
                                        f32_3 %67 = OpFAdd %63 %66 
                                        f32_4 %68 = OpLoad %59 
                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 6 3 
                                                      OpStore %59 %69 
                                 Uniform f32* %73 = OpAccessChain %32 %71 %50 %72 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %70 %40 
                                                      OpStore %75 %74 
                                 Uniform f32* %76 = OpAccessChain %32 %71 %51 %72 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %79 = OpAccessChain %70 %78 
                                                      OpStore %79 %77 
                                 Uniform f32* %81 = OpAccessChain %32 %71 %80 %72 
                                          f32 %82 = OpLoad %81 
                                 Private f32* %83 = OpAccessChain %70 %72 
                                                      OpStore %83 %82 
                                        f32_4 %84 = OpLoad %59 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_4 %86 = OpLoad %70 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                          f32 %88 = OpDot %85 %87 
                                 Private f32* %89 = OpAccessChain %59 %40 
                                                      OpStore %89 %88 
                                        f32_3 %92 = OpLoad %61 
                               Uniform f32_4* %95 = OpAccessChain %32 %93 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFNegate %97 
                                        f32_3 %99 = OpFAdd %92 %98 
                                                      OpStore %91 %99 
                                       f32_3 %100 = OpLoad %91 
                                       f32_3 %101 = OpLoad %91 
                                         f32 %102 = OpDot %100 %101 
                                Private f32* %103 = OpAccessChain %91 %40 
                                                      OpStore %103 %102 
                                Private f32* %104 = OpAccessChain %91 %40 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpExtInst %1 31 %105 
                                Private f32* %107 = OpAccessChain %91 %40 
                                                      OpStore %107 %106 
                                Private f32* %108 = OpAccessChain %59 %40 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                Private f32* %111 = OpAccessChain %91 %40 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFAdd %110 %112 
                                Private f32* %114 = OpAccessChain %91 %40 
                                                      OpStore %114 %113 
                                Uniform f32* %115 = OpAccessChain %32 %93 %22 
                                         f32 %116 = OpLoad %115 
                                Private f32* %117 = OpAccessChain %91 %40 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFMul %116 %118 
                                Private f32* %120 = OpAccessChain %59 %40 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %119 %121 
                                Private f32* %123 = OpAccessChain %59 %40 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %59 %40 
                                         f32 %125 = OpLoad %124 
                                Uniform f32* %126 = OpAccessChain %32 %80 %72 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %32 %80 %22 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFAdd %128 %130 
                                Private f32* %132 = OpAccessChain %59 %40 
                                                      OpStore %132 %131 
                                Private f32* %133 = OpAccessChain %59 %40 
                                         f32 %134 = OpLoad %133 
                                         f32 %136 = OpExtInst %1 43 %134 %47 %135 
                                Private f32* %137 = OpAccessChain %59 %40 
                                                      OpStore %137 %136 
                                Uniform f32* %140 = OpAccessChain %32 %139 %40 
                                         f32 %141 = OpLoad %140 
                                        bool %142 = OpFOrdEqual %141 %135 
                                                      OpStore %138 %142 
                                                      OpSelectionMerge %145 None 
                                                      OpBranchConditional %143 %144 %145 
                                             %144 = OpLabel 
                                        bool %146 = OpLoad %138 
                                                      OpSelectionMerge %148 None 
                                                      OpBranchConditional %146 %147 %148 
                                             %147 = OpLabel 
                                                      OpBranch %148 
                                             %148 = OpLabel 
                                                      OpBranch %145 
                                             %145 = OpLabel 
                                                      OpSelectionMerge %151 None 
                                                      OpBranchConditional %149 %150 %254 
                                             %150 = OpLabel 
                                Uniform f32* %153 = OpAccessChain %32 %139 %78 
                                         f32 %154 = OpLoad %153 
                                        bool %155 = OpFOrdEqual %154 %135 
                                                      OpStore %152 %155 
                                       f32_3 %156 = OpLoad %61 
                                       f32_3 %157 = OpVectorShuffle %156 %156 1 1 1 
                              Uniform f32_4* %159 = OpAccessChain %32 %158 %51 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFMul %157 %161 
                                       f32_4 %163 = OpLoad %70 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %70 %164 
                              Uniform f32_4* %165 = OpAccessChain %32 %158 %50 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpLoad %61 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 0 0 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_4 %171 = OpLoad %70 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %173 = OpFAdd %170 %172 
                                       f32_4 %174 = OpLoad %70 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                                      OpStore %70 %175 
                              Uniform f32_4* %176 = OpAccessChain %32 %158 %80 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpLoad %61 
                                       f32_3 %180 = OpVectorShuffle %179 %179 2 2 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_4 %182 = OpLoad %70 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFAdd %181 %183 
                                       f32_4 %185 = OpLoad %70 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
                                                      OpStore %70 %186 
                                       f32_4 %187 = OpLoad %70 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                              Uniform f32_4* %189 = OpAccessChain %32 %158 %93 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFAdd %188 %191 
                                       f32_4 %193 = OpLoad %70 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %70 %194 
                                        bool %197 = OpLoad %152 
                                                      OpSelectionMerge %199 None 
                                                      OpBranchConditional %197 %198 %202 
                                             %198 = OpLabel 
                                       f32_4 %200 = OpLoad %70 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                                      OpStore %196 %201 
                                                      OpBranch %199 
                                             %202 = OpLabel 
                                       f32_3 %203 = OpLoad %61 
                                                      OpStore %196 %203 
                                                      OpBranch %199 
                                             %199 = OpLabel 
                                       f32_3 %204 = OpLoad %196 
                                       f32_4 %205 = OpLoad %70 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 6 3 
                                                      OpStore %70 %206 
                                       f32_4 %207 = OpLoad %70 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                              Uniform f32_3* %210 = OpAccessChain %32 %209 
                                       f32_3 %211 = OpLoad %210 
                                       f32_3 %212 = OpFNegate %211 
                                       f32_3 %213 = OpFAdd %208 %212 
                                       f32_4 %214 = OpLoad %70 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 6 3 
                                                      OpStore %70 %215 
                                       f32_4 %217 = OpLoad %70 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                              Uniform f32_3* %220 = OpAccessChain %32 %219 
                                       f32_3 %221 = OpLoad %220 
                                       f32_3 %222 = OpFMul %218 %221 
                                       f32_4 %223 = OpLoad %216 
                                       f32_4 %224 = OpVectorShuffle %223 %222 0 4 5 6 
                                                      OpStore %216 %224 
                                Private f32* %227 = OpAccessChain %216 %78 
                                         f32 %228 = OpLoad %227 
                                         f32 %230 = OpFMul %228 %229 
                                         f32 %232 = OpFAdd %230 %231 
                                Private f32* %233 = OpAccessChain %226 %40 
                                                      OpStore %233 %232 
                                Uniform f32* %235 = OpAccessChain %32 %139 %72 
                                         f32 %236 = OpLoad %235 
                                         f32 %238 = OpFMul %236 %237 
                                         f32 %239 = OpFAdd %238 %231 
                                                      OpStore %234 %239 
                                         f32 %240 = OpLoad %234 
                                Private f32* %241 = OpAccessChain %226 %40 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpExtInst %1 40 %240 %242 
                                Private f32* %244 = OpAccessChain %216 %40 
                                                      OpStore %244 %243 
                  read_only Texture3DSampled %249 = OpLoad %248 
                                       f32_4 %250 = OpLoad %216 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 2 3 
                                       f32_4 %252 = OpImageSampleImplicitLod %249 %251 
                                                      OpStore %216 %252 
                                       f32_4 %253 = OpLoad %216 
                                                      OpStore %20 %253 
                                                      OpBranch %151 
                                             %254 = OpLabel 
                                Private f32* %255 = OpAccessChain %20 %40 
                                                      OpStore %255 %135 
                                Private f32* %256 = OpAccessChain %20 %78 
                                                      OpStore %256 %135 
                                Private f32* %257 = OpAccessChain %20 %72 
                                                      OpStore %257 %135 
                                Private f32* %258 = OpAccessChain %20 %22 
                                                      OpStore %258 %135 
                                                      OpBranch %151 
                                             %151 = OpLabel 
                                       f32_4 %260 = OpLoad %20 
                              Uniform f32_4* %261 = OpAccessChain %32 %51 
                                       f32_4 %262 = OpLoad %261 
                                         f32 %263 = OpDot %260 %262 
                                Private f32* %264 = OpAccessChain %259 %40 
                                                      OpStore %264 %263 
                                Private f32* %265 = OpAccessChain %259 %40 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpExtInst %1 43 %266 %47 %135 
                                Private f32* %268 = OpAccessChain %259 %40 
                                                      OpStore %268 %267 
                                       f32_4 %271 = OpLoad %270 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
                                       f32_4 %273 = OpLoad %270 
                                       f32_2 %274 = OpVectorShuffle %273 %273 3 3 
                                       f32_2 %275 = OpFDiv %272 %274 
                                                      OpStore %226 %275 
                  read_only Texture2DSampled %278 = OpLoad %277 
                                       f32_2 %279 = OpLoad %226 
                                       f32_4 %280 = OpImageSampleImplicitLod %278 %279 
                                         f32 %281 = OpCompositeExtract %280 0 
                                                      OpStore %276 %281 
                                Private f32* %283 = OpAccessChain %59 %40 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpLoad %276 
                                         f32 %286 = OpFAdd %284 %285 
                                Private f32* %287 = OpAccessChain %282 %40 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %282 %40 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpExtInst %1 43 %289 %47 %135 
                                Private f32* %291 = OpAccessChain %282 %40 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %282 %40 
                                         f32 %293 = OpLoad %292 
                                Private f32* %294 = OpAccessChain %259 %40 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 37 %293 %295 
                                Private f32* %297 = OpAccessChain %259 %40 
                                                      OpStore %297 %296 
                                        bool %300 = OpLoad %138 
                                                      OpSelectionMerge %302 None 
                                                      OpBranchConditional %300 %301 %305 
                                             %301 = OpLabel 
                                Private f32* %303 = OpAccessChain %259 %40 
                                         f32 %304 = OpLoad %303 
                                                      OpStore %299 %304 
                                                      OpBranch %302 
                                             %305 = OpLabel 
                                Private f32* %306 = OpAccessChain %282 %40 
                                         f32 %307 = OpLoad %306 
                                                      OpStore %299 %307 
                                                      OpBranch %302 
                                             %302 = OpLabel 
                                         f32 %308 = OpLoad %299 
                                Private f32* %309 = OpAccessChain %259 %40 
                                                      OpStore %309 %308 
                                       f32_4 %310 = OpLoad %9 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                              Uniform f32_4* %313 = OpAccessChain %32 %312 
                                       f32_4 %314 = OpLoad %313 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                       f32_3 %316 = OpFMul %311 %315 
                                                      OpStore %282 %316 
                                       f32_3 %317 = OpLoad %259 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 0 0 
                                       f32_3 %319 = OpLoad %282 
                                       f32_3 %320 = OpFMul %318 %319 
                                                      OpStore %259 %320 
                                       f32_4 %321 = OpLoad %9 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_3 %324 = OpLoad %323 
                                       f32_3 %325 = OpFMul %322 %324 
                                       f32_3 %326 = OpLoad %259 
                                       f32_3 %327 = OpFAdd %325 %326 
                                                      OpStore %259 %327 
                                Private f32* %330 = OpAccessChain %9 %22 
                                         f32 %331 = OpLoad %330 
                                 Output f32* %333 = OpAccessChain %329 %22 
                                                      OpStore %333 %331 
                                Private f32* %335 = OpAccessChain %259 %78 
                                         f32 %336 = OpLoad %335 
                                Private f32* %337 = OpAccessChain %259 %72 
                                         f32 %338 = OpLoad %337 
                                        bool %339 = OpFOrdGreaterThanEqual %336 %338 
                                                      OpStore %334 %339 
                                        bool %342 = OpLoad %334 
                                                      OpSelectionMerge %344 None 
                                                      OpBranchConditional %342 %343 %345 
                                             %343 = OpLabel 
                                                      OpStore %341 %135 
                                                      OpBranch %344 
                                             %345 = OpLabel 
                                                      OpStore %341 %47 
                                                      OpBranch %344 
                                             %344 = OpLabel 
                                         f32 %346 = OpLoad %341 
                                                      OpStore %340 %346 
                                       f32_3 %348 = OpLoad %259 
                                       f32_2 %349 = OpVectorShuffle %348 %348 2 1 
                                       f32_2 %350 = OpFNegate %349 
                                       f32_3 %351 = OpLoad %259 
                                       f32_2 %352 = OpVectorShuffle %351 %351 1 2 
                                       f32_2 %353 = OpFAdd %350 %352 
                                                      OpStore %347 %353 
                                Private f32* %354 = OpAccessChain %226 %40 
                                                      OpStore %354 %135 
                                Private f32* %356 = OpAccessChain %226 %78 
                                                      OpStore %356 %355 
                                         f32 %357 = OpLoad %340 
                                       f32_2 %358 = OpCompositeConstruct %357 %357 
                                       f32_2 %359 = OpLoad %347 
                                       f32_2 %360 = OpFMul %358 %359 
                                       f32_3 %361 = OpLoad %259 
                                       f32_2 %362 = OpVectorShuffle %361 %361 2 1 
                                       f32_2 %363 = OpFAdd %360 %362 
                                       f32_4 %364 = OpLoad %216 
                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 2 3 
                                                      OpStore %216 %365 
                                         f32 %366 = OpLoad %340 
                                       f32_2 %367 = OpCompositeConstruct %366 %366 
                                       f32_2 %368 = OpLoad %226 
                                       f32_2 %369 = OpFMul %367 %368 
                                       f32_2 %372 = OpFAdd %369 %371 
                                       f32_4 %373 = OpLoad %216 
                                       f32_4 %374 = OpVectorShuffle %373 %372 0 1 4 5 
                                                      OpStore %216 %374 
                                Private f32* %375 = OpAccessChain %259 %40 
                                         f32 %376 = OpLoad %375 
                                Private f32* %377 = OpAccessChain %216 %40 
                                         f32 %378 = OpLoad %377 
                                        bool %379 = OpFOrdGreaterThanEqual %376 %378 
                                                      OpStore %334 %379 
                                        bool %381 = OpLoad %334 
                                                      OpSelectionMerge %383 None 
                                                      OpBranchConditional %381 %382 %384 
                                             %382 = OpLabel 
                                                      OpStore %380 %135 
                                                      OpBranch %383 
                                             %384 = OpLabel 
                                                      OpStore %380 %47 
                                                      OpBranch %383 
                                             %383 = OpLabel 
                                         f32 %385 = OpLoad %380 
                                                      OpStore %340 %385 
                                       f32_4 %386 = OpLoad %216 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 3 
                                       f32_3 %388 = OpFNegate %387 
                                       f32_4 %389 = OpLoad %59 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 6 3 
                                                      OpStore %59 %390 
                                Private f32* %391 = OpAccessChain %259 %40 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFNegate %392 
                                Private f32* %394 = OpAccessChain %59 %22 
                                                      OpStore %394 %393 
                                Private f32* %395 = OpAccessChain %59 %40 
                                         f32 %396 = OpLoad %395 
                                Private f32* %397 = OpAccessChain %259 %40 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFAdd %396 %398 
                                Private f32* %400 = OpAccessChain %70 %40 
                                                      OpStore %400 %399 
                                       f32_4 %401 = OpLoad %216 
                                       f32_3 %402 = OpVectorShuffle %401 %401 1 2 0 
                                       f32_4 %403 = OpLoad %59 
                                       f32_3 %404 = OpVectorShuffle %403 %403 1 2 3 
                                       f32_3 %405 = OpFAdd %402 %404 
                                       f32_4 %406 = OpLoad %70 
                                       f32_4 %407 = OpVectorShuffle %406 %405 0 4 5 6 
                                                      OpStore %70 %407 
                                         f32 %408 = OpLoad %340 
                                       f32_3 %409 = OpCompositeConstruct %408 %408 %408 
                                       f32_4 %410 = OpLoad %70 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                       f32_3 %412 = OpFMul %409 %411 
                                       f32_4 %413 = OpLoad %216 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 3 
                                       f32_3 %415 = OpFAdd %412 %414 
                                       f32_4 %416 = OpLoad %59 
                                       f32_4 %417 = OpVectorShuffle %416 %415 4 5 6 3 
                                                      OpStore %59 %417 
                                         f32 %418 = OpLoad %340 
                                Private f32* %419 = OpAccessChain %70 %22 
                                         f32 %420 = OpLoad %419 
                                         f32 %421 = OpFMul %418 %420 
                                Private f32* %422 = OpAccessChain %259 %40 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFAdd %421 %423 
                                                      OpStore %340 %424 
                                Private f32* %425 = OpAccessChain %59 %78 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpLoad %340 
                                         f32 %428 = OpExtInst %1 37 %426 %427 
                                                      OpStore %234 %428 
                                         f32 %429 = OpLoad %234 
                                         f32 %430 = OpFNegate %429 
                                Private f32* %431 = OpAccessChain %59 %40 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpFAdd %430 %432 
                                                      OpStore %234 %433 
                                Private f32* %434 = OpAccessChain %59 %78 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpFNegate %435 
                                         f32 %437 = OpLoad %340 
                                         f32 %438 = OpFAdd %436 %437 
                                                      OpStore %340 %438 
                                         f32 %439 = OpLoad %234 
                                         f32 %441 = OpFMul %439 %440 
                                         f32 %443 = OpFAdd %441 %442 
                                Private f32* %444 = OpAccessChain %91 %40 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %340 
                                Private f32* %446 = OpAccessChain %91 %40 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFDiv %445 %447 
                                                      OpStore %340 %448 
                                         f32 %449 = OpLoad %340 
                                Private f32* %450 = OpAccessChain %59 %72 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFAdd %449 %451 
                                                      OpStore %340 %452 
                                Private f32* %453 = OpAccessChain %59 %40 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpFAdd %454 %442 
                                Private f32* %456 = OpAccessChain %91 %40 
                                                      OpStore %456 %455 
                                         f32 %457 = OpLoad %234 
                                Private f32* %458 = OpAccessChain %91 %40 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFDiv %457 %459 
                                Private f32* %461 = OpAccessChain %91 %40 
                                                      OpStore %461 %460 
                                Private f32* %462 = OpAccessChain %9 %78 
                                         f32 %463 = OpLoad %462 
                                Private f32* %464 = OpAccessChain %9 %72 
                                         f32 %465 = OpLoad %464 
                                        bool %466 = OpFOrdGreaterThanEqual %463 %465 
                                                      OpStore %152 %466 
                                        bool %468 = OpLoad %152 
                                                      OpSelectionMerge %470 None 
                                                      OpBranchConditional %468 %469 %471 
                                             %469 = OpLabel 
                                                      OpStore %467 %135 
                                                      OpBranch %470 
                                             %471 = OpLabel 
                                                      OpStore %467 %47 
                                                      OpBranch %470 
                                             %470 = OpLabel 
                                         f32 %472 = OpLoad %467 
                                Private f32* %473 = OpAccessChain %226 %40 
                                                      OpStore %473 %472 
                                Private f32* %475 = OpAccessChain %9 %72 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFNegate %476 
                                Private f32* %478 = OpAccessChain %9 %78 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFAdd %477 %479 
                                                      OpStore %474 %480 
                                Private f32* %482 = OpAccessChain %226 %40 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpLoad %474 
                                         f32 %485 = OpFMul %483 %484 
                                Private f32* %486 = OpAccessChain %9 %72 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFAdd %485 %487 
                                Private f32* %489 = OpAccessChain %481 %40 
                                                      OpStore %489 %488 
                                Private f32* %491 = OpAccessChain %9 %40 
                                         f32 %492 = OpLoad %491 
                                Private f32* %493 = OpAccessChain %481 %40 
                                         f32 %494 = OpLoad %493 
                                        bool %495 = OpFOrdGreaterThanEqual %492 %494 
                                                      OpStore %490 %495 
                                        bool %498 = OpLoad %490 
                                                      OpSelectionMerge %500 None 
                                                      OpBranchConditional %498 %499 %501 
                                             %499 = OpLabel 
                                                      OpStore %497 %135 
                                                      OpBranch %500 
                                             %501 = OpLabel 
                                                      OpStore %497 %47 
                                                      OpBranch %500 
                                             %500 = OpLabel 
                                         f32 %502 = OpLoad %497 
                                                      OpStore %496 %502 
                                Private f32* %504 = OpAccessChain %481 %40 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpFNegate %505 
                                Private f32* %507 = OpAccessChain %9 %40 
                                         f32 %508 = OpLoad %507 
                                         f32 %509 = OpFAdd %506 %508 
                                Private f32* %510 = OpAccessChain %503 %40 
                                                      OpStore %510 %509 
                                         f32 %511 = OpLoad %496 
                                Private f32* %512 = OpAccessChain %503 %40 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFMul %511 %513 
                                Private f32* %515 = OpAccessChain %481 %40 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFAdd %514 %516 
                                Private f32* %518 = OpAccessChain %503 %40 
                                                      OpStore %518 %517 
                                Private f32* %519 = OpAccessChain %503 %40 
                                         f32 %520 = OpLoad %519 
                                Uniform f32* %522 = OpAccessChain %32 %521 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %520 %523 
                                Private f32* %525 = OpAccessChain %503 %40 
                                                      OpStore %525 %524 
                                Private f32* %526 = OpAccessChain %503 %40 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %59 %40 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpExtInst %1 37 %527 %529 
                                Private f32* %531 = OpAccessChain %503 %40 
                                                      OpStore %531 %530 
                                         f32 %532 = OpLoad %340 
                                       f32_3 %533 = OpCompositeConstruct %532 %532 %532 
                                       f32_3 %534 = OpExtInst %1 4 %533 
                                       f32_3 %537 = OpFAdd %534 %536 
                                                      OpStore %481 %537 
                                       f32_3 %538 = OpLoad %481 
                                       f32_3 %539 = OpExtInst %1 10 %538 
                                                      OpStore %481 %539 
                                       f32_3 %540 = OpLoad %481 
                                       f32_3 %542 = OpFMul %540 %541 
                                       f32_3 %545 = OpFAdd %542 %544 
                                                      OpStore %481 %545 
                                       f32_3 %546 = OpLoad %481 
                                       f32_3 %547 = OpExtInst %1 4 %546 
                                       f32_3 %549 = OpFAdd %547 %548 
                                                      OpStore %481 %549 
                                       f32_3 %550 = OpLoad %481 
                                       f32_3 %551 = OpCompositeConstruct %47 %47 %47 
                                       f32_3 %552 = OpCompositeConstruct %135 %135 %135 
                                       f32_3 %553 = OpExtInst %1 43 %550 %551 %552 
                                                      OpStore %481 %553 
                                       f32_3 %554 = OpLoad %481 
                                       f32_3 %555 = OpFAdd %554 %548 
                                                      OpStore %481 %555 
                                       f32_3 %556 = OpLoad %91 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 0 0 
                                       f32_3 %558 = OpLoad %481 
                                       f32_3 %559 = OpFMul %557 %558 
                                       f32_3 %561 = OpFAdd %559 %560 
                                                      OpStore %481 %561 
                                       f32_3 %562 = OpLoad %481 
                                       f32_3 %563 = OpLoad %503 
                                       f32_3 %564 = OpVectorShuffle %563 %563 0 0 0 
                                       f32_3 %565 = OpFMul %562 %564 
                                                      OpStore %503 %565 
                                       f32_3 %566 = OpLoad %503 
                                       f32_4 %567 = OpLoad %329 
                                       f32_4 %568 = OpVectorShuffle %567 %566 4 5 6 3 
                                                      OpStore %329 %568 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  Blend One One, One One
  ColorMask RGB 0
  ZWrite Off
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 84736
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb16 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb16){
        u_xlatb16 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat16 = u_xlat2.y * 0.25 + 0.75;
        u_xlat7 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat16, u_xlat7);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat16 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xx);
    u_xlat1.x = u_xlat16 * u_xlat10_2.w;
    u_xlat6.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat2.xyw = u_xlat1.xxx * u_xlat6.yzx;
    u_xlatb6 = u_xlat2.x>=u_xlat2.y;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat3.xy = u_xlat2.yx;
    u_xlat3.z = float(-1.0);
    u_xlat3.w = float(0.666666687);
    u_xlat4.xy = u_xlat6.yz * u_xlat1.xx + (-u_xlat3.xy);
    u_xlat4.z = float(1.0);
    u_xlat4.w = float(-1.0);
    u_xlat1 = u_xlat6.xxxx * u_xlat4 + u_xlat3;
    u_xlatb3 = u_xlat2.w>=u_xlat1.x;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat1.xyw;
    u_xlat1.xyw = u_xlat2.wyx;
    u_xlat1 = (-u_xlat2) + u_xlat1;
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + u_xlat2;
    u_xlat2.x = min(u_xlat1.y, u_xlat1.w);
    u_xlat2.x = u_xlat1.x + (-u_xlat2.x);
    u_xlat6.x = (-u_xlat1.y) + u_xlat1.w;
    u_xlat16 = u_xlat2.x * 6.0 + 1.00000001e-010;
    u_xlat6.x = u_xlat6.x / u_xlat16;
    u_xlat6.x = u_xlat6.x + u_xlat1.z;
    u_xlat11 = u_xlat1.x + 1.00000001e-010;
    u_xlat11 = u_xlat2.x / u_xlat11;
    u_xlatb16 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat16_5 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat5 = u_xlat16 * u_xlat16_5 + u_xlat10_0.z;
    u_xlatb10 = u_xlat10_0.x>=u_xlat5;
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat5) + u_xlat10_0.x;
    u_xlat0 = u_xlat10 * u_xlat0 + u_xlat5;
    u_xlat0 = u_xlat0 * _MaxValue;
    u_xlat0 = min(u_xlat0, u_xlat1.x);
    u_xlat1.xyw = abs(u_xlat6.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyw = fract(u_xlat1.xyw);
    u_xlat1.xyw = u_xlat1.xyw * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyw = abs(u_xlat1.xyw) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyw = clamp(u_xlat1.xyw, 0.0, 1.0);
    u_xlat1.xyw = u_xlat1.xyw + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyw + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %93 %94 %107 %138 %144 %147 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %107 Location 107 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %147 Location 147 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %89 = OpTypePointer Output %7 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                                Output f32_2* %93 = OpVariable Output 
                                 Input f32_4* %94 = OpVariable Input 
                                             %105 = OpTypeVector %6 3 
                                             %106 = OpTypePointer Input %105 
                                Input f32_3* %107 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                                             %114 = OpTypePointer Private %6 
                                         u32 %127 = OpConstant 2 
                                Private f32* %129 = OpVariable Private 
                                             %137 = OpTypePointer Output %105 
                               Output f32_3* %138 = OpVariable Output 
                               Output f32_3* %144 = OpVariable Output 
                               Output f32_4* %147 = OpVariable Output 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %36 %24 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %36 %23 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %36 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %82 = OpAccessChain %21 %36 %46 
                                        f32_4 %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %44 
                                        f32_4 %85 = OpVectorShuffle %84 %84 3 3 3 3 
                                        f32_4 %86 = OpFMul %83 %85 
                                        f32_4 %87 = OpLoad %57 
                                        f32_4 %88 = OpFAdd %86 %87 
                                Output f32_4* %90 = OpAccessChain %81 %23 
                                                      OpStore %90 %88 
                                        f32_4 %95 = OpLoad %94 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                               Uniform f32_4* %97 = OpAccessChain %21 %46 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_2 %100 = OpFMul %96 %99 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 2 3 
                                       f32_2 %104 = OpFAdd %100 %103 
                                                      OpStore %93 %104 
                                       f32_3 %108 = OpLoad %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %23 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %115 = OpAccessChain %44 %113 
                                                      OpStore %115 %112 
                                       f32_3 %116 = OpLoad %107 
                              Uniform f32_4* %117 = OpAccessChain %21 %24 %24 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %116 %119 
                                Private f32* %121 = OpAccessChain %44 %77 
                                                      OpStore %121 %120 
                                       f32_3 %122 = OpLoad %107 
                              Uniform f32_4* %123 = OpAccessChain %21 %24 %36 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %128 = OpAccessChain %44 %127 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %44 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %44 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %136 = OpExtInst %1 32 %135 
                                                      OpStore %129 %136 
                                         f32 %139 = OpLoad %129 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %140 %142 
                                                      OpStore %138 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore %144 %146 
                                       f32_4 %148 = OpLoad %9 
                                                      OpStore %147 %148 
                                 Output f32* %150 = OpAccessChain %81 %23 %77 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %81 %23 %77 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 541
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %61 %538 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 RelaxedPrecision 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 RelaxedPrecision 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpMemberDecorate %30 8 RelaxedPrecision 
                                                      OpMemberDecorate %30 8 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %61 Location 61 
                                                      OpDecorate %115 SpecId 115 
                                                      OpDecorate %213 DescriptorSet 213 
                                                      OpDecorate %213 Binding 213 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %241 DescriptorSet 241 
                                                      OpDecorate %241 Binding 241 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %538 RelaxedPrecision 
                                                      OpDecorate %538 Location 538 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeArray %7 %26 
                                              %30 = OpTypeStruct %7 %7 %27 %28 %28 %7 %29 %6 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 8 
                                              %35 = OpTypePointer Uniform %6 
                                          u32 %40 = OpConstant 0 
                                              %42 = OpTypeBool 
                                              %43 = OpTypePointer Private %42 
                                Private bool* %44 = OpVariable Private 
                                          f32 %47 = OpConstant 3.674022E-40 
                                          i32 %50 = OpConstant 0 
                                          i32 %51 = OpConstant 1 
                                          i32 %53 = OpConstant -1 
                               Private f32_4* %59 = OpVariable Private 
                                              %60 = OpTypePointer Input %28 
                                 Input f32_3* %61 = OpVariable Input 
                                          i32 %64 = OpConstant 6 
                                              %65 = OpTypePointer Uniform %7 
                                          i32 %83 = OpConstant 2 
                                          i32 %97 = OpConstant 3 
                               Private bool* %104 = OpVariable Private 
                                         f32 %107 = OpConstant 3.674022E-40 
                                        bool %109 = OpConstantFalse 
                                        bool %115 = OpSpecConstantFalse 
                                         u32 %118 = OpConstant 1 
                              Private f32_4* %122 = OpVariable Private 
                                             %161 = OpTypePointer Function %28 
                                         i32 %175 = OpConstant 4 
                                             %176 = OpTypePointer Uniform %28 
                              Private f32_4* %183 = OpVariable Private 
                                Private f32* %191 = OpVariable Private 
                                         f32 %194 = OpConstant 3.674022E-40 
                                         f32 %196 = OpConstant 3.674022E-40 
                                         u32 %198 = OpConstant 2 
                                         f32 %201 = OpConstant 3.674022E-40 
                                             %210 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %211 = OpTypeSampledImage %210 
                                             %212 = OpTypePointer UniformConstant %211 
 UniformConstant read_only Texture3DSampled* %213 = OpVariable UniformConstant 
                                             %224 = OpTypePointer Private %28 
                              Private f32_3* %225 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %241 = OpVariable UniformConstant 
                                         i32 %256 = OpConstant 5 
                              Private f32_3* %261 = OpVariable Private 
                               Private bool* %266 = OpVariable Private 
                              Private f32_3* %272 = OpVariable Private 
                                             %273 = OpTypePointer Function %6 
                                             %281 = OpTypePointer Private %15 
                              Private f32_2* %282 = OpVariable Private 
                                         f32 %293 = OpConstant 3.674022E-40 
                                         f32 %313 = OpConstant 3.674022E-40 
                                       f32_2 %314 = OpConstantComposite %293 %313 
                              Private f32_4* %339 = OpVariable Private 
                                         f32 %397 = OpConstant 3.674022E-40 
                                         f32 %399 = OpConstant 3.674022E-40 
                               Private bool* %449 = OpVariable Private 
                                Private f32* %461 = OpVariable Private 
                                         i32 %474 = OpConstant 7 
                                         f32 %486 = OpConstant 3.674022E-40 
                                       f32_3 %487 = OpConstantComposite %107 %313 %486 
                                       f32_3 %498 = OpConstantComposite %397 %397 %397 
                                         f32 %500 = OpConstant 3.674022E-40 
                                       f32_3 %501 = OpConstantComposite %500 %500 %500 
                                       f32_3 %508 = OpConstantComposite %293 %293 %293 
                                       f32_3 %529 = OpConstantComposite %107 %107 %107 
                                             %537 = OpTypePointer Output %7 
                               Output f32_4* %538 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %162 = OpVariable Function 
                               Function f32* %274 = OpVariable Function 
                               Function f32* %323 = OpVariable Function 
                               Function f32* %429 = OpVariable Function 
                               Function f32* %454 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                 Private f32* %41 = OpAccessChain %20 %40 
                                                      OpStore %41 %39 
                                 Private f32* %45 = OpAccessChain %20 %40 
                                          f32 %46 = OpLoad %45 
                                         bool %48 = OpFOrdLessThan %46 %47 
                                                      OpStore %44 %48 
                                         bool %49 = OpLoad %44 
                                          i32 %52 = OpSelect %49 %51 %50 
                                          i32 %54 = OpIMul %52 %53 
                                         bool %55 = OpINotEqual %54 %50 
                                                      OpSelectionMerge %57 None 
                                                      OpBranchConditional %55 %56 %57 
                                              %56 = OpLabel 
                                                      OpKill
                                              %57 = OpLabel 
                                        f32_3 %62 = OpLoad %61 
                                        f32_3 %63 = OpVectorShuffle %62 %62 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %32 %64 %51 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_3 %69 = OpFMul %63 %68 
                                        f32_4 %70 = OpLoad %59 
                                        f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                                      OpStore %59 %71 
                               Uniform f32_4* %72 = OpAccessChain %32 %64 %50 
                                        f32_4 %73 = OpLoad %72 
                                        f32_3 %74 = OpVectorShuffle %73 %73 0 1 2 
                                        f32_3 %75 = OpLoad %61 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 0 0 
                                        f32_3 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %59 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFAdd %77 %79 
                                        f32_4 %81 = OpLoad %59 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %59 %82 
                               Uniform f32_4* %84 = OpAccessChain %32 %64 %83 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_3 %87 = OpLoad %61 
                                        f32_3 %88 = OpVectorShuffle %87 %87 2 2 2 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %59 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                        f32_4 %93 = OpLoad %59 
                                        f32_4 %94 = OpVectorShuffle %93 %92 4 5 6 3 
                                                      OpStore %59 %94 
                                        f32_4 %95 = OpLoad %59 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                               Uniform f32_4* %98 = OpAccessChain %32 %64 %97 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_3 %101 = OpFAdd %96 %100 
                                       f32_4 %102 = OpLoad %59 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %59 %103 
                                Uniform f32* %105 = OpAccessChain %32 %51 %40 
                                         f32 %106 = OpLoad %105 
                                        bool %108 = OpFOrdEqual %106 %107 
                                                      OpStore %104 %108 
                                                      OpSelectionMerge %111 None 
                                                      OpBranchConditional %109 %110 %111 
                                             %110 = OpLabel 
                                        bool %112 = OpLoad %104 
                                                      OpSelectionMerge %114 None 
                                                      OpBranchConditional %112 %113 %114 
                                             %113 = OpLabel 
                                                      OpBranch %114 
                                             %114 = OpLabel 
                                                      OpBranch %111 
                                             %111 = OpLabel 
                                                      OpSelectionMerge %117 None 
                                                      OpBranchConditional %115 %116 %219 
                                             %116 = OpLabel 
                                Uniform f32* %119 = OpAccessChain %32 %51 %118 
                                         f32 %120 = OpLoad %119 
                                        bool %121 = OpFOrdEqual %120 %107 
                                                      OpStore %104 %121 
                                       f32_3 %123 = OpLoad %61 
                                       f32_3 %124 = OpVectorShuffle %123 %123 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %32 %83 %51 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFMul %124 %127 
                                       f32_4 %129 = OpLoad %122 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %122 %130 
                              Uniform f32_4* %131 = OpAccessChain %32 %83 %50 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpLoad %61 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 0 0 
                                       f32_3 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %122 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpFAdd %136 %138 
                                       f32_4 %140 = OpLoad %122 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                      OpStore %122 %141 
                              Uniform f32_4* %142 = OpAccessChain %32 %83 %83 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpLoad %61 
                                       f32_3 %146 = OpVectorShuffle %145 %145 2 2 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %122 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFAdd %147 %149 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %153 = OpLoad %122 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                              Uniform f32_4* %155 = OpAccessChain %32 %83 %97 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFAdd %154 %157 
                                       f32_4 %159 = OpLoad %122 
                                       f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                                      OpStore %122 %160 
                                        bool %163 = OpLoad %104 
                                                      OpSelectionMerge %165 None 
                                                      OpBranchConditional %163 %164 %168 
                                             %164 = OpLabel 
                                       f32_4 %166 = OpLoad %122 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                                      OpStore %162 %167 
                                                      OpBranch %165 
                                             %168 = OpLabel 
                                       f32_3 %169 = OpLoad %61 
                                                      OpStore %162 %169 
                                                      OpBranch %165 
                                             %165 = OpLabel 
                                       f32_3 %170 = OpLoad %162 
                                       f32_4 %171 = OpLoad %122 
                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
                                                      OpStore %122 %172 
                                       f32_4 %173 = OpLoad %122 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_3* %177 = OpAccessChain %32 %175 
                                       f32_3 %178 = OpLoad %177 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %174 %179 
                                       f32_4 %181 = OpLoad %122 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %122 %182 
                                       f32_4 %184 = OpLoad %122 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                              Uniform f32_3* %186 = OpAccessChain %32 %97 
                                       f32_3 %187 = OpLoad %186 
                                       f32_3 %188 = OpFMul %185 %187 
                                       f32_4 %189 = OpLoad %183 
                                       f32_4 %190 = OpVectorShuffle %189 %188 0 4 5 6 
                                                      OpStore %183 %190 
                                Private f32* %192 = OpAccessChain %183 %118 
                                         f32 %193 = OpLoad %192 
                                         f32 %195 = OpFMul %193 %194 
                                         f32 %197 = OpFAdd %195 %196 
                                                      OpStore %191 %197 
                                Uniform f32* %199 = OpAccessChain %32 %51 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %202 = OpFMul %200 %201 
                                         f32 %203 = OpFAdd %202 %196 
                                Private f32* %204 = OpAccessChain %122 %40 
                                                      OpStore %204 %203 
                                         f32 %205 = OpLoad %191 
                                Private f32* %206 = OpAccessChain %122 %40 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpExtInst %1 40 %205 %207 
                                Private f32* %209 = OpAccessChain %183 %40 
                                                      OpStore %209 %208 
                  read_only Texture3DSampled %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %183 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 2 3 
                                       f32_4 %217 = OpImageSampleImplicitLod %214 %216 
                                                      OpStore %183 %217 
                                       f32_4 %218 = OpLoad %183 
                                                      OpStore %20 %218 
                                                      OpBranch %117 
                                             %219 = OpLabel 
                                Private f32* %220 = OpAccessChain %20 %40 
                                                      OpStore %220 %107 
                                Private f32* %221 = OpAccessChain %20 %118 
                                                      OpStore %221 %107 
                                Private f32* %222 = OpAccessChain %20 %198 
                                                      OpStore %222 %107 
                                Private f32* %223 = OpAccessChain %20 %22 
                                                      OpStore %223 %107 
                                                      OpBranch %117 
                                             %117 = OpLabel 
                                       f32_4 %226 = OpLoad %20 
                              Uniform f32_4* %227 = OpAccessChain %32 %50 
                                       f32_4 %228 = OpLoad %227 
                                         f32 %229 = OpDot %226 %228 
                                Private f32* %230 = OpAccessChain %225 %40 
                                                      OpStore %230 %229 
                                Private f32* %231 = OpAccessChain %225 %40 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpExtInst %1 43 %232 %47 %107 
                                Private f32* %234 = OpAccessChain %225 %40 
                                                      OpStore %234 %233 
                                       f32_4 %235 = OpLoad %59 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                                       f32_4 %237 = OpLoad %59 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                         f32 %239 = OpDot %236 %238 
                                Private f32* %240 = OpAccessChain %59 %40 
                                                      OpStore %240 %239 
                  read_only Texture2DSampled %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %59 
                                       f32_2 %244 = OpVectorShuffle %243 %243 0 0 
                                       f32_4 %245 = OpImageSampleImplicitLod %242 %244 
                                         f32 %246 = OpCompositeExtract %245 3 
                                Private f32* %247 = OpAccessChain %59 %40 
                                                      OpStore %247 %246 
                                Private f32* %248 = OpAccessChain %225 %40 
                                         f32 %249 = OpLoad %248 
                                Private f32* %250 = OpAccessChain %59 %40 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFMul %249 %251 
                                Private f32* %253 = OpAccessChain %59 %40 
                                                      OpStore %253 %252 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                              Uniform f32_4* %257 = OpAccessChain %32 %256 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFMul %255 %259 
                                                      OpStore %225 %260 
                                       f32_4 %262 = OpLoad %59 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpLoad %225 
                                       f32_3 %265 = OpFMul %263 %264 
                                                      OpStore %261 %265 
                                Private f32* %267 = OpAccessChain %261 %118 
                                         f32 %268 = OpLoad %267 
                                Private f32* %269 = OpAccessChain %261 %198 
                                         f32 %270 = OpLoad %269 
                                        bool %271 = OpFOrdGreaterThanEqual %268 %270 
                                                      OpStore %266 %271 
                                        bool %275 = OpLoad %266 
                                                      OpSelectionMerge %277 None 
                                                      OpBranchConditional %275 %276 %278 
                                             %276 = OpLabel 
                                                      OpStore %274 %107 
                                                      OpBranch %277 
                                             %278 = OpLabel 
                                                      OpStore %274 %47 
                                                      OpBranch %277 
                                             %277 = OpLabel 
                                         f32 %279 = OpLoad %274 
                                Private f32* %280 = OpAccessChain %272 %40 
                                                      OpStore %280 %279 
                                       f32_3 %283 = OpLoad %225 
                                       f32_2 %284 = OpVectorShuffle %283 %283 1 2 
                                       f32_4 %285 = OpLoad %59 
                                       f32_2 %286 = OpVectorShuffle %285 %285 0 0 
                                       f32_2 %287 = OpFMul %284 %286 
                                       f32_3 %288 = OpLoad %261 
                                       f32_2 %289 = OpVectorShuffle %288 %288 2 1 
                                       f32_2 %290 = OpFNegate %289 
                                       f32_2 %291 = OpFAdd %287 %290 
                                                      OpStore %282 %291 
                                Private f32* %292 = OpAccessChain %122 %40 
                                                      OpStore %292 %107 
                                Private f32* %294 = OpAccessChain %122 %118 
                                                      OpStore %294 %293 
                                       f32_2 %295 = OpLoad %282 
                                       f32_3 %296 = OpLoad %272 
                                       f32_2 %297 = OpVectorShuffle %296 %296 0 0 
                                       f32_2 %298 = OpFMul %295 %297 
                                                      OpStore %282 %298 
                                       f32_3 %299 = OpLoad %225 
                                       f32_2 %300 = OpVectorShuffle %299 %299 2 1 
                                       f32_4 %301 = OpLoad %59 
                                       f32_2 %302 = OpVectorShuffle %301 %301 0 0 
                                       f32_2 %303 = OpFMul %300 %302 
                                       f32_2 %304 = OpLoad %282 
                                       f32_2 %305 = OpFAdd %303 %304 
                                       f32_4 %306 = OpLoad %183 
                                       f32_4 %307 = OpVectorShuffle %306 %305 4 5 2 3 
                                                      OpStore %183 %307 
                                       f32_3 %308 = OpLoad %272 
                                       f32_2 %309 = OpVectorShuffle %308 %308 0 0 
                                       f32_4 %310 = OpLoad %122 
                                       f32_2 %311 = OpVectorShuffle %310 %310 0 1 
                                       f32_2 %312 = OpFMul %309 %311 
                                       f32_2 %315 = OpFAdd %312 %314 
                                       f32_4 %316 = OpLoad %183 
                                       f32_4 %317 = OpVectorShuffle %316 %315 0 1 4 5 
                                                      OpStore %183 %317 
                                Private f32* %318 = OpAccessChain %261 %40 
                                         f32 %319 = OpLoad %318 
                                Private f32* %320 = OpAccessChain %183 %40 
                                         f32 %321 = OpLoad %320 
                                        bool %322 = OpFOrdGreaterThanEqual %319 %321 
                                                      OpStore %266 %322 
                                        bool %324 = OpLoad %266 
                                                      OpSelectionMerge %326 None 
                                                      OpBranchConditional %324 %325 %327 
                                             %325 = OpLabel 
                                                      OpStore %323 %107 
                                                      OpBranch %326 
                                             %327 = OpLabel 
                                                      OpStore %323 %47 
                                                      OpBranch %326 
                                             %326 = OpLabel 
                                         f32 %328 = OpLoad %323 
                                Private f32* %329 = OpAccessChain %272 %40 
                                                      OpStore %329 %328 
                                       f32_4 %330 = OpLoad %183 
                                       f32_3 %331 = OpVectorShuffle %330 %330 0 1 3 
                                       f32_3 %332 = OpFNegate %331 
                                       f32_4 %333 = OpLoad %122 
                                       f32_4 %334 = OpVectorShuffle %333 %332 4 5 6 3 
                                                      OpStore %122 %334 
                                Private f32* %335 = OpAccessChain %261 %40 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpFNegate %336 
                                Private f32* %338 = OpAccessChain %122 %22 
                                                      OpStore %338 %337 
                                Private f32* %340 = OpAccessChain %225 %40 
                                         f32 %341 = OpLoad %340 
                                Private f32* %342 = OpAccessChain %59 %40 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %122 %40 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFAdd %344 %346 
                                Private f32* %348 = OpAccessChain %339 %40 
                                                      OpStore %348 %347 
                                       f32_4 %349 = OpLoad %183 
                                       f32_3 %350 = OpVectorShuffle %349 %349 1 2 0 
                                       f32_4 %351 = OpLoad %122 
                                       f32_3 %352 = OpVectorShuffle %351 %351 1 2 3 
                                       f32_3 %353 = OpFAdd %350 %352 
                                       f32_4 %354 = OpLoad %339 
                                       f32_4 %355 = OpVectorShuffle %354 %353 0 4 5 6 
                                                      OpStore %339 %355 
                                       f32_3 %356 = OpLoad %272 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 0 0 
                                       f32_4 %358 = OpLoad %339 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_3 %360 = OpFMul %357 %359 
                                       f32_4 %361 = OpLoad %183 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 3 
                                       f32_3 %363 = OpFAdd %360 %362 
                                       f32_4 %364 = OpLoad %59 
                                       f32_4 %365 = OpVectorShuffle %364 %363 4 1 5 6 
                                                      OpStore %59 %365 
                                Private f32* %366 = OpAccessChain %272 %40 
                                         f32 %367 = OpLoad %366 
                                Private f32* %368 = OpAccessChain %339 %22 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFMul %367 %369 
                                Private f32* %371 = OpAccessChain %261 %40 
                                         f32 %372 = OpLoad %371 
                                         f32 %373 = OpFAdd %370 %372 
                                Private f32* %374 = OpAccessChain %272 %40 
                                                      OpStore %374 %373 
                                Private f32* %375 = OpAccessChain %59 %198 
                                         f32 %376 = OpLoad %375 
                                Private f32* %377 = OpAccessChain %272 %40 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpExtInst %1 37 %376 %378 
                                Private f32* %380 = OpAccessChain %122 %40 
                                                      OpStore %380 %379 
                                Private f32* %381 = OpAccessChain %59 %40 
                                         f32 %382 = OpLoad %381 
                                Private f32* %383 = OpAccessChain %122 %40 
                                         f32 %384 = OpLoad %383 
                                         f32 %385 = OpFNegate %384 
                                         f32 %386 = OpFAdd %382 %385 
                                Private f32* %387 = OpAccessChain %122 %40 
                                                      OpStore %387 %386 
                                Private f32* %388 = OpAccessChain %59 %198 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                Private f32* %391 = OpAccessChain %272 %40 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFAdd %390 %392 
                                Private f32* %394 = OpAccessChain %272 %40 
                                                      OpStore %394 %393 
                                Private f32* %395 = OpAccessChain %122 %40 
                                         f32 %396 = OpLoad %395 
                                         f32 %398 = OpFMul %396 %397 
                                         f32 %400 = OpFAdd %398 %399 
                                Private f32* %401 = OpAccessChain %282 %40 
                                                      OpStore %401 %400 
                                Private f32* %402 = OpAccessChain %272 %40 
                                         f32 %403 = OpLoad %402 
                                Private f32* %404 = OpAccessChain %282 %40 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFDiv %403 %405 
                                Private f32* %407 = OpAccessChain %272 %40 
                                                      OpStore %407 %406 
                                Private f32* %408 = OpAccessChain %272 %40 
                                         f32 %409 = OpLoad %408 
                                Private f32* %410 = OpAccessChain %59 %22 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpFAdd %409 %411 
                                Private f32* %413 = OpAccessChain %272 %40 
                                                      OpStore %413 %412 
                                Private f32* %414 = OpAccessChain %59 %40 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpFAdd %415 %399 
                                Private f32* %417 = OpAccessChain %282 %40 
                                                      OpStore %417 %416 
                                Private f32* %418 = OpAccessChain %122 %40 
                                         f32 %419 = OpLoad %418 
                                Private f32* %420 = OpAccessChain %282 %40 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFDiv %419 %421 
                                Private f32* %423 = OpAccessChain %282 %40 
                                                      OpStore %423 %422 
                                Private f32* %424 = OpAccessChain %9 %118 
                                         f32 %425 = OpLoad %424 
                                Private f32* %426 = OpAccessChain %9 %198 
                                         f32 %427 = OpLoad %426 
                                        bool %428 = OpFOrdGreaterThanEqual %425 %427 
                                                      OpStore %104 %428 
                                        bool %430 = OpLoad %104 
                                                      OpSelectionMerge %432 None 
                                                      OpBranchConditional %430 %431 %433 
                                             %431 = OpLabel 
                                                      OpStore %429 %107 
                                                      OpBranch %432 
                                             %433 = OpLabel 
                                                      OpStore %429 %47 
                                                      OpBranch %432 
                                             %432 = OpLabel 
                                         f32 %434 = OpLoad %429 
                                                      OpStore %191 %434 
                                Private f32* %435 = OpAccessChain %9 %198 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpFNegate %436 
                                Private f32* %438 = OpAccessChain %9 %118 
                                         f32 %439 = OpLoad %438 
                                         f32 %440 = OpFAdd %437 %439 
                                Private f32* %441 = OpAccessChain %122 %40 
                                                      OpStore %441 %440 
                                         f32 %442 = OpLoad %191 
                                Private f32* %443 = OpAccessChain %122 %40 
                                         f32 %444 = OpLoad %443 
                                         f32 %445 = OpFMul %442 %444 
                                Private f32* %446 = OpAccessChain %9 %198 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFAdd %445 %447 
                                                      OpStore %191 %448 
                                Private f32* %450 = OpAccessChain %9 %40 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpLoad %191 
                                        bool %453 = OpFOrdGreaterThanEqual %451 %452 
                                                      OpStore %449 %453 
                                        bool %455 = OpLoad %449 
                                                      OpSelectionMerge %457 None 
                                                      OpBranchConditional %455 %456 %458 
                                             %456 = OpLabel 
                                                      OpStore %454 %107 
                                                      OpBranch %457 
                                             %458 = OpLabel 
                                                      OpStore %454 %47 
                                                      OpBranch %457 
                                             %457 = OpLabel 
                                         f32 %459 = OpLoad %454 
                                Private f32* %460 = OpAccessChain %122 %40 
                                                      OpStore %460 %459 
                                Private f32* %462 = OpAccessChain %9 %40 
                                         f32 %463 = OpLoad %462 
                                         f32 %464 = OpLoad %191 
                                         f32 %465 = OpFNegate %464 
                                         f32 %466 = OpFAdd %463 %465 
                                                      OpStore %461 %466 
                                Private f32* %467 = OpAccessChain %122 %40 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpLoad %461 
                                         f32 %470 = OpFMul %468 %469 
                                         f32 %471 = OpLoad %191 
                                         f32 %472 = OpFAdd %470 %471 
                                                      OpStore %191 %472 
                                         f32 %473 = OpLoad %191 
                                Uniform f32* %475 = OpAccessChain %32 %474 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFMul %473 %476 
                                                      OpStore %191 %477 
                                         f32 %478 = OpLoad %191 
                                Private f32* %479 = OpAccessChain %59 %40 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpExtInst %1 37 %478 %480 
                                Private f32* %482 = OpAccessChain %59 %40 
                                                      OpStore %482 %481 
                                       f32_3 %483 = OpLoad %272 
                                       f32_3 %484 = OpVectorShuffle %483 %483 0 0 0 
                                       f32_3 %485 = OpExtInst %1 4 %484 
                                       f32_3 %488 = OpFAdd %485 %487 
                                       f32_4 %489 = OpLoad %122 
                                       f32_4 %490 = OpVectorShuffle %489 %488 4 5 6 3 
                                                      OpStore %122 %490 
                                       f32_4 %491 = OpLoad %122 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                       f32_3 %493 = OpExtInst %1 10 %492 
                                       f32_4 %494 = OpLoad %122 
                                       f32_4 %495 = OpVectorShuffle %494 %493 4 5 6 3 
                                                      OpStore %122 %495 
                                       f32_4 %496 = OpLoad %122 
                                       f32_3 %497 = OpVectorShuffle %496 %496 0 1 2 
                                       f32_3 %499 = OpFMul %497 %498 
                                       f32_3 %502 = OpFAdd %499 %501 
                                       f32_4 %503 = OpLoad %122 
                                       f32_4 %504 = OpVectorShuffle %503 %502 4 5 6 3 
                                                      OpStore %122 %504 
                                       f32_4 %505 = OpLoad %122 
                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
                                       f32_3 %507 = OpExtInst %1 4 %506 
                                       f32_3 %509 = OpFAdd %507 %508 
                                       f32_4 %510 = OpLoad %122 
                                       f32_4 %511 = OpVectorShuffle %510 %509 4 5 6 3 
                                                      OpStore %122 %511 
                                       f32_4 %512 = OpLoad %122 
                                       f32_3 %513 = OpVectorShuffle %512 %512 0 1 2 
                                       f32_3 %514 = OpCompositeConstruct %47 %47 %47 
                                       f32_3 %515 = OpCompositeConstruct %107 %107 %107 
                                       f32_3 %516 = OpExtInst %1 43 %513 %514 %515 
                                       f32_4 %517 = OpLoad %122 
                                       f32_4 %518 = OpVectorShuffle %517 %516 4 5 6 3 
                                                      OpStore %122 %518 
                                       f32_4 %519 = OpLoad %122 
                                       f32_3 %520 = OpVectorShuffle %519 %519 0 1 2 
                                       f32_3 %521 = OpFAdd %520 %508 
                                       f32_4 %522 = OpLoad %122 
                                       f32_4 %523 = OpVectorShuffle %522 %521 4 5 6 3 
                                                      OpStore %122 %523 
                                       f32_2 %524 = OpLoad %282 
                                       f32_3 %525 = OpVectorShuffle %524 %524 0 0 0 
                                       f32_4 %526 = OpLoad %122 
                                       f32_3 %527 = OpVectorShuffle %526 %526 0 1 2 
                                       f32_3 %528 = OpFMul %525 %527 
                                       f32_3 %530 = OpFAdd %528 %529 
                                                      OpStore %272 %530 
                                       f32_3 %531 = OpLoad %272 
                                       f32_4 %532 = OpLoad %59 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 0 0 
                                       f32_3 %534 = OpFMul %531 %533 
                                       f32_4 %535 = OpLoad %9 
                                       f32_4 %536 = OpVectorShuffle %535 %534 4 5 6 3 
                                                      OpStore %9 %536 
                                       f32_4 %539 = OpLoad %9 
                                                      OpStore %538 %539 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat1.y * 0.25 + 0.75;
        u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat6.x, u_xlat2.x);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat1.x = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat2.xyw = u_xlat1.xxx * u_xlat6.yzx;
    u_xlatb6 = u_xlat2.x>=u_xlat2.y;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat3.xy = u_xlat2.yx;
    u_xlat3.z = float(-1.0);
    u_xlat3.w = float(0.666666687);
    u_xlat4.xy = u_xlat6.yz * u_xlat1.xx + (-u_xlat3.xy);
    u_xlat4.z = float(1.0);
    u_xlat4.w = float(-1.0);
    u_xlat1 = u_xlat6.xxxx * u_xlat4 + u_xlat3;
    u_xlatb3 = u_xlat2.w>=u_xlat1.x;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat1.xyw;
    u_xlat1.xyw = u_xlat2.wyx;
    u_xlat1 = (-u_xlat2) + u_xlat1;
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + u_xlat2;
    u_xlat2.x = min(u_xlat1.y, u_xlat1.w);
    u_xlat2.x = u_xlat1.x + (-u_xlat2.x);
    u_xlat6.x = (-u_xlat1.y) + u_xlat1.w;
    u_xlat16 = u_xlat2.x * 6.0 + 1.00000001e-010;
    u_xlat6.x = u_xlat6.x / u_xlat16;
    u_xlat6.x = u_xlat6.x + u_xlat1.z;
    u_xlat11 = u_xlat1.x + 1.00000001e-010;
    u_xlat11 = u_xlat2.x / u_xlat11;
    u_xlatb16 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat16_5 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat5 = u_xlat16 * u_xlat16_5 + u_xlat10_0.z;
    u_xlatb10 = u_xlat10_0.x>=u_xlat5;
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat5) + u_xlat10_0.x;
    u_xlat0 = u_xlat10 * u_xlat0 + u_xlat5;
    u_xlat0 = u_xlat0 * _MaxValue;
    u_xlat0 = min(u_xlat0, u_xlat1.x);
    u_xlat1.xyw = abs(u_xlat6.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyw = fract(u_xlat1.xyw);
    u_xlat1.xyw = u_xlat1.xyw * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyw = abs(u_xlat1.xyw) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyw = clamp(u_xlat1.xyw, 0.0, 1.0);
    u_xlat1.xyw = u_xlat1.xyw + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyw + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %93 %94 %107 %138 %144 %147 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %107 Location 107 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %147 Location 147 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %89 = OpTypePointer Output %7 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                                Output f32_2* %93 = OpVariable Output 
                                 Input f32_4* %94 = OpVariable Input 
                                             %105 = OpTypeVector %6 3 
                                             %106 = OpTypePointer Input %105 
                                Input f32_3* %107 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                                             %114 = OpTypePointer Private %6 
                                         u32 %127 = OpConstant 2 
                                Private f32* %129 = OpVariable Private 
                                             %137 = OpTypePointer Output %105 
                               Output f32_3* %138 = OpVariable Output 
                               Output f32_3* %144 = OpVariable Output 
                               Output f32_4* %147 = OpVariable Output 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %36 %24 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %36 %23 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %36 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %82 = OpAccessChain %21 %36 %46 
                                        f32_4 %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %44 
                                        f32_4 %85 = OpVectorShuffle %84 %84 3 3 3 3 
                                        f32_4 %86 = OpFMul %83 %85 
                                        f32_4 %87 = OpLoad %57 
                                        f32_4 %88 = OpFAdd %86 %87 
                                Output f32_4* %90 = OpAccessChain %81 %23 
                                                      OpStore %90 %88 
                                        f32_4 %95 = OpLoad %94 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                               Uniform f32_4* %97 = OpAccessChain %21 %46 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_2 %100 = OpFMul %96 %99 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 2 3 
                                       f32_2 %104 = OpFAdd %100 %103 
                                                      OpStore %93 %104 
                                       f32_3 %108 = OpLoad %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %23 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %115 = OpAccessChain %44 %113 
                                                      OpStore %115 %112 
                                       f32_3 %116 = OpLoad %107 
                              Uniform f32_4* %117 = OpAccessChain %21 %24 %24 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %116 %119 
                                Private f32* %121 = OpAccessChain %44 %77 
                                                      OpStore %121 %120 
                                       f32_3 %122 = OpLoad %107 
                              Uniform f32_4* %123 = OpAccessChain %21 %24 %36 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %128 = OpAccessChain %44 %127 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %44 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %44 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %136 = OpExtInst %1 32 %135 
                                                      OpStore %129 %136 
                                         f32 %139 = OpLoad %129 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %140 %142 
                                                      OpStore %138 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore %144 %146 
                                       f32_4 %148 = OpLoad %9 
                                                      OpStore %147 %148 
                                 Output f32* %150 = OpAccessChain %81 %23 %77 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %81 %23 %77 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 468
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %78 %465 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %29 0 RelaxedPrecision 
                                                      OpMemberDecorate %29 0 Offset 29 
                                                      OpMemberDecorate %29 1 Offset 29 
                                                      OpMemberDecorate %29 2 Offset 29 
                                                      OpMemberDecorate %29 3 Offset 29 
                                                      OpMemberDecorate %29 4 Offset 29 
                                                      OpMemberDecorate %29 5 RelaxedPrecision 
                                                      OpMemberDecorate %29 5 Offset 29 
                                                      OpMemberDecorate %29 6 Offset 29 
                                                      OpMemberDecorate %29 7 RelaxedPrecision 
                                                      OpMemberDecorate %29 7 Offset 29 
                                                      OpDecorate %29 Block 
                                                      OpDecorate %31 DescriptorSet 31 
                                                      OpDecorate %31 Binding 31 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %68 SpecId 68 
                                                      OpDecorate %78 Location 78 
                                                      OpDecorate %162 DescriptorSet 162 
                                                      OpDecorate %162 Binding 162 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %465 Location 465 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeStruct %7 %7 %27 %28 %28 %7 %6 %6 
                                              %30 = OpTypePointer Uniform %29 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32;}* %31 = OpVariable Uniform 
                                              %32 = OpTypeInt 32 1 
                                          i32 %33 = OpConstant 7 
                                              %34 = OpTypePointer Uniform %6 
                                          u32 %39 = OpConstant 0 
                                              %41 = OpTypeBool 
                                              %42 = OpTypePointer Private %41 
                                Private bool* %43 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                          i32 %49 = OpConstant 0 
                                          i32 %50 = OpConstant 1 
                                          i32 %52 = OpConstant -1 
                                          f32 %60 = OpConstant 3.674022E-40 
                                         bool %62 = OpConstantFalse 
                                         bool %68 = OpSpecConstantFalse 
                                          u32 %71 = OpConstant 1 
                                              %75 = OpTypePointer Private %28 
                               Private f32_3* %76 = OpVariable Private 
                                              %77 = OpTypePointer Input %28 
                                 Input f32_3* %78 = OpVariable Input 
                                          i32 %81 = OpConstant 2 
                                              %82 = OpTypePointer Uniform %7 
                                         i32 %104 = OpConstant 3 
                              Private f32_4* %109 = OpVariable Private 
                                             %110 = OpTypePointer Function %28 
                                         i32 %123 = OpConstant 4 
                                             %124 = OpTypePointer Uniform %28 
                              Private f32_4* %131 = OpVariable Private 
                                         f32 %141 = OpConstant 3.674022E-40 
                                         f32 %143 = OpConstant 3.674022E-40 
                                         u32 %146 = OpConstant 2 
                                         f32 %149 = OpConstant 3.674022E-40 
                                             %159 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %160 = OpTypeSampledImage %159 
                                             %161 = OpTypePointer UniformConstant %160 
 UniformConstant read_only Texture3DSampled* %162 = OpVariable UniformConstant 
                                Private f32* %173 = OpVariable Private 
                              Private f32_3* %180 = OpVariable Private 
                                         i32 %183 = OpConstant 5 
                              Private f32_3* %188 = OpVariable Private 
                                             %198 = OpTypePointer Function %6 
                                             %206 = OpTypePointer Private %15 
                              Private f32_2* %207 = OpVariable Private 
                              Private f32_4* %217 = OpVariable Private 
                                         f32 %219 = OpConstant 3.674022E-40 
                                         f32 %242 = OpConstant 3.674022E-40 
                                       f32_2 %243 = OpConstantComposite %219 %242 
                              Private f32_4* %268 = OpVariable Private 
                                Private f32* %321 = OpVariable Private 
                                         f32 %324 = OpConstant 3.674022E-40 
                                         f32 %326 = OpConstant 3.674022E-40 
                               Private bool* %346 = OpVariable Private 
                                Private f32* %352 = OpVariable Private 
                               Private bool* %373 = OpVariable Private 
                                Private f32* %385 = OpVariable Private 
                                         i32 %398 = OpConstant 6 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_3 %411 = OpConstantComposite %60 %242 %410 
                                       f32_3 %422 = OpConstantComposite %324 %324 %324 
                                         f32 %424 = OpConstant 3.674022E-40 
                                       f32_3 %425 = OpConstantComposite %424 %424 %424 
                                       f32_3 %432 = OpConstantComposite %219 %219 %219 
                                       f32_3 %453 = OpConstantComposite %60 %60 %60 
                                             %464 = OpTypePointer Output %7 
                               Output f32_4* %465 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %111 = OpVariable Function 
                               Function f32* %199 = OpVariable Function 
                               Function f32* %252 = OpVariable Function 
                               Function f32* %353 = OpVariable Function 
                               Function f32* %378 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %35 = OpAccessChain %31 %33 
                                          f32 %36 = OpLoad %35 
                                          f32 %37 = OpFNegate %36 
                                          f32 %38 = OpFAdd %25 %37 
                                 Private f32* %40 = OpAccessChain %20 %39 
                                                      OpStore %40 %38 
                                 Private f32* %44 = OpAccessChain %20 %39 
                                          f32 %45 = OpLoad %44 
                                         bool %47 = OpFOrdLessThan %45 %46 
                                                      OpStore %43 %47 
                                         bool %48 = OpLoad %43 
                                          i32 %51 = OpSelect %48 %50 %49 
                                          i32 %53 = OpIMul %51 %52 
                                         bool %54 = OpINotEqual %53 %49 
                                                      OpSelectionMerge %56 None 
                                                      OpBranchConditional %54 %55 %56 
                                              %55 = OpLabel 
                                                      OpKill
                                              %56 = OpLabel 
                                 Uniform f32* %58 = OpAccessChain %31 %50 %39 
                                          f32 %59 = OpLoad %58 
                                         bool %61 = OpFOrdEqual %59 %60 
                                                      OpStore %43 %61 
                                                      OpSelectionMerge %64 None 
                                                      OpBranchConditional %62 %63 %64 
                                              %63 = OpLabel 
                                         bool %65 = OpLoad %43 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpBranch %67 
                                              %67 = OpLabel 
                                                      OpBranch %64 
                                              %64 = OpLabel 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %168 
                                              %69 = OpLabel 
                                 Uniform f32* %72 = OpAccessChain %31 %50 %71 
                                          f32 %73 = OpLoad %72 
                                         bool %74 = OpFOrdEqual %73 %60 
                                                      OpStore %43 %74 
                                        f32_3 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %31 %81 %50 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %76 %86 
                               Uniform f32_4* %87 = OpAccessChain %31 %81 %49 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpLoad %78 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpFMul %89 %91 
                                        f32_3 %93 = OpLoad %76 
                                        f32_3 %94 = OpFAdd %92 %93 
                                                      OpStore %76 %94 
                               Uniform f32_4* %95 = OpAccessChain %31 %81 %81 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpLoad %78 
                                        f32_3 %99 = OpVectorShuffle %98 %98 2 2 2 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_3 %101 = OpLoad %76 
                                       f32_3 %102 = OpFAdd %100 %101 
                                                      OpStore %76 %102 
                                       f32_3 %103 = OpLoad %76 
                              Uniform f32_4* %105 = OpAccessChain %31 %81 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFAdd %103 %107 
                                                      OpStore %76 %108 
                                        bool %112 = OpLoad %43 
                                                      OpSelectionMerge %114 None 
                                                      OpBranchConditional %112 %113 %116 
                                             %113 = OpLabel 
                                       f32_3 %115 = OpLoad %76 
                                                      OpStore %111 %115 
                                                      OpBranch %114 
                                             %116 = OpLabel 
                                       f32_3 %117 = OpLoad %78 
                                                      OpStore %111 %117 
                                                      OpBranch %114 
                                             %114 = OpLabel 
                                       f32_3 %118 = OpLoad %111 
                                       f32_4 %119 = OpLoad %109 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
                                                      OpStore %109 %120 
                                       f32_4 %121 = OpLoad %109 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                              Uniform f32_3* %125 = OpAccessChain %31 %123 
                                       f32_3 %126 = OpLoad %125 
                                       f32_3 %127 = OpFNegate %126 
                                       f32_3 %128 = OpFAdd %122 %127 
                                       f32_4 %129 = OpLoad %109 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %109 %130 
                                       f32_4 %132 = OpLoad %109 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                              Uniform f32_3* %134 = OpAccessChain %31 %104 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %131 
                                       f32_4 %138 = OpVectorShuffle %137 %136 0 4 5 6 
                                                      OpStore %131 %138 
                                Private f32* %139 = OpAccessChain %131 %71 
                                         f32 %140 = OpLoad %139 
                                         f32 %142 = OpFMul %140 %141 
                                         f32 %144 = OpFAdd %142 %143 
                                Private f32* %145 = OpAccessChain %109 %39 
                                                      OpStore %145 %144 
                                Uniform f32* %147 = OpAccessChain %31 %50 %146 
                                         f32 %148 = OpLoad %147 
                                         f32 %150 = OpFMul %148 %149 
                                         f32 %151 = OpFAdd %150 %143 
                                Private f32* %152 = OpAccessChain %76 %39 
                                                      OpStore %152 %151 
                                Private f32* %153 = OpAccessChain %76 %39 
                                         f32 %154 = OpLoad %153 
                                Private f32* %155 = OpAccessChain %109 %39 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpExtInst %1 40 %154 %156 
                                Private f32* %158 = OpAccessChain %131 %39 
                                                      OpStore %158 %157 
                  read_only Texture3DSampled %163 = OpLoad %162 
                                       f32_4 %164 = OpLoad %131 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 2 3 
                                       f32_4 %166 = OpImageSampleImplicitLod %163 %165 
                                                      OpStore %131 %166 
                                       f32_4 %167 = OpLoad %131 
                                                      OpStore %20 %167 
                                                      OpBranch %70 
                                             %168 = OpLabel 
                                Private f32* %169 = OpAccessChain %20 %39 
                                                      OpStore %169 %60 
                                Private f32* %170 = OpAccessChain %20 %71 
                                                      OpStore %170 %60 
                                Private f32* %171 = OpAccessChain %20 %146 
                                                      OpStore %171 %60 
                                Private f32* %172 = OpAccessChain %20 %22 
                                                      OpStore %172 %60 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                       f32_4 %174 = OpLoad %20 
                              Uniform f32_4* %175 = OpAccessChain %31 %49 
                                       f32_4 %176 = OpLoad %175 
                                         f32 %177 = OpDot %174 %176 
                                                      OpStore %173 %177 
                                         f32 %178 = OpLoad %173 
                                         f32 %179 = OpExtInst %1 43 %178 %46 %60 
                                                      OpStore %173 %179 
                                       f32_4 %181 = OpLoad %9 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                              Uniform f32_4* %184 = OpAccessChain %31 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %182 %186 
                                                      OpStore %180 %187 
                                         f32 %189 = OpLoad %173 
                                       f32_3 %190 = OpCompositeConstruct %189 %189 %189 
                                       f32_3 %191 = OpLoad %180 
                                       f32_3 %192 = OpFMul %190 %191 
                                                      OpStore %188 %192 
                                Private f32* %193 = OpAccessChain %188 %71 
                                         f32 %194 = OpLoad %193 
                                Private f32* %195 = OpAccessChain %188 %146 
                                         f32 %196 = OpLoad %195 
                                        bool %197 = OpFOrdGreaterThanEqual %194 %196 
                                                      OpStore %43 %197 
                                        bool %200 = OpLoad %43 
                                                      OpSelectionMerge %202 None 
                                                      OpBranchConditional %200 %201 %203 
                                             %201 = OpLabel 
                                                      OpStore %199 %60 
                                                      OpBranch %202 
                                             %203 = OpLabel 
                                                      OpStore %199 %46 
                                                      OpBranch %202 
                                             %202 = OpLabel 
                                         f32 %204 = OpLoad %199 
                                Private f32* %205 = OpAccessChain %109 %39 
                                                      OpStore %205 %204 
                                       f32_3 %208 = OpLoad %180 
                                       f32_2 %209 = OpVectorShuffle %208 %208 1 2 
                                         f32 %210 = OpLoad %173 
                                       f32_2 %211 = OpCompositeConstruct %210 %210 
                                       f32_2 %212 = OpFMul %209 %211 
                                       f32_3 %213 = OpLoad %188 
                                       f32_2 %214 = OpVectorShuffle %213 %213 2 1 
                                       f32_2 %215 = OpFNegate %214 
                                       f32_2 %216 = OpFAdd %212 %215 
                                                      OpStore %207 %216 
                                Private f32* %218 = OpAccessChain %217 %39 
                                                      OpStore %218 %60 
                                Private f32* %220 = OpAccessChain %217 %71 
                                                      OpStore %220 %219 
                                       f32_2 %221 = OpLoad %207 
                                       f32_4 %222 = OpLoad %109 
                                       f32_2 %223 = OpVectorShuffle %222 %222 0 0 
                                       f32_2 %224 = OpFMul %221 %223 
                                       f32_3 %225 = OpLoad %76 
                                       f32_3 %226 = OpVectorShuffle %225 %224 3 4 2 
                                                      OpStore %76 %226 
                                       f32_3 %227 = OpLoad %180 
                                       f32_2 %228 = OpVectorShuffle %227 %227 2 1 
                                         f32 %229 = OpLoad %173 
                                       f32_2 %230 = OpCompositeConstruct %229 %229 
                                       f32_2 %231 = OpFMul %228 %230 
                                       f32_3 %232 = OpLoad %76 
                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
                                       f32_2 %234 = OpFAdd %231 %233 
                                       f32_4 %235 = OpLoad %131 
                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 2 3 
                                                      OpStore %131 %236 
                                       f32_4 %237 = OpLoad %109 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 0 
                                       f32_4 %239 = OpLoad %217 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                       f32_2 %241 = OpFMul %238 %240 
                                       f32_2 %244 = OpFAdd %241 %243 
                                       f32_4 %245 = OpLoad %131 
                                       f32_4 %246 = OpVectorShuffle %245 %244 0 1 4 5 
                                                      OpStore %131 %246 
                                Private f32* %247 = OpAccessChain %188 %39 
                                         f32 %248 = OpLoad %247 
                                Private f32* %249 = OpAccessChain %131 %39 
                                         f32 %250 = OpLoad %249 
                                        bool %251 = OpFOrdGreaterThanEqual %248 %250 
                                                      OpStore %43 %251 
                                        bool %253 = OpLoad %43 
                                                      OpSelectionMerge %255 None 
                                                      OpBranchConditional %253 %254 %256 
                                             %254 = OpLabel 
                                                      OpStore %252 %60 
                                                      OpBranch %255 
                                             %256 = OpLabel 
                                                      OpStore %252 %46 
                                                      OpBranch %255 
                                             %255 = OpLabel 
                                         f32 %257 = OpLoad %252 
                                Private f32* %258 = OpAccessChain %109 %39 
                                                      OpStore %258 %257 
                                       f32_4 %259 = OpLoad %131 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 3 
                                       f32_3 %261 = OpFNegate %260 
                                       f32_4 %262 = OpLoad %217 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %217 %263 
                                Private f32* %264 = OpAccessChain %188 %39 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFNegate %265 
                                Private f32* %267 = OpAccessChain %217 %22 
                                                      OpStore %267 %266 
                                Private f32* %269 = OpAccessChain %180 %39 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpLoad %173 
                                         f32 %272 = OpFMul %270 %271 
                                Private f32* %273 = OpAccessChain %217 %39 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFAdd %272 %274 
                                Private f32* %276 = OpAccessChain %268 %39 
                                                      OpStore %276 %275 
                                       f32_4 %277 = OpLoad %131 
                                       f32_3 %278 = OpVectorShuffle %277 %277 1 2 0 
                                       f32_4 %279 = OpLoad %217 
                                       f32_3 %280 = OpVectorShuffle %279 %279 1 2 3 
                                       f32_3 %281 = OpFAdd %278 %280 
                                       f32_4 %282 = OpLoad %268 
                                       f32_4 %283 = OpVectorShuffle %282 %281 0 4 5 6 
                                                      OpStore %268 %283 
                                       f32_4 %284 = OpLoad %109 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_4 %286 = OpLoad %268 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpFMul %285 %287 
                                       f32_4 %289 = OpLoad %131 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 3 
                                       f32_3 %291 = OpFAdd %288 %290 
                                                      OpStore %76 %291 
                                Private f32* %292 = OpAccessChain %109 %39 
                                         f32 %293 = OpLoad %292 
                                Private f32* %294 = OpAccessChain %268 %22 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFMul %293 %295 
                                Private f32* %297 = OpAccessChain %188 %39 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFAdd %296 %298 
                                Private f32* %300 = OpAccessChain %109 %39 
                                                      OpStore %300 %299 
                                Private f32* %301 = OpAccessChain %76 %71 
                                         f32 %302 = OpLoad %301 
                                Private f32* %303 = OpAccessChain %109 %39 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpExtInst %1 37 %302 %304 
                                Private f32* %306 = OpAccessChain %217 %39 
                                                      OpStore %306 %305 
                                Private f32* %307 = OpAccessChain %76 %39 
                                         f32 %308 = OpLoad %307 
                                Private f32* %309 = OpAccessChain %217 %39 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFNegate %310 
                                         f32 %312 = OpFAdd %308 %311 
                                Private f32* %313 = OpAccessChain %217 %39 
                                                      OpStore %313 %312 
                                Private f32* %314 = OpAccessChain %76 %71 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFNegate %315 
                                Private f32* %317 = OpAccessChain %109 %39 
                                         f32 %318 = OpLoad %317 
                                         f32 %319 = OpFAdd %316 %318 
                                Private f32* %320 = OpAccessChain %109 %39 
                                                      OpStore %320 %319 
                                Private f32* %322 = OpAccessChain %217 %39 
                                         f32 %323 = OpLoad %322 
                                         f32 %325 = OpFMul %323 %324 
                                         f32 %327 = OpFAdd %325 %326 
                                                      OpStore %321 %327 
                                Private f32* %328 = OpAccessChain %109 %39 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpLoad %321 
                                         f32 %331 = OpFDiv %329 %330 
                                Private f32* %332 = OpAccessChain %109 %39 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %109 %39 
                                         f32 %334 = OpLoad %333 
                                Private f32* %335 = OpAccessChain %76 %146 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpFAdd %334 %336 
                                Private f32* %338 = OpAccessChain %109 %39 
                                                      OpStore %338 %337 
                                Private f32* %339 = OpAccessChain %76 %39 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFAdd %340 %326 
                                                      OpStore %321 %341 
                                Private f32* %342 = OpAccessChain %217 %39 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpLoad %321 
                                         f32 %345 = OpFDiv %343 %344 
                                                      OpStore %321 %345 
                                Private f32* %347 = OpAccessChain %9 %71 
                                         f32 %348 = OpLoad %347 
                                Private f32* %349 = OpAccessChain %9 %146 
                                         f32 %350 = OpLoad %349 
                                        bool %351 = OpFOrdGreaterThanEqual %348 %350 
                                                      OpStore %346 %351 
                                        bool %354 = OpLoad %346 
                                                      OpSelectionMerge %356 None 
                                                      OpBranchConditional %354 %355 %357 
                                             %355 = OpLabel 
                                                      OpStore %353 %60 
                                                      OpBranch %356 
                                             %357 = OpLabel 
                                                      OpStore %353 %46 
                                                      OpBranch %356 
                                             %356 = OpLabel 
                                         f32 %358 = OpLoad %353 
                                                      OpStore %352 %358 
                                Private f32* %359 = OpAccessChain %9 %146 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpFNegate %360 
                                Private f32* %362 = OpAccessChain %9 %71 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFAdd %361 %363 
                                Private f32* %365 = OpAccessChain %217 %39 
                                                      OpStore %365 %364 
                                         f32 %366 = OpLoad %352 
                                Private f32* %367 = OpAccessChain %217 %39 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFMul %366 %368 
                                Private f32* %370 = OpAccessChain %9 %146 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFAdd %369 %371 
                                                      OpStore %352 %372 
                                Private f32* %374 = OpAccessChain %9 %39 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpLoad %352 
                                        bool %377 = OpFOrdGreaterThanEqual %375 %376 
                                                      OpStore %373 %377 
                                        bool %379 = OpLoad %373 
                                                      OpSelectionMerge %381 None 
                                                      OpBranchConditional %379 %380 %382 
                                             %380 = OpLabel 
                                                      OpStore %378 %60 
                                                      OpBranch %381 
                                             %382 = OpLabel 
                                                      OpStore %378 %46 
                                                      OpBranch %381 
                                             %381 = OpLabel 
                                         f32 %383 = OpLoad %378 
                                Private f32* %384 = OpAccessChain %217 %39 
                                                      OpStore %384 %383 
                                Private f32* %386 = OpAccessChain %9 %39 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpLoad %352 
                                         f32 %389 = OpFNegate %388 
                                         f32 %390 = OpFAdd %387 %389 
                                                      OpStore %385 %390 
                                Private f32* %391 = OpAccessChain %217 %39 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpLoad %385 
                                         f32 %394 = OpFMul %392 %393 
                                         f32 %395 = OpLoad %352 
                                         f32 %396 = OpFAdd %394 %395 
                                                      OpStore %352 %396 
                                         f32 %397 = OpLoad %352 
                                Uniform f32* %399 = OpAccessChain %31 %398 
                                         f32 %400 = OpLoad %399 
                                         f32 %401 = OpFMul %397 %400 
                                                      OpStore %352 %401 
                                         f32 %402 = OpLoad %352 
                                Private f32* %403 = OpAccessChain %76 %39 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpExtInst %1 37 %402 %404 
                                Private f32* %406 = OpAccessChain %76 %39 
                                                      OpStore %406 %405 
                                       f32_4 %407 = OpLoad %109 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 0 0 
                                       f32_3 %409 = OpExtInst %1 4 %408 
                                       f32_3 %412 = OpFAdd %409 %411 
                                       f32_4 %413 = OpLoad %217 
                                       f32_4 %414 = OpVectorShuffle %413 %412 4 5 6 3 
                                                      OpStore %217 %414 
                                       f32_4 %415 = OpLoad %217 
                                       f32_3 %416 = OpVectorShuffle %415 %415 0 1 2 
                                       f32_3 %417 = OpExtInst %1 10 %416 
                                       f32_4 %418 = OpLoad %217 
                                       f32_4 %419 = OpVectorShuffle %418 %417 4 5 6 3 
                                                      OpStore %217 %419 
                                       f32_4 %420 = OpLoad %217 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                                       f32_3 %423 = OpFMul %421 %422 
                                       f32_3 %426 = OpFAdd %423 %425 
                                       f32_4 %427 = OpLoad %217 
                                       f32_4 %428 = OpVectorShuffle %427 %426 4 5 6 3 
                                                      OpStore %217 %428 
                                       f32_4 %429 = OpLoad %217 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                                       f32_3 %431 = OpExtInst %1 4 %430 
                                       f32_3 %433 = OpFAdd %431 %432 
                                       f32_4 %434 = OpLoad %217 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 6 3 
                                                      OpStore %217 %435 
                                       f32_4 %436 = OpLoad %217 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                       f32_3 %438 = OpCompositeConstruct %46 %46 %46 
                                       f32_3 %439 = OpCompositeConstruct %60 %60 %60 
                                       f32_3 %440 = OpExtInst %1 43 %437 %438 %439 
                                       f32_4 %441 = OpLoad %217 
                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 6 3 
                                                      OpStore %217 %442 
                                       f32_4 %443 = OpLoad %217 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                       f32_3 %445 = OpFAdd %444 %432 
                                       f32_4 %446 = OpLoad %217 
                                       f32_4 %447 = OpVectorShuffle %446 %445 4 5 6 3 
                                                      OpStore %217 %447 
                                         f32 %448 = OpLoad %321 
                                       f32_3 %449 = OpCompositeConstruct %448 %448 %448 
                                       f32_4 %450 = OpLoad %217 
                                       f32_3 %451 = OpVectorShuffle %450 %450 0 1 2 
                                       f32_3 %452 = OpFMul %449 %451 
                                       f32_3 %454 = OpFAdd %452 %453 
                                       f32_4 %455 = OpLoad %109 
                                       f32_4 %456 = OpVectorShuffle %455 %454 4 1 5 6 
                                                      OpStore %109 %456 
                                       f32_4 %457 = OpLoad %109 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 2 3 
                                       f32_3 %459 = OpLoad %76 
                                       f32_3 %460 = OpVectorShuffle %459 %459 0 0 0 
                                       f32_3 %461 = OpFMul %458 %460 
                                       f32_4 %462 = OpLoad %9 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %9 %463 
                                       f32_4 %466 = OpLoad %9 
                                                      OpStore %465 %466 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
bool u_xlatb3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat7.x, u_xlat3.x);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat2.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb7 = 0.0<u_xlat1.z;
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat12.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
    u_xlat10_3 = texture(_LightTexture0, u_xlat12.xy);
    u_xlat16 = u_xlat7.x * u_xlat10_3.w;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_3 = texture(_LightTextureB0, u_xlat1.xx);
    u_xlat1.x = u_xlat16 * u_xlat10_3.w;
    u_xlat1.x = u_xlat2.x * u_xlat1.x;
    u_xlat6.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat2.xyw = u_xlat1.xxx * u_xlat6.yzx;
    u_xlatb6 = u_xlat2.x>=u_xlat2.y;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat3.xy = u_xlat2.yx;
    u_xlat3.z = float(-1.0);
    u_xlat3.w = float(0.666666687);
    u_xlat4.xy = u_xlat6.yz * u_xlat1.xx + (-u_xlat3.xy);
    u_xlat4.z = float(1.0);
    u_xlat4.w = float(-1.0);
    u_xlat1 = u_xlat6.xxxx * u_xlat4 + u_xlat3;
    u_xlatb3 = u_xlat2.w>=u_xlat1.x;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat1.xyw;
    u_xlat1.xyw = u_xlat2.wyx;
    u_xlat1 = (-u_xlat2) + u_xlat1;
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + u_xlat2;
    u_xlat2.x = min(u_xlat1.y, u_xlat1.w);
    u_xlat2.x = u_xlat1.x + (-u_xlat2.x);
    u_xlat6.x = (-u_xlat1.y) + u_xlat1.w;
    u_xlat16 = u_xlat2.x * 6.0 + 1.00000001e-010;
    u_xlat6.x = u_xlat6.x / u_xlat16;
    u_xlat6.x = u_xlat6.x + u_xlat1.z;
    u_xlat11 = u_xlat1.x + 1.00000001e-010;
    u_xlat11 = u_xlat2.x / u_xlat11;
    u_xlatb16 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat16_5 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat5 = u_xlat16 * u_xlat16_5 + u_xlat10_0.z;
    u_xlatb10 = u_xlat10_0.x>=u_xlat5;
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat5) + u_xlat10_0.x;
    u_xlat0 = u_xlat10 * u_xlat0 + u_xlat5;
    u_xlat0 = u_xlat0 * _MaxValue;
    u_xlat0 = min(u_xlat0, u_xlat1.x);
    u_xlat1.xyw = abs(u_xlat6.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyw = fract(u_xlat1.xyw);
    u_xlat1.xyw = u_xlat1.xyw * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyw = abs(u_xlat1.xyw) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyw = clamp(u_xlat1.xyw, 0.0, 1.0);
    u_xlat1.xyw = u_xlat1.xyw + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyw + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %93 %94 %107 %138 %144 %147 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %107 Location 107 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %147 Location 147 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %89 = OpTypePointer Output %7 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                                Output f32_2* %93 = OpVariable Output 
                                 Input f32_4* %94 = OpVariable Input 
                                             %105 = OpTypeVector %6 3 
                                             %106 = OpTypePointer Input %105 
                                Input f32_3* %107 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                                             %114 = OpTypePointer Private %6 
                                         u32 %127 = OpConstant 2 
                                Private f32* %129 = OpVariable Private 
                                             %137 = OpTypePointer Output %105 
                               Output f32_3* %138 = OpVariable Output 
                               Output f32_3* %144 = OpVariable Output 
                               Output f32_4* %147 = OpVariable Output 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %36 %24 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %36 %23 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %36 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %82 = OpAccessChain %21 %36 %46 
                                        f32_4 %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %44 
                                        f32_4 %85 = OpVectorShuffle %84 %84 3 3 3 3 
                                        f32_4 %86 = OpFMul %83 %85 
                                        f32_4 %87 = OpLoad %57 
                                        f32_4 %88 = OpFAdd %86 %87 
                                Output f32_4* %90 = OpAccessChain %81 %23 
                                                      OpStore %90 %88 
                                        f32_4 %95 = OpLoad %94 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                               Uniform f32_4* %97 = OpAccessChain %21 %46 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_2 %100 = OpFMul %96 %99 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 2 3 
                                       f32_2 %104 = OpFAdd %100 %103 
                                                      OpStore %93 %104 
                                       f32_3 %108 = OpLoad %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %23 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %115 = OpAccessChain %44 %113 
                                                      OpStore %115 %112 
                                       f32_3 %116 = OpLoad %107 
                              Uniform f32_4* %117 = OpAccessChain %21 %24 %24 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %116 %119 
                                Private f32* %121 = OpAccessChain %44 %77 
                                                      OpStore %121 %120 
                                       f32_3 %122 = OpLoad %107 
                              Uniform f32_4* %123 = OpAccessChain %21 %24 %36 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %128 = OpAccessChain %44 %127 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %44 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %44 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %136 = OpExtInst %1 32 %135 
                                                      OpStore %129 %136 
                                         f32 %139 = OpLoad %129 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %140 %142 
                                                      OpStore %138 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore %144 %146 
                                       f32_4 %148 = OpLoad %9 
                                                      OpStore %147 %148 
                                 Output f32* %150 = OpAccessChain %81 %23 %77 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %81 %23 %77 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 536
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %58 %533 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 RelaxedPrecision 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 RelaxedPrecision 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpMemberDecorate %30 8 RelaxedPrecision 
                                                      OpMemberDecorate %30 8 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate %97 SpecId 97 
                                                      OpDecorate %186 DescriptorSet 186 
                                                      OpDecorate %186 Binding 186 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %231 DescriptorSet 231 
                                                      OpDecorate %231 Binding 231 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %250 DescriptorSet 250 
                                                      OpDecorate %250 Binding 250 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %533 Location 533 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 3 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeArray %7 %26 
                                              %30 = OpTypeStruct %7 %7 %27 %28 %28 %7 %29 %6 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 8 
                                              %35 = OpTypePointer Uniform %6 
                                              %40 = OpTypeBool 
                                              %41 = OpTypePointer Private %40 
                                Private bool* %42 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                          i32 %47 = OpConstant 0 
                                          i32 %48 = OpConstant 1 
                                          i32 %50 = OpConstant -1 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypePointer Input %28 
                                 Input f32_3* %58 = OpVariable Input 
                                          i32 %61 = OpConstant 6 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                                          i32 %82 = OpConstant 3 
                                          u32 %86 = OpConstant 0 
                                          f32 %89 = OpConstant 3.674022E-40 
                                         bool %91 = OpConstantFalse 
                                         bool %97 = OpSpecConstantFalse 
                                         u32 %100 = OpConstant 1 
                                             %104 = OpTypePointer Private %28 
                              Private f32_3* %105 = OpVariable Private 
                              Private f32_4* %133 = OpVariable Private 
                                             %134 = OpTypePointer Function %28 
                                         i32 %147 = OpConstant 4 
                                             %148 = OpTypePointer Uniform %28 
                                         f32 %164 = OpConstant 3.674022E-40 
                                         f32 %166 = OpConstant 3.674022E-40 
                              Private f32_4* %169 = OpVariable Private 
                                         u32 %170 = OpConstant 2 
                                         f32 %173 = OpConstant 3.674022E-40 
                                             %183 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %184 = OpTypeSampledImage %183 
                                             %185 = OpTypePointer UniformConstant %184 
 UniformConstant read_only Texture3DSampled* %186 = OpVariable UniformConstant 
                              Private f32_4* %191 = OpVariable Private 
                                Private f32* %198 = OpVariable Private 
                               Private bool* %205 = OpVariable Private 
                              Private f32_3* %209 = OpVariable Private 
                                             %210 = OpTypePointer Function %6 
                                       f32_2 %227 = OpConstantComposite %173 %173 
 UniformConstant read_only Texture2DSampled* %231 = OpVariable UniformConstant 
 UniformConstant read_only Texture2DSampled* %250 = OpVariable UniformConstant 
                                         i32 %269 = OpConstant 5 
                              Private f32_3* %274 = OpVariable Private 
                                             %291 = OpTypePointer Private %15 
                              Private f32_2* %292 = OpVariable Private 
                              Private f32_3* %302 = OpVariable Private 
                                         f32 %304 = OpConstant 3.674022E-40 
                              Private f32_3* %306 = OpVariable Private 
                                         f32 %328 = OpConstant 3.674022E-40 
                                       f32_2 %329 = OpConstantComposite %304 %328 
                              Private f32_4* %354 = OpVariable Private 
                                Private f32* %407 = OpVariable Private 
                                         f32 %410 = OpConstant 3.674022E-40 
                                         f32 %412 = OpConstant 3.674022E-40 
                               Private bool* %432 = OpVariable Private 
                                Private f32* %438 = OpVariable Private 
                               Private bool* %459 = OpVariable Private 
                                Private f32* %471 = OpVariable Private 
                                         i32 %484 = OpConstant 7 
                                         f32 %496 = OpConstant 3.674022E-40 
                                       f32_3 %497 = OpConstantComposite %89 %328 %496 
                                       f32_3 %502 = OpConstantComposite %410 %410 %410 
                                         f32 %504 = OpConstant 3.674022E-40 
                                       f32_3 %505 = OpConstantComposite %504 %504 %504 
                                       f32_3 %509 = OpConstantComposite %304 %304 %304 
                                       f32_3 %521 = OpConstantComposite %89 %89 %89 
                                             %532 = OpTypePointer Output %7 
                               Output f32_4* %533 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %135 = OpVariable Function 
                               Function f32* %211 = OpVariable Function 
                               Function f32* %284 = OpVariable Function 
                               Function f32* %338 = OpVariable Function 
                               Function f32* %439 = OpVariable Function 
                               Function f32* %464 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %23 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                                      OpStore %21 %39 
                                          f32 %43 = OpLoad %21 
                                         bool %45 = OpFOrdLessThan %43 %44 
                                                      OpStore %42 %45 
                                         bool %46 = OpLoad %42 
                                          i32 %49 = OpSelect %46 %48 %47 
                                          i32 %51 = OpIMul %49 %50 
                                         bool %52 = OpINotEqual %51 %47 
                                                      OpSelectionMerge %54 None 
                                                      OpBranchConditional %52 %53 %54 
                                              %53 = OpLabel 
                                                      OpKill
                                              %54 = OpLabel 
                                        f32_3 %59 = OpLoad %58 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %32 %61 %48 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %60 %64 
                                                      OpStore %56 %65 
                               Uniform f32_4* %66 = OpAccessChain %32 %61 %47 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %58 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %56 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %56 %72 
                               Uniform f32_4* %74 = OpAccessChain %32 %61 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_3 %76 = OpLoad %58 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %56 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %56 %80 
                                        f32_4 %81 = OpLoad %56 
                               Uniform f32_4* %83 = OpAccessChain %32 %61 %82 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %81 %84 
                                                      OpStore %56 %85 
                                 Uniform f32* %87 = OpAccessChain %32 %48 %86 
                                          f32 %88 = OpLoad %87 
                                         bool %90 = OpFOrdEqual %88 %89 
                                                      OpStore %42 %90 
                                                      OpSelectionMerge %93 None 
                                                      OpBranchConditional %91 %92 %93 
                                              %92 = OpLabel 
                                         bool %94 = OpLoad %42 
                                                      OpSelectionMerge %96 None 
                                                      OpBranchConditional %94 %95 %96 
                                              %95 = OpLabel 
                                                      OpBranch %96 
                                              %96 = OpLabel 
                                                      OpBranch %93 
                                              %93 = OpLabel 
                                                      OpSelectionMerge %99 None 
                                                      OpBranchConditional %97 %98 %193 
                                              %98 = OpLabel 
                                Uniform f32* %101 = OpAccessChain %32 %48 %100 
                                         f32 %102 = OpLoad %101 
                                        bool %103 = OpFOrdEqual %102 %89 
                                                      OpStore %42 %103 
                                       f32_3 %106 = OpLoad %58 
                                       f32_3 %107 = OpVectorShuffle %106 %106 1 1 1 
                              Uniform f32_4* %108 = OpAccessChain %32 %73 %48 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpFMul %107 %110 
                                                      OpStore %105 %111 
                              Uniform f32_4* %112 = OpAccessChain %32 %73 %47 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_3 %115 = OpLoad %58 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_3 %118 = OpLoad %105 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %105 %119 
                              Uniform f32_4* %120 = OpAccessChain %32 %73 %73 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpLoad %58 
                                       f32_3 %124 = OpVectorShuffle %123 %123 2 2 2 
                                       f32_3 %125 = OpFMul %122 %124 
                                       f32_3 %126 = OpLoad %105 
                                       f32_3 %127 = OpFAdd %125 %126 
                                                      OpStore %105 %127 
                                       f32_3 %128 = OpLoad %105 
                              Uniform f32_4* %129 = OpAccessChain %32 %73 %82 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFAdd %128 %131 
                                                      OpStore %105 %132 
                                        bool %136 = OpLoad %42 
                                                      OpSelectionMerge %138 None 
                                                      OpBranchConditional %136 %137 %140 
                                             %137 = OpLabel 
                                       f32_3 %139 = OpLoad %105 
                                                      OpStore %135 %139 
                                                      OpBranch %138 
                                             %140 = OpLabel 
                                       f32_3 %141 = OpLoad %58 
                                                      OpStore %135 %141 
                                                      OpBranch %138 
                                             %138 = OpLabel 
                                       f32_3 %142 = OpLoad %135 
                                       f32_4 %143 = OpLoad %133 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %133 %144 
                                       f32_4 %145 = OpLoad %133 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                              Uniform f32_3* %149 = OpAccessChain %32 %147 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpFNegate %150 
                                       f32_3 %152 = OpFAdd %146 %151 
                                       f32_4 %153 = OpLoad %133 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %133 %154 
                                       f32_4 %155 = OpLoad %133 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_3* %157 = OpAccessChain %32 %82 
                                       f32_3 %158 = OpLoad %157 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %133 
                                       f32_4 %161 = OpVectorShuffle %160 %159 0 4 5 6 
                                                      OpStore %133 %161 
                                Private f32* %162 = OpAccessChain %133 %100 
                                         f32 %163 = OpLoad %162 
                                         f32 %165 = OpFMul %163 %164 
                                         f32 %167 = OpFAdd %165 %166 
                                Private f32* %168 = OpAccessChain %105 %86 
                                                      OpStore %168 %167 
                                Uniform f32* %171 = OpAccessChain %32 %48 %170 
                                         f32 %172 = OpLoad %171 
                                         f32 %174 = OpFMul %172 %173 
                                         f32 %175 = OpFAdd %174 %166 
                                Private f32* %176 = OpAccessChain %169 %86 
                                                      OpStore %176 %175 
                                Private f32* %177 = OpAccessChain %105 %86 
                                         f32 %178 = OpLoad %177 
                                Private f32* %179 = OpAccessChain %169 %86 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpExtInst %1 40 %178 %180 
                                Private f32* %182 = OpAccessChain %133 %86 
                                                      OpStore %182 %181 
                  read_only Texture3DSampled %187 = OpLoad %186 
                                       f32_4 %188 = OpLoad %133 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 2 3 
                                       f32_4 %190 = OpImageSampleImplicitLod %187 %189 
                                                      OpStore %133 %190 
                                       f32_4 %192 = OpLoad %133 
                                                      OpStore %191 %192 
                                                      OpBranch %99 
                                             %193 = OpLabel 
                                Private f32* %194 = OpAccessChain %191 %86 
                                                      OpStore %194 %89 
                                Private f32* %195 = OpAccessChain %191 %100 
                                                      OpStore %195 %89 
                                Private f32* %196 = OpAccessChain %191 %170 
                                                      OpStore %196 %89 
                                Private f32* %197 = OpAccessChain %191 %23 
                                                      OpStore %197 %89 
                                                      OpBranch %99 
                                              %99 = OpLabel 
                                       f32_4 %199 = OpLoad %191 
                              Uniform f32_4* %200 = OpAccessChain %32 %47 
                                       f32_4 %201 = OpLoad %200 
                                         f32 %202 = OpDot %199 %201 
                                                      OpStore %198 %202 
                                         f32 %203 = OpLoad %198 
                                         f32 %204 = OpExtInst %1 43 %203 %44 %89 
                                                      OpStore %198 %204 
                                Private f32* %206 = OpAccessChain %56 %170 
                                         f32 %207 = OpLoad %206 
                                        bool %208 = OpFOrdLessThan %44 %207 
                                                      OpStore %205 %208 
                                        bool %212 = OpLoad %205 
                                                      OpSelectionMerge %214 None 
                                                      OpBranchConditional %212 %213 %215 
                                             %213 = OpLabel 
                                                      OpStore %211 %89 
                                                      OpBranch %214 
                                             %215 = OpLabel 
                                                      OpStore %211 %44 
                                                      OpBranch %214 
                                             %214 = OpLabel 
                                         f32 %216 = OpLoad %211 
                                Private f32* %217 = OpAccessChain %209 %86 
                                                      OpStore %217 %216 
                                       f32_4 %218 = OpLoad %56 
                                       f32_2 %219 = OpVectorShuffle %218 %218 0 1 
                                       f32_4 %220 = OpLoad %56 
                                       f32_2 %221 = OpVectorShuffle %220 %220 3 3 
                                       f32_2 %222 = OpFDiv %219 %221 
                                       f32_4 %223 = OpLoad %169 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 2 3 
                                                      OpStore %169 %224 
                                       f32_4 %225 = OpLoad %169 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                                       f32_2 %228 = OpFAdd %226 %227 
                                       f32_4 %229 = OpLoad %169 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 2 3 
                                                      OpStore %169 %230 
                  read_only Texture2DSampled %232 = OpLoad %231 
                                       f32_4 %233 = OpLoad %169 
                                       f32_2 %234 = OpVectorShuffle %233 %233 0 1 
                                       f32_4 %235 = OpImageSampleImplicitLod %232 %234 
                                         f32 %236 = OpCompositeExtract %235 3 
                                Private f32* %237 = OpAccessChain %169 %86 
                                                      OpStore %237 %236 
                                Private f32* %238 = OpAccessChain %169 %86 
                                         f32 %239 = OpLoad %238 
                                Private f32* %240 = OpAccessChain %209 %86 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %239 %241 
                                Private f32* %243 = OpAccessChain %209 %86 
                                                      OpStore %243 %242 
                                       f32_4 %244 = OpLoad %56 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                       f32_4 %246 = OpLoad %56 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                         f32 %248 = OpDot %245 %247 
                                Private f32* %249 = OpAccessChain %169 %86 
                                                      OpStore %249 %248 
                  read_only Texture2DSampled %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %169 
                                       f32_2 %253 = OpVectorShuffle %252 %252 0 0 
                                       f32_4 %254 = OpImageSampleImplicitLod %251 %253 
                                         f32 %255 = OpCompositeExtract %254 3 
                                Private f32* %256 = OpAccessChain %169 %86 
                                                      OpStore %256 %255 
                                Private f32* %257 = OpAccessChain %169 %86 
                                         f32 %258 = OpLoad %257 
                                Private f32* %259 = OpAccessChain %209 %86 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFMul %258 %260 
                                Private f32* %262 = OpAccessChain %209 %86 
                                                      OpStore %262 %261 
                                         f32 %263 = OpLoad %198 
                                Private f32* %264 = OpAccessChain %209 %86 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFMul %263 %265 
                                                      OpStore %198 %266 
                                       f32_4 %267 = OpLoad %9 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                              Uniform f32_4* %270 = OpAccessChain %32 %269 
                                       f32_4 %271 = OpLoad %270 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_3 %273 = OpFMul %268 %272 
                                                      OpStore %209 %273 
                                         f32 %275 = OpLoad %198 
                                       f32_3 %276 = OpCompositeConstruct %275 %275 %275 
                                       f32_3 %277 = OpLoad %209 
                                       f32_3 %278 = OpFMul %276 %277 
                                                      OpStore %274 %278 
                                Private f32* %279 = OpAccessChain %274 %100 
                                         f32 %280 = OpLoad %279 
                                Private f32* %281 = OpAccessChain %274 %170 
                                         f32 %282 = OpLoad %281 
                                        bool %283 = OpFOrdGreaterThanEqual %280 %282 
                                                      OpStore %205 %283 
                                        bool %285 = OpLoad %205 
                                                      OpSelectionMerge %287 None 
                                                      OpBranchConditional %285 %286 %288 
                                             %286 = OpLabel 
                                                      OpStore %284 %89 
                                                      OpBranch %287 
                                             %288 = OpLabel 
                                                      OpStore %284 %44 
                                                      OpBranch %287 
                                             %287 = OpLabel 
                                         f32 %289 = OpLoad %284 
                                Private f32* %290 = OpAccessChain %169 %86 
                                                      OpStore %290 %289 
                                       f32_3 %293 = OpLoad %209 
                                       f32_2 %294 = OpVectorShuffle %293 %293 1 2 
                                         f32 %295 = OpLoad %198 
                                       f32_2 %296 = OpCompositeConstruct %295 %295 
                                       f32_2 %297 = OpFMul %294 %296 
                                       f32_3 %298 = OpLoad %274 
                                       f32_2 %299 = OpVectorShuffle %298 %298 2 1 
                                       f32_2 %300 = OpFNegate %299 
                                       f32_2 %301 = OpFAdd %297 %300 
                                                      OpStore %292 %301 
                                Private f32* %303 = OpAccessChain %302 %86 
                                                      OpStore %303 %89 
                                Private f32* %305 = OpAccessChain %302 %100 
                                                      OpStore %305 %304 
                                       f32_2 %307 = OpLoad %292 
                                       f32_4 %308 = OpLoad %169 
                                       f32_2 %309 = OpVectorShuffle %308 %308 0 0 
                                       f32_2 %310 = OpFMul %307 %309 
                                       f32_3 %311 = OpLoad %306 
                                       f32_3 %312 = OpVectorShuffle %311 %310 3 4 2 
                                                      OpStore %306 %312 
                                       f32_3 %313 = OpLoad %209 
                                       f32_2 %314 = OpVectorShuffle %313 %313 2 1 
                                         f32 %315 = OpLoad %198 
                                       f32_2 %316 = OpCompositeConstruct %315 %315 
                                       f32_2 %317 = OpFMul %314 %316 
                                       f32_3 %318 = OpLoad %306 
                                       f32_2 %319 = OpVectorShuffle %318 %318 0 1 
                                       f32_2 %320 = OpFAdd %317 %319 
                                       f32_4 %321 = OpLoad %56 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 2 3 
                                                      OpStore %56 %322 
                                       f32_4 %323 = OpLoad %169 
                                       f32_2 %324 = OpVectorShuffle %323 %323 0 0 
                                       f32_3 %325 = OpLoad %302 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_2 %327 = OpFMul %324 %326 
                                       f32_2 %330 = OpFAdd %327 %329 
                                       f32_4 %331 = OpLoad %56 
                                       f32_4 %332 = OpVectorShuffle %331 %330 0 1 4 5 
                                                      OpStore %56 %332 
                                Private f32* %333 = OpAccessChain %274 %86 
                                         f32 %334 = OpLoad %333 
                                Private f32* %335 = OpAccessChain %56 %86 
                                         f32 %336 = OpLoad %335 
                                        bool %337 = OpFOrdGreaterThanEqual %334 %336 
                                                      OpStore %205 %337 
                                        bool %339 = OpLoad %205 
                                                      OpSelectionMerge %341 None 
                                                      OpBranchConditional %339 %340 %342 
                                             %340 = OpLabel 
                                                      OpStore %338 %89 
                                                      OpBranch %341 
                                             %342 = OpLabel 
                                                      OpStore %338 %44 
                                                      OpBranch %341 
                                             %341 = OpLabel 
                                         f32 %343 = OpLoad %338 
                                Private f32* %344 = OpAccessChain %169 %86 
                                                      OpStore %344 %343 
                                       f32_4 %345 = OpLoad %56 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 3 
                                       f32_3 %347 = OpFNegate %346 
                                       f32_4 %348 = OpLoad %133 
                                       f32_4 %349 = OpVectorShuffle %348 %347 4 5 6 3 
                                                      OpStore %133 %349 
                                Private f32* %350 = OpAccessChain %274 %86 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFNegate %351 
                                Private f32* %353 = OpAccessChain %133 %23 
                                                      OpStore %353 %352 
                                Private f32* %355 = OpAccessChain %209 %86 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpLoad %198 
                                         f32 %358 = OpFMul %356 %357 
                                Private f32* %359 = OpAccessChain %133 %86 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpFAdd %358 %360 
                                Private f32* %362 = OpAccessChain %354 %86 
                                                      OpStore %362 %361 
                                       f32_4 %363 = OpLoad %56 
                                       f32_3 %364 = OpVectorShuffle %363 %363 1 2 0 
                                       f32_4 %365 = OpLoad %133 
                                       f32_3 %366 = OpVectorShuffle %365 %365 1 2 3 
                                       f32_3 %367 = OpFAdd %364 %366 
                                       f32_4 %368 = OpLoad %354 
                                       f32_4 %369 = OpVectorShuffle %368 %367 0 4 5 6 
                                                      OpStore %354 %369 
                                       f32_4 %370 = OpLoad %169 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 0 0 
                                       f32_4 %372 = OpLoad %354 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFMul %371 %373 
                                       f32_4 %375 = OpLoad %56 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 3 
                                       f32_3 %377 = OpFAdd %374 %376 
                                                      OpStore %306 %377 
                                Private f32* %378 = OpAccessChain %169 %86 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %354 %23 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %379 %381 
                                Private f32* %383 = OpAccessChain %274 %86 
                                         f32 %384 = OpLoad %383 
                                         f32 %385 = OpFAdd %382 %384 
                                Private f32* %386 = OpAccessChain %169 %86 
                                                      OpStore %386 %385 
                                Private f32* %387 = OpAccessChain %306 %100 
                                         f32 %388 = OpLoad %387 
                                Private f32* %389 = OpAccessChain %169 %86 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpExtInst %1 37 %388 %390 
                                Private f32* %392 = OpAccessChain %302 %86 
                                                      OpStore %392 %391 
                                Private f32* %393 = OpAccessChain %306 %86 
                                         f32 %394 = OpLoad %393 
                                Private f32* %395 = OpAccessChain %302 %86 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFNegate %396 
                                         f32 %398 = OpFAdd %394 %397 
                                Private f32* %399 = OpAccessChain %302 %86 
                                                      OpStore %399 %398 
                                Private f32* %400 = OpAccessChain %306 %100 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpFNegate %401 
                                Private f32* %403 = OpAccessChain %169 %86 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                Private f32* %406 = OpAccessChain %169 %86 
                                                      OpStore %406 %405 
                                Private f32* %408 = OpAccessChain %302 %86 
                                         f32 %409 = OpLoad %408 
                                         f32 %411 = OpFMul %409 %410 
                                         f32 %413 = OpFAdd %411 %412 
                                                      OpStore %407 %413 
                                Private f32* %414 = OpAccessChain %169 %86 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpLoad %407 
                                         f32 %417 = OpFDiv %415 %416 
                                Private f32* %418 = OpAccessChain %169 %86 
                                                      OpStore %418 %417 
                                Private f32* %419 = OpAccessChain %169 %86 
                                         f32 %420 = OpLoad %419 
                                Private f32* %421 = OpAccessChain %306 %170 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpFAdd %420 %422 
                                Private f32* %424 = OpAccessChain %169 %86 
                                                      OpStore %424 %423 
                                Private f32* %425 = OpAccessChain %306 %86 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpFAdd %426 %412 
                                                      OpStore %407 %427 
                                Private f32* %428 = OpAccessChain %302 %86 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpLoad %407 
                                         f32 %431 = OpFDiv %429 %430 
                                                      OpStore %407 %431 
                                Private f32* %433 = OpAccessChain %9 %100 
                                         f32 %434 = OpLoad %433 
                                Private f32* %435 = OpAccessChain %9 %170 
                                         f32 %436 = OpLoad %435 
                                        bool %437 = OpFOrdGreaterThanEqual %434 %436 
                                                      OpStore %432 %437 
                                        bool %440 = OpLoad %432 
                                                      OpSelectionMerge %442 None 
                                                      OpBranchConditional %440 %441 %443 
                                             %441 = OpLabel 
                                                      OpStore %439 %89 
                                                      OpBranch %442 
                                             %443 = OpLabel 
                                                      OpStore %439 %44 
                                                      OpBranch %442 
                                             %442 = OpLabel 
                                         f32 %444 = OpLoad %439 
                                                      OpStore %438 %444 
                                Private f32* %445 = OpAccessChain %9 %170 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpFNegate %446 
                                Private f32* %448 = OpAccessChain %9 %100 
                                         f32 %449 = OpLoad %448 
                                         f32 %450 = OpFAdd %447 %449 
                                Private f32* %451 = OpAccessChain %302 %86 
                                                      OpStore %451 %450 
                                         f32 %452 = OpLoad %438 
                                Private f32* %453 = OpAccessChain %302 %86 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpFMul %452 %454 
                                Private f32* %456 = OpAccessChain %9 %170 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpFAdd %455 %457 
                                                      OpStore %438 %458 
                                Private f32* %460 = OpAccessChain %9 %86 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpLoad %438 
                                        bool %463 = OpFOrdGreaterThanEqual %461 %462 
                                                      OpStore %459 %463 
                                        bool %465 = OpLoad %459 
                                                      OpSelectionMerge %467 None 
                                                      OpBranchConditional %465 %466 %468 
                                             %466 = OpLabel 
                                                      OpStore %464 %89 
                                                      OpBranch %467 
                                             %468 = OpLabel 
                                                      OpStore %464 %44 
                                                      OpBranch %467 
                                             %467 = OpLabel 
                                         f32 %469 = OpLoad %464 
                                Private f32* %470 = OpAccessChain %302 %86 
                                                      OpStore %470 %469 
                                Private f32* %472 = OpAccessChain %9 %86 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpLoad %438 
                                         f32 %475 = OpFNegate %474 
                                         f32 %476 = OpFAdd %473 %475 
                                                      OpStore %471 %476 
                                Private f32* %477 = OpAccessChain %302 %86 
                                         f32 %478 = OpLoad %477 
                                         f32 %479 = OpLoad %471 
                                         f32 %480 = OpFMul %478 %479 
                                         f32 %481 = OpLoad %438 
                                         f32 %482 = OpFAdd %480 %481 
                                                      OpStore %438 %482 
                                         f32 %483 = OpLoad %438 
                                Uniform f32* %485 = OpAccessChain %32 %484 
                                         f32 %486 = OpLoad %485 
                                         f32 %487 = OpFMul %483 %486 
                                                      OpStore %438 %487 
                                         f32 %488 = OpLoad %438 
                                Private f32* %489 = OpAccessChain %306 %86 
                                         f32 %490 = OpLoad %489 
                                         f32 %491 = OpExtInst %1 37 %488 %490 
                                Private f32* %492 = OpAccessChain %306 %86 
                                                      OpStore %492 %491 
                                       f32_4 %493 = OpLoad %169 
                                       f32_3 %494 = OpVectorShuffle %493 %493 0 0 0 
                                       f32_3 %495 = OpExtInst %1 4 %494 
                                       f32_3 %498 = OpFAdd %495 %497 
                                                      OpStore %302 %498 
                                       f32_3 %499 = OpLoad %302 
                                       f32_3 %500 = OpExtInst %1 10 %499 
                                                      OpStore %302 %500 
                                       f32_3 %501 = OpLoad %302 
                                       f32_3 %503 = OpFMul %501 %502 
                                       f32_3 %506 = OpFAdd %503 %505 
                                                      OpStore %302 %506 
                                       f32_3 %507 = OpLoad %302 
                                       f32_3 %508 = OpExtInst %1 4 %507 
                                       f32_3 %510 = OpFAdd %508 %509 
                                                      OpStore %302 %510 
                                       f32_3 %511 = OpLoad %302 
                                       f32_3 %512 = OpCompositeConstruct %44 %44 %44 
                                       f32_3 %513 = OpCompositeConstruct %89 %89 %89 
                                       f32_3 %514 = OpExtInst %1 43 %511 %512 %513 
                                                      OpStore %302 %514 
                                       f32_3 %515 = OpLoad %302 
                                       f32_3 %516 = OpFAdd %515 %509 
                                                      OpStore %302 %516 
                                         f32 %517 = OpLoad %407 
                                       f32_3 %518 = OpCompositeConstruct %517 %517 %517 
                                       f32_3 %519 = OpLoad %302 
                                       f32_3 %520 = OpFMul %518 %519 
                                       f32_3 %522 = OpFAdd %520 %521 
                                       f32_4 %523 = OpLoad %169 
                                       f32_4 %524 = OpVectorShuffle %523 %522 4 1 5 6 
                                                      OpStore %169 %524 
                                       f32_4 %525 = OpLoad %169 
                                       f32_3 %526 = OpVectorShuffle %525 %525 0 2 3 
                                       f32_3 %527 = OpLoad %306 
                                       f32_3 %528 = OpVectorShuffle %527 %527 0 0 0 
                                       f32_3 %529 = OpFMul %526 %528 
                                       f32_4 %530 = OpLoad %9 
                                       f32_4 %531 = OpVectorShuffle %530 %529 4 5 6 3 
                                                      OpStore %9 %531 
                                       f32_4 %534 = OpLoad %9 
                                                      OpStore %533 %534 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
bool u_xlatb3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb16 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb16){
        u_xlatb16 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat16 = u_xlat2.y * 0.25 + 0.75;
        u_xlat7 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat16, u_xlat7);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat16 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat2.xx);
    u_xlat10_3 = texture(_LightTexture0, u_xlat1.xyz);
    u_xlat16_1 = u_xlat10_2.w * u_xlat10_3.w;
    u_xlat1.x = u_xlat16 * u_xlat16_1;
    u_xlat6.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat2.xyw = u_xlat1.xxx * u_xlat6.yzx;
    u_xlatb6 = u_xlat2.x>=u_xlat2.y;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat3.xy = u_xlat2.yx;
    u_xlat3.z = float(-1.0);
    u_xlat3.w = float(0.666666687);
    u_xlat4.xy = u_xlat6.yz * u_xlat1.xx + (-u_xlat3.xy);
    u_xlat4.z = float(1.0);
    u_xlat4.w = float(-1.0);
    u_xlat1 = u_xlat6.xxxx * u_xlat4 + u_xlat3;
    u_xlatb3 = u_xlat2.w>=u_xlat1.x;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat1.xyw;
    u_xlat1.xyw = u_xlat2.wyx;
    u_xlat1 = (-u_xlat2) + u_xlat1;
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + u_xlat2;
    u_xlat2.x = min(u_xlat1.y, u_xlat1.w);
    u_xlat2.x = u_xlat1.x + (-u_xlat2.x);
    u_xlat6.x = (-u_xlat1.y) + u_xlat1.w;
    u_xlat16 = u_xlat2.x * 6.0 + 1.00000001e-010;
    u_xlat6.x = u_xlat6.x / u_xlat16;
    u_xlat6.x = u_xlat6.x + u_xlat1.z;
    u_xlat11 = u_xlat1.x + 1.00000001e-010;
    u_xlat11 = u_xlat2.x / u_xlat11;
    u_xlatb16 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat16_5 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat5 = u_xlat16 * u_xlat16_5 + u_xlat10_0.z;
    u_xlatb10 = u_xlat10_0.x>=u_xlat5;
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat5) + u_xlat10_0.x;
    u_xlat0 = u_xlat10 * u_xlat0 + u_xlat5;
    u_xlat0 = u_xlat0 * _MaxValue;
    u_xlat0 = min(u_xlat0, u_xlat1.x);
    u_xlat1.xyw = abs(u_xlat6.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyw = fract(u_xlat1.xyw);
    u_xlat1.xyw = u_xlat1.xyw * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyw = abs(u_xlat1.xyw) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyw = clamp(u_xlat1.xyw, 0.0, 1.0);
    u_xlat1.xyw = u_xlat1.xyw + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyw + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %93 %94 %107 %138 %144 %147 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %107 Location 107 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %147 Location 147 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %89 = OpTypePointer Output %7 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                                Output f32_2* %93 = OpVariable Output 
                                 Input f32_4* %94 = OpVariable Input 
                                             %105 = OpTypeVector %6 3 
                                             %106 = OpTypePointer Input %105 
                                Input f32_3* %107 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                                             %114 = OpTypePointer Private %6 
                                         u32 %127 = OpConstant 2 
                                Private f32* %129 = OpVariable Private 
                                             %137 = OpTypePointer Output %105 
                               Output f32_3* %138 = OpVariable Output 
                               Output f32_3* %144 = OpVariable Output 
                               Output f32_4* %147 = OpVariable Output 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %36 %24 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %36 %23 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %36 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %82 = OpAccessChain %21 %36 %46 
                                        f32_4 %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %44 
                                        f32_4 %85 = OpVectorShuffle %84 %84 3 3 3 3 
                                        f32_4 %86 = OpFMul %83 %85 
                                        f32_4 %87 = OpLoad %57 
                                        f32_4 %88 = OpFAdd %86 %87 
                                Output f32_4* %90 = OpAccessChain %81 %23 
                                                      OpStore %90 %88 
                                        f32_4 %95 = OpLoad %94 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                               Uniform f32_4* %97 = OpAccessChain %21 %46 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_2 %100 = OpFMul %96 %99 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 2 3 
                                       f32_2 %104 = OpFAdd %100 %103 
                                                      OpStore %93 %104 
                                       f32_3 %108 = OpLoad %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %23 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %115 = OpAccessChain %44 %113 
                                                      OpStore %115 %112 
                                       f32_3 %116 = OpLoad %107 
                              Uniform f32_4* %117 = OpAccessChain %21 %24 %24 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %116 %119 
                                Private f32* %121 = OpAccessChain %44 %77 
                                                      OpStore %121 %120 
                                       f32_3 %122 = OpLoad %107 
                              Uniform f32_4* %123 = OpAccessChain %21 %24 %36 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %128 = OpAccessChain %44 %127 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %44 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %44 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %136 = OpExtInst %1 32 %135 
                                                      OpStore %129 %136 
                                         f32 %139 = OpLoad %129 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %140 %142 
                                                      OpStore %138 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore %144 %146 
                                       f32_4 %148 = OpLoad %9 
                                                      OpStore %147 %148 
                                 Output f32* %150 = OpAccessChain %81 %23 %77 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %81 %23 %77 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 554
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %61 %551 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 RelaxedPrecision 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 RelaxedPrecision 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpMemberDecorate %30 8 RelaxedPrecision 
                                                      OpMemberDecorate %30 8 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %61 Location 61 
                                                      OpDecorate %115 SpecId 115 
                                                      OpDecorate %213 DescriptorSet 213 
                                                      OpDecorate %213 Binding 213 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %240 DescriptorSet 240 
                                                      OpDecorate %240 Binding 240 
                                                      OpDecorate %249 DescriptorSet 249 
                                                      OpDecorate %249 Binding 249 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %551 Location 551 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeArray %7 %26 
                                              %30 = OpTypeStruct %7 %7 %27 %28 %28 %7 %29 %6 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 8 
                                              %35 = OpTypePointer Uniform %6 
                                          u32 %40 = OpConstant 0 
                                              %42 = OpTypeBool 
                                              %43 = OpTypePointer Private %42 
                                Private bool* %44 = OpVariable Private 
                                          f32 %47 = OpConstant 3.674022E-40 
                                          i32 %50 = OpConstant 0 
                                          i32 %51 = OpConstant 1 
                                          i32 %53 = OpConstant -1 
                               Private f32_4* %59 = OpVariable Private 
                                              %60 = OpTypePointer Input %28 
                                 Input f32_3* %61 = OpVariable Input 
                                          i32 %64 = OpConstant 6 
                                              %65 = OpTypePointer Uniform %7 
                                          i32 %83 = OpConstant 2 
                                          i32 %97 = OpConstant 3 
                               Private bool* %104 = OpVariable Private 
                                         f32 %107 = OpConstant 3.674022E-40 
                                        bool %109 = OpConstantFalse 
                                        bool %115 = OpSpecConstantFalse 
                                         u32 %118 = OpConstant 1 
                              Private f32_4* %122 = OpVariable Private 
                                             %161 = OpTypePointer Function %28 
                                         i32 %175 = OpConstant 4 
                                             %176 = OpTypePointer Uniform %28 
                              Private f32_4* %183 = OpVariable Private 
                                Private f32* %191 = OpVariable Private 
                                         f32 %194 = OpConstant 3.674022E-40 
                                         f32 %196 = OpConstant 3.674022E-40 
                                         u32 %198 = OpConstant 2 
                                         f32 %201 = OpConstant 3.674022E-40 
                                             %210 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %211 = OpTypeSampledImage %210 
                                             %212 = OpTypePointer UniformConstant %211 
 UniformConstant read_only Texture3DSampled* %213 = OpVariable UniformConstant 
                                             %224 = OpTypePointer Private %28 
                              Private f32_3* %225 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %240 = OpVariable UniformConstant 
                                             %246 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %247 = OpTypeSampledImage %246 
                                             %248 = OpTypePointer UniformConstant %247 
UniformConstant read_only TextureCubeSampled* %249 = OpVariable UniformConstant 
                                         i32 %269 = OpConstant 5 
                              Private f32_3* %274 = OpVariable Private 
                               Private bool* %279 = OpVariable Private 
                              Private f32_3* %285 = OpVariable Private 
                                             %286 = OpTypePointer Function %6 
                                             %294 = OpTypePointer Private %15 
                              Private f32_2* %295 = OpVariable Private 
                                         f32 %306 = OpConstant 3.674022E-40 
                                         f32 %326 = OpConstant 3.674022E-40 
                                       f32_2 %327 = OpConstantComposite %306 %326 
                              Private f32_4* %352 = OpVariable Private 
                                         f32 %410 = OpConstant 3.674022E-40 
                                         f32 %412 = OpConstant 3.674022E-40 
                               Private bool* %462 = OpVariable Private 
                                Private f32* %474 = OpVariable Private 
                                         i32 %487 = OpConstant 7 
                                         f32 %499 = OpConstant 3.674022E-40 
                                       f32_3 %500 = OpConstantComposite %107 %326 %499 
                                       f32_3 %511 = OpConstantComposite %410 %410 %410 
                                         f32 %513 = OpConstant 3.674022E-40 
                                       f32_3 %514 = OpConstantComposite %513 %513 %513 
                                       f32_3 %521 = OpConstantComposite %306 %306 %306 
                                       f32_3 %542 = OpConstantComposite %107 %107 %107 
                                             %550 = OpTypePointer Output %7 
                               Output f32_4* %551 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %162 = OpVariable Function 
                               Function f32* %287 = OpVariable Function 
                               Function f32* %336 = OpVariable Function 
                               Function f32* %442 = OpVariable Function 
                               Function f32* %467 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                 Private f32* %41 = OpAccessChain %20 %40 
                                                      OpStore %41 %39 
                                 Private f32* %45 = OpAccessChain %20 %40 
                                          f32 %46 = OpLoad %45 
                                         bool %48 = OpFOrdLessThan %46 %47 
                                                      OpStore %44 %48 
                                         bool %49 = OpLoad %44 
                                          i32 %52 = OpSelect %49 %51 %50 
                                          i32 %54 = OpIMul %52 %53 
                                         bool %55 = OpINotEqual %54 %50 
                                                      OpSelectionMerge %57 None 
                                                      OpBranchConditional %55 %56 %57 
                                              %56 = OpLabel 
                                                      OpKill
                                              %57 = OpLabel 
                                        f32_3 %62 = OpLoad %61 
                                        f32_3 %63 = OpVectorShuffle %62 %62 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %32 %64 %51 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_3 %69 = OpFMul %63 %68 
                                        f32_4 %70 = OpLoad %59 
                                        f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                                      OpStore %59 %71 
                               Uniform f32_4* %72 = OpAccessChain %32 %64 %50 
                                        f32_4 %73 = OpLoad %72 
                                        f32_3 %74 = OpVectorShuffle %73 %73 0 1 2 
                                        f32_3 %75 = OpLoad %61 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 0 0 
                                        f32_3 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %59 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFAdd %77 %79 
                                        f32_4 %81 = OpLoad %59 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %59 %82 
                               Uniform f32_4* %84 = OpAccessChain %32 %64 %83 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_3 %87 = OpLoad %61 
                                        f32_3 %88 = OpVectorShuffle %87 %87 2 2 2 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %59 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                        f32_4 %93 = OpLoad %59 
                                        f32_4 %94 = OpVectorShuffle %93 %92 4 5 6 3 
                                                      OpStore %59 %94 
                                        f32_4 %95 = OpLoad %59 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                               Uniform f32_4* %98 = OpAccessChain %32 %64 %97 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_3 %101 = OpFAdd %96 %100 
                                       f32_4 %102 = OpLoad %59 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %59 %103 
                                Uniform f32* %105 = OpAccessChain %32 %51 %40 
                                         f32 %106 = OpLoad %105 
                                        bool %108 = OpFOrdEqual %106 %107 
                                                      OpStore %104 %108 
                                                      OpSelectionMerge %111 None 
                                                      OpBranchConditional %109 %110 %111 
                                             %110 = OpLabel 
                                        bool %112 = OpLoad %104 
                                                      OpSelectionMerge %114 None 
                                                      OpBranchConditional %112 %113 %114 
                                             %113 = OpLabel 
                                                      OpBranch %114 
                                             %114 = OpLabel 
                                                      OpBranch %111 
                                             %111 = OpLabel 
                                                      OpSelectionMerge %117 None 
                                                      OpBranchConditional %115 %116 %219 
                                             %116 = OpLabel 
                                Uniform f32* %119 = OpAccessChain %32 %51 %118 
                                         f32 %120 = OpLoad %119 
                                        bool %121 = OpFOrdEqual %120 %107 
                                                      OpStore %104 %121 
                                       f32_3 %123 = OpLoad %61 
                                       f32_3 %124 = OpVectorShuffle %123 %123 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %32 %83 %51 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFMul %124 %127 
                                       f32_4 %129 = OpLoad %122 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %122 %130 
                              Uniform f32_4* %131 = OpAccessChain %32 %83 %50 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpLoad %61 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 0 0 
                                       f32_3 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %122 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpFAdd %136 %138 
                                       f32_4 %140 = OpLoad %122 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                      OpStore %122 %141 
                              Uniform f32_4* %142 = OpAccessChain %32 %83 %83 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpLoad %61 
                                       f32_3 %146 = OpVectorShuffle %145 %145 2 2 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %122 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFAdd %147 %149 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %153 = OpLoad %122 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                              Uniform f32_4* %155 = OpAccessChain %32 %83 %97 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFAdd %154 %157 
                                       f32_4 %159 = OpLoad %122 
                                       f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                                      OpStore %122 %160 
                                        bool %163 = OpLoad %104 
                                                      OpSelectionMerge %165 None 
                                                      OpBranchConditional %163 %164 %168 
                                             %164 = OpLabel 
                                       f32_4 %166 = OpLoad %122 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                                      OpStore %162 %167 
                                                      OpBranch %165 
                                             %168 = OpLabel 
                                       f32_3 %169 = OpLoad %61 
                                                      OpStore %162 %169 
                                                      OpBranch %165 
                                             %165 = OpLabel 
                                       f32_3 %170 = OpLoad %162 
                                       f32_4 %171 = OpLoad %122 
                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
                                                      OpStore %122 %172 
                                       f32_4 %173 = OpLoad %122 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_3* %177 = OpAccessChain %32 %175 
                                       f32_3 %178 = OpLoad %177 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %174 %179 
                                       f32_4 %181 = OpLoad %122 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %122 %182 
                                       f32_4 %184 = OpLoad %122 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                              Uniform f32_3* %186 = OpAccessChain %32 %97 
                                       f32_3 %187 = OpLoad %186 
                                       f32_3 %188 = OpFMul %185 %187 
                                       f32_4 %189 = OpLoad %183 
                                       f32_4 %190 = OpVectorShuffle %189 %188 0 4 5 6 
                                                      OpStore %183 %190 
                                Private f32* %192 = OpAccessChain %183 %118 
                                         f32 %193 = OpLoad %192 
                                         f32 %195 = OpFMul %193 %194 
                                         f32 %197 = OpFAdd %195 %196 
                                                      OpStore %191 %197 
                                Uniform f32* %199 = OpAccessChain %32 %51 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %202 = OpFMul %200 %201 
                                         f32 %203 = OpFAdd %202 %196 
                                Private f32* %204 = OpAccessChain %122 %40 
                                                      OpStore %204 %203 
                                         f32 %205 = OpLoad %191 
                                Private f32* %206 = OpAccessChain %122 %40 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpExtInst %1 40 %205 %207 
                                Private f32* %209 = OpAccessChain %183 %40 
                                                      OpStore %209 %208 
                  read_only Texture3DSampled %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %183 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 2 3 
                                       f32_4 %217 = OpImageSampleImplicitLod %214 %216 
                                                      OpStore %183 %217 
                                       f32_4 %218 = OpLoad %183 
                                                      OpStore %20 %218 
                                                      OpBranch %117 
                                             %219 = OpLabel 
                                Private f32* %220 = OpAccessChain %20 %40 
                                                      OpStore %220 %107 
                                Private f32* %221 = OpAccessChain %20 %118 
                                                      OpStore %221 %107 
                                Private f32* %222 = OpAccessChain %20 %198 
                                                      OpStore %222 %107 
                                Private f32* %223 = OpAccessChain %20 %22 
                                                      OpStore %223 %107 
                                                      OpBranch %117 
                                             %117 = OpLabel 
                                       f32_4 %226 = OpLoad %20 
                              Uniform f32_4* %227 = OpAccessChain %32 %50 
                                       f32_4 %228 = OpLoad %227 
                                         f32 %229 = OpDot %226 %228 
                                Private f32* %230 = OpAccessChain %225 %40 
                                                      OpStore %230 %229 
                                Private f32* %231 = OpAccessChain %225 %40 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpExtInst %1 43 %232 %47 %107 
                                Private f32* %234 = OpAccessChain %225 %40 
                                                      OpStore %234 %233 
                                       f32_4 %235 = OpLoad %59 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                                       f32_4 %237 = OpLoad %59 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                         f32 %239 = OpDot %236 %238 
                                                      OpStore %191 %239 
                  read_only Texture2DSampled %241 = OpLoad %240 
                                         f32 %242 = OpLoad %191 
                                       f32_2 %243 = OpCompositeConstruct %242 %242 
                                       f32_4 %244 = OpImageSampleImplicitLod %241 %243 
                                         f32 %245 = OpCompositeExtract %244 3 
                                                      OpStore %191 %245 
                read_only TextureCubeSampled %250 = OpLoad %249 
                                       f32_4 %251 = OpLoad %59 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_4 %253 = OpImageSampleImplicitLod %250 %252 
                                         f32 %254 = OpCompositeExtract %253 3 
                                Private f32* %255 = OpAccessChain %59 %40 
                                                      OpStore %255 %254 
                                Private f32* %256 = OpAccessChain %59 %40 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpLoad %191 
                                         f32 %259 = OpFMul %257 %258 
                                Private f32* %260 = OpAccessChain %59 %40 
                                                      OpStore %260 %259 
                                Private f32* %261 = OpAccessChain %225 %40 
                                         f32 %262 = OpLoad %261 
                                Private f32* %263 = OpAccessChain %59 %40 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFMul %262 %264 
                                Private f32* %266 = OpAccessChain %59 %40 
                                                      OpStore %266 %265 
                                       f32_4 %267 = OpLoad %9 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                              Uniform f32_4* %270 = OpAccessChain %32 %269 
                                       f32_4 %271 = OpLoad %270 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_3 %273 = OpFMul %268 %272 
                                                      OpStore %225 %273 
                                       f32_4 %275 = OpLoad %59 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 0 0 
                                       f32_3 %277 = OpLoad %225 
                                       f32_3 %278 = OpFMul %276 %277 
                                                      OpStore %274 %278 
                                Private f32* %280 = OpAccessChain %274 %118 
                                         f32 %281 = OpLoad %280 
                                Private f32* %282 = OpAccessChain %274 %198 
                                         f32 %283 = OpLoad %282 
                                        bool %284 = OpFOrdGreaterThanEqual %281 %283 
                                                      OpStore %279 %284 
                                        bool %288 = OpLoad %279 
                                                      OpSelectionMerge %290 None 
                                                      OpBranchConditional %288 %289 %291 
                                             %289 = OpLabel 
                                                      OpStore %287 %107 
                                                      OpBranch %290 
                                             %291 = OpLabel 
                                                      OpStore %287 %47 
                                                      OpBranch %290 
                                             %290 = OpLabel 
                                         f32 %292 = OpLoad %287 
                                Private f32* %293 = OpAccessChain %285 %40 
                                                      OpStore %293 %292 
                                       f32_3 %296 = OpLoad %225 
                                       f32_2 %297 = OpVectorShuffle %296 %296 1 2 
                                       f32_4 %298 = OpLoad %59 
                                       f32_2 %299 = OpVectorShuffle %298 %298 0 0 
                                       f32_2 %300 = OpFMul %297 %299 
                                       f32_3 %301 = OpLoad %274 
                                       f32_2 %302 = OpVectorShuffle %301 %301 2 1 
                                       f32_2 %303 = OpFNegate %302 
                                       f32_2 %304 = OpFAdd %300 %303 
                                                      OpStore %295 %304 
                                Private f32* %305 = OpAccessChain %122 %40 
                                                      OpStore %305 %107 
                                Private f32* %307 = OpAccessChain %122 %118 
                                                      OpStore %307 %306 
                                       f32_2 %308 = OpLoad %295 
                                       f32_3 %309 = OpLoad %285 
                                       f32_2 %310 = OpVectorShuffle %309 %309 0 0 
                                       f32_2 %311 = OpFMul %308 %310 
                                                      OpStore %295 %311 
                                       f32_3 %312 = OpLoad %225 
                                       f32_2 %313 = OpVectorShuffle %312 %312 2 1 
                                       f32_4 %314 = OpLoad %59 
                                       f32_2 %315 = OpVectorShuffle %314 %314 0 0 
                                       f32_2 %316 = OpFMul %313 %315 
                                       f32_2 %317 = OpLoad %295 
                                       f32_2 %318 = OpFAdd %316 %317 
                                       f32_4 %319 = OpLoad %183 
                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 2 3 
                                                      OpStore %183 %320 
                                       f32_3 %321 = OpLoad %285 
                                       f32_2 %322 = OpVectorShuffle %321 %321 0 0 
                                       f32_4 %323 = OpLoad %122 
                                       f32_2 %324 = OpVectorShuffle %323 %323 0 1 
                                       f32_2 %325 = OpFMul %322 %324 
                                       f32_2 %328 = OpFAdd %325 %327 
                                       f32_4 %329 = OpLoad %183 
                                       f32_4 %330 = OpVectorShuffle %329 %328 0 1 4 5 
                                                      OpStore %183 %330 
                                Private f32* %331 = OpAccessChain %274 %40 
                                         f32 %332 = OpLoad %331 
                                Private f32* %333 = OpAccessChain %183 %40 
                                         f32 %334 = OpLoad %333 
                                        bool %335 = OpFOrdGreaterThanEqual %332 %334 
                                                      OpStore %279 %335 
                                        bool %337 = OpLoad %279 
                                                      OpSelectionMerge %339 None 
                                                      OpBranchConditional %337 %338 %340 
                                             %338 = OpLabel 
                                                      OpStore %336 %107 
                                                      OpBranch %339 
                                             %340 = OpLabel 
                                                      OpStore %336 %47 
                                                      OpBranch %339 
                                             %339 = OpLabel 
                                         f32 %341 = OpLoad %336 
                                Private f32* %342 = OpAccessChain %285 %40 
                                                      OpStore %342 %341 
                                       f32_4 %343 = OpLoad %183 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 3 
                                       f32_3 %345 = OpFNegate %344 
                                       f32_4 %346 = OpLoad %122 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %122 %347 
                                Private f32* %348 = OpAccessChain %274 %40 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFNegate %349 
                                Private f32* %351 = OpAccessChain %122 %22 
                                                      OpStore %351 %350 
                                Private f32* %353 = OpAccessChain %225 %40 
                                         f32 %354 = OpLoad %353 
                                Private f32* %355 = OpAccessChain %59 %40 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpFMul %354 %356 
                                Private f32* %358 = OpAccessChain %122 %40 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %352 %40 
                                                      OpStore %361 %360 
                                       f32_4 %362 = OpLoad %183 
                                       f32_3 %363 = OpVectorShuffle %362 %362 1 2 0 
                                       f32_4 %364 = OpLoad %122 
                                       f32_3 %365 = OpVectorShuffle %364 %364 1 2 3 
                                       f32_3 %366 = OpFAdd %363 %365 
                                       f32_4 %367 = OpLoad %352 
                                       f32_4 %368 = OpVectorShuffle %367 %366 0 4 5 6 
                                                      OpStore %352 %368 
                                       f32_3 %369 = OpLoad %285 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 0 0 
                                       f32_4 %371 = OpLoad %352 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpFMul %370 %372 
                                       f32_4 %374 = OpLoad %183 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 3 
                                       f32_3 %376 = OpFAdd %373 %375 
                                       f32_4 %377 = OpLoad %59 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 1 5 6 
                                                      OpStore %59 %378 
                                Private f32* %379 = OpAccessChain %285 %40 
                                         f32 %380 = OpLoad %379 
                                Private f32* %381 = OpAccessChain %352 %22 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpFMul %380 %382 
                                Private f32* %384 = OpAccessChain %274 %40 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFAdd %383 %385 
                                Private f32* %387 = OpAccessChain %285 %40 
                                                      OpStore %387 %386 
                                Private f32* %388 = OpAccessChain %59 %198 
                                         f32 %389 = OpLoad %388 
                                Private f32* %390 = OpAccessChain %285 %40 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpExtInst %1 37 %389 %391 
                                Private f32* %393 = OpAccessChain %122 %40 
                                                      OpStore %393 %392 
                                Private f32* %394 = OpAccessChain %59 %40 
                                         f32 %395 = OpLoad %394 
                                Private f32* %396 = OpAccessChain %122 %40 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFAdd %395 %398 
                                Private f32* %400 = OpAccessChain %122 %40 
                                                      OpStore %400 %399 
                                Private f32* %401 = OpAccessChain %59 %198 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpFNegate %402 
                                Private f32* %404 = OpAccessChain %285 %40 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFAdd %403 %405 
                                Private f32* %407 = OpAccessChain %285 %40 
                                                      OpStore %407 %406 
                                Private f32* %408 = OpAccessChain %122 %40 
                                         f32 %409 = OpLoad %408 
                                         f32 %411 = OpFMul %409 %410 
                                         f32 %413 = OpFAdd %411 %412 
                                Private f32* %414 = OpAccessChain %295 %40 
                                                      OpStore %414 %413 
                                Private f32* %415 = OpAccessChain %285 %40 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %295 %40 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpFDiv %416 %418 
                                Private f32* %420 = OpAccessChain %285 %40 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %285 %40 
                                         f32 %422 = OpLoad %421 
                                Private f32* %423 = OpAccessChain %59 %22 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpFAdd %422 %424 
                                Private f32* %426 = OpAccessChain %285 %40 
                                                      OpStore %426 %425 
                                Private f32* %427 = OpAccessChain %59 %40 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFAdd %428 %412 
                                Private f32* %430 = OpAccessChain %295 %40 
                                                      OpStore %430 %429 
                                Private f32* %431 = OpAccessChain %122 %40 
                                         f32 %432 = OpLoad %431 
                                Private f32* %433 = OpAccessChain %295 %40 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpFDiv %432 %434 
                                Private f32* %436 = OpAccessChain %295 %40 
                                                      OpStore %436 %435 
                                Private f32* %437 = OpAccessChain %9 %118 
                                         f32 %438 = OpLoad %437 
                                Private f32* %439 = OpAccessChain %9 %198 
                                         f32 %440 = OpLoad %439 
                                        bool %441 = OpFOrdGreaterThanEqual %438 %440 
                                                      OpStore %104 %441 
                                        bool %443 = OpLoad %104 
                                                      OpSelectionMerge %445 None 
                                                      OpBranchConditional %443 %444 %446 
                                             %444 = OpLabel 
                                                      OpStore %442 %107 
                                                      OpBranch %445 
                                             %446 = OpLabel 
                                                      OpStore %442 %47 
                                                      OpBranch %445 
                                             %445 = OpLabel 
                                         f32 %447 = OpLoad %442 
                                                      OpStore %191 %447 
                                Private f32* %448 = OpAccessChain %9 %198 
                                         f32 %449 = OpLoad %448 
                                         f32 %450 = OpFNegate %449 
                                Private f32* %451 = OpAccessChain %9 %118 
                                         f32 %452 = OpLoad %451 
                                         f32 %453 = OpFAdd %450 %452 
                                Private f32* %454 = OpAccessChain %122 %40 
                                                      OpStore %454 %453 
                                         f32 %455 = OpLoad %191 
                                Private f32* %456 = OpAccessChain %122 %40 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpFMul %455 %457 
                                Private f32* %459 = OpAccessChain %9 %198 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpFAdd %458 %460 
                                                      OpStore %191 %461 
                                Private f32* %463 = OpAccessChain %9 %40 
                                         f32 %464 = OpLoad %463 
                                         f32 %465 = OpLoad %191 
                                        bool %466 = OpFOrdGreaterThanEqual %464 %465 
                                                      OpStore %462 %466 
                                        bool %468 = OpLoad %462 
                                                      OpSelectionMerge %470 None 
                                                      OpBranchConditional %468 %469 %471 
                                             %469 = OpLabel 
                                                      OpStore %467 %107 
                                                      OpBranch %470 
                                             %471 = OpLabel 
                                                      OpStore %467 %47 
                                                      OpBranch %470 
                                             %470 = OpLabel 
                                         f32 %472 = OpLoad %467 
                                Private f32* %473 = OpAccessChain %122 %40 
                                                      OpStore %473 %472 
                                Private f32* %475 = OpAccessChain %9 %40 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpLoad %191 
                                         f32 %478 = OpFNegate %477 
                                         f32 %479 = OpFAdd %476 %478 
                                                      OpStore %474 %479 
                                Private f32* %480 = OpAccessChain %122 %40 
                                         f32 %481 = OpLoad %480 
                                         f32 %482 = OpLoad %474 
                                         f32 %483 = OpFMul %481 %482 
                                         f32 %484 = OpLoad %191 
                                         f32 %485 = OpFAdd %483 %484 
                                                      OpStore %191 %485 
                                         f32 %486 = OpLoad %191 
                                Uniform f32* %488 = OpAccessChain %32 %487 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpFMul %486 %489 
                                                      OpStore %191 %490 
                                         f32 %491 = OpLoad %191 
                                Private f32* %492 = OpAccessChain %59 %40 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpExtInst %1 37 %491 %493 
                                Private f32* %495 = OpAccessChain %59 %40 
                                                      OpStore %495 %494 
                                       f32_3 %496 = OpLoad %285 
                                       f32_3 %497 = OpVectorShuffle %496 %496 0 0 0 
                                       f32_3 %498 = OpExtInst %1 4 %497 
                                       f32_3 %501 = OpFAdd %498 %500 
                                       f32_4 %502 = OpLoad %122 
                                       f32_4 %503 = OpVectorShuffle %502 %501 4 5 6 3 
                                                      OpStore %122 %503 
                                       f32_4 %504 = OpLoad %122 
                                       f32_3 %505 = OpVectorShuffle %504 %504 0 1 2 
                                       f32_3 %506 = OpExtInst %1 10 %505 
                                       f32_4 %507 = OpLoad %122 
                                       f32_4 %508 = OpVectorShuffle %507 %506 4 5 6 3 
                                                      OpStore %122 %508 
                                       f32_4 %509 = OpLoad %122 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                       f32_3 %512 = OpFMul %510 %511 
                                       f32_3 %515 = OpFAdd %512 %514 
                                       f32_4 %516 = OpLoad %122 
                                       f32_4 %517 = OpVectorShuffle %516 %515 4 5 6 3 
                                                      OpStore %122 %517 
                                       f32_4 %518 = OpLoad %122 
                                       f32_3 %519 = OpVectorShuffle %518 %518 0 1 2 
                                       f32_3 %520 = OpExtInst %1 4 %519 
                                       f32_3 %522 = OpFAdd %520 %521 
                                       f32_4 %523 = OpLoad %122 
                                       f32_4 %524 = OpVectorShuffle %523 %522 4 5 6 3 
                                                      OpStore %122 %524 
                                       f32_4 %525 = OpLoad %122 
                                       f32_3 %526 = OpVectorShuffle %525 %525 0 1 2 
                                       f32_3 %527 = OpCompositeConstruct %47 %47 %47 
                                       f32_3 %528 = OpCompositeConstruct %107 %107 %107 
                                       f32_3 %529 = OpExtInst %1 43 %526 %527 %528 
                                       f32_4 %530 = OpLoad %122 
                                       f32_4 %531 = OpVectorShuffle %530 %529 4 5 6 3 
                                                      OpStore %122 %531 
                                       f32_4 %532 = OpLoad %122 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpFAdd %533 %521 
                                       f32_4 %535 = OpLoad %122 
                                       f32_4 %536 = OpVectorShuffle %535 %534 4 5 6 3 
                                                      OpStore %122 %536 
                                       f32_2 %537 = OpLoad %295 
                                       f32_3 %538 = OpVectorShuffle %537 %537 0 0 0 
                                       f32_4 %539 = OpLoad %122 
                                       f32_3 %540 = OpVectorShuffle %539 %539 0 1 2 
                                       f32_3 %541 = OpFMul %538 %540 
                                       f32_3 %543 = OpFAdd %541 %542 
                                                      OpStore %285 %543 
                                       f32_3 %544 = OpLoad %285 
                                       f32_4 %545 = OpLoad %59 
                                       f32_3 %546 = OpVectorShuffle %545 %545 0 0 0 
                                       f32_3 %547 = OpFMul %544 %546 
                                       f32_4 %548 = OpLoad %9 
                                       f32_4 %549 = OpVectorShuffle %548 %547 4 5 6 3 
                                                      OpStore %9 %549 
                                       f32_4 %552 = OpLoad %9 
                                                      OpStore %551 %552 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb11 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb11){
        u_xlatb11 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb11)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat11 = u_xlat2.y * 0.25 + 0.75;
        u_xlat16 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat16, u_xlat11);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat11 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xy);
    u_xlat1.x = u_xlat11 * u_xlat10_2.w;
    u_xlat6.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat2.xyw = u_xlat1.xxx * u_xlat6.yzx;
    u_xlatb6 = u_xlat2.x>=u_xlat2.y;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat3.xy = u_xlat2.yx;
    u_xlat3.z = float(-1.0);
    u_xlat3.w = float(0.666666687);
    u_xlat4.xy = u_xlat6.yz * u_xlat1.xx + (-u_xlat3.xy);
    u_xlat4.z = float(1.0);
    u_xlat4.w = float(-1.0);
    u_xlat1 = u_xlat6.xxxx * u_xlat4 + u_xlat3;
    u_xlatb3 = u_xlat2.w>=u_xlat1.x;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat2.xyz = u_xlat1.xyw;
    u_xlat1.xyw = u_xlat2.wyx;
    u_xlat1 = (-u_xlat2) + u_xlat1;
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + u_xlat2;
    u_xlat2.x = min(u_xlat1.y, u_xlat1.w);
    u_xlat2.x = u_xlat1.x + (-u_xlat2.x);
    u_xlat6.x = (-u_xlat1.y) + u_xlat1.w;
    u_xlat16 = u_xlat2.x * 6.0 + 1.00000001e-010;
    u_xlat6.x = u_xlat6.x / u_xlat16;
    u_xlat6.x = u_xlat6.x + u_xlat1.z;
    u_xlat11 = u_xlat1.x + 1.00000001e-010;
    u_xlat11 = u_xlat2.x / u_xlat11;
    u_xlatb16 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat16_5 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat5 = u_xlat16 * u_xlat16_5 + u_xlat10_0.z;
    u_xlatb10 = u_xlat10_0.x>=u_xlat5;
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat5) + u_xlat10_0.x;
    u_xlat0 = u_xlat10 * u_xlat0 + u_xlat5;
    u_xlat0 = u_xlat0 * _MaxValue;
    u_xlat0 = min(u_xlat0, u_xlat1.x);
    u_xlat1.xyw = abs(u_xlat6.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyw = fract(u_xlat1.xyw);
    u_xlat1.xyw = u_xlat1.xyw * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyw = abs(u_xlat1.xyw) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyw = clamp(u_xlat1.xyw, 0.0, 1.0);
    u_xlat1.xyw = u_xlat1.xyw + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyw + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %93 %94 %107 %138 %144 %147 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %107 Location 107 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %147 Location 147 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %89 = OpTypePointer Output %7 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                                Output f32_2* %93 = OpVariable Output 
                                 Input f32_4* %94 = OpVariable Input 
                                             %105 = OpTypeVector %6 3 
                                             %106 = OpTypePointer Input %105 
                                Input f32_3* %107 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                                             %114 = OpTypePointer Private %6 
                                         u32 %127 = OpConstant 2 
                                Private f32* %129 = OpVariable Private 
                                             %137 = OpTypePointer Output %105 
                               Output f32_3* %138 = OpVariable Output 
                               Output f32_3* %144 = OpVariable Output 
                               Output f32_4* %147 = OpVariable Output 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %36 %24 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %36 %23 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %36 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %82 = OpAccessChain %21 %36 %46 
                                        f32_4 %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %44 
                                        f32_4 %85 = OpVectorShuffle %84 %84 3 3 3 3 
                                        f32_4 %86 = OpFMul %83 %85 
                                        f32_4 %87 = OpLoad %57 
                                        f32_4 %88 = OpFAdd %86 %87 
                                Output f32_4* %90 = OpAccessChain %81 %23 
                                                      OpStore %90 %88 
                                        f32_4 %95 = OpLoad %94 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                               Uniform f32_4* %97 = OpAccessChain %21 %46 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_2 %100 = OpFMul %96 %99 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 2 3 
                                       f32_2 %104 = OpFAdd %100 %103 
                                                      OpStore %93 %104 
                                       f32_3 %108 = OpLoad %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %23 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %115 = OpAccessChain %44 %113 
                                                      OpStore %115 %112 
                                       f32_3 %116 = OpLoad %107 
                              Uniform f32_4* %117 = OpAccessChain %21 %24 %24 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %116 %119 
                                Private f32* %121 = OpAccessChain %44 %77 
                                                      OpStore %121 %120 
                                       f32_3 %122 = OpLoad %107 
                              Uniform f32_4* %123 = OpAccessChain %21 %24 %36 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %128 = OpAccessChain %44 %127 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %44 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %44 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %136 = OpExtInst %1 32 %135 
                                                      OpStore %129 %136 
                                         f32 %139 = OpLoad %129 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %140 %142 
                                                      OpStore %138 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore %144 %146 
                                       f32_4 %148 = OpLoad %9 
                                                      OpStore %147 %148 
                                 Output f32* %150 = OpAccessChain %81 %23 %77 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %81 %23 %77 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 536
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %61 %533 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 RelaxedPrecision 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 RelaxedPrecision 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpMemberDecorate %30 8 RelaxedPrecision 
                                                      OpMemberDecorate %30 8 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %61 Location 61 
                                                      OpDecorate %115 SpecId 115 
                                                      OpDecorate %215 DescriptorSet 215 
                                                      OpDecorate %215 Binding 215 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %237 DescriptorSet 237 
                                                      OpDecorate %237 Binding 237 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %533 Location 533 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeArray %7 %26 
                                              %30 = OpTypeStruct %7 %7 %27 %28 %28 %7 %29 %6 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 8 
                                              %35 = OpTypePointer Uniform %6 
                                          u32 %40 = OpConstant 0 
                                              %42 = OpTypeBool 
                                              %43 = OpTypePointer Private %42 
                                Private bool* %44 = OpVariable Private 
                                          f32 %47 = OpConstant 3.674022E-40 
                                          i32 %50 = OpConstant 0 
                                          i32 %51 = OpConstant 1 
                                          i32 %53 = OpConstant -1 
                               Private f32_4* %59 = OpVariable Private 
                                              %60 = OpTypePointer Input %28 
                                 Input f32_3* %61 = OpVariable Input 
                                          i32 %64 = OpConstant 6 
                                              %65 = OpTypePointer Uniform %7 
                                          i32 %83 = OpConstant 2 
                                          i32 %97 = OpConstant 3 
                               Private bool* %104 = OpVariable Private 
                                         f32 %107 = OpConstant 3.674022E-40 
                                        bool %109 = OpConstantFalse 
                                        bool %115 = OpSpecConstantFalse 
                                         u32 %118 = OpConstant 1 
                              Private f32_4* %122 = OpVariable Private 
                                             %161 = OpTypePointer Function %28 
                                         i32 %175 = OpConstant 4 
                                             %176 = OpTypePointer Uniform %28 
                              Private f32_4* %183 = OpVariable Private 
                                             %191 = OpTypePointer Private %15 
                              Private f32_2* %192 = OpVariable Private 
                                         f32 %195 = OpConstant 3.674022E-40 
                                         f32 %197 = OpConstant 3.674022E-40 
                                Private f32* %200 = OpVariable Private 
                                         u32 %201 = OpConstant 2 
                                         f32 %204 = OpConstant 3.674022E-40 
                                             %212 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %213 = OpTypeSampledImage %212 
                                             %214 = OpTypePointer UniformConstant %213 
 UniformConstant read_only Texture3DSampled* %215 = OpVariable UniformConstant 
                                             %226 = OpTypePointer Private %28 
                              Private f32_3* %227 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %237 = OpVariable UniformConstant 
                                         i32 %252 = OpConstant 5 
                              Private f32_3* %257 = OpVariable Private 
                               Private bool* %262 = OpVariable Private 
                              Private f32_3* %268 = OpVariable Private 
                                             %269 = OpTypePointer Function %6 
                                         f32 %287 = OpConstant 3.674022E-40 
                                         f32 %307 = OpConstant 3.674022E-40 
                                       f32_2 %308 = OpConstantComposite %287 %307 
                              Private f32_4* %333 = OpVariable Private 
                                         f32 %391 = OpConstant 3.674022E-40 
                                         f32 %393 = OpConstant 3.674022E-40 
                               Private bool* %418 = OpVariable Private 
                               Private bool* %444 = OpVariable Private 
                                Private f32* %456 = OpVariable Private 
                                         i32 %469 = OpConstant 7 
                                         f32 %481 = OpConstant 3.674022E-40 
                                       f32_3 %482 = OpConstantComposite %107 %307 %481 
                                       f32_3 %493 = OpConstantComposite %391 %391 %391 
                                         f32 %495 = OpConstant 3.674022E-40 
                                       f32_3 %496 = OpConstantComposite %495 %495 %495 
                                       f32_3 %503 = OpConstantComposite %287 %287 %287 
                                       f32_3 %524 = OpConstantComposite %107 %107 %107 
                                             %532 = OpTypePointer Output %7 
                               Output f32_4* %533 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %162 = OpVariable Function 
                               Function f32* %270 = OpVariable Function 
                               Function f32* %317 = OpVariable Function 
                               Function f32* %424 = OpVariable Function 
                               Function f32* %449 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                 Private f32* %41 = OpAccessChain %20 %40 
                                                      OpStore %41 %39 
                                 Private f32* %45 = OpAccessChain %20 %40 
                                          f32 %46 = OpLoad %45 
                                         bool %48 = OpFOrdLessThan %46 %47 
                                                      OpStore %44 %48 
                                         bool %49 = OpLoad %44 
                                          i32 %52 = OpSelect %49 %51 %50 
                                          i32 %54 = OpIMul %52 %53 
                                         bool %55 = OpINotEqual %54 %50 
                                                      OpSelectionMerge %57 None 
                                                      OpBranchConditional %55 %56 %57 
                                              %56 = OpLabel 
                                                      OpKill
                                              %57 = OpLabel 
                                        f32_3 %62 = OpLoad %61 
                                        f32_2 %63 = OpVectorShuffle %62 %62 1 1 
                               Uniform f32_4* %66 = OpAccessChain %32 %64 %51 
                                        f32_4 %67 = OpLoad %66 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_2 %69 = OpFMul %63 %68 
                                        f32_4 %70 = OpLoad %59 
                                        f32_4 %71 = OpVectorShuffle %70 %69 4 5 2 3 
                                                      OpStore %59 %71 
                               Uniform f32_4* %72 = OpAccessChain %32 %64 %50 
                                        f32_4 %73 = OpLoad %72 
                                        f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                                        f32_3 %75 = OpLoad %61 
                                        f32_2 %76 = OpVectorShuffle %75 %75 0 0 
                                        f32_2 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %59 
                                        f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                                        f32_2 %80 = OpFAdd %77 %79 
                                        f32_4 %81 = OpLoad %59 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 2 3 
                                                      OpStore %59 %82 
                               Uniform f32_4* %84 = OpAccessChain %32 %64 %83 
                                        f32_4 %85 = OpLoad %84 
                                        f32_2 %86 = OpVectorShuffle %85 %85 0 1 
                                        f32_3 %87 = OpLoad %61 
                                        f32_2 %88 = OpVectorShuffle %87 %87 2 2 
                                        f32_2 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %59 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                                        f32_2 %92 = OpFAdd %89 %91 
                                        f32_4 %93 = OpLoad %59 
                                        f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                      OpStore %59 %94 
                                        f32_4 %95 = OpLoad %59 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                               Uniform f32_4* %98 = OpAccessChain %32 %64 %97 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFAdd %96 %100 
                                       f32_4 %102 = OpLoad %59 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
                                                      OpStore %59 %103 
                                Uniform f32* %105 = OpAccessChain %32 %51 %40 
                                         f32 %106 = OpLoad %105 
                                        bool %108 = OpFOrdEqual %106 %107 
                                                      OpStore %104 %108 
                                                      OpSelectionMerge %111 None 
                                                      OpBranchConditional %109 %110 %111 
                                             %110 = OpLabel 
                                        bool %112 = OpLoad %104 
                                                      OpSelectionMerge %114 None 
                                                      OpBranchConditional %112 %113 %114 
                                             %113 = OpLabel 
                                                      OpBranch %114 
                                             %114 = OpLabel 
                                                      OpBranch %111 
                                             %111 = OpLabel 
                                                      OpSelectionMerge %117 None 
                                                      OpBranchConditional %115 %116 %221 
                                             %116 = OpLabel 
                                Uniform f32* %119 = OpAccessChain %32 %51 %118 
                                         f32 %120 = OpLoad %119 
                                        bool %121 = OpFOrdEqual %120 %107 
                                                      OpStore %104 %121 
                                       f32_3 %123 = OpLoad %61 
                                       f32_3 %124 = OpVectorShuffle %123 %123 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %32 %83 %51 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFMul %124 %127 
                                       f32_4 %129 = OpLoad %122 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %122 %130 
                              Uniform f32_4* %131 = OpAccessChain %32 %83 %50 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpLoad %61 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 0 0 
                                       f32_3 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %122 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpFAdd %136 %138 
                                       f32_4 %140 = OpLoad %122 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                      OpStore %122 %141 
                              Uniform f32_4* %142 = OpAccessChain %32 %83 %83 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpLoad %61 
                                       f32_3 %146 = OpVectorShuffle %145 %145 2 2 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %122 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFAdd %147 %149 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %153 = OpLoad %122 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                              Uniform f32_4* %155 = OpAccessChain %32 %83 %97 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFAdd %154 %157 
                                       f32_4 %159 = OpLoad %122 
                                       f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                                      OpStore %122 %160 
                                        bool %163 = OpLoad %104 
                                                      OpSelectionMerge %165 None 
                                                      OpBranchConditional %163 %164 %168 
                                             %164 = OpLabel 
                                       f32_4 %166 = OpLoad %122 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                                      OpStore %162 %167 
                                                      OpBranch %165 
                                             %168 = OpLabel 
                                       f32_3 %169 = OpLoad %61 
                                                      OpStore %162 %169 
                                                      OpBranch %165 
                                             %165 = OpLabel 
                                       f32_3 %170 = OpLoad %162 
                                       f32_4 %171 = OpLoad %122 
                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
                                                      OpStore %122 %172 
                                       f32_4 %173 = OpLoad %122 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_3* %177 = OpAccessChain %32 %175 
                                       f32_3 %178 = OpLoad %177 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %174 %179 
                                       f32_4 %181 = OpLoad %122 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %122 %182 
                                       f32_4 %184 = OpLoad %122 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                              Uniform f32_3* %186 = OpAccessChain %32 %97 
                                       f32_3 %187 = OpLoad %186 
                                       f32_3 %188 = OpFMul %185 %187 
                                       f32_4 %189 = OpLoad %183 
                                       f32_4 %190 = OpVectorShuffle %189 %188 0 4 5 6 
                                                      OpStore %183 %190 
                                Private f32* %193 = OpAccessChain %183 %118 
                                         f32 %194 = OpLoad %193 
                                         f32 %196 = OpFMul %194 %195 
                                         f32 %198 = OpFAdd %196 %197 
                                Private f32* %199 = OpAccessChain %192 %40 
                                                      OpStore %199 %198 
                                Uniform f32* %202 = OpAccessChain %32 %51 %201 
                                         f32 %203 = OpLoad %202 
                                         f32 %205 = OpFMul %203 %204 
                                         f32 %206 = OpFAdd %205 %197 
                                                      OpStore %200 %206 
                                         f32 %207 = OpLoad %200 
                                Private f32* %208 = OpAccessChain %192 %40 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpExtInst %1 40 %207 %209 
                                Private f32* %211 = OpAccessChain %183 %40 
                                                      OpStore %211 %210 
                  read_only Texture3DSampled %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %183 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 2 3 
                                       f32_4 %219 = OpImageSampleImplicitLod %216 %218 
                                                      OpStore %183 %219 
                                       f32_4 %220 = OpLoad %183 
                                                      OpStore %20 %220 
                                                      OpBranch %117 
                                             %221 = OpLabel 
                                Private f32* %222 = OpAccessChain %20 %40 
                                                      OpStore %222 %107 
                                Private f32* %223 = OpAccessChain %20 %118 
                                                      OpStore %223 %107 
                                Private f32* %224 = OpAccessChain %20 %201 
                                                      OpStore %224 %107 
                                Private f32* %225 = OpAccessChain %20 %22 
                                                      OpStore %225 %107 
                                                      OpBranch %117 
                                             %117 = OpLabel 
                                       f32_4 %228 = OpLoad %20 
                              Uniform f32_4* %229 = OpAccessChain %32 %50 
                                       f32_4 %230 = OpLoad %229 
                                         f32 %231 = OpDot %228 %230 
                                Private f32* %232 = OpAccessChain %227 %40 
                                                      OpStore %232 %231 
                                Private f32* %233 = OpAccessChain %227 %40 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpExtInst %1 43 %234 %47 %107 
                                Private f32* %236 = OpAccessChain %227 %40 
                                                      OpStore %236 %235 
                  read_only Texture2DSampled %238 = OpLoad %237 
                                       f32_4 %239 = OpLoad %59 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                       f32_4 %241 = OpImageSampleImplicitLod %238 %240 
                                         f32 %242 = OpCompositeExtract %241 3 
                                Private f32* %243 = OpAccessChain %59 %40 
                                                      OpStore %243 %242 
                                Private f32* %244 = OpAccessChain %227 %40 
                                         f32 %245 = OpLoad %244 
                                Private f32* %246 = OpAccessChain %59 %40 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpFMul %245 %247 
                                Private f32* %249 = OpAccessChain %59 %40 
                                                      OpStore %249 %248 
                                       f32_4 %250 = OpLoad %9 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                              Uniform f32_4* %253 = OpAccessChain %32 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %251 %255 
                                                      OpStore %227 %256 
                                       f32_4 %258 = OpLoad %59 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 0 0 
                                       f32_3 %260 = OpLoad %227 
                                       f32_3 %261 = OpFMul %259 %260 
                                                      OpStore %257 %261 
                                Private f32* %263 = OpAccessChain %257 %118 
                                         f32 %264 = OpLoad %263 
                                Private f32* %265 = OpAccessChain %257 %201 
                                         f32 %266 = OpLoad %265 
                                        bool %267 = OpFOrdGreaterThanEqual %264 %266 
                                                      OpStore %262 %267 
                                        bool %271 = OpLoad %262 
                                                      OpSelectionMerge %273 None 
                                                      OpBranchConditional %271 %272 %274 
                                             %272 = OpLabel 
                                                      OpStore %270 %107 
                                                      OpBranch %273 
                                             %274 = OpLabel 
                                                      OpStore %270 %47 
                                                      OpBranch %273 
                                             %273 = OpLabel 
                                         f32 %275 = OpLoad %270 
                                Private f32* %276 = OpAccessChain %268 %40 
                                                      OpStore %276 %275 
                                       f32_3 %277 = OpLoad %227 
                                       f32_2 %278 = OpVectorShuffle %277 %277 1 2 
                                       f32_4 %279 = OpLoad %59 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 0 
                                       f32_2 %281 = OpFMul %278 %280 
                                       f32_3 %282 = OpLoad %257 
                                       f32_2 %283 = OpVectorShuffle %282 %282 2 1 
                                       f32_2 %284 = OpFNegate %283 
                                       f32_2 %285 = OpFAdd %281 %284 
                                                      OpStore %192 %285 
                                Private f32* %286 = OpAccessChain %122 %40 
                                                      OpStore %286 %107 
                                Private f32* %288 = OpAccessChain %122 %118 
                                                      OpStore %288 %287 
                                       f32_2 %289 = OpLoad %192 
                                       f32_3 %290 = OpLoad %268 
                                       f32_2 %291 = OpVectorShuffle %290 %290 0 0 
                                       f32_2 %292 = OpFMul %289 %291 
                                                      OpStore %192 %292 
                                       f32_3 %293 = OpLoad %227 
                                       f32_2 %294 = OpVectorShuffle %293 %293 2 1 
                                       f32_4 %295 = OpLoad %59 
                                       f32_2 %296 = OpVectorShuffle %295 %295 0 0 
                                       f32_2 %297 = OpFMul %294 %296 
                                       f32_2 %298 = OpLoad %192 
                                       f32_2 %299 = OpFAdd %297 %298 
                                       f32_4 %300 = OpLoad %183 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 2 3 
                                                      OpStore %183 %301 
                                       f32_3 %302 = OpLoad %268 
                                       f32_2 %303 = OpVectorShuffle %302 %302 0 0 
                                       f32_4 %304 = OpLoad %122 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                       f32_2 %306 = OpFMul %303 %305 
                                       f32_2 %309 = OpFAdd %306 %308 
                                       f32_4 %310 = OpLoad %183 
                                       f32_4 %311 = OpVectorShuffle %310 %309 0 1 4 5 
                                                      OpStore %183 %311 
                                Private f32* %312 = OpAccessChain %257 %40 
                                         f32 %313 = OpLoad %312 
                                Private f32* %314 = OpAccessChain %183 %40 
                                         f32 %315 = OpLoad %314 
                                        bool %316 = OpFOrdGreaterThanEqual %313 %315 
                                                      OpStore %262 %316 
                                        bool %318 = OpLoad %262 
                                                      OpSelectionMerge %320 None 
                                                      OpBranchConditional %318 %319 %321 
                                             %319 = OpLabel 
                                                      OpStore %317 %107 
                                                      OpBranch %320 
                                             %321 = OpLabel 
                                                      OpStore %317 %47 
                                                      OpBranch %320 
                                             %320 = OpLabel 
                                         f32 %322 = OpLoad %317 
                                Private f32* %323 = OpAccessChain %268 %40 
                                                      OpStore %323 %322 
                                       f32_4 %324 = OpLoad %183 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 3 
                                       f32_3 %326 = OpFNegate %325 
                                       f32_4 %327 = OpLoad %122 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %122 %328 
                                Private f32* %329 = OpAccessChain %257 %40 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFNegate %330 
                                Private f32* %332 = OpAccessChain %122 %22 
                                                      OpStore %332 %331 
                                Private f32* %334 = OpAccessChain %227 %40 
                                         f32 %335 = OpLoad %334 
                                Private f32* %336 = OpAccessChain %59 %40 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpFMul %335 %337 
                                Private f32* %339 = OpAccessChain %122 %40 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFAdd %338 %340 
                                Private f32* %342 = OpAccessChain %333 %40 
                                                      OpStore %342 %341 
                                       f32_4 %343 = OpLoad %183 
                                       f32_3 %344 = OpVectorShuffle %343 %343 1 2 0 
                                       f32_4 %345 = OpLoad %122 
                                       f32_3 %346 = OpVectorShuffle %345 %345 1 2 3 
                                       f32_3 %347 = OpFAdd %344 %346 
                                       f32_4 %348 = OpLoad %333 
                                       f32_4 %349 = OpVectorShuffle %348 %347 0 4 5 6 
                                                      OpStore %333 %349 
                                       f32_3 %350 = OpLoad %268 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 0 0 
                                       f32_4 %352 = OpLoad %333 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_4 %355 = OpLoad %183 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 3 
                                       f32_3 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %59 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 1 5 6 
                                                      OpStore %59 %359 
                                Private f32* %360 = OpAccessChain %268 %40 
                                         f32 %361 = OpLoad %360 
                                Private f32* %362 = OpAccessChain %333 %22 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFMul %361 %363 
                                Private f32* %365 = OpAccessChain %257 %40 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpFAdd %364 %366 
                                Private f32* %368 = OpAccessChain %268 %40 
                                                      OpStore %368 %367 
                                Private f32* %369 = OpAccessChain %59 %201 
                                         f32 %370 = OpLoad %369 
                                Private f32* %371 = OpAccessChain %268 %40 
                                         f32 %372 = OpLoad %371 
                                         f32 %373 = OpExtInst %1 37 %370 %372 
                                Private f32* %374 = OpAccessChain %122 %40 
                                                      OpStore %374 %373 
                                Private f32* %375 = OpAccessChain %59 %40 
                                         f32 %376 = OpLoad %375 
                                Private f32* %377 = OpAccessChain %122 %40 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpFNegate %378 
                                         f32 %380 = OpFAdd %376 %379 
                                Private f32* %381 = OpAccessChain %122 %40 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %59 %201 
                                         f32 %383 = OpLoad %382 
                                         f32 %384 = OpFNegate %383 
                                Private f32* %385 = OpAccessChain %268 %40 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFAdd %384 %386 
                                Private f32* %388 = OpAccessChain %268 %40 
                                                      OpStore %388 %387 
                                Private f32* %389 = OpAccessChain %122 %40 
                                         f32 %390 = OpLoad %389 
                                         f32 %392 = OpFMul %390 %391 
                                         f32 %394 = OpFAdd %392 %393 
                                Private f32* %395 = OpAccessChain %192 %40 
                                                      OpStore %395 %394 
                                Private f32* %396 = OpAccessChain %268 %40 
                                         f32 %397 = OpLoad %396 
                                Private f32* %398 = OpAccessChain %192 %40 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFDiv %397 %399 
                                Private f32* %401 = OpAccessChain %268 %40 
                                                      OpStore %401 %400 
                                Private f32* %402 = OpAccessChain %268 %40 
                                         f32 %403 = OpLoad %402 
                                Private f32* %404 = OpAccessChain %59 %22 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFAdd %403 %405 
                                Private f32* %407 = OpAccessChain %268 %40 
                                                      OpStore %407 %406 
                                Private f32* %408 = OpAccessChain %59 %40 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpFAdd %409 %393 
                                Private f32* %411 = OpAccessChain %192 %40 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %122 %40 
                                         f32 %413 = OpLoad %412 
                                Private f32* %414 = OpAccessChain %192 %40 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpFDiv %413 %415 
                                Private f32* %417 = OpAccessChain %192 %40 
                                                      OpStore %417 %416 
                                Private f32* %419 = OpAccessChain %9 %118 
                                         f32 %420 = OpLoad %419 
                                Private f32* %421 = OpAccessChain %9 %201 
                                         f32 %422 = OpLoad %421 
                                        bool %423 = OpFOrdGreaterThanEqual %420 %422 
                                                      OpStore %418 %423 
                                        bool %425 = OpLoad %418 
                                                      OpSelectionMerge %427 None 
                                                      OpBranchConditional %425 %426 %428 
                                             %426 = OpLabel 
                                                      OpStore %424 %107 
                                                      OpBranch %427 
                                             %428 = OpLabel 
                                                      OpStore %424 %47 
                                                      OpBranch %427 
                                             %427 = OpLabel 
                                         f32 %429 = OpLoad %424 
                                                      OpStore %200 %429 
                                Private f32* %430 = OpAccessChain %9 %201 
                                         f32 %431 = OpLoad %430 
                                         f32 %432 = OpFNegate %431 
                                Private f32* %433 = OpAccessChain %9 %118 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpFAdd %432 %434 
                                Private f32* %436 = OpAccessChain %122 %40 
                                                      OpStore %436 %435 
                                         f32 %437 = OpLoad %200 
                                Private f32* %438 = OpAccessChain %122 %40 
                                         f32 %439 = OpLoad %438 
                                         f32 %440 = OpFMul %437 %439 
                                Private f32* %441 = OpAccessChain %9 %201 
                                         f32 %442 = OpLoad %441 
                                         f32 %443 = OpFAdd %440 %442 
                                                      OpStore %200 %443 
                                Private f32* %445 = OpAccessChain %9 %40 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpLoad %200 
                                        bool %448 = OpFOrdGreaterThanEqual %446 %447 
                                                      OpStore %444 %448 
                                        bool %450 = OpLoad %444 
                                                      OpSelectionMerge %452 None 
                                                      OpBranchConditional %450 %451 %453 
                                             %451 = OpLabel 
                                                      OpStore %449 %107 
                                                      OpBranch %452 
                                             %453 = OpLabel 
                                                      OpStore %449 %47 
                                                      OpBranch %452 
                                             %452 = OpLabel 
                                         f32 %454 = OpLoad %449 
                                Private f32* %455 = OpAccessChain %122 %40 
                                                      OpStore %455 %454 
                                Private f32* %457 = OpAccessChain %9 %40 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpLoad %200 
                                         f32 %460 = OpFNegate %459 
                                         f32 %461 = OpFAdd %458 %460 
                                                      OpStore %456 %461 
                                Private f32* %462 = OpAccessChain %122 %40 
                                         f32 %463 = OpLoad %462 
                                         f32 %464 = OpLoad %456 
                                         f32 %465 = OpFMul %463 %464 
                                         f32 %466 = OpLoad %200 
                                         f32 %467 = OpFAdd %465 %466 
                                                      OpStore %200 %467 
                                         f32 %468 = OpLoad %200 
                                Uniform f32* %470 = OpAccessChain %32 %469 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFMul %468 %471 
                                                      OpStore %200 %472 
                                         f32 %473 = OpLoad %200 
                                Private f32* %474 = OpAccessChain %59 %40 
                                         f32 %475 = OpLoad %474 
                                         f32 %476 = OpExtInst %1 37 %473 %475 
                                Private f32* %477 = OpAccessChain %59 %40 
                                                      OpStore %477 %476 
                                       f32_3 %478 = OpLoad %268 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 0 0 
                                       f32_3 %480 = OpExtInst %1 4 %479 
                                       f32_3 %483 = OpFAdd %480 %482 
                                       f32_4 %484 = OpLoad %122 
                                       f32_4 %485 = OpVectorShuffle %484 %483 4 5 6 3 
                                                      OpStore %122 %485 
                                       f32_4 %486 = OpLoad %122 
                                       f32_3 %487 = OpVectorShuffle %486 %486 0 1 2 
                                       f32_3 %488 = OpExtInst %1 10 %487 
                                       f32_4 %489 = OpLoad %122 
                                       f32_4 %490 = OpVectorShuffle %489 %488 4 5 6 3 
                                                      OpStore %122 %490 
                                       f32_4 %491 = OpLoad %122 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                       f32_3 %494 = OpFMul %492 %493 
                                       f32_3 %497 = OpFAdd %494 %496 
                                       f32_4 %498 = OpLoad %122 
                                       f32_4 %499 = OpVectorShuffle %498 %497 4 5 6 3 
                                                      OpStore %122 %499 
                                       f32_4 %500 = OpLoad %122 
                                       f32_3 %501 = OpVectorShuffle %500 %500 0 1 2 
                                       f32_3 %502 = OpExtInst %1 4 %501 
                                       f32_3 %504 = OpFAdd %502 %503 
                                       f32_4 %505 = OpLoad %122 
                                       f32_4 %506 = OpVectorShuffle %505 %504 4 5 6 3 
                                                      OpStore %122 %506 
                                       f32_4 %507 = OpLoad %122 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 1 2 
                                       f32_3 %509 = OpCompositeConstruct %47 %47 %47 
                                       f32_3 %510 = OpCompositeConstruct %107 %107 %107 
                                       f32_3 %511 = OpExtInst %1 43 %508 %509 %510 
                                       f32_4 %512 = OpLoad %122 
                                       f32_4 %513 = OpVectorShuffle %512 %511 4 5 6 3 
                                                      OpStore %122 %513 
                                       f32_4 %514 = OpLoad %122 
                                       f32_3 %515 = OpVectorShuffle %514 %514 0 1 2 
                                       f32_3 %516 = OpFAdd %515 %503 
                                       f32_4 %517 = OpLoad %122 
                                       f32_4 %518 = OpVectorShuffle %517 %516 4 5 6 3 
                                                      OpStore %122 %518 
                                       f32_2 %519 = OpLoad %192 
                                       f32_3 %520 = OpVectorShuffle %519 %519 0 0 0 
                                       f32_4 %521 = OpLoad %122 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_3 %523 = OpFMul %520 %522 
                                       f32_3 %525 = OpFAdd %523 %524 
                                                      OpStore %268 %525 
                                       f32_3 %526 = OpLoad %268 
                                       f32_4 %527 = OpLoad %59 
                                       f32_3 %528 = OpVectorShuffle %527 %527 0 0 0 
                                       f32_3 %529 = OpFMul %526 %528 
                                       f32_4 %530 = OpLoad %9 
                                       f32_4 %531 = OpVectorShuffle %530 %529 4 5 6 3 
                                                      OpStore %9 %531 
                                       f32_4 %534 = OpLoad %9 
                                                      OpStore %533 %534 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "META"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "META" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 142606
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat3;
bool u_xlatb3;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat10_0.w + (-_Cutoff);
    u_xlat16_0.xyz = log2(u_xlat10_0.xyz);
    u_xlatb3 = u_xlat3<0.0;
    if((int(u_xlatb3) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = unity_OneOverOutputBoost;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat3);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 223
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %13 %32 %89 %166 %177 %178 %209 
                                                      OpDecorate %13 Location 13 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %164 0 BuiltIn 164 
                                                      OpMemberDecorate %164 1 BuiltIn 164 
                                                      OpMemberDecorate %164 2 BuiltIn 164 
                                                      OpDecorate %164 Block 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %209 Location 209 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypePointer Input %11 
                                 Input f32_4* %13 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 2 
                                              %16 = OpTypePointer Input %9 
                                              %20 = OpTypePointer Private %11 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypePointer Function %9 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %30 = OpTypePointer Private %9 
                                 Input f32_4* %32 = OpVariable Input 
                                              %33 = OpTypeVector %9 2 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %11 %36 
                                              %38 = OpTypeArray %11 %36 
                                              %39 = OpTypeVector %14 4 
                                              %40 = OpTypeStruct %37 %38 %11 %11 %39 %11 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 2 
                                              %45 = OpTypePointer Uniform %11 
                                              %56 = OpTypeVector %9 3 
                                              %57 = OpTypePointer Function %56 
                                          i32 %59 = OpConstant 4 
                                              %60 = OpTypeVector %6 4 
                                              %61 = OpTypePointer Uniform %39 
                                          u32 %65 = OpConstant 0 
                                Private bool* %77 = OpVariable Private 
                               Private f32_4* %81 = OpVariable Private 
                                 Input f32_4* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                                         i32 %120 = OpConstant 0 
                                         i32 %121 = OpConstant 1 
                                         u32 %162 = OpConstant 1 
                                             %163 = OpTypeArray %9 %162 
                                             %164 = OpTypeStruct %11 %9 %163 
                                             %165 = OpTypePointer Output %164 
        Output struct {f32_4; f32; f32[1];}* %166 = OpVariable Output 
                                             %174 = OpTypePointer Output %11 
                                             %176 = OpTypePointer Output %33 
                               Output f32_2* %177 = OpVariable Output 
                                Input f32_4* %178 = OpVariable Input 
                                         i32 %181 = OpConstant 5 
                               Output f32_4* %209 = OpVariable Output 
                                             %217 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %23 = OpVariable Function 
                              Function f32_3* %58 = OpVariable Function 
                                Function f32* %82 = OpVariable Function 
                             Function f32_3* %103 = OpVariable Function 
                                   Input f32* %17 = OpAccessChain %13 %15 
                                          f32 %18 = OpLoad %17 
                                         bool %19 = OpFOrdLessThan %10 %18 
                                                      OpStore %8 %19 
                                         bool %24 = OpLoad %8 
                                                      OpSelectionMerge %26 None 
                                                      OpBranchConditional %24 %25 %28 
                                              %25 = OpLabel 
                                                      OpStore %23 %27 
                                                      OpBranch %26 
                                              %28 = OpLabel 
                                                      OpStore %23 %10 
                                                      OpBranch %26 
                                              %26 = OpLabel 
                                          f32 %29 = OpLoad %23 
                                 Private f32* %31 = OpAccessChain %21 %15 
                                                      OpStore %31 %29 
                                        f32_4 %34 = OpLoad %32 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                        f32_4 %54 = OpLoad %21 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 2 3 
                                                      OpStore %21 %55 
                               Uniform u32_4* %62 = OpAccessChain %42 %59 
                                        u32_4 %63 = OpLoad %62 
                                          u32 %64 = OpCompositeExtract %63 0 
                                         bool %66 = OpINotEqual %64 %65 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %71 
                                              %67 = OpLabel 
                                        f32_4 %69 = OpLoad %21 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %58 %70 
                                                      OpBranch %68 
                                              %71 = OpLabel 
                                        f32_4 %72 = OpLoad %13 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                                      OpStore %58 %73 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                        f32_3 %74 = OpLoad %58 
                                        f32_4 %75 = OpLoad %21 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %21 %76 
                                 Private f32* %78 = OpAccessChain %21 %15 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %10 %79 
                                                      OpStore %77 %80 
                                         bool %83 = OpLoad %77 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %86 
                                              %84 = OpLabel 
                                                      OpStore %82 %27 
                                                      OpBranch %85 
                                              %86 = OpLabel 
                                                      OpStore %82 %10 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %87 = OpLoad %82 
                                 Private f32* %88 = OpAccessChain %81 %15 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                               Uniform f32_4* %93 = OpAccessChain %42 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                        f32_2 %96 = OpFMul %91 %95 
                               Uniform f32_4* %97 = OpAccessChain %42 %92 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 2 3 
                                       f32_2 %100 = OpFAdd %96 %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %81 %102 
                              Uniform u32_4* %104 = OpAccessChain %42 %59 
                                       u32_4 %105 = OpLoad %104 
                                         u32 %106 = OpCompositeExtract %105 1 
                                        bool %107 = OpINotEqual %106 %65 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %81 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %103 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_4 %113 = OpLoad %21 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %103 %114 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %115 = OpLoad %103 
                                       f32_4 %116 = OpLoad %21 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %21 %117 
                                       f32_4 %118 = OpLoad %21 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %122 = OpAccessChain %42 %120 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpFMul %119 %123 
                                                      OpStore %81 %124 
                              Uniform f32_4* %125 = OpAccessChain %42 %120 %120 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %21 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %81 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %81 %131 
                              Uniform f32_4* %132 = OpAccessChain %42 %120 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpLoad %21 
                                       f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
                                       f32_4 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %81 
                                       f32_4 %138 = OpFAdd %136 %137 
                                                      OpStore %21 %138 
                                       f32_4 %139 = OpLoad %21 
                              Uniform f32_4* %140 = OpAccessChain %42 %120 %92 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpFAdd %139 %141 
                                                      OpStore %21 %142 
                                       f32_4 %143 = OpLoad %21 
                                       f32_4 %144 = OpVectorShuffle %143 %143 1 1 1 1 
                              Uniform f32_4* %145 = OpAccessChain %42 %121 %121 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %144 %146 
                                                      OpStore %81 %147 
                              Uniform f32_4* %148 = OpAccessChain %42 %121 %120 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpLoad %21 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 0 0 0 
                                       f32_4 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %81 
                                       f32_4 %154 = OpFAdd %152 %153 
                                                      OpStore %81 %154 
                              Uniform f32_4* %155 = OpAccessChain %42 %121 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_4 %157 = OpLoad %21 
                                       f32_4 %158 = OpVectorShuffle %157 %157 2 2 2 2 
                                       f32_4 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpFAdd %159 %160 
                                                      OpStore %81 %161 
                              Uniform f32_4* %167 = OpAccessChain %42 %121 %92 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %21 
                                       f32_4 %170 = OpVectorShuffle %169 %169 3 3 3 3 
                                       f32_4 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %81 
                                       f32_4 %173 = OpFAdd %171 %172 
                               Output f32_4* %175 = OpAccessChain %166 %120 
                                                      OpStore %175 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 1 
                              Uniform f32_4* %182 = OpAccessChain %42 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 0 1 
                                       f32_2 %185 = OpFMul %180 %184 
                              Uniform f32_4* %186 = OpAccessChain %42 %181 
                                       f32_4 %187 = OpLoad %186 
                                       f32_2 %188 = OpVectorShuffle %187 %187 2 3 
                                       f32_2 %189 = OpFAdd %185 %188 
                                                      OpStore %177 %189 
                                       f32_4 %190 = OpLoad %13 
                                       f32_4 %191 = OpVectorShuffle %190 %190 1 1 1 1 
                              Uniform f32_4* %192 = OpAccessChain %42 %120 %121 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpFMul %191 %193 
                                                      OpStore %21 %194 
                              Uniform f32_4* %195 = OpAccessChain %42 %120 %120 
                                       f32_4 %196 = OpLoad %195 
                                       f32_4 %197 = OpLoad %13 
                                       f32_4 %198 = OpVectorShuffle %197 %197 0 0 0 0 
                                       f32_4 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %21 
                                       f32_4 %201 = OpFAdd %199 %200 
                                                      OpStore %21 %201 
                              Uniform f32_4* %202 = OpAccessChain %42 %120 %44 
                                       f32_4 %203 = OpLoad %202 
                                       f32_4 %204 = OpLoad %13 
                                       f32_4 %205 = OpVectorShuffle %204 %204 2 2 2 2 
                                       f32_4 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %21 
                                       f32_4 %208 = OpFAdd %206 %207 
                                                      OpStore %21 %208 
                              Uniform f32_4* %210 = OpAccessChain %42 %120 %92 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpLoad %13 
                                       f32_4 %213 = OpVectorShuffle %212 %212 3 3 3 3 
                                       f32_4 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %21 
                                       f32_4 %216 = OpFAdd %214 %215 
                                                      OpStore %209 %216 
                                 Output f32* %218 = OpAccessChain %166 %120 %162 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFNegate %219 
                                 Output f32* %221 = OpAccessChain %166 %120 %162 
                                                      OpStore %221 %220 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 132
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %17 %118 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %9 RelaxedPrecision 
                                                    OpDecorate %13 RelaxedPrecision 
                                                    OpDecorate %13 DescriptorSet 13 
                                                    OpDecorate %13 Binding 13 
                                                    OpDecorate %14 RelaxedPrecision 
                                                    OpDecorate %17 Location 17 
                                                    OpDecorate %21 RelaxedPrecision 
                                                    OpDecorate %25 RelaxedPrecision 
                                                    OpMemberDecorate %27 0 Offset 27 
                                                    OpMemberDecorate %27 1 Offset 27 
                                                    OpMemberDecorate %27 2 Offset 27 
                                                    OpMemberDecorate %27 3 RelaxedPrecision 
                                                    OpMemberDecorate %27 3 Offset 27 
                                                    OpDecorate %27 Block 
                                                    OpDecorate %29 DescriptorSet 29 
                                                    OpDecorate %29 Binding 29 
                                                    OpDecorate %34 RelaxedPrecision 
                                                    OpDecorate %35 RelaxedPrecision 
                                                    OpDecorate %36 RelaxedPrecision 
                                                    OpDecorate %37 RelaxedPrecision 
                                                    OpDecorate %39 RelaxedPrecision 
                                                    OpDecorate %40 RelaxedPrecision 
                                                    OpDecorate %41 RelaxedPrecision 
                                                    OpDecorate %47 RelaxedPrecision 
                                                    OpDecorate %68 RelaxedPrecision 
                                                    OpDecorate %69 RelaxedPrecision 
                                                    OpDecorate %71 RelaxedPrecision 
                                                    OpDecorate %72 RelaxedPrecision 
                                                    OpDecorate %115 RelaxedPrecision 
                                                    OpDecorate %118 RelaxedPrecision 
                                                    OpDecorate %118 Location 118 
                                                    OpDecorate %129 RelaxedPrecision 
                                                    OpDecorate %130 RelaxedPrecision 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 4 
                                             %8 = OpTypePointer Private %7 
                              Private f32_4* %9 = OpVariable Private 
                                            %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %11 = OpTypeSampledImage %10 
                                            %12 = OpTypePointer UniformConstant %11 
UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                            %15 = OpTypeVector %6 2 
                                            %16 = OpTypePointer Input %15 
                               Input f32_2* %17 = OpVariable Input 
                                            %20 = OpTypePointer Private %6 
                               Private f32* %21 = OpVariable Private 
                                            %22 = OpTypeInt 32 0 
                                        u32 %23 = OpConstant 3 
                                            %26 = OpTypeVector %22 4 
                                            %27 = OpTypeStruct %26 %6 %6 %6 
                                            %28 = OpTypePointer Uniform %27 
    Uniform struct {u32_4; f32; f32; f32;}* %29 = OpVariable Uniform 
                                            %30 = OpTypeInt 32 1 
                                        i32 %31 = OpConstant 3 
                                            %32 = OpTypePointer Uniform %6 
                             Private f32_4* %37 = OpVariable Private 
                                            %38 = OpTypeVector %6 3 
                                            %44 = OpTypeBool 
                                            %45 = OpTypePointer Private %44 
                              Private bool* %46 = OpVariable Private 
                                        f32 %48 = OpConstant 3.674022E-40 
                                        i32 %51 = OpConstant 0 
                                        i32 %52 = OpConstant 1 
                                        i32 %54 = OpConstant -1 
                               Private f32* %60 = OpVariable Private 
                                        f32 %64 = OpConstant 3.674022E-40 
                                            %66 = OpTypePointer Private %38 
                             Private f32_3* %67 = OpVariable Private 
                                        i32 %76 = OpConstant 2 
                                            %89 = OpTypePointer Function %38 
                                            %91 = OpTypeVector %44 4 
                                            %92 = OpTypePointer Uniform %26 
                                        u32 %96 = OpConstant 0 
                                     f32_3 %102 = OpConstantComposite %48 %48 %48 
                                           %106 = OpTypePointer Function %6 
                                           %117 = OpTypePointer Output %7 
                             Output f32_4* %118 = OpVariable Output 
                                           %119 = OpTypePointer Function %7 
                                     f32_4 %127 = OpConstantComposite %48 %48 %48 %64 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                            Function f32_3* %90 = OpVariable Function 
                             Function f32* %107 = OpVariable Function 
                           Function f32_4* %120 = OpVariable Function 
                 read_only Texture2DSampled %14 = OpLoad %13 
                                      f32_2 %18 = OpLoad %17 
                                      f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                    OpStore %9 %19 
                               Private f32* %24 = OpAccessChain %9 %23 
                                        f32 %25 = OpLoad %24 
                               Uniform f32* %33 = OpAccessChain %29 %31 
                                        f32 %34 = OpLoad %33 
                                        f32 %35 = OpFNegate %34 
                                        f32 %36 = OpFAdd %25 %35 
                                                    OpStore %21 %36 
                                      f32_4 %39 = OpLoad %9 
                                      f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                      f32_3 %41 = OpExtInst %1 30 %40 
                                      f32_4 %42 = OpLoad %37 
                                      f32_4 %43 = OpVectorShuffle %42 %41 4 5 6 3 
                                                    OpStore %37 %43 
                                        f32 %47 = OpLoad %21 
                                       bool %49 = OpFOrdLessThan %47 %48 
                                                    OpStore %46 %49 
                                       bool %50 = OpLoad %46 
                                        i32 %53 = OpSelect %50 %52 %51 
                                        i32 %55 = OpIMul %53 %54 
                                       bool %56 = OpINotEqual %55 %51 
                                                    OpSelectionMerge %58 None 
                                                    OpBranchConditional %56 %57 %58 
                                            %57 = OpLabel 
                                                    OpKill
                                            %58 = OpLabel 
                               Uniform f32* %61 = OpAccessChain %29 %52 
                                        f32 %62 = OpLoad %61 
                                                    OpStore %60 %62 
                                        f32 %63 = OpLoad %60 
                                        f32 %65 = OpExtInst %1 43 %63 %48 %64 
                                                    OpStore %60 %65 
                                      f32_4 %68 = OpLoad %37 
                                      f32_3 %69 = OpVectorShuffle %68 %68 0 1 2 
                                        f32 %70 = OpLoad %60 
                                      f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                      f32_3 %72 = OpFMul %69 %71 
                                                    OpStore %67 %72 
                                      f32_3 %73 = OpLoad %67 
                                      f32_3 %74 = OpExtInst %1 29 %73 
                                                    OpStore %67 %74 
                                      f32_3 %75 = OpLoad %67 
                               Uniform f32* %77 = OpAccessChain %29 %76 
                                        f32 %78 = OpLoad %77 
                               Uniform f32* %79 = OpAccessChain %29 %76 
                                        f32 %80 = OpLoad %79 
                               Uniform f32* %81 = OpAccessChain %29 %76 
                                        f32 %82 = OpLoad %81 
                                      f32_3 %83 = OpCompositeConstruct %78 %80 %82 
                                        f32 %84 = OpCompositeExtract %83 0 
                                        f32 %85 = OpCompositeExtract %83 1 
                                        f32 %86 = OpCompositeExtract %83 2 
                                      f32_3 %87 = OpCompositeConstruct %84 %85 %86 
                                      f32_3 %88 = OpExtInst %1 37 %75 %87 
                                                    OpStore %67 %88 
                             Uniform u32_4* %93 = OpAccessChain %29 %51 
                                      u32_4 %94 = OpLoad %93 
                                        u32 %95 = OpCompositeExtract %94 0 
                                       bool %97 = OpINotEqual %95 %96 
                                                    OpSelectionMerge %99 None 
                                                    OpBranchConditional %97 %98 %101 
                                            %98 = OpLabel 
                                     f32_3 %100 = OpLoad %67 
                                                    OpStore %90 %100 
                                                    OpBranch %99 
                                           %101 = OpLabel 
                                                    OpStore %90 %102 
                                                    OpBranch %99 
                                            %99 = OpLabel 
                                     f32_3 %103 = OpLoad %90 
                                     f32_4 %104 = OpLoad %37 
                                     f32_4 %105 = OpVectorShuffle %104 %103 4 5 6 3 
                                                    OpStore %37 %105 
                            Uniform u32_4* %108 = OpAccessChain %29 %51 
                                     u32_4 %109 = OpLoad %108 
                                       u32 %110 = OpCompositeExtract %109 0 
                                      bool %111 = OpINotEqual %110 %96 
                                                    OpSelectionMerge %113 None 
                                                    OpBranchConditional %111 %112 %114 
                                           %112 = OpLabel 
                                                    OpStore %107 %64 
                                                    OpBranch %113 
                                           %114 = OpLabel 
                                                    OpStore %107 %48 
                                                    OpBranch %113 
                                           %113 = OpLabel 
                                       f32 %115 = OpLoad %107 
                              Private f32* %116 = OpAccessChain %37 %23 
                                                    OpStore %116 %115 
                            Uniform u32_4* %121 = OpAccessChain %29 %51 
                                     u32_4 %122 = OpLoad %121 
                                       u32 %123 = OpCompositeExtract %122 1 
                                      bool %124 = OpINotEqual %123 %96 
                                                    OpSelectionMerge %126 None 
                                                    OpBranchConditional %124 %125 %128 
                                           %125 = OpLabel 
                                                    OpStore %120 %127 
                                                    OpBranch %126 
                                           %128 = OpLabel 
                                     f32_4 %129 = OpLoad %37 
                                                    OpStore %120 %129 
                                                    OpBranch %126 
                                           %126 = OpLabel 
                                     f32_4 %130 = OpLoad %120 
                                                    OpStore %118 %130 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
}
Fallback "Transparent/Cutout/Diffuse"
}