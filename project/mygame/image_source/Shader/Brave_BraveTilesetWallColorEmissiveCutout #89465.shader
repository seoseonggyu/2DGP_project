//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Brave/BraveTilesetWallColorEmissiveCutout" {
Properties {
_MainTex ("Base (RGB)", 2D) = "white" { }
_Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
_MaxValue ("Max Value", Float) = 1
_ParallaxTex ("ParaTex", 2D) = "white" { }
_EmissivePower ("Emissive Power", Float) = 0
_EmissiveColorPower ("Emissive Color Power", Float) = 7
_EmissiveColor ("Emissive Color", Color) = (1,1,1,1)
_EmissiveThresholdSensitivity ("Threshold Sensitivity", Float) = 0
}
SubShader {
 LOD 110
 Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
 Pass {
  Name "FORWARD"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
  ColorMask RGB 0
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 57750
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	vec4 _EmissiveColor;
uniform 	float _EmissiveThresholdSensitivity;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ParallaxTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat16_2;
vec4 u_xlat10_2;
vec2 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
float u_xlat16_7;
float u_xlat8;
vec2 u_xlat16_8;
bool u_xlatb8;
vec2 u_xlat10;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
float u_xlat16_22;
bool u_xlatb22;
float u_xlat23;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz + (-_EmissiveColor.xyz);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y + u_xlat1.x;
    u_xlat1.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb1 = u_xlat1.x<_EmissiveThresholdSensitivity;
    u_xlat16_8.x = dot(u_xlat10_0.xyz, vec3(0.298900008, 0.586600006, 0.114500001));
    u_xlat16_8.xy = u_xlat10_0.xz + (-u_xlat16_8.xx);
    u_xlat16_8.xy = u_xlat16_8.xy * vec2(1.0, 1.0) + vec2(1.0, 1.0);
    u_xlat16_22 = (-u_xlat16_8.x) * 0.298900008 + 1.0;
    u_xlat16_22 = (-u_xlat16_8.y) * 0.114500001 + u_xlat16_22;
    u_xlat16_22 = u_xlat16_22 * 1.70473921;
    u_xlat10_2 = texture(_ParallaxTex, vs_TEXCOORD4.xy);
    u_xlat3.xy = mix(vec2(0.0, 0.0), vec2(1.0, 0.75), vec2(bvec2(u_xlatb1)));
    u_xlat16_2.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
    u_xlat2.xyz = u_xlat3.yyy * u_xlat16_2.xyz + u_xlat10_0.xyz;
    u_xlat1.xz = log2(u_xlat16_8.xy);
    u_xlat1.y = log2(u_xlat16_22);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10.xy = u_xlat3.xx * u_xlat1.xy;
    u_xlat22 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb22 = u_xlat22<0.0;
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb22){
        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat22 = u_xlat4.y * 0.25 + 0.75;
        u_xlat23 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat22, u_xlat23);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat22 = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat4.xyz = u_xlat2.xyz * vs_TEXCOORD5.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat4.w = 0.0;
    u_xlat2.w = u_xlat10_0.w;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat4.xyz = u_xlat1.zyx * u_xlat3.xxx + u_xlat2.zyx;
    u_xlatb21 = u_xlat4.y>=u_xlat4.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat4.w = 0.666666687;
    u_xlat1.xy = (-u_xlat4.xy) + u_xlat4.yx;
    u_xlat1.w = -1.0;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat4.xyw;
    u_xlatb21 = u_xlat4.z>=u_xlat5.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat5.w = u_xlat4.z;
    u_xlat6.xyw = u_xlat5.wyx;
    u_xlat6.z = -1.0;
    u_xlat6 = (-u_xlat5) + u_xlat6;
    u_xlat5 = vec4(u_xlat21) * u_xlat6 + u_xlat5;
    u_xlat21 = min(u_xlat5.y, u_xlat5.w);
    u_xlat21 = (-u_xlat21) + u_xlat5.x;
    u_xlat1.x = (-u_xlat5.y) + u_xlat5.w;
    u_xlat8 = u_xlat21 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat8;
    u_xlat1.x = u_xlat1.x + u_xlat5.z;
    u_xlat8 = u_xlat5.x + 1.00000001e-010;
    u_xlat21 = u_xlat21 / u_xlat8;
    u_xlatb8 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat16_7 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat7 = u_xlat8 * u_xlat16_7 + u_xlat10_0.z;
    u_xlatb14 = u_xlat10_0.x>=u_xlat7;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = (-u_xlat7) + u_xlat10_0.x;
    u_xlat0.x = u_xlat14 * u_xlat0.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _MaxValue;
    u_xlat0.x = min(u_xlat0.x, u_xlat5.x);
    u_xlat7 = u_xlat10.y + u_xlat10.x;
    u_xlat7 = u_xlat1.z * u_xlat3.x + u_xlat7;
    u_xlat7 = u_xlat7 * 10.0;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xzw = (-u_xlat0.xxx) * u_xlat1.xyz + u_xlat4.zyx;
    SV_Target0.xyz = vec3(u_xlat7) * u_xlat0.xzw + u_xlat2.xyz;
    SV_Target0.w = u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 221
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %152 %161 %162 %174 %204 %210 %212 %214 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate %174 Location 174 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %210 Location 210 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %214 Location 214 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_2 %140 = OpConstantComposite %139 %139 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %146 %146 
                                             %151 = OpTypePointer Output %95 
                               Output f32_2* %152 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_2 %156 = OpConstantComposite %139 %155 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_2 %159 = OpConstantComposite %158 %139 
                               Output f32_2* %161 = OpVariable Output 
                                Input f32_4* %162 = OpVariable Input 
                                             %173 = OpTypePointer Input %50 
                                Input f32_3* %174 = OpVariable Input 
                                         u32 %180 = OpConstant 0 
                                             %181 = OpTypePointer Private %6 
                                         u32 %194 = OpConstant 2 
                                Private f32* %196 = OpVariable Private 
                               Output f32_3* %204 = OpVariable Output 
                               Output f32_4* %210 = OpVariable Output 
                                       f32_4 %211 = OpConstantComposite %158 %158 %158 %158 
                               Output f32_3* %212 = OpVariable Output 
                                       f32_3 %213 = OpConstantComposite %158 %158 %158 
                               Output f32_4* %214 = OpVariable Output 
                                             %215 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %96 = OpLoad %44 
                                        f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                               Uniform f32_4* %98 = OpAccessChain %21 %36 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %97 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
                                                      OpStore %9 %103 
                              Uniform f32_4* %104 = OpAccessChain %21 %36 %23 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %107 = OpLoad %44 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 0 
                                       f32_2 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %9 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %36 %36 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpLoad %44 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 2 
                                       f32_2 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %9 %125 
                              Uniform f32_4* %126 = OpAccessChain %21 %36 %46 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                                       f32_4 %129 = OpLoad %44 
                                       f32_2 %130 = OpVectorShuffle %129 %129 3 3 
                                       f32_2 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_2 %134 = OpFAdd %131 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 3 
                                                      OpStore %9 %136 
                                       f32_4 %137 = OpLoad %9 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %9 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %9 %143 
                                       f32_4 %144 = OpLoad %9 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %9 %150 
                                       f32_4 %153 = OpLoad %9 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %157 = OpFMul %154 %156 
                                       f32_2 %160 = OpFAdd %157 %159 
                                                      OpStore %152 %160 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                              Uniform f32_4* %165 = OpAccessChain %21 %46 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_2 %168 = OpFMul %164 %167 
                              Uniform f32_4* %169 = OpAccessChain %21 %46 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %168 %171 
                                                      OpStore %161 %172 
                                       f32_3 %175 = OpLoad %174 
                              Uniform f32_4* %176 = OpAccessChain %21 %24 %23 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %175 %178 
                                Private f32* %182 = OpAccessChain %9 %180 
                                                      OpStore %182 %179 
                                       f32_3 %183 = OpLoad %174 
                              Uniform f32_4* %184 = OpAccessChain %21 %24 %24 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                         f32 %187 = OpDot %183 %186 
                                Private f32* %188 = OpAccessChain %9 %81 
                                                      OpStore %188 %187 
                                       f32_3 %189 = OpLoad %174 
                              Uniform f32_4* %190 = OpAccessChain %21 %24 %36 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %189 %192 
                                Private f32* %195 = OpAccessChain %9 %194 
                                                      OpStore %195 %193 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %198 %200 
                                                      OpStore %196 %201 
                                         f32 %202 = OpLoad %196 
                                         f32 %203 = OpExtInst %1 32 %202 
                                                      OpStore %196 %203 
                                         f32 %205 = OpLoad %196 
                                       f32_3 %206 = OpCompositeConstruct %205 %205 %205 
                                       f32_4 %207 = OpLoad %9 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %206 %208 
                                                      OpStore %204 %209 
                                                      OpStore %210 %211 
                                                      OpStore %212 %213 
                                                      OpStore %214 %211 
                                 Output f32* %216 = OpAccessChain %85 %23 %81 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFNegate %217 
                                 Output f32* %219 = OpAccessChain %85 %23 %81 
                                                      OpStore %219 %218 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 648
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %120 %234 %359 %365 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpMemberDecorate %27 0 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 RelaxedPrecision 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpMemberDecorate %27 8 Offset 27 
                                                      OpMemberDecorate %27 9 Offset 27 
                                                      OpMemberDecorate %27 10 Offset 27 
                                                      OpMemberDecorate %27 11 RelaxedPrecision 
                                                      OpMemberDecorate %27 11 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %118 DescriptorSet 118 
                                                      OpDecorate %118 Binding 118 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %120 Location 120 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %226 SpecId 226 
                                                      OpDecorate %234 Location 234 
                                                      OpDecorate %324 DescriptorSet 324 
                                                      OpDecorate %324 Binding 324 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %359 Location 359 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %365 Location 365 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %593 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeVector %6 3 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %7 %25 
                                              %27 = OpTypeStruct %7 %7 %26 %21 %21 %7 %6 %6 %7 %6 %6 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32_4; f32; f32; f32;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 8 
                                              %32 = OpTypePointer Uniform %7 
                                          u32 %47 = OpConstant 1 
                                              %48 = OpTypePointer Private %6 
                                          u32 %51 = OpConstant 0 
                                          u32 %56 = OpConstant 2 
                                              %70 = OpTypeBool 
                                              %71 = OpTypePointer Private %70 
                                Private bool* %72 = OpVariable Private 
                                          i32 %75 = OpConstant 9 
                                              %76 = OpTypePointer Uniform %6 
                               Private f32_4* %80 = OpVariable Private 
                                          f32 %83 = OpConstant 3.674022E-40 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                        f32_3 %86 = OpConstantComposite %83 %84 %85 
                                              %89 = OpTypePointer Private %15 
                               Private f32_2* %90 = OpVariable Private 
                                          f32 %98 = OpConstant 3.674022E-40 
                                        f32_2 %99 = OpConstantComposite %98 %98 
                                Private f32* %101 = OpVariable Private 
                                         f32 %114 = OpConstant 3.674022E-40 
                                             %116 = OpTypePointer Private %21 
                              Private f32_3* %117 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %118 = OpVariable UniformConstant 
                                Input f32_2* %120 = OpVariable Input 
                              Private f32_2* %124 = OpVariable Private 
                                         f32 %125 = OpConstant 3.674022E-40 
                                       f32_2 %126 = OpConstantComposite %125 %125 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_2 %128 = OpConstantComposite %98 %127 
                                             %130 = OpTypeVector %70 2 
                              Private f32_3* %134 = OpVariable Private 
                              Private f32_4* %140 = OpVariable Private 
                                         i32 %159 = OpConstant 7 
                                         i32 %181 = OpConstant 6 
                              Private f32_2* %188 = OpVariable Private 
                                         u32 %194 = OpConstant 3 
                                         i32 %197 = OpConstant 11 
                               Private bool* %203 = OpVariable Private 
                                         i32 %208 = OpConstant 0 
                                         i32 %209 = OpConstant 1 
                                         i32 %211 = OpConstant -1 
                                        bool %220 = OpConstantFalse 
                                        bool %226 = OpSpecConstantFalse 
                              Private f32_4* %232 = OpVariable Private 
                                             %233 = OpTypePointer Input %21 
                                Input f32_3* %234 = OpVariable Input 
                                         i32 %237 = OpConstant 2 
                                         i32 %268 = OpConstant 3 
                                             %275 = OpTypePointer Function %21 
                                         i32 %289 = OpConstant 4 
                                             %290 = OpTypePointer Uniform %21 
                              Private f32_4* %297 = OpVariable Private 
                                Private f32* %305 = OpVariable Private 
                                         f32 %308 = OpConstant 3.674022E-40 
                                Private f32* %311 = OpVariable Private 
                                         f32 %314 = OpConstant 3.674022E-40 
                                             %321 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %322 = OpTypeSampledImage %321 
                                             %323 = OpTypePointer UniformConstant %322 
 UniformConstant read_only Texture3DSampled* %324 = OpVariable UniformConstant 
                              Private f32_3* %335 = OpVariable Private 
                              Private f32_3* %345 = OpVariable Private 
                                         i32 %348 = OpConstant 5 
                                Input f32_3* %359 = OpVariable Input 
                                             %364 = OpTypePointer Output %7 
                               Output f32_4* %365 = OpVariable Output 
                                             %368 = OpTypePointer Output %6 
                               Private bool* %377 = OpVariable Private 
                                Private f32* %383 = OpVariable Private 
                                             %384 = OpTypePointer Function %6 
                              Private f32_2* %391 = OpVariable Private 
                                         f32 %399 = OpConstant 3.674022E-40 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_2 %416 = OpConstantComposite %399 %415 
                                Private f32* %487 = OpVariable Private 
                                         f32 %490 = OpConstant 3.674022E-40 
                                         f32 %492 = OpConstant 3.674022E-40 
                                Private f32* %519 = OpVariable Private 
                              Private f32_3* %526 = OpVariable Private 
                               Private bool* %534 = OpVariable Private 
                                Private f32* %540 = OpVariable Private 
                              Private f32_3* %547 = OpVariable Private 
                                         i32 %565 = OpConstant 10 
                                Private f32* %576 = OpVariable Private 
                                         f32 %590 = OpConstant 3.674022E-40 
                                         f32 %597 = OpConstant 3.674022E-40 
                                       f32_3 %598 = OpConstantComposite %98 %415 %597 
                                       f32_3 %603 = OpConstantComposite %490 %490 %490 
                                         f32 %605 = OpConstant 3.674022E-40 
                                       f32_3 %606 = OpConstantComposite %605 %605 %605 
                                       f32_3 %610 = OpConstantComposite %399 %399 %399 
                                       f32_3 %622 = OpConstantComposite %98 %98 %98 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %276 = OpVariable Function 
                               Function f32* %385 = OpVariable Function 
                               Function f32* %425 = OpVariable Function 
                               Function f32* %513 = OpVariable Function 
                               Function f32* %541 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %22 = OpLoad %9 
                                        f32_3 %23 = OpVectorShuffle %22 %22 0 1 2 
                               Uniform f32_4* %33 = OpAccessChain %29 %31 
                                        f32_4 %34 = OpLoad %33 
                                        f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                        f32_3 %36 = OpFNegate %35 
                                        f32_3 %37 = OpFAdd %23 %36 
                                        f32_4 %38 = OpLoad %20 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 6 3 
                                                      OpStore %20 %39 
                                        f32_4 %40 = OpLoad %20 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                                        f32_4 %42 = OpLoad %20 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_2 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %20 
                                        f32_4 %46 = OpVectorShuffle %45 %44 4 5 2 3 
                                                      OpStore %20 %46 
                                 Private f32* %49 = OpAccessChain %20 %47 
                                          f32 %50 = OpLoad %49 
                                 Private f32* %52 = OpAccessChain %20 %51 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFAdd %50 %53 
                                 Private f32* %55 = OpAccessChain %20 %51 
                                                      OpStore %55 %54 
                                 Private f32* %57 = OpAccessChain %20 %56 
                                          f32 %58 = OpLoad %57 
                                 Private f32* %59 = OpAccessChain %20 %56 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %58 %60 
                                 Private f32* %62 = OpAccessChain %20 %51 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %20 %51 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %20 %51 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpExtInst %1 31 %67 
                                 Private f32* %69 = OpAccessChain %20 %51 
                                                      OpStore %69 %68 
                                 Private f32* %73 = OpAccessChain %20 %51 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %77 = OpAccessChain %29 %75 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %74 %78 
                                                      OpStore %72 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                          f32 %87 = OpDot %82 %86 
                                 Private f32* %88 = OpAccessChain %80 %51 
                                                      OpStore %88 %87 
                                        f32_4 %91 = OpLoad %9 
                                        f32_2 %92 = OpVectorShuffle %91 %91 0 2 
                                        f32_4 %93 = OpLoad %80 
                                        f32_2 %94 = OpVectorShuffle %93 %93 0 0 
                                        f32_2 %95 = OpFNegate %94 
                                        f32_2 %96 = OpFAdd %92 %95 
                                                      OpStore %90 %96 
                                        f32_2 %97 = OpLoad %90 
                                       f32_2 %100 = OpFAdd %97 %99 
                                                      OpStore %90 %100 
                                Private f32* %102 = OpAccessChain %90 %51 
                                         f32 %103 = OpLoad %102 
                                         f32 %104 = OpFNegate %103 
                                         f32 %105 = OpFMul %104 %83 
                                         f32 %106 = OpFAdd %105 %98 
                                                      OpStore %101 %106 
                                Private f32* %107 = OpAccessChain %90 %47 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFNegate %108 
                                         f32 %110 = OpFMul %109 %85 
                                         f32 %111 = OpLoad %101 
                                         f32 %112 = OpFAdd %110 %111 
                                                      OpStore %101 %112 
                                         f32 %113 = OpLoad %101 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %101 %115 
                  read_only Texture2DSampled %119 = OpLoad %118 
                                       f32_2 %121 = OpLoad %120 
                                       f32_4 %122 = OpImageSampleImplicitLod %119 %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                                      OpStore %117 %123 
                                        bool %129 = OpLoad %72 
                                      bool_2 %131 = OpCompositeConstruct %129 %129 
                                       f32_2 %132 = OpSelect %131 %99 %126 
                                       f32_2 %133 = OpExtInst %1 46 %126 %128 %132 
                                                      OpStore %124 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %137 = OpFNegate %136 
                                       f32_3 %138 = OpLoad %117 
                                       f32_3 %139 = OpFAdd %137 %138 
                                                      OpStore %134 %139 
                                       f32_2 %141 = OpLoad %124 
                                       f32_3 %142 = OpVectorShuffle %141 %141 1 1 1 
                                       f32_3 %143 = OpLoad %134 
                                       f32_3 %144 = OpFMul %142 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFAdd %144 %146 
                                       f32_4 %148 = OpLoad %140 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %140 %149 
                                       f32_2 %150 = OpLoad %90 
                                       f32_2 %151 = OpExtInst %1 30 %150 
                                       f32_4 %152 = OpLoad %20 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 1 5 3 
                                                      OpStore %20 %153 
                                         f32 %154 = OpLoad %101 
                                         f32 %155 = OpExtInst %1 30 %154 
                                Private f32* %156 = OpAccessChain %20 %47 
                                                      OpStore %156 %155 
                                       f32_4 %157 = OpLoad %20 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Uniform f32* %160 = OpAccessChain %29 %159 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %162 = OpAccessChain %29 %159 
                                         f32 %163 = OpLoad %162 
                                Uniform f32* %164 = OpAccessChain %29 %159 
                                         f32 %165 = OpLoad %164 
                                       f32_3 %166 = OpCompositeConstruct %161 %163 %165 
                                         f32 %167 = OpCompositeExtract %166 0 
                                         f32 %168 = OpCompositeExtract %166 1 
                                         f32 %169 = OpCompositeExtract %166 2 
                                       f32_3 %170 = OpCompositeConstruct %167 %168 %169 
                                       f32_3 %171 = OpFMul %158 %170 
                                       f32_4 %172 = OpLoad %20 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %20 %173 
                                       f32_4 %174 = OpLoad %20 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpExtInst %1 29 %175 
                                       f32_4 %177 = OpLoad %20 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %20 %178 
                                       f32_4 %179 = OpLoad %20 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                Uniform f32* %182 = OpAccessChain %29 %181 
                                         f32 %183 = OpLoad %182 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_3 %185 = OpFMul %180 %184 
                                       f32_4 %186 = OpLoad %20 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %20 %187 
                                       f32_2 %189 = OpLoad %124 
                                       f32_2 %190 = OpVectorShuffle %189 %189 0 0 
                                       f32_4 %191 = OpLoad %20 
                                       f32_2 %192 = OpVectorShuffle %191 %191 0 1 
                                       f32_2 %193 = OpFMul %190 %192 
                                                      OpStore %188 %193 
                                Private f32* %195 = OpAccessChain %9 %194 
                                         f32 %196 = OpLoad %195 
                                Uniform f32* %198 = OpAccessChain %29 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %196 %200 
                                Private f32* %202 = OpAccessChain %80 %51 
                                                      OpStore %202 %201 
                                Private f32* %204 = OpAccessChain %80 %51 
                                         f32 %205 = OpLoad %204 
                                        bool %206 = OpFOrdLessThan %205 %125 
                                                      OpStore %203 %206 
                                        bool %207 = OpLoad %203 
                                         i32 %210 = OpSelect %207 %209 %208 
                                         i32 %212 = OpIMul %210 %211 
                                        bool %213 = OpINotEqual %212 %208 
                                                      OpSelectionMerge %215 None 
                                                      OpBranchConditional %213 %214 %215 
                                             %214 = OpLabel 
                                                      OpKill
                                             %215 = OpLabel 
                                Uniform f32* %217 = OpAccessChain %29 %209 %51 
                                         f32 %218 = OpLoad %217 
                                        bool %219 = OpFOrdEqual %218 %98 
                                                      OpStore %203 %219 
                                                      OpSelectionMerge %222 None 
                                                      OpBranchConditional %220 %221 %222 
                                             %221 = OpLabel 
                                        bool %223 = OpLoad %203 
                                                      OpSelectionMerge %225 None 
                                                      OpBranchConditional %223 %224 %225 
                                             %224 = OpLabel 
                                                      OpBranch %225 
                                             %225 = OpLabel 
                                                      OpBranch %222 
                                             %222 = OpLabel 
                                                      OpSelectionMerge %228 None 
                                                      OpBranchConditional %226 %227 %330 
                                             %227 = OpLabel 
                                Uniform f32* %229 = OpAccessChain %29 %209 %47 
                                         f32 %230 = OpLoad %229 
                                        bool %231 = OpFOrdEqual %230 %98 
                                                      OpStore %203 %231 
                                       f32_3 %235 = OpLoad %234 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                              Uniform f32_4* %238 = OpAccessChain %29 %237 %209 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %236 %240 
                                       f32_4 %242 = OpLoad %232 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %232 %243 
                              Uniform f32_4* %244 = OpAccessChain %29 %237 %208 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpLoad %234 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %232 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %232 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %232 %254 
                              Uniform f32_4* %255 = OpAccessChain %29 %237 %237 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpLoad %234 
                                       f32_3 %259 = OpVectorShuffle %258 %258 2 2 2 
                                       f32_3 %260 = OpFMul %257 %259 
                                       f32_4 %261 = OpLoad %232 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFAdd %260 %262 
                                       f32_4 %264 = OpLoad %232 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %232 %265 
                                       f32_4 %266 = OpLoad %232 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                              Uniform f32_4* %269 = OpAccessChain %29 %237 %268 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_3 %272 = OpFAdd %267 %271 
                                       f32_4 %273 = OpLoad %232 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
                                                      OpStore %232 %274 
                                        bool %277 = OpLoad %203 
                                                      OpSelectionMerge %279 None 
                                                      OpBranchConditional %277 %278 %282 
                                             %278 = OpLabel 
                                       f32_4 %280 = OpLoad %232 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                                      OpStore %276 %281 
                                                      OpBranch %279 
                                             %282 = OpLabel 
                                       f32_3 %283 = OpLoad %234 
                                                      OpStore %276 %283 
                                                      OpBranch %279 
                                             %279 = OpLabel 
                                       f32_3 %284 = OpLoad %276 
                                       f32_4 %285 = OpLoad %232 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %232 %286 
                                       f32_4 %287 = OpLoad %232 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                              Uniform f32_3* %291 = OpAccessChain %29 %289 
                                       f32_3 %292 = OpLoad %291 
                                       f32_3 %293 = OpFNegate %292 
                                       f32_3 %294 = OpFAdd %288 %293 
                                       f32_4 %295 = OpLoad %232 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %232 %296 
                                       f32_4 %298 = OpLoad %232 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                              Uniform f32_3* %300 = OpAccessChain %29 %268 
                                       f32_3 %301 = OpLoad %300 
                                       f32_3 %302 = OpFMul %299 %301 
                                       f32_4 %303 = OpLoad %297 
                                       f32_4 %304 = OpVectorShuffle %303 %302 0 4 5 6 
                                                      OpStore %297 %304 
                                Private f32* %306 = OpAccessChain %297 %47 
                                         f32 %307 = OpLoad %306 
                                         f32 %309 = OpFMul %307 %308 
                                         f32 %310 = OpFAdd %309 %127 
                                                      OpStore %305 %310 
                                Uniform f32* %312 = OpAccessChain %29 %209 %56 
                                         f32 %313 = OpLoad %312 
                                         f32 %315 = OpFMul %313 %314 
                                         f32 %316 = OpFAdd %315 %127 
                                                      OpStore %311 %316 
                                         f32 %317 = OpLoad %305 
                                         f32 %318 = OpLoad %311 
                                         f32 %319 = OpExtInst %1 40 %317 %318 
                                Private f32* %320 = OpAccessChain %297 %51 
                                                      OpStore %320 %319 
                  read_only Texture3DSampled %325 = OpLoad %324 
                                       f32_4 %326 = OpLoad %297 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 2 3 
                                       f32_4 %328 = OpImageSampleImplicitLod %325 %327 
                                                      OpStore %297 %328 
                                       f32_4 %329 = OpLoad %297 
                                                      OpStore %80 %329 
                                                      OpBranch %228 
                                             %330 = OpLabel 
                                Private f32* %331 = OpAccessChain %80 %51 
                                                      OpStore %331 %98 
                                Private f32* %332 = OpAccessChain %80 %47 
                                                      OpStore %332 %98 
                                Private f32* %333 = OpAccessChain %80 %56 
                                                      OpStore %333 %98 
                                Private f32* %334 = OpAccessChain %80 %194 
                                                      OpStore %334 %98 
                                                      OpBranch %228 
                                             %228 = OpLabel 
                                       f32_4 %336 = OpLoad %80 
                              Uniform f32_4* %337 = OpAccessChain %29 %208 
                                       f32_4 %338 = OpLoad %337 
                                         f32 %339 = OpDot %336 %338 
                                Private f32* %340 = OpAccessChain %335 %51 
                                                      OpStore %340 %339 
                                Private f32* %341 = OpAccessChain %335 %51 
                                         f32 %342 = OpLoad %341 
                                         f32 %343 = OpExtInst %1 43 %342 %125 %98 
                                Private f32* %344 = OpAccessChain %335 %51 
                                                      OpStore %344 %343 
                                       f32_4 %346 = OpLoad %140 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                              Uniform f32_4* %349 = OpAccessChain %29 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFMul %347 %351 
                                                      OpStore %345 %352 
                                       f32_3 %353 = OpLoad %335 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 0 0 
                                       f32_3 %355 = OpLoad %345 
                                       f32_3 %356 = OpFMul %354 %355 
                                                      OpStore %335 %356 
                                       f32_4 %357 = OpLoad %140 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %360 = OpLoad %359 
                                       f32_3 %361 = OpFMul %358 %360 
                                       f32_3 %362 = OpLoad %335 
                                       f32_3 %363 = OpFAdd %361 %362 
                                                      OpStore %335 %363 
                                Private f32* %366 = OpAccessChain %9 %194 
                                         f32 %367 = OpLoad %366 
                                 Output f32* %369 = OpAccessChain %365 %194 
                                                      OpStore %369 %367 
                                       f32_4 %370 = OpLoad %20 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_2 %372 = OpLoad %124 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 0 0 
                                       f32_3 %374 = OpFMul %371 %373 
                                       f32_3 %375 = OpLoad %335 
                                       f32_3 %376 = OpFAdd %374 %375 
                                                      OpStore %335 %376 
                                Private f32* %378 = OpAccessChain %335 %47 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %335 %56 
                                         f32 %381 = OpLoad %380 
                                        bool %382 = OpFOrdGreaterThanEqual %379 %381 
                                                      OpStore %377 %382 
                                        bool %386 = OpLoad %377 
                                                      OpSelectionMerge %388 None 
                                                      OpBranchConditional %386 %387 %389 
                                             %387 = OpLabel 
                                                      OpStore %385 %98 
                                                      OpBranch %388 
                                             %389 = OpLabel 
                                                      OpStore %385 %125 
                                                      OpBranch %388 
                                             %388 = OpLabel 
                                         f32 %390 = OpLoad %385 
                                                      OpStore %383 %390 
                                       f32_3 %392 = OpLoad %335 
                                       f32_2 %393 = OpVectorShuffle %392 %392 2 1 
                                       f32_2 %394 = OpFNegate %393 
                                       f32_3 %395 = OpLoad %335 
                                       f32_2 %396 = OpVectorShuffle %395 %395 1 2 
                                       f32_2 %397 = OpFAdd %394 %396 
                                                      OpStore %391 %397 
                                Private f32* %398 = OpAccessChain %140 %51 
                                                      OpStore %398 %98 
                                Private f32* %400 = OpAccessChain %140 %47 
                                                      OpStore %400 %399 
                                         f32 %401 = OpLoad %383 
                                       f32_2 %402 = OpCompositeConstruct %401 %401 
                                       f32_2 %403 = OpLoad %391 
                                       f32_2 %404 = OpFMul %402 %403 
                                       f32_3 %405 = OpLoad %335 
                                       f32_2 %406 = OpVectorShuffle %405 %405 2 1 
                                       f32_2 %407 = OpFAdd %404 %406 
                                       f32_4 %408 = OpLoad %297 
                                       f32_4 %409 = OpVectorShuffle %408 %407 4 5 2 3 
                                                      OpStore %297 %409 
                                         f32 %410 = OpLoad %383 
                                       f32_2 %411 = OpCompositeConstruct %410 %410 
                                       f32_4 %412 = OpLoad %140 
                                       f32_2 %413 = OpVectorShuffle %412 %412 0 1 
                                       f32_2 %414 = OpFMul %411 %413 
                                       f32_2 %417 = OpFAdd %414 %416 
                                       f32_4 %418 = OpLoad %297 
                                       f32_4 %419 = OpVectorShuffle %418 %417 0 1 4 5 
                                                      OpStore %297 %419 
                                Private f32* %420 = OpAccessChain %335 %51 
                                         f32 %421 = OpLoad %420 
                                Private f32* %422 = OpAccessChain %297 %51 
                                         f32 %423 = OpLoad %422 
                                        bool %424 = OpFOrdGreaterThanEqual %421 %423 
                                                      OpStore %377 %424 
                                        bool %426 = OpLoad %377 
                                                      OpSelectionMerge %428 None 
                                                      OpBranchConditional %426 %427 %429 
                                             %427 = OpLabel 
                                                      OpStore %425 %98 
                                                      OpBranch %428 
                                             %429 = OpLabel 
                                                      OpStore %425 %125 
                                                      OpBranch %428 
                                             %428 = OpLabel 
                                         f32 %430 = OpLoad %425 
                                                      OpStore %383 %430 
                                       f32_4 %431 = OpLoad %297 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 3 
                                       f32_3 %433 = OpFNegate %432 
                                       f32_4 %434 = OpLoad %140 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 6 3 
                                                      OpStore %140 %435 
                                Private f32* %436 = OpAccessChain %335 %51 
                                         f32 %437 = OpLoad %436 
                                         f32 %438 = OpFNegate %437 
                                Private f32* %439 = OpAccessChain %140 %194 
                                                      OpStore %439 %438 
                                Private f32* %440 = OpAccessChain %140 %51 
                                         f32 %441 = OpLoad %440 
                                Private f32* %442 = OpAccessChain %335 %51 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpFAdd %441 %443 
                                Private f32* %445 = OpAccessChain %232 %51 
                                                      OpStore %445 %444 
                                       f32_4 %446 = OpLoad %297 
                                       f32_3 %447 = OpVectorShuffle %446 %446 1 2 0 
                                       f32_4 %448 = OpLoad %140 
                                       f32_3 %449 = OpVectorShuffle %448 %448 1 2 3 
                                       f32_3 %450 = OpFAdd %447 %449 
                                       f32_4 %451 = OpLoad %232 
                                       f32_4 %452 = OpVectorShuffle %451 %450 0 4 5 6 
                                                      OpStore %232 %452 
                                         f32 %453 = OpLoad %383 
                                       f32_3 %454 = OpCompositeConstruct %453 %453 %453 
                                       f32_4 %455 = OpLoad %232 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpFMul %454 %456 
                                       f32_4 %458 = OpLoad %297 
                                       f32_3 %459 = OpVectorShuffle %458 %458 0 1 3 
                                       f32_3 %460 = OpFAdd %457 %459 
                                       f32_4 %461 = OpLoad %20 
                                       f32_4 %462 = OpVectorShuffle %461 %460 4 5 2 6 
                                                      OpStore %20 %462 
                                         f32 %463 = OpLoad %383 
                                Private f32* %464 = OpAccessChain %232 %194 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpFMul %463 %465 
                                Private f32* %467 = OpAccessChain %335 %51 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFAdd %466 %468 
                                                      OpStore %383 %469 
                                Private f32* %470 = OpAccessChain %20 %47 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpLoad %383 
                                         f32 %473 = OpExtInst %1 37 %471 %472 
                                Private f32* %474 = OpAccessChain %140 %51 
                                                      OpStore %474 %473 
                                Private f32* %475 = OpAccessChain %20 %51 
                                         f32 %476 = OpLoad %475 
                                Private f32* %477 = OpAccessChain %140 %51 
                                         f32 %478 = OpLoad %477 
                                         f32 %479 = OpFNegate %478 
                                         f32 %480 = OpFAdd %476 %479 
                                Private f32* %481 = OpAccessChain %140 %51 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %20 %47 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpLoad %383 
                                         f32 %486 = OpFAdd %484 %485 
                                                      OpStore %383 %486 
                                Private f32* %488 = OpAccessChain %140 %51 
                                         f32 %489 = OpLoad %488 
                                         f32 %491 = OpFMul %489 %490 
                                         f32 %493 = OpFAdd %491 %492 
                                                      OpStore %487 %493 
                                         f32 %494 = OpLoad %383 
                                         f32 %495 = OpLoad %487 
                                         f32 %496 = OpFDiv %494 %495 
                                                      OpStore %383 %496 
                                         f32 %497 = OpLoad %383 
                                Private f32* %498 = OpAccessChain %20 %194 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFAdd %497 %499 
                                                      OpStore %383 %500 
                                Private f32* %501 = OpAccessChain %20 %51 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %502 %492 
                                                      OpStore %487 %503 
                                Private f32* %504 = OpAccessChain %140 %51 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpLoad %487 
                                         f32 %507 = OpFDiv %505 %506 
                                                      OpStore %487 %507 
                                Private f32* %508 = OpAccessChain %9 %47 
                                         f32 %509 = OpLoad %508 
                                Private f32* %510 = OpAccessChain %9 %56 
                                         f32 %511 = OpLoad %510 
                                        bool %512 = OpFOrdGreaterThanEqual %509 %511 
                                                      OpStore %203 %512 
                                        bool %514 = OpLoad %203 
                                                      OpSelectionMerge %516 None 
                                                      OpBranchConditional %514 %515 %517 
                                             %515 = OpLabel 
                                                      OpStore %513 %98 
                                                      OpBranch %516 
                                             %517 = OpLabel 
                                                      OpStore %513 %125 
                                                      OpBranch %516 
                                             %516 = OpLabel 
                                         f32 %518 = OpLoad %513 
                                                      OpStore %305 %518 
                                Private f32* %520 = OpAccessChain %9 %56 
                                         f32 %521 = OpLoad %520 
                                         f32 %522 = OpFNegate %521 
                                Private f32* %523 = OpAccessChain %9 %47 
                                         f32 %524 = OpLoad %523 
                                         f32 %525 = OpFAdd %522 %524 
                                                      OpStore %519 %525 
                                         f32 %527 = OpLoad %305 
                                         f32 %528 = OpLoad %519 
                                         f32 %529 = OpFMul %527 %528 
                                Private f32* %530 = OpAccessChain %9 %56 
                                         f32 %531 = OpLoad %530 
                                         f32 %532 = OpFAdd %529 %531 
                                Private f32* %533 = OpAccessChain %526 %51 
                                                      OpStore %533 %532 
                                Private f32* %535 = OpAccessChain %9 %51 
                                         f32 %536 = OpLoad %535 
                                Private f32* %537 = OpAccessChain %526 %51 
                                         f32 %538 = OpLoad %537 
                                        bool %539 = OpFOrdGreaterThanEqual %536 %538 
                                                      OpStore %534 %539 
                                        bool %542 = OpLoad %534 
                                                      OpSelectionMerge %544 None 
                                                      OpBranchConditional %542 %543 %545 
                                             %543 = OpLabel 
                                                      OpStore %541 %98 
                                                      OpBranch %544 
                                             %545 = OpLabel 
                                                      OpStore %541 %125 
                                                      OpBranch %544 
                                             %544 = OpLabel 
                                         f32 %546 = OpLoad %541 
                                                      OpStore %540 %546 
                                Private f32* %548 = OpAccessChain %526 %51 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFNegate %549 
                                Private f32* %551 = OpAccessChain %9 %51 
                                         f32 %552 = OpLoad %551 
                                         f32 %553 = OpFAdd %550 %552 
                                Private f32* %554 = OpAccessChain %547 %51 
                                                      OpStore %554 %553 
                                         f32 %555 = OpLoad %540 
                                Private f32* %556 = OpAccessChain %547 %51 
                                         f32 %557 = OpLoad %556 
                                         f32 %558 = OpFMul %555 %557 
                                Private f32* %559 = OpAccessChain %526 %51 
                                         f32 %560 = OpLoad %559 
                                         f32 %561 = OpFAdd %558 %560 
                                Private f32* %562 = OpAccessChain %547 %51 
                                                      OpStore %562 %561 
                                Private f32* %563 = OpAccessChain %547 %51 
                                         f32 %564 = OpLoad %563 
                                Uniform f32* %566 = OpAccessChain %29 %565 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpFMul %564 %567 
                                Private f32* %569 = OpAccessChain %547 %51 
                                                      OpStore %569 %568 
                                Private f32* %570 = OpAccessChain %547 %51 
                                         f32 %571 = OpLoad %570 
                                Private f32* %572 = OpAccessChain %20 %51 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpExtInst %1 37 %571 %573 
                                Private f32* %575 = OpAccessChain %547 %51 
                                                      OpStore %575 %574 
                                Private f32* %577 = OpAccessChain %188 %47 
                                         f32 %578 = OpLoad %577 
                                Private f32* %579 = OpAccessChain %188 %51 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFAdd %578 %580 
                                                      OpStore %576 %581 
                                Private f32* %582 = OpAccessChain %20 %56 
                                         f32 %583 = OpLoad %582 
                                Private f32* %584 = OpAccessChain %124 %51 
                                         f32 %585 = OpLoad %584 
                                         f32 %586 = OpFMul %583 %585 
                                         f32 %587 = OpLoad %576 
                                         f32 %588 = OpFAdd %586 %587 
                                                      OpStore %576 %588 
                                         f32 %589 = OpLoad %576 
                                         f32 %591 = OpFMul %589 %590 
                                                      OpStore %576 %591 
                                         f32 %592 = OpLoad %576 
                                         f32 %593 = OpExtInst %1 43 %592 %125 %98 
                                                      OpStore %576 %593 
                                         f32 %594 = OpLoad %383 
                                       f32_3 %595 = OpCompositeConstruct %594 %594 %594 
                                       f32_3 %596 = OpExtInst %1 4 %595 
                                       f32_3 %599 = OpFAdd %596 %598 
                                                      OpStore %526 %599 
                                       f32_3 %600 = OpLoad %526 
                                       f32_3 %601 = OpExtInst %1 10 %600 
                                                      OpStore %526 %601 
                                       f32_3 %602 = OpLoad %526 
                                       f32_3 %604 = OpFMul %602 %603 
                                       f32_3 %607 = OpFAdd %604 %606 
                                                      OpStore %526 %607 
                                       f32_3 %608 = OpLoad %526 
                                       f32_3 %609 = OpExtInst %1 4 %608 
                                       f32_3 %611 = OpFAdd %609 %610 
                                                      OpStore %526 %611 
                                       f32_3 %612 = OpLoad %526 
                                       f32_3 %613 = OpCompositeConstruct %125 %125 %125 
                                       f32_3 %614 = OpCompositeConstruct %98 %98 %98 
                                       f32_3 %615 = OpExtInst %1 43 %612 %613 %614 
                                                      OpStore %526 %615 
                                       f32_3 %616 = OpLoad %526 
                                       f32_3 %617 = OpFAdd %616 %610 
                                                      OpStore %526 %617 
                                         f32 %618 = OpLoad %487 
                                       f32_3 %619 = OpCompositeConstruct %618 %618 %618 
                                       f32_3 %620 = OpLoad %526 
                                       f32_3 %621 = OpFMul %619 %620 
                                       f32_3 %623 = OpFAdd %621 %622 
                                                      OpStore %526 %623 
                                       f32_3 %624 = OpLoad %526 
                                       f32_3 %625 = OpLoad %547 
                                       f32_3 %626 = OpVectorShuffle %625 %625 0 0 0 
                                       f32_3 %627 = OpFMul %624 %626 
                                       f32_4 %628 = OpLoad %20 
                                       f32_4 %629 = OpVectorShuffle %628 %627 4 5 6 3 
                                                      OpStore %20 %629 
                                       f32_3 %630 = OpLoad %547 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 0 0 
                                       f32_3 %632 = OpFNegate %631 
                                       f32_3 %633 = OpLoad %526 
                                       f32_3 %634 = OpFMul %632 %633 
                                       f32_3 %635 = OpLoad %335 
                                       f32_3 %636 = OpFAdd %634 %635 
                                                      OpStore %547 %636 
                                         f32 %637 = OpLoad %576 
                                       f32_3 %638 = OpCompositeConstruct %637 %637 %637 
                                       f32_3 %639 = OpLoad %547 
                                       f32_3 %640 = OpFMul %638 %639 
                                       f32_4 %641 = OpLoad %20 
                                       f32_3 %642 = OpVectorShuffle %641 %641 0 1 2 
                                       f32_3 %643 = OpFAdd %640 %642 
                                                      OpStore %547 %643 
                                       f32_3 %644 = OpLoad %547 
                                       f32_4 %645 = OpLoad %365 
                                       f32_4 %646 = OpVectorShuffle %645 %644 4 5 6 3 
                                                      OpStore %365 %646 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	vec4 _EmissiveColor;
uniform 	float _EmissiveThresholdSensitivity;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ParallaxTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat16_2;
vec4 u_xlat10_2;
vec2 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
float u_xlat16_7;
float u_xlat8;
vec2 u_xlat16_8;
bool u_xlatb8;
vec2 u_xlat10;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
float u_xlat16_22;
bool u_xlatb22;
float u_xlat23;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz + (-_EmissiveColor.xyz);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y + u_xlat1.x;
    u_xlat1.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb1 = u_xlat1.x<_EmissiveThresholdSensitivity;
    u_xlat16_8.x = dot(u_xlat10_0.xyz, vec3(0.298900008, 0.586600006, 0.114500001));
    u_xlat16_8.xy = u_xlat10_0.xz + (-u_xlat16_8.xx);
    u_xlat16_8.xy = u_xlat16_8.xy * vec2(1.0, 1.0) + vec2(1.0, 1.0);
    u_xlat16_22 = (-u_xlat16_8.x) * 0.298900008 + 1.0;
    u_xlat16_22 = (-u_xlat16_8.y) * 0.114500001 + u_xlat16_22;
    u_xlat16_22 = u_xlat16_22 * 1.70473921;
    u_xlat10_2 = texture(_ParallaxTex, vs_TEXCOORD4.xy);
    u_xlat3.xy = mix(vec2(0.0, 0.0), vec2(1.0, 0.75), vec2(bvec2(u_xlatb1)));
    u_xlat16_2.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
    u_xlat2.xyz = u_xlat3.yyy * u_xlat16_2.xyz + u_xlat10_0.xyz;
    u_xlat1.xz = log2(u_xlat16_8.xy);
    u_xlat1.y = log2(u_xlat16_22);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10.xy = u_xlat3.xx * u_xlat1.xy;
    u_xlat22 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb22 = u_xlat22<0.0;
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb22){
        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat22 = u_xlat4.y * 0.25 + 0.75;
        u_xlat23 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat22, u_xlat23);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat22 = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat4.xyz = u_xlat2.xyz * vs_TEXCOORD5.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat4.w = 0.0;
    u_xlat2.w = u_xlat10_0.w;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat4.xyz = u_xlat1.zyx * u_xlat3.xxx + u_xlat2.zyx;
    u_xlatb21 = u_xlat4.y>=u_xlat4.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat4.w = 0.666666687;
    u_xlat1.xy = (-u_xlat4.xy) + u_xlat4.yx;
    u_xlat1.w = -1.0;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat4.xyw;
    u_xlatb21 = u_xlat4.z>=u_xlat5.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat5.w = u_xlat4.z;
    u_xlat6.xyw = u_xlat5.wyx;
    u_xlat6.z = -1.0;
    u_xlat6 = (-u_xlat5) + u_xlat6;
    u_xlat5 = vec4(u_xlat21) * u_xlat6 + u_xlat5;
    u_xlat21 = min(u_xlat5.y, u_xlat5.w);
    u_xlat21 = (-u_xlat21) + u_xlat5.x;
    u_xlat1.x = (-u_xlat5.y) + u_xlat5.w;
    u_xlat8 = u_xlat21 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat8;
    u_xlat1.x = u_xlat1.x + u_xlat5.z;
    u_xlat8 = u_xlat5.x + 1.00000001e-010;
    u_xlat21 = u_xlat21 / u_xlat8;
    u_xlatb8 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat16_7 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat7 = u_xlat8 * u_xlat16_7 + u_xlat10_0.z;
    u_xlatb14 = u_xlat10_0.x>=u_xlat7;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = (-u_xlat7) + u_xlat10_0.x;
    u_xlat0.x = u_xlat14 * u_xlat0.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _MaxValue;
    u_xlat0.x = min(u_xlat0.x, u_xlat5.x);
    u_xlat7 = u_xlat10.y + u_xlat10.x;
    u_xlat7 = u_xlat1.z * u_xlat3.x + u_xlat7;
    u_xlat7 = u_xlat7 * 10.0;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xzw = (-u_xlat0.xxx) * u_xlat1.xyz + u_xlat4.zyx;
    SV_Target0.xyz = vec3(u_xlat7) * u_xlat0.xzw + u_xlat2.xyz;
    SV_Target0.w = u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 335
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %154 %163 %164 %177 %215 %218 %325 %328 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %163 Location 163 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %215 Location 215 
                                                      OpDecorate %218 Location 218 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %325 Location 325 
                                                      OpDecorate %328 Location 328 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                         f32 %141 = OpConstant 3.674022E-40 
                                       f32_2 %142 = OpConstantComposite %141 %141 
                                         f32 %148 = OpConstant 3.674022E-40 
                                       f32_2 %149 = OpConstantComposite %148 %148 
                                             %153 = OpTypePointer Output %97 
                               Output f32_2* %154 = OpVariable Output 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_2 %158 = OpConstantComposite %141 %157 
                                         f32 %160 = OpConstant 3.674022E-40 
                                       f32_2 %161 = OpConstantComposite %160 %141 
                               Output f32_2* %163 = OpVariable Output 
                                Input f32_4* %164 = OpVariable Input 
                                         i32 %167 = OpConstant 10 
                                             %176 = OpTypePointer Input %51 
                                Input f32_3* %177 = OpVariable Input 
                                         i32 %179 = OpConstant 8 
                                         u32 %184 = OpConstant 0 
                                             %185 = OpTypePointer Private %6 
                                         u32 %198 = OpConstant 2 
                                Private f32* %200 = OpVariable Private 
                               Output f32_3* %215 = OpVariable Output 
                               Output f32_4* %218 = OpVariable Output 
                                       f32_4 %219 = OpConstantComposite %160 %160 %160 %160 
                                             %220 = OpTypePointer Private %51 
                              Private f32_3* %221 = OpVariable Private 
                              Private f32_4* %238 = OpVariable Private 
                              Private f32_3* %244 = OpVariable Private 
                                         i32 %250 = OpConstant 4 
                                         i32 %256 = OpConstant 5 
                                         i32 %262 = OpConstant 6 
                                         u32 %271 = OpConstant 3 
                                       f32_3 %292 = OpConstantComposite %160 %160 %160 
                                         f32 %300 = OpConstant 3.674022E-40 
                                       f32_3 %301 = OpConstantComposite %300 %300 %300 
                                         f32 %312 = OpConstant 3.674022E-40 
                                       f32_3 %313 = OpConstantComposite %312 %312 %312 
                                         f32 %315 = OpConstant 3.674022E-40 
                                       f32_3 %316 = OpConstantComposite %315 %315 %315 
                               Output f32_3* %325 = OpVariable Output 
                               Output f32_4* %328 = OpVariable Output 
                                             %329 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                        f32_4 %98 = OpLoad %45 
                                        f32_2 %99 = OpVectorShuffle %98 %98 1 1 
                              Uniform f32_4* %100 = OpAccessChain %21 %65 %24 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %99 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 2 3 
                                                      OpStore %9 %105 
                              Uniform f32_4* %106 = OpAccessChain %21 %65 %29 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
                                       f32_4 %109 = OpLoad %45 
                                       f32_2 %110 = OpVectorShuffle %109 %109 0 0 
                                       f32_2 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_2 %113 = OpVectorShuffle %112 %112 0 1 
                                       f32_2 %114 = OpFAdd %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 2 3 
                                                      OpStore %9 %116 
                              Uniform f32_4* %117 = OpAccessChain %21 %65 %37 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpLoad %45 
                                       f32_2 %121 = OpVectorShuffle %120 %120 2 2 
                                       f32_2 %122 = OpFMul %119 %121 
                                       f32_4 %123 = OpLoad %9 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpVectorShuffle %126 %125 4 5 2 3 
                                                      OpStore %9 %127 
                              Uniform f32_4* %128 = OpAccessChain %21 %65 %47 
                                       f32_4 %129 = OpLoad %128 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                                       f32_4 %131 = OpLoad %45 
                                       f32_2 %132 = OpVectorShuffle %131 %131 3 3 
                                       f32_2 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %9 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFAdd %133 %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 3 
                                                      OpStore %9 %138 
                                       f32_4 %139 = OpLoad %9 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_2 %143 = OpFAdd %140 %142 
                                       f32_4 %144 = OpLoad %9 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %9 %145 
                                       f32_4 %146 = OpLoad %9 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_2 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 2 3 
                                                      OpStore %9 %152 
                                       f32_4 %155 = OpLoad %9 
                                       f32_2 %156 = OpVectorShuffle %155 %155 0 1 
                                       f32_2 %159 = OpFMul %156 %158 
                                       f32_2 %162 = OpFAdd %159 %161 
                                                      OpStore %154 %162 
                                       f32_4 %165 = OpLoad %164 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                              Uniform f32_4* %168 = OpAccessChain %21 %167 
                                       f32_4 %169 = OpLoad %168 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                       f32_2 %171 = OpFMul %166 %170 
                              Uniform f32_4* %172 = OpAccessChain %21 %167 
                                       f32_4 %173 = OpLoad %172 
                                       f32_2 %174 = OpVectorShuffle %173 %173 2 3 
                                       f32_2 %175 = OpFAdd %171 %174 
                                                      OpStore %163 %175 
                                       f32_3 %178 = OpLoad %177 
                              Uniform f32_4* %180 = OpAccessChain %21 %179 %29 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                         f32 %183 = OpDot %178 %182 
                                Private f32* %186 = OpAccessChain %9 %184 
                                                      OpStore %186 %183 
                                       f32_3 %187 = OpLoad %177 
                              Uniform f32_4* %188 = OpAccessChain %21 %179 %24 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %187 %190 
                                Private f32* %192 = OpAccessChain %9 %83 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %177 
                              Uniform f32_4* %194 = OpAccessChain %21 %179 %37 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                         f32 %197 = OpDot %193 %196 
                                Private f32* %199 = OpAccessChain %9 %198 
                                                      OpStore %199 %197 
                                       f32_4 %201 = OpLoad %9 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %9 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                         f32 %205 = OpDot %202 %204 
                                                      OpStore %200 %205 
                                         f32 %206 = OpLoad %200 
                                         f32 %207 = OpExtInst %1 32 %206 
                                                      OpStore %200 %207 
                                         f32 %208 = OpLoad %200 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_4 %210 = OpLoad %9 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %9 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                                      OpStore %215 %217 
                                                      OpStore %218 %219 
                                Private f32* %222 = OpAccessChain %9 %83 
                                         f32 %223 = OpLoad %222 
                                Private f32* %224 = OpAccessChain %9 %83 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                Private f32* %227 = OpAccessChain %221 %184 
                                                      OpStore %227 %226 
                                Private f32* %228 = OpAccessChain %9 %184 
                                         f32 %229 = OpLoad %228 
                                Private f32* %230 = OpAccessChain %9 %184 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFMul %229 %231 
                                Private f32* %233 = OpAccessChain %221 %184 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFNegate %234 
                                         f32 %236 = OpFAdd %232 %235 
                                Private f32* %237 = OpAccessChain %221 %184 
                                                      OpStore %237 %236 
                                       f32_4 %239 = OpLoad %9 
                                       f32_4 %240 = OpVectorShuffle %239 %239 1 2 2 0 
                                       f32_4 %241 = OpLoad %9 
                                       f32_4 %242 = OpVectorShuffle %241 %241 0 1 2 2 
                                       f32_4 %243 = OpFMul %240 %242 
                                                      OpStore %238 %243 
                              Uniform f32_4* %245 = OpAccessChain %21 %47 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %238 
                                         f32 %248 = OpDot %246 %247 
                                Private f32* %249 = OpAccessChain %244 %184 
                                                      OpStore %249 %248 
                              Uniform f32_4* %251 = OpAccessChain %21 %250 
                                       f32_4 %252 = OpLoad %251 
                                       f32_4 %253 = OpLoad %238 
                                         f32 %254 = OpDot %252 %253 
                                Private f32* %255 = OpAccessChain %244 %83 
                                                      OpStore %255 %254 
                              Uniform f32_4* %257 = OpAccessChain %21 %256 
                                       f32_4 %258 = OpLoad %257 
                                       f32_4 %259 = OpLoad %238 
                                         f32 %260 = OpDot %258 %259 
                                Private f32* %261 = OpAccessChain %244 %198 
                                                      OpStore %261 %260 
                              Uniform f32_4* %263 = OpAccessChain %21 %262 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %266 = OpLoad %221 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
                                       f32_3 %268 = OpFMul %265 %267 
                                       f32_3 %269 = OpLoad %244 
                                       f32_3 %270 = OpFAdd %268 %269 
                                                      OpStore %221 %270 
                                Private f32* %272 = OpAccessChain %9 %271 
                                                      OpStore %272 %141 
                              Uniform f32_4* %273 = OpAccessChain %21 %29 
                                       f32_4 %274 = OpLoad %273 
                                       f32_4 %275 = OpLoad %9 
                                         f32 %276 = OpDot %274 %275 
                                Private f32* %277 = OpAccessChain %244 %184 
                                                      OpStore %277 %276 
                              Uniform f32_4* %278 = OpAccessChain %21 %24 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpLoad %9 
                                         f32 %281 = OpDot %279 %280 
                                Private f32* %282 = OpAccessChain %244 %83 
                                                      OpStore %282 %281 
                              Uniform f32_4* %283 = OpAccessChain %21 %37 
                                       f32_4 %284 = OpLoad %283 
                                       f32_4 %285 = OpLoad %9 
                                         f32 %286 = OpDot %284 %285 
                                Private f32* %287 = OpAccessChain %244 %198 
                                                      OpStore %287 %286 
                                       f32_3 %288 = OpLoad %221 
                                       f32_3 %289 = OpLoad %244 
                                       f32_3 %290 = OpFAdd %288 %289 
                                                      OpStore %221 %290 
                                       f32_3 %291 = OpLoad %221 
                                       f32_3 %293 = OpExtInst %1 40 %291 %292 
                                                      OpStore %221 %293 
                                       f32_3 %294 = OpLoad %221 
                                       f32_3 %295 = OpExtInst %1 30 %294 
                                       f32_4 %296 = OpLoad %9 
                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 6 3 
                                                      OpStore %9 %297 
                                       f32_4 %298 = OpLoad %9 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %302 = OpFMul %299 %301 
                                       f32_4 %303 = OpLoad %9 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %9 %304 
                                       f32_4 %305 = OpLoad %9 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_3 %307 = OpExtInst %1 29 %306 
                                       f32_4 %308 = OpLoad %9 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 6 3 
                                                      OpStore %9 %309 
                                       f32_4 %310 = OpLoad %9 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_3 %317 = OpFAdd %314 %316 
                                       f32_4 %318 = OpLoad %9 
                                       f32_4 %319 = OpVectorShuffle %318 %317 4 5 6 3 
                                                      OpStore %9 %319 
                                       f32_4 %320 = OpLoad %9 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
                                       f32_3 %322 = OpExtInst %1 40 %321 %292 
                                       f32_4 %323 = OpLoad %9 
                                       f32_4 %324 = OpVectorShuffle %323 %322 4 5 6 3 
                                                      OpStore %9 %324 
                                       f32_4 %326 = OpLoad %9 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                                      OpStore %325 %327 
                                                      OpStore %328 %219 
                                 Output f32* %330 = OpAccessChain %87 %29 %83 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpFNegate %331 
                                 Output f32* %333 = OpAccessChain %87 %29 %83 
                                                      OpStore %333 %332 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 648
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %120 %234 %359 %365 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpMemberDecorate %27 0 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 RelaxedPrecision 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpMemberDecorate %27 8 Offset 27 
                                                      OpMemberDecorate %27 9 Offset 27 
                                                      OpMemberDecorate %27 10 Offset 27 
                                                      OpMemberDecorate %27 11 RelaxedPrecision 
                                                      OpMemberDecorate %27 11 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %118 DescriptorSet 118 
                                                      OpDecorate %118 Binding 118 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %120 Location 120 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %226 SpecId 226 
                                                      OpDecorate %234 Location 234 
                                                      OpDecorate %324 DescriptorSet 324 
                                                      OpDecorate %324 Binding 324 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %359 Location 359 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %365 Location 365 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %593 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeVector %6 3 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %7 %25 
                                              %27 = OpTypeStruct %7 %7 %26 %21 %21 %7 %6 %6 %7 %6 %6 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32_4; f32; f32; f32;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 8 
                                              %32 = OpTypePointer Uniform %7 
                                          u32 %47 = OpConstant 1 
                                              %48 = OpTypePointer Private %6 
                                          u32 %51 = OpConstant 0 
                                          u32 %56 = OpConstant 2 
                                              %70 = OpTypeBool 
                                              %71 = OpTypePointer Private %70 
                                Private bool* %72 = OpVariable Private 
                                          i32 %75 = OpConstant 9 
                                              %76 = OpTypePointer Uniform %6 
                               Private f32_4* %80 = OpVariable Private 
                                          f32 %83 = OpConstant 3.674022E-40 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                        f32_3 %86 = OpConstantComposite %83 %84 %85 
                                              %89 = OpTypePointer Private %15 
                               Private f32_2* %90 = OpVariable Private 
                                          f32 %98 = OpConstant 3.674022E-40 
                                        f32_2 %99 = OpConstantComposite %98 %98 
                                Private f32* %101 = OpVariable Private 
                                         f32 %114 = OpConstant 3.674022E-40 
                                             %116 = OpTypePointer Private %21 
                              Private f32_3* %117 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %118 = OpVariable UniformConstant 
                                Input f32_2* %120 = OpVariable Input 
                              Private f32_2* %124 = OpVariable Private 
                                         f32 %125 = OpConstant 3.674022E-40 
                                       f32_2 %126 = OpConstantComposite %125 %125 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_2 %128 = OpConstantComposite %98 %127 
                                             %130 = OpTypeVector %70 2 
                              Private f32_3* %134 = OpVariable Private 
                              Private f32_4* %140 = OpVariable Private 
                                         i32 %159 = OpConstant 7 
                                         i32 %181 = OpConstant 6 
                              Private f32_2* %188 = OpVariable Private 
                                         u32 %194 = OpConstant 3 
                                         i32 %197 = OpConstant 11 
                               Private bool* %203 = OpVariable Private 
                                         i32 %208 = OpConstant 0 
                                         i32 %209 = OpConstant 1 
                                         i32 %211 = OpConstant -1 
                                        bool %220 = OpConstantFalse 
                                        bool %226 = OpSpecConstantFalse 
                              Private f32_4* %232 = OpVariable Private 
                                             %233 = OpTypePointer Input %21 
                                Input f32_3* %234 = OpVariable Input 
                                         i32 %237 = OpConstant 2 
                                         i32 %268 = OpConstant 3 
                                             %275 = OpTypePointer Function %21 
                                         i32 %289 = OpConstant 4 
                                             %290 = OpTypePointer Uniform %21 
                              Private f32_4* %297 = OpVariable Private 
                                Private f32* %305 = OpVariable Private 
                                         f32 %308 = OpConstant 3.674022E-40 
                                Private f32* %311 = OpVariable Private 
                                         f32 %314 = OpConstant 3.674022E-40 
                                             %321 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %322 = OpTypeSampledImage %321 
                                             %323 = OpTypePointer UniformConstant %322 
 UniformConstant read_only Texture3DSampled* %324 = OpVariable UniformConstant 
                              Private f32_3* %335 = OpVariable Private 
                              Private f32_3* %345 = OpVariable Private 
                                         i32 %348 = OpConstant 5 
                                Input f32_3* %359 = OpVariable Input 
                                             %364 = OpTypePointer Output %7 
                               Output f32_4* %365 = OpVariable Output 
                                             %368 = OpTypePointer Output %6 
                               Private bool* %377 = OpVariable Private 
                                Private f32* %383 = OpVariable Private 
                                             %384 = OpTypePointer Function %6 
                              Private f32_2* %391 = OpVariable Private 
                                         f32 %399 = OpConstant 3.674022E-40 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_2 %416 = OpConstantComposite %399 %415 
                                Private f32* %487 = OpVariable Private 
                                         f32 %490 = OpConstant 3.674022E-40 
                                         f32 %492 = OpConstant 3.674022E-40 
                                Private f32* %519 = OpVariable Private 
                              Private f32_3* %526 = OpVariable Private 
                               Private bool* %534 = OpVariable Private 
                                Private f32* %540 = OpVariable Private 
                              Private f32_3* %547 = OpVariable Private 
                                         i32 %565 = OpConstant 10 
                                Private f32* %576 = OpVariable Private 
                                         f32 %590 = OpConstant 3.674022E-40 
                                         f32 %597 = OpConstant 3.674022E-40 
                                       f32_3 %598 = OpConstantComposite %98 %415 %597 
                                       f32_3 %603 = OpConstantComposite %490 %490 %490 
                                         f32 %605 = OpConstant 3.674022E-40 
                                       f32_3 %606 = OpConstantComposite %605 %605 %605 
                                       f32_3 %610 = OpConstantComposite %399 %399 %399 
                                       f32_3 %622 = OpConstantComposite %98 %98 %98 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %276 = OpVariable Function 
                               Function f32* %385 = OpVariable Function 
                               Function f32* %425 = OpVariable Function 
                               Function f32* %513 = OpVariable Function 
                               Function f32* %541 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %22 = OpLoad %9 
                                        f32_3 %23 = OpVectorShuffle %22 %22 0 1 2 
                               Uniform f32_4* %33 = OpAccessChain %29 %31 
                                        f32_4 %34 = OpLoad %33 
                                        f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                        f32_3 %36 = OpFNegate %35 
                                        f32_3 %37 = OpFAdd %23 %36 
                                        f32_4 %38 = OpLoad %20 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 6 3 
                                                      OpStore %20 %39 
                                        f32_4 %40 = OpLoad %20 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                                        f32_4 %42 = OpLoad %20 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_2 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %20 
                                        f32_4 %46 = OpVectorShuffle %45 %44 4 5 2 3 
                                                      OpStore %20 %46 
                                 Private f32* %49 = OpAccessChain %20 %47 
                                          f32 %50 = OpLoad %49 
                                 Private f32* %52 = OpAccessChain %20 %51 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFAdd %50 %53 
                                 Private f32* %55 = OpAccessChain %20 %51 
                                                      OpStore %55 %54 
                                 Private f32* %57 = OpAccessChain %20 %56 
                                          f32 %58 = OpLoad %57 
                                 Private f32* %59 = OpAccessChain %20 %56 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %58 %60 
                                 Private f32* %62 = OpAccessChain %20 %51 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %20 %51 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %20 %51 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpExtInst %1 31 %67 
                                 Private f32* %69 = OpAccessChain %20 %51 
                                                      OpStore %69 %68 
                                 Private f32* %73 = OpAccessChain %20 %51 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %77 = OpAccessChain %29 %75 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %74 %78 
                                                      OpStore %72 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                          f32 %87 = OpDot %82 %86 
                                 Private f32* %88 = OpAccessChain %80 %51 
                                                      OpStore %88 %87 
                                        f32_4 %91 = OpLoad %9 
                                        f32_2 %92 = OpVectorShuffle %91 %91 0 2 
                                        f32_4 %93 = OpLoad %80 
                                        f32_2 %94 = OpVectorShuffle %93 %93 0 0 
                                        f32_2 %95 = OpFNegate %94 
                                        f32_2 %96 = OpFAdd %92 %95 
                                                      OpStore %90 %96 
                                        f32_2 %97 = OpLoad %90 
                                       f32_2 %100 = OpFAdd %97 %99 
                                                      OpStore %90 %100 
                                Private f32* %102 = OpAccessChain %90 %51 
                                         f32 %103 = OpLoad %102 
                                         f32 %104 = OpFNegate %103 
                                         f32 %105 = OpFMul %104 %83 
                                         f32 %106 = OpFAdd %105 %98 
                                                      OpStore %101 %106 
                                Private f32* %107 = OpAccessChain %90 %47 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFNegate %108 
                                         f32 %110 = OpFMul %109 %85 
                                         f32 %111 = OpLoad %101 
                                         f32 %112 = OpFAdd %110 %111 
                                                      OpStore %101 %112 
                                         f32 %113 = OpLoad %101 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %101 %115 
                  read_only Texture2DSampled %119 = OpLoad %118 
                                       f32_2 %121 = OpLoad %120 
                                       f32_4 %122 = OpImageSampleImplicitLod %119 %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                                      OpStore %117 %123 
                                        bool %129 = OpLoad %72 
                                      bool_2 %131 = OpCompositeConstruct %129 %129 
                                       f32_2 %132 = OpSelect %131 %99 %126 
                                       f32_2 %133 = OpExtInst %1 46 %126 %128 %132 
                                                      OpStore %124 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %137 = OpFNegate %136 
                                       f32_3 %138 = OpLoad %117 
                                       f32_3 %139 = OpFAdd %137 %138 
                                                      OpStore %134 %139 
                                       f32_2 %141 = OpLoad %124 
                                       f32_3 %142 = OpVectorShuffle %141 %141 1 1 1 
                                       f32_3 %143 = OpLoad %134 
                                       f32_3 %144 = OpFMul %142 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFAdd %144 %146 
                                       f32_4 %148 = OpLoad %140 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %140 %149 
                                       f32_2 %150 = OpLoad %90 
                                       f32_2 %151 = OpExtInst %1 30 %150 
                                       f32_4 %152 = OpLoad %20 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 1 5 3 
                                                      OpStore %20 %153 
                                         f32 %154 = OpLoad %101 
                                         f32 %155 = OpExtInst %1 30 %154 
                                Private f32* %156 = OpAccessChain %20 %47 
                                                      OpStore %156 %155 
                                       f32_4 %157 = OpLoad %20 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Uniform f32* %160 = OpAccessChain %29 %159 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %162 = OpAccessChain %29 %159 
                                         f32 %163 = OpLoad %162 
                                Uniform f32* %164 = OpAccessChain %29 %159 
                                         f32 %165 = OpLoad %164 
                                       f32_3 %166 = OpCompositeConstruct %161 %163 %165 
                                         f32 %167 = OpCompositeExtract %166 0 
                                         f32 %168 = OpCompositeExtract %166 1 
                                         f32 %169 = OpCompositeExtract %166 2 
                                       f32_3 %170 = OpCompositeConstruct %167 %168 %169 
                                       f32_3 %171 = OpFMul %158 %170 
                                       f32_4 %172 = OpLoad %20 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %20 %173 
                                       f32_4 %174 = OpLoad %20 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpExtInst %1 29 %175 
                                       f32_4 %177 = OpLoad %20 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %20 %178 
                                       f32_4 %179 = OpLoad %20 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                Uniform f32* %182 = OpAccessChain %29 %181 
                                         f32 %183 = OpLoad %182 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_3 %185 = OpFMul %180 %184 
                                       f32_4 %186 = OpLoad %20 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %20 %187 
                                       f32_2 %189 = OpLoad %124 
                                       f32_2 %190 = OpVectorShuffle %189 %189 0 0 
                                       f32_4 %191 = OpLoad %20 
                                       f32_2 %192 = OpVectorShuffle %191 %191 0 1 
                                       f32_2 %193 = OpFMul %190 %192 
                                                      OpStore %188 %193 
                                Private f32* %195 = OpAccessChain %9 %194 
                                         f32 %196 = OpLoad %195 
                                Uniform f32* %198 = OpAccessChain %29 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %196 %200 
                                Private f32* %202 = OpAccessChain %80 %51 
                                                      OpStore %202 %201 
                                Private f32* %204 = OpAccessChain %80 %51 
                                         f32 %205 = OpLoad %204 
                                        bool %206 = OpFOrdLessThan %205 %125 
                                                      OpStore %203 %206 
                                        bool %207 = OpLoad %203 
                                         i32 %210 = OpSelect %207 %209 %208 
                                         i32 %212 = OpIMul %210 %211 
                                        bool %213 = OpINotEqual %212 %208 
                                                      OpSelectionMerge %215 None 
                                                      OpBranchConditional %213 %214 %215 
                                             %214 = OpLabel 
                                                      OpKill
                                             %215 = OpLabel 
                                Uniform f32* %217 = OpAccessChain %29 %209 %51 
                                         f32 %218 = OpLoad %217 
                                        bool %219 = OpFOrdEqual %218 %98 
                                                      OpStore %203 %219 
                                                      OpSelectionMerge %222 None 
                                                      OpBranchConditional %220 %221 %222 
                                             %221 = OpLabel 
                                        bool %223 = OpLoad %203 
                                                      OpSelectionMerge %225 None 
                                                      OpBranchConditional %223 %224 %225 
                                             %224 = OpLabel 
                                                      OpBranch %225 
                                             %225 = OpLabel 
                                                      OpBranch %222 
                                             %222 = OpLabel 
                                                      OpSelectionMerge %228 None 
                                                      OpBranchConditional %226 %227 %330 
                                             %227 = OpLabel 
                                Uniform f32* %229 = OpAccessChain %29 %209 %47 
                                         f32 %230 = OpLoad %229 
                                        bool %231 = OpFOrdEqual %230 %98 
                                                      OpStore %203 %231 
                                       f32_3 %235 = OpLoad %234 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                              Uniform f32_4* %238 = OpAccessChain %29 %237 %209 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %236 %240 
                                       f32_4 %242 = OpLoad %232 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %232 %243 
                              Uniform f32_4* %244 = OpAccessChain %29 %237 %208 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpLoad %234 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %232 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %232 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %232 %254 
                              Uniform f32_4* %255 = OpAccessChain %29 %237 %237 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpLoad %234 
                                       f32_3 %259 = OpVectorShuffle %258 %258 2 2 2 
                                       f32_3 %260 = OpFMul %257 %259 
                                       f32_4 %261 = OpLoad %232 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFAdd %260 %262 
                                       f32_4 %264 = OpLoad %232 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %232 %265 
                                       f32_4 %266 = OpLoad %232 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                              Uniform f32_4* %269 = OpAccessChain %29 %237 %268 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_3 %272 = OpFAdd %267 %271 
                                       f32_4 %273 = OpLoad %232 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
                                                      OpStore %232 %274 
                                        bool %277 = OpLoad %203 
                                                      OpSelectionMerge %279 None 
                                                      OpBranchConditional %277 %278 %282 
                                             %278 = OpLabel 
                                       f32_4 %280 = OpLoad %232 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                                      OpStore %276 %281 
                                                      OpBranch %279 
                                             %282 = OpLabel 
                                       f32_3 %283 = OpLoad %234 
                                                      OpStore %276 %283 
                                                      OpBranch %279 
                                             %279 = OpLabel 
                                       f32_3 %284 = OpLoad %276 
                                       f32_4 %285 = OpLoad %232 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %232 %286 
                                       f32_4 %287 = OpLoad %232 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                              Uniform f32_3* %291 = OpAccessChain %29 %289 
                                       f32_3 %292 = OpLoad %291 
                                       f32_3 %293 = OpFNegate %292 
                                       f32_3 %294 = OpFAdd %288 %293 
                                       f32_4 %295 = OpLoad %232 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %232 %296 
                                       f32_4 %298 = OpLoad %232 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                              Uniform f32_3* %300 = OpAccessChain %29 %268 
                                       f32_3 %301 = OpLoad %300 
                                       f32_3 %302 = OpFMul %299 %301 
                                       f32_4 %303 = OpLoad %297 
                                       f32_4 %304 = OpVectorShuffle %303 %302 0 4 5 6 
                                                      OpStore %297 %304 
                                Private f32* %306 = OpAccessChain %297 %47 
                                         f32 %307 = OpLoad %306 
                                         f32 %309 = OpFMul %307 %308 
                                         f32 %310 = OpFAdd %309 %127 
                                                      OpStore %305 %310 
                                Uniform f32* %312 = OpAccessChain %29 %209 %56 
                                         f32 %313 = OpLoad %312 
                                         f32 %315 = OpFMul %313 %314 
                                         f32 %316 = OpFAdd %315 %127 
                                                      OpStore %311 %316 
                                         f32 %317 = OpLoad %305 
                                         f32 %318 = OpLoad %311 
                                         f32 %319 = OpExtInst %1 40 %317 %318 
                                Private f32* %320 = OpAccessChain %297 %51 
                                                      OpStore %320 %319 
                  read_only Texture3DSampled %325 = OpLoad %324 
                                       f32_4 %326 = OpLoad %297 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 2 3 
                                       f32_4 %328 = OpImageSampleImplicitLod %325 %327 
                                                      OpStore %297 %328 
                                       f32_4 %329 = OpLoad %297 
                                                      OpStore %80 %329 
                                                      OpBranch %228 
                                             %330 = OpLabel 
                                Private f32* %331 = OpAccessChain %80 %51 
                                                      OpStore %331 %98 
                                Private f32* %332 = OpAccessChain %80 %47 
                                                      OpStore %332 %98 
                                Private f32* %333 = OpAccessChain %80 %56 
                                                      OpStore %333 %98 
                                Private f32* %334 = OpAccessChain %80 %194 
                                                      OpStore %334 %98 
                                                      OpBranch %228 
                                             %228 = OpLabel 
                                       f32_4 %336 = OpLoad %80 
                              Uniform f32_4* %337 = OpAccessChain %29 %208 
                                       f32_4 %338 = OpLoad %337 
                                         f32 %339 = OpDot %336 %338 
                                Private f32* %340 = OpAccessChain %335 %51 
                                                      OpStore %340 %339 
                                Private f32* %341 = OpAccessChain %335 %51 
                                         f32 %342 = OpLoad %341 
                                         f32 %343 = OpExtInst %1 43 %342 %125 %98 
                                Private f32* %344 = OpAccessChain %335 %51 
                                                      OpStore %344 %343 
                                       f32_4 %346 = OpLoad %140 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                              Uniform f32_4* %349 = OpAccessChain %29 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFMul %347 %351 
                                                      OpStore %345 %352 
                                       f32_3 %353 = OpLoad %335 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 0 0 
                                       f32_3 %355 = OpLoad %345 
                                       f32_3 %356 = OpFMul %354 %355 
                                                      OpStore %335 %356 
                                       f32_4 %357 = OpLoad %140 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %360 = OpLoad %359 
                                       f32_3 %361 = OpFMul %358 %360 
                                       f32_3 %362 = OpLoad %335 
                                       f32_3 %363 = OpFAdd %361 %362 
                                                      OpStore %335 %363 
                                Private f32* %366 = OpAccessChain %9 %194 
                                         f32 %367 = OpLoad %366 
                                 Output f32* %369 = OpAccessChain %365 %194 
                                                      OpStore %369 %367 
                                       f32_4 %370 = OpLoad %20 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_2 %372 = OpLoad %124 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 0 0 
                                       f32_3 %374 = OpFMul %371 %373 
                                       f32_3 %375 = OpLoad %335 
                                       f32_3 %376 = OpFAdd %374 %375 
                                                      OpStore %335 %376 
                                Private f32* %378 = OpAccessChain %335 %47 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %335 %56 
                                         f32 %381 = OpLoad %380 
                                        bool %382 = OpFOrdGreaterThanEqual %379 %381 
                                                      OpStore %377 %382 
                                        bool %386 = OpLoad %377 
                                                      OpSelectionMerge %388 None 
                                                      OpBranchConditional %386 %387 %389 
                                             %387 = OpLabel 
                                                      OpStore %385 %98 
                                                      OpBranch %388 
                                             %389 = OpLabel 
                                                      OpStore %385 %125 
                                                      OpBranch %388 
                                             %388 = OpLabel 
                                         f32 %390 = OpLoad %385 
                                                      OpStore %383 %390 
                                       f32_3 %392 = OpLoad %335 
                                       f32_2 %393 = OpVectorShuffle %392 %392 2 1 
                                       f32_2 %394 = OpFNegate %393 
                                       f32_3 %395 = OpLoad %335 
                                       f32_2 %396 = OpVectorShuffle %395 %395 1 2 
                                       f32_2 %397 = OpFAdd %394 %396 
                                                      OpStore %391 %397 
                                Private f32* %398 = OpAccessChain %140 %51 
                                                      OpStore %398 %98 
                                Private f32* %400 = OpAccessChain %140 %47 
                                                      OpStore %400 %399 
                                         f32 %401 = OpLoad %383 
                                       f32_2 %402 = OpCompositeConstruct %401 %401 
                                       f32_2 %403 = OpLoad %391 
                                       f32_2 %404 = OpFMul %402 %403 
                                       f32_3 %405 = OpLoad %335 
                                       f32_2 %406 = OpVectorShuffle %405 %405 2 1 
                                       f32_2 %407 = OpFAdd %404 %406 
                                       f32_4 %408 = OpLoad %297 
                                       f32_4 %409 = OpVectorShuffle %408 %407 4 5 2 3 
                                                      OpStore %297 %409 
                                         f32 %410 = OpLoad %383 
                                       f32_2 %411 = OpCompositeConstruct %410 %410 
                                       f32_4 %412 = OpLoad %140 
                                       f32_2 %413 = OpVectorShuffle %412 %412 0 1 
                                       f32_2 %414 = OpFMul %411 %413 
                                       f32_2 %417 = OpFAdd %414 %416 
                                       f32_4 %418 = OpLoad %297 
                                       f32_4 %419 = OpVectorShuffle %418 %417 0 1 4 5 
                                                      OpStore %297 %419 
                                Private f32* %420 = OpAccessChain %335 %51 
                                         f32 %421 = OpLoad %420 
                                Private f32* %422 = OpAccessChain %297 %51 
                                         f32 %423 = OpLoad %422 
                                        bool %424 = OpFOrdGreaterThanEqual %421 %423 
                                                      OpStore %377 %424 
                                        bool %426 = OpLoad %377 
                                                      OpSelectionMerge %428 None 
                                                      OpBranchConditional %426 %427 %429 
                                             %427 = OpLabel 
                                                      OpStore %425 %98 
                                                      OpBranch %428 
                                             %429 = OpLabel 
                                                      OpStore %425 %125 
                                                      OpBranch %428 
                                             %428 = OpLabel 
                                         f32 %430 = OpLoad %425 
                                                      OpStore %383 %430 
                                       f32_4 %431 = OpLoad %297 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 3 
                                       f32_3 %433 = OpFNegate %432 
                                       f32_4 %434 = OpLoad %140 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 6 3 
                                                      OpStore %140 %435 
                                Private f32* %436 = OpAccessChain %335 %51 
                                         f32 %437 = OpLoad %436 
                                         f32 %438 = OpFNegate %437 
                                Private f32* %439 = OpAccessChain %140 %194 
                                                      OpStore %439 %438 
                                Private f32* %440 = OpAccessChain %140 %51 
                                         f32 %441 = OpLoad %440 
                                Private f32* %442 = OpAccessChain %335 %51 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpFAdd %441 %443 
                                Private f32* %445 = OpAccessChain %232 %51 
                                                      OpStore %445 %444 
                                       f32_4 %446 = OpLoad %297 
                                       f32_3 %447 = OpVectorShuffle %446 %446 1 2 0 
                                       f32_4 %448 = OpLoad %140 
                                       f32_3 %449 = OpVectorShuffle %448 %448 1 2 3 
                                       f32_3 %450 = OpFAdd %447 %449 
                                       f32_4 %451 = OpLoad %232 
                                       f32_4 %452 = OpVectorShuffle %451 %450 0 4 5 6 
                                                      OpStore %232 %452 
                                         f32 %453 = OpLoad %383 
                                       f32_3 %454 = OpCompositeConstruct %453 %453 %453 
                                       f32_4 %455 = OpLoad %232 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpFMul %454 %456 
                                       f32_4 %458 = OpLoad %297 
                                       f32_3 %459 = OpVectorShuffle %458 %458 0 1 3 
                                       f32_3 %460 = OpFAdd %457 %459 
                                       f32_4 %461 = OpLoad %20 
                                       f32_4 %462 = OpVectorShuffle %461 %460 4 5 2 6 
                                                      OpStore %20 %462 
                                         f32 %463 = OpLoad %383 
                                Private f32* %464 = OpAccessChain %232 %194 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpFMul %463 %465 
                                Private f32* %467 = OpAccessChain %335 %51 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFAdd %466 %468 
                                                      OpStore %383 %469 
                                Private f32* %470 = OpAccessChain %20 %47 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpLoad %383 
                                         f32 %473 = OpExtInst %1 37 %471 %472 
                                Private f32* %474 = OpAccessChain %140 %51 
                                                      OpStore %474 %473 
                                Private f32* %475 = OpAccessChain %20 %51 
                                         f32 %476 = OpLoad %475 
                                Private f32* %477 = OpAccessChain %140 %51 
                                         f32 %478 = OpLoad %477 
                                         f32 %479 = OpFNegate %478 
                                         f32 %480 = OpFAdd %476 %479 
                                Private f32* %481 = OpAccessChain %140 %51 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %20 %47 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpLoad %383 
                                         f32 %486 = OpFAdd %484 %485 
                                                      OpStore %383 %486 
                                Private f32* %488 = OpAccessChain %140 %51 
                                         f32 %489 = OpLoad %488 
                                         f32 %491 = OpFMul %489 %490 
                                         f32 %493 = OpFAdd %491 %492 
                                                      OpStore %487 %493 
                                         f32 %494 = OpLoad %383 
                                         f32 %495 = OpLoad %487 
                                         f32 %496 = OpFDiv %494 %495 
                                                      OpStore %383 %496 
                                         f32 %497 = OpLoad %383 
                                Private f32* %498 = OpAccessChain %20 %194 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFAdd %497 %499 
                                                      OpStore %383 %500 
                                Private f32* %501 = OpAccessChain %20 %51 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %502 %492 
                                                      OpStore %487 %503 
                                Private f32* %504 = OpAccessChain %140 %51 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpLoad %487 
                                         f32 %507 = OpFDiv %505 %506 
                                                      OpStore %487 %507 
                                Private f32* %508 = OpAccessChain %9 %47 
                                         f32 %509 = OpLoad %508 
                                Private f32* %510 = OpAccessChain %9 %56 
                                         f32 %511 = OpLoad %510 
                                        bool %512 = OpFOrdGreaterThanEqual %509 %511 
                                                      OpStore %203 %512 
                                        bool %514 = OpLoad %203 
                                                      OpSelectionMerge %516 None 
                                                      OpBranchConditional %514 %515 %517 
                                             %515 = OpLabel 
                                                      OpStore %513 %98 
                                                      OpBranch %516 
                                             %517 = OpLabel 
                                                      OpStore %513 %125 
                                                      OpBranch %516 
                                             %516 = OpLabel 
                                         f32 %518 = OpLoad %513 
                                                      OpStore %305 %518 
                                Private f32* %520 = OpAccessChain %9 %56 
                                         f32 %521 = OpLoad %520 
                                         f32 %522 = OpFNegate %521 
                                Private f32* %523 = OpAccessChain %9 %47 
                                         f32 %524 = OpLoad %523 
                                         f32 %525 = OpFAdd %522 %524 
                                                      OpStore %519 %525 
                                         f32 %527 = OpLoad %305 
                                         f32 %528 = OpLoad %519 
                                         f32 %529 = OpFMul %527 %528 
                                Private f32* %530 = OpAccessChain %9 %56 
                                         f32 %531 = OpLoad %530 
                                         f32 %532 = OpFAdd %529 %531 
                                Private f32* %533 = OpAccessChain %526 %51 
                                                      OpStore %533 %532 
                                Private f32* %535 = OpAccessChain %9 %51 
                                         f32 %536 = OpLoad %535 
                                Private f32* %537 = OpAccessChain %526 %51 
                                         f32 %538 = OpLoad %537 
                                        bool %539 = OpFOrdGreaterThanEqual %536 %538 
                                                      OpStore %534 %539 
                                        bool %542 = OpLoad %534 
                                                      OpSelectionMerge %544 None 
                                                      OpBranchConditional %542 %543 %545 
                                             %543 = OpLabel 
                                                      OpStore %541 %98 
                                                      OpBranch %544 
                                             %545 = OpLabel 
                                                      OpStore %541 %125 
                                                      OpBranch %544 
                                             %544 = OpLabel 
                                         f32 %546 = OpLoad %541 
                                                      OpStore %540 %546 
                                Private f32* %548 = OpAccessChain %526 %51 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFNegate %549 
                                Private f32* %551 = OpAccessChain %9 %51 
                                         f32 %552 = OpLoad %551 
                                         f32 %553 = OpFAdd %550 %552 
                                Private f32* %554 = OpAccessChain %547 %51 
                                                      OpStore %554 %553 
                                         f32 %555 = OpLoad %540 
                                Private f32* %556 = OpAccessChain %547 %51 
                                         f32 %557 = OpLoad %556 
                                         f32 %558 = OpFMul %555 %557 
                                Private f32* %559 = OpAccessChain %526 %51 
                                         f32 %560 = OpLoad %559 
                                         f32 %561 = OpFAdd %558 %560 
                                Private f32* %562 = OpAccessChain %547 %51 
                                                      OpStore %562 %561 
                                Private f32* %563 = OpAccessChain %547 %51 
                                         f32 %564 = OpLoad %563 
                                Uniform f32* %566 = OpAccessChain %29 %565 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpFMul %564 %567 
                                Private f32* %569 = OpAccessChain %547 %51 
                                                      OpStore %569 %568 
                                Private f32* %570 = OpAccessChain %547 %51 
                                         f32 %571 = OpLoad %570 
                                Private f32* %572 = OpAccessChain %20 %51 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpExtInst %1 37 %571 %573 
                                Private f32* %575 = OpAccessChain %547 %51 
                                                      OpStore %575 %574 
                                Private f32* %577 = OpAccessChain %188 %47 
                                         f32 %578 = OpLoad %577 
                                Private f32* %579 = OpAccessChain %188 %51 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFAdd %578 %580 
                                                      OpStore %576 %581 
                                Private f32* %582 = OpAccessChain %20 %56 
                                         f32 %583 = OpLoad %582 
                                Private f32* %584 = OpAccessChain %124 %51 
                                         f32 %585 = OpLoad %584 
                                         f32 %586 = OpFMul %583 %585 
                                         f32 %587 = OpLoad %576 
                                         f32 %588 = OpFAdd %586 %587 
                                                      OpStore %576 %588 
                                         f32 %589 = OpLoad %576 
                                         f32 %591 = OpFMul %589 %590 
                                                      OpStore %576 %591 
                                         f32 %592 = OpLoad %576 
                                         f32 %593 = OpExtInst %1 43 %592 %125 %98 
                                                      OpStore %576 %593 
                                         f32 %594 = OpLoad %383 
                                       f32_3 %595 = OpCompositeConstruct %594 %594 %594 
                                       f32_3 %596 = OpExtInst %1 4 %595 
                                       f32_3 %599 = OpFAdd %596 %598 
                                                      OpStore %526 %599 
                                       f32_3 %600 = OpLoad %526 
                                       f32_3 %601 = OpExtInst %1 10 %600 
                                                      OpStore %526 %601 
                                       f32_3 %602 = OpLoad %526 
                                       f32_3 %604 = OpFMul %602 %603 
                                       f32_3 %607 = OpFAdd %604 %606 
                                                      OpStore %526 %607 
                                       f32_3 %608 = OpLoad %526 
                                       f32_3 %609 = OpExtInst %1 4 %608 
                                       f32_3 %611 = OpFAdd %609 %610 
                                                      OpStore %526 %611 
                                       f32_3 %612 = OpLoad %526 
                                       f32_3 %613 = OpCompositeConstruct %125 %125 %125 
                                       f32_3 %614 = OpCompositeConstruct %98 %98 %98 
                                       f32_3 %615 = OpExtInst %1 43 %612 %613 %614 
                                                      OpStore %526 %615 
                                       f32_3 %616 = OpLoad %526 
                                       f32_3 %617 = OpFAdd %616 %610 
                                                      OpStore %526 %617 
                                         f32 %618 = OpLoad %487 
                                       f32_3 %619 = OpCompositeConstruct %618 %618 %618 
                                       f32_3 %620 = OpLoad %526 
                                       f32_3 %621 = OpFMul %619 %620 
                                       f32_3 %623 = OpFAdd %621 %622 
                                                      OpStore %526 %623 
                                       f32_3 %624 = OpLoad %526 
                                       f32_3 %625 = OpLoad %547 
                                       f32_3 %626 = OpVectorShuffle %625 %625 0 0 0 
                                       f32_3 %627 = OpFMul %624 %626 
                                       f32_4 %628 = OpLoad %20 
                                       f32_4 %629 = OpVectorShuffle %628 %627 4 5 6 3 
                                                      OpStore %20 %629 
                                       f32_3 %630 = OpLoad %547 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 0 0 
                                       f32_3 %632 = OpFNegate %631 
                                       f32_3 %633 = OpLoad %526 
                                       f32_3 %634 = OpFMul %632 %633 
                                       f32_3 %635 = OpLoad %335 
                                       f32_3 %636 = OpFAdd %634 %635 
                                                      OpStore %547 %636 
                                         f32 %637 = OpLoad %576 
                                       f32_3 %638 = OpCompositeConstruct %637 %637 %637 
                                       f32_3 %639 = OpLoad %547 
                                       f32_3 %640 = OpFMul %638 %639 
                                       f32_4 %641 = OpLoad %20 
                                       f32_3 %642 = OpVectorShuffle %641 %641 0 1 2 
                                       f32_3 %643 = OpFAdd %640 %642 
                                                      OpStore %547 %643 
                                       f32_3 %644 = OpLoad %547 
                                       f32_4 %645 = OpLoad %365 
                                       f32_4 %646 = OpVectorShuffle %645 %644 4 5 6 3 
                                                      OpStore %365 %646 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec2 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat2.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat1.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	vec4 _EmissiveColor;
uniform 	float _EmissiveThresholdSensitivity;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ParallaxTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat16_2;
vec4 u_xlat10_2;
vec2 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
float u_xlat16_7;
float u_xlat8;
vec2 u_xlat16_8;
bool u_xlatb8;
vec2 u_xlat10;
float u_xlat11;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
float u_xlat16_22;
bool u_xlatb22;
float u_xlat23;
bool u_xlatb23;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz + (-_EmissiveColor.xyz);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y + u_xlat1.x;
    u_xlat1.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb1 = u_xlat1.x<_EmissiveThresholdSensitivity;
    u_xlat16_8.x = dot(u_xlat10_0.xyz, vec3(0.298900008, 0.586600006, 0.114500001));
    u_xlat16_8.xy = u_xlat10_0.xz + (-u_xlat16_8.xx);
    u_xlat16_8.xy = u_xlat16_8.xy * vec2(1.0, 1.0) + vec2(1.0, 1.0);
    u_xlat16_22 = (-u_xlat16_8.x) * 0.298900008 + 1.0;
    u_xlat16_22 = (-u_xlat16_8.y) * 0.114500001 + u_xlat16_22;
    u_xlat16_22 = u_xlat16_22 * 1.70473921;
    u_xlat10_2 = texture(_ParallaxTex, vs_TEXCOORD4.xy);
    u_xlat3.xy = mix(vec2(0.0, 0.0), vec2(1.0, 0.75), vec2(bvec2(u_xlatb1)));
    u_xlat16_2.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
    u_xlat2.xyz = u_xlat3.yyy * u_xlat16_2.xyz + u_xlat10_0.xyz;
    u_xlat1.xz = log2(u_xlat16_8.xy);
    u_xlat1.y = log2(u_xlat16_22);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10.xy = u_xlat3.xx * u_xlat1.xy;
    u_xlat22 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb22 = u_xlat22<0.0;
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat22 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = (-u_xlat22) + u_xlat23;
    u_xlat22 = unity_ShadowFadeCenterAndType.w * u_xlat23 + u_xlat22;
    u_xlat22 = u_xlat22 * _LightShadowData.z + _LightShadowData.w;
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlatb23 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb23){
        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb24)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat24 = u_xlat4.y * 0.25 + 0.75;
        u_xlat11 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat24, u_xlat11);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat24 = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat22 = u_xlat22 + u_xlat10_4.x;
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat24 = min(u_xlat22, u_xlat24);
    u_xlat22 = (u_xlatb23) ? u_xlat24 : u_xlat22;
    u_xlat4.xyz = u_xlat2.xyz * vs_TEXCOORD5.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat4.w = 0.0;
    u_xlat2.w = u_xlat10_0.w;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat4.xyz = u_xlat1.zyx * u_xlat3.xxx + u_xlat2.zyx;
    u_xlatb21 = u_xlat4.y>=u_xlat4.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat4.w = 0.666666687;
    u_xlat1.xy = (-u_xlat4.xy) + u_xlat4.yx;
    u_xlat1.w = -1.0;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat4.xyw;
    u_xlatb21 = u_xlat4.z>=u_xlat5.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat5.w = u_xlat4.z;
    u_xlat6.xyw = u_xlat5.wyx;
    u_xlat6.z = -1.0;
    u_xlat6 = (-u_xlat5) + u_xlat6;
    u_xlat5 = vec4(u_xlat21) * u_xlat6 + u_xlat5;
    u_xlat21 = min(u_xlat5.y, u_xlat5.w);
    u_xlat21 = (-u_xlat21) + u_xlat5.x;
    u_xlat1.x = (-u_xlat5.y) + u_xlat5.w;
    u_xlat8 = u_xlat21 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat8;
    u_xlat1.x = u_xlat1.x + u_xlat5.z;
    u_xlat8 = u_xlat5.x + 1.00000001e-010;
    u_xlat21 = u_xlat21 / u_xlat8;
    u_xlatb8 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat16_7 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat7 = u_xlat8 * u_xlat16_7 + u_xlat10_0.z;
    u_xlatb14 = u_xlat10_0.x>=u_xlat7;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = (-u_xlat7) + u_xlat10_0.x;
    u_xlat0.x = u_xlat14 * u_xlat0.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _MaxValue;
    u_xlat0.x = min(u_xlat0.x, u_xlat5.x);
    u_xlat7 = u_xlat10.y + u_xlat10.x;
    u_xlat7 = u_xlat1.z * u_xlat3.x + u_xlat7;
    u_xlat7 = u_xlat7 * 10.0;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xzw = (-u_xlat0.xxx) * u_xlat1.xyz + u_xlat4.zyx;
    SV_Target0.xyz = vec3(u_xlat7) * u_xlat0.xzw + u_xlat2.xyz;
    SV_Target0.w = u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 247
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %152 %161 %162 %175 %205 %211 %213 %228 %240 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate %175 Location 175 
                                                      OpDecorate %205 Location 205 
                                                      OpDecorate %211 Location 211 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %228 Location 228 
                                                      OpDecorate %240 Location 240 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Private %96 
                               Private f32_2* %98 = OpVariable Private 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_2 %140 = OpConstantComposite %139 %139 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %146 %146 
                                             %151 = OpTypePointer Output %96 
                               Output f32_2* %152 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_2 %156 = OpConstantComposite %139 %155 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_2 %159 = OpConstantComposite %158 %139 
                               Output f32_2* %161 = OpVariable Output 
                                Input f32_4* %162 = OpVariable Input 
                                         i32 %165 = OpConstant 4 
                                             %174 = OpTypePointer Input %50 
                                Input f32_3* %175 = OpVariable Input 
                                         u32 %181 = OpConstant 0 
                                             %182 = OpTypePointer Private %6 
                                         u32 %195 = OpConstant 2 
                                Private f32* %197 = OpVariable Private 
                               Output f32_3* %205 = OpVariable Output 
                               Output f32_4* %211 = OpVariable Output 
                                       f32_4 %212 = OpConstantComposite %158 %158 %158 %158 
                               Output f32_3* %213 = OpVariable Output 
                                       f32_3 %214 = OpConstantComposite %158 %158 %158 
                                             %217 = OpTypePointer Uniform %6 
                                       f32_3 %224 = OpConstantComposite %146 %146 %146 
                               Output f32_4* %228 = OpVariable Output 
                               Output f32_4* %240 = OpVariable Output 
                                             %241 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                        f32_4 %99 = OpLoad %44 
                                       f32_2 %100 = OpVectorShuffle %99 %99 1 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 %23 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                                                      OpStore %98 %104 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 %28 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_4 %108 = OpLoad %44 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 0 
                                       f32_2 %110 = OpFMul %107 %109 
                                       f32_2 %111 = OpLoad %98 
                                       f32_2 %112 = OpFAdd %110 %111 
                                       f32_4 %113 = OpLoad %44 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %44 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %46 %36 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpLoad %44 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 2 
                                       f32_2 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %44 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %44 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %44 %125 
                              Uniform f32_4* %126 = OpAccessChain %21 %46 %46 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                                       f32_4 %129 = OpLoad %44 
                                       f32_2 %130 = OpVectorShuffle %129 %129 3 3 
                                       f32_2 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %44 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_2 %134 = OpFAdd %131 %133 
                                       f32_4 %135 = OpLoad %44 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 3 
                                                      OpStore %44 %136 
                                       f32_4 %137 = OpLoad %44 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %44 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %44 %143 
                                       f32_4 %144 = OpLoad %44 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %44 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %44 %150 
                                       f32_4 %153 = OpLoad %44 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %157 = OpFMul %154 %156 
                                       f32_2 %160 = OpFAdd %157 %159 
                                                      OpStore %152 %160 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                              Uniform f32_4* %166 = OpAccessChain %21 %165 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                       f32_2 %169 = OpFMul %164 %168 
                              Uniform f32_4* %170 = OpAccessChain %21 %165 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 2 3 
                                       f32_2 %173 = OpFAdd %169 %172 
                                                      OpStore %161 %173 
                                       f32_3 %176 = OpLoad %175 
                              Uniform f32_4* %177 = OpAccessChain %21 %36 %28 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                         f32 %180 = OpDot %176 %179 
                                Private f32* %183 = OpAccessChain %44 %181 
                                                      OpStore %183 %180 
                                       f32_3 %184 = OpLoad %175 
                              Uniform f32_4* %185 = OpAccessChain %21 %36 %23 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                         f32 %188 = OpDot %184 %187 
                                Private f32* %189 = OpAccessChain %44 %88 
                                                      OpStore %189 %188 
                                       f32_3 %190 = OpLoad %175 
                              Uniform f32_4* %191 = OpAccessChain %21 %36 %36 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %190 %193 
                                Private f32* %196 = OpAccessChain %44 %195 
                                                      OpStore %196 %194 
                                       f32_4 %198 = OpLoad %44 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_4 %200 = OpLoad %44 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                         f32 %202 = OpDot %199 %201 
                                                      OpStore %197 %202 
                                         f32 %203 = OpLoad %197 
                                         f32 %204 = OpExtInst %1 32 %203 
                                                      OpStore %197 %204 
                                         f32 %206 = OpLoad %197 
                                       f32_3 %207 = OpCompositeConstruct %206 %206 %206 
                                       f32_4 %208 = OpLoad %44 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %210 = OpFMul %207 %209 
                                                      OpStore %205 %210 
                                                      OpStore %211 %212 
                                                      OpStore %213 %214 
                                Private f32* %215 = OpAccessChain %9 %88 
                                         f32 %216 = OpLoad %215 
                                Uniform f32* %218 = OpAccessChain %21 %28 %181 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %216 %219 
                                Private f32* %221 = OpAccessChain %9 %88 
                                                      OpStore %221 %220 
                                       f32_4 %222 = OpLoad %9 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 3 1 
                                       f32_3 %225 = OpFMul %223 %224 
                                       f32_4 %226 = OpLoad %44 
                                       f32_4 %227 = OpVectorShuffle %226 %225 4 1 5 6 
                                                      OpStore %44 %227 
                                       f32_4 %229 = OpLoad %9 
                                       f32_2 %230 = OpVectorShuffle %229 %229 2 3 
                                       f32_4 %231 = OpLoad %228 
                                       f32_4 %232 = OpVectorShuffle %231 %230 0 1 4 5 
                                                      OpStore %228 %232 
                                       f32_4 %233 = OpLoad %44 
                                       f32_2 %234 = OpVectorShuffle %233 %233 2 2 
                                       f32_4 %235 = OpLoad %44 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 3 
                                       f32_2 %237 = OpFAdd %234 %236 
                                       f32_4 %238 = OpLoad %228 
                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 2 3 
                                                      OpStore %228 %239 
                                                      OpStore %240 %212 
                                 Output f32* %242 = OpAccessChain %92 %28 %88 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFNegate %243 
                                 Output f32* %245 = OpAccessChain %92 %28 %88 
                                                      OpStore %245 %244 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 754
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %121 %220 %411 %466 %472 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpMemberDecorate %28 1 RelaxedPrecision 
                                                      OpMemberDecorate %28 1 Offset 28 
                                                      OpMemberDecorate %28 2 RelaxedPrecision 
                                                      OpMemberDecorate %28 2 Offset 28 
                                                      OpMemberDecorate %28 3 Offset 28 
                                                      OpMemberDecorate %28 4 Offset 28 
                                                      OpMemberDecorate %28 5 Offset 28 
                                                      OpMemberDecorate %28 6 Offset 28 
                                                      OpMemberDecorate %28 7 Offset 28 
                                                      OpMemberDecorate %28 8 Offset 28 
                                                      OpMemberDecorate %28 9 RelaxedPrecision 
                                                      OpMemberDecorate %28 9 Offset 28 
                                                      OpMemberDecorate %28 10 Offset 28 
                                                      OpMemberDecorate %28 11 Offset 28 
                                                      OpMemberDecorate %28 12 Offset 28 
                                                      OpMemberDecorate %28 13 Offset 28 
                                                      OpMemberDecorate %28 14 Offset 28 
                                                      OpMemberDecorate %28 15 RelaxedPrecision 
                                                      OpMemberDecorate %28 15 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %119 DescriptorSet 119 
                                                      OpDecorate %119 Binding 119 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %121 Location 121 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %220 Location 220 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %293 SpecId 293 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %411 Location 411 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %420 DescriptorSet 420 
                                                      OpDecorate %420 Binding 420 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %466 Location 466 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %472 Location 472 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %544 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %617 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %699 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeVector %6 3 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %7 %25 
                                              %27 = OpTypeArray %7 %25 
                                              %28 = OpTypeStruct %21 %7 %7 %7 %26 %7 %27 %21 %21 %7 %6 %6 %7 %6 %6 %6 
                                              %29 = OpTypePointer Uniform %28 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32_4; f32; f32; f32;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 12 
                                              %33 = OpTypePointer Uniform %7 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Private %6 
                                          u32 %52 = OpConstant 0 
                                          u32 %57 = OpConstant 2 
                                              %71 = OpTypeBool 
                                              %72 = OpTypePointer Private %71 
                                Private bool* %73 = OpVariable Private 
                                          i32 %76 = OpConstant 13 
                                              %77 = OpTypePointer Uniform %6 
                               Private f32_4* %81 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          f32 %86 = OpConstant 3.674022E-40 
                                        f32_3 %87 = OpConstantComposite %84 %85 %86 
                                              %90 = OpTypePointer Private %15 
                               Private f32_2* %91 = OpVariable Private 
                                          f32 %99 = OpConstant 3.674022E-40 
                                       f32_2 %100 = OpConstantComposite %99 %99 
                                Private f32* %102 = OpVariable Private 
                                         f32 %115 = OpConstant 3.674022E-40 
                                             %117 = OpTypePointer Private %21 
                              Private f32_3* %118 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %119 = OpVariable UniformConstant 
                                Input f32_2* %121 = OpVariable Input 
                              Private f32_2* %125 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                       f32_2 %127 = OpConstantComposite %126 %126 
                                         f32 %128 = OpConstant 3.674022E-40 
                                       f32_2 %129 = OpConstantComposite %99 %128 
                                             %131 = OpTypeVector %71 2 
                              Private f32_3* %135 = OpVariable Private 
                              Private f32_4* %141 = OpVariable Private 
                                         i32 %160 = OpConstant 11 
                                         i32 %182 = OpConstant 10 
                              Private f32_2* %189 = OpVariable Private 
                                         u32 %195 = OpConstant 3 
                                         i32 %198 = OpConstant 15 
                               Private bool* %204 = OpVariable Private 
                                         i32 %209 = OpConstant 0 
                                         i32 %210 = OpConstant 1 
                                         i32 %212 = OpConstant -1 
                              Private f32_4* %218 = OpVariable Private 
                                             %219 = OpTypePointer Input %21 
                                Input f32_3* %220 = OpVariable Input 
                                             %223 = OpTypePointer Uniform %21 
                              Private f32_3* %229 = OpVariable Private 
                                         i32 %230 = OpConstant 4 
                                         i32 %237 = OpConstant 2 
                                Private f32* %241 = OpVariable Private 
                                         i32 %247 = OpConstant 3 
                                Private f32* %255 = OpVariable Private 
                               Private bool* %282 = OpVariable Private 
                                         i32 %283 = OpConstant 5 
                                        bool %287 = OpConstantFalse 
                                        bool %293 = OpSpecConstantFalse 
                               Private bool* %296 = OpVariable Private 
                                         i32 %302 = OpConstant 6 
                                             %339 = OpTypePointer Function %21 
                                         i32 %353 = OpConstant 8 
                              Private f32_4* %360 = OpVariable Private 
                                         i32 %363 = OpConstant 7 
                                Private f32* %369 = OpVariable Private 
                                         f32 %372 = OpConstant 3.674022E-40 
                                         f32 %377 = OpConstant 3.674022E-40 
                                             %386 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %387 = OpTypeSampledImage %386 
                                             %388 = OpTypePointer UniformConstant %387 
 UniformConstant read_only Texture3DSampled* %389 = OpVariable UniformConstant 
                              Private f32_3* %400 = OpVariable Private 
                                             %410 = OpTypePointer Input %7 
                                Input f32_4* %411 = OpVariable Input 
                                Private f32* %419 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %420 = OpVariable UniformConstant 
                              Private f32_3* %426 = OpVariable Private 
                                             %441 = OpTypePointer Function %6 
                                         i32 %455 = OpConstant 9 
                                Input f32_3* %466 = OpVariable Input 
                                             %471 = OpTypePointer Output %7 
                               Output f32_4* %472 = OpVariable Output 
                                             %475 = OpTypePointer Output %6 
                               Private bool* %484 = OpVariable Private 
                                Private f32* %490 = OpVariable Private 
                              Private f32_2* %497 = OpVariable Private 
                                         f32 %505 = OpConstant 3.674022E-40 
                                         f32 %521 = OpConstant 3.674022E-40 
                                       f32_2 %522 = OpConstantComposite %505 %521 
                                Private f32* %593 = OpVariable Private 
                                         f32 %596 = OpConstant 3.674022E-40 
                                         f32 %598 = OpConstant 3.674022E-40 
                                Private f32* %625 = OpVariable Private 
                              Private f32_3* %632 = OpVariable Private 
                               Private bool* %640 = OpVariable Private 
                                Private f32* %646 = OpVariable Private 
                              Private f32_3* %653 = OpVariable Private 
                                         i32 %671 = OpConstant 14 
                                Private f32* %682 = OpVariable Private 
                                         f32 %696 = OpConstant 3.674022E-40 
                                         f32 %703 = OpConstant 3.674022E-40 
                                       f32_3 %704 = OpConstantComposite %99 %521 %703 
                                       f32_3 %709 = OpConstantComposite %596 %596 %596 
                                         f32 %711 = OpConstant 3.674022E-40 
                                       f32_3 %712 = OpConstantComposite %711 %711 %711 
                                       f32_3 %716 = OpConstantComposite %505 %505 %505 
                                       f32_3 %728 = OpConstantComposite %99 %99 %99 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %340 = OpVariable Function 
                               Function f32* %442 = OpVariable Function 
                               Function f32* %491 = OpVariable Function 
                               Function f32* %531 = OpVariable Function 
                               Function f32* %619 = OpVariable Function 
                               Function f32* %647 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %22 = OpLoad %9 
                                        f32_3 %23 = OpVectorShuffle %22 %22 0 1 2 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFNegate %36 
                                        f32_3 %38 = OpFAdd %23 %37 
                                        f32_4 %39 = OpLoad %20 
                                        f32_4 %40 = OpVectorShuffle %39 %38 4 5 6 3 
                                                      OpStore %20 %40 
                                        f32_4 %41 = OpLoad %20 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpLoad %20 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_2 %45 = OpFMul %42 %44 
                                        f32_4 %46 = OpLoad %20 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 2 3 
                                                      OpStore %20 %47 
                                 Private f32* %50 = OpAccessChain %20 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %53 = OpAccessChain %20 %52 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFAdd %51 %54 
                                 Private f32* %56 = OpAccessChain %20 %52 
                                                      OpStore %56 %55 
                                 Private f32* %58 = OpAccessChain %20 %57 
                                          f32 %59 = OpLoad %58 
                                 Private f32* %60 = OpAccessChain %20 %57 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFMul %59 %61 
                                 Private f32* %63 = OpAccessChain %20 %52 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %62 %64 
                                 Private f32* %66 = OpAccessChain %20 %52 
                                                      OpStore %66 %65 
                                 Private f32* %67 = OpAccessChain %20 %52 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpExtInst %1 31 %68 
                                 Private f32* %70 = OpAccessChain %20 %52 
                                                      OpStore %70 %69 
                                 Private f32* %74 = OpAccessChain %20 %52 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %78 = OpAccessChain %30 %76 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %75 %79 
                                                      OpStore %73 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                          f32 %88 = OpDot %83 %87 
                                 Private f32* %89 = OpAccessChain %81 %52 
                                                      OpStore %89 %88 
                                        f32_4 %92 = OpLoad %9 
                                        f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                                        f32_4 %94 = OpLoad %81 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 0 
                                        f32_2 %96 = OpFNegate %95 
                                        f32_2 %97 = OpFAdd %93 %96 
                                                      OpStore %91 %97 
                                        f32_2 %98 = OpLoad %91 
                                       f32_2 %101 = OpFAdd %98 %100 
                                                      OpStore %91 %101 
                                Private f32* %103 = OpAccessChain %91 %52 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFNegate %104 
                                         f32 %106 = OpFMul %105 %84 
                                         f32 %107 = OpFAdd %106 %99 
                                                      OpStore %102 %107 
                                Private f32* %108 = OpAccessChain %91 %48 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFMul %110 %86 
                                         f32 %112 = OpLoad %102 
                                         f32 %113 = OpFAdd %111 %112 
                                                      OpStore %102 %113 
                                         f32 %114 = OpLoad %102 
                                         f32 %116 = OpFMul %114 %115 
                                                      OpStore %102 %116 
                  read_only Texture2DSampled %120 = OpLoad %119 
                                       f32_2 %122 = OpLoad %121 
                                       f32_4 %123 = OpImageSampleImplicitLod %120 %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                                      OpStore %118 %124 
                                        bool %130 = OpLoad %73 
                                      bool_2 %132 = OpCompositeConstruct %130 %130 
                                       f32_2 %133 = OpSelect %132 %100 %127 
                                       f32_2 %134 = OpExtInst %1 46 %127 %129 %133 
                                                      OpStore %125 %134 
                                       f32_4 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFNegate %137 
                                       f32_3 %139 = OpLoad %118 
                                       f32_3 %140 = OpFAdd %138 %139 
                                                      OpStore %135 %140 
                                       f32_2 %142 = OpLoad %125 
                                       f32_3 %143 = OpVectorShuffle %142 %142 1 1 1 
                                       f32_3 %144 = OpLoad %135 
                                       f32_3 %145 = OpFMul %143 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %141 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %141 %150 
                                       f32_2 %151 = OpLoad %91 
                                       f32_2 %152 = OpExtInst %1 30 %151 
                                       f32_4 %153 = OpLoad %20 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 1 5 3 
                                                      OpStore %20 %154 
                                         f32 %155 = OpLoad %102 
                                         f32 %156 = OpExtInst %1 30 %155 
                                Private f32* %157 = OpAccessChain %20 %48 
                                                      OpStore %157 %156 
                                       f32_4 %158 = OpLoad %20 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                Uniform f32* %161 = OpAccessChain %30 %160 
                                         f32 %162 = OpLoad %161 
                                Uniform f32* %163 = OpAccessChain %30 %160 
                                         f32 %164 = OpLoad %163 
                                Uniform f32* %165 = OpAccessChain %30 %160 
                                         f32 %166 = OpLoad %165 
                                       f32_3 %167 = OpCompositeConstruct %162 %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                         f32 %169 = OpCompositeExtract %167 1 
                                         f32 %170 = OpCompositeExtract %167 2 
                                       f32_3 %171 = OpCompositeConstruct %168 %169 %170 
                                       f32_3 %172 = OpFMul %159 %171 
                                       f32_4 %173 = OpLoad %20 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
                                                      OpStore %20 %174 
                                       f32_4 %175 = OpLoad %20 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpExtInst %1 29 %176 
                                       f32_4 %178 = OpLoad %20 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 6 3 
                                                      OpStore %20 %179 
                                       f32_4 %180 = OpLoad %20 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                Uniform f32* %183 = OpAccessChain %30 %182 
                                         f32 %184 = OpLoad %183 
                                       f32_3 %185 = OpCompositeConstruct %184 %184 %184 
                                       f32_3 %186 = OpFMul %181 %185 
                                       f32_4 %187 = OpLoad %20 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %20 %188 
                                       f32_2 %190 = OpLoad %125 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 0 
                                       f32_4 %192 = OpLoad %20 
                                       f32_2 %193 = OpVectorShuffle %192 %192 0 1 
                                       f32_2 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                Private f32* %196 = OpAccessChain %9 %195 
                                         f32 %197 = OpLoad %196 
                                Uniform f32* %199 = OpAccessChain %30 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFNegate %200 
                                         f32 %202 = OpFAdd %197 %201 
                                Private f32* %203 = OpAccessChain %81 %52 
                                                      OpStore %203 %202 
                                Private f32* %205 = OpAccessChain %81 %52 
                                         f32 %206 = OpLoad %205 
                                        bool %207 = OpFOrdLessThan %206 %126 
                                                      OpStore %204 %207 
                                        bool %208 = OpLoad %204 
                                         i32 %211 = OpSelect %208 %210 %209 
                                         i32 %213 = OpIMul %211 %212 
                                        bool %214 = OpINotEqual %213 %209 
                                                      OpSelectionMerge %216 None 
                                                      OpBranchConditional %214 %215 %216 
                                             %215 = OpLabel 
                                                      OpKill
                                             %216 = OpLabel 
                                       f32_3 %221 = OpLoad %220 
                                       f32_3 %222 = OpFNegate %221 
                              Uniform f32_3* %224 = OpAccessChain %30 %209 
                                       f32_3 %225 = OpLoad %224 
                                       f32_3 %226 = OpFAdd %222 %225 
                                       f32_4 %227 = OpLoad %218 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 6 3 
                                                      OpStore %218 %228 
                                Uniform f32* %231 = OpAccessChain %30 %230 %209 %57 
                                         f32 %232 = OpLoad %231 
                                Private f32* %233 = OpAccessChain %229 %52 
                                                      OpStore %233 %232 
                                Uniform f32* %234 = OpAccessChain %30 %230 %210 %57 
                                         f32 %235 = OpLoad %234 
                                Private f32* %236 = OpAccessChain %229 %48 
                                                      OpStore %236 %235 
                                Uniform f32* %238 = OpAccessChain %30 %230 %237 %57 
                                         f32 %239 = OpLoad %238 
                                Private f32* %240 = OpAccessChain %229 %57 
                                                      OpStore %240 %239 
                                       f32_4 %242 = OpLoad %218 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpLoad %229 
                                         f32 %245 = OpDot %243 %244 
                                                      OpStore %241 %245 
                                       f32_3 %246 = OpLoad %220 
                              Uniform f32_4* %248 = OpAccessChain %30 %247 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpFNegate %250 
                                       f32_3 %252 = OpFAdd %246 %251 
                                       f32_4 %253 = OpLoad %218 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %218 %254 
                                       f32_4 %256 = OpLoad %218 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %218 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %255 %260 
                                         f32 %261 = OpLoad %255 
                                         f32 %262 = OpExtInst %1 31 %261 
                                                      OpStore %255 %262 
                                         f32 %263 = OpLoad %241 
                                         f32 %264 = OpFNegate %263 
                                         f32 %265 = OpLoad %255 
                                         f32 %266 = OpFAdd %264 %265 
                                                      OpStore %255 %266 
                                Uniform f32* %267 = OpAccessChain %30 %247 %195 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpLoad %255 
                                         f32 %270 = OpFMul %268 %269 
                                         f32 %271 = OpLoad %241 
                                         f32 %272 = OpFAdd %270 %271 
                                                      OpStore %241 %272 
                                         f32 %273 = OpLoad %241 
                                Uniform f32* %274 = OpAccessChain %30 %237 %57 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpFMul %273 %275 
                                Uniform f32* %277 = OpAccessChain %30 %237 %195 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFAdd %276 %278 
                                                      OpStore %241 %279 
                                         f32 %280 = OpLoad %241 
                                         f32 %281 = OpExtInst %1 43 %280 %126 %99 
                                                      OpStore %241 %281 
                                Uniform f32* %284 = OpAccessChain %30 %283 %52 
                                         f32 %285 = OpLoad %284 
                                        bool %286 = OpFOrdEqual %285 %99 
                                                      OpStore %282 %286 
                                                      OpSelectionMerge %289 None 
                                                      OpBranchConditional %287 %288 %289 
                                             %288 = OpLabel 
                                        bool %290 = OpLoad %282 
                                                      OpSelectionMerge %292 None 
                                                      OpBranchConditional %290 %291 %292 
                                             %291 = OpLabel 
                                                      OpBranch %292 
                                             %292 = OpLabel 
                                                      OpBranch %289 
                                             %289 = OpLabel 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %395 
                                             %294 = OpLabel 
                                Uniform f32* %297 = OpAccessChain %30 %283 %48 
                                         f32 %298 = OpLoad %297 
                                        bool %299 = OpFOrdEqual %298 %99 
                                                      OpStore %296 %299 
                                       f32_3 %300 = OpLoad %220 
                                       f32_3 %301 = OpVectorShuffle %300 %300 1 1 1 
                              Uniform f32_4* %303 = OpAccessChain %30 %302 %210 
                                       f32_4 %304 = OpLoad %303 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %306 = OpFMul %301 %305 
                                       f32_4 %307 = OpLoad %218 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
                                                      OpStore %218 %308 
                              Uniform f32_4* %309 = OpAccessChain %30 %302 %209 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpLoad %220 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 0 0 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_4 %315 = OpLoad %218 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %317 = OpFAdd %314 %316 
                                       f32_4 %318 = OpLoad %218 
                                       f32_4 %319 = OpVectorShuffle %318 %317 4 5 6 3 
                                                      OpStore %218 %319 
                              Uniform f32_4* %320 = OpAccessChain %30 %302 %237 
                                       f32_4 %321 = OpLoad %320 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_3 %323 = OpLoad %220 
                                       f32_3 %324 = OpVectorShuffle %323 %323 2 2 2 
                                       f32_3 %325 = OpFMul %322 %324 
                                       f32_4 %326 = OpLoad %218 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                       f32_3 %328 = OpFAdd %325 %327 
                                       f32_4 %329 = OpLoad %218 
                                       f32_4 %330 = OpVectorShuffle %329 %328 4 5 6 3 
                                                      OpStore %218 %330 
                                       f32_4 %331 = OpLoad %218 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 2 
                              Uniform f32_4* %333 = OpAccessChain %30 %302 %247 
                                       f32_4 %334 = OpLoad %333 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFAdd %332 %335 
                                       f32_4 %337 = OpLoad %218 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 6 3 
                                                      OpStore %218 %338 
                                        bool %341 = OpLoad %296 
                                                      OpSelectionMerge %343 None 
                                                      OpBranchConditional %341 %342 %346 
                                             %342 = OpLabel 
                                       f32_4 %344 = OpLoad %218 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                                      OpStore %340 %345 
                                                      OpBranch %343 
                                             %346 = OpLabel 
                                       f32_3 %347 = OpLoad %220 
                                                      OpStore %340 %347 
                                                      OpBranch %343 
                                             %343 = OpLabel 
                                       f32_3 %348 = OpLoad %340 
                                       f32_4 %349 = OpLoad %218 
                                       f32_4 %350 = OpVectorShuffle %349 %348 4 5 6 3 
                                                      OpStore %218 %350 
                                       f32_4 %351 = OpLoad %218 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                              Uniform f32_3* %354 = OpAccessChain %30 %353 
                                       f32_3 %355 = OpLoad %354 
                                       f32_3 %356 = OpFNegate %355 
                                       f32_3 %357 = OpFAdd %352 %356 
                                       f32_4 %358 = OpLoad %218 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %218 %359 
                                       f32_4 %361 = OpLoad %218 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                              Uniform f32_3* %364 = OpAccessChain %30 %363 
                                       f32_3 %365 = OpLoad %364 
                                       f32_3 %366 = OpFMul %362 %365 
                                       f32_4 %367 = OpLoad %360 
                                       f32_4 %368 = OpVectorShuffle %367 %366 0 4 5 6 
                                                      OpStore %360 %368 
                                Private f32* %370 = OpAccessChain %360 %48 
                                         f32 %371 = OpLoad %370 
                                         f32 %373 = OpFMul %371 %372 
                                         f32 %374 = OpFAdd %373 %128 
                                                      OpStore %369 %374 
                                Uniform f32* %375 = OpAccessChain %30 %283 %57 
                                         f32 %376 = OpLoad %375 
                                         f32 %378 = OpFMul %376 %377 
                                         f32 %379 = OpFAdd %378 %128 
                                Private f32* %380 = OpAccessChain %218 %52 
                                                      OpStore %380 %379 
                                         f32 %381 = OpLoad %369 
                                Private f32* %382 = OpAccessChain %218 %52 
                                         f32 %383 = OpLoad %382 
                                         f32 %384 = OpExtInst %1 40 %381 %383 
                                Private f32* %385 = OpAccessChain %360 %52 
                                                      OpStore %385 %384 
                  read_only Texture3DSampled %390 = OpLoad %389 
                                       f32_4 %391 = OpLoad %360 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 2 3 
                                       f32_4 %393 = OpImageSampleImplicitLod %390 %392 
                                                      OpStore %360 %393 
                                       f32_4 %394 = OpLoad %360 
                                                      OpStore %81 %394 
                                                      OpBranch %295 
                                             %395 = OpLabel 
                                Private f32* %396 = OpAccessChain %81 %52 
                                                      OpStore %396 %99 
                                Private f32* %397 = OpAccessChain %81 %48 
                                                      OpStore %397 %99 
                                Private f32* %398 = OpAccessChain %81 %57 
                                                      OpStore %398 %99 
                                Private f32* %399 = OpAccessChain %81 %195 
                                                      OpStore %399 %99 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                       f32_4 %401 = OpLoad %81 
                              Uniform f32_4* %402 = OpAccessChain %30 %210 
                                       f32_4 %403 = OpLoad %402 
                                         f32 %404 = OpDot %401 %403 
                                Private f32* %405 = OpAccessChain %400 %52 
                                                      OpStore %405 %404 
                                Private f32* %406 = OpAccessChain %400 %52 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpExtInst %1 43 %407 %126 %99 
                                Private f32* %409 = OpAccessChain %400 %52 
                                                      OpStore %409 %408 
                                       f32_4 %412 = OpLoad %411 
                                       f32_2 %413 = OpVectorShuffle %412 %412 0 1 
                                       f32_4 %414 = OpLoad %411 
                                       f32_2 %415 = OpVectorShuffle %414 %414 3 3 
                                       f32_2 %416 = OpFDiv %413 %415 
                                       f32_4 %417 = OpLoad %218 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 2 3 
                                                      OpStore %218 %418 
                  read_only Texture2DSampled %421 = OpLoad %420 
                                       f32_4 %422 = OpLoad %218 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_4 %424 = OpImageSampleImplicitLod %421 %423 
                                         f32 %425 = OpCompositeExtract %424 0 
                                                      OpStore %419 %425 
                                         f32 %427 = OpLoad %241 
                                         f32 %428 = OpLoad %419 
                                         f32 %429 = OpFAdd %427 %428 
                                Private f32* %430 = OpAccessChain %426 %52 
                                                      OpStore %430 %429 
                                Private f32* %431 = OpAccessChain %426 %52 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpExtInst %1 43 %432 %126 %99 
                                Private f32* %434 = OpAccessChain %426 %52 
                                                      OpStore %434 %433 
                                Private f32* %435 = OpAccessChain %426 %52 
                                         f32 %436 = OpLoad %435 
                                Private f32* %437 = OpAccessChain %400 %52 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpExtInst %1 37 %436 %438 
                                Private f32* %440 = OpAccessChain %400 %52 
                                                      OpStore %440 %439 
                                        bool %443 = OpLoad %282 
                                                      OpSelectionMerge %445 None 
                                                      OpBranchConditional %443 %444 %448 
                                             %444 = OpLabel 
                                Private f32* %446 = OpAccessChain %400 %52 
                                         f32 %447 = OpLoad %446 
                                                      OpStore %442 %447 
                                                      OpBranch %445 
                                             %448 = OpLabel 
                                Private f32* %449 = OpAccessChain %426 %52 
                                         f32 %450 = OpLoad %449 
                                                      OpStore %442 %450 
                                                      OpBranch %445 
                                             %445 = OpLabel 
                                         f32 %451 = OpLoad %442 
                                Private f32* %452 = OpAccessChain %400 %52 
                                                      OpStore %452 %451 
                                       f32_4 %453 = OpLoad %141 
                                       f32_3 %454 = OpVectorShuffle %453 %453 0 1 2 
                              Uniform f32_4* %456 = OpAccessChain %30 %455 
                                       f32_4 %457 = OpLoad %456 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                                       f32_3 %459 = OpFMul %454 %458 
                                                      OpStore %426 %459 
                                       f32_3 %460 = OpLoad %400 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpLoad %426 
                                       f32_3 %463 = OpFMul %461 %462 
                                                      OpStore %400 %463 
                                       f32_4 %464 = OpLoad %141 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_3 %467 = OpLoad %466 
                                       f32_3 %468 = OpFMul %465 %467 
                                       f32_3 %469 = OpLoad %400 
                                       f32_3 %470 = OpFAdd %468 %469 
                                                      OpStore %400 %470 
                                Private f32* %473 = OpAccessChain %9 %195 
                                         f32 %474 = OpLoad %473 
                                 Output f32* %476 = OpAccessChain %472 %195 
                                                      OpStore %476 %474 
                                       f32_4 %477 = OpLoad %20 
                                       f32_3 %478 = OpVectorShuffle %477 %477 0 1 2 
                                       f32_2 %479 = OpLoad %125 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 0 0 
                                       f32_3 %481 = OpFMul %478 %480 
                                       f32_3 %482 = OpLoad %400 
                                       f32_3 %483 = OpFAdd %481 %482 
                                                      OpStore %400 %483 
                                Private f32* %485 = OpAccessChain %400 %48 
                                         f32 %486 = OpLoad %485 
                                Private f32* %487 = OpAccessChain %400 %57 
                                         f32 %488 = OpLoad %487 
                                        bool %489 = OpFOrdGreaterThanEqual %486 %488 
                                                      OpStore %484 %489 
                                        bool %492 = OpLoad %484 
                                                      OpSelectionMerge %494 None 
                                                      OpBranchConditional %492 %493 %495 
                                             %493 = OpLabel 
                                                      OpStore %491 %99 
                                                      OpBranch %494 
                                             %495 = OpLabel 
                                                      OpStore %491 %126 
                                                      OpBranch %494 
                                             %494 = OpLabel 
                                         f32 %496 = OpLoad %491 
                                                      OpStore %490 %496 
                                       f32_3 %498 = OpLoad %400 
                                       f32_2 %499 = OpVectorShuffle %498 %498 2 1 
                                       f32_2 %500 = OpFNegate %499 
                                       f32_3 %501 = OpLoad %400 
                                       f32_2 %502 = OpVectorShuffle %501 %501 1 2 
                                       f32_2 %503 = OpFAdd %500 %502 
                                                      OpStore %497 %503 
                                Private f32* %504 = OpAccessChain %141 %52 
                                                      OpStore %504 %99 
                                Private f32* %506 = OpAccessChain %141 %48 
                                                      OpStore %506 %505 
                                         f32 %507 = OpLoad %490 
                                       f32_2 %508 = OpCompositeConstruct %507 %507 
                                       f32_2 %509 = OpLoad %497 
                                       f32_2 %510 = OpFMul %508 %509 
                                       f32_3 %511 = OpLoad %400 
                                       f32_2 %512 = OpVectorShuffle %511 %511 2 1 
                                       f32_2 %513 = OpFAdd %510 %512 
                                       f32_4 %514 = OpLoad %360 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 5 2 3 
                                                      OpStore %360 %515 
                                         f32 %516 = OpLoad %490 
                                       f32_2 %517 = OpCompositeConstruct %516 %516 
                                       f32_4 %518 = OpLoad %141 
                                       f32_2 %519 = OpVectorShuffle %518 %518 0 1 
                                       f32_2 %520 = OpFMul %517 %519 
                                       f32_2 %523 = OpFAdd %520 %522 
                                       f32_4 %524 = OpLoad %360 
                                       f32_4 %525 = OpVectorShuffle %524 %523 0 1 4 5 
                                                      OpStore %360 %525 
                                Private f32* %526 = OpAccessChain %400 %52 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %360 %52 
                                         f32 %529 = OpLoad %528 
                                        bool %530 = OpFOrdGreaterThanEqual %527 %529 
                                                      OpStore %484 %530 
                                        bool %532 = OpLoad %484 
                                                      OpSelectionMerge %534 None 
                                                      OpBranchConditional %532 %533 %535 
                                             %533 = OpLabel 
                                                      OpStore %531 %99 
                                                      OpBranch %534 
                                             %535 = OpLabel 
                                                      OpStore %531 %126 
                                                      OpBranch %534 
                                             %534 = OpLabel 
                                         f32 %536 = OpLoad %531 
                                                      OpStore %490 %536 
                                       f32_4 %537 = OpLoad %360 
                                       f32_3 %538 = OpVectorShuffle %537 %537 0 1 3 
                                       f32_3 %539 = OpFNegate %538 
                                       f32_4 %540 = OpLoad %141 
                                       f32_4 %541 = OpVectorShuffle %540 %539 4 5 6 3 
                                                      OpStore %141 %541 
                                Private f32* %542 = OpAccessChain %400 %52 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFNegate %543 
                                Private f32* %545 = OpAccessChain %141 %195 
                                                      OpStore %545 %544 
                                Private f32* %546 = OpAccessChain %141 %52 
                                         f32 %547 = OpLoad %546 
                                Private f32* %548 = OpAccessChain %400 %52 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %547 %549 
                                Private f32* %551 = OpAccessChain %218 %52 
                                                      OpStore %551 %550 
                                       f32_4 %552 = OpLoad %360 
                                       f32_3 %553 = OpVectorShuffle %552 %552 1 2 0 
                                       f32_4 %554 = OpLoad %141 
                                       f32_3 %555 = OpVectorShuffle %554 %554 1 2 3 
                                       f32_3 %556 = OpFAdd %553 %555 
                                       f32_4 %557 = OpLoad %218 
                                       f32_4 %558 = OpVectorShuffle %557 %556 0 4 5 6 
                                                      OpStore %218 %558 
                                         f32 %559 = OpLoad %490 
                                       f32_3 %560 = OpCompositeConstruct %559 %559 %559 
                                       f32_4 %561 = OpLoad %218 
                                       f32_3 %562 = OpVectorShuffle %561 %561 0 1 2 
                                       f32_3 %563 = OpFMul %560 %562 
                                       f32_4 %564 = OpLoad %360 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 3 
                                       f32_3 %566 = OpFAdd %563 %565 
                                       f32_4 %567 = OpLoad %20 
                                       f32_4 %568 = OpVectorShuffle %567 %566 4 5 2 6 
                                                      OpStore %20 %568 
                                         f32 %569 = OpLoad %490 
                                Private f32* %570 = OpAccessChain %218 %195 
                                         f32 %571 = OpLoad %570 
                                         f32 %572 = OpFMul %569 %571 
                                Private f32* %573 = OpAccessChain %400 %52 
                                         f32 %574 = OpLoad %573 
                                         f32 %575 = OpFAdd %572 %574 
                                                      OpStore %490 %575 
                                Private f32* %576 = OpAccessChain %20 %48 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpLoad %490 
                                         f32 %579 = OpExtInst %1 37 %577 %578 
                                Private f32* %580 = OpAccessChain %141 %52 
                                                      OpStore %580 %579 
                                Private f32* %581 = OpAccessChain %20 %52 
                                         f32 %582 = OpLoad %581 
                                Private f32* %583 = OpAccessChain %141 %52 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFNegate %584 
                                         f32 %586 = OpFAdd %582 %585 
                                Private f32* %587 = OpAccessChain %141 %52 
                                                      OpStore %587 %586 
                                Private f32* %588 = OpAccessChain %20 %48 
                                         f32 %589 = OpLoad %588 
                                         f32 %590 = OpFNegate %589 
                                         f32 %591 = OpLoad %490 
                                         f32 %592 = OpFAdd %590 %591 
                                                      OpStore %490 %592 
                                Private f32* %594 = OpAccessChain %141 %52 
                                         f32 %595 = OpLoad %594 
                                         f32 %597 = OpFMul %595 %596 
                                         f32 %599 = OpFAdd %597 %598 
                                                      OpStore %593 %599 
                                         f32 %600 = OpLoad %490 
                                         f32 %601 = OpLoad %593 
                                         f32 %602 = OpFDiv %600 %601 
                                                      OpStore %490 %602 
                                         f32 %603 = OpLoad %490 
                                Private f32* %604 = OpAccessChain %20 %195 
                                         f32 %605 = OpLoad %604 
                                         f32 %606 = OpFAdd %603 %605 
                                                      OpStore %490 %606 
                                Private f32* %607 = OpAccessChain %20 %52 
                                         f32 %608 = OpLoad %607 
                                         f32 %609 = OpFAdd %608 %598 
                                                      OpStore %593 %609 
                                Private f32* %610 = OpAccessChain %141 %52 
                                         f32 %611 = OpLoad %610 
                                         f32 %612 = OpLoad %593 
                                         f32 %613 = OpFDiv %611 %612 
                                                      OpStore %593 %613 
                                Private f32* %614 = OpAccessChain %9 %48 
                                         f32 %615 = OpLoad %614 
                                Private f32* %616 = OpAccessChain %9 %57 
                                         f32 %617 = OpLoad %616 
                                        bool %618 = OpFOrdGreaterThanEqual %615 %617 
                                                      OpStore %204 %618 
                                        bool %620 = OpLoad %204 
                                                      OpSelectionMerge %622 None 
                                                      OpBranchConditional %620 %621 %623 
                                             %621 = OpLabel 
                                                      OpStore %619 %99 
                                                      OpBranch %622 
                                             %623 = OpLabel 
                                                      OpStore %619 %126 
                                                      OpBranch %622 
                                             %622 = OpLabel 
                                         f32 %624 = OpLoad %619 
                                                      OpStore %241 %624 
                                Private f32* %626 = OpAccessChain %9 %57 
                                         f32 %627 = OpLoad %626 
                                         f32 %628 = OpFNegate %627 
                                Private f32* %629 = OpAccessChain %9 %48 
                                         f32 %630 = OpLoad %629 
                                         f32 %631 = OpFAdd %628 %630 
                                                      OpStore %625 %631 
                                         f32 %633 = OpLoad %241 
                                         f32 %634 = OpLoad %625 
                                         f32 %635 = OpFMul %633 %634 
                                Private f32* %636 = OpAccessChain %9 %57 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpFAdd %635 %637 
                                Private f32* %639 = OpAccessChain %632 %52 
                                                      OpStore %639 %638 
                                Private f32* %641 = OpAccessChain %9 %52 
                                         f32 %642 = OpLoad %641 
                                Private f32* %643 = OpAccessChain %632 %52 
                                         f32 %644 = OpLoad %643 
                                        bool %645 = OpFOrdGreaterThanEqual %642 %644 
                                                      OpStore %640 %645 
                                        bool %648 = OpLoad %640 
                                                      OpSelectionMerge %650 None 
                                                      OpBranchConditional %648 %649 %651 
                                             %649 = OpLabel 
                                                      OpStore %647 %99 
                                                      OpBranch %650 
                                             %651 = OpLabel 
                                                      OpStore %647 %126 
                                                      OpBranch %650 
                                             %650 = OpLabel 
                                         f32 %652 = OpLoad %647 
                                                      OpStore %646 %652 
                                Private f32* %654 = OpAccessChain %632 %52 
                                         f32 %655 = OpLoad %654 
                                         f32 %656 = OpFNegate %655 
                                Private f32* %657 = OpAccessChain %9 %52 
                                         f32 %658 = OpLoad %657 
                                         f32 %659 = OpFAdd %656 %658 
                                Private f32* %660 = OpAccessChain %653 %52 
                                                      OpStore %660 %659 
                                         f32 %661 = OpLoad %646 
                                Private f32* %662 = OpAccessChain %653 %52 
                                         f32 %663 = OpLoad %662 
                                         f32 %664 = OpFMul %661 %663 
                                Private f32* %665 = OpAccessChain %632 %52 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpFAdd %664 %666 
                                Private f32* %668 = OpAccessChain %653 %52 
                                                      OpStore %668 %667 
                                Private f32* %669 = OpAccessChain %653 %52 
                                         f32 %670 = OpLoad %669 
                                Uniform f32* %672 = OpAccessChain %30 %671 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFMul %670 %673 
                                Private f32* %675 = OpAccessChain %653 %52 
                                                      OpStore %675 %674 
                                Private f32* %676 = OpAccessChain %653 %52 
                                         f32 %677 = OpLoad %676 
                                Private f32* %678 = OpAccessChain %20 %52 
                                         f32 %679 = OpLoad %678 
                                         f32 %680 = OpExtInst %1 37 %677 %679 
                                Private f32* %681 = OpAccessChain %653 %52 
                                                      OpStore %681 %680 
                                Private f32* %683 = OpAccessChain %189 %48 
                                         f32 %684 = OpLoad %683 
                                Private f32* %685 = OpAccessChain %189 %52 
                                         f32 %686 = OpLoad %685 
                                         f32 %687 = OpFAdd %684 %686 
                                                      OpStore %682 %687 
                                Private f32* %688 = OpAccessChain %20 %57 
                                         f32 %689 = OpLoad %688 
                                Private f32* %690 = OpAccessChain %125 %52 
                                         f32 %691 = OpLoad %690 
                                         f32 %692 = OpFMul %689 %691 
                                         f32 %693 = OpLoad %682 
                                         f32 %694 = OpFAdd %692 %693 
                                                      OpStore %682 %694 
                                         f32 %695 = OpLoad %682 
                                         f32 %697 = OpFMul %695 %696 
                                                      OpStore %682 %697 
                                         f32 %698 = OpLoad %682 
                                         f32 %699 = OpExtInst %1 43 %698 %126 %99 
                                                      OpStore %682 %699 
                                         f32 %700 = OpLoad %490 
                                       f32_3 %701 = OpCompositeConstruct %700 %700 %700 
                                       f32_3 %702 = OpExtInst %1 4 %701 
                                       f32_3 %705 = OpFAdd %702 %704 
                                                      OpStore %632 %705 
                                       f32_3 %706 = OpLoad %632 
                                       f32_3 %707 = OpExtInst %1 10 %706 
                                                      OpStore %632 %707 
                                       f32_3 %708 = OpLoad %632 
                                       f32_3 %710 = OpFMul %708 %709 
                                       f32_3 %713 = OpFAdd %710 %712 
                                                      OpStore %632 %713 
                                       f32_3 %714 = OpLoad %632 
                                       f32_3 %715 = OpExtInst %1 4 %714 
                                       f32_3 %717 = OpFAdd %715 %716 
                                                      OpStore %632 %717 
                                       f32_3 %718 = OpLoad %632 
                                       f32_3 %719 = OpCompositeConstruct %126 %126 %126 
                                       f32_3 %720 = OpCompositeConstruct %99 %99 %99 
                                       f32_3 %721 = OpExtInst %1 43 %718 %719 %720 
                                                      OpStore %632 %721 
                                       f32_3 %722 = OpLoad %632 
                                       f32_3 %723 = OpFAdd %722 %716 
                                                      OpStore %632 %723 
                                         f32 %724 = OpLoad %593 
                                       f32_3 %725 = OpCompositeConstruct %724 %724 %724 
                                       f32_3 %726 = OpLoad %632 
                                       f32_3 %727 = OpFMul %725 %726 
                                       f32_3 %729 = OpFAdd %727 %728 
                                                      OpStore %632 %729 
                                       f32_3 %730 = OpLoad %632 
                                       f32_3 %731 = OpLoad %653 
                                       f32_3 %732 = OpVectorShuffle %731 %731 0 0 0 
                                       f32_3 %733 = OpFMul %730 %732 
                                       f32_4 %734 = OpLoad %20 
                                       f32_4 %735 = OpVectorShuffle %734 %733 4 5 6 3 
                                                      OpStore %20 %735 
                                       f32_3 %736 = OpLoad %653 
                                       f32_3 %737 = OpVectorShuffle %736 %736 0 0 0 
                                       f32_3 %738 = OpFNegate %737 
                                       f32_3 %739 = OpLoad %632 
                                       f32_3 %740 = OpFMul %738 %739 
                                       f32_3 %741 = OpLoad %400 
                                       f32_3 %742 = OpFAdd %740 %741 
                                                      OpStore %653 %742 
                                         f32 %743 = OpLoad %682 
                                       f32_3 %744 = OpCompositeConstruct %743 %743 %743 
                                       f32_3 %745 = OpLoad %653 
                                       f32_3 %746 = OpFMul %744 %745 
                                       f32_4 %747 = OpLoad %20 
                                       f32_3 %748 = OpVectorShuffle %747 %747 0 1 2 
                                       f32_3 %749 = OpFAdd %746 %748 
                                                      OpStore %653 %749 
                                       f32_3 %750 = OpLoad %653 
                                       f32_4 %751 = OpLoad %472 
                                       f32_4 %752 = OpVectorShuffle %751 %750 4 5 6 3 
                                                      OpStore %472 %752 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat2.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat1.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat2.x = u_xlat1.y * u_xlat1.y;
    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	vec4 _EmissiveColor;
uniform 	float _EmissiveThresholdSensitivity;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ParallaxTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat16_2;
vec4 u_xlat10_2;
vec2 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
float u_xlat16_7;
float u_xlat8;
vec2 u_xlat16_8;
bool u_xlatb8;
vec2 u_xlat10;
float u_xlat11;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
float u_xlat16_22;
bool u_xlatb22;
float u_xlat23;
bool u_xlatb23;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz + (-_EmissiveColor.xyz);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y + u_xlat1.x;
    u_xlat1.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb1 = u_xlat1.x<_EmissiveThresholdSensitivity;
    u_xlat16_8.x = dot(u_xlat10_0.xyz, vec3(0.298900008, 0.586600006, 0.114500001));
    u_xlat16_8.xy = u_xlat10_0.xz + (-u_xlat16_8.xx);
    u_xlat16_8.xy = u_xlat16_8.xy * vec2(1.0, 1.0) + vec2(1.0, 1.0);
    u_xlat16_22 = (-u_xlat16_8.x) * 0.298900008 + 1.0;
    u_xlat16_22 = (-u_xlat16_8.y) * 0.114500001 + u_xlat16_22;
    u_xlat16_22 = u_xlat16_22 * 1.70473921;
    u_xlat10_2 = texture(_ParallaxTex, vs_TEXCOORD4.xy);
    u_xlat3.xy = mix(vec2(0.0, 0.0), vec2(1.0, 0.75), vec2(bvec2(u_xlatb1)));
    u_xlat16_2.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
    u_xlat2.xyz = u_xlat3.yyy * u_xlat16_2.xyz + u_xlat10_0.xyz;
    u_xlat1.xz = log2(u_xlat16_8.xy);
    u_xlat1.y = log2(u_xlat16_22);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10.xy = u_xlat3.xx * u_xlat1.xy;
    u_xlat22 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb22 = u_xlat22<0.0;
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat22 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = (-u_xlat22) + u_xlat23;
    u_xlat22 = unity_ShadowFadeCenterAndType.w * u_xlat23 + u_xlat22;
    u_xlat22 = u_xlat22 * _LightShadowData.z + _LightShadowData.w;
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlatb23 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb23){
        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb24)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat24 = u_xlat4.y * 0.25 + 0.75;
        u_xlat11 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat24, u_xlat11);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat24 = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat22 = u_xlat22 + u_xlat10_4.x;
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat24 = min(u_xlat22, u_xlat24);
    u_xlat22 = (u_xlatb23) ? u_xlat24 : u_xlat22;
    u_xlat4.xyz = u_xlat2.xyz * vs_TEXCOORD5.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat4.w = 0.0;
    u_xlat2.w = u_xlat10_0.w;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat4.xyz = u_xlat1.zyx * u_xlat3.xxx + u_xlat2.zyx;
    u_xlatb21 = u_xlat4.y>=u_xlat4.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat4.w = 0.666666687;
    u_xlat1.xy = (-u_xlat4.xy) + u_xlat4.yx;
    u_xlat1.w = -1.0;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat4.xyw;
    u_xlatb21 = u_xlat4.z>=u_xlat5.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat5.w = u_xlat4.z;
    u_xlat6.xyw = u_xlat5.wyx;
    u_xlat6.z = -1.0;
    u_xlat6 = (-u_xlat5) + u_xlat6;
    u_xlat5 = vec4(u_xlat21) * u_xlat6 + u_xlat5;
    u_xlat21 = min(u_xlat5.y, u_xlat5.w);
    u_xlat21 = (-u_xlat21) + u_xlat5.x;
    u_xlat1.x = (-u_xlat5.y) + u_xlat5.w;
    u_xlat8 = u_xlat21 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat8;
    u_xlat1.x = u_xlat1.x + u_xlat5.z;
    u_xlat8 = u_xlat5.x + 1.00000001e-010;
    u_xlat21 = u_xlat21 / u_xlat8;
    u_xlatb8 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat16_7 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat7 = u_xlat8 * u_xlat16_7 + u_xlat10_0.z;
    u_xlatb14 = u_xlat10_0.x>=u_xlat7;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = (-u_xlat7) + u_xlat10_0.x;
    u_xlat0.x = u_xlat14 * u_xlat0.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _MaxValue;
    u_xlat0.x = min(u_xlat0.x, u_xlat5.x);
    u_xlat7 = u_xlat10.y + u_xlat10.x;
    u_xlat7 = u_xlat1.z * u_xlat3.x + u_xlat7;
    u_xlat7 = u_xlat7 * 10.0;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xzw = (-u_xlat0.xxx) * u_xlat1.xyz + u_xlat4.zyx;
    SV_Target0.xyz = vec3(u_xlat7) * u_xlat0.xzw + u_xlat2.xyz;
    SV_Target0.w = u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 361
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %154 %163 %164 %177 %215 %218 %326 %342 %354 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %163 Location 163 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %215 Location 215 
                                                      OpDecorate %218 Location 218 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %326 Location 326 
                                                      OpDecorate %342 Location 342 
                                                      OpDecorate %354 Location 354 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Private %98 
                              Private f32_2* %100 = OpVariable Private 
                                         f32 %141 = OpConstant 3.674022E-40 
                                       f32_2 %142 = OpConstantComposite %141 %141 
                                         f32 %148 = OpConstant 3.674022E-40 
                                       f32_2 %149 = OpConstantComposite %148 %148 
                                             %153 = OpTypePointer Output %98 
                               Output f32_2* %154 = OpVariable Output 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_2 %158 = OpConstantComposite %141 %157 
                                         f32 %160 = OpConstant 3.674022E-40 
                                       f32_2 %161 = OpConstantComposite %160 %141 
                               Output f32_2* %163 = OpVariable Output 
                                Input f32_4* %164 = OpVariable Input 
                                         i32 %167 = OpConstant 11 
                                             %176 = OpTypePointer Input %51 
                                Input f32_3* %177 = OpVariable Input 
                                         i32 %179 = OpConstant 9 
                                         u32 %184 = OpConstant 0 
                                             %185 = OpTypePointer Private %6 
                                         u32 %198 = OpConstant 2 
                                Private f32* %200 = OpVariable Private 
                               Output f32_3* %215 = OpVariable Output 
                               Output f32_4* %218 = OpVariable Output 
                                       f32_4 %219 = OpConstantComposite %160 %160 %160 %160 
                                             %220 = OpTypePointer Private %51 
                              Private f32_3* %221 = OpVariable Private 
                              Private f32_4* %238 = OpVariable Private 
                              Private f32_3* %244 = OpVariable Private 
                                         i32 %245 = OpConstant 4 
                                         i32 %251 = OpConstant 5 
                                         i32 %257 = OpConstant 6 
                                         i32 %263 = OpConstant 7 
                                         u32 %272 = OpConstant 3 
                                       f32_3 %293 = OpConstantComposite %160 %160 %160 
                                         f32 %301 = OpConstant 3.674022E-40 
                                       f32_3 %302 = OpConstantComposite %301 %301 %301 
                                         f32 %313 = OpConstant 3.674022E-40 
                                       f32_3 %314 = OpConstantComposite %313 %313 %313 
                                         f32 %316 = OpConstant 3.674022E-40 
                                       f32_3 %317 = OpConstantComposite %316 %316 %316 
                               Output f32_3* %326 = OpVariable Output 
                                             %331 = OpTypePointer Uniform %6 
                                       f32_3 %338 = OpConstantComposite %148 %148 %148 
                               Output f32_4* %342 = OpVariable Output 
                               Output f32_4* %354 = OpVariable Output 
                                             %355 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %101 = OpLoad %45 
                                       f32_2 %102 = OpVectorShuffle %101 %101 1 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %65 %24 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %102 %105 
                                                      OpStore %100 %106 
                              Uniform f32_4* %107 = OpAccessChain %21 %65 %29 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_4 %110 = OpLoad %45 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 0 
                                       f32_2 %112 = OpFMul %109 %111 
                                       f32_2 %113 = OpLoad %100 
                                       f32_2 %114 = OpFAdd %112 %113 
                                       f32_4 %115 = OpLoad %45 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 2 3 
                                                      OpStore %45 %116 
                              Uniform f32_4* %117 = OpAccessChain %21 %65 %37 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpLoad %45 
                                       f32_2 %121 = OpVectorShuffle %120 %120 2 2 
                                       f32_2 %122 = OpFMul %119 %121 
                                       f32_4 %123 = OpLoad %45 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %45 
                                       f32_4 %127 = OpVectorShuffle %126 %125 4 5 2 3 
                                                      OpStore %45 %127 
                              Uniform f32_4* %128 = OpAccessChain %21 %65 %47 
                                       f32_4 %129 = OpLoad %128 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                                       f32_4 %131 = OpLoad %45 
                                       f32_2 %132 = OpVectorShuffle %131 %131 3 3 
                                       f32_2 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFAdd %133 %135 
                                       f32_4 %137 = OpLoad %45 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 3 
                                                      OpStore %45 %138 
                                       f32_4 %139 = OpLoad %45 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_2 %143 = OpFAdd %140 %142 
                                       f32_4 %144 = OpLoad %45 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %45 %145 
                                       f32_4 %146 = OpLoad %45 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_2 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %45 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 2 3 
                                                      OpStore %45 %152 
                                       f32_4 %155 = OpLoad %45 
                                       f32_2 %156 = OpVectorShuffle %155 %155 0 1 
                                       f32_2 %159 = OpFMul %156 %158 
                                       f32_2 %162 = OpFAdd %159 %161 
                                                      OpStore %154 %162 
                                       f32_4 %165 = OpLoad %164 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                              Uniform f32_4* %168 = OpAccessChain %21 %167 
                                       f32_4 %169 = OpLoad %168 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                       f32_2 %171 = OpFMul %166 %170 
                              Uniform f32_4* %172 = OpAccessChain %21 %167 
                                       f32_4 %173 = OpLoad %172 
                                       f32_2 %174 = OpVectorShuffle %173 %173 2 3 
                                       f32_2 %175 = OpFAdd %171 %174 
                                                      OpStore %163 %175 
                                       f32_3 %178 = OpLoad %177 
                              Uniform f32_4* %180 = OpAccessChain %21 %179 %29 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                         f32 %183 = OpDot %178 %182 
                                Private f32* %186 = OpAccessChain %45 %184 
                                                      OpStore %186 %183 
                                       f32_3 %187 = OpLoad %177 
                              Uniform f32_4* %188 = OpAccessChain %21 %179 %24 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %187 %190 
                                Private f32* %192 = OpAccessChain %45 %90 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %177 
                              Uniform f32_4* %194 = OpAccessChain %21 %179 %37 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                         f32 %197 = OpDot %193 %196 
                                Private f32* %199 = OpAccessChain %45 %198 
                                                      OpStore %199 %197 
                                       f32_4 %201 = OpLoad %45 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %45 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                         f32 %205 = OpDot %202 %204 
                                                      OpStore %200 %205 
                                         f32 %206 = OpLoad %200 
                                         f32 %207 = OpExtInst %1 32 %206 
                                                      OpStore %200 %207 
                                         f32 %208 = OpLoad %200 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_4 %210 = OpLoad %45 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %45 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %45 %214 
                                       f32_4 %216 = OpLoad %45 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                                      OpStore %215 %217 
                                                      OpStore %218 %219 
                                Private f32* %222 = OpAccessChain %45 %90 
                                         f32 %223 = OpLoad %222 
                                Private f32* %224 = OpAccessChain %45 %90 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                Private f32* %227 = OpAccessChain %221 %184 
                                                      OpStore %227 %226 
                                Private f32* %228 = OpAccessChain %45 %184 
                                         f32 %229 = OpLoad %228 
                                Private f32* %230 = OpAccessChain %45 %184 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFMul %229 %231 
                                Private f32* %233 = OpAccessChain %221 %184 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFNegate %234 
                                         f32 %236 = OpFAdd %232 %235 
                                Private f32* %237 = OpAccessChain %221 %184 
                                                      OpStore %237 %236 
                                       f32_4 %239 = OpLoad %45 
                                       f32_4 %240 = OpVectorShuffle %239 %239 1 2 2 0 
                                       f32_4 %241 = OpLoad %45 
                                       f32_4 %242 = OpVectorShuffle %241 %241 0 1 2 2 
                                       f32_4 %243 = OpFMul %240 %242 
                                                      OpStore %238 %243 
                              Uniform f32_4* %246 = OpAccessChain %21 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %238 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %244 %184 
                                                      OpStore %250 %249 
                              Uniform f32_4* %252 = OpAccessChain %21 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_4 %254 = OpLoad %238 
                                         f32 %255 = OpDot %253 %254 
                                Private f32* %256 = OpAccessChain %244 %90 
                                                      OpStore %256 %255 
                              Uniform f32_4* %258 = OpAccessChain %21 %257 
                                       f32_4 %259 = OpLoad %258 
                                       f32_4 %260 = OpLoad %238 
                                         f32 %261 = OpDot %259 %260 
                                Private f32* %262 = OpAccessChain %244 %198 
                                                      OpStore %262 %261 
                              Uniform f32_4* %264 = OpAccessChain %21 %263 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpLoad %221 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 0 0 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_3 %270 = OpLoad %244 
                                       f32_3 %271 = OpFAdd %269 %270 
                                                      OpStore %221 %271 
                                Private f32* %273 = OpAccessChain %45 %272 
                                                      OpStore %273 %141 
                              Uniform f32_4* %274 = OpAccessChain %21 %24 
                                       f32_4 %275 = OpLoad %274 
                                       f32_4 %276 = OpLoad %45 
                                         f32 %277 = OpDot %275 %276 
                                Private f32* %278 = OpAccessChain %244 %184 
                                                      OpStore %278 %277 
                              Uniform f32_4* %279 = OpAccessChain %21 %37 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %45 
                                         f32 %282 = OpDot %280 %281 
                                Private f32* %283 = OpAccessChain %244 %90 
                                                      OpStore %283 %282 
                              Uniform f32_4* %284 = OpAccessChain %21 %47 
                                       f32_4 %285 = OpLoad %284 
                                       f32_4 %286 = OpLoad %45 
                                         f32 %287 = OpDot %285 %286 
                                Private f32* %288 = OpAccessChain %244 %198 
                                                      OpStore %288 %287 
                                       f32_3 %289 = OpLoad %221 
                                       f32_3 %290 = OpLoad %244 
                                       f32_3 %291 = OpFAdd %289 %290 
                                                      OpStore %221 %291 
                                       f32_3 %292 = OpLoad %221 
                                       f32_3 %294 = OpExtInst %1 40 %292 %293 
                                                      OpStore %221 %294 
                                       f32_3 %295 = OpLoad %221 
                                       f32_3 %296 = OpExtInst %1 30 %295 
                                       f32_4 %297 = OpLoad %45 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 6 3 
                                                      OpStore %45 %298 
                                       f32_4 %299 = OpLoad %45 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %303 = OpFMul %300 %302 
                                       f32_4 %304 = OpLoad %45 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %45 %305 
                                       f32_4 %306 = OpLoad %45 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpExtInst %1 29 %307 
                                       f32_4 %309 = OpLoad %45 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %45 %310 
                                       f32_4 %311 = OpLoad %45 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %315 = OpFMul %312 %314 
                                       f32_3 %318 = OpFAdd %315 %317 
                                       f32_4 %319 = OpLoad %45 
                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
                                                      OpStore %45 %320 
                                       f32_4 %321 = OpLoad %45 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_3 %323 = OpExtInst %1 40 %322 %293 
                                       f32_4 %324 = OpLoad %45 
                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 6 3 
                                                      OpStore %45 %325 
                                       f32_4 %327 = OpLoad %45 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                                      OpStore %326 %328 
                                Private f32* %329 = OpAccessChain %9 %90 
                                         f32 %330 = OpLoad %329 
                                Uniform f32* %332 = OpAccessChain %21 %29 %184 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpFMul %330 %333 
                                Private f32* %335 = OpAccessChain %9 %90 
                                                      OpStore %335 %334 
                                       f32_4 %336 = OpLoad %9 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 3 1 
                                       f32_3 %339 = OpFMul %337 %338 
                                       f32_4 %340 = OpLoad %45 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 1 5 6 
                                                      OpStore %45 %341 
                                       f32_4 %343 = OpLoad %9 
                                       f32_2 %344 = OpVectorShuffle %343 %343 2 3 
                                       f32_4 %345 = OpLoad %342 
                                       f32_4 %346 = OpVectorShuffle %345 %344 0 1 4 5 
                                                      OpStore %342 %346 
                                       f32_4 %347 = OpLoad %45 
                                       f32_2 %348 = OpVectorShuffle %347 %347 2 2 
                                       f32_4 %349 = OpLoad %45 
                                       f32_2 %350 = OpVectorShuffle %349 %349 0 3 
                                       f32_2 %351 = OpFAdd %348 %350 
                                       f32_4 %352 = OpLoad %342 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 2 3 
                                                      OpStore %342 %353 
                                                      OpStore %354 %219 
                                 Output f32* %356 = OpAccessChain %94 %29 %90 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpFNegate %357 
                                 Output f32* %359 = OpAccessChain %94 %29 %90 
                                                      OpStore %359 %358 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 754
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %121 %220 %411 %466 %472 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpMemberDecorate %28 1 RelaxedPrecision 
                                                      OpMemberDecorate %28 1 Offset 28 
                                                      OpMemberDecorate %28 2 RelaxedPrecision 
                                                      OpMemberDecorate %28 2 Offset 28 
                                                      OpMemberDecorate %28 3 Offset 28 
                                                      OpMemberDecorate %28 4 Offset 28 
                                                      OpMemberDecorate %28 5 Offset 28 
                                                      OpMemberDecorate %28 6 Offset 28 
                                                      OpMemberDecorate %28 7 Offset 28 
                                                      OpMemberDecorate %28 8 Offset 28 
                                                      OpMemberDecorate %28 9 RelaxedPrecision 
                                                      OpMemberDecorate %28 9 Offset 28 
                                                      OpMemberDecorate %28 10 Offset 28 
                                                      OpMemberDecorate %28 11 Offset 28 
                                                      OpMemberDecorate %28 12 Offset 28 
                                                      OpMemberDecorate %28 13 Offset 28 
                                                      OpMemberDecorate %28 14 Offset 28 
                                                      OpMemberDecorate %28 15 RelaxedPrecision 
                                                      OpMemberDecorate %28 15 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %119 DescriptorSet 119 
                                                      OpDecorate %119 Binding 119 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %121 Location 121 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %220 Location 220 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %293 SpecId 293 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %411 Location 411 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %420 DescriptorSet 420 
                                                      OpDecorate %420 Binding 420 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %466 Location 466 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %472 Location 472 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %544 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %617 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %699 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeVector %6 3 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %7 %25 
                                              %27 = OpTypeArray %7 %25 
                                              %28 = OpTypeStruct %21 %7 %7 %7 %26 %7 %27 %21 %21 %7 %6 %6 %7 %6 %6 %6 
                                              %29 = OpTypePointer Uniform %28 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32_4; f32; f32; f32;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 12 
                                              %33 = OpTypePointer Uniform %7 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Private %6 
                                          u32 %52 = OpConstant 0 
                                          u32 %57 = OpConstant 2 
                                              %71 = OpTypeBool 
                                              %72 = OpTypePointer Private %71 
                                Private bool* %73 = OpVariable Private 
                                          i32 %76 = OpConstant 13 
                                              %77 = OpTypePointer Uniform %6 
                               Private f32_4* %81 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          f32 %86 = OpConstant 3.674022E-40 
                                        f32_3 %87 = OpConstantComposite %84 %85 %86 
                                              %90 = OpTypePointer Private %15 
                               Private f32_2* %91 = OpVariable Private 
                                          f32 %99 = OpConstant 3.674022E-40 
                                       f32_2 %100 = OpConstantComposite %99 %99 
                                Private f32* %102 = OpVariable Private 
                                         f32 %115 = OpConstant 3.674022E-40 
                                             %117 = OpTypePointer Private %21 
                              Private f32_3* %118 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %119 = OpVariable UniformConstant 
                                Input f32_2* %121 = OpVariable Input 
                              Private f32_2* %125 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                       f32_2 %127 = OpConstantComposite %126 %126 
                                         f32 %128 = OpConstant 3.674022E-40 
                                       f32_2 %129 = OpConstantComposite %99 %128 
                                             %131 = OpTypeVector %71 2 
                              Private f32_3* %135 = OpVariable Private 
                              Private f32_4* %141 = OpVariable Private 
                                         i32 %160 = OpConstant 11 
                                         i32 %182 = OpConstant 10 
                              Private f32_2* %189 = OpVariable Private 
                                         u32 %195 = OpConstant 3 
                                         i32 %198 = OpConstant 15 
                               Private bool* %204 = OpVariable Private 
                                         i32 %209 = OpConstant 0 
                                         i32 %210 = OpConstant 1 
                                         i32 %212 = OpConstant -1 
                              Private f32_4* %218 = OpVariable Private 
                                             %219 = OpTypePointer Input %21 
                                Input f32_3* %220 = OpVariable Input 
                                             %223 = OpTypePointer Uniform %21 
                              Private f32_3* %229 = OpVariable Private 
                                         i32 %230 = OpConstant 4 
                                         i32 %237 = OpConstant 2 
                                Private f32* %241 = OpVariable Private 
                                         i32 %247 = OpConstant 3 
                                Private f32* %255 = OpVariable Private 
                               Private bool* %282 = OpVariable Private 
                                         i32 %283 = OpConstant 5 
                                        bool %287 = OpConstantFalse 
                                        bool %293 = OpSpecConstantFalse 
                               Private bool* %296 = OpVariable Private 
                                         i32 %302 = OpConstant 6 
                                             %339 = OpTypePointer Function %21 
                                         i32 %353 = OpConstant 8 
                              Private f32_4* %360 = OpVariable Private 
                                         i32 %363 = OpConstant 7 
                                Private f32* %369 = OpVariable Private 
                                         f32 %372 = OpConstant 3.674022E-40 
                                         f32 %377 = OpConstant 3.674022E-40 
                                             %386 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %387 = OpTypeSampledImage %386 
                                             %388 = OpTypePointer UniformConstant %387 
 UniformConstant read_only Texture3DSampled* %389 = OpVariable UniformConstant 
                              Private f32_3* %400 = OpVariable Private 
                                             %410 = OpTypePointer Input %7 
                                Input f32_4* %411 = OpVariable Input 
                                Private f32* %419 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %420 = OpVariable UniformConstant 
                              Private f32_3* %426 = OpVariable Private 
                                             %441 = OpTypePointer Function %6 
                                         i32 %455 = OpConstant 9 
                                Input f32_3* %466 = OpVariable Input 
                                             %471 = OpTypePointer Output %7 
                               Output f32_4* %472 = OpVariable Output 
                                             %475 = OpTypePointer Output %6 
                               Private bool* %484 = OpVariable Private 
                                Private f32* %490 = OpVariable Private 
                              Private f32_2* %497 = OpVariable Private 
                                         f32 %505 = OpConstant 3.674022E-40 
                                         f32 %521 = OpConstant 3.674022E-40 
                                       f32_2 %522 = OpConstantComposite %505 %521 
                                Private f32* %593 = OpVariable Private 
                                         f32 %596 = OpConstant 3.674022E-40 
                                         f32 %598 = OpConstant 3.674022E-40 
                                Private f32* %625 = OpVariable Private 
                              Private f32_3* %632 = OpVariable Private 
                               Private bool* %640 = OpVariable Private 
                                Private f32* %646 = OpVariable Private 
                              Private f32_3* %653 = OpVariable Private 
                                         i32 %671 = OpConstant 14 
                                Private f32* %682 = OpVariable Private 
                                         f32 %696 = OpConstant 3.674022E-40 
                                         f32 %703 = OpConstant 3.674022E-40 
                                       f32_3 %704 = OpConstantComposite %99 %521 %703 
                                       f32_3 %709 = OpConstantComposite %596 %596 %596 
                                         f32 %711 = OpConstant 3.674022E-40 
                                       f32_3 %712 = OpConstantComposite %711 %711 %711 
                                       f32_3 %716 = OpConstantComposite %505 %505 %505 
                                       f32_3 %728 = OpConstantComposite %99 %99 %99 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %340 = OpVariable Function 
                               Function f32* %442 = OpVariable Function 
                               Function f32* %491 = OpVariable Function 
                               Function f32* %531 = OpVariable Function 
                               Function f32* %619 = OpVariable Function 
                               Function f32* %647 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %22 = OpLoad %9 
                                        f32_3 %23 = OpVectorShuffle %22 %22 0 1 2 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFNegate %36 
                                        f32_3 %38 = OpFAdd %23 %37 
                                        f32_4 %39 = OpLoad %20 
                                        f32_4 %40 = OpVectorShuffle %39 %38 4 5 6 3 
                                                      OpStore %20 %40 
                                        f32_4 %41 = OpLoad %20 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpLoad %20 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_2 %45 = OpFMul %42 %44 
                                        f32_4 %46 = OpLoad %20 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 2 3 
                                                      OpStore %20 %47 
                                 Private f32* %50 = OpAccessChain %20 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %53 = OpAccessChain %20 %52 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFAdd %51 %54 
                                 Private f32* %56 = OpAccessChain %20 %52 
                                                      OpStore %56 %55 
                                 Private f32* %58 = OpAccessChain %20 %57 
                                          f32 %59 = OpLoad %58 
                                 Private f32* %60 = OpAccessChain %20 %57 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFMul %59 %61 
                                 Private f32* %63 = OpAccessChain %20 %52 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %62 %64 
                                 Private f32* %66 = OpAccessChain %20 %52 
                                                      OpStore %66 %65 
                                 Private f32* %67 = OpAccessChain %20 %52 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpExtInst %1 31 %68 
                                 Private f32* %70 = OpAccessChain %20 %52 
                                                      OpStore %70 %69 
                                 Private f32* %74 = OpAccessChain %20 %52 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %78 = OpAccessChain %30 %76 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %75 %79 
                                                      OpStore %73 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                          f32 %88 = OpDot %83 %87 
                                 Private f32* %89 = OpAccessChain %81 %52 
                                                      OpStore %89 %88 
                                        f32_4 %92 = OpLoad %9 
                                        f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                                        f32_4 %94 = OpLoad %81 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 0 
                                        f32_2 %96 = OpFNegate %95 
                                        f32_2 %97 = OpFAdd %93 %96 
                                                      OpStore %91 %97 
                                        f32_2 %98 = OpLoad %91 
                                       f32_2 %101 = OpFAdd %98 %100 
                                                      OpStore %91 %101 
                                Private f32* %103 = OpAccessChain %91 %52 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFNegate %104 
                                         f32 %106 = OpFMul %105 %84 
                                         f32 %107 = OpFAdd %106 %99 
                                                      OpStore %102 %107 
                                Private f32* %108 = OpAccessChain %91 %48 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFMul %110 %86 
                                         f32 %112 = OpLoad %102 
                                         f32 %113 = OpFAdd %111 %112 
                                                      OpStore %102 %113 
                                         f32 %114 = OpLoad %102 
                                         f32 %116 = OpFMul %114 %115 
                                                      OpStore %102 %116 
                  read_only Texture2DSampled %120 = OpLoad %119 
                                       f32_2 %122 = OpLoad %121 
                                       f32_4 %123 = OpImageSampleImplicitLod %120 %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                                      OpStore %118 %124 
                                        bool %130 = OpLoad %73 
                                      bool_2 %132 = OpCompositeConstruct %130 %130 
                                       f32_2 %133 = OpSelect %132 %100 %127 
                                       f32_2 %134 = OpExtInst %1 46 %127 %129 %133 
                                                      OpStore %125 %134 
                                       f32_4 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFNegate %137 
                                       f32_3 %139 = OpLoad %118 
                                       f32_3 %140 = OpFAdd %138 %139 
                                                      OpStore %135 %140 
                                       f32_2 %142 = OpLoad %125 
                                       f32_3 %143 = OpVectorShuffle %142 %142 1 1 1 
                                       f32_3 %144 = OpLoad %135 
                                       f32_3 %145 = OpFMul %143 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %141 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %141 %150 
                                       f32_2 %151 = OpLoad %91 
                                       f32_2 %152 = OpExtInst %1 30 %151 
                                       f32_4 %153 = OpLoad %20 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 1 5 3 
                                                      OpStore %20 %154 
                                         f32 %155 = OpLoad %102 
                                         f32 %156 = OpExtInst %1 30 %155 
                                Private f32* %157 = OpAccessChain %20 %48 
                                                      OpStore %157 %156 
                                       f32_4 %158 = OpLoad %20 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                Uniform f32* %161 = OpAccessChain %30 %160 
                                         f32 %162 = OpLoad %161 
                                Uniform f32* %163 = OpAccessChain %30 %160 
                                         f32 %164 = OpLoad %163 
                                Uniform f32* %165 = OpAccessChain %30 %160 
                                         f32 %166 = OpLoad %165 
                                       f32_3 %167 = OpCompositeConstruct %162 %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                         f32 %169 = OpCompositeExtract %167 1 
                                         f32 %170 = OpCompositeExtract %167 2 
                                       f32_3 %171 = OpCompositeConstruct %168 %169 %170 
                                       f32_3 %172 = OpFMul %159 %171 
                                       f32_4 %173 = OpLoad %20 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
                                                      OpStore %20 %174 
                                       f32_4 %175 = OpLoad %20 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpExtInst %1 29 %176 
                                       f32_4 %178 = OpLoad %20 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 6 3 
                                                      OpStore %20 %179 
                                       f32_4 %180 = OpLoad %20 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                Uniform f32* %183 = OpAccessChain %30 %182 
                                         f32 %184 = OpLoad %183 
                                       f32_3 %185 = OpCompositeConstruct %184 %184 %184 
                                       f32_3 %186 = OpFMul %181 %185 
                                       f32_4 %187 = OpLoad %20 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %20 %188 
                                       f32_2 %190 = OpLoad %125 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 0 
                                       f32_4 %192 = OpLoad %20 
                                       f32_2 %193 = OpVectorShuffle %192 %192 0 1 
                                       f32_2 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                Private f32* %196 = OpAccessChain %9 %195 
                                         f32 %197 = OpLoad %196 
                                Uniform f32* %199 = OpAccessChain %30 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFNegate %200 
                                         f32 %202 = OpFAdd %197 %201 
                                Private f32* %203 = OpAccessChain %81 %52 
                                                      OpStore %203 %202 
                                Private f32* %205 = OpAccessChain %81 %52 
                                         f32 %206 = OpLoad %205 
                                        bool %207 = OpFOrdLessThan %206 %126 
                                                      OpStore %204 %207 
                                        bool %208 = OpLoad %204 
                                         i32 %211 = OpSelect %208 %210 %209 
                                         i32 %213 = OpIMul %211 %212 
                                        bool %214 = OpINotEqual %213 %209 
                                                      OpSelectionMerge %216 None 
                                                      OpBranchConditional %214 %215 %216 
                                             %215 = OpLabel 
                                                      OpKill
                                             %216 = OpLabel 
                                       f32_3 %221 = OpLoad %220 
                                       f32_3 %222 = OpFNegate %221 
                              Uniform f32_3* %224 = OpAccessChain %30 %209 
                                       f32_3 %225 = OpLoad %224 
                                       f32_3 %226 = OpFAdd %222 %225 
                                       f32_4 %227 = OpLoad %218 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 6 3 
                                                      OpStore %218 %228 
                                Uniform f32* %231 = OpAccessChain %30 %230 %209 %57 
                                         f32 %232 = OpLoad %231 
                                Private f32* %233 = OpAccessChain %229 %52 
                                                      OpStore %233 %232 
                                Uniform f32* %234 = OpAccessChain %30 %230 %210 %57 
                                         f32 %235 = OpLoad %234 
                                Private f32* %236 = OpAccessChain %229 %48 
                                                      OpStore %236 %235 
                                Uniform f32* %238 = OpAccessChain %30 %230 %237 %57 
                                         f32 %239 = OpLoad %238 
                                Private f32* %240 = OpAccessChain %229 %57 
                                                      OpStore %240 %239 
                                       f32_4 %242 = OpLoad %218 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpLoad %229 
                                         f32 %245 = OpDot %243 %244 
                                                      OpStore %241 %245 
                                       f32_3 %246 = OpLoad %220 
                              Uniform f32_4* %248 = OpAccessChain %30 %247 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpFNegate %250 
                                       f32_3 %252 = OpFAdd %246 %251 
                                       f32_4 %253 = OpLoad %218 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %218 %254 
                                       f32_4 %256 = OpLoad %218 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %218 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %255 %260 
                                         f32 %261 = OpLoad %255 
                                         f32 %262 = OpExtInst %1 31 %261 
                                                      OpStore %255 %262 
                                         f32 %263 = OpLoad %241 
                                         f32 %264 = OpFNegate %263 
                                         f32 %265 = OpLoad %255 
                                         f32 %266 = OpFAdd %264 %265 
                                                      OpStore %255 %266 
                                Uniform f32* %267 = OpAccessChain %30 %247 %195 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpLoad %255 
                                         f32 %270 = OpFMul %268 %269 
                                         f32 %271 = OpLoad %241 
                                         f32 %272 = OpFAdd %270 %271 
                                                      OpStore %241 %272 
                                         f32 %273 = OpLoad %241 
                                Uniform f32* %274 = OpAccessChain %30 %237 %57 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpFMul %273 %275 
                                Uniform f32* %277 = OpAccessChain %30 %237 %195 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFAdd %276 %278 
                                                      OpStore %241 %279 
                                         f32 %280 = OpLoad %241 
                                         f32 %281 = OpExtInst %1 43 %280 %126 %99 
                                                      OpStore %241 %281 
                                Uniform f32* %284 = OpAccessChain %30 %283 %52 
                                         f32 %285 = OpLoad %284 
                                        bool %286 = OpFOrdEqual %285 %99 
                                                      OpStore %282 %286 
                                                      OpSelectionMerge %289 None 
                                                      OpBranchConditional %287 %288 %289 
                                             %288 = OpLabel 
                                        bool %290 = OpLoad %282 
                                                      OpSelectionMerge %292 None 
                                                      OpBranchConditional %290 %291 %292 
                                             %291 = OpLabel 
                                                      OpBranch %292 
                                             %292 = OpLabel 
                                                      OpBranch %289 
                                             %289 = OpLabel 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %395 
                                             %294 = OpLabel 
                                Uniform f32* %297 = OpAccessChain %30 %283 %48 
                                         f32 %298 = OpLoad %297 
                                        bool %299 = OpFOrdEqual %298 %99 
                                                      OpStore %296 %299 
                                       f32_3 %300 = OpLoad %220 
                                       f32_3 %301 = OpVectorShuffle %300 %300 1 1 1 
                              Uniform f32_4* %303 = OpAccessChain %30 %302 %210 
                                       f32_4 %304 = OpLoad %303 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %306 = OpFMul %301 %305 
                                       f32_4 %307 = OpLoad %218 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
                                                      OpStore %218 %308 
                              Uniform f32_4* %309 = OpAccessChain %30 %302 %209 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpLoad %220 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 0 0 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_4 %315 = OpLoad %218 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %317 = OpFAdd %314 %316 
                                       f32_4 %318 = OpLoad %218 
                                       f32_4 %319 = OpVectorShuffle %318 %317 4 5 6 3 
                                                      OpStore %218 %319 
                              Uniform f32_4* %320 = OpAccessChain %30 %302 %237 
                                       f32_4 %321 = OpLoad %320 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_3 %323 = OpLoad %220 
                                       f32_3 %324 = OpVectorShuffle %323 %323 2 2 2 
                                       f32_3 %325 = OpFMul %322 %324 
                                       f32_4 %326 = OpLoad %218 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                       f32_3 %328 = OpFAdd %325 %327 
                                       f32_4 %329 = OpLoad %218 
                                       f32_4 %330 = OpVectorShuffle %329 %328 4 5 6 3 
                                                      OpStore %218 %330 
                                       f32_4 %331 = OpLoad %218 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 2 
                              Uniform f32_4* %333 = OpAccessChain %30 %302 %247 
                                       f32_4 %334 = OpLoad %333 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFAdd %332 %335 
                                       f32_4 %337 = OpLoad %218 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 6 3 
                                                      OpStore %218 %338 
                                        bool %341 = OpLoad %296 
                                                      OpSelectionMerge %343 None 
                                                      OpBranchConditional %341 %342 %346 
                                             %342 = OpLabel 
                                       f32_4 %344 = OpLoad %218 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                                      OpStore %340 %345 
                                                      OpBranch %343 
                                             %346 = OpLabel 
                                       f32_3 %347 = OpLoad %220 
                                                      OpStore %340 %347 
                                                      OpBranch %343 
                                             %343 = OpLabel 
                                       f32_3 %348 = OpLoad %340 
                                       f32_4 %349 = OpLoad %218 
                                       f32_4 %350 = OpVectorShuffle %349 %348 4 5 6 3 
                                                      OpStore %218 %350 
                                       f32_4 %351 = OpLoad %218 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                              Uniform f32_3* %354 = OpAccessChain %30 %353 
                                       f32_3 %355 = OpLoad %354 
                                       f32_3 %356 = OpFNegate %355 
                                       f32_3 %357 = OpFAdd %352 %356 
                                       f32_4 %358 = OpLoad %218 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %218 %359 
                                       f32_4 %361 = OpLoad %218 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                              Uniform f32_3* %364 = OpAccessChain %30 %363 
                                       f32_3 %365 = OpLoad %364 
                                       f32_3 %366 = OpFMul %362 %365 
                                       f32_4 %367 = OpLoad %360 
                                       f32_4 %368 = OpVectorShuffle %367 %366 0 4 5 6 
                                                      OpStore %360 %368 
                                Private f32* %370 = OpAccessChain %360 %48 
                                         f32 %371 = OpLoad %370 
                                         f32 %373 = OpFMul %371 %372 
                                         f32 %374 = OpFAdd %373 %128 
                                                      OpStore %369 %374 
                                Uniform f32* %375 = OpAccessChain %30 %283 %57 
                                         f32 %376 = OpLoad %375 
                                         f32 %378 = OpFMul %376 %377 
                                         f32 %379 = OpFAdd %378 %128 
                                Private f32* %380 = OpAccessChain %218 %52 
                                                      OpStore %380 %379 
                                         f32 %381 = OpLoad %369 
                                Private f32* %382 = OpAccessChain %218 %52 
                                         f32 %383 = OpLoad %382 
                                         f32 %384 = OpExtInst %1 40 %381 %383 
                                Private f32* %385 = OpAccessChain %360 %52 
                                                      OpStore %385 %384 
                  read_only Texture3DSampled %390 = OpLoad %389 
                                       f32_4 %391 = OpLoad %360 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 2 3 
                                       f32_4 %393 = OpImageSampleImplicitLod %390 %392 
                                                      OpStore %360 %393 
                                       f32_4 %394 = OpLoad %360 
                                                      OpStore %81 %394 
                                                      OpBranch %295 
                                             %395 = OpLabel 
                                Private f32* %396 = OpAccessChain %81 %52 
                                                      OpStore %396 %99 
                                Private f32* %397 = OpAccessChain %81 %48 
                                                      OpStore %397 %99 
                                Private f32* %398 = OpAccessChain %81 %57 
                                                      OpStore %398 %99 
                                Private f32* %399 = OpAccessChain %81 %195 
                                                      OpStore %399 %99 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                       f32_4 %401 = OpLoad %81 
                              Uniform f32_4* %402 = OpAccessChain %30 %210 
                                       f32_4 %403 = OpLoad %402 
                                         f32 %404 = OpDot %401 %403 
                                Private f32* %405 = OpAccessChain %400 %52 
                                                      OpStore %405 %404 
                                Private f32* %406 = OpAccessChain %400 %52 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpExtInst %1 43 %407 %126 %99 
                                Private f32* %409 = OpAccessChain %400 %52 
                                                      OpStore %409 %408 
                                       f32_4 %412 = OpLoad %411 
                                       f32_2 %413 = OpVectorShuffle %412 %412 0 1 
                                       f32_4 %414 = OpLoad %411 
                                       f32_2 %415 = OpVectorShuffle %414 %414 3 3 
                                       f32_2 %416 = OpFDiv %413 %415 
                                       f32_4 %417 = OpLoad %218 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 2 3 
                                                      OpStore %218 %418 
                  read_only Texture2DSampled %421 = OpLoad %420 
                                       f32_4 %422 = OpLoad %218 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_4 %424 = OpImageSampleImplicitLod %421 %423 
                                         f32 %425 = OpCompositeExtract %424 0 
                                                      OpStore %419 %425 
                                         f32 %427 = OpLoad %241 
                                         f32 %428 = OpLoad %419 
                                         f32 %429 = OpFAdd %427 %428 
                                Private f32* %430 = OpAccessChain %426 %52 
                                                      OpStore %430 %429 
                                Private f32* %431 = OpAccessChain %426 %52 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpExtInst %1 43 %432 %126 %99 
                                Private f32* %434 = OpAccessChain %426 %52 
                                                      OpStore %434 %433 
                                Private f32* %435 = OpAccessChain %426 %52 
                                         f32 %436 = OpLoad %435 
                                Private f32* %437 = OpAccessChain %400 %52 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpExtInst %1 37 %436 %438 
                                Private f32* %440 = OpAccessChain %400 %52 
                                                      OpStore %440 %439 
                                        bool %443 = OpLoad %282 
                                                      OpSelectionMerge %445 None 
                                                      OpBranchConditional %443 %444 %448 
                                             %444 = OpLabel 
                                Private f32* %446 = OpAccessChain %400 %52 
                                         f32 %447 = OpLoad %446 
                                                      OpStore %442 %447 
                                                      OpBranch %445 
                                             %448 = OpLabel 
                                Private f32* %449 = OpAccessChain %426 %52 
                                         f32 %450 = OpLoad %449 
                                                      OpStore %442 %450 
                                                      OpBranch %445 
                                             %445 = OpLabel 
                                         f32 %451 = OpLoad %442 
                                Private f32* %452 = OpAccessChain %400 %52 
                                                      OpStore %452 %451 
                                       f32_4 %453 = OpLoad %141 
                                       f32_3 %454 = OpVectorShuffle %453 %453 0 1 2 
                              Uniform f32_4* %456 = OpAccessChain %30 %455 
                                       f32_4 %457 = OpLoad %456 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                                       f32_3 %459 = OpFMul %454 %458 
                                                      OpStore %426 %459 
                                       f32_3 %460 = OpLoad %400 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpLoad %426 
                                       f32_3 %463 = OpFMul %461 %462 
                                                      OpStore %400 %463 
                                       f32_4 %464 = OpLoad %141 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_3 %467 = OpLoad %466 
                                       f32_3 %468 = OpFMul %465 %467 
                                       f32_3 %469 = OpLoad %400 
                                       f32_3 %470 = OpFAdd %468 %469 
                                                      OpStore %400 %470 
                                Private f32* %473 = OpAccessChain %9 %195 
                                         f32 %474 = OpLoad %473 
                                 Output f32* %476 = OpAccessChain %472 %195 
                                                      OpStore %476 %474 
                                       f32_4 %477 = OpLoad %20 
                                       f32_3 %478 = OpVectorShuffle %477 %477 0 1 2 
                                       f32_2 %479 = OpLoad %125 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 0 0 
                                       f32_3 %481 = OpFMul %478 %480 
                                       f32_3 %482 = OpLoad %400 
                                       f32_3 %483 = OpFAdd %481 %482 
                                                      OpStore %400 %483 
                                Private f32* %485 = OpAccessChain %400 %48 
                                         f32 %486 = OpLoad %485 
                                Private f32* %487 = OpAccessChain %400 %57 
                                         f32 %488 = OpLoad %487 
                                        bool %489 = OpFOrdGreaterThanEqual %486 %488 
                                                      OpStore %484 %489 
                                        bool %492 = OpLoad %484 
                                                      OpSelectionMerge %494 None 
                                                      OpBranchConditional %492 %493 %495 
                                             %493 = OpLabel 
                                                      OpStore %491 %99 
                                                      OpBranch %494 
                                             %495 = OpLabel 
                                                      OpStore %491 %126 
                                                      OpBranch %494 
                                             %494 = OpLabel 
                                         f32 %496 = OpLoad %491 
                                                      OpStore %490 %496 
                                       f32_3 %498 = OpLoad %400 
                                       f32_2 %499 = OpVectorShuffle %498 %498 2 1 
                                       f32_2 %500 = OpFNegate %499 
                                       f32_3 %501 = OpLoad %400 
                                       f32_2 %502 = OpVectorShuffle %501 %501 1 2 
                                       f32_2 %503 = OpFAdd %500 %502 
                                                      OpStore %497 %503 
                                Private f32* %504 = OpAccessChain %141 %52 
                                                      OpStore %504 %99 
                                Private f32* %506 = OpAccessChain %141 %48 
                                                      OpStore %506 %505 
                                         f32 %507 = OpLoad %490 
                                       f32_2 %508 = OpCompositeConstruct %507 %507 
                                       f32_2 %509 = OpLoad %497 
                                       f32_2 %510 = OpFMul %508 %509 
                                       f32_3 %511 = OpLoad %400 
                                       f32_2 %512 = OpVectorShuffle %511 %511 2 1 
                                       f32_2 %513 = OpFAdd %510 %512 
                                       f32_4 %514 = OpLoad %360 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 5 2 3 
                                                      OpStore %360 %515 
                                         f32 %516 = OpLoad %490 
                                       f32_2 %517 = OpCompositeConstruct %516 %516 
                                       f32_4 %518 = OpLoad %141 
                                       f32_2 %519 = OpVectorShuffle %518 %518 0 1 
                                       f32_2 %520 = OpFMul %517 %519 
                                       f32_2 %523 = OpFAdd %520 %522 
                                       f32_4 %524 = OpLoad %360 
                                       f32_4 %525 = OpVectorShuffle %524 %523 0 1 4 5 
                                                      OpStore %360 %525 
                                Private f32* %526 = OpAccessChain %400 %52 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %360 %52 
                                         f32 %529 = OpLoad %528 
                                        bool %530 = OpFOrdGreaterThanEqual %527 %529 
                                                      OpStore %484 %530 
                                        bool %532 = OpLoad %484 
                                                      OpSelectionMerge %534 None 
                                                      OpBranchConditional %532 %533 %535 
                                             %533 = OpLabel 
                                                      OpStore %531 %99 
                                                      OpBranch %534 
                                             %535 = OpLabel 
                                                      OpStore %531 %126 
                                                      OpBranch %534 
                                             %534 = OpLabel 
                                         f32 %536 = OpLoad %531 
                                                      OpStore %490 %536 
                                       f32_4 %537 = OpLoad %360 
                                       f32_3 %538 = OpVectorShuffle %537 %537 0 1 3 
                                       f32_3 %539 = OpFNegate %538 
                                       f32_4 %540 = OpLoad %141 
                                       f32_4 %541 = OpVectorShuffle %540 %539 4 5 6 3 
                                                      OpStore %141 %541 
                                Private f32* %542 = OpAccessChain %400 %52 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFNegate %543 
                                Private f32* %545 = OpAccessChain %141 %195 
                                                      OpStore %545 %544 
                                Private f32* %546 = OpAccessChain %141 %52 
                                         f32 %547 = OpLoad %546 
                                Private f32* %548 = OpAccessChain %400 %52 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %547 %549 
                                Private f32* %551 = OpAccessChain %218 %52 
                                                      OpStore %551 %550 
                                       f32_4 %552 = OpLoad %360 
                                       f32_3 %553 = OpVectorShuffle %552 %552 1 2 0 
                                       f32_4 %554 = OpLoad %141 
                                       f32_3 %555 = OpVectorShuffle %554 %554 1 2 3 
                                       f32_3 %556 = OpFAdd %553 %555 
                                       f32_4 %557 = OpLoad %218 
                                       f32_4 %558 = OpVectorShuffle %557 %556 0 4 5 6 
                                                      OpStore %218 %558 
                                         f32 %559 = OpLoad %490 
                                       f32_3 %560 = OpCompositeConstruct %559 %559 %559 
                                       f32_4 %561 = OpLoad %218 
                                       f32_3 %562 = OpVectorShuffle %561 %561 0 1 2 
                                       f32_3 %563 = OpFMul %560 %562 
                                       f32_4 %564 = OpLoad %360 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 3 
                                       f32_3 %566 = OpFAdd %563 %565 
                                       f32_4 %567 = OpLoad %20 
                                       f32_4 %568 = OpVectorShuffle %567 %566 4 5 2 6 
                                                      OpStore %20 %568 
                                         f32 %569 = OpLoad %490 
                                Private f32* %570 = OpAccessChain %218 %195 
                                         f32 %571 = OpLoad %570 
                                         f32 %572 = OpFMul %569 %571 
                                Private f32* %573 = OpAccessChain %400 %52 
                                         f32 %574 = OpLoad %573 
                                         f32 %575 = OpFAdd %572 %574 
                                                      OpStore %490 %575 
                                Private f32* %576 = OpAccessChain %20 %48 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpLoad %490 
                                         f32 %579 = OpExtInst %1 37 %577 %578 
                                Private f32* %580 = OpAccessChain %141 %52 
                                                      OpStore %580 %579 
                                Private f32* %581 = OpAccessChain %20 %52 
                                         f32 %582 = OpLoad %581 
                                Private f32* %583 = OpAccessChain %141 %52 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFNegate %584 
                                         f32 %586 = OpFAdd %582 %585 
                                Private f32* %587 = OpAccessChain %141 %52 
                                                      OpStore %587 %586 
                                Private f32* %588 = OpAccessChain %20 %48 
                                         f32 %589 = OpLoad %588 
                                         f32 %590 = OpFNegate %589 
                                         f32 %591 = OpLoad %490 
                                         f32 %592 = OpFAdd %590 %591 
                                                      OpStore %490 %592 
                                Private f32* %594 = OpAccessChain %141 %52 
                                         f32 %595 = OpLoad %594 
                                         f32 %597 = OpFMul %595 %596 
                                         f32 %599 = OpFAdd %597 %598 
                                                      OpStore %593 %599 
                                         f32 %600 = OpLoad %490 
                                         f32 %601 = OpLoad %593 
                                         f32 %602 = OpFDiv %600 %601 
                                                      OpStore %490 %602 
                                         f32 %603 = OpLoad %490 
                                Private f32* %604 = OpAccessChain %20 %195 
                                         f32 %605 = OpLoad %604 
                                         f32 %606 = OpFAdd %603 %605 
                                                      OpStore %490 %606 
                                Private f32* %607 = OpAccessChain %20 %52 
                                         f32 %608 = OpLoad %607 
                                         f32 %609 = OpFAdd %608 %598 
                                                      OpStore %593 %609 
                                Private f32* %610 = OpAccessChain %141 %52 
                                         f32 %611 = OpLoad %610 
                                         f32 %612 = OpLoad %593 
                                         f32 %613 = OpFDiv %611 %612 
                                                      OpStore %593 %613 
                                Private f32* %614 = OpAccessChain %9 %48 
                                         f32 %615 = OpLoad %614 
                                Private f32* %616 = OpAccessChain %9 %57 
                                         f32 %617 = OpLoad %616 
                                        bool %618 = OpFOrdGreaterThanEqual %615 %617 
                                                      OpStore %204 %618 
                                        bool %620 = OpLoad %204 
                                                      OpSelectionMerge %622 None 
                                                      OpBranchConditional %620 %621 %623 
                                             %621 = OpLabel 
                                                      OpStore %619 %99 
                                                      OpBranch %622 
                                             %623 = OpLabel 
                                                      OpStore %619 %126 
                                                      OpBranch %622 
                                             %622 = OpLabel 
                                         f32 %624 = OpLoad %619 
                                                      OpStore %241 %624 
                                Private f32* %626 = OpAccessChain %9 %57 
                                         f32 %627 = OpLoad %626 
                                         f32 %628 = OpFNegate %627 
                                Private f32* %629 = OpAccessChain %9 %48 
                                         f32 %630 = OpLoad %629 
                                         f32 %631 = OpFAdd %628 %630 
                                                      OpStore %625 %631 
                                         f32 %633 = OpLoad %241 
                                         f32 %634 = OpLoad %625 
                                         f32 %635 = OpFMul %633 %634 
                                Private f32* %636 = OpAccessChain %9 %57 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpFAdd %635 %637 
                                Private f32* %639 = OpAccessChain %632 %52 
                                                      OpStore %639 %638 
                                Private f32* %641 = OpAccessChain %9 %52 
                                         f32 %642 = OpLoad %641 
                                Private f32* %643 = OpAccessChain %632 %52 
                                         f32 %644 = OpLoad %643 
                                        bool %645 = OpFOrdGreaterThanEqual %642 %644 
                                                      OpStore %640 %645 
                                        bool %648 = OpLoad %640 
                                                      OpSelectionMerge %650 None 
                                                      OpBranchConditional %648 %649 %651 
                                             %649 = OpLabel 
                                                      OpStore %647 %99 
                                                      OpBranch %650 
                                             %651 = OpLabel 
                                                      OpStore %647 %126 
                                                      OpBranch %650 
                                             %650 = OpLabel 
                                         f32 %652 = OpLoad %647 
                                                      OpStore %646 %652 
                                Private f32* %654 = OpAccessChain %632 %52 
                                         f32 %655 = OpLoad %654 
                                         f32 %656 = OpFNegate %655 
                                Private f32* %657 = OpAccessChain %9 %52 
                                         f32 %658 = OpLoad %657 
                                         f32 %659 = OpFAdd %656 %658 
                                Private f32* %660 = OpAccessChain %653 %52 
                                                      OpStore %660 %659 
                                         f32 %661 = OpLoad %646 
                                Private f32* %662 = OpAccessChain %653 %52 
                                         f32 %663 = OpLoad %662 
                                         f32 %664 = OpFMul %661 %663 
                                Private f32* %665 = OpAccessChain %632 %52 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpFAdd %664 %666 
                                Private f32* %668 = OpAccessChain %653 %52 
                                                      OpStore %668 %667 
                                Private f32* %669 = OpAccessChain %653 %52 
                                         f32 %670 = OpLoad %669 
                                Uniform f32* %672 = OpAccessChain %30 %671 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFMul %670 %673 
                                Private f32* %675 = OpAccessChain %653 %52 
                                                      OpStore %675 %674 
                                Private f32* %676 = OpAccessChain %653 %52 
                                         f32 %677 = OpLoad %676 
                                Private f32* %678 = OpAccessChain %20 %52 
                                         f32 %679 = OpLoad %678 
                                         f32 %680 = OpExtInst %1 37 %677 %679 
                                Private f32* %681 = OpAccessChain %653 %52 
                                                      OpStore %681 %680 
                                Private f32* %683 = OpAccessChain %189 %48 
                                         f32 %684 = OpLoad %683 
                                Private f32* %685 = OpAccessChain %189 %52 
                                         f32 %686 = OpLoad %685 
                                         f32 %687 = OpFAdd %684 %686 
                                                      OpStore %682 %687 
                                Private f32* %688 = OpAccessChain %20 %57 
                                         f32 %689 = OpLoad %688 
                                Private f32* %690 = OpAccessChain %125 %52 
                                         f32 %691 = OpLoad %690 
                                         f32 %692 = OpFMul %689 %691 
                                         f32 %693 = OpLoad %682 
                                         f32 %694 = OpFAdd %692 %693 
                                                      OpStore %682 %694 
                                         f32 %695 = OpLoad %682 
                                         f32 %697 = OpFMul %695 %696 
                                                      OpStore %682 %697 
                                         f32 %698 = OpLoad %682 
                                         f32 %699 = OpExtInst %1 43 %698 %126 %99 
                                                      OpStore %682 %699 
                                         f32 %700 = OpLoad %490 
                                       f32_3 %701 = OpCompositeConstruct %700 %700 %700 
                                       f32_3 %702 = OpExtInst %1 4 %701 
                                       f32_3 %705 = OpFAdd %702 %704 
                                                      OpStore %632 %705 
                                       f32_3 %706 = OpLoad %632 
                                       f32_3 %707 = OpExtInst %1 10 %706 
                                                      OpStore %632 %707 
                                       f32_3 %708 = OpLoad %632 
                                       f32_3 %710 = OpFMul %708 %709 
                                       f32_3 %713 = OpFAdd %710 %712 
                                                      OpStore %632 %713 
                                       f32_3 %714 = OpLoad %632 
                                       f32_3 %715 = OpExtInst %1 4 %714 
                                       f32_3 %717 = OpFAdd %715 %716 
                                                      OpStore %632 %717 
                                       f32_3 %718 = OpLoad %632 
                                       f32_3 %719 = OpCompositeConstruct %126 %126 %126 
                                       f32_3 %720 = OpCompositeConstruct %99 %99 %99 
                                       f32_3 %721 = OpExtInst %1 43 %718 %719 %720 
                                                      OpStore %632 %721 
                                       f32_3 %722 = OpLoad %632 
                                       f32_3 %723 = OpFAdd %722 %716 
                                                      OpStore %632 %723 
                                         f32 %724 = OpLoad %593 
                                       f32_3 %725 = OpCompositeConstruct %724 %724 %724 
                                       f32_3 %726 = OpLoad %632 
                                       f32_3 %727 = OpFMul %725 %726 
                                       f32_3 %729 = OpFAdd %727 %728 
                                                      OpStore %632 %729 
                                       f32_3 %730 = OpLoad %632 
                                       f32_3 %731 = OpLoad %653 
                                       f32_3 %732 = OpVectorShuffle %731 %731 0 0 0 
                                       f32_3 %733 = OpFMul %730 %732 
                                       f32_4 %734 = OpLoad %20 
                                       f32_4 %735 = OpVectorShuffle %734 %733 4 5 6 3 
                                                      OpStore %20 %735 
                                       f32_3 %736 = OpLoad %653 
                                       f32_3 %737 = OpVectorShuffle %736 %736 0 0 0 
                                       f32_3 %738 = OpFNegate %737 
                                       f32_3 %739 = OpLoad %632 
                                       f32_3 %740 = OpFMul %738 %739 
                                       f32_3 %741 = OpLoad %400 
                                       f32_3 %742 = OpFAdd %740 %741 
                                                      OpStore %653 %742 
                                         f32 %743 = OpLoad %682 
                                       f32_3 %744 = OpCompositeConstruct %743 %743 %743 
                                       f32_3 %745 = OpLoad %653 
                                       f32_3 %746 = OpFMul %744 %745 
                                       f32_4 %747 = OpLoad %20 
                                       f32_3 %748 = OpVectorShuffle %747 %747 0 1 2 
                                       f32_3 %749 = OpFAdd %746 %748 
                                                      OpStore %653 %749 
                                       f32_3 %750 = OpLoad %653 
                                       f32_4 %751 = OpLoad %472 
                                       f32_4 %752 = OpVectorShuffle %751 %750 4 5 6 3 
                                                      OpStore %472 %752 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat2.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat1.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	vec4 _EmissiveColor;
uniform 	float _EmissiveThresholdSensitivity;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ParallaxTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat16_2;
vec4 u_xlat10_2;
vec2 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
float u_xlat16_7;
float u_xlat8;
vec2 u_xlat16_8;
bool u_xlatb8;
vec2 u_xlat10;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
float u_xlat16_22;
bool u_xlatb22;
float u_xlat23;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz + (-_EmissiveColor.xyz);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y + u_xlat1.x;
    u_xlat1.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb1 = u_xlat1.x<_EmissiveThresholdSensitivity;
    u_xlat16_8.x = dot(u_xlat10_0.xyz, vec3(0.298900008, 0.586600006, 0.114500001));
    u_xlat16_8.xy = u_xlat10_0.xz + (-u_xlat16_8.xx);
    u_xlat16_8.xy = u_xlat16_8.xy * vec2(1.0, 1.0) + vec2(1.0, 1.0);
    u_xlat16_22 = (-u_xlat16_8.x) * 0.298900008 + 1.0;
    u_xlat16_22 = (-u_xlat16_8.y) * 0.114500001 + u_xlat16_22;
    u_xlat16_22 = u_xlat16_22 * 1.70473921;
    u_xlat10_2 = texture(_ParallaxTex, vs_TEXCOORD4.xy);
    u_xlat3.xy = mix(vec2(0.0, 0.0), vec2(1.0, 0.75), vec2(bvec2(u_xlatb1)));
    u_xlat16_2.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
    u_xlat2.xyz = u_xlat3.yyy * u_xlat16_2.xyz + u_xlat10_0.xyz;
    u_xlat1.xz = log2(u_xlat16_8.xy);
    u_xlat1.y = log2(u_xlat16_22);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10.xy = u_xlat3.xx * u_xlat1.xy;
    u_xlat22 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb22 = u_xlat22<0.0;
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb22){
        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat22 = u_xlat4.y * 0.25 + 0.75;
        u_xlat23 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat22, u_xlat23);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat22 = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat4.xyz = u_xlat2.xyz * vs_TEXCOORD5.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat4.w = 0.0;
    u_xlat2.w = u_xlat10_0.w;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat4.xyz = u_xlat1.zyx * u_xlat3.xxx + u_xlat2.zyx;
    u_xlatb21 = u_xlat4.y>=u_xlat4.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat4.w = 0.666666687;
    u_xlat1.xy = (-u_xlat4.xy) + u_xlat4.yx;
    u_xlat1.w = -1.0;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat4.xyw;
    u_xlatb21 = u_xlat4.z>=u_xlat5.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat5.w = u_xlat4.z;
    u_xlat6.xyw = u_xlat5.wyx;
    u_xlat6.z = -1.0;
    u_xlat6 = (-u_xlat5) + u_xlat6;
    u_xlat5 = vec4(u_xlat21) * u_xlat6 + u_xlat5;
    u_xlat21 = min(u_xlat5.y, u_xlat5.w);
    u_xlat21 = (-u_xlat21) + u_xlat5.x;
    u_xlat1.x = (-u_xlat5.y) + u_xlat5.w;
    u_xlat8 = u_xlat21 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat8;
    u_xlat1.x = u_xlat1.x + u_xlat5.z;
    u_xlat8 = u_xlat5.x + 1.00000001e-010;
    u_xlat21 = u_xlat21 / u_xlat8;
    u_xlatb8 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat16_7 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat7 = u_xlat8 * u_xlat16_7 + u_xlat10_0.z;
    u_xlatb14 = u_xlat10_0.x>=u_xlat7;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = (-u_xlat7) + u_xlat10_0.x;
    u_xlat0.x = u_xlat14 * u_xlat0.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _MaxValue;
    u_xlat0.x = min(u_xlat0.x, u_xlat5.x);
    u_xlat7 = u_xlat10.y + u_xlat10.x;
    u_xlat7 = u_xlat1.z * u_xlat3.x + u_xlat7;
    u_xlat7 = u_xlat7 * 10.0;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xzw = (-u_xlat0.xxx) * u_xlat1.xyz + u_xlat4.zyx;
    SV_Target0.xyz = vec3(u_xlat7) * u_xlat0.xzw + u_xlat2.xyz;
    SV_Target0.w = u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 350
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %157 %166 %167 %180 %219 %222 %225 %340 %343 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %167 Location 167 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate %219 Location 219 
                                                      OpDecorate %222 Location 222 
                                                      OpDecorate %225 Location 225 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %340 Location 340 
                                                      OpDecorate %343 Location 343 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 5 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 7 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                                             %100 = OpTypeVector %6 2 
                                         f32 %144 = OpConstant 3.674022E-40 
                                       f32_2 %145 = OpConstantComposite %144 %144 
                                         f32 %151 = OpConstant 3.674022E-40 
                                       f32_2 %152 = OpConstantComposite %151 %151 
                                             %156 = OpTypePointer Output %100 
                               Output f32_2* %157 = OpVariable Output 
                                         f32 %160 = OpConstant 3.674022E-40 
                                       f32_2 %161 = OpConstantComposite %144 %160 
                                         f32 %163 = OpConstant 3.674022E-40 
                                       f32_2 %164 = OpConstantComposite %163 %144 
                               Output f32_2* %166 = OpVariable Output 
                                Input f32_4* %167 = OpVariable Input 
                                         i32 %170 = OpConstant 8 
                                             %179 = OpTypePointer Input %53 
                                Input f32_3* %180 = OpVariable Input 
                                         i32 %182 = OpConstant 6 
                                         u32 %187 = OpConstant 0 
                                             %188 = OpTypePointer Private %6 
                                         u32 %201 = OpConstant 2 
                                Private f32* %203 = OpVariable Private 
                                             %218 = OpTypePointer Output %53 
                               Output f32_3* %219 = OpVariable Output 
                               Output f32_3* %222 = OpVariable Output 
                               Output f32_4* %225 = OpVariable Output 
                                       f32_4 %226 = OpConstantComposite %163 %163 %163 %163 
                              Private f32_4* %233 = OpVariable Private 
                              Private f32_4* %241 = OpVariable Private 
                                         f32 %277 = OpConstant 3.674022E-40 
                                       f32_4 %278 = OpConstantComposite %277 %277 %277 %277 
                                       f32_4 %286 = OpConstantComposite %144 %144 %144 %144 
                                         i32 %300 = OpConstant 4 
                               Output f32_3* %340 = OpVariable Output 
                               Output f32_4* %343 = OpVariable Output 
                                             %344 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %101 = OpLoad %47 
                                       f32_2 %102 = OpVectorShuffle %101 %101 1 1 
                              Uniform f32_4* %103 = OpAccessChain %23 %68 %26 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %102 %105 
                                       f32_4 %107 = OpLoad %65 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 2 3 
                                                      OpStore %65 %108 
                              Uniform f32_4* %109 = OpAccessChain %23 %68 %31 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_4 %112 = OpLoad %47 
                                       f32_2 %113 = OpVectorShuffle %112 %112 0 0 
                                       f32_2 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %65 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_2 %117 = OpFAdd %114 %116 
                                       f32_4 %118 = OpLoad %47 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 3 
                                                      OpStore %47 %119 
                              Uniform f32_4* %120 = OpAccessChain %23 %68 %39 
                                       f32_4 %121 = OpLoad %120 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_4 %123 = OpLoad %47 
                                       f32_2 %124 = OpVectorShuffle %123 %123 2 2 
                                       f32_2 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %47 
                                       f32_2 %127 = OpVectorShuffle %126 %126 0 1 
                                       f32_2 %128 = OpFAdd %125 %127 
                                       f32_4 %129 = OpLoad %47 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 2 3 
                                                      OpStore %47 %130 
                              Uniform f32_4* %131 = OpAccessChain %23 %68 %49 
                                       f32_4 %132 = OpLoad %131 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_4 %134 = OpLoad %47 
                                       f32_2 %135 = OpVectorShuffle %134 %134 3 3 
                                       f32_2 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %47 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFAdd %136 %138 
                                       f32_4 %140 = OpLoad %47 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 2 3 
                                                      OpStore %47 %141 
                                       f32_4 %142 = OpLoad %47 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                                       f32_2 %146 = OpFAdd %143 %145 
                                       f32_4 %147 = OpLoad %47 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 2 3 
                                                      OpStore %47 %148 
                                       f32_4 %149 = OpLoad %47 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_2 %153 = OpFMul %150 %152 
                                       f32_4 %154 = OpLoad %47 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 2 3 
                                                      OpStore %47 %155 
                                       f32_4 %158 = OpLoad %47 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                                       f32_2 %162 = OpFMul %159 %161 
                                       f32_2 %165 = OpFAdd %162 %164 
                                                      OpStore %157 %165 
                                       f32_4 %168 = OpLoad %167 
                                       f32_2 %169 = OpVectorShuffle %168 %168 0 1 
                              Uniform f32_4* %171 = OpAccessChain %23 %170 
                                       f32_4 %172 = OpLoad %171 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                                       f32_2 %174 = OpFMul %169 %173 
                              Uniform f32_4* %175 = OpAccessChain %23 %170 
                                       f32_4 %176 = OpLoad %175 
                                       f32_2 %177 = OpVectorShuffle %176 %176 2 3 
                                       f32_2 %178 = OpFAdd %174 %177 
                                                      OpStore %166 %178 
                                       f32_3 %181 = OpLoad %180 
                              Uniform f32_4* %183 = OpAccessChain %23 %182 %31 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %181 %185 
                                Private f32* %189 = OpAccessChain %47 %187 
                                                      OpStore %189 %186 
                                       f32_3 %190 = OpLoad %180 
                              Uniform f32_4* %191 = OpAccessChain %23 %182 %26 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %190 %193 
                                Private f32* %195 = OpAccessChain %47 %86 
                                                      OpStore %195 %194 
                                       f32_3 %196 = OpLoad %180 
                              Uniform f32_4* %197 = OpAccessChain %23 %182 %39 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                         f32 %200 = OpDot %196 %199 
                                Private f32* %202 = OpAccessChain %47 %201 
                                                      OpStore %202 %200 
                                       f32_4 %204 = OpLoad %47 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_4 %206 = OpLoad %47 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %205 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                         f32 %210 = OpExtInst %1 32 %209 
                                                      OpStore %203 %210 
                                         f32 %211 = OpLoad %203 
                                       f32_3 %212 = OpCompositeConstruct %211 %211 %211 
                                       f32_4 %213 = OpLoad %47 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_3 %215 = OpFMul %212 %214 
                                       f32_4 %216 = OpLoad %47 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %47 %217 
                                       f32_4 %220 = OpLoad %47 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                                      OpStore %219 %221 
                                       f32_4 %223 = OpLoad %9 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                                      OpStore %222 %224 
                                                      OpStore %225 %226 
                                       f32_4 %227 = OpLoad %9 
                                       f32_4 %228 = OpVectorShuffle %227 %227 1 1 1 1 
                                       f32_4 %229 = OpFNegate %228 
                              Uniform f32_4* %230 = OpAccessChain %23 %26 
                                       f32_4 %231 = OpLoad %230 
                                       f32_4 %232 = OpFAdd %229 %231 
                                                      OpStore %65 %232 
                                       f32_4 %234 = OpLoad %47 
                                       f32_4 %235 = OpVectorShuffle %234 %234 1 1 1 1 
                                       f32_4 %236 = OpLoad %65 
                                       f32_4 %237 = OpFMul %235 %236 
                                                      OpStore %233 %237 
                                       f32_4 %238 = OpLoad %65 
                                       f32_4 %239 = OpLoad %65 
                                       f32_4 %240 = OpFMul %238 %239 
                                                      OpStore %65 %240 
                                       f32_4 %242 = OpLoad %9 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpFNegate %243 
                              Uniform f32_4* %245 = OpAccessChain %23 %31 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpFAdd %244 %246 
                                                      OpStore %241 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_4 %249 = OpVectorShuffle %248 %248 2 2 2 2 
                                       f32_4 %250 = OpFNegate %249 
                              Uniform f32_4* %251 = OpAccessChain %23 %39 
                                       f32_4 %252 = OpLoad %251 
                                       f32_4 %253 = OpFAdd %250 %252 
                                                      OpStore %9 %253 
                                       f32_4 %254 = OpLoad %241 
                                       f32_4 %255 = OpLoad %47 
                                       f32_4 %256 = OpVectorShuffle %255 %255 0 0 0 0 
                                       f32_4 %257 = OpFMul %254 %256 
                                       f32_4 %258 = OpLoad %233 
                                       f32_4 %259 = OpFAdd %257 %258 
                                                      OpStore %233 %259 
                                       f32_4 %260 = OpLoad %9 
                                       f32_4 %261 = OpLoad %47 
                                       f32_4 %262 = OpVectorShuffle %261 %261 2 2 2 2 
                                       f32_4 %263 = OpFMul %260 %262 
                                       f32_4 %264 = OpLoad %233 
                                       f32_4 %265 = OpFAdd %263 %264 
                                                      OpStore %47 %265 
                                       f32_4 %266 = OpLoad %241 
                                       f32_4 %267 = OpLoad %241 
                                       f32_4 %268 = OpFMul %266 %267 
                                       f32_4 %269 = OpLoad %65 
                                       f32_4 %270 = OpFAdd %268 %269 
                                                      OpStore %65 %270 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpFMul %271 %272 
                                       f32_4 %274 = OpLoad %65 
                                       f32_4 %275 = OpFAdd %273 %274 
                                                      OpStore %9 %275 
                                       f32_4 %276 = OpLoad %9 
                                       f32_4 %279 = OpExtInst %1 40 %276 %278 
                                                      OpStore %9 %279 
                                       f32_4 %280 = OpLoad %9 
                                       f32_4 %281 = OpExtInst %1 32 %280 
                                                      OpStore %65 %281 
                                       f32_4 %282 = OpLoad %9 
                              Uniform f32_4* %283 = OpAccessChain %23 %49 
                                       f32_4 %284 = OpLoad %283 
                                       f32_4 %285 = OpFMul %282 %284 
                                       f32_4 %287 = OpFAdd %285 %286 
                                                      OpStore %9 %287 
                                       f32_4 %288 = OpLoad %9 
                                       f32_4 %289 = OpFDiv %286 %288 
                                                      OpStore %9 %289 
                                       f32_4 %290 = OpLoad %47 
                                       f32_4 %291 = OpLoad %65 
                                       f32_4 %292 = OpFMul %290 %291 
                                                      OpStore %47 %292 
                                       f32_4 %293 = OpLoad %47 
                                       f32_4 %294 = OpExtInst %1 40 %293 %226 
                                                      OpStore %47 %294 
                                       f32_4 %295 = OpLoad %9 
                                       f32_4 %296 = OpLoad %47 
                                       f32_4 %297 = OpFMul %295 %296 
                                                      OpStore %9 %297 
                                       f32_4 %298 = OpLoad %9 
                                       f32_3 %299 = OpVectorShuffle %298 %298 1 1 1 
                              Uniform f32_4* %301 = OpAccessChain %23 %300 %26 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_3 %304 = OpFMul %299 %303 
                                       f32_4 %305 = OpLoad %47 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
                                                      OpStore %47 %306 
                              Uniform f32_4* %307 = OpAccessChain %23 %300 %31 
                                       f32_4 %308 = OpLoad %307 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_4 %310 = OpLoad %9 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 0 0 
                                       f32_3 %312 = OpFMul %309 %311 
                                       f32_4 %313 = OpLoad %47 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %315 = OpFAdd %312 %314 
                                       f32_4 %316 = OpLoad %47 
                                       f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                                      OpStore %47 %317 
                              Uniform f32_4* %318 = OpAccessChain %23 %300 %39 
                                       f32_4 %319 = OpLoad %318 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_4 %321 = OpLoad %9 
                                       f32_3 %322 = OpVectorShuffle %321 %321 2 2 2 
                                       f32_3 %323 = OpFMul %320 %322 
                                       f32_4 %324 = OpLoad %47 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_3 %326 = OpFAdd %323 %325 
                                       f32_4 %327 = OpLoad %9 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %9 %328 
                              Uniform f32_4* %329 = OpAccessChain %23 %300 %49 
                                       f32_4 %330 = OpLoad %329 
                                       f32_3 %331 = OpVectorShuffle %330 %330 0 1 2 
                                       f32_4 %332 = OpLoad %9 
                                       f32_3 %333 = OpVectorShuffle %332 %332 3 3 3 
                                       f32_3 %334 = OpFMul %331 %333 
                                       f32_4 %335 = OpLoad %9 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                       f32_3 %337 = OpFAdd %334 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_4 %339 = OpVectorShuffle %338 %337 4 5 6 3 
                                                      OpStore %9 %339 
                                       f32_4 %341 = OpLoad %9 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                                      OpStore %340 %342 
                                                      OpStore %343 %226 
                                 Output f32* %345 = OpAccessChain %90 %31 %86 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFNegate %346 
                                 Output f32* %348 = OpAccessChain %90 %31 %86 
                                                      OpStore %348 %347 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 648
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %120 %234 %359 %365 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpMemberDecorate %27 0 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 RelaxedPrecision 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpMemberDecorate %27 8 Offset 27 
                                                      OpMemberDecorate %27 9 Offset 27 
                                                      OpMemberDecorate %27 10 Offset 27 
                                                      OpMemberDecorate %27 11 RelaxedPrecision 
                                                      OpMemberDecorate %27 11 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %118 DescriptorSet 118 
                                                      OpDecorate %118 Binding 118 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %120 Location 120 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %226 SpecId 226 
                                                      OpDecorate %234 Location 234 
                                                      OpDecorate %324 DescriptorSet 324 
                                                      OpDecorate %324 Binding 324 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %359 Location 359 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %365 Location 365 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %593 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeVector %6 3 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %7 %25 
                                              %27 = OpTypeStruct %7 %7 %26 %21 %21 %7 %6 %6 %7 %6 %6 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32_4; f32; f32; f32;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 8 
                                              %32 = OpTypePointer Uniform %7 
                                          u32 %47 = OpConstant 1 
                                              %48 = OpTypePointer Private %6 
                                          u32 %51 = OpConstant 0 
                                          u32 %56 = OpConstant 2 
                                              %70 = OpTypeBool 
                                              %71 = OpTypePointer Private %70 
                                Private bool* %72 = OpVariable Private 
                                          i32 %75 = OpConstant 9 
                                              %76 = OpTypePointer Uniform %6 
                               Private f32_4* %80 = OpVariable Private 
                                          f32 %83 = OpConstant 3.674022E-40 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                        f32_3 %86 = OpConstantComposite %83 %84 %85 
                                              %89 = OpTypePointer Private %15 
                               Private f32_2* %90 = OpVariable Private 
                                          f32 %98 = OpConstant 3.674022E-40 
                                        f32_2 %99 = OpConstantComposite %98 %98 
                                Private f32* %101 = OpVariable Private 
                                         f32 %114 = OpConstant 3.674022E-40 
                                             %116 = OpTypePointer Private %21 
                              Private f32_3* %117 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %118 = OpVariable UniformConstant 
                                Input f32_2* %120 = OpVariable Input 
                              Private f32_2* %124 = OpVariable Private 
                                         f32 %125 = OpConstant 3.674022E-40 
                                       f32_2 %126 = OpConstantComposite %125 %125 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_2 %128 = OpConstantComposite %98 %127 
                                             %130 = OpTypeVector %70 2 
                              Private f32_3* %134 = OpVariable Private 
                              Private f32_4* %140 = OpVariable Private 
                                         i32 %159 = OpConstant 7 
                                         i32 %181 = OpConstant 6 
                              Private f32_2* %188 = OpVariable Private 
                                         u32 %194 = OpConstant 3 
                                         i32 %197 = OpConstant 11 
                               Private bool* %203 = OpVariable Private 
                                         i32 %208 = OpConstant 0 
                                         i32 %209 = OpConstant 1 
                                         i32 %211 = OpConstant -1 
                                        bool %220 = OpConstantFalse 
                                        bool %226 = OpSpecConstantFalse 
                              Private f32_4* %232 = OpVariable Private 
                                             %233 = OpTypePointer Input %21 
                                Input f32_3* %234 = OpVariable Input 
                                         i32 %237 = OpConstant 2 
                                         i32 %268 = OpConstant 3 
                                             %275 = OpTypePointer Function %21 
                                         i32 %289 = OpConstant 4 
                                             %290 = OpTypePointer Uniform %21 
                              Private f32_4* %297 = OpVariable Private 
                                Private f32* %305 = OpVariable Private 
                                         f32 %308 = OpConstant 3.674022E-40 
                                Private f32* %311 = OpVariable Private 
                                         f32 %314 = OpConstant 3.674022E-40 
                                             %321 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %322 = OpTypeSampledImage %321 
                                             %323 = OpTypePointer UniformConstant %322 
 UniformConstant read_only Texture3DSampled* %324 = OpVariable UniformConstant 
                              Private f32_3* %335 = OpVariable Private 
                              Private f32_3* %345 = OpVariable Private 
                                         i32 %348 = OpConstant 5 
                                Input f32_3* %359 = OpVariable Input 
                                             %364 = OpTypePointer Output %7 
                               Output f32_4* %365 = OpVariable Output 
                                             %368 = OpTypePointer Output %6 
                               Private bool* %377 = OpVariable Private 
                                Private f32* %383 = OpVariable Private 
                                             %384 = OpTypePointer Function %6 
                              Private f32_2* %391 = OpVariable Private 
                                         f32 %399 = OpConstant 3.674022E-40 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_2 %416 = OpConstantComposite %399 %415 
                                Private f32* %487 = OpVariable Private 
                                         f32 %490 = OpConstant 3.674022E-40 
                                         f32 %492 = OpConstant 3.674022E-40 
                                Private f32* %519 = OpVariable Private 
                              Private f32_3* %526 = OpVariable Private 
                               Private bool* %534 = OpVariable Private 
                                Private f32* %540 = OpVariable Private 
                              Private f32_3* %547 = OpVariable Private 
                                         i32 %565 = OpConstant 10 
                                Private f32* %576 = OpVariable Private 
                                         f32 %590 = OpConstant 3.674022E-40 
                                         f32 %597 = OpConstant 3.674022E-40 
                                       f32_3 %598 = OpConstantComposite %98 %415 %597 
                                       f32_3 %603 = OpConstantComposite %490 %490 %490 
                                         f32 %605 = OpConstant 3.674022E-40 
                                       f32_3 %606 = OpConstantComposite %605 %605 %605 
                                       f32_3 %610 = OpConstantComposite %399 %399 %399 
                                       f32_3 %622 = OpConstantComposite %98 %98 %98 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %276 = OpVariable Function 
                               Function f32* %385 = OpVariable Function 
                               Function f32* %425 = OpVariable Function 
                               Function f32* %513 = OpVariable Function 
                               Function f32* %541 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %22 = OpLoad %9 
                                        f32_3 %23 = OpVectorShuffle %22 %22 0 1 2 
                               Uniform f32_4* %33 = OpAccessChain %29 %31 
                                        f32_4 %34 = OpLoad %33 
                                        f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                        f32_3 %36 = OpFNegate %35 
                                        f32_3 %37 = OpFAdd %23 %36 
                                        f32_4 %38 = OpLoad %20 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 6 3 
                                                      OpStore %20 %39 
                                        f32_4 %40 = OpLoad %20 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                                        f32_4 %42 = OpLoad %20 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_2 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %20 
                                        f32_4 %46 = OpVectorShuffle %45 %44 4 5 2 3 
                                                      OpStore %20 %46 
                                 Private f32* %49 = OpAccessChain %20 %47 
                                          f32 %50 = OpLoad %49 
                                 Private f32* %52 = OpAccessChain %20 %51 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFAdd %50 %53 
                                 Private f32* %55 = OpAccessChain %20 %51 
                                                      OpStore %55 %54 
                                 Private f32* %57 = OpAccessChain %20 %56 
                                          f32 %58 = OpLoad %57 
                                 Private f32* %59 = OpAccessChain %20 %56 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %58 %60 
                                 Private f32* %62 = OpAccessChain %20 %51 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %20 %51 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %20 %51 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpExtInst %1 31 %67 
                                 Private f32* %69 = OpAccessChain %20 %51 
                                                      OpStore %69 %68 
                                 Private f32* %73 = OpAccessChain %20 %51 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %77 = OpAccessChain %29 %75 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %74 %78 
                                                      OpStore %72 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                          f32 %87 = OpDot %82 %86 
                                 Private f32* %88 = OpAccessChain %80 %51 
                                                      OpStore %88 %87 
                                        f32_4 %91 = OpLoad %9 
                                        f32_2 %92 = OpVectorShuffle %91 %91 0 2 
                                        f32_4 %93 = OpLoad %80 
                                        f32_2 %94 = OpVectorShuffle %93 %93 0 0 
                                        f32_2 %95 = OpFNegate %94 
                                        f32_2 %96 = OpFAdd %92 %95 
                                                      OpStore %90 %96 
                                        f32_2 %97 = OpLoad %90 
                                       f32_2 %100 = OpFAdd %97 %99 
                                                      OpStore %90 %100 
                                Private f32* %102 = OpAccessChain %90 %51 
                                         f32 %103 = OpLoad %102 
                                         f32 %104 = OpFNegate %103 
                                         f32 %105 = OpFMul %104 %83 
                                         f32 %106 = OpFAdd %105 %98 
                                                      OpStore %101 %106 
                                Private f32* %107 = OpAccessChain %90 %47 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFNegate %108 
                                         f32 %110 = OpFMul %109 %85 
                                         f32 %111 = OpLoad %101 
                                         f32 %112 = OpFAdd %110 %111 
                                                      OpStore %101 %112 
                                         f32 %113 = OpLoad %101 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %101 %115 
                  read_only Texture2DSampled %119 = OpLoad %118 
                                       f32_2 %121 = OpLoad %120 
                                       f32_4 %122 = OpImageSampleImplicitLod %119 %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                                      OpStore %117 %123 
                                        bool %129 = OpLoad %72 
                                      bool_2 %131 = OpCompositeConstruct %129 %129 
                                       f32_2 %132 = OpSelect %131 %99 %126 
                                       f32_2 %133 = OpExtInst %1 46 %126 %128 %132 
                                                      OpStore %124 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %137 = OpFNegate %136 
                                       f32_3 %138 = OpLoad %117 
                                       f32_3 %139 = OpFAdd %137 %138 
                                                      OpStore %134 %139 
                                       f32_2 %141 = OpLoad %124 
                                       f32_3 %142 = OpVectorShuffle %141 %141 1 1 1 
                                       f32_3 %143 = OpLoad %134 
                                       f32_3 %144 = OpFMul %142 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFAdd %144 %146 
                                       f32_4 %148 = OpLoad %140 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %140 %149 
                                       f32_2 %150 = OpLoad %90 
                                       f32_2 %151 = OpExtInst %1 30 %150 
                                       f32_4 %152 = OpLoad %20 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 1 5 3 
                                                      OpStore %20 %153 
                                         f32 %154 = OpLoad %101 
                                         f32 %155 = OpExtInst %1 30 %154 
                                Private f32* %156 = OpAccessChain %20 %47 
                                                      OpStore %156 %155 
                                       f32_4 %157 = OpLoad %20 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Uniform f32* %160 = OpAccessChain %29 %159 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %162 = OpAccessChain %29 %159 
                                         f32 %163 = OpLoad %162 
                                Uniform f32* %164 = OpAccessChain %29 %159 
                                         f32 %165 = OpLoad %164 
                                       f32_3 %166 = OpCompositeConstruct %161 %163 %165 
                                         f32 %167 = OpCompositeExtract %166 0 
                                         f32 %168 = OpCompositeExtract %166 1 
                                         f32 %169 = OpCompositeExtract %166 2 
                                       f32_3 %170 = OpCompositeConstruct %167 %168 %169 
                                       f32_3 %171 = OpFMul %158 %170 
                                       f32_4 %172 = OpLoad %20 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %20 %173 
                                       f32_4 %174 = OpLoad %20 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpExtInst %1 29 %175 
                                       f32_4 %177 = OpLoad %20 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %20 %178 
                                       f32_4 %179 = OpLoad %20 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                Uniform f32* %182 = OpAccessChain %29 %181 
                                         f32 %183 = OpLoad %182 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_3 %185 = OpFMul %180 %184 
                                       f32_4 %186 = OpLoad %20 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %20 %187 
                                       f32_2 %189 = OpLoad %124 
                                       f32_2 %190 = OpVectorShuffle %189 %189 0 0 
                                       f32_4 %191 = OpLoad %20 
                                       f32_2 %192 = OpVectorShuffle %191 %191 0 1 
                                       f32_2 %193 = OpFMul %190 %192 
                                                      OpStore %188 %193 
                                Private f32* %195 = OpAccessChain %9 %194 
                                         f32 %196 = OpLoad %195 
                                Uniform f32* %198 = OpAccessChain %29 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %196 %200 
                                Private f32* %202 = OpAccessChain %80 %51 
                                                      OpStore %202 %201 
                                Private f32* %204 = OpAccessChain %80 %51 
                                         f32 %205 = OpLoad %204 
                                        bool %206 = OpFOrdLessThan %205 %125 
                                                      OpStore %203 %206 
                                        bool %207 = OpLoad %203 
                                         i32 %210 = OpSelect %207 %209 %208 
                                         i32 %212 = OpIMul %210 %211 
                                        bool %213 = OpINotEqual %212 %208 
                                                      OpSelectionMerge %215 None 
                                                      OpBranchConditional %213 %214 %215 
                                             %214 = OpLabel 
                                                      OpKill
                                             %215 = OpLabel 
                                Uniform f32* %217 = OpAccessChain %29 %209 %51 
                                         f32 %218 = OpLoad %217 
                                        bool %219 = OpFOrdEqual %218 %98 
                                                      OpStore %203 %219 
                                                      OpSelectionMerge %222 None 
                                                      OpBranchConditional %220 %221 %222 
                                             %221 = OpLabel 
                                        bool %223 = OpLoad %203 
                                                      OpSelectionMerge %225 None 
                                                      OpBranchConditional %223 %224 %225 
                                             %224 = OpLabel 
                                                      OpBranch %225 
                                             %225 = OpLabel 
                                                      OpBranch %222 
                                             %222 = OpLabel 
                                                      OpSelectionMerge %228 None 
                                                      OpBranchConditional %226 %227 %330 
                                             %227 = OpLabel 
                                Uniform f32* %229 = OpAccessChain %29 %209 %47 
                                         f32 %230 = OpLoad %229 
                                        bool %231 = OpFOrdEqual %230 %98 
                                                      OpStore %203 %231 
                                       f32_3 %235 = OpLoad %234 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                              Uniform f32_4* %238 = OpAccessChain %29 %237 %209 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %236 %240 
                                       f32_4 %242 = OpLoad %232 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %232 %243 
                              Uniform f32_4* %244 = OpAccessChain %29 %237 %208 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpLoad %234 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %232 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %232 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %232 %254 
                              Uniform f32_4* %255 = OpAccessChain %29 %237 %237 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpLoad %234 
                                       f32_3 %259 = OpVectorShuffle %258 %258 2 2 2 
                                       f32_3 %260 = OpFMul %257 %259 
                                       f32_4 %261 = OpLoad %232 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFAdd %260 %262 
                                       f32_4 %264 = OpLoad %232 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %232 %265 
                                       f32_4 %266 = OpLoad %232 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                              Uniform f32_4* %269 = OpAccessChain %29 %237 %268 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_3 %272 = OpFAdd %267 %271 
                                       f32_4 %273 = OpLoad %232 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
                                                      OpStore %232 %274 
                                        bool %277 = OpLoad %203 
                                                      OpSelectionMerge %279 None 
                                                      OpBranchConditional %277 %278 %282 
                                             %278 = OpLabel 
                                       f32_4 %280 = OpLoad %232 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                                      OpStore %276 %281 
                                                      OpBranch %279 
                                             %282 = OpLabel 
                                       f32_3 %283 = OpLoad %234 
                                                      OpStore %276 %283 
                                                      OpBranch %279 
                                             %279 = OpLabel 
                                       f32_3 %284 = OpLoad %276 
                                       f32_4 %285 = OpLoad %232 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %232 %286 
                                       f32_4 %287 = OpLoad %232 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                              Uniform f32_3* %291 = OpAccessChain %29 %289 
                                       f32_3 %292 = OpLoad %291 
                                       f32_3 %293 = OpFNegate %292 
                                       f32_3 %294 = OpFAdd %288 %293 
                                       f32_4 %295 = OpLoad %232 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %232 %296 
                                       f32_4 %298 = OpLoad %232 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                              Uniform f32_3* %300 = OpAccessChain %29 %268 
                                       f32_3 %301 = OpLoad %300 
                                       f32_3 %302 = OpFMul %299 %301 
                                       f32_4 %303 = OpLoad %297 
                                       f32_4 %304 = OpVectorShuffle %303 %302 0 4 5 6 
                                                      OpStore %297 %304 
                                Private f32* %306 = OpAccessChain %297 %47 
                                         f32 %307 = OpLoad %306 
                                         f32 %309 = OpFMul %307 %308 
                                         f32 %310 = OpFAdd %309 %127 
                                                      OpStore %305 %310 
                                Uniform f32* %312 = OpAccessChain %29 %209 %56 
                                         f32 %313 = OpLoad %312 
                                         f32 %315 = OpFMul %313 %314 
                                         f32 %316 = OpFAdd %315 %127 
                                                      OpStore %311 %316 
                                         f32 %317 = OpLoad %305 
                                         f32 %318 = OpLoad %311 
                                         f32 %319 = OpExtInst %1 40 %317 %318 
                                Private f32* %320 = OpAccessChain %297 %51 
                                                      OpStore %320 %319 
                  read_only Texture3DSampled %325 = OpLoad %324 
                                       f32_4 %326 = OpLoad %297 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 2 3 
                                       f32_4 %328 = OpImageSampleImplicitLod %325 %327 
                                                      OpStore %297 %328 
                                       f32_4 %329 = OpLoad %297 
                                                      OpStore %80 %329 
                                                      OpBranch %228 
                                             %330 = OpLabel 
                                Private f32* %331 = OpAccessChain %80 %51 
                                                      OpStore %331 %98 
                                Private f32* %332 = OpAccessChain %80 %47 
                                                      OpStore %332 %98 
                                Private f32* %333 = OpAccessChain %80 %56 
                                                      OpStore %333 %98 
                                Private f32* %334 = OpAccessChain %80 %194 
                                                      OpStore %334 %98 
                                                      OpBranch %228 
                                             %228 = OpLabel 
                                       f32_4 %336 = OpLoad %80 
                              Uniform f32_4* %337 = OpAccessChain %29 %208 
                                       f32_4 %338 = OpLoad %337 
                                         f32 %339 = OpDot %336 %338 
                                Private f32* %340 = OpAccessChain %335 %51 
                                                      OpStore %340 %339 
                                Private f32* %341 = OpAccessChain %335 %51 
                                         f32 %342 = OpLoad %341 
                                         f32 %343 = OpExtInst %1 43 %342 %125 %98 
                                Private f32* %344 = OpAccessChain %335 %51 
                                                      OpStore %344 %343 
                                       f32_4 %346 = OpLoad %140 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                              Uniform f32_4* %349 = OpAccessChain %29 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFMul %347 %351 
                                                      OpStore %345 %352 
                                       f32_3 %353 = OpLoad %335 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 0 0 
                                       f32_3 %355 = OpLoad %345 
                                       f32_3 %356 = OpFMul %354 %355 
                                                      OpStore %335 %356 
                                       f32_4 %357 = OpLoad %140 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %360 = OpLoad %359 
                                       f32_3 %361 = OpFMul %358 %360 
                                       f32_3 %362 = OpLoad %335 
                                       f32_3 %363 = OpFAdd %361 %362 
                                                      OpStore %335 %363 
                                Private f32* %366 = OpAccessChain %9 %194 
                                         f32 %367 = OpLoad %366 
                                 Output f32* %369 = OpAccessChain %365 %194 
                                                      OpStore %369 %367 
                                       f32_4 %370 = OpLoad %20 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_2 %372 = OpLoad %124 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 0 0 
                                       f32_3 %374 = OpFMul %371 %373 
                                       f32_3 %375 = OpLoad %335 
                                       f32_3 %376 = OpFAdd %374 %375 
                                                      OpStore %335 %376 
                                Private f32* %378 = OpAccessChain %335 %47 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %335 %56 
                                         f32 %381 = OpLoad %380 
                                        bool %382 = OpFOrdGreaterThanEqual %379 %381 
                                                      OpStore %377 %382 
                                        bool %386 = OpLoad %377 
                                                      OpSelectionMerge %388 None 
                                                      OpBranchConditional %386 %387 %389 
                                             %387 = OpLabel 
                                                      OpStore %385 %98 
                                                      OpBranch %388 
                                             %389 = OpLabel 
                                                      OpStore %385 %125 
                                                      OpBranch %388 
                                             %388 = OpLabel 
                                         f32 %390 = OpLoad %385 
                                                      OpStore %383 %390 
                                       f32_3 %392 = OpLoad %335 
                                       f32_2 %393 = OpVectorShuffle %392 %392 2 1 
                                       f32_2 %394 = OpFNegate %393 
                                       f32_3 %395 = OpLoad %335 
                                       f32_2 %396 = OpVectorShuffle %395 %395 1 2 
                                       f32_2 %397 = OpFAdd %394 %396 
                                                      OpStore %391 %397 
                                Private f32* %398 = OpAccessChain %140 %51 
                                                      OpStore %398 %98 
                                Private f32* %400 = OpAccessChain %140 %47 
                                                      OpStore %400 %399 
                                         f32 %401 = OpLoad %383 
                                       f32_2 %402 = OpCompositeConstruct %401 %401 
                                       f32_2 %403 = OpLoad %391 
                                       f32_2 %404 = OpFMul %402 %403 
                                       f32_3 %405 = OpLoad %335 
                                       f32_2 %406 = OpVectorShuffle %405 %405 2 1 
                                       f32_2 %407 = OpFAdd %404 %406 
                                       f32_4 %408 = OpLoad %297 
                                       f32_4 %409 = OpVectorShuffle %408 %407 4 5 2 3 
                                                      OpStore %297 %409 
                                         f32 %410 = OpLoad %383 
                                       f32_2 %411 = OpCompositeConstruct %410 %410 
                                       f32_4 %412 = OpLoad %140 
                                       f32_2 %413 = OpVectorShuffle %412 %412 0 1 
                                       f32_2 %414 = OpFMul %411 %413 
                                       f32_2 %417 = OpFAdd %414 %416 
                                       f32_4 %418 = OpLoad %297 
                                       f32_4 %419 = OpVectorShuffle %418 %417 0 1 4 5 
                                                      OpStore %297 %419 
                                Private f32* %420 = OpAccessChain %335 %51 
                                         f32 %421 = OpLoad %420 
                                Private f32* %422 = OpAccessChain %297 %51 
                                         f32 %423 = OpLoad %422 
                                        bool %424 = OpFOrdGreaterThanEqual %421 %423 
                                                      OpStore %377 %424 
                                        bool %426 = OpLoad %377 
                                                      OpSelectionMerge %428 None 
                                                      OpBranchConditional %426 %427 %429 
                                             %427 = OpLabel 
                                                      OpStore %425 %98 
                                                      OpBranch %428 
                                             %429 = OpLabel 
                                                      OpStore %425 %125 
                                                      OpBranch %428 
                                             %428 = OpLabel 
                                         f32 %430 = OpLoad %425 
                                                      OpStore %383 %430 
                                       f32_4 %431 = OpLoad %297 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 3 
                                       f32_3 %433 = OpFNegate %432 
                                       f32_4 %434 = OpLoad %140 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 6 3 
                                                      OpStore %140 %435 
                                Private f32* %436 = OpAccessChain %335 %51 
                                         f32 %437 = OpLoad %436 
                                         f32 %438 = OpFNegate %437 
                                Private f32* %439 = OpAccessChain %140 %194 
                                                      OpStore %439 %438 
                                Private f32* %440 = OpAccessChain %140 %51 
                                         f32 %441 = OpLoad %440 
                                Private f32* %442 = OpAccessChain %335 %51 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpFAdd %441 %443 
                                Private f32* %445 = OpAccessChain %232 %51 
                                                      OpStore %445 %444 
                                       f32_4 %446 = OpLoad %297 
                                       f32_3 %447 = OpVectorShuffle %446 %446 1 2 0 
                                       f32_4 %448 = OpLoad %140 
                                       f32_3 %449 = OpVectorShuffle %448 %448 1 2 3 
                                       f32_3 %450 = OpFAdd %447 %449 
                                       f32_4 %451 = OpLoad %232 
                                       f32_4 %452 = OpVectorShuffle %451 %450 0 4 5 6 
                                                      OpStore %232 %452 
                                         f32 %453 = OpLoad %383 
                                       f32_3 %454 = OpCompositeConstruct %453 %453 %453 
                                       f32_4 %455 = OpLoad %232 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpFMul %454 %456 
                                       f32_4 %458 = OpLoad %297 
                                       f32_3 %459 = OpVectorShuffle %458 %458 0 1 3 
                                       f32_3 %460 = OpFAdd %457 %459 
                                       f32_4 %461 = OpLoad %20 
                                       f32_4 %462 = OpVectorShuffle %461 %460 4 5 2 6 
                                                      OpStore %20 %462 
                                         f32 %463 = OpLoad %383 
                                Private f32* %464 = OpAccessChain %232 %194 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpFMul %463 %465 
                                Private f32* %467 = OpAccessChain %335 %51 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFAdd %466 %468 
                                                      OpStore %383 %469 
                                Private f32* %470 = OpAccessChain %20 %47 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpLoad %383 
                                         f32 %473 = OpExtInst %1 37 %471 %472 
                                Private f32* %474 = OpAccessChain %140 %51 
                                                      OpStore %474 %473 
                                Private f32* %475 = OpAccessChain %20 %51 
                                         f32 %476 = OpLoad %475 
                                Private f32* %477 = OpAccessChain %140 %51 
                                         f32 %478 = OpLoad %477 
                                         f32 %479 = OpFNegate %478 
                                         f32 %480 = OpFAdd %476 %479 
                                Private f32* %481 = OpAccessChain %140 %51 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %20 %47 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpLoad %383 
                                         f32 %486 = OpFAdd %484 %485 
                                                      OpStore %383 %486 
                                Private f32* %488 = OpAccessChain %140 %51 
                                         f32 %489 = OpLoad %488 
                                         f32 %491 = OpFMul %489 %490 
                                         f32 %493 = OpFAdd %491 %492 
                                                      OpStore %487 %493 
                                         f32 %494 = OpLoad %383 
                                         f32 %495 = OpLoad %487 
                                         f32 %496 = OpFDiv %494 %495 
                                                      OpStore %383 %496 
                                         f32 %497 = OpLoad %383 
                                Private f32* %498 = OpAccessChain %20 %194 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFAdd %497 %499 
                                                      OpStore %383 %500 
                                Private f32* %501 = OpAccessChain %20 %51 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %502 %492 
                                                      OpStore %487 %503 
                                Private f32* %504 = OpAccessChain %140 %51 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpLoad %487 
                                         f32 %507 = OpFDiv %505 %506 
                                                      OpStore %487 %507 
                                Private f32* %508 = OpAccessChain %9 %47 
                                         f32 %509 = OpLoad %508 
                                Private f32* %510 = OpAccessChain %9 %56 
                                         f32 %511 = OpLoad %510 
                                        bool %512 = OpFOrdGreaterThanEqual %509 %511 
                                                      OpStore %203 %512 
                                        bool %514 = OpLoad %203 
                                                      OpSelectionMerge %516 None 
                                                      OpBranchConditional %514 %515 %517 
                                             %515 = OpLabel 
                                                      OpStore %513 %98 
                                                      OpBranch %516 
                                             %517 = OpLabel 
                                                      OpStore %513 %125 
                                                      OpBranch %516 
                                             %516 = OpLabel 
                                         f32 %518 = OpLoad %513 
                                                      OpStore %305 %518 
                                Private f32* %520 = OpAccessChain %9 %56 
                                         f32 %521 = OpLoad %520 
                                         f32 %522 = OpFNegate %521 
                                Private f32* %523 = OpAccessChain %9 %47 
                                         f32 %524 = OpLoad %523 
                                         f32 %525 = OpFAdd %522 %524 
                                                      OpStore %519 %525 
                                         f32 %527 = OpLoad %305 
                                         f32 %528 = OpLoad %519 
                                         f32 %529 = OpFMul %527 %528 
                                Private f32* %530 = OpAccessChain %9 %56 
                                         f32 %531 = OpLoad %530 
                                         f32 %532 = OpFAdd %529 %531 
                                Private f32* %533 = OpAccessChain %526 %51 
                                                      OpStore %533 %532 
                                Private f32* %535 = OpAccessChain %9 %51 
                                         f32 %536 = OpLoad %535 
                                Private f32* %537 = OpAccessChain %526 %51 
                                         f32 %538 = OpLoad %537 
                                        bool %539 = OpFOrdGreaterThanEqual %536 %538 
                                                      OpStore %534 %539 
                                        bool %542 = OpLoad %534 
                                                      OpSelectionMerge %544 None 
                                                      OpBranchConditional %542 %543 %545 
                                             %543 = OpLabel 
                                                      OpStore %541 %98 
                                                      OpBranch %544 
                                             %545 = OpLabel 
                                                      OpStore %541 %125 
                                                      OpBranch %544 
                                             %544 = OpLabel 
                                         f32 %546 = OpLoad %541 
                                                      OpStore %540 %546 
                                Private f32* %548 = OpAccessChain %526 %51 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFNegate %549 
                                Private f32* %551 = OpAccessChain %9 %51 
                                         f32 %552 = OpLoad %551 
                                         f32 %553 = OpFAdd %550 %552 
                                Private f32* %554 = OpAccessChain %547 %51 
                                                      OpStore %554 %553 
                                         f32 %555 = OpLoad %540 
                                Private f32* %556 = OpAccessChain %547 %51 
                                         f32 %557 = OpLoad %556 
                                         f32 %558 = OpFMul %555 %557 
                                Private f32* %559 = OpAccessChain %526 %51 
                                         f32 %560 = OpLoad %559 
                                         f32 %561 = OpFAdd %558 %560 
                                Private f32* %562 = OpAccessChain %547 %51 
                                                      OpStore %562 %561 
                                Private f32* %563 = OpAccessChain %547 %51 
                                         f32 %564 = OpLoad %563 
                                Uniform f32* %566 = OpAccessChain %29 %565 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpFMul %564 %567 
                                Private f32* %569 = OpAccessChain %547 %51 
                                                      OpStore %569 %568 
                                Private f32* %570 = OpAccessChain %547 %51 
                                         f32 %571 = OpLoad %570 
                                Private f32* %572 = OpAccessChain %20 %51 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpExtInst %1 37 %571 %573 
                                Private f32* %575 = OpAccessChain %547 %51 
                                                      OpStore %575 %574 
                                Private f32* %577 = OpAccessChain %188 %47 
                                         f32 %578 = OpLoad %577 
                                Private f32* %579 = OpAccessChain %188 %51 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFAdd %578 %580 
                                                      OpStore %576 %581 
                                Private f32* %582 = OpAccessChain %20 %56 
                                         f32 %583 = OpLoad %582 
                                Private f32* %584 = OpAccessChain %124 %51 
                                         f32 %585 = OpLoad %584 
                                         f32 %586 = OpFMul %583 %585 
                                         f32 %587 = OpLoad %576 
                                         f32 %588 = OpFAdd %586 %587 
                                                      OpStore %576 %588 
                                         f32 %589 = OpLoad %576 
                                         f32 %591 = OpFMul %589 %590 
                                                      OpStore %576 %591 
                                         f32 %592 = OpLoad %576 
                                         f32 %593 = OpExtInst %1 43 %592 %125 %98 
                                                      OpStore %576 %593 
                                         f32 %594 = OpLoad %383 
                                       f32_3 %595 = OpCompositeConstruct %594 %594 %594 
                                       f32_3 %596 = OpExtInst %1 4 %595 
                                       f32_3 %599 = OpFAdd %596 %598 
                                                      OpStore %526 %599 
                                       f32_3 %600 = OpLoad %526 
                                       f32_3 %601 = OpExtInst %1 10 %600 
                                                      OpStore %526 %601 
                                       f32_3 %602 = OpLoad %526 
                                       f32_3 %604 = OpFMul %602 %603 
                                       f32_3 %607 = OpFAdd %604 %606 
                                                      OpStore %526 %607 
                                       f32_3 %608 = OpLoad %526 
                                       f32_3 %609 = OpExtInst %1 4 %608 
                                       f32_3 %611 = OpFAdd %609 %610 
                                                      OpStore %526 %611 
                                       f32_3 %612 = OpLoad %526 
                                       f32_3 %613 = OpCompositeConstruct %125 %125 %125 
                                       f32_3 %614 = OpCompositeConstruct %98 %98 %98 
                                       f32_3 %615 = OpExtInst %1 43 %612 %613 %614 
                                                      OpStore %526 %615 
                                       f32_3 %616 = OpLoad %526 
                                       f32_3 %617 = OpFAdd %616 %610 
                                                      OpStore %526 %617 
                                         f32 %618 = OpLoad %487 
                                       f32_3 %619 = OpCompositeConstruct %618 %618 %618 
                                       f32_3 %620 = OpLoad %526 
                                       f32_3 %621 = OpFMul %619 %620 
                                       f32_3 %623 = OpFAdd %621 %622 
                                                      OpStore %526 %623 
                                       f32_3 %624 = OpLoad %526 
                                       f32_3 %625 = OpLoad %547 
                                       f32_3 %626 = OpVectorShuffle %625 %625 0 0 0 
                                       f32_3 %627 = OpFMul %624 %626 
                                       f32_4 %628 = OpLoad %20 
                                       f32_4 %629 = OpVectorShuffle %628 %627 4 5 6 3 
                                                      OpStore %20 %629 
                                       f32_3 %630 = OpLoad %547 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 0 0 
                                       f32_3 %632 = OpFNegate %631 
                                       f32_3 %633 = OpLoad %526 
                                       f32_3 %634 = OpFMul %632 %633 
                                       f32_3 %635 = OpLoad %335 
                                       f32_3 %636 = OpFAdd %634 %635 
                                                      OpStore %547 %636 
                                         f32 %637 = OpLoad %576 
                                       f32_3 %638 = OpCompositeConstruct %637 %637 %637 
                                       f32_3 %639 = OpLoad %547 
                                       f32_3 %640 = OpFMul %638 %639 
                                       f32_4 %641 = OpLoad %20 
                                       f32_3 %642 = OpVectorShuffle %641 %641 0 1 2 
                                       f32_3 %643 = OpFAdd %640 %642 
                                                      OpStore %547 %643 
                                       f32_3 %644 = OpLoad %547 
                                       f32_4 %645 = OpLoad %365 
                                       f32_4 %646 = OpVectorShuffle %645 %644 4 5 6 3 
                                                      OpStore %365 %646 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat2.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat1.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	vec4 _EmissiveColor;
uniform 	float _EmissiveThresholdSensitivity;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ParallaxTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat16_2;
vec4 u_xlat10_2;
vec2 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
float u_xlat16_7;
float u_xlat8;
vec2 u_xlat16_8;
bool u_xlatb8;
vec2 u_xlat10;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
float u_xlat16_22;
bool u_xlatb22;
float u_xlat23;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz + (-_EmissiveColor.xyz);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y + u_xlat1.x;
    u_xlat1.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb1 = u_xlat1.x<_EmissiveThresholdSensitivity;
    u_xlat16_8.x = dot(u_xlat10_0.xyz, vec3(0.298900008, 0.586600006, 0.114500001));
    u_xlat16_8.xy = u_xlat10_0.xz + (-u_xlat16_8.xx);
    u_xlat16_8.xy = u_xlat16_8.xy * vec2(1.0, 1.0) + vec2(1.0, 1.0);
    u_xlat16_22 = (-u_xlat16_8.x) * 0.298900008 + 1.0;
    u_xlat16_22 = (-u_xlat16_8.y) * 0.114500001 + u_xlat16_22;
    u_xlat16_22 = u_xlat16_22 * 1.70473921;
    u_xlat10_2 = texture(_ParallaxTex, vs_TEXCOORD4.xy);
    u_xlat3.xy = mix(vec2(0.0, 0.0), vec2(1.0, 0.75), vec2(bvec2(u_xlatb1)));
    u_xlat16_2.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
    u_xlat2.xyz = u_xlat3.yyy * u_xlat16_2.xyz + u_xlat10_0.xyz;
    u_xlat1.xz = log2(u_xlat16_8.xy);
    u_xlat1.y = log2(u_xlat16_22);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10.xy = u_xlat3.xx * u_xlat1.xy;
    u_xlat22 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb22 = u_xlat22<0.0;
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb22){
        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat22 = u_xlat4.y * 0.25 + 0.75;
        u_xlat23 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat22, u_xlat23);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat22 = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat4.xyz = u_xlat2.xyz * vs_TEXCOORD5.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat4.w = 0.0;
    u_xlat2.w = u_xlat10_0.w;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat4.xyz = u_xlat1.zyx * u_xlat3.xxx + u_xlat2.zyx;
    u_xlatb21 = u_xlat4.y>=u_xlat4.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat4.w = 0.666666687;
    u_xlat1.xy = (-u_xlat4.xy) + u_xlat4.yx;
    u_xlat1.w = -1.0;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat4.xyw;
    u_xlatb21 = u_xlat4.z>=u_xlat5.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat5.w = u_xlat4.z;
    u_xlat6.xyw = u_xlat5.wyx;
    u_xlat6.z = -1.0;
    u_xlat6 = (-u_xlat5) + u_xlat6;
    u_xlat5 = vec4(u_xlat21) * u_xlat6 + u_xlat5;
    u_xlat21 = min(u_xlat5.y, u_xlat5.w);
    u_xlat21 = (-u_xlat21) + u_xlat5.x;
    u_xlat1.x = (-u_xlat5.y) + u_xlat5.w;
    u_xlat8 = u_xlat21 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat8;
    u_xlat1.x = u_xlat1.x + u_xlat5.z;
    u_xlat8 = u_xlat5.x + 1.00000001e-010;
    u_xlat21 = u_xlat21 / u_xlat8;
    u_xlatb8 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat16_7 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat7 = u_xlat8 * u_xlat16_7 + u_xlat10_0.z;
    u_xlatb14 = u_xlat10_0.x>=u_xlat7;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = (-u_xlat7) + u_xlat10_0.x;
    u_xlat0.x = u_xlat14 * u_xlat0.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _MaxValue;
    u_xlat0.x = min(u_xlat0.x, u_xlat5.x);
    u_xlat7 = u_xlat10.y + u_xlat10.x;
    u_xlat7 = u_xlat1.z * u_xlat3.x + u_xlat7;
    u_xlat7 = u_xlat7 * 10.0;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xzw = (-u_xlat0.xxx) * u_xlat1.xyz + u_xlat4.zyx;
    SV_Target0.xyz = vec3(u_xlat7) * u_xlat0.xzw + u_xlat2.xyz;
    SV_Target0.w = u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 452
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %157 %166 %167 %180 %219 %222 %225 %442 %445 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %167 Location 167 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate %219 Location 219 
                                                      OpDecorate %222 Location 222 
                                                      OpDecorate %225 Location 225 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %442 Location 442 
                                                      OpDecorate %445 Location 445 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 12 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 14 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                                             %100 = OpTypeVector %6 2 
                                         f32 %144 = OpConstant 3.674022E-40 
                                       f32_2 %145 = OpConstantComposite %144 %144 
                                         f32 %151 = OpConstant 3.674022E-40 
                                       f32_2 %152 = OpConstantComposite %151 %151 
                                             %156 = OpTypePointer Output %100 
                               Output f32_2* %157 = OpVariable Output 
                                         f32 %160 = OpConstant 3.674022E-40 
                                       f32_2 %161 = OpConstantComposite %144 %160 
                                         f32 %163 = OpConstant 3.674022E-40 
                                       f32_2 %164 = OpConstantComposite %163 %144 
                               Output f32_2* %166 = OpVariable Output 
                                Input f32_4* %167 = OpVariable Input 
                                         i32 %170 = OpConstant 15 
                                             %179 = OpTypePointer Input %53 
                                Input f32_3* %180 = OpVariable Input 
                                         i32 %182 = OpConstant 13 
                                         u32 %187 = OpConstant 0 
                                             %188 = OpTypePointer Private %6 
                                         u32 %201 = OpConstant 2 
                                Private f32* %203 = OpVariable Private 
                                             %218 = OpTypePointer Output %53 
                               Output f32_3* %219 = OpVariable Output 
                               Output f32_3* %222 = OpVariable Output 
                               Output f32_4* %225 = OpVariable Output 
                                       f32_4 %226 = OpConstantComposite %163 %163 %163 %163 
                                             %227 = OpTypePointer Private %53 
                              Private f32_3* %228 = OpVariable Private 
                              Private f32_4* %245 = OpVariable Private 
                              Private f32_3* %251 = OpVariable Private 
                                         i32 %252 = OpConstant 8 
                                         i32 %258 = OpConstant 9 
                                         i32 %264 = OpConstant 10 
                                         i32 %270 = OpConstant 11 
                                         u32 %279 = OpConstant 3 
                                         i32 %281 = OpConstant 5 
                                         i32 %287 = OpConstant 6 
                                         i32 %293 = OpConstant 7 
                                       f32_3 %303 = OpConstantComposite %163 %163 %163 
                              Private f32_3* %305 = OpVariable Private 
                                         f32 %309 = OpConstant 3.674022E-40 
                                       f32_3 %310 = OpConstantComposite %309 %309 %309 
                                         f32 %315 = OpConstant 3.674022E-40 
                                       f32_3 %316 = OpConstantComposite %315 %315 %315 
                                         f32 %318 = OpConstant 3.674022E-40 
                                       f32_3 %319 = OpConstantComposite %318 %318 %318 
                              Private f32_4* %329 = OpVariable Private 
                              Private f32_4* %337 = OpVariable Private 
                                         f32 %373 = OpConstant 3.674022E-40 
                                       f32_4 %374 = OpConstantComposite %373 %373 %373 %373 
                                       f32_4 %382 = OpConstantComposite %144 %144 %144 %144 
                                         i32 %396 = OpConstant 4 
                               Output f32_3* %442 = OpVariable Output 
                               Output f32_4* %445 = OpVariable Output 
                                             %446 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %101 = OpLoad %47 
                                       f32_2 %102 = OpVectorShuffle %101 %101 1 1 
                              Uniform f32_4* %103 = OpAccessChain %23 %68 %26 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %102 %105 
                                       f32_4 %107 = OpLoad %65 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 2 3 
                                                      OpStore %65 %108 
                              Uniform f32_4* %109 = OpAccessChain %23 %68 %31 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_4 %112 = OpLoad %47 
                                       f32_2 %113 = OpVectorShuffle %112 %112 0 0 
                                       f32_2 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %65 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_2 %117 = OpFAdd %114 %116 
                                       f32_4 %118 = OpLoad %47 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 3 
                                                      OpStore %47 %119 
                              Uniform f32_4* %120 = OpAccessChain %23 %68 %39 
                                       f32_4 %121 = OpLoad %120 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_4 %123 = OpLoad %47 
                                       f32_2 %124 = OpVectorShuffle %123 %123 2 2 
                                       f32_2 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %47 
                                       f32_2 %127 = OpVectorShuffle %126 %126 0 1 
                                       f32_2 %128 = OpFAdd %125 %127 
                                       f32_4 %129 = OpLoad %47 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 2 3 
                                                      OpStore %47 %130 
                              Uniform f32_4* %131 = OpAccessChain %23 %68 %49 
                                       f32_4 %132 = OpLoad %131 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_4 %134 = OpLoad %47 
                                       f32_2 %135 = OpVectorShuffle %134 %134 3 3 
                                       f32_2 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %47 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFAdd %136 %138 
                                       f32_4 %140 = OpLoad %47 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 2 3 
                                                      OpStore %47 %141 
                                       f32_4 %142 = OpLoad %47 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                                       f32_2 %146 = OpFAdd %143 %145 
                                       f32_4 %147 = OpLoad %47 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 2 3 
                                                      OpStore %47 %148 
                                       f32_4 %149 = OpLoad %47 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_2 %153 = OpFMul %150 %152 
                                       f32_4 %154 = OpLoad %47 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 2 3 
                                                      OpStore %47 %155 
                                       f32_4 %158 = OpLoad %47 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                                       f32_2 %162 = OpFMul %159 %161 
                                       f32_2 %165 = OpFAdd %162 %164 
                                                      OpStore %157 %165 
                                       f32_4 %168 = OpLoad %167 
                                       f32_2 %169 = OpVectorShuffle %168 %168 0 1 
                              Uniform f32_4* %171 = OpAccessChain %23 %170 
                                       f32_4 %172 = OpLoad %171 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                                       f32_2 %174 = OpFMul %169 %173 
                              Uniform f32_4* %175 = OpAccessChain %23 %170 
                                       f32_4 %176 = OpLoad %175 
                                       f32_2 %177 = OpVectorShuffle %176 %176 2 3 
                                       f32_2 %178 = OpFAdd %174 %177 
                                                      OpStore %166 %178 
                                       f32_3 %181 = OpLoad %180 
                              Uniform f32_4* %183 = OpAccessChain %23 %182 %31 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %181 %185 
                                Private f32* %189 = OpAccessChain %47 %187 
                                                      OpStore %189 %186 
                                       f32_3 %190 = OpLoad %180 
                              Uniform f32_4* %191 = OpAccessChain %23 %182 %26 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %190 %193 
                                Private f32* %195 = OpAccessChain %47 %86 
                                                      OpStore %195 %194 
                                       f32_3 %196 = OpLoad %180 
                              Uniform f32_4* %197 = OpAccessChain %23 %182 %39 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                         f32 %200 = OpDot %196 %199 
                                Private f32* %202 = OpAccessChain %47 %201 
                                                      OpStore %202 %200 
                                       f32_4 %204 = OpLoad %47 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_4 %206 = OpLoad %47 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %205 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                         f32 %210 = OpExtInst %1 32 %209 
                                                      OpStore %203 %210 
                                         f32 %211 = OpLoad %203 
                                       f32_3 %212 = OpCompositeConstruct %211 %211 %211 
                                       f32_4 %213 = OpLoad %47 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_3 %215 = OpFMul %212 %214 
                                       f32_4 %216 = OpLoad %47 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %47 %217 
                                       f32_4 %220 = OpLoad %47 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                                      OpStore %219 %221 
                                       f32_4 %223 = OpLoad %9 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                                      OpStore %222 %224 
                                                      OpStore %225 %226 
                                Private f32* %229 = OpAccessChain %47 %86 
                                         f32 %230 = OpLoad %229 
                                Private f32* %231 = OpAccessChain %47 %86 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFMul %230 %232 
                                Private f32* %234 = OpAccessChain %228 %187 
                                                      OpStore %234 %233 
                                Private f32* %235 = OpAccessChain %47 %187 
                                         f32 %236 = OpLoad %235 
                                Private f32* %237 = OpAccessChain %47 %187 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFMul %236 %238 
                                Private f32* %240 = OpAccessChain %228 %187 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFNegate %241 
                                         f32 %243 = OpFAdd %239 %242 
                                Private f32* %244 = OpAccessChain %228 %187 
                                                      OpStore %244 %243 
                                       f32_4 %246 = OpLoad %47 
                                       f32_4 %247 = OpVectorShuffle %246 %246 1 2 2 0 
                                       f32_4 %248 = OpLoad %47 
                                       f32_4 %249 = OpVectorShuffle %248 %248 0 1 2 2 
                                       f32_4 %250 = OpFMul %247 %249 
                                                      OpStore %245 %250 
                              Uniform f32_4* %253 = OpAccessChain %23 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_4 %255 = OpLoad %245 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %251 %187 
                                                      OpStore %257 %256 
                              Uniform f32_4* %259 = OpAccessChain %23 %258 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpLoad %245 
                                         f32 %262 = OpDot %260 %261 
                                Private f32* %263 = OpAccessChain %251 %86 
                                                      OpStore %263 %262 
                              Uniform f32_4* %265 = OpAccessChain %23 %264 
                                       f32_4 %266 = OpLoad %265 
                                       f32_4 %267 = OpLoad %245 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %251 %201 
                                                      OpStore %269 %268 
                              Uniform f32_4* %271 = OpAccessChain %23 %270 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpLoad %228 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 0 0 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_3 %277 = OpLoad %251 
                                       f32_3 %278 = OpFAdd %276 %277 
                                                      OpStore %228 %278 
                                Private f32* %280 = OpAccessChain %47 %279 
                                                      OpStore %280 %144 
                              Uniform f32_4* %282 = OpAccessChain %23 %281 
                                       f32_4 %283 = OpLoad %282 
                                       f32_4 %284 = OpLoad %47 
                                         f32 %285 = OpDot %283 %284 
                                Private f32* %286 = OpAccessChain %251 %187 
                                                      OpStore %286 %285 
                              Uniform f32_4* %288 = OpAccessChain %23 %287 
                                       f32_4 %289 = OpLoad %288 
                                       f32_4 %290 = OpLoad %47 
                                         f32 %291 = OpDot %289 %290 
                                Private f32* %292 = OpAccessChain %251 %86 
                                                      OpStore %292 %291 
                              Uniform f32_4* %294 = OpAccessChain %23 %293 
                                       f32_4 %295 = OpLoad %294 
                                       f32_4 %296 = OpLoad %47 
                                         f32 %297 = OpDot %295 %296 
                                Private f32* %298 = OpAccessChain %251 %201 
                                                      OpStore %298 %297 
                                       f32_3 %299 = OpLoad %228 
                                       f32_3 %300 = OpLoad %251 
                                       f32_3 %301 = OpFAdd %299 %300 
                                                      OpStore %228 %301 
                                       f32_3 %302 = OpLoad %228 
                                       f32_3 %304 = OpExtInst %1 40 %302 %303 
                                                      OpStore %228 %304 
                                       f32_3 %306 = OpLoad %228 
                                       f32_3 %307 = OpExtInst %1 30 %306 
                                                      OpStore %305 %307 
                                       f32_3 %308 = OpLoad %305 
                                       f32_3 %311 = OpFMul %308 %310 
                                                      OpStore %305 %311 
                                       f32_3 %312 = OpLoad %305 
                                       f32_3 %313 = OpExtInst %1 29 %312 
                                                      OpStore %305 %313 
                                       f32_3 %314 = OpLoad %305 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_3 %320 = OpFAdd %317 %319 
                                                      OpStore %305 %320 
                                       f32_3 %321 = OpLoad %305 
                                       f32_3 %322 = OpExtInst %1 40 %321 %303 
                                                      OpStore %305 %322 
                                       f32_4 %323 = OpLoad %9 
                                       f32_4 %324 = OpVectorShuffle %323 %323 1 1 1 1 
                                       f32_4 %325 = OpFNegate %324 
                              Uniform f32_4* %326 = OpAccessChain %23 %26 
                                       f32_4 %327 = OpLoad %326 
                                       f32_4 %328 = OpFAdd %325 %327 
                                                      OpStore %65 %328 
                                       f32_4 %330 = OpLoad %47 
                                       f32_4 %331 = OpVectorShuffle %330 %330 1 1 1 1 
                                       f32_4 %332 = OpLoad %65 
                                       f32_4 %333 = OpFMul %331 %332 
                                                      OpStore %329 %333 
                                       f32_4 %334 = OpLoad %65 
                                       f32_4 %335 = OpLoad %65 
                                       f32_4 %336 = OpFMul %334 %335 
                                                      OpStore %65 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_4 %339 = OpVectorShuffle %338 %338 0 0 0 0 
                                       f32_4 %340 = OpFNegate %339 
                              Uniform f32_4* %341 = OpAccessChain %23 %31 
                                       f32_4 %342 = OpLoad %341 
                                       f32_4 %343 = OpFAdd %340 %342 
                                                      OpStore %337 %343 
                                       f32_4 %344 = OpLoad %9 
                                       f32_4 %345 = OpVectorShuffle %344 %344 2 2 2 2 
                                       f32_4 %346 = OpFNegate %345 
                              Uniform f32_4* %347 = OpAccessChain %23 %39 
                                       f32_4 %348 = OpLoad %347 
                                       f32_4 %349 = OpFAdd %346 %348 
                                                      OpStore %9 %349 
                                       f32_4 %350 = OpLoad %337 
                                       f32_4 %351 = OpLoad %47 
                                       f32_4 %352 = OpVectorShuffle %351 %351 0 0 0 0 
                                       f32_4 %353 = OpFMul %350 %352 
                                       f32_4 %354 = OpLoad %329 
                                       f32_4 %355 = OpFAdd %353 %354 
                                                      OpStore %329 %355 
                                       f32_4 %356 = OpLoad %9 
                                       f32_4 %357 = OpLoad %47 
                                       f32_4 %358 = OpVectorShuffle %357 %357 2 2 2 2 
                                       f32_4 %359 = OpFMul %356 %358 
                                       f32_4 %360 = OpLoad %329 
                                       f32_4 %361 = OpFAdd %359 %360 
                                                      OpStore %47 %361 
                                       f32_4 %362 = OpLoad %337 
                                       f32_4 %363 = OpLoad %337 
                                       f32_4 %364 = OpFMul %362 %363 
                                       f32_4 %365 = OpLoad %65 
                                       f32_4 %366 = OpFAdd %364 %365 
                                                      OpStore %65 %366 
                                       f32_4 %367 = OpLoad %9 
                                       f32_4 %368 = OpLoad %9 
                                       f32_4 %369 = OpFMul %367 %368 
                                       f32_4 %370 = OpLoad %65 
                                       f32_4 %371 = OpFAdd %369 %370 
                                                      OpStore %9 %371 
                                       f32_4 %372 = OpLoad %9 
                                       f32_4 %375 = OpExtInst %1 40 %372 %374 
                                                      OpStore %9 %375 
                                       f32_4 %376 = OpLoad %9 
                                       f32_4 %377 = OpExtInst %1 32 %376 
                                                      OpStore %65 %377 
                                       f32_4 %378 = OpLoad %9 
                              Uniform f32_4* %379 = OpAccessChain %23 %49 
                                       f32_4 %380 = OpLoad %379 
                                       f32_4 %381 = OpFMul %378 %380 
                                       f32_4 %383 = OpFAdd %381 %382 
                                                      OpStore %9 %383 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpFDiv %382 %384 
                                                      OpStore %9 %385 
                                       f32_4 %386 = OpLoad %47 
                                       f32_4 %387 = OpLoad %65 
                                       f32_4 %388 = OpFMul %386 %387 
                                                      OpStore %47 %388 
                                       f32_4 %389 = OpLoad %47 
                                       f32_4 %390 = OpExtInst %1 40 %389 %226 
                                                      OpStore %47 %390 
                                       f32_4 %391 = OpLoad %9 
                                       f32_4 %392 = OpLoad %47 
                                       f32_4 %393 = OpFMul %391 %392 
                                                      OpStore %9 %393 
                                       f32_4 %394 = OpLoad %9 
                                       f32_3 %395 = OpVectorShuffle %394 %394 1 1 1 
                              Uniform f32_4* %397 = OpAccessChain %23 %396 %26 
                                       f32_4 %398 = OpLoad %397 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                       f32_3 %400 = OpFMul %395 %399 
                                       f32_4 %401 = OpLoad %47 
                                       f32_4 %402 = OpVectorShuffle %401 %400 4 5 6 3 
                                                      OpStore %47 %402 
                              Uniform f32_4* %403 = OpAccessChain %23 %396 %31 
                                       f32_4 %404 = OpLoad %403 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                       f32_4 %406 = OpLoad %9 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 0 0 
                                       f32_3 %408 = OpFMul %405 %407 
                                       f32_4 %409 = OpLoad %47 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
                                       f32_3 %411 = OpFAdd %408 %410 
                                       f32_4 %412 = OpLoad %47 
                                       f32_4 %413 = OpVectorShuffle %412 %411 4 5 6 3 
                                                      OpStore %47 %413 
                              Uniform f32_4* %414 = OpAccessChain %23 %396 %39 
                                       f32_4 %415 = OpLoad %414 
                                       f32_3 %416 = OpVectorShuffle %415 %415 0 1 2 
                                       f32_4 %417 = OpLoad %9 
                                       f32_3 %418 = OpVectorShuffle %417 %417 2 2 2 
                                       f32_3 %419 = OpFMul %416 %418 
                                       f32_4 %420 = OpLoad %47 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                                       f32_3 %422 = OpFAdd %419 %421 
                                       f32_4 %423 = OpLoad %9 
                                       f32_4 %424 = OpVectorShuffle %423 %422 4 5 6 3 
                                                      OpStore %9 %424 
                              Uniform f32_4* %425 = OpAccessChain %23 %396 %49 
                                       f32_4 %426 = OpLoad %425 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_4 %428 = OpLoad %9 
                                       f32_3 %429 = OpVectorShuffle %428 %428 3 3 3 
                                       f32_3 %430 = OpFMul %427 %429 
                                       f32_4 %431 = OpLoad %9 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                       f32_3 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad %9 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 6 3 
                                                      OpStore %9 %435 
                                       f32_4 %436 = OpLoad %9 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                       f32_3 %438 = OpLoad %305 
                                       f32_3 %439 = OpFAdd %437 %438 
                                       f32_4 %440 = OpLoad %9 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 5 6 3 
                                                      OpStore %9 %441 
                                       f32_4 %443 = OpLoad %9 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                                      OpStore %442 %444 
                                                      OpStore %445 %226 
                                 Output f32* %447 = OpAccessChain %90 %31 %86 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpFNegate %448 
                                 Output f32* %450 = OpAccessChain %90 %31 %86 
                                                      OpStore %450 %449 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 648
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %120 %234 %359 %365 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpMemberDecorate %27 0 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 RelaxedPrecision 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpMemberDecorate %27 8 Offset 27 
                                                      OpMemberDecorate %27 9 Offset 27 
                                                      OpMemberDecorate %27 10 Offset 27 
                                                      OpMemberDecorate %27 11 RelaxedPrecision 
                                                      OpMemberDecorate %27 11 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %118 DescriptorSet 118 
                                                      OpDecorate %118 Binding 118 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %120 Location 120 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %226 SpecId 226 
                                                      OpDecorate %234 Location 234 
                                                      OpDecorate %324 DescriptorSet 324 
                                                      OpDecorate %324 Binding 324 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %359 Location 359 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %365 Location 365 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %593 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeVector %6 3 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %7 %25 
                                              %27 = OpTypeStruct %7 %7 %26 %21 %21 %7 %6 %6 %7 %6 %6 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32_4; f32; f32; f32;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 8 
                                              %32 = OpTypePointer Uniform %7 
                                          u32 %47 = OpConstant 1 
                                              %48 = OpTypePointer Private %6 
                                          u32 %51 = OpConstant 0 
                                          u32 %56 = OpConstant 2 
                                              %70 = OpTypeBool 
                                              %71 = OpTypePointer Private %70 
                                Private bool* %72 = OpVariable Private 
                                          i32 %75 = OpConstant 9 
                                              %76 = OpTypePointer Uniform %6 
                               Private f32_4* %80 = OpVariable Private 
                                          f32 %83 = OpConstant 3.674022E-40 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                        f32_3 %86 = OpConstantComposite %83 %84 %85 
                                              %89 = OpTypePointer Private %15 
                               Private f32_2* %90 = OpVariable Private 
                                          f32 %98 = OpConstant 3.674022E-40 
                                        f32_2 %99 = OpConstantComposite %98 %98 
                                Private f32* %101 = OpVariable Private 
                                         f32 %114 = OpConstant 3.674022E-40 
                                             %116 = OpTypePointer Private %21 
                              Private f32_3* %117 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %118 = OpVariable UniformConstant 
                                Input f32_2* %120 = OpVariable Input 
                              Private f32_2* %124 = OpVariable Private 
                                         f32 %125 = OpConstant 3.674022E-40 
                                       f32_2 %126 = OpConstantComposite %125 %125 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_2 %128 = OpConstantComposite %98 %127 
                                             %130 = OpTypeVector %70 2 
                              Private f32_3* %134 = OpVariable Private 
                              Private f32_4* %140 = OpVariable Private 
                                         i32 %159 = OpConstant 7 
                                         i32 %181 = OpConstant 6 
                              Private f32_2* %188 = OpVariable Private 
                                         u32 %194 = OpConstant 3 
                                         i32 %197 = OpConstant 11 
                               Private bool* %203 = OpVariable Private 
                                         i32 %208 = OpConstant 0 
                                         i32 %209 = OpConstant 1 
                                         i32 %211 = OpConstant -1 
                                        bool %220 = OpConstantFalse 
                                        bool %226 = OpSpecConstantFalse 
                              Private f32_4* %232 = OpVariable Private 
                                             %233 = OpTypePointer Input %21 
                                Input f32_3* %234 = OpVariable Input 
                                         i32 %237 = OpConstant 2 
                                         i32 %268 = OpConstant 3 
                                             %275 = OpTypePointer Function %21 
                                         i32 %289 = OpConstant 4 
                                             %290 = OpTypePointer Uniform %21 
                              Private f32_4* %297 = OpVariable Private 
                                Private f32* %305 = OpVariable Private 
                                         f32 %308 = OpConstant 3.674022E-40 
                                Private f32* %311 = OpVariable Private 
                                         f32 %314 = OpConstant 3.674022E-40 
                                             %321 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %322 = OpTypeSampledImage %321 
                                             %323 = OpTypePointer UniformConstant %322 
 UniformConstant read_only Texture3DSampled* %324 = OpVariable UniformConstant 
                              Private f32_3* %335 = OpVariable Private 
                              Private f32_3* %345 = OpVariable Private 
                                         i32 %348 = OpConstant 5 
                                Input f32_3* %359 = OpVariable Input 
                                             %364 = OpTypePointer Output %7 
                               Output f32_4* %365 = OpVariable Output 
                                             %368 = OpTypePointer Output %6 
                               Private bool* %377 = OpVariable Private 
                                Private f32* %383 = OpVariable Private 
                                             %384 = OpTypePointer Function %6 
                              Private f32_2* %391 = OpVariable Private 
                                         f32 %399 = OpConstant 3.674022E-40 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_2 %416 = OpConstantComposite %399 %415 
                                Private f32* %487 = OpVariable Private 
                                         f32 %490 = OpConstant 3.674022E-40 
                                         f32 %492 = OpConstant 3.674022E-40 
                                Private f32* %519 = OpVariable Private 
                              Private f32_3* %526 = OpVariable Private 
                               Private bool* %534 = OpVariable Private 
                                Private f32* %540 = OpVariable Private 
                              Private f32_3* %547 = OpVariable Private 
                                         i32 %565 = OpConstant 10 
                                Private f32* %576 = OpVariable Private 
                                         f32 %590 = OpConstant 3.674022E-40 
                                         f32 %597 = OpConstant 3.674022E-40 
                                       f32_3 %598 = OpConstantComposite %98 %415 %597 
                                       f32_3 %603 = OpConstantComposite %490 %490 %490 
                                         f32 %605 = OpConstant 3.674022E-40 
                                       f32_3 %606 = OpConstantComposite %605 %605 %605 
                                       f32_3 %610 = OpConstantComposite %399 %399 %399 
                                       f32_3 %622 = OpConstantComposite %98 %98 %98 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %276 = OpVariable Function 
                               Function f32* %385 = OpVariable Function 
                               Function f32* %425 = OpVariable Function 
                               Function f32* %513 = OpVariable Function 
                               Function f32* %541 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %22 = OpLoad %9 
                                        f32_3 %23 = OpVectorShuffle %22 %22 0 1 2 
                               Uniform f32_4* %33 = OpAccessChain %29 %31 
                                        f32_4 %34 = OpLoad %33 
                                        f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                        f32_3 %36 = OpFNegate %35 
                                        f32_3 %37 = OpFAdd %23 %36 
                                        f32_4 %38 = OpLoad %20 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 6 3 
                                                      OpStore %20 %39 
                                        f32_4 %40 = OpLoad %20 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                                        f32_4 %42 = OpLoad %20 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_2 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %20 
                                        f32_4 %46 = OpVectorShuffle %45 %44 4 5 2 3 
                                                      OpStore %20 %46 
                                 Private f32* %49 = OpAccessChain %20 %47 
                                          f32 %50 = OpLoad %49 
                                 Private f32* %52 = OpAccessChain %20 %51 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFAdd %50 %53 
                                 Private f32* %55 = OpAccessChain %20 %51 
                                                      OpStore %55 %54 
                                 Private f32* %57 = OpAccessChain %20 %56 
                                          f32 %58 = OpLoad %57 
                                 Private f32* %59 = OpAccessChain %20 %56 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %58 %60 
                                 Private f32* %62 = OpAccessChain %20 %51 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %20 %51 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %20 %51 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpExtInst %1 31 %67 
                                 Private f32* %69 = OpAccessChain %20 %51 
                                                      OpStore %69 %68 
                                 Private f32* %73 = OpAccessChain %20 %51 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %77 = OpAccessChain %29 %75 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %74 %78 
                                                      OpStore %72 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                          f32 %87 = OpDot %82 %86 
                                 Private f32* %88 = OpAccessChain %80 %51 
                                                      OpStore %88 %87 
                                        f32_4 %91 = OpLoad %9 
                                        f32_2 %92 = OpVectorShuffle %91 %91 0 2 
                                        f32_4 %93 = OpLoad %80 
                                        f32_2 %94 = OpVectorShuffle %93 %93 0 0 
                                        f32_2 %95 = OpFNegate %94 
                                        f32_2 %96 = OpFAdd %92 %95 
                                                      OpStore %90 %96 
                                        f32_2 %97 = OpLoad %90 
                                       f32_2 %100 = OpFAdd %97 %99 
                                                      OpStore %90 %100 
                                Private f32* %102 = OpAccessChain %90 %51 
                                         f32 %103 = OpLoad %102 
                                         f32 %104 = OpFNegate %103 
                                         f32 %105 = OpFMul %104 %83 
                                         f32 %106 = OpFAdd %105 %98 
                                                      OpStore %101 %106 
                                Private f32* %107 = OpAccessChain %90 %47 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFNegate %108 
                                         f32 %110 = OpFMul %109 %85 
                                         f32 %111 = OpLoad %101 
                                         f32 %112 = OpFAdd %110 %111 
                                                      OpStore %101 %112 
                                         f32 %113 = OpLoad %101 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %101 %115 
                  read_only Texture2DSampled %119 = OpLoad %118 
                                       f32_2 %121 = OpLoad %120 
                                       f32_4 %122 = OpImageSampleImplicitLod %119 %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                                      OpStore %117 %123 
                                        bool %129 = OpLoad %72 
                                      bool_2 %131 = OpCompositeConstruct %129 %129 
                                       f32_2 %132 = OpSelect %131 %99 %126 
                                       f32_2 %133 = OpExtInst %1 46 %126 %128 %132 
                                                      OpStore %124 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %137 = OpFNegate %136 
                                       f32_3 %138 = OpLoad %117 
                                       f32_3 %139 = OpFAdd %137 %138 
                                                      OpStore %134 %139 
                                       f32_2 %141 = OpLoad %124 
                                       f32_3 %142 = OpVectorShuffle %141 %141 1 1 1 
                                       f32_3 %143 = OpLoad %134 
                                       f32_3 %144 = OpFMul %142 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFAdd %144 %146 
                                       f32_4 %148 = OpLoad %140 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %140 %149 
                                       f32_2 %150 = OpLoad %90 
                                       f32_2 %151 = OpExtInst %1 30 %150 
                                       f32_4 %152 = OpLoad %20 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 1 5 3 
                                                      OpStore %20 %153 
                                         f32 %154 = OpLoad %101 
                                         f32 %155 = OpExtInst %1 30 %154 
                                Private f32* %156 = OpAccessChain %20 %47 
                                                      OpStore %156 %155 
                                       f32_4 %157 = OpLoad %20 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Uniform f32* %160 = OpAccessChain %29 %159 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %162 = OpAccessChain %29 %159 
                                         f32 %163 = OpLoad %162 
                                Uniform f32* %164 = OpAccessChain %29 %159 
                                         f32 %165 = OpLoad %164 
                                       f32_3 %166 = OpCompositeConstruct %161 %163 %165 
                                         f32 %167 = OpCompositeExtract %166 0 
                                         f32 %168 = OpCompositeExtract %166 1 
                                         f32 %169 = OpCompositeExtract %166 2 
                                       f32_3 %170 = OpCompositeConstruct %167 %168 %169 
                                       f32_3 %171 = OpFMul %158 %170 
                                       f32_4 %172 = OpLoad %20 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %20 %173 
                                       f32_4 %174 = OpLoad %20 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpExtInst %1 29 %175 
                                       f32_4 %177 = OpLoad %20 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %20 %178 
                                       f32_4 %179 = OpLoad %20 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                Uniform f32* %182 = OpAccessChain %29 %181 
                                         f32 %183 = OpLoad %182 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_3 %185 = OpFMul %180 %184 
                                       f32_4 %186 = OpLoad %20 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %20 %187 
                                       f32_2 %189 = OpLoad %124 
                                       f32_2 %190 = OpVectorShuffle %189 %189 0 0 
                                       f32_4 %191 = OpLoad %20 
                                       f32_2 %192 = OpVectorShuffle %191 %191 0 1 
                                       f32_2 %193 = OpFMul %190 %192 
                                                      OpStore %188 %193 
                                Private f32* %195 = OpAccessChain %9 %194 
                                         f32 %196 = OpLoad %195 
                                Uniform f32* %198 = OpAccessChain %29 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %196 %200 
                                Private f32* %202 = OpAccessChain %80 %51 
                                                      OpStore %202 %201 
                                Private f32* %204 = OpAccessChain %80 %51 
                                         f32 %205 = OpLoad %204 
                                        bool %206 = OpFOrdLessThan %205 %125 
                                                      OpStore %203 %206 
                                        bool %207 = OpLoad %203 
                                         i32 %210 = OpSelect %207 %209 %208 
                                         i32 %212 = OpIMul %210 %211 
                                        bool %213 = OpINotEqual %212 %208 
                                                      OpSelectionMerge %215 None 
                                                      OpBranchConditional %213 %214 %215 
                                             %214 = OpLabel 
                                                      OpKill
                                             %215 = OpLabel 
                                Uniform f32* %217 = OpAccessChain %29 %209 %51 
                                         f32 %218 = OpLoad %217 
                                        bool %219 = OpFOrdEqual %218 %98 
                                                      OpStore %203 %219 
                                                      OpSelectionMerge %222 None 
                                                      OpBranchConditional %220 %221 %222 
                                             %221 = OpLabel 
                                        bool %223 = OpLoad %203 
                                                      OpSelectionMerge %225 None 
                                                      OpBranchConditional %223 %224 %225 
                                             %224 = OpLabel 
                                                      OpBranch %225 
                                             %225 = OpLabel 
                                                      OpBranch %222 
                                             %222 = OpLabel 
                                                      OpSelectionMerge %228 None 
                                                      OpBranchConditional %226 %227 %330 
                                             %227 = OpLabel 
                                Uniform f32* %229 = OpAccessChain %29 %209 %47 
                                         f32 %230 = OpLoad %229 
                                        bool %231 = OpFOrdEqual %230 %98 
                                                      OpStore %203 %231 
                                       f32_3 %235 = OpLoad %234 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                              Uniform f32_4* %238 = OpAccessChain %29 %237 %209 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %236 %240 
                                       f32_4 %242 = OpLoad %232 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %232 %243 
                              Uniform f32_4* %244 = OpAccessChain %29 %237 %208 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpLoad %234 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %232 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %232 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %232 %254 
                              Uniform f32_4* %255 = OpAccessChain %29 %237 %237 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpLoad %234 
                                       f32_3 %259 = OpVectorShuffle %258 %258 2 2 2 
                                       f32_3 %260 = OpFMul %257 %259 
                                       f32_4 %261 = OpLoad %232 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFAdd %260 %262 
                                       f32_4 %264 = OpLoad %232 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %232 %265 
                                       f32_4 %266 = OpLoad %232 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                              Uniform f32_4* %269 = OpAccessChain %29 %237 %268 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_3 %272 = OpFAdd %267 %271 
                                       f32_4 %273 = OpLoad %232 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
                                                      OpStore %232 %274 
                                        bool %277 = OpLoad %203 
                                                      OpSelectionMerge %279 None 
                                                      OpBranchConditional %277 %278 %282 
                                             %278 = OpLabel 
                                       f32_4 %280 = OpLoad %232 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                                      OpStore %276 %281 
                                                      OpBranch %279 
                                             %282 = OpLabel 
                                       f32_3 %283 = OpLoad %234 
                                                      OpStore %276 %283 
                                                      OpBranch %279 
                                             %279 = OpLabel 
                                       f32_3 %284 = OpLoad %276 
                                       f32_4 %285 = OpLoad %232 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %232 %286 
                                       f32_4 %287 = OpLoad %232 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                              Uniform f32_3* %291 = OpAccessChain %29 %289 
                                       f32_3 %292 = OpLoad %291 
                                       f32_3 %293 = OpFNegate %292 
                                       f32_3 %294 = OpFAdd %288 %293 
                                       f32_4 %295 = OpLoad %232 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %232 %296 
                                       f32_4 %298 = OpLoad %232 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                              Uniform f32_3* %300 = OpAccessChain %29 %268 
                                       f32_3 %301 = OpLoad %300 
                                       f32_3 %302 = OpFMul %299 %301 
                                       f32_4 %303 = OpLoad %297 
                                       f32_4 %304 = OpVectorShuffle %303 %302 0 4 5 6 
                                                      OpStore %297 %304 
                                Private f32* %306 = OpAccessChain %297 %47 
                                         f32 %307 = OpLoad %306 
                                         f32 %309 = OpFMul %307 %308 
                                         f32 %310 = OpFAdd %309 %127 
                                                      OpStore %305 %310 
                                Uniform f32* %312 = OpAccessChain %29 %209 %56 
                                         f32 %313 = OpLoad %312 
                                         f32 %315 = OpFMul %313 %314 
                                         f32 %316 = OpFAdd %315 %127 
                                                      OpStore %311 %316 
                                         f32 %317 = OpLoad %305 
                                         f32 %318 = OpLoad %311 
                                         f32 %319 = OpExtInst %1 40 %317 %318 
                                Private f32* %320 = OpAccessChain %297 %51 
                                                      OpStore %320 %319 
                  read_only Texture3DSampled %325 = OpLoad %324 
                                       f32_4 %326 = OpLoad %297 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 2 3 
                                       f32_4 %328 = OpImageSampleImplicitLod %325 %327 
                                                      OpStore %297 %328 
                                       f32_4 %329 = OpLoad %297 
                                                      OpStore %80 %329 
                                                      OpBranch %228 
                                             %330 = OpLabel 
                                Private f32* %331 = OpAccessChain %80 %51 
                                                      OpStore %331 %98 
                                Private f32* %332 = OpAccessChain %80 %47 
                                                      OpStore %332 %98 
                                Private f32* %333 = OpAccessChain %80 %56 
                                                      OpStore %333 %98 
                                Private f32* %334 = OpAccessChain %80 %194 
                                                      OpStore %334 %98 
                                                      OpBranch %228 
                                             %228 = OpLabel 
                                       f32_4 %336 = OpLoad %80 
                              Uniform f32_4* %337 = OpAccessChain %29 %208 
                                       f32_4 %338 = OpLoad %337 
                                         f32 %339 = OpDot %336 %338 
                                Private f32* %340 = OpAccessChain %335 %51 
                                                      OpStore %340 %339 
                                Private f32* %341 = OpAccessChain %335 %51 
                                         f32 %342 = OpLoad %341 
                                         f32 %343 = OpExtInst %1 43 %342 %125 %98 
                                Private f32* %344 = OpAccessChain %335 %51 
                                                      OpStore %344 %343 
                                       f32_4 %346 = OpLoad %140 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                              Uniform f32_4* %349 = OpAccessChain %29 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFMul %347 %351 
                                                      OpStore %345 %352 
                                       f32_3 %353 = OpLoad %335 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 0 0 
                                       f32_3 %355 = OpLoad %345 
                                       f32_3 %356 = OpFMul %354 %355 
                                                      OpStore %335 %356 
                                       f32_4 %357 = OpLoad %140 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %360 = OpLoad %359 
                                       f32_3 %361 = OpFMul %358 %360 
                                       f32_3 %362 = OpLoad %335 
                                       f32_3 %363 = OpFAdd %361 %362 
                                                      OpStore %335 %363 
                                Private f32* %366 = OpAccessChain %9 %194 
                                         f32 %367 = OpLoad %366 
                                 Output f32* %369 = OpAccessChain %365 %194 
                                                      OpStore %369 %367 
                                       f32_4 %370 = OpLoad %20 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_2 %372 = OpLoad %124 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 0 0 
                                       f32_3 %374 = OpFMul %371 %373 
                                       f32_3 %375 = OpLoad %335 
                                       f32_3 %376 = OpFAdd %374 %375 
                                                      OpStore %335 %376 
                                Private f32* %378 = OpAccessChain %335 %47 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %335 %56 
                                         f32 %381 = OpLoad %380 
                                        bool %382 = OpFOrdGreaterThanEqual %379 %381 
                                                      OpStore %377 %382 
                                        bool %386 = OpLoad %377 
                                                      OpSelectionMerge %388 None 
                                                      OpBranchConditional %386 %387 %389 
                                             %387 = OpLabel 
                                                      OpStore %385 %98 
                                                      OpBranch %388 
                                             %389 = OpLabel 
                                                      OpStore %385 %125 
                                                      OpBranch %388 
                                             %388 = OpLabel 
                                         f32 %390 = OpLoad %385 
                                                      OpStore %383 %390 
                                       f32_3 %392 = OpLoad %335 
                                       f32_2 %393 = OpVectorShuffle %392 %392 2 1 
                                       f32_2 %394 = OpFNegate %393 
                                       f32_3 %395 = OpLoad %335 
                                       f32_2 %396 = OpVectorShuffle %395 %395 1 2 
                                       f32_2 %397 = OpFAdd %394 %396 
                                                      OpStore %391 %397 
                                Private f32* %398 = OpAccessChain %140 %51 
                                                      OpStore %398 %98 
                                Private f32* %400 = OpAccessChain %140 %47 
                                                      OpStore %400 %399 
                                         f32 %401 = OpLoad %383 
                                       f32_2 %402 = OpCompositeConstruct %401 %401 
                                       f32_2 %403 = OpLoad %391 
                                       f32_2 %404 = OpFMul %402 %403 
                                       f32_3 %405 = OpLoad %335 
                                       f32_2 %406 = OpVectorShuffle %405 %405 2 1 
                                       f32_2 %407 = OpFAdd %404 %406 
                                       f32_4 %408 = OpLoad %297 
                                       f32_4 %409 = OpVectorShuffle %408 %407 4 5 2 3 
                                                      OpStore %297 %409 
                                         f32 %410 = OpLoad %383 
                                       f32_2 %411 = OpCompositeConstruct %410 %410 
                                       f32_4 %412 = OpLoad %140 
                                       f32_2 %413 = OpVectorShuffle %412 %412 0 1 
                                       f32_2 %414 = OpFMul %411 %413 
                                       f32_2 %417 = OpFAdd %414 %416 
                                       f32_4 %418 = OpLoad %297 
                                       f32_4 %419 = OpVectorShuffle %418 %417 0 1 4 5 
                                                      OpStore %297 %419 
                                Private f32* %420 = OpAccessChain %335 %51 
                                         f32 %421 = OpLoad %420 
                                Private f32* %422 = OpAccessChain %297 %51 
                                         f32 %423 = OpLoad %422 
                                        bool %424 = OpFOrdGreaterThanEqual %421 %423 
                                                      OpStore %377 %424 
                                        bool %426 = OpLoad %377 
                                                      OpSelectionMerge %428 None 
                                                      OpBranchConditional %426 %427 %429 
                                             %427 = OpLabel 
                                                      OpStore %425 %98 
                                                      OpBranch %428 
                                             %429 = OpLabel 
                                                      OpStore %425 %125 
                                                      OpBranch %428 
                                             %428 = OpLabel 
                                         f32 %430 = OpLoad %425 
                                                      OpStore %383 %430 
                                       f32_4 %431 = OpLoad %297 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 3 
                                       f32_3 %433 = OpFNegate %432 
                                       f32_4 %434 = OpLoad %140 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 6 3 
                                                      OpStore %140 %435 
                                Private f32* %436 = OpAccessChain %335 %51 
                                         f32 %437 = OpLoad %436 
                                         f32 %438 = OpFNegate %437 
                                Private f32* %439 = OpAccessChain %140 %194 
                                                      OpStore %439 %438 
                                Private f32* %440 = OpAccessChain %140 %51 
                                         f32 %441 = OpLoad %440 
                                Private f32* %442 = OpAccessChain %335 %51 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpFAdd %441 %443 
                                Private f32* %445 = OpAccessChain %232 %51 
                                                      OpStore %445 %444 
                                       f32_4 %446 = OpLoad %297 
                                       f32_3 %447 = OpVectorShuffle %446 %446 1 2 0 
                                       f32_4 %448 = OpLoad %140 
                                       f32_3 %449 = OpVectorShuffle %448 %448 1 2 3 
                                       f32_3 %450 = OpFAdd %447 %449 
                                       f32_4 %451 = OpLoad %232 
                                       f32_4 %452 = OpVectorShuffle %451 %450 0 4 5 6 
                                                      OpStore %232 %452 
                                         f32 %453 = OpLoad %383 
                                       f32_3 %454 = OpCompositeConstruct %453 %453 %453 
                                       f32_4 %455 = OpLoad %232 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpFMul %454 %456 
                                       f32_4 %458 = OpLoad %297 
                                       f32_3 %459 = OpVectorShuffle %458 %458 0 1 3 
                                       f32_3 %460 = OpFAdd %457 %459 
                                       f32_4 %461 = OpLoad %20 
                                       f32_4 %462 = OpVectorShuffle %461 %460 4 5 2 6 
                                                      OpStore %20 %462 
                                         f32 %463 = OpLoad %383 
                                Private f32* %464 = OpAccessChain %232 %194 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpFMul %463 %465 
                                Private f32* %467 = OpAccessChain %335 %51 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFAdd %466 %468 
                                                      OpStore %383 %469 
                                Private f32* %470 = OpAccessChain %20 %47 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpLoad %383 
                                         f32 %473 = OpExtInst %1 37 %471 %472 
                                Private f32* %474 = OpAccessChain %140 %51 
                                                      OpStore %474 %473 
                                Private f32* %475 = OpAccessChain %20 %51 
                                         f32 %476 = OpLoad %475 
                                Private f32* %477 = OpAccessChain %140 %51 
                                         f32 %478 = OpLoad %477 
                                         f32 %479 = OpFNegate %478 
                                         f32 %480 = OpFAdd %476 %479 
                                Private f32* %481 = OpAccessChain %140 %51 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %20 %47 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpLoad %383 
                                         f32 %486 = OpFAdd %484 %485 
                                                      OpStore %383 %486 
                                Private f32* %488 = OpAccessChain %140 %51 
                                         f32 %489 = OpLoad %488 
                                         f32 %491 = OpFMul %489 %490 
                                         f32 %493 = OpFAdd %491 %492 
                                                      OpStore %487 %493 
                                         f32 %494 = OpLoad %383 
                                         f32 %495 = OpLoad %487 
                                         f32 %496 = OpFDiv %494 %495 
                                                      OpStore %383 %496 
                                         f32 %497 = OpLoad %383 
                                Private f32* %498 = OpAccessChain %20 %194 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFAdd %497 %499 
                                                      OpStore %383 %500 
                                Private f32* %501 = OpAccessChain %20 %51 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %502 %492 
                                                      OpStore %487 %503 
                                Private f32* %504 = OpAccessChain %140 %51 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpLoad %487 
                                         f32 %507 = OpFDiv %505 %506 
                                                      OpStore %487 %507 
                                Private f32* %508 = OpAccessChain %9 %47 
                                         f32 %509 = OpLoad %508 
                                Private f32* %510 = OpAccessChain %9 %56 
                                         f32 %511 = OpLoad %510 
                                        bool %512 = OpFOrdGreaterThanEqual %509 %511 
                                                      OpStore %203 %512 
                                        bool %514 = OpLoad %203 
                                                      OpSelectionMerge %516 None 
                                                      OpBranchConditional %514 %515 %517 
                                             %515 = OpLabel 
                                                      OpStore %513 %98 
                                                      OpBranch %516 
                                             %517 = OpLabel 
                                                      OpStore %513 %125 
                                                      OpBranch %516 
                                             %516 = OpLabel 
                                         f32 %518 = OpLoad %513 
                                                      OpStore %305 %518 
                                Private f32* %520 = OpAccessChain %9 %56 
                                         f32 %521 = OpLoad %520 
                                         f32 %522 = OpFNegate %521 
                                Private f32* %523 = OpAccessChain %9 %47 
                                         f32 %524 = OpLoad %523 
                                         f32 %525 = OpFAdd %522 %524 
                                                      OpStore %519 %525 
                                         f32 %527 = OpLoad %305 
                                         f32 %528 = OpLoad %519 
                                         f32 %529 = OpFMul %527 %528 
                                Private f32* %530 = OpAccessChain %9 %56 
                                         f32 %531 = OpLoad %530 
                                         f32 %532 = OpFAdd %529 %531 
                                Private f32* %533 = OpAccessChain %526 %51 
                                                      OpStore %533 %532 
                                Private f32* %535 = OpAccessChain %9 %51 
                                         f32 %536 = OpLoad %535 
                                Private f32* %537 = OpAccessChain %526 %51 
                                         f32 %538 = OpLoad %537 
                                        bool %539 = OpFOrdGreaterThanEqual %536 %538 
                                                      OpStore %534 %539 
                                        bool %542 = OpLoad %534 
                                                      OpSelectionMerge %544 None 
                                                      OpBranchConditional %542 %543 %545 
                                             %543 = OpLabel 
                                                      OpStore %541 %98 
                                                      OpBranch %544 
                                             %545 = OpLabel 
                                                      OpStore %541 %125 
                                                      OpBranch %544 
                                             %544 = OpLabel 
                                         f32 %546 = OpLoad %541 
                                                      OpStore %540 %546 
                                Private f32* %548 = OpAccessChain %526 %51 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFNegate %549 
                                Private f32* %551 = OpAccessChain %9 %51 
                                         f32 %552 = OpLoad %551 
                                         f32 %553 = OpFAdd %550 %552 
                                Private f32* %554 = OpAccessChain %547 %51 
                                                      OpStore %554 %553 
                                         f32 %555 = OpLoad %540 
                                Private f32* %556 = OpAccessChain %547 %51 
                                         f32 %557 = OpLoad %556 
                                         f32 %558 = OpFMul %555 %557 
                                Private f32* %559 = OpAccessChain %526 %51 
                                         f32 %560 = OpLoad %559 
                                         f32 %561 = OpFAdd %558 %560 
                                Private f32* %562 = OpAccessChain %547 %51 
                                                      OpStore %562 %561 
                                Private f32* %563 = OpAccessChain %547 %51 
                                         f32 %564 = OpLoad %563 
                                Uniform f32* %566 = OpAccessChain %29 %565 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpFMul %564 %567 
                                Private f32* %569 = OpAccessChain %547 %51 
                                                      OpStore %569 %568 
                                Private f32* %570 = OpAccessChain %547 %51 
                                         f32 %571 = OpLoad %570 
                                Private f32* %572 = OpAccessChain %20 %51 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpExtInst %1 37 %571 %573 
                                Private f32* %575 = OpAccessChain %547 %51 
                                                      OpStore %575 %574 
                                Private f32* %577 = OpAccessChain %188 %47 
                                         f32 %578 = OpLoad %577 
                                Private f32* %579 = OpAccessChain %188 %51 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFAdd %578 %580 
                                                      OpStore %576 %581 
                                Private f32* %582 = OpAccessChain %20 %56 
                                         f32 %583 = OpLoad %582 
                                Private f32* %584 = OpAccessChain %124 %51 
                                         f32 %585 = OpLoad %584 
                                         f32 %586 = OpFMul %583 %585 
                                         f32 %587 = OpLoad %576 
                                         f32 %588 = OpFAdd %586 %587 
                                                      OpStore %576 %588 
                                         f32 %589 = OpLoad %576 
                                         f32 %591 = OpFMul %589 %590 
                                                      OpStore %576 %591 
                                         f32 %592 = OpLoad %576 
                                         f32 %593 = OpExtInst %1 43 %592 %125 %98 
                                                      OpStore %576 %593 
                                         f32 %594 = OpLoad %383 
                                       f32_3 %595 = OpCompositeConstruct %594 %594 %594 
                                       f32_3 %596 = OpExtInst %1 4 %595 
                                       f32_3 %599 = OpFAdd %596 %598 
                                                      OpStore %526 %599 
                                       f32_3 %600 = OpLoad %526 
                                       f32_3 %601 = OpExtInst %1 10 %600 
                                                      OpStore %526 %601 
                                       f32_3 %602 = OpLoad %526 
                                       f32_3 %604 = OpFMul %602 %603 
                                       f32_3 %607 = OpFAdd %604 %606 
                                                      OpStore %526 %607 
                                       f32_3 %608 = OpLoad %526 
                                       f32_3 %609 = OpExtInst %1 4 %608 
                                       f32_3 %611 = OpFAdd %609 %610 
                                                      OpStore %526 %611 
                                       f32_3 %612 = OpLoad %526 
                                       f32_3 %613 = OpCompositeConstruct %125 %125 %125 
                                       f32_3 %614 = OpCompositeConstruct %98 %98 %98 
                                       f32_3 %615 = OpExtInst %1 43 %612 %613 %614 
                                                      OpStore %526 %615 
                                       f32_3 %616 = OpLoad %526 
                                       f32_3 %617 = OpFAdd %616 %610 
                                                      OpStore %526 %617 
                                         f32 %618 = OpLoad %487 
                                       f32_3 %619 = OpCompositeConstruct %618 %618 %618 
                                       f32_3 %620 = OpLoad %526 
                                       f32_3 %621 = OpFMul %619 %620 
                                       f32_3 %623 = OpFAdd %621 %622 
                                                      OpStore %526 %623 
                                       f32_3 %624 = OpLoad %526 
                                       f32_3 %625 = OpLoad %547 
                                       f32_3 %626 = OpVectorShuffle %625 %625 0 0 0 
                                       f32_3 %627 = OpFMul %624 %626 
                                       f32_4 %628 = OpLoad %20 
                                       f32_4 %629 = OpVectorShuffle %628 %627 4 5 6 3 
                                                      OpStore %20 %629 
                                       f32_3 %630 = OpLoad %547 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 0 0 
                                       f32_3 %632 = OpFNegate %631 
                                       f32_3 %633 = OpLoad %526 
                                       f32_3 %634 = OpFMul %632 %633 
                                       f32_3 %635 = OpLoad %335 
                                       f32_3 %636 = OpFAdd %634 %635 
                                                      OpStore %547 %636 
                                         f32 %637 = OpLoad %576 
                                       f32_3 %638 = OpCompositeConstruct %637 %637 %637 
                                       f32_3 %639 = OpLoad %547 
                                       f32_3 %640 = OpFMul %638 %639 
                                       f32_4 %641 = OpLoad %20 
                                       f32_3 %642 = OpVectorShuffle %641 %641 0 1 2 
                                       f32_3 %643 = OpFAdd %640 %642 
                                                      OpStore %547 %643 
                                       f32_3 %644 = OpLoad %547 
                                       f32_4 %645 = OpLoad %365 
                                       f32_4 %646 = OpVectorShuffle %645 %644 4 5 6 3 
                                                      OpStore %365 %646 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat2;
    u_xlat3.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat3.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat1.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	vec4 _EmissiveColor;
uniform 	float _EmissiveThresholdSensitivity;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ParallaxTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat16_2;
vec4 u_xlat10_2;
vec2 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
float u_xlat16_7;
float u_xlat8;
vec2 u_xlat16_8;
bool u_xlatb8;
vec2 u_xlat10;
float u_xlat11;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
float u_xlat16_22;
bool u_xlatb22;
float u_xlat23;
bool u_xlatb23;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz + (-_EmissiveColor.xyz);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y + u_xlat1.x;
    u_xlat1.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb1 = u_xlat1.x<_EmissiveThresholdSensitivity;
    u_xlat16_8.x = dot(u_xlat10_0.xyz, vec3(0.298900008, 0.586600006, 0.114500001));
    u_xlat16_8.xy = u_xlat10_0.xz + (-u_xlat16_8.xx);
    u_xlat16_8.xy = u_xlat16_8.xy * vec2(1.0, 1.0) + vec2(1.0, 1.0);
    u_xlat16_22 = (-u_xlat16_8.x) * 0.298900008 + 1.0;
    u_xlat16_22 = (-u_xlat16_8.y) * 0.114500001 + u_xlat16_22;
    u_xlat16_22 = u_xlat16_22 * 1.70473921;
    u_xlat10_2 = texture(_ParallaxTex, vs_TEXCOORD4.xy);
    u_xlat3.xy = mix(vec2(0.0, 0.0), vec2(1.0, 0.75), vec2(bvec2(u_xlatb1)));
    u_xlat16_2.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
    u_xlat2.xyz = u_xlat3.yyy * u_xlat16_2.xyz + u_xlat10_0.xyz;
    u_xlat1.xz = log2(u_xlat16_8.xy);
    u_xlat1.y = log2(u_xlat16_22);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10.xy = u_xlat3.xx * u_xlat1.xy;
    u_xlat22 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb22 = u_xlat22<0.0;
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat22 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = (-u_xlat22) + u_xlat23;
    u_xlat22 = unity_ShadowFadeCenterAndType.w * u_xlat23 + u_xlat22;
    u_xlat22 = u_xlat22 * _LightShadowData.z + _LightShadowData.w;
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlatb23 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb23){
        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb24)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat24 = u_xlat4.y * 0.25 + 0.75;
        u_xlat11 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat24, u_xlat11);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat24 = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat22 = u_xlat22 + u_xlat10_4.x;
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat24 = min(u_xlat22, u_xlat24);
    u_xlat22 = (u_xlatb23) ? u_xlat24 : u_xlat22;
    u_xlat4.xyz = u_xlat2.xyz * vs_TEXCOORD5.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat4.w = 0.0;
    u_xlat2.w = u_xlat10_0.w;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat4.xyz = u_xlat1.zyx * u_xlat3.xxx + u_xlat2.zyx;
    u_xlatb21 = u_xlat4.y>=u_xlat4.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat4.w = 0.666666687;
    u_xlat1.xy = (-u_xlat4.xy) + u_xlat4.yx;
    u_xlat1.w = -1.0;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat4.xyw;
    u_xlatb21 = u_xlat4.z>=u_xlat5.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat5.w = u_xlat4.z;
    u_xlat6.xyw = u_xlat5.wyx;
    u_xlat6.z = -1.0;
    u_xlat6 = (-u_xlat5) + u_xlat6;
    u_xlat5 = vec4(u_xlat21) * u_xlat6 + u_xlat5;
    u_xlat21 = min(u_xlat5.y, u_xlat5.w);
    u_xlat21 = (-u_xlat21) + u_xlat5.x;
    u_xlat1.x = (-u_xlat5.y) + u_xlat5.w;
    u_xlat8 = u_xlat21 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat8;
    u_xlat1.x = u_xlat1.x + u_xlat5.z;
    u_xlat8 = u_xlat5.x + 1.00000001e-010;
    u_xlat21 = u_xlat21 / u_xlat8;
    u_xlatb8 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat16_7 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat7 = u_xlat8 * u_xlat16_7 + u_xlat10_0.z;
    u_xlatb14 = u_xlat10_0.x>=u_xlat7;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = (-u_xlat7) + u_xlat10_0.x;
    u_xlat0.x = u_xlat14 * u_xlat0.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _MaxValue;
    u_xlat0.x = min(u_xlat0.x, u_xlat5.x);
    u_xlat7 = u_xlat10.y + u_xlat10.x;
    u_xlat7 = u_xlat1.z * u_xlat3.x + u_xlat7;
    u_xlat7 = u_xlat7 * 10.0;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xzw = (-u_xlat0.xxx) * u_xlat1.xyz + u_xlat4.zyx;
    SV_Target0.xyz = vec3(u_xlat7) * u_xlat0.xzw + u_xlat2.xyz;
    SV_Target0.w = u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 382
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %159 %168 %169 %182 %221 %224 %227 %343 %363 %375 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate %159 Location 159 
                                                      OpDecorate %168 Location 168 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %182 Location 182 
                                                      OpDecorate %221 Location 221 
                                                      OpDecorate %224 Location 224 
                                                      OpDecorate %227 Location 227 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %343 Location 343 
                                                      OpDecorate %363 Location 363 
                                                      OpDecorate %375 Location 375 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 6 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 8 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                              Private f32_4* %101 = OpVariable Private 
                                             %102 = OpTypeVector %6 2 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %146 %146 
                                         f32 %153 = OpConstant 3.674022E-40 
                                       f32_2 %154 = OpConstantComposite %153 %153 
                                             %158 = OpTypePointer Output %102 
                               Output f32_2* %159 = OpVariable Output 
                                         f32 %162 = OpConstant 3.674022E-40 
                                       f32_2 %163 = OpConstantComposite %146 %162 
                                         f32 %165 = OpConstant 3.674022E-40 
                                       f32_2 %166 = OpConstantComposite %165 %146 
                               Output f32_2* %168 = OpVariable Output 
                                Input f32_4* %169 = OpVariable Input 
                                         i32 %172 = OpConstant 9 
                                             %181 = OpTypePointer Input %53 
                                Input f32_3* %182 = OpVariable Input 
                                         i32 %184 = OpConstant 7 
                                         u32 %189 = OpConstant 0 
                                             %190 = OpTypePointer Private %6 
                                         u32 %203 = OpConstant 2 
                                Private f32* %205 = OpVariable Private 
                                             %220 = OpTypePointer Output %53 
                               Output f32_3* %221 = OpVariable Output 
                               Output f32_3* %224 = OpVariable Output 
                               Output f32_4* %227 = OpVariable Output 
                                       f32_4 %228 = OpConstantComposite %165 %165 %165 %165 
                              Private f32_4* %235 = OpVariable Private 
                              Private f32_4* %243 = OpVariable Private 
                                         f32 %279 = OpConstant 3.674022E-40 
                                       f32_4 %280 = OpConstantComposite %279 %279 %279 %279 
                                         i32 %285 = OpConstant 4 
                                       f32_4 %289 = OpConstantComposite %146 %146 %146 %146 
                                         i32 %303 = OpConstant 5 
                               Output f32_3* %343 = OpVariable Output 
                                             %348 = OpTypePointer Uniform %6 
                                         u32 %356 = OpConstant 3 
                               Output f32_4* %363 = OpVariable Output 
                               Output f32_4* %375 = OpVariable Output 
                                             %376 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %65 %92 
                                        f32_4 %98 = OpLoad %65 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                       f32_4 %103 = OpLoad %47 
                                       f32_2 %104 = OpVectorShuffle %103 %103 1 1 
                              Uniform f32_4* %105 = OpAccessChain %23 %68 %26 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %104 %107 
                                       f32_4 %109 = OpLoad %101 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 2 3 
                                                      OpStore %101 %110 
                              Uniform f32_4* %111 = OpAccessChain %23 %68 %31 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 0 1 
                                       f32_4 %114 = OpLoad %47 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 0 
                                       f32_2 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %101 
                                       f32_2 %118 = OpVectorShuffle %117 %117 0 1 
                                       f32_2 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %47 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 2 3 
                                                      OpStore %47 %121 
                              Uniform f32_4* %122 = OpAccessChain %23 %68 %39 
                                       f32_4 %123 = OpLoad %122 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_4 %125 = OpLoad %47 
                                       f32_2 %126 = OpVectorShuffle %125 %125 2 2 
                                       f32_2 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %47 
                                       f32_2 %129 = OpVectorShuffle %128 %128 0 1 
                                       f32_2 %130 = OpFAdd %127 %129 
                                       f32_4 %131 = OpLoad %47 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %47 %132 
                              Uniform f32_4* %133 = OpAccessChain %23 %68 %49 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_4 %136 = OpLoad %47 
                                       f32_2 %137 = OpVectorShuffle %136 %136 3 3 
                                       f32_2 %138 = OpFMul %135 %137 
                                       f32_4 %139 = OpLoad %47 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %47 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %47 %143 
                                       f32_4 %144 = OpLoad %47 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %47 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %47 %150 
                                       f32_4 %151 = OpLoad %47 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %155 = OpFMul %152 %154 
                                       f32_4 %156 = OpLoad %47 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 2 3 
                                                      OpStore %47 %157 
                                       f32_4 %160 = OpLoad %47 
                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
                                       f32_2 %164 = OpFMul %161 %163 
                                       f32_2 %167 = OpFAdd %164 %166 
                                                      OpStore %159 %167 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 0 1 
                              Uniform f32_4* %173 = OpAccessChain %23 %172 
                                       f32_4 %174 = OpLoad %173 
                                       f32_2 %175 = OpVectorShuffle %174 %174 0 1 
                                       f32_2 %176 = OpFMul %171 %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %172 
                                       f32_4 %178 = OpLoad %177 
                                       f32_2 %179 = OpVectorShuffle %178 %178 2 3 
                                       f32_2 %180 = OpFAdd %176 %179 
                                                      OpStore %168 %180 
                                       f32_3 %183 = OpLoad %182 
                              Uniform f32_4* %185 = OpAccessChain %23 %184 %31 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                         f32 %188 = OpDot %183 %187 
                                Private f32* %191 = OpAccessChain %47 %189 
                                                      OpStore %191 %188 
                                       f32_3 %192 = OpLoad %182 
                              Uniform f32_4* %193 = OpAccessChain %23 %184 %26 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %192 %195 
                                Private f32* %197 = OpAccessChain %47 %93 
                                                      OpStore %197 %196 
                                       f32_3 %198 = OpLoad %182 
                              Uniform f32_4* %199 = OpAccessChain %23 %184 %39 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                         f32 %202 = OpDot %198 %201 
                                Private f32* %204 = OpAccessChain %47 %203 
                                                      OpStore %204 %202 
                                       f32_4 %206 = OpLoad %47 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %47 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %207 %209 
                                                      OpStore %205 %210 
                                         f32 %211 = OpLoad %205 
                                         f32 %212 = OpExtInst %1 32 %211 
                                                      OpStore %205 %212 
                                         f32 %213 = OpLoad %205 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_4 %215 = OpLoad %47 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %47 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %47 %219 
                                       f32_4 %222 = OpLoad %47 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                                      OpStore %221 %223 
                                       f32_4 %225 = OpLoad %9 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                                      OpStore %224 %226 
                                                      OpStore %227 %228 
                                       f32_4 %229 = OpLoad %9 
                                       f32_4 %230 = OpVectorShuffle %229 %229 1 1 1 1 
                                       f32_4 %231 = OpFNegate %230 
                              Uniform f32_4* %232 = OpAccessChain %23 %39 
                                       f32_4 %233 = OpLoad %232 
                                       f32_4 %234 = OpFAdd %231 %233 
                                                      OpStore %101 %234 
                                       f32_4 %236 = OpLoad %47 
                                       f32_4 %237 = OpVectorShuffle %236 %236 1 1 1 1 
                                       f32_4 %238 = OpLoad %101 
                                       f32_4 %239 = OpFMul %237 %238 
                                                      OpStore %235 %239 
                                       f32_4 %240 = OpLoad %101 
                                       f32_4 %241 = OpLoad %101 
                                       f32_4 %242 = OpFMul %240 %241 
                                                      OpStore %101 %242 
                                       f32_4 %244 = OpLoad %9 
                                       f32_4 %245 = OpVectorShuffle %244 %244 0 0 0 0 
                                       f32_4 %246 = OpFNegate %245 
                              Uniform f32_4* %247 = OpAccessChain %23 %26 
                                       f32_4 %248 = OpLoad %247 
                                       f32_4 %249 = OpFAdd %246 %248 
                                                      OpStore %243 %249 
                                       f32_4 %250 = OpLoad %9 
                                       f32_4 %251 = OpVectorShuffle %250 %250 2 2 2 2 
                                       f32_4 %252 = OpFNegate %251 
                              Uniform f32_4* %253 = OpAccessChain %23 %49 
                                       f32_4 %254 = OpLoad %253 
                                       f32_4 %255 = OpFAdd %252 %254 
                                                      OpStore %9 %255 
                                       f32_4 %256 = OpLoad %243 
                                       f32_4 %257 = OpLoad %47 
                                       f32_4 %258 = OpVectorShuffle %257 %257 0 0 0 0 
                                       f32_4 %259 = OpFMul %256 %258 
                                       f32_4 %260 = OpLoad %235 
                                       f32_4 %261 = OpFAdd %259 %260 
                                                      OpStore %235 %261 
                                       f32_4 %262 = OpLoad %9 
                                       f32_4 %263 = OpLoad %47 
                                       f32_4 %264 = OpVectorShuffle %263 %263 2 2 2 2 
                                       f32_4 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %235 
                                       f32_4 %267 = OpFAdd %265 %266 
                                                      OpStore %47 %267 
                                       f32_4 %268 = OpLoad %243 
                                       f32_4 %269 = OpLoad %243 
                                       f32_4 %270 = OpFMul %268 %269 
                                       f32_4 %271 = OpLoad %101 
                                       f32_4 %272 = OpFAdd %270 %271 
                                                      OpStore %101 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_4 %274 = OpLoad %9 
                                       f32_4 %275 = OpFMul %273 %274 
                                       f32_4 %276 = OpLoad %101 
                                       f32_4 %277 = OpFAdd %275 %276 
                                                      OpStore %9 %277 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %281 = OpExtInst %1 40 %278 %280 
                                                      OpStore %9 %281 
                                       f32_4 %282 = OpLoad %9 
                                       f32_4 %283 = OpExtInst %1 32 %282 
                                                      OpStore %101 %283 
                                       f32_4 %284 = OpLoad %9 
                              Uniform f32_4* %286 = OpAccessChain %23 %285 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpFMul %284 %287 
                                       f32_4 %290 = OpFAdd %288 %289 
                                                      OpStore %9 %290 
                                       f32_4 %291 = OpLoad %9 
                                       f32_4 %292 = OpFDiv %289 %291 
                                                      OpStore %9 %292 
                                       f32_4 %293 = OpLoad %47 
                                       f32_4 %294 = OpLoad %101 
                                       f32_4 %295 = OpFMul %293 %294 
                                                      OpStore %47 %295 
                                       f32_4 %296 = OpLoad %47 
                                       f32_4 %297 = OpExtInst %1 40 %296 %228 
                                                      OpStore %47 %297 
                                       f32_4 %298 = OpLoad %9 
                                       f32_4 %299 = OpLoad %47 
                                       f32_4 %300 = OpFMul %298 %299 
                                                      OpStore %9 %300 
                                       f32_4 %301 = OpLoad %9 
                                       f32_3 %302 = OpVectorShuffle %301 %301 1 1 1 
                              Uniform f32_4* %304 = OpAccessChain %23 %303 %26 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_3 %307 = OpFMul %302 %306 
                                       f32_4 %308 = OpLoad %47 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 6 3 
                                                      OpStore %47 %309 
                              Uniform f32_4* %310 = OpAccessChain %23 %303 %31 
                                       f32_4 %311 = OpLoad %310 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_4 %313 = OpLoad %9 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 0 0 
                                       f32_3 %315 = OpFMul %312 %314 
                                       f32_4 %316 = OpLoad %47 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %318 = OpFAdd %315 %317 
                                       f32_4 %319 = OpLoad %47 
                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
                                                      OpStore %47 %320 
                              Uniform f32_4* %321 = OpAccessChain %23 %303 %39 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_4 %324 = OpLoad %9 
                                       f32_3 %325 = OpVectorShuffle %324 %324 2 2 2 
                                       f32_3 %326 = OpFMul %323 %325 
                                       f32_4 %327 = OpLoad %47 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %326 %328 
                                       f32_4 %330 = OpLoad %9 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %9 %331 
                              Uniform f32_4* %332 = OpAccessChain %23 %303 %49 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_4 %335 = OpLoad %9 
                                       f32_3 %336 = OpVectorShuffle %335 %335 3 3 3 
                                       f32_3 %337 = OpFMul %334 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_3 %340 = OpFAdd %337 %339 
                                       f32_4 %341 = OpLoad %9 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 6 3 
                                                      OpStore %9 %342 
                                       f32_4 %344 = OpLoad %9 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                                      OpStore %343 %345 
                                Private f32* %346 = OpAccessChain %65 %93 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %23 %31 %189 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %9 %189 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %9 %189 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpFMul %354 %153 
                                Private f32* %357 = OpAccessChain %9 %356 
                                                      OpStore %357 %355 
                                       f32_4 %358 = OpLoad %65 
                                       f32_2 %359 = OpVectorShuffle %358 %358 0 3 
                                       f32_2 %360 = OpFMul %359 %154 
                                       f32_4 %361 = OpLoad %9 
                                       f32_4 %362 = OpVectorShuffle %361 %360 4 1 5 3 
                                                      OpStore %9 %362 
                                       f32_4 %364 = OpLoad %65 
                                       f32_2 %365 = OpVectorShuffle %364 %364 2 3 
                                       f32_4 %366 = OpLoad %363 
                                       f32_4 %367 = OpVectorShuffle %366 %365 0 1 4 5 
                                                      OpStore %363 %367 
                                       f32_4 %368 = OpLoad %9 
                                       f32_2 %369 = OpVectorShuffle %368 %368 2 2 
                                       f32_4 %370 = OpLoad %9 
                                       f32_2 %371 = OpVectorShuffle %370 %370 0 3 
                                       f32_2 %372 = OpFAdd %369 %371 
                                       f32_4 %373 = OpLoad %363 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 5 2 3 
                                                      OpStore %363 %374 
                                                      OpStore %375 %228 
                                 Output f32* %377 = OpAccessChain %97 %31 %93 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpFNegate %378 
                                 Output f32* %380 = OpAccessChain %97 %31 %93 
                                                      OpStore %380 %379 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 754
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %121 %220 %411 %466 %472 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpMemberDecorate %28 1 RelaxedPrecision 
                                                      OpMemberDecorate %28 1 Offset 28 
                                                      OpMemberDecorate %28 2 RelaxedPrecision 
                                                      OpMemberDecorate %28 2 Offset 28 
                                                      OpMemberDecorate %28 3 Offset 28 
                                                      OpMemberDecorate %28 4 Offset 28 
                                                      OpMemberDecorate %28 5 Offset 28 
                                                      OpMemberDecorate %28 6 Offset 28 
                                                      OpMemberDecorate %28 7 Offset 28 
                                                      OpMemberDecorate %28 8 Offset 28 
                                                      OpMemberDecorate %28 9 RelaxedPrecision 
                                                      OpMemberDecorate %28 9 Offset 28 
                                                      OpMemberDecorate %28 10 Offset 28 
                                                      OpMemberDecorate %28 11 Offset 28 
                                                      OpMemberDecorate %28 12 Offset 28 
                                                      OpMemberDecorate %28 13 Offset 28 
                                                      OpMemberDecorate %28 14 Offset 28 
                                                      OpMemberDecorate %28 15 RelaxedPrecision 
                                                      OpMemberDecorate %28 15 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %119 DescriptorSet 119 
                                                      OpDecorate %119 Binding 119 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %121 Location 121 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %220 Location 220 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %293 SpecId 293 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %411 Location 411 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %420 DescriptorSet 420 
                                                      OpDecorate %420 Binding 420 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %466 Location 466 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %472 Location 472 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %544 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %617 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %699 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeVector %6 3 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %7 %25 
                                              %27 = OpTypeArray %7 %25 
                                              %28 = OpTypeStruct %21 %7 %7 %7 %26 %7 %27 %21 %21 %7 %6 %6 %7 %6 %6 %6 
                                              %29 = OpTypePointer Uniform %28 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32_4; f32; f32; f32;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 12 
                                              %33 = OpTypePointer Uniform %7 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Private %6 
                                          u32 %52 = OpConstant 0 
                                          u32 %57 = OpConstant 2 
                                              %71 = OpTypeBool 
                                              %72 = OpTypePointer Private %71 
                                Private bool* %73 = OpVariable Private 
                                          i32 %76 = OpConstant 13 
                                              %77 = OpTypePointer Uniform %6 
                               Private f32_4* %81 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          f32 %86 = OpConstant 3.674022E-40 
                                        f32_3 %87 = OpConstantComposite %84 %85 %86 
                                              %90 = OpTypePointer Private %15 
                               Private f32_2* %91 = OpVariable Private 
                                          f32 %99 = OpConstant 3.674022E-40 
                                       f32_2 %100 = OpConstantComposite %99 %99 
                                Private f32* %102 = OpVariable Private 
                                         f32 %115 = OpConstant 3.674022E-40 
                                             %117 = OpTypePointer Private %21 
                              Private f32_3* %118 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %119 = OpVariable UniformConstant 
                                Input f32_2* %121 = OpVariable Input 
                              Private f32_2* %125 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                       f32_2 %127 = OpConstantComposite %126 %126 
                                         f32 %128 = OpConstant 3.674022E-40 
                                       f32_2 %129 = OpConstantComposite %99 %128 
                                             %131 = OpTypeVector %71 2 
                              Private f32_3* %135 = OpVariable Private 
                              Private f32_4* %141 = OpVariable Private 
                                         i32 %160 = OpConstant 11 
                                         i32 %182 = OpConstant 10 
                              Private f32_2* %189 = OpVariable Private 
                                         u32 %195 = OpConstant 3 
                                         i32 %198 = OpConstant 15 
                               Private bool* %204 = OpVariable Private 
                                         i32 %209 = OpConstant 0 
                                         i32 %210 = OpConstant 1 
                                         i32 %212 = OpConstant -1 
                              Private f32_4* %218 = OpVariable Private 
                                             %219 = OpTypePointer Input %21 
                                Input f32_3* %220 = OpVariable Input 
                                             %223 = OpTypePointer Uniform %21 
                              Private f32_3* %229 = OpVariable Private 
                                         i32 %230 = OpConstant 4 
                                         i32 %237 = OpConstant 2 
                                Private f32* %241 = OpVariable Private 
                                         i32 %247 = OpConstant 3 
                                Private f32* %255 = OpVariable Private 
                               Private bool* %282 = OpVariable Private 
                                         i32 %283 = OpConstant 5 
                                        bool %287 = OpConstantFalse 
                                        bool %293 = OpSpecConstantFalse 
                               Private bool* %296 = OpVariable Private 
                                         i32 %302 = OpConstant 6 
                                             %339 = OpTypePointer Function %21 
                                         i32 %353 = OpConstant 8 
                              Private f32_4* %360 = OpVariable Private 
                                         i32 %363 = OpConstant 7 
                                Private f32* %369 = OpVariable Private 
                                         f32 %372 = OpConstant 3.674022E-40 
                                         f32 %377 = OpConstant 3.674022E-40 
                                             %386 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %387 = OpTypeSampledImage %386 
                                             %388 = OpTypePointer UniformConstant %387 
 UniformConstant read_only Texture3DSampled* %389 = OpVariable UniformConstant 
                              Private f32_3* %400 = OpVariable Private 
                                             %410 = OpTypePointer Input %7 
                                Input f32_4* %411 = OpVariable Input 
                                Private f32* %419 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %420 = OpVariable UniformConstant 
                              Private f32_3* %426 = OpVariable Private 
                                             %441 = OpTypePointer Function %6 
                                         i32 %455 = OpConstant 9 
                                Input f32_3* %466 = OpVariable Input 
                                             %471 = OpTypePointer Output %7 
                               Output f32_4* %472 = OpVariable Output 
                                             %475 = OpTypePointer Output %6 
                               Private bool* %484 = OpVariable Private 
                                Private f32* %490 = OpVariable Private 
                              Private f32_2* %497 = OpVariable Private 
                                         f32 %505 = OpConstant 3.674022E-40 
                                         f32 %521 = OpConstant 3.674022E-40 
                                       f32_2 %522 = OpConstantComposite %505 %521 
                                Private f32* %593 = OpVariable Private 
                                         f32 %596 = OpConstant 3.674022E-40 
                                         f32 %598 = OpConstant 3.674022E-40 
                                Private f32* %625 = OpVariable Private 
                              Private f32_3* %632 = OpVariable Private 
                               Private bool* %640 = OpVariable Private 
                                Private f32* %646 = OpVariable Private 
                              Private f32_3* %653 = OpVariable Private 
                                         i32 %671 = OpConstant 14 
                                Private f32* %682 = OpVariable Private 
                                         f32 %696 = OpConstant 3.674022E-40 
                                         f32 %703 = OpConstant 3.674022E-40 
                                       f32_3 %704 = OpConstantComposite %99 %521 %703 
                                       f32_3 %709 = OpConstantComposite %596 %596 %596 
                                         f32 %711 = OpConstant 3.674022E-40 
                                       f32_3 %712 = OpConstantComposite %711 %711 %711 
                                       f32_3 %716 = OpConstantComposite %505 %505 %505 
                                       f32_3 %728 = OpConstantComposite %99 %99 %99 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %340 = OpVariable Function 
                               Function f32* %442 = OpVariable Function 
                               Function f32* %491 = OpVariable Function 
                               Function f32* %531 = OpVariable Function 
                               Function f32* %619 = OpVariable Function 
                               Function f32* %647 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %22 = OpLoad %9 
                                        f32_3 %23 = OpVectorShuffle %22 %22 0 1 2 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFNegate %36 
                                        f32_3 %38 = OpFAdd %23 %37 
                                        f32_4 %39 = OpLoad %20 
                                        f32_4 %40 = OpVectorShuffle %39 %38 4 5 6 3 
                                                      OpStore %20 %40 
                                        f32_4 %41 = OpLoad %20 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpLoad %20 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_2 %45 = OpFMul %42 %44 
                                        f32_4 %46 = OpLoad %20 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 2 3 
                                                      OpStore %20 %47 
                                 Private f32* %50 = OpAccessChain %20 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %53 = OpAccessChain %20 %52 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFAdd %51 %54 
                                 Private f32* %56 = OpAccessChain %20 %52 
                                                      OpStore %56 %55 
                                 Private f32* %58 = OpAccessChain %20 %57 
                                          f32 %59 = OpLoad %58 
                                 Private f32* %60 = OpAccessChain %20 %57 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFMul %59 %61 
                                 Private f32* %63 = OpAccessChain %20 %52 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %62 %64 
                                 Private f32* %66 = OpAccessChain %20 %52 
                                                      OpStore %66 %65 
                                 Private f32* %67 = OpAccessChain %20 %52 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpExtInst %1 31 %68 
                                 Private f32* %70 = OpAccessChain %20 %52 
                                                      OpStore %70 %69 
                                 Private f32* %74 = OpAccessChain %20 %52 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %78 = OpAccessChain %30 %76 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %75 %79 
                                                      OpStore %73 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                          f32 %88 = OpDot %83 %87 
                                 Private f32* %89 = OpAccessChain %81 %52 
                                                      OpStore %89 %88 
                                        f32_4 %92 = OpLoad %9 
                                        f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                                        f32_4 %94 = OpLoad %81 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 0 
                                        f32_2 %96 = OpFNegate %95 
                                        f32_2 %97 = OpFAdd %93 %96 
                                                      OpStore %91 %97 
                                        f32_2 %98 = OpLoad %91 
                                       f32_2 %101 = OpFAdd %98 %100 
                                                      OpStore %91 %101 
                                Private f32* %103 = OpAccessChain %91 %52 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFNegate %104 
                                         f32 %106 = OpFMul %105 %84 
                                         f32 %107 = OpFAdd %106 %99 
                                                      OpStore %102 %107 
                                Private f32* %108 = OpAccessChain %91 %48 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFMul %110 %86 
                                         f32 %112 = OpLoad %102 
                                         f32 %113 = OpFAdd %111 %112 
                                                      OpStore %102 %113 
                                         f32 %114 = OpLoad %102 
                                         f32 %116 = OpFMul %114 %115 
                                                      OpStore %102 %116 
                  read_only Texture2DSampled %120 = OpLoad %119 
                                       f32_2 %122 = OpLoad %121 
                                       f32_4 %123 = OpImageSampleImplicitLod %120 %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                                      OpStore %118 %124 
                                        bool %130 = OpLoad %73 
                                      bool_2 %132 = OpCompositeConstruct %130 %130 
                                       f32_2 %133 = OpSelect %132 %100 %127 
                                       f32_2 %134 = OpExtInst %1 46 %127 %129 %133 
                                                      OpStore %125 %134 
                                       f32_4 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFNegate %137 
                                       f32_3 %139 = OpLoad %118 
                                       f32_3 %140 = OpFAdd %138 %139 
                                                      OpStore %135 %140 
                                       f32_2 %142 = OpLoad %125 
                                       f32_3 %143 = OpVectorShuffle %142 %142 1 1 1 
                                       f32_3 %144 = OpLoad %135 
                                       f32_3 %145 = OpFMul %143 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %141 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %141 %150 
                                       f32_2 %151 = OpLoad %91 
                                       f32_2 %152 = OpExtInst %1 30 %151 
                                       f32_4 %153 = OpLoad %20 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 1 5 3 
                                                      OpStore %20 %154 
                                         f32 %155 = OpLoad %102 
                                         f32 %156 = OpExtInst %1 30 %155 
                                Private f32* %157 = OpAccessChain %20 %48 
                                                      OpStore %157 %156 
                                       f32_4 %158 = OpLoad %20 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                Uniform f32* %161 = OpAccessChain %30 %160 
                                         f32 %162 = OpLoad %161 
                                Uniform f32* %163 = OpAccessChain %30 %160 
                                         f32 %164 = OpLoad %163 
                                Uniform f32* %165 = OpAccessChain %30 %160 
                                         f32 %166 = OpLoad %165 
                                       f32_3 %167 = OpCompositeConstruct %162 %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                         f32 %169 = OpCompositeExtract %167 1 
                                         f32 %170 = OpCompositeExtract %167 2 
                                       f32_3 %171 = OpCompositeConstruct %168 %169 %170 
                                       f32_3 %172 = OpFMul %159 %171 
                                       f32_4 %173 = OpLoad %20 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
                                                      OpStore %20 %174 
                                       f32_4 %175 = OpLoad %20 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpExtInst %1 29 %176 
                                       f32_4 %178 = OpLoad %20 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 6 3 
                                                      OpStore %20 %179 
                                       f32_4 %180 = OpLoad %20 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                Uniform f32* %183 = OpAccessChain %30 %182 
                                         f32 %184 = OpLoad %183 
                                       f32_3 %185 = OpCompositeConstruct %184 %184 %184 
                                       f32_3 %186 = OpFMul %181 %185 
                                       f32_4 %187 = OpLoad %20 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %20 %188 
                                       f32_2 %190 = OpLoad %125 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 0 
                                       f32_4 %192 = OpLoad %20 
                                       f32_2 %193 = OpVectorShuffle %192 %192 0 1 
                                       f32_2 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                Private f32* %196 = OpAccessChain %9 %195 
                                         f32 %197 = OpLoad %196 
                                Uniform f32* %199 = OpAccessChain %30 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFNegate %200 
                                         f32 %202 = OpFAdd %197 %201 
                                Private f32* %203 = OpAccessChain %81 %52 
                                                      OpStore %203 %202 
                                Private f32* %205 = OpAccessChain %81 %52 
                                         f32 %206 = OpLoad %205 
                                        bool %207 = OpFOrdLessThan %206 %126 
                                                      OpStore %204 %207 
                                        bool %208 = OpLoad %204 
                                         i32 %211 = OpSelect %208 %210 %209 
                                         i32 %213 = OpIMul %211 %212 
                                        bool %214 = OpINotEqual %213 %209 
                                                      OpSelectionMerge %216 None 
                                                      OpBranchConditional %214 %215 %216 
                                             %215 = OpLabel 
                                                      OpKill
                                             %216 = OpLabel 
                                       f32_3 %221 = OpLoad %220 
                                       f32_3 %222 = OpFNegate %221 
                              Uniform f32_3* %224 = OpAccessChain %30 %209 
                                       f32_3 %225 = OpLoad %224 
                                       f32_3 %226 = OpFAdd %222 %225 
                                       f32_4 %227 = OpLoad %218 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 6 3 
                                                      OpStore %218 %228 
                                Uniform f32* %231 = OpAccessChain %30 %230 %209 %57 
                                         f32 %232 = OpLoad %231 
                                Private f32* %233 = OpAccessChain %229 %52 
                                                      OpStore %233 %232 
                                Uniform f32* %234 = OpAccessChain %30 %230 %210 %57 
                                         f32 %235 = OpLoad %234 
                                Private f32* %236 = OpAccessChain %229 %48 
                                                      OpStore %236 %235 
                                Uniform f32* %238 = OpAccessChain %30 %230 %237 %57 
                                         f32 %239 = OpLoad %238 
                                Private f32* %240 = OpAccessChain %229 %57 
                                                      OpStore %240 %239 
                                       f32_4 %242 = OpLoad %218 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpLoad %229 
                                         f32 %245 = OpDot %243 %244 
                                                      OpStore %241 %245 
                                       f32_3 %246 = OpLoad %220 
                              Uniform f32_4* %248 = OpAccessChain %30 %247 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpFNegate %250 
                                       f32_3 %252 = OpFAdd %246 %251 
                                       f32_4 %253 = OpLoad %218 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %218 %254 
                                       f32_4 %256 = OpLoad %218 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %218 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %255 %260 
                                         f32 %261 = OpLoad %255 
                                         f32 %262 = OpExtInst %1 31 %261 
                                                      OpStore %255 %262 
                                         f32 %263 = OpLoad %241 
                                         f32 %264 = OpFNegate %263 
                                         f32 %265 = OpLoad %255 
                                         f32 %266 = OpFAdd %264 %265 
                                                      OpStore %255 %266 
                                Uniform f32* %267 = OpAccessChain %30 %247 %195 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpLoad %255 
                                         f32 %270 = OpFMul %268 %269 
                                         f32 %271 = OpLoad %241 
                                         f32 %272 = OpFAdd %270 %271 
                                                      OpStore %241 %272 
                                         f32 %273 = OpLoad %241 
                                Uniform f32* %274 = OpAccessChain %30 %237 %57 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpFMul %273 %275 
                                Uniform f32* %277 = OpAccessChain %30 %237 %195 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFAdd %276 %278 
                                                      OpStore %241 %279 
                                         f32 %280 = OpLoad %241 
                                         f32 %281 = OpExtInst %1 43 %280 %126 %99 
                                                      OpStore %241 %281 
                                Uniform f32* %284 = OpAccessChain %30 %283 %52 
                                         f32 %285 = OpLoad %284 
                                        bool %286 = OpFOrdEqual %285 %99 
                                                      OpStore %282 %286 
                                                      OpSelectionMerge %289 None 
                                                      OpBranchConditional %287 %288 %289 
                                             %288 = OpLabel 
                                        bool %290 = OpLoad %282 
                                                      OpSelectionMerge %292 None 
                                                      OpBranchConditional %290 %291 %292 
                                             %291 = OpLabel 
                                                      OpBranch %292 
                                             %292 = OpLabel 
                                                      OpBranch %289 
                                             %289 = OpLabel 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %395 
                                             %294 = OpLabel 
                                Uniform f32* %297 = OpAccessChain %30 %283 %48 
                                         f32 %298 = OpLoad %297 
                                        bool %299 = OpFOrdEqual %298 %99 
                                                      OpStore %296 %299 
                                       f32_3 %300 = OpLoad %220 
                                       f32_3 %301 = OpVectorShuffle %300 %300 1 1 1 
                              Uniform f32_4* %303 = OpAccessChain %30 %302 %210 
                                       f32_4 %304 = OpLoad %303 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %306 = OpFMul %301 %305 
                                       f32_4 %307 = OpLoad %218 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
                                                      OpStore %218 %308 
                              Uniform f32_4* %309 = OpAccessChain %30 %302 %209 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpLoad %220 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 0 0 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_4 %315 = OpLoad %218 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %317 = OpFAdd %314 %316 
                                       f32_4 %318 = OpLoad %218 
                                       f32_4 %319 = OpVectorShuffle %318 %317 4 5 6 3 
                                                      OpStore %218 %319 
                              Uniform f32_4* %320 = OpAccessChain %30 %302 %237 
                                       f32_4 %321 = OpLoad %320 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_3 %323 = OpLoad %220 
                                       f32_3 %324 = OpVectorShuffle %323 %323 2 2 2 
                                       f32_3 %325 = OpFMul %322 %324 
                                       f32_4 %326 = OpLoad %218 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                       f32_3 %328 = OpFAdd %325 %327 
                                       f32_4 %329 = OpLoad %218 
                                       f32_4 %330 = OpVectorShuffle %329 %328 4 5 6 3 
                                                      OpStore %218 %330 
                                       f32_4 %331 = OpLoad %218 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 2 
                              Uniform f32_4* %333 = OpAccessChain %30 %302 %247 
                                       f32_4 %334 = OpLoad %333 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFAdd %332 %335 
                                       f32_4 %337 = OpLoad %218 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 6 3 
                                                      OpStore %218 %338 
                                        bool %341 = OpLoad %296 
                                                      OpSelectionMerge %343 None 
                                                      OpBranchConditional %341 %342 %346 
                                             %342 = OpLabel 
                                       f32_4 %344 = OpLoad %218 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                                      OpStore %340 %345 
                                                      OpBranch %343 
                                             %346 = OpLabel 
                                       f32_3 %347 = OpLoad %220 
                                                      OpStore %340 %347 
                                                      OpBranch %343 
                                             %343 = OpLabel 
                                       f32_3 %348 = OpLoad %340 
                                       f32_4 %349 = OpLoad %218 
                                       f32_4 %350 = OpVectorShuffle %349 %348 4 5 6 3 
                                                      OpStore %218 %350 
                                       f32_4 %351 = OpLoad %218 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                              Uniform f32_3* %354 = OpAccessChain %30 %353 
                                       f32_3 %355 = OpLoad %354 
                                       f32_3 %356 = OpFNegate %355 
                                       f32_3 %357 = OpFAdd %352 %356 
                                       f32_4 %358 = OpLoad %218 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %218 %359 
                                       f32_4 %361 = OpLoad %218 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                              Uniform f32_3* %364 = OpAccessChain %30 %363 
                                       f32_3 %365 = OpLoad %364 
                                       f32_3 %366 = OpFMul %362 %365 
                                       f32_4 %367 = OpLoad %360 
                                       f32_4 %368 = OpVectorShuffle %367 %366 0 4 5 6 
                                                      OpStore %360 %368 
                                Private f32* %370 = OpAccessChain %360 %48 
                                         f32 %371 = OpLoad %370 
                                         f32 %373 = OpFMul %371 %372 
                                         f32 %374 = OpFAdd %373 %128 
                                                      OpStore %369 %374 
                                Uniform f32* %375 = OpAccessChain %30 %283 %57 
                                         f32 %376 = OpLoad %375 
                                         f32 %378 = OpFMul %376 %377 
                                         f32 %379 = OpFAdd %378 %128 
                                Private f32* %380 = OpAccessChain %218 %52 
                                                      OpStore %380 %379 
                                         f32 %381 = OpLoad %369 
                                Private f32* %382 = OpAccessChain %218 %52 
                                         f32 %383 = OpLoad %382 
                                         f32 %384 = OpExtInst %1 40 %381 %383 
                                Private f32* %385 = OpAccessChain %360 %52 
                                                      OpStore %385 %384 
                  read_only Texture3DSampled %390 = OpLoad %389 
                                       f32_4 %391 = OpLoad %360 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 2 3 
                                       f32_4 %393 = OpImageSampleImplicitLod %390 %392 
                                                      OpStore %360 %393 
                                       f32_4 %394 = OpLoad %360 
                                                      OpStore %81 %394 
                                                      OpBranch %295 
                                             %395 = OpLabel 
                                Private f32* %396 = OpAccessChain %81 %52 
                                                      OpStore %396 %99 
                                Private f32* %397 = OpAccessChain %81 %48 
                                                      OpStore %397 %99 
                                Private f32* %398 = OpAccessChain %81 %57 
                                                      OpStore %398 %99 
                                Private f32* %399 = OpAccessChain %81 %195 
                                                      OpStore %399 %99 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                       f32_4 %401 = OpLoad %81 
                              Uniform f32_4* %402 = OpAccessChain %30 %210 
                                       f32_4 %403 = OpLoad %402 
                                         f32 %404 = OpDot %401 %403 
                                Private f32* %405 = OpAccessChain %400 %52 
                                                      OpStore %405 %404 
                                Private f32* %406 = OpAccessChain %400 %52 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpExtInst %1 43 %407 %126 %99 
                                Private f32* %409 = OpAccessChain %400 %52 
                                                      OpStore %409 %408 
                                       f32_4 %412 = OpLoad %411 
                                       f32_2 %413 = OpVectorShuffle %412 %412 0 1 
                                       f32_4 %414 = OpLoad %411 
                                       f32_2 %415 = OpVectorShuffle %414 %414 3 3 
                                       f32_2 %416 = OpFDiv %413 %415 
                                       f32_4 %417 = OpLoad %218 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 2 3 
                                                      OpStore %218 %418 
                  read_only Texture2DSampled %421 = OpLoad %420 
                                       f32_4 %422 = OpLoad %218 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_4 %424 = OpImageSampleImplicitLod %421 %423 
                                         f32 %425 = OpCompositeExtract %424 0 
                                                      OpStore %419 %425 
                                         f32 %427 = OpLoad %241 
                                         f32 %428 = OpLoad %419 
                                         f32 %429 = OpFAdd %427 %428 
                                Private f32* %430 = OpAccessChain %426 %52 
                                                      OpStore %430 %429 
                                Private f32* %431 = OpAccessChain %426 %52 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpExtInst %1 43 %432 %126 %99 
                                Private f32* %434 = OpAccessChain %426 %52 
                                                      OpStore %434 %433 
                                Private f32* %435 = OpAccessChain %426 %52 
                                         f32 %436 = OpLoad %435 
                                Private f32* %437 = OpAccessChain %400 %52 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpExtInst %1 37 %436 %438 
                                Private f32* %440 = OpAccessChain %400 %52 
                                                      OpStore %440 %439 
                                        bool %443 = OpLoad %282 
                                                      OpSelectionMerge %445 None 
                                                      OpBranchConditional %443 %444 %448 
                                             %444 = OpLabel 
                                Private f32* %446 = OpAccessChain %400 %52 
                                         f32 %447 = OpLoad %446 
                                                      OpStore %442 %447 
                                                      OpBranch %445 
                                             %448 = OpLabel 
                                Private f32* %449 = OpAccessChain %426 %52 
                                         f32 %450 = OpLoad %449 
                                                      OpStore %442 %450 
                                                      OpBranch %445 
                                             %445 = OpLabel 
                                         f32 %451 = OpLoad %442 
                                Private f32* %452 = OpAccessChain %400 %52 
                                                      OpStore %452 %451 
                                       f32_4 %453 = OpLoad %141 
                                       f32_3 %454 = OpVectorShuffle %453 %453 0 1 2 
                              Uniform f32_4* %456 = OpAccessChain %30 %455 
                                       f32_4 %457 = OpLoad %456 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                                       f32_3 %459 = OpFMul %454 %458 
                                                      OpStore %426 %459 
                                       f32_3 %460 = OpLoad %400 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpLoad %426 
                                       f32_3 %463 = OpFMul %461 %462 
                                                      OpStore %400 %463 
                                       f32_4 %464 = OpLoad %141 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_3 %467 = OpLoad %466 
                                       f32_3 %468 = OpFMul %465 %467 
                                       f32_3 %469 = OpLoad %400 
                                       f32_3 %470 = OpFAdd %468 %469 
                                                      OpStore %400 %470 
                                Private f32* %473 = OpAccessChain %9 %195 
                                         f32 %474 = OpLoad %473 
                                 Output f32* %476 = OpAccessChain %472 %195 
                                                      OpStore %476 %474 
                                       f32_4 %477 = OpLoad %20 
                                       f32_3 %478 = OpVectorShuffle %477 %477 0 1 2 
                                       f32_2 %479 = OpLoad %125 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 0 0 
                                       f32_3 %481 = OpFMul %478 %480 
                                       f32_3 %482 = OpLoad %400 
                                       f32_3 %483 = OpFAdd %481 %482 
                                                      OpStore %400 %483 
                                Private f32* %485 = OpAccessChain %400 %48 
                                         f32 %486 = OpLoad %485 
                                Private f32* %487 = OpAccessChain %400 %57 
                                         f32 %488 = OpLoad %487 
                                        bool %489 = OpFOrdGreaterThanEqual %486 %488 
                                                      OpStore %484 %489 
                                        bool %492 = OpLoad %484 
                                                      OpSelectionMerge %494 None 
                                                      OpBranchConditional %492 %493 %495 
                                             %493 = OpLabel 
                                                      OpStore %491 %99 
                                                      OpBranch %494 
                                             %495 = OpLabel 
                                                      OpStore %491 %126 
                                                      OpBranch %494 
                                             %494 = OpLabel 
                                         f32 %496 = OpLoad %491 
                                                      OpStore %490 %496 
                                       f32_3 %498 = OpLoad %400 
                                       f32_2 %499 = OpVectorShuffle %498 %498 2 1 
                                       f32_2 %500 = OpFNegate %499 
                                       f32_3 %501 = OpLoad %400 
                                       f32_2 %502 = OpVectorShuffle %501 %501 1 2 
                                       f32_2 %503 = OpFAdd %500 %502 
                                                      OpStore %497 %503 
                                Private f32* %504 = OpAccessChain %141 %52 
                                                      OpStore %504 %99 
                                Private f32* %506 = OpAccessChain %141 %48 
                                                      OpStore %506 %505 
                                         f32 %507 = OpLoad %490 
                                       f32_2 %508 = OpCompositeConstruct %507 %507 
                                       f32_2 %509 = OpLoad %497 
                                       f32_2 %510 = OpFMul %508 %509 
                                       f32_3 %511 = OpLoad %400 
                                       f32_2 %512 = OpVectorShuffle %511 %511 2 1 
                                       f32_2 %513 = OpFAdd %510 %512 
                                       f32_4 %514 = OpLoad %360 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 5 2 3 
                                                      OpStore %360 %515 
                                         f32 %516 = OpLoad %490 
                                       f32_2 %517 = OpCompositeConstruct %516 %516 
                                       f32_4 %518 = OpLoad %141 
                                       f32_2 %519 = OpVectorShuffle %518 %518 0 1 
                                       f32_2 %520 = OpFMul %517 %519 
                                       f32_2 %523 = OpFAdd %520 %522 
                                       f32_4 %524 = OpLoad %360 
                                       f32_4 %525 = OpVectorShuffle %524 %523 0 1 4 5 
                                                      OpStore %360 %525 
                                Private f32* %526 = OpAccessChain %400 %52 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %360 %52 
                                         f32 %529 = OpLoad %528 
                                        bool %530 = OpFOrdGreaterThanEqual %527 %529 
                                                      OpStore %484 %530 
                                        bool %532 = OpLoad %484 
                                                      OpSelectionMerge %534 None 
                                                      OpBranchConditional %532 %533 %535 
                                             %533 = OpLabel 
                                                      OpStore %531 %99 
                                                      OpBranch %534 
                                             %535 = OpLabel 
                                                      OpStore %531 %126 
                                                      OpBranch %534 
                                             %534 = OpLabel 
                                         f32 %536 = OpLoad %531 
                                                      OpStore %490 %536 
                                       f32_4 %537 = OpLoad %360 
                                       f32_3 %538 = OpVectorShuffle %537 %537 0 1 3 
                                       f32_3 %539 = OpFNegate %538 
                                       f32_4 %540 = OpLoad %141 
                                       f32_4 %541 = OpVectorShuffle %540 %539 4 5 6 3 
                                                      OpStore %141 %541 
                                Private f32* %542 = OpAccessChain %400 %52 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFNegate %543 
                                Private f32* %545 = OpAccessChain %141 %195 
                                                      OpStore %545 %544 
                                Private f32* %546 = OpAccessChain %141 %52 
                                         f32 %547 = OpLoad %546 
                                Private f32* %548 = OpAccessChain %400 %52 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %547 %549 
                                Private f32* %551 = OpAccessChain %218 %52 
                                                      OpStore %551 %550 
                                       f32_4 %552 = OpLoad %360 
                                       f32_3 %553 = OpVectorShuffle %552 %552 1 2 0 
                                       f32_4 %554 = OpLoad %141 
                                       f32_3 %555 = OpVectorShuffle %554 %554 1 2 3 
                                       f32_3 %556 = OpFAdd %553 %555 
                                       f32_4 %557 = OpLoad %218 
                                       f32_4 %558 = OpVectorShuffle %557 %556 0 4 5 6 
                                                      OpStore %218 %558 
                                         f32 %559 = OpLoad %490 
                                       f32_3 %560 = OpCompositeConstruct %559 %559 %559 
                                       f32_4 %561 = OpLoad %218 
                                       f32_3 %562 = OpVectorShuffle %561 %561 0 1 2 
                                       f32_3 %563 = OpFMul %560 %562 
                                       f32_4 %564 = OpLoad %360 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 3 
                                       f32_3 %566 = OpFAdd %563 %565 
                                       f32_4 %567 = OpLoad %20 
                                       f32_4 %568 = OpVectorShuffle %567 %566 4 5 2 6 
                                                      OpStore %20 %568 
                                         f32 %569 = OpLoad %490 
                                Private f32* %570 = OpAccessChain %218 %195 
                                         f32 %571 = OpLoad %570 
                                         f32 %572 = OpFMul %569 %571 
                                Private f32* %573 = OpAccessChain %400 %52 
                                         f32 %574 = OpLoad %573 
                                         f32 %575 = OpFAdd %572 %574 
                                                      OpStore %490 %575 
                                Private f32* %576 = OpAccessChain %20 %48 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpLoad %490 
                                         f32 %579 = OpExtInst %1 37 %577 %578 
                                Private f32* %580 = OpAccessChain %141 %52 
                                                      OpStore %580 %579 
                                Private f32* %581 = OpAccessChain %20 %52 
                                         f32 %582 = OpLoad %581 
                                Private f32* %583 = OpAccessChain %141 %52 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFNegate %584 
                                         f32 %586 = OpFAdd %582 %585 
                                Private f32* %587 = OpAccessChain %141 %52 
                                                      OpStore %587 %586 
                                Private f32* %588 = OpAccessChain %20 %48 
                                         f32 %589 = OpLoad %588 
                                         f32 %590 = OpFNegate %589 
                                         f32 %591 = OpLoad %490 
                                         f32 %592 = OpFAdd %590 %591 
                                                      OpStore %490 %592 
                                Private f32* %594 = OpAccessChain %141 %52 
                                         f32 %595 = OpLoad %594 
                                         f32 %597 = OpFMul %595 %596 
                                         f32 %599 = OpFAdd %597 %598 
                                                      OpStore %593 %599 
                                         f32 %600 = OpLoad %490 
                                         f32 %601 = OpLoad %593 
                                         f32 %602 = OpFDiv %600 %601 
                                                      OpStore %490 %602 
                                         f32 %603 = OpLoad %490 
                                Private f32* %604 = OpAccessChain %20 %195 
                                         f32 %605 = OpLoad %604 
                                         f32 %606 = OpFAdd %603 %605 
                                                      OpStore %490 %606 
                                Private f32* %607 = OpAccessChain %20 %52 
                                         f32 %608 = OpLoad %607 
                                         f32 %609 = OpFAdd %608 %598 
                                                      OpStore %593 %609 
                                Private f32* %610 = OpAccessChain %141 %52 
                                         f32 %611 = OpLoad %610 
                                         f32 %612 = OpLoad %593 
                                         f32 %613 = OpFDiv %611 %612 
                                                      OpStore %593 %613 
                                Private f32* %614 = OpAccessChain %9 %48 
                                         f32 %615 = OpLoad %614 
                                Private f32* %616 = OpAccessChain %9 %57 
                                         f32 %617 = OpLoad %616 
                                        bool %618 = OpFOrdGreaterThanEqual %615 %617 
                                                      OpStore %204 %618 
                                        bool %620 = OpLoad %204 
                                                      OpSelectionMerge %622 None 
                                                      OpBranchConditional %620 %621 %623 
                                             %621 = OpLabel 
                                                      OpStore %619 %99 
                                                      OpBranch %622 
                                             %623 = OpLabel 
                                                      OpStore %619 %126 
                                                      OpBranch %622 
                                             %622 = OpLabel 
                                         f32 %624 = OpLoad %619 
                                                      OpStore %241 %624 
                                Private f32* %626 = OpAccessChain %9 %57 
                                         f32 %627 = OpLoad %626 
                                         f32 %628 = OpFNegate %627 
                                Private f32* %629 = OpAccessChain %9 %48 
                                         f32 %630 = OpLoad %629 
                                         f32 %631 = OpFAdd %628 %630 
                                                      OpStore %625 %631 
                                         f32 %633 = OpLoad %241 
                                         f32 %634 = OpLoad %625 
                                         f32 %635 = OpFMul %633 %634 
                                Private f32* %636 = OpAccessChain %9 %57 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpFAdd %635 %637 
                                Private f32* %639 = OpAccessChain %632 %52 
                                                      OpStore %639 %638 
                                Private f32* %641 = OpAccessChain %9 %52 
                                         f32 %642 = OpLoad %641 
                                Private f32* %643 = OpAccessChain %632 %52 
                                         f32 %644 = OpLoad %643 
                                        bool %645 = OpFOrdGreaterThanEqual %642 %644 
                                                      OpStore %640 %645 
                                        bool %648 = OpLoad %640 
                                                      OpSelectionMerge %650 None 
                                                      OpBranchConditional %648 %649 %651 
                                             %649 = OpLabel 
                                                      OpStore %647 %99 
                                                      OpBranch %650 
                                             %651 = OpLabel 
                                                      OpStore %647 %126 
                                                      OpBranch %650 
                                             %650 = OpLabel 
                                         f32 %652 = OpLoad %647 
                                                      OpStore %646 %652 
                                Private f32* %654 = OpAccessChain %632 %52 
                                         f32 %655 = OpLoad %654 
                                         f32 %656 = OpFNegate %655 
                                Private f32* %657 = OpAccessChain %9 %52 
                                         f32 %658 = OpLoad %657 
                                         f32 %659 = OpFAdd %656 %658 
                                Private f32* %660 = OpAccessChain %653 %52 
                                                      OpStore %660 %659 
                                         f32 %661 = OpLoad %646 
                                Private f32* %662 = OpAccessChain %653 %52 
                                         f32 %663 = OpLoad %662 
                                         f32 %664 = OpFMul %661 %663 
                                Private f32* %665 = OpAccessChain %632 %52 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpFAdd %664 %666 
                                Private f32* %668 = OpAccessChain %653 %52 
                                                      OpStore %668 %667 
                                Private f32* %669 = OpAccessChain %653 %52 
                                         f32 %670 = OpLoad %669 
                                Uniform f32* %672 = OpAccessChain %30 %671 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFMul %670 %673 
                                Private f32* %675 = OpAccessChain %653 %52 
                                                      OpStore %675 %674 
                                Private f32* %676 = OpAccessChain %653 %52 
                                         f32 %677 = OpLoad %676 
                                Private f32* %678 = OpAccessChain %20 %52 
                                         f32 %679 = OpLoad %678 
                                         f32 %680 = OpExtInst %1 37 %677 %679 
                                Private f32* %681 = OpAccessChain %653 %52 
                                                      OpStore %681 %680 
                                Private f32* %683 = OpAccessChain %189 %48 
                                         f32 %684 = OpLoad %683 
                                Private f32* %685 = OpAccessChain %189 %52 
                                         f32 %686 = OpLoad %685 
                                         f32 %687 = OpFAdd %684 %686 
                                                      OpStore %682 %687 
                                Private f32* %688 = OpAccessChain %20 %57 
                                         f32 %689 = OpLoad %688 
                                Private f32* %690 = OpAccessChain %125 %52 
                                         f32 %691 = OpLoad %690 
                                         f32 %692 = OpFMul %689 %691 
                                         f32 %693 = OpLoad %682 
                                         f32 %694 = OpFAdd %692 %693 
                                                      OpStore %682 %694 
                                         f32 %695 = OpLoad %682 
                                         f32 %697 = OpFMul %695 %696 
                                                      OpStore %682 %697 
                                         f32 %698 = OpLoad %682 
                                         f32 %699 = OpExtInst %1 43 %698 %126 %99 
                                                      OpStore %682 %699 
                                         f32 %700 = OpLoad %490 
                                       f32_3 %701 = OpCompositeConstruct %700 %700 %700 
                                       f32_3 %702 = OpExtInst %1 4 %701 
                                       f32_3 %705 = OpFAdd %702 %704 
                                                      OpStore %632 %705 
                                       f32_3 %706 = OpLoad %632 
                                       f32_3 %707 = OpExtInst %1 10 %706 
                                                      OpStore %632 %707 
                                       f32_3 %708 = OpLoad %632 
                                       f32_3 %710 = OpFMul %708 %709 
                                       f32_3 %713 = OpFAdd %710 %712 
                                                      OpStore %632 %713 
                                       f32_3 %714 = OpLoad %632 
                                       f32_3 %715 = OpExtInst %1 4 %714 
                                       f32_3 %717 = OpFAdd %715 %716 
                                                      OpStore %632 %717 
                                       f32_3 %718 = OpLoad %632 
                                       f32_3 %719 = OpCompositeConstruct %126 %126 %126 
                                       f32_3 %720 = OpCompositeConstruct %99 %99 %99 
                                       f32_3 %721 = OpExtInst %1 43 %718 %719 %720 
                                                      OpStore %632 %721 
                                       f32_3 %722 = OpLoad %632 
                                       f32_3 %723 = OpFAdd %722 %716 
                                                      OpStore %632 %723 
                                         f32 %724 = OpLoad %593 
                                       f32_3 %725 = OpCompositeConstruct %724 %724 %724 
                                       f32_3 %726 = OpLoad %632 
                                       f32_3 %727 = OpFMul %725 %726 
                                       f32_3 %729 = OpFAdd %727 %728 
                                                      OpStore %632 %729 
                                       f32_3 %730 = OpLoad %632 
                                       f32_3 %731 = OpLoad %653 
                                       f32_3 %732 = OpVectorShuffle %731 %731 0 0 0 
                                       f32_3 %733 = OpFMul %730 %732 
                                       f32_4 %734 = OpLoad %20 
                                       f32_4 %735 = OpVectorShuffle %734 %733 4 5 6 3 
                                                      OpStore %20 %735 
                                       f32_3 %736 = OpLoad %653 
                                       f32_3 %737 = OpVectorShuffle %736 %736 0 0 0 
                                       f32_3 %738 = OpFNegate %737 
                                       f32_3 %739 = OpLoad %632 
                                       f32_3 %740 = OpFMul %738 %739 
                                       f32_3 %741 = OpLoad %400 
                                       f32_3 %742 = OpFAdd %740 %741 
                                                      OpStore %653 %742 
                                         f32 %743 = OpLoad %682 
                                       f32_3 %744 = OpCompositeConstruct %743 %743 %743 
                                       f32_3 %745 = OpLoad %653 
                                       f32_3 %746 = OpFMul %744 %745 
                                       f32_4 %747 = OpLoad %20 
                                       f32_3 %748 = OpVectorShuffle %747 %747 0 1 2 
                                       f32_3 %749 = OpFAdd %746 %748 
                                                      OpStore %653 %749 
                                       f32_3 %750 = OpLoad %653 
                                       f32_4 %751 = OpLoad %472 
                                       f32_4 %752 = OpVectorShuffle %751 %750 4 5 6 3 
                                                      OpStore %472 %752 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat2;
    u_xlat3.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat3.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat1.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat21 = u_xlat1.y * u_xlat1.y;
    u_xlat21 = u_xlat1.x * u_xlat1.x + (-u_xlat21);
    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
    u_xlat1.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat1);
    u_xlat4.y = dot(unity_SHAg, u_xlat1);
    u_xlat4.z = dot(unity_SHAb, u_xlat1);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat1.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	vec4 _EmissiveColor;
uniform 	float _EmissiveThresholdSensitivity;
uniform 	float _MaxValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ParallaxTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat16_2;
vec4 u_xlat10_2;
vec2 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
float u_xlat16_7;
float u_xlat8;
vec2 u_xlat16_8;
bool u_xlatb8;
vec2 u_xlat10;
float u_xlat11;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
float u_xlat16_22;
bool u_xlatb22;
float u_xlat23;
bool u_xlatb23;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz + (-_EmissiveColor.xyz);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y + u_xlat1.x;
    u_xlat1.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb1 = u_xlat1.x<_EmissiveThresholdSensitivity;
    u_xlat16_8.x = dot(u_xlat10_0.xyz, vec3(0.298900008, 0.586600006, 0.114500001));
    u_xlat16_8.xy = u_xlat10_0.xz + (-u_xlat16_8.xx);
    u_xlat16_8.xy = u_xlat16_8.xy * vec2(1.0, 1.0) + vec2(1.0, 1.0);
    u_xlat16_22 = (-u_xlat16_8.x) * 0.298900008 + 1.0;
    u_xlat16_22 = (-u_xlat16_8.y) * 0.114500001 + u_xlat16_22;
    u_xlat16_22 = u_xlat16_22 * 1.70473921;
    u_xlat10_2 = texture(_ParallaxTex, vs_TEXCOORD4.xy);
    u_xlat3.xy = mix(vec2(0.0, 0.0), vec2(1.0, 0.75), vec2(bvec2(u_xlatb1)));
    u_xlat16_2.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
    u_xlat2.xyz = u_xlat3.yyy * u_xlat16_2.xyz + u_xlat10_0.xyz;
    u_xlat1.xz = log2(u_xlat16_8.xy);
    u_xlat1.y = log2(u_xlat16_22);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10.xy = u_xlat3.xx * u_xlat1.xy;
    u_xlat22 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb22 = u_xlat22<0.0;
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat22 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = (-u_xlat22) + u_xlat23;
    u_xlat22 = unity_ShadowFadeCenterAndType.w * u_xlat23 + u_xlat22;
    u_xlat22 = u_xlat22 * _LightShadowData.z + _LightShadowData.w;
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlatb23 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb23){
        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb24)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat24 = u_xlat4.y * 0.25 + 0.75;
        u_xlat11 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat24, u_xlat11);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat24 = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat22 = u_xlat22 + u_xlat10_4.x;
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat24 = min(u_xlat22, u_xlat24);
    u_xlat22 = (u_xlatb23) ? u_xlat24 : u_xlat22;
    u_xlat4.xyz = u_xlat2.xyz * vs_TEXCOORD5.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat4.w = 0.0;
    u_xlat2.w = u_xlat10_0.w;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat4.xyz = u_xlat1.zyx * u_xlat3.xxx + u_xlat2.zyx;
    u_xlatb21 = u_xlat4.y>=u_xlat4.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat4.w = 0.666666687;
    u_xlat1.xy = (-u_xlat4.xy) + u_xlat4.yx;
    u_xlat1.w = -1.0;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat4.xyw;
    u_xlatb21 = u_xlat4.z>=u_xlat5.x;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat5.w = u_xlat4.z;
    u_xlat6.xyw = u_xlat5.wyx;
    u_xlat6.z = -1.0;
    u_xlat6 = (-u_xlat5) + u_xlat6;
    u_xlat5 = vec4(u_xlat21) * u_xlat6 + u_xlat5;
    u_xlat21 = min(u_xlat5.y, u_xlat5.w);
    u_xlat21 = (-u_xlat21) + u_xlat5.x;
    u_xlat1.x = (-u_xlat5.y) + u_xlat5.w;
    u_xlat8 = u_xlat21 * 6.0 + 1.00000001e-010;
    u_xlat1.x = u_xlat1.x / u_xlat8;
    u_xlat1.x = u_xlat1.x + u_xlat5.z;
    u_xlat8 = u_xlat5.x + 1.00000001e-010;
    u_xlat21 = u_xlat21 / u_xlat8;
    u_xlatb8 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat16_7 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat7 = u_xlat8 * u_xlat16_7 + u_xlat10_0.z;
    u_xlatb14 = u_xlat10_0.x>=u_xlat7;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = (-u_xlat7) + u_xlat10_0.x;
    u_xlat0.x = u_xlat14 * u_xlat0.x + u_xlat7;
    u_xlat0.x = u_xlat0.x * _MaxValue;
    u_xlat0.x = min(u_xlat0.x, u_xlat5.x);
    u_xlat7 = u_xlat10.y + u_xlat10.x;
    u_xlat7 = u_xlat1.z * u_xlat3.x + u_xlat7;
    u_xlat7 = u_xlat7 * 10.0;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = abs(u_xlat1.xxx) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xzw = (-u_xlat0.xxx) * u_xlat1.xyz + u_xlat4.zyx;
    SV_Target0.xyz = vec3(u_xlat7) * u_xlat0.xzw + u_xlat2.xyz;
    SV_Target0.w = u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 483
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %159 %168 %169 %182 %221 %224 %227 %445 %464 %476 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate %159 Location 159 
                                                      OpDecorate %168 Location 168 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %182 Location 182 
                                                      OpDecorate %221 Location 221 
                                                      OpDecorate %224 Location 224 
                                                      OpDecorate %227 Location 227 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %445 Location 445 
                                                      OpDecorate %464 Location 464 
                                                      OpDecorate %476 Location 476 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 13 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 15 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                              Private f32_4* %101 = OpVariable Private 
                                             %102 = OpTypeVector %6 2 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %146 %146 
                                         f32 %153 = OpConstant 3.674022E-40 
                                       f32_2 %154 = OpConstantComposite %153 %153 
                                             %158 = OpTypePointer Output %102 
                               Output f32_2* %159 = OpVariable Output 
                                         f32 %162 = OpConstant 3.674022E-40 
                                       f32_2 %163 = OpConstantComposite %146 %162 
                                         f32 %165 = OpConstant 3.674022E-40 
                                       f32_2 %166 = OpConstantComposite %165 %146 
                               Output f32_2* %168 = OpVariable Output 
                                Input f32_4* %169 = OpVariable Input 
                                         i32 %172 = OpConstant 16 
                                             %181 = OpTypePointer Input %53 
                                Input f32_3* %182 = OpVariable Input 
                                         i32 %184 = OpConstant 14 
                                         u32 %189 = OpConstant 0 
                                             %190 = OpTypePointer Private %6 
                                         u32 %203 = OpConstant 2 
                                Private f32* %205 = OpVariable Private 
                                             %220 = OpTypePointer Output %53 
                               Output f32_3* %221 = OpVariable Output 
                               Output f32_3* %224 = OpVariable Output 
                               Output f32_4* %227 = OpVariable Output 
                                       f32_4 %228 = OpConstantComposite %165 %165 %165 %165 
                                             %229 = OpTypePointer Private %53 
                              Private f32_3* %230 = OpVariable Private 
                              Private f32_4* %247 = OpVariable Private 
                              Private f32_3* %253 = OpVariable Private 
                                         i32 %254 = OpConstant 9 
                                         i32 %260 = OpConstant 10 
                                         i32 %266 = OpConstant 11 
                                         i32 %272 = OpConstant 12 
                                         u32 %281 = OpConstant 3 
                                         i32 %283 = OpConstant 6 
                                         i32 %289 = OpConstant 7 
                                         i32 %295 = OpConstant 8 
                                       f32_3 %305 = OpConstantComposite %165 %165 %165 
                              Private f32_3* %307 = OpVariable Private 
                                         f32 %311 = OpConstant 3.674022E-40 
                                       f32_3 %312 = OpConstantComposite %311 %311 %311 
                                         f32 %317 = OpConstant 3.674022E-40 
                                       f32_3 %318 = OpConstantComposite %317 %317 %317 
                                         f32 %320 = OpConstant 3.674022E-40 
                                       f32_3 %321 = OpConstantComposite %320 %320 %320 
                              Private f32_4* %331 = OpVariable Private 
                              Private f32_4* %339 = OpVariable Private 
                                         f32 %375 = OpConstant 3.674022E-40 
                                       f32_4 %376 = OpConstantComposite %375 %375 %375 %375 
                                         i32 %381 = OpConstant 4 
                                       f32_4 %385 = OpConstantComposite %146 %146 %146 %146 
                                         i32 %399 = OpConstant 5 
                               Output f32_3* %445 = OpVariable Output 
                                             %450 = OpTypePointer Uniform %6 
                               Output f32_4* %464 = OpVariable Output 
                               Output f32_4* %476 = OpVariable Output 
                                             %477 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %65 %92 
                                        f32_4 %98 = OpLoad %65 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                       f32_4 %103 = OpLoad %47 
                                       f32_2 %104 = OpVectorShuffle %103 %103 1 1 
                              Uniform f32_4* %105 = OpAccessChain %23 %68 %26 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %104 %107 
                                       f32_4 %109 = OpLoad %101 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 2 3 
                                                      OpStore %101 %110 
                              Uniform f32_4* %111 = OpAccessChain %23 %68 %31 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 0 1 
                                       f32_4 %114 = OpLoad %47 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 0 
                                       f32_2 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %101 
                                       f32_2 %118 = OpVectorShuffle %117 %117 0 1 
                                       f32_2 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %47 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 2 3 
                                                      OpStore %47 %121 
                              Uniform f32_4* %122 = OpAccessChain %23 %68 %39 
                                       f32_4 %123 = OpLoad %122 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_4 %125 = OpLoad %47 
                                       f32_2 %126 = OpVectorShuffle %125 %125 2 2 
                                       f32_2 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %47 
                                       f32_2 %129 = OpVectorShuffle %128 %128 0 1 
                                       f32_2 %130 = OpFAdd %127 %129 
                                       f32_4 %131 = OpLoad %47 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %47 %132 
                              Uniform f32_4* %133 = OpAccessChain %23 %68 %49 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_4 %136 = OpLoad %47 
                                       f32_2 %137 = OpVectorShuffle %136 %136 3 3 
                                       f32_2 %138 = OpFMul %135 %137 
                                       f32_4 %139 = OpLoad %47 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %47 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %47 %143 
                                       f32_4 %144 = OpLoad %47 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %47 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %47 %150 
                                       f32_4 %151 = OpLoad %47 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %155 = OpFMul %152 %154 
                                       f32_4 %156 = OpLoad %47 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 2 3 
                                                      OpStore %47 %157 
                                       f32_4 %160 = OpLoad %47 
                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
                                       f32_2 %164 = OpFMul %161 %163 
                                       f32_2 %167 = OpFAdd %164 %166 
                                                      OpStore %159 %167 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 0 1 
                              Uniform f32_4* %173 = OpAccessChain %23 %172 
                                       f32_4 %174 = OpLoad %173 
                                       f32_2 %175 = OpVectorShuffle %174 %174 0 1 
                                       f32_2 %176 = OpFMul %171 %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %172 
                                       f32_4 %178 = OpLoad %177 
                                       f32_2 %179 = OpVectorShuffle %178 %178 2 3 
                                       f32_2 %180 = OpFAdd %176 %179 
                                                      OpStore %168 %180 
                                       f32_3 %183 = OpLoad %182 
                              Uniform f32_4* %185 = OpAccessChain %23 %184 %31 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                         f32 %188 = OpDot %183 %187 
                                Private f32* %191 = OpAccessChain %47 %189 
                                                      OpStore %191 %188 
                                       f32_3 %192 = OpLoad %182 
                              Uniform f32_4* %193 = OpAccessChain %23 %184 %26 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %192 %195 
                                Private f32* %197 = OpAccessChain %47 %93 
                                                      OpStore %197 %196 
                                       f32_3 %198 = OpLoad %182 
                              Uniform f32_4* %199 = OpAccessChain %23 %184 %39 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                         f32 %202 = OpDot %198 %201 
                                Private f32* %204 = OpAccessChain %47 %203 
                                                      OpStore %204 %202 
                                       f32_4 %206 = OpLoad %47 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %47 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %207 %209 
                                                      OpStore %205 %210 
                                         f32 %211 = OpLoad %205 
                                         f32 %212 = OpExtInst %1 32 %211 
                                                      OpStore %205 %212 
                                         f32 %213 = OpLoad %205 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_4 %215 = OpLoad %47 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %47 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %47 %219 
                                       f32_4 %222 = OpLoad %47 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                                      OpStore %221 %223 
                                       f32_4 %225 = OpLoad %9 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                                      OpStore %224 %226 
                                                      OpStore %227 %228 
                                Private f32* %231 = OpAccessChain %47 %93 
                                         f32 %232 = OpLoad %231 
                                Private f32* %233 = OpAccessChain %47 %93 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFMul %232 %234 
                                Private f32* %236 = OpAccessChain %230 %189 
                                                      OpStore %236 %235 
                                Private f32* %237 = OpAccessChain %47 %189 
                                         f32 %238 = OpLoad %237 
                                Private f32* %239 = OpAccessChain %47 %189 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpFMul %238 %240 
                                Private f32* %242 = OpAccessChain %230 %189 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFNegate %243 
                                         f32 %245 = OpFAdd %241 %244 
                                Private f32* %246 = OpAccessChain %230 %189 
                                                      OpStore %246 %245 
                                       f32_4 %248 = OpLoad %47 
                                       f32_4 %249 = OpVectorShuffle %248 %248 1 2 2 0 
                                       f32_4 %250 = OpLoad %47 
                                       f32_4 %251 = OpVectorShuffle %250 %250 0 1 2 2 
                                       f32_4 %252 = OpFMul %249 %251 
                                                      OpStore %247 %252 
                              Uniform f32_4* %255 = OpAccessChain %23 %254 
                                       f32_4 %256 = OpLoad %255 
                                       f32_4 %257 = OpLoad %247 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %253 %189 
                                                      OpStore %259 %258 
                              Uniform f32_4* %261 = OpAccessChain %23 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_4 %263 = OpLoad %247 
                                         f32 %264 = OpDot %262 %263 
                                Private f32* %265 = OpAccessChain %253 %93 
                                                      OpStore %265 %264 
                              Uniform f32_4* %267 = OpAccessChain %23 %266 
                                       f32_4 %268 = OpLoad %267 
                                       f32_4 %269 = OpLoad %247 
                                         f32 %270 = OpDot %268 %269 
                                Private f32* %271 = OpAccessChain %253 %203 
                                                      OpStore %271 %270 
                              Uniform f32_4* %273 = OpAccessChain %23 %272 
                                       f32_4 %274 = OpLoad %273 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_3 %276 = OpLoad %230 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 0 0 
                                       f32_3 %278 = OpFMul %275 %277 
                                       f32_3 %279 = OpLoad %253 
                                       f32_3 %280 = OpFAdd %278 %279 
                                                      OpStore %230 %280 
                                Private f32* %282 = OpAccessChain %47 %281 
                                                      OpStore %282 %146 
                              Uniform f32_4* %284 = OpAccessChain %23 %283 
                                       f32_4 %285 = OpLoad %284 
                                       f32_4 %286 = OpLoad %47 
                                         f32 %287 = OpDot %285 %286 
                                Private f32* %288 = OpAccessChain %253 %189 
                                                      OpStore %288 %287 
                              Uniform f32_4* %290 = OpAccessChain %23 %289 
                                       f32_4 %291 = OpLoad %290 
                                       f32_4 %292 = OpLoad %47 
                                         f32 %293 = OpDot %291 %292 
                                Private f32* %294 = OpAccessChain %253 %93 
                                                      OpStore %294 %293 
                              Uniform f32_4* %296 = OpAccessChain %23 %295 
                                       f32_4 %297 = OpLoad %296 
                                       f32_4 %298 = OpLoad %47 
                                         f32 %299 = OpDot %297 %298 
                                Private f32* %300 = OpAccessChain %253 %203 
                                                      OpStore %300 %299 
                                       f32_3 %301 = OpLoad %230 
                                       f32_3 %302 = OpLoad %253 
                                       f32_3 %303 = OpFAdd %301 %302 
                                                      OpStore %230 %303 
                                       f32_3 %304 = OpLoad %230 
                                       f32_3 %306 = OpExtInst %1 40 %304 %305 
                                                      OpStore %230 %306 
                                       f32_3 %308 = OpLoad %230 
                                       f32_3 %309 = OpExtInst %1 30 %308 
                                                      OpStore %307 %309 
                                       f32_3 %310 = OpLoad %307 
                                       f32_3 %313 = OpFMul %310 %312 
                                                      OpStore %307 %313 
                                       f32_3 %314 = OpLoad %307 
                                       f32_3 %315 = OpExtInst %1 29 %314 
                                                      OpStore %307 %315 
                                       f32_3 %316 = OpLoad %307 
                                       f32_3 %319 = OpFMul %316 %318 
                                       f32_3 %322 = OpFAdd %319 %321 
                                                      OpStore %307 %322 
                                       f32_3 %323 = OpLoad %307 
                                       f32_3 %324 = OpExtInst %1 40 %323 %305 
                                                      OpStore %307 %324 
                                       f32_4 %325 = OpLoad %9 
                                       f32_4 %326 = OpVectorShuffle %325 %325 1 1 1 1 
                                       f32_4 %327 = OpFNegate %326 
                              Uniform f32_4* %328 = OpAccessChain %23 %39 
                                       f32_4 %329 = OpLoad %328 
                                       f32_4 %330 = OpFAdd %327 %329 
                                                      OpStore %101 %330 
                                       f32_4 %332 = OpLoad %47 
                                       f32_4 %333 = OpVectorShuffle %332 %332 1 1 1 1 
                                       f32_4 %334 = OpLoad %101 
                                       f32_4 %335 = OpFMul %333 %334 
                                                      OpStore %331 %335 
                                       f32_4 %336 = OpLoad %101 
                                       f32_4 %337 = OpLoad %101 
                                       f32_4 %338 = OpFMul %336 %337 
                                                      OpStore %101 %338 
                                       f32_4 %340 = OpLoad %9 
                                       f32_4 %341 = OpVectorShuffle %340 %340 0 0 0 0 
                                       f32_4 %342 = OpFNegate %341 
                              Uniform f32_4* %343 = OpAccessChain %23 %26 
                                       f32_4 %344 = OpLoad %343 
                                       f32_4 %345 = OpFAdd %342 %344 
                                                      OpStore %339 %345 
                                       f32_4 %346 = OpLoad %9 
                                       f32_4 %347 = OpVectorShuffle %346 %346 2 2 2 2 
                                       f32_4 %348 = OpFNegate %347 
                              Uniform f32_4* %349 = OpAccessChain %23 %49 
                                       f32_4 %350 = OpLoad %349 
                                       f32_4 %351 = OpFAdd %348 %350 
                                                      OpStore %9 %351 
                                       f32_4 %352 = OpLoad %339 
                                       f32_4 %353 = OpLoad %47 
                                       f32_4 %354 = OpVectorShuffle %353 %353 0 0 0 0 
                                       f32_4 %355 = OpFMul %352 %354 
                                       f32_4 %356 = OpLoad %331 
                                       f32_4 %357 = OpFAdd %355 %356 
                                                      OpStore %331 %357 
                                       f32_4 %358 = OpLoad %9 
                                       f32_4 %359 = OpLoad %47 
                                       f32_4 %360 = OpVectorShuffle %359 %359 2 2 2 2 
                                       f32_4 %361 = OpFMul %358 %360 
                                       f32_4 %362 = OpLoad %331 
                                       f32_4 %363 = OpFAdd %361 %362 
                                                      OpStore %47 %363 
                                       f32_4 %364 = OpLoad %339 
                                       f32_4 %365 = OpLoad %339 
                                       f32_4 %366 = OpFMul %364 %365 
                                       f32_4 %367 = OpLoad %101 
                                       f32_4 %368 = OpFAdd %366 %367 
                                                      OpStore %101 %368 
                                       f32_4 %369 = OpLoad %9 
                                       f32_4 %370 = OpLoad %9 
                                       f32_4 %371 = OpFMul %369 %370 
                                       f32_4 %372 = OpLoad %101 
                                       f32_4 %373 = OpFAdd %371 %372 
                                                      OpStore %9 %373 
                                       f32_4 %374 = OpLoad %9 
                                       f32_4 %377 = OpExtInst %1 40 %374 %376 
                                                      OpStore %9 %377 
                                       f32_4 %378 = OpLoad %9 
                                       f32_4 %379 = OpExtInst %1 32 %378 
                                                      OpStore %101 %379 
                                       f32_4 %380 = OpLoad %9 
                              Uniform f32_4* %382 = OpAccessChain %23 %381 
                                       f32_4 %383 = OpLoad %382 
                                       f32_4 %384 = OpFMul %380 %383 
                                       f32_4 %386 = OpFAdd %384 %385 
                                                      OpStore %9 %386 
                                       f32_4 %387 = OpLoad %9 
                                       f32_4 %388 = OpFDiv %385 %387 
                                                      OpStore %9 %388 
                                       f32_4 %389 = OpLoad %47 
                                       f32_4 %390 = OpLoad %101 
                                       f32_4 %391 = OpFMul %389 %390 
                                                      OpStore %47 %391 
                                       f32_4 %392 = OpLoad %47 
                                       f32_4 %393 = OpExtInst %1 40 %392 %228 
                                                      OpStore %47 %393 
                                       f32_4 %394 = OpLoad %9 
                                       f32_4 %395 = OpLoad %47 
                                       f32_4 %396 = OpFMul %394 %395 
                                                      OpStore %9 %396 
                                       f32_4 %397 = OpLoad %9 
                                       f32_3 %398 = OpVectorShuffle %397 %397 1 1 1 
                              Uniform f32_4* %400 = OpAccessChain %23 %399 %26 
                                       f32_4 %401 = OpLoad %400 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFMul %398 %402 
                                       f32_4 %404 = OpLoad %47 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 6 3 
                                                      OpStore %47 %405 
                              Uniform f32_4* %406 = OpAccessChain %23 %399 %31 
                                       f32_4 %407 = OpLoad %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_4 %409 = OpLoad %9 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 0 0 
                                       f32_3 %411 = OpFMul %408 %410 
                                       f32_4 %412 = OpLoad %47 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_3 %414 = OpFAdd %411 %413 
                                       f32_4 %415 = OpLoad %47 
                                       f32_4 %416 = OpVectorShuffle %415 %414 4 5 6 3 
                                                      OpStore %47 %416 
                              Uniform f32_4* %417 = OpAccessChain %23 %399 %39 
                                       f32_4 %418 = OpLoad %417 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_4 %420 = OpLoad %9 
                                       f32_3 %421 = OpVectorShuffle %420 %420 2 2 2 
                                       f32_3 %422 = OpFMul %419 %421 
                                       f32_4 %423 = OpLoad %47 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                       f32_3 %425 = OpFAdd %422 %424 
                                       f32_4 %426 = OpLoad %9 
                                       f32_4 %427 = OpVectorShuffle %426 %425 4 5 6 3 
                                                      OpStore %9 %427 
                              Uniform f32_4* %428 = OpAccessChain %23 %399 %49 
                                       f32_4 %429 = OpLoad %428 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                                       f32_4 %431 = OpLoad %9 
                                       f32_3 %432 = OpVectorShuffle %431 %431 3 3 3 
                                       f32_3 %433 = OpFMul %430 %432 
                                       f32_4 %434 = OpLoad %9 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_3 %436 = OpFAdd %433 %435 
                                       f32_4 %437 = OpLoad %9 
                                       f32_4 %438 = OpVectorShuffle %437 %436 4 5 6 3 
                                                      OpStore %9 %438 
                                       f32_4 %439 = OpLoad %9 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                       f32_3 %441 = OpLoad %307 
                                       f32_3 %442 = OpFAdd %440 %441 
                                       f32_4 %443 = OpLoad %9 
                                       f32_4 %444 = OpVectorShuffle %443 %442 4 5 6 3 
                                                      OpStore %9 %444 
                                       f32_4 %446 = OpLoad %9 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 1 2 
                                                      OpStore %445 %447 
                                Private f32* %448 = OpAccessChain %65 %93 
                                         f32 %449 = OpLoad %448 
                                Uniform f32* %451 = OpAccessChain %23 %31 %189 
                                         f32 %452 = OpLoad %451 
                                         f32 %453 = OpFMul %449 %452 
                                Private f32* %454 = OpAccessChain %9 %189 
                                                      OpStore %454 %453 
                                Private f32* %455 = OpAccessChain %9 %189 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpFMul %456 %153 
                                Private f32* %458 = OpAccessChain %9 %281 
                                                      OpStore %458 %457 
                                       f32_4 %459 = OpLoad %65 
                                       f32_2 %460 = OpVectorShuffle %459 %459 0 3 
                                       f32_2 %461 = OpFMul %460 %154 
                                       f32_4 %462 = OpLoad %9 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 1 5 3 
                                                      OpStore %9 %463 
                                       f32_4 %465 = OpLoad %65 
                                       f32_2 %466 = OpVectorShuffle %465 %465 2 3 
                                       f32_4 %467 = OpLoad %464 
                                       f32_4 %468 = OpVectorShuffle %467 %466 0 1 4 5 
                                                      OpStore %464 %468 
                                       f32_4 %469 = OpLoad %9 
                                       f32_2 %470 = OpVectorShuffle %469 %469 2 2 
                                       f32_4 %471 = OpLoad %9 
                                       f32_2 %472 = OpVectorShuffle %471 %471 0 3 
                                       f32_2 %473 = OpFAdd %470 %472 
                                       f32_4 %474 = OpLoad %464 
                                       f32_4 %475 = OpVectorShuffle %474 %473 4 5 2 3 
                                                      OpStore %464 %475 
                                                      OpStore %476 %228 
                                 Output f32* %478 = OpAccessChain %97 %31 %93 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFNegate %479 
                                 Output f32* %481 = OpAccessChain %97 %31 %93 
                                                      OpStore %481 %480 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 754
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %121 %220 %411 %466 %472 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpMemberDecorate %28 1 RelaxedPrecision 
                                                      OpMemberDecorate %28 1 Offset 28 
                                                      OpMemberDecorate %28 2 RelaxedPrecision 
                                                      OpMemberDecorate %28 2 Offset 28 
                                                      OpMemberDecorate %28 3 Offset 28 
                                                      OpMemberDecorate %28 4 Offset 28 
                                                      OpMemberDecorate %28 5 Offset 28 
                                                      OpMemberDecorate %28 6 Offset 28 
                                                      OpMemberDecorate %28 7 Offset 28 
                                                      OpMemberDecorate %28 8 Offset 28 
                                                      OpMemberDecorate %28 9 RelaxedPrecision 
                                                      OpMemberDecorate %28 9 Offset 28 
                                                      OpMemberDecorate %28 10 Offset 28 
                                                      OpMemberDecorate %28 11 Offset 28 
                                                      OpMemberDecorate %28 12 Offset 28 
                                                      OpMemberDecorate %28 13 Offset 28 
                                                      OpMemberDecorate %28 14 Offset 28 
                                                      OpMemberDecorate %28 15 RelaxedPrecision 
                                                      OpMemberDecorate %28 15 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %119 DescriptorSet 119 
                                                      OpDecorate %119 Binding 119 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %121 Location 121 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %220 Location 220 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %293 SpecId 293 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %411 Location 411 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %420 DescriptorSet 420 
                                                      OpDecorate %420 Binding 420 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %466 Location 466 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %472 Location 472 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %544 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %617 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %699 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeVector %6 3 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %7 %25 
                                              %27 = OpTypeArray %7 %25 
                                              %28 = OpTypeStruct %21 %7 %7 %7 %26 %7 %27 %21 %21 %7 %6 %6 %7 %6 %6 %6 
                                              %29 = OpTypePointer Uniform %28 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32_4; f32; f32; f32;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 12 
                                              %33 = OpTypePointer Uniform %7 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Private %6 
                                          u32 %52 = OpConstant 0 
                                          u32 %57 = OpConstant 2 
                                              %71 = OpTypeBool 
                                              %72 = OpTypePointer Private %71 
                                Private bool* %73 = OpVariable Private 
                                          i32 %76 = OpConstant 13 
                                              %77 = OpTypePointer Uniform %6 
                               Private f32_4* %81 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          f32 %86 = OpConstant 3.674022E-40 
                                        f32_3 %87 = OpConstantComposite %84 %85 %86 
                                              %90 = OpTypePointer Private %15 
                               Private f32_2* %91 = OpVariable Private 
                                          f32 %99 = OpConstant 3.674022E-40 
                                       f32_2 %100 = OpConstantComposite %99 %99 
                                Private f32* %102 = OpVariable Private 
                                         f32 %115 = OpConstant 3.674022E-40 
                                             %117 = OpTypePointer Private %21 
                              Private f32_3* %118 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %119 = OpVariable UniformConstant 
                                Input f32_2* %121 = OpVariable Input 
                              Private f32_2* %125 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                       f32_2 %127 = OpConstantComposite %126 %126 
                                         f32 %128 = OpConstant 3.674022E-40 
                                       f32_2 %129 = OpConstantComposite %99 %128 
                                             %131 = OpTypeVector %71 2 
                              Private f32_3* %135 = OpVariable Private 
                              Private f32_4* %141 = OpVariable Private 
                                         i32 %160 = OpConstant 11 
                                         i32 %182 = OpConstant 10 
                              Private f32_2* %189 = OpVariable Private 
                                         u32 %195 = OpConstant 3 
                                         i32 %198 = OpConstant 15 
                               Private bool* %204 = OpVariable Private 
                                         i32 %209 = OpConstant 0 
                                         i32 %210 = OpConstant 1 
                                         i32 %212 = OpConstant -1 
                              Private f32_4* %218 = OpVariable Private 
                                             %219 = OpTypePointer Input %21 
                                Input f32_3* %220 = OpVariable Input 
                                             %223 = OpTypePointer Uniform %21 
                              Private f32_3* %229 = OpVariable Private 
                                         i32 %230 = OpConstant 4 
                                         i32 %237 = OpConstant 2 
                                Private f32* %241 = OpVariable Private 
                                         i32 %247 = OpConstant 3 
                                Private f32* %255 = OpVariable Private 
                               Private bool* %282 = OpVariable Private 
                                         i32 %283 = OpConstant 5 
                                        bool %287 = OpConstantFalse 
                                        bool %293 = OpSpecConstantFalse 
                               Private bool* %296 = OpVariable Private 
                                         i32 %302 = OpConstant 6 
                                             %339 = OpTypePointer Function %21 
                                         i32 %353 = OpConstant 8 
                              Private f32_4* %360 = OpVariable Private 
                                         i32 %363 = OpConstant 7 
                                Private f32* %369 = OpVariable Private 
                                         f32 %372 = OpConstant 3.674022E-40 
                                         f32 %377 = OpConstant 3.674022E-40 
                                             %386 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %387 = OpTypeSampledImage %386 
                                             %388 = OpTypePointer UniformConstant %387 
 UniformConstant read_only Texture3DSampled* %389 = OpVariable UniformConstant 
                              Private f32_3* %400 = OpVariable Private 
                                             %410 = OpTypePointer Input %7 
                                Input f32_4* %411 = OpVariable Input 
                                Private f32* %419 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %420 = OpVariable UniformConstant 
                              Private f32_3* %426 = OpVariable Private 
                                             %441 = OpTypePointer Function %6 
                                         i32 %455 = OpConstant 9 
                                Input f32_3* %466 = OpVariable Input 
                                             %471 = OpTypePointer Output %7 
                               Output f32_4* %472 = OpVariable Output 
                                             %475 = OpTypePointer Output %6 
                               Private bool* %484 = OpVariable Private 
                                Private f32* %490 = OpVariable Private 
                              Private f32_2* %497 = OpVariable Private 
                                         f32 %505 = OpConstant 3.674022E-40 
                                         f32 %521 = OpConstant 3.674022E-40 
                                       f32_2 %522 = OpConstantComposite %505 %521 
                                Private f32* %593 = OpVariable Private 
                                         f32 %596 = OpConstant 3.674022E-40 
                                         f32 %598 = OpConstant 3.674022E-40 
                                Private f32* %625 = OpVariable Private 
                              Private f32_3* %632 = OpVariable Private 
                               Private bool* %640 = OpVariable Private 
                                Private f32* %646 = OpVariable Private 
                              Private f32_3* %653 = OpVariable Private 
                                         i32 %671 = OpConstant 14 
                                Private f32* %682 = OpVariable Private 
                                         f32 %696 = OpConstant 3.674022E-40 
                                         f32 %703 = OpConstant 3.674022E-40 
                                       f32_3 %704 = OpConstantComposite %99 %521 %703 
                                       f32_3 %709 = OpConstantComposite %596 %596 %596 
                                         f32 %711 = OpConstant 3.674022E-40 
                                       f32_3 %712 = OpConstantComposite %711 %711 %711 
                                       f32_3 %716 = OpConstantComposite %505 %505 %505 
                                       f32_3 %728 = OpConstantComposite %99 %99 %99 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %340 = OpVariable Function 
                               Function f32* %442 = OpVariable Function 
                               Function f32* %491 = OpVariable Function 
                               Function f32* %531 = OpVariable Function 
                               Function f32* %619 = OpVariable Function 
                               Function f32* %647 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %22 = OpLoad %9 
                                        f32_3 %23 = OpVectorShuffle %22 %22 0 1 2 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFNegate %36 
                                        f32_3 %38 = OpFAdd %23 %37 
                                        f32_4 %39 = OpLoad %20 
                                        f32_4 %40 = OpVectorShuffle %39 %38 4 5 6 3 
                                                      OpStore %20 %40 
                                        f32_4 %41 = OpLoad %20 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpLoad %20 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_2 %45 = OpFMul %42 %44 
                                        f32_4 %46 = OpLoad %20 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 2 3 
                                                      OpStore %20 %47 
                                 Private f32* %50 = OpAccessChain %20 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %53 = OpAccessChain %20 %52 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFAdd %51 %54 
                                 Private f32* %56 = OpAccessChain %20 %52 
                                                      OpStore %56 %55 
                                 Private f32* %58 = OpAccessChain %20 %57 
                                          f32 %59 = OpLoad %58 
                                 Private f32* %60 = OpAccessChain %20 %57 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFMul %59 %61 
                                 Private f32* %63 = OpAccessChain %20 %52 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %62 %64 
                                 Private f32* %66 = OpAccessChain %20 %52 
                                                      OpStore %66 %65 
                                 Private f32* %67 = OpAccessChain %20 %52 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpExtInst %1 31 %68 
                                 Private f32* %70 = OpAccessChain %20 %52 
                                                      OpStore %70 %69 
                                 Private f32* %74 = OpAccessChain %20 %52 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %78 = OpAccessChain %30 %76 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %75 %79 
                                                      OpStore %73 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                          f32 %88 = OpDot %83 %87 
                                 Private f32* %89 = OpAccessChain %81 %52 
                                                      OpStore %89 %88 
                                        f32_4 %92 = OpLoad %9 
                                        f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                                        f32_4 %94 = OpLoad %81 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 0 
                                        f32_2 %96 = OpFNegate %95 
                                        f32_2 %97 = OpFAdd %93 %96 
                                                      OpStore %91 %97 
                                        f32_2 %98 = OpLoad %91 
                                       f32_2 %101 = OpFAdd %98 %100 
                                                      OpStore %91 %101 
                                Private f32* %103 = OpAccessChain %91 %52 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFNegate %104 
                                         f32 %106 = OpFMul %105 %84 
                                         f32 %107 = OpFAdd %106 %99 
                                                      OpStore %102 %107 
                                Private f32* %108 = OpAccessChain %91 %48 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFMul %110 %86 
                                         f32 %112 = OpLoad %102 
                                         f32 %113 = OpFAdd %111 %112 
                                                      OpStore %102 %113 
                                         f32 %114 = OpLoad %102 
                                         f32 %116 = OpFMul %114 %115 
                                                      OpStore %102 %116 
                  read_only Texture2DSampled %120 = OpLoad %119 
                                       f32_2 %122 = OpLoad %121 
                                       f32_4 %123 = OpImageSampleImplicitLod %120 %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                                      OpStore %118 %124 
                                        bool %130 = OpLoad %73 
                                      bool_2 %132 = OpCompositeConstruct %130 %130 
                                       f32_2 %133 = OpSelect %132 %100 %127 
                                       f32_2 %134 = OpExtInst %1 46 %127 %129 %133 
                                                      OpStore %125 %134 
                                       f32_4 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFNegate %137 
                                       f32_3 %139 = OpLoad %118 
                                       f32_3 %140 = OpFAdd %138 %139 
                                                      OpStore %135 %140 
                                       f32_2 %142 = OpLoad %125 
                                       f32_3 %143 = OpVectorShuffle %142 %142 1 1 1 
                                       f32_3 %144 = OpLoad %135 
                                       f32_3 %145 = OpFMul %143 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %141 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %141 %150 
                                       f32_2 %151 = OpLoad %91 
                                       f32_2 %152 = OpExtInst %1 30 %151 
                                       f32_4 %153 = OpLoad %20 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 1 5 3 
                                                      OpStore %20 %154 
                                         f32 %155 = OpLoad %102 
                                         f32 %156 = OpExtInst %1 30 %155 
                                Private f32* %157 = OpAccessChain %20 %48 
                                                      OpStore %157 %156 
                                       f32_4 %158 = OpLoad %20 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                Uniform f32* %161 = OpAccessChain %30 %160 
                                         f32 %162 = OpLoad %161 
                                Uniform f32* %163 = OpAccessChain %30 %160 
                                         f32 %164 = OpLoad %163 
                                Uniform f32* %165 = OpAccessChain %30 %160 
                                         f32 %166 = OpLoad %165 
                                       f32_3 %167 = OpCompositeConstruct %162 %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                         f32 %169 = OpCompositeExtract %167 1 
                                         f32 %170 = OpCompositeExtract %167 2 
                                       f32_3 %171 = OpCompositeConstruct %168 %169 %170 
                                       f32_3 %172 = OpFMul %159 %171 
                                       f32_4 %173 = OpLoad %20 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
                                                      OpStore %20 %174 
                                       f32_4 %175 = OpLoad %20 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpExtInst %1 29 %176 
                                       f32_4 %178 = OpLoad %20 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 6 3 
                                                      OpStore %20 %179 
                                       f32_4 %180 = OpLoad %20 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                Uniform f32* %183 = OpAccessChain %30 %182 
                                         f32 %184 = OpLoad %183 
                                       f32_3 %185 = OpCompositeConstruct %184 %184 %184 
                                       f32_3 %186 = OpFMul %181 %185 
                                       f32_4 %187 = OpLoad %20 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %20 %188 
                                       f32_2 %190 = OpLoad %125 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 0 
                                       f32_4 %192 = OpLoad %20 
                                       f32_2 %193 = OpVectorShuffle %192 %192 0 1 
                                       f32_2 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                Private f32* %196 = OpAccessChain %9 %195 
                                         f32 %197 = OpLoad %196 
                                Uniform f32* %199 = OpAccessChain %30 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFNegate %200 
                                         f32 %202 = OpFAdd %197 %201 
                                Private f32* %203 = OpAccessChain %81 %52 
                                                      OpStore %203 %202 
                                Private f32* %205 = OpAccessChain %81 %52 
                                         f32 %206 = OpLoad %205 
                                        bool %207 = OpFOrdLessThan %206 %126 
                                                      OpStore %204 %207 
                                        bool %208 = OpLoad %204 
                                         i32 %211 = OpSelect %208 %210 %209 
                                         i32 %213 = OpIMul %211 %212 
                                        bool %214 = OpINotEqual %213 %209 
                                                      OpSelectionMerge %216 None 
                                                      OpBranchConditional %214 %215 %216 
                                             %215 = OpLabel 
                                                      OpKill
                                             %216 = OpLabel 
                                       f32_3 %221 = OpLoad %220 
                                       f32_3 %222 = OpFNegate %221 
                              Uniform f32_3* %224 = OpAccessChain %30 %209 
                                       f32_3 %225 = OpLoad %224 
                                       f32_3 %226 = OpFAdd %222 %225 
                                       f32_4 %227 = OpLoad %218 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 6 3 
                                                      OpStore %218 %228 
                                Uniform f32* %231 = OpAccessChain %30 %230 %209 %57 
                                         f32 %232 = OpLoad %231 
                                Private f32* %233 = OpAccessChain %229 %52 
                                                      OpStore %233 %232 
                                Uniform f32* %234 = OpAccessChain %30 %230 %210 %57 
                                         f32 %235 = OpLoad %234 
                                Private f32* %236 = OpAccessChain %229 %48 
                                                      OpStore %236 %235 
                                Uniform f32* %238 = OpAccessChain %30 %230 %237 %57 
                                         f32 %239 = OpLoad %238 
                                Private f32* %240 = OpAccessChain %229 %57 
                                                      OpStore %240 %239 
                                       f32_4 %242 = OpLoad %218 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpLoad %229 
                                         f32 %245 = OpDot %243 %244 
                                                      OpStore %241 %245 
                                       f32_3 %246 = OpLoad %220 
                              Uniform f32_4* %248 = OpAccessChain %30 %247 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpFNegate %250 
                                       f32_3 %252 = OpFAdd %246 %251 
                                       f32_4 %253 = OpLoad %218 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %218 %254 
                                       f32_4 %256 = OpLoad %218 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %218 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %255 %260 
                                         f32 %261 = OpLoad %255 
                                         f32 %262 = OpExtInst %1 31 %261 
                                                      OpStore %255 %262 
                                         f32 %263 = OpLoad %241 
                                         f32 %264 = OpFNegate %263 
                                         f32 %265 = OpLoad %255 
                                         f32 %266 = OpFAdd %264 %265 
                                                      OpStore %255 %266 
                                Uniform f32* %267 = OpAccessChain %30 %247 %195 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpLoad %255 
                                         f32 %270 = OpFMul %268 %269 
                                         f32 %271 = OpLoad %241 
                                         f32 %272 = OpFAdd %270 %271 
                                                      OpStore %241 %272 
                                         f32 %273 = OpLoad %241 
                                Uniform f32* %274 = OpAccessChain %30 %237 %57 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpFMul %273 %275 
                                Uniform f32* %277 = OpAccessChain %30 %237 %195 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFAdd %276 %278 
                                                      OpStore %241 %279 
                                         f32 %280 = OpLoad %241 
                                         f32 %281 = OpExtInst %1 43 %280 %126 %99 
                                                      OpStore %241 %281 
                                Uniform f32* %284 = OpAccessChain %30 %283 %52 
                                         f32 %285 = OpLoad %284 
                                        bool %286 = OpFOrdEqual %285 %99 
                                                      OpStore %282 %286 
                                                      OpSelectionMerge %289 None 
                                                      OpBranchConditional %287 %288 %289 
                                             %288 = OpLabel 
                                        bool %290 = OpLoad %282 
                                                      OpSelectionMerge %292 None 
                                                      OpBranchConditional %290 %291 %292 
                                             %291 = OpLabel 
                                                      OpBranch %292 
                                             %292 = OpLabel 
                                                      OpBranch %289 
                                             %289 = OpLabel 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %395 
                                             %294 = OpLabel 
                                Uniform f32* %297 = OpAccessChain %30 %283 %48 
                                         f32 %298 = OpLoad %297 
                                        bool %299 = OpFOrdEqual %298 %99 
                                                      OpStore %296 %299 
                                       f32_3 %300 = OpLoad %220 
                                       f32_3 %301 = OpVectorShuffle %300 %300 1 1 1 
                              Uniform f32_4* %303 = OpAccessChain %30 %302 %210 
                                       f32_4 %304 = OpLoad %303 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %306 = OpFMul %301 %305 
                                       f32_4 %307 = OpLoad %218 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
                                                      OpStore %218 %308 
                              Uniform f32_4* %309 = OpAccessChain %30 %302 %209 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpLoad %220 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 0 0 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_4 %315 = OpLoad %218 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %317 = OpFAdd %314 %316 
                                       f32_4 %318 = OpLoad %218 
                                       f32_4 %319 = OpVectorShuffle %318 %317 4 5 6 3 
                                                      OpStore %218 %319 
                              Uniform f32_4* %320 = OpAccessChain %30 %302 %237 
                                       f32_4 %321 = OpLoad %320 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_3 %323 = OpLoad %220 
                                       f32_3 %324 = OpVectorShuffle %323 %323 2 2 2 
                                       f32_3 %325 = OpFMul %322 %324 
                                       f32_4 %326 = OpLoad %218 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                       f32_3 %328 = OpFAdd %325 %327 
                                       f32_4 %329 = OpLoad %218 
                                       f32_4 %330 = OpVectorShuffle %329 %328 4 5 6 3 
                                                      OpStore %218 %330 
                                       f32_4 %331 = OpLoad %218 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 2 
                              Uniform f32_4* %333 = OpAccessChain %30 %302 %247 
                                       f32_4 %334 = OpLoad %333 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFAdd %332 %335 
                                       f32_4 %337 = OpLoad %218 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 6 3 
                                                      OpStore %218 %338 
                                        bool %341 = OpLoad %296 
                                                      OpSelectionMerge %343 None 
                                                      OpBranchConditional %341 %342 %346 
                                             %342 = OpLabel 
                                       f32_4 %344 = OpLoad %218 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                                      OpStore %340 %345 
                                                      OpBranch %343 
                                             %346 = OpLabel 
                                       f32_3 %347 = OpLoad %220 
                                                      OpStore %340 %347 
                                                      OpBranch %343 
                                             %343 = OpLabel 
                                       f32_3 %348 = OpLoad %340 
                                       f32_4 %349 = OpLoad %218 
                                       f32_4 %350 = OpVectorShuffle %349 %348 4 5 6 3 
                                                      OpStore %218 %350 
                                       f32_4 %351 = OpLoad %218 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                              Uniform f32_3* %354 = OpAccessChain %30 %353 
                                       f32_3 %355 = OpLoad %354 
                                       f32_3 %356 = OpFNegate %355 
                                       f32_3 %357 = OpFAdd %352 %356 
                                       f32_4 %358 = OpLoad %218 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %218 %359 
                                       f32_4 %361 = OpLoad %218 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                              Uniform f32_3* %364 = OpAccessChain %30 %363 
                                       f32_3 %365 = OpLoad %364 
                                       f32_3 %366 = OpFMul %362 %365 
                                       f32_4 %367 = OpLoad %360 
                                       f32_4 %368 = OpVectorShuffle %367 %366 0 4 5 6 
                                                      OpStore %360 %368 
                                Private f32* %370 = OpAccessChain %360 %48 
                                         f32 %371 = OpLoad %370 
                                         f32 %373 = OpFMul %371 %372 
                                         f32 %374 = OpFAdd %373 %128 
                                                      OpStore %369 %374 
                                Uniform f32* %375 = OpAccessChain %30 %283 %57 
                                         f32 %376 = OpLoad %375 
                                         f32 %378 = OpFMul %376 %377 
                                         f32 %379 = OpFAdd %378 %128 
                                Private f32* %380 = OpAccessChain %218 %52 
                                                      OpStore %380 %379 
                                         f32 %381 = OpLoad %369 
                                Private f32* %382 = OpAccessChain %218 %52 
                                         f32 %383 = OpLoad %382 
                                         f32 %384 = OpExtInst %1 40 %381 %383 
                                Private f32* %385 = OpAccessChain %360 %52 
                                                      OpStore %385 %384 
                  read_only Texture3DSampled %390 = OpLoad %389 
                                       f32_4 %391 = OpLoad %360 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 2 3 
                                       f32_4 %393 = OpImageSampleImplicitLod %390 %392 
                                                      OpStore %360 %393 
                                       f32_4 %394 = OpLoad %360 
                                                      OpStore %81 %394 
                                                      OpBranch %295 
                                             %395 = OpLabel 
                                Private f32* %396 = OpAccessChain %81 %52 
                                                      OpStore %396 %99 
                                Private f32* %397 = OpAccessChain %81 %48 
                                                      OpStore %397 %99 
                                Private f32* %398 = OpAccessChain %81 %57 
                                                      OpStore %398 %99 
                                Private f32* %399 = OpAccessChain %81 %195 
                                                      OpStore %399 %99 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                       f32_4 %401 = OpLoad %81 
                              Uniform f32_4* %402 = OpAccessChain %30 %210 
                                       f32_4 %403 = OpLoad %402 
                                         f32 %404 = OpDot %401 %403 
                                Private f32* %405 = OpAccessChain %400 %52 
                                                      OpStore %405 %404 
                                Private f32* %406 = OpAccessChain %400 %52 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpExtInst %1 43 %407 %126 %99 
                                Private f32* %409 = OpAccessChain %400 %52 
                                                      OpStore %409 %408 
                                       f32_4 %412 = OpLoad %411 
                                       f32_2 %413 = OpVectorShuffle %412 %412 0 1 
                                       f32_4 %414 = OpLoad %411 
                                       f32_2 %415 = OpVectorShuffle %414 %414 3 3 
                                       f32_2 %416 = OpFDiv %413 %415 
                                       f32_4 %417 = OpLoad %218 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 2 3 
                                                      OpStore %218 %418 
                  read_only Texture2DSampled %421 = OpLoad %420 
                                       f32_4 %422 = OpLoad %218 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_4 %424 = OpImageSampleImplicitLod %421 %423 
                                         f32 %425 = OpCompositeExtract %424 0 
                                                      OpStore %419 %425 
                                         f32 %427 = OpLoad %241 
                                         f32 %428 = OpLoad %419 
                                         f32 %429 = OpFAdd %427 %428 
                                Private f32* %430 = OpAccessChain %426 %52 
                                                      OpStore %430 %429 
                                Private f32* %431 = OpAccessChain %426 %52 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpExtInst %1 43 %432 %126 %99 
                                Private f32* %434 = OpAccessChain %426 %52 
                                                      OpStore %434 %433 
                                Private f32* %435 = OpAccessChain %426 %52 
                                         f32 %436 = OpLoad %435 
                                Private f32* %437 = OpAccessChain %400 %52 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpExtInst %1 37 %436 %438 
                                Private f32* %440 = OpAccessChain %400 %52 
                                                      OpStore %440 %439 
                                        bool %443 = OpLoad %282 
                                                      OpSelectionMerge %445 None 
                                                      OpBranchConditional %443 %444 %448 
                                             %444 = OpLabel 
                                Private f32* %446 = OpAccessChain %400 %52 
                                         f32 %447 = OpLoad %446 
                                                      OpStore %442 %447 
                                                      OpBranch %445 
                                             %448 = OpLabel 
                                Private f32* %449 = OpAccessChain %426 %52 
                                         f32 %450 = OpLoad %449 
                                                      OpStore %442 %450 
                                                      OpBranch %445 
                                             %445 = OpLabel 
                                         f32 %451 = OpLoad %442 
                                Private f32* %452 = OpAccessChain %400 %52 
                                                      OpStore %452 %451 
                                       f32_4 %453 = OpLoad %141 
                                       f32_3 %454 = OpVectorShuffle %453 %453 0 1 2 
                              Uniform f32_4* %456 = OpAccessChain %30 %455 
                                       f32_4 %457 = OpLoad %456 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                                       f32_3 %459 = OpFMul %454 %458 
                                                      OpStore %426 %459 
                                       f32_3 %460 = OpLoad %400 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpLoad %426 
                                       f32_3 %463 = OpFMul %461 %462 
                                                      OpStore %400 %463 
                                       f32_4 %464 = OpLoad %141 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_3 %467 = OpLoad %466 
                                       f32_3 %468 = OpFMul %465 %467 
                                       f32_3 %469 = OpLoad %400 
                                       f32_3 %470 = OpFAdd %468 %469 
                                                      OpStore %400 %470 
                                Private f32* %473 = OpAccessChain %9 %195 
                                         f32 %474 = OpLoad %473 
                                 Output f32* %476 = OpAccessChain %472 %195 
                                                      OpStore %476 %474 
                                       f32_4 %477 = OpLoad %20 
                                       f32_3 %478 = OpVectorShuffle %477 %477 0 1 2 
                                       f32_2 %479 = OpLoad %125 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 0 0 
                                       f32_3 %481 = OpFMul %478 %480 
                                       f32_3 %482 = OpLoad %400 
                                       f32_3 %483 = OpFAdd %481 %482 
                                                      OpStore %400 %483 
                                Private f32* %485 = OpAccessChain %400 %48 
                                         f32 %486 = OpLoad %485 
                                Private f32* %487 = OpAccessChain %400 %57 
                                         f32 %488 = OpLoad %487 
                                        bool %489 = OpFOrdGreaterThanEqual %486 %488 
                                                      OpStore %484 %489 
                                        bool %492 = OpLoad %484 
                                                      OpSelectionMerge %494 None 
                                                      OpBranchConditional %492 %493 %495 
                                             %493 = OpLabel 
                                                      OpStore %491 %99 
                                                      OpBranch %494 
                                             %495 = OpLabel 
                                                      OpStore %491 %126 
                                                      OpBranch %494 
                                             %494 = OpLabel 
                                         f32 %496 = OpLoad %491 
                                                      OpStore %490 %496 
                                       f32_3 %498 = OpLoad %400 
                                       f32_2 %499 = OpVectorShuffle %498 %498 2 1 
                                       f32_2 %500 = OpFNegate %499 
                                       f32_3 %501 = OpLoad %400 
                                       f32_2 %502 = OpVectorShuffle %501 %501 1 2 
                                       f32_2 %503 = OpFAdd %500 %502 
                                                      OpStore %497 %503 
                                Private f32* %504 = OpAccessChain %141 %52 
                                                      OpStore %504 %99 
                                Private f32* %506 = OpAccessChain %141 %48 
                                                      OpStore %506 %505 
                                         f32 %507 = OpLoad %490 
                                       f32_2 %508 = OpCompositeConstruct %507 %507 
                                       f32_2 %509 = OpLoad %497 
                                       f32_2 %510 = OpFMul %508 %509 
                                       f32_3 %511 = OpLoad %400 
                                       f32_2 %512 = OpVectorShuffle %511 %511 2 1 
                                       f32_2 %513 = OpFAdd %510 %512 
                                       f32_4 %514 = OpLoad %360 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 5 2 3 
                                                      OpStore %360 %515 
                                         f32 %516 = OpLoad %490 
                                       f32_2 %517 = OpCompositeConstruct %516 %516 
                                       f32_4 %518 = OpLoad %141 
                                       f32_2 %519 = OpVectorShuffle %518 %518 0 1 
                                       f32_2 %520 = OpFMul %517 %519 
                                       f32_2 %523 = OpFAdd %520 %522 
                                       f32_4 %524 = OpLoad %360 
                                       f32_4 %525 = OpVectorShuffle %524 %523 0 1 4 5 
                                                      OpStore %360 %525 
                                Private f32* %526 = OpAccessChain %400 %52 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %360 %52 
                                         f32 %529 = OpLoad %528 
                                        bool %530 = OpFOrdGreaterThanEqual %527 %529 
                                                      OpStore %484 %530 
                                        bool %532 = OpLoad %484 
                                                      OpSelectionMerge %534 None 
                                                      OpBranchConditional %532 %533 %535 
                                             %533 = OpLabel 
                                                      OpStore %531 %99 
                                                      OpBranch %534 
                                             %535 = OpLabel 
                                                      OpStore %531 %126 
                                                      OpBranch %534 
                                             %534 = OpLabel 
                                         f32 %536 = OpLoad %531 
                                                      OpStore %490 %536 
                                       f32_4 %537 = OpLoad %360 
                                       f32_3 %538 = OpVectorShuffle %537 %537 0 1 3 
                                       f32_3 %539 = OpFNegate %538 
                                       f32_4 %540 = OpLoad %141 
                                       f32_4 %541 = OpVectorShuffle %540 %539 4 5 6 3 
                                                      OpStore %141 %541 
                                Private f32* %542 = OpAccessChain %400 %52 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFNegate %543 
                                Private f32* %545 = OpAccessChain %141 %195 
                                                      OpStore %545 %544 
                                Private f32* %546 = OpAccessChain %141 %52 
                                         f32 %547 = OpLoad %546 
                                Private f32* %548 = OpAccessChain %400 %52 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %547 %549 
                                Private f32* %551 = OpAccessChain %218 %52 
                                                      OpStore %551 %550 
                                       f32_4 %552 = OpLoad %360 
                                       f32_3 %553 = OpVectorShuffle %552 %552 1 2 0 
                                       f32_4 %554 = OpLoad %141 
                                       f32_3 %555 = OpVectorShuffle %554 %554 1 2 3 
                                       f32_3 %556 = OpFAdd %553 %555 
                                       f32_4 %557 = OpLoad %218 
                                       f32_4 %558 = OpVectorShuffle %557 %556 0 4 5 6 
                                                      OpStore %218 %558 
                                         f32 %559 = OpLoad %490 
                                       f32_3 %560 = OpCompositeConstruct %559 %559 %559 
                                       f32_4 %561 = OpLoad %218 
                                       f32_3 %562 = OpVectorShuffle %561 %561 0 1 2 
                                       f32_3 %563 = OpFMul %560 %562 
                                       f32_4 %564 = OpLoad %360 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 3 
                                       f32_3 %566 = OpFAdd %563 %565 
                                       f32_4 %567 = OpLoad %20 
                                       f32_4 %568 = OpVectorShuffle %567 %566 4 5 2 6 
                                                      OpStore %20 %568 
                                         f32 %569 = OpLoad %490 
                                Private f32* %570 = OpAccessChain %218 %195 
                                         f32 %571 = OpLoad %570 
                                         f32 %572 = OpFMul %569 %571 
                                Private f32* %573 = OpAccessChain %400 %52 
                                         f32 %574 = OpLoad %573 
                                         f32 %575 = OpFAdd %572 %574 
                                                      OpStore %490 %575 
                                Private f32* %576 = OpAccessChain %20 %48 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpLoad %490 
                                         f32 %579 = OpExtInst %1 37 %577 %578 
                                Private f32* %580 = OpAccessChain %141 %52 
                                                      OpStore %580 %579 
                                Private f32* %581 = OpAccessChain %20 %52 
                                         f32 %582 = OpLoad %581 
                                Private f32* %583 = OpAccessChain %141 %52 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFNegate %584 
                                         f32 %586 = OpFAdd %582 %585 
                                Private f32* %587 = OpAccessChain %141 %52 
                                                      OpStore %587 %586 
                                Private f32* %588 = OpAccessChain %20 %48 
                                         f32 %589 = OpLoad %588 
                                         f32 %590 = OpFNegate %589 
                                         f32 %591 = OpLoad %490 
                                         f32 %592 = OpFAdd %590 %591 
                                                      OpStore %490 %592 
                                Private f32* %594 = OpAccessChain %141 %52 
                                         f32 %595 = OpLoad %594 
                                         f32 %597 = OpFMul %595 %596 
                                         f32 %599 = OpFAdd %597 %598 
                                                      OpStore %593 %599 
                                         f32 %600 = OpLoad %490 
                                         f32 %601 = OpLoad %593 
                                         f32 %602 = OpFDiv %600 %601 
                                                      OpStore %490 %602 
                                         f32 %603 = OpLoad %490 
                                Private f32* %604 = OpAccessChain %20 %195 
                                         f32 %605 = OpLoad %604 
                                         f32 %606 = OpFAdd %603 %605 
                                                      OpStore %490 %606 
                                Private f32* %607 = OpAccessChain %20 %52 
                                         f32 %608 = OpLoad %607 
                                         f32 %609 = OpFAdd %608 %598 
                                                      OpStore %593 %609 
                                Private f32* %610 = OpAccessChain %141 %52 
                                         f32 %611 = OpLoad %610 
                                         f32 %612 = OpLoad %593 
                                         f32 %613 = OpFDiv %611 %612 
                                                      OpStore %593 %613 
                                Private f32* %614 = OpAccessChain %9 %48 
                                         f32 %615 = OpLoad %614 
                                Private f32* %616 = OpAccessChain %9 %57 
                                         f32 %617 = OpLoad %616 
                                        bool %618 = OpFOrdGreaterThanEqual %615 %617 
                                                      OpStore %204 %618 
                                        bool %620 = OpLoad %204 
                                                      OpSelectionMerge %622 None 
                                                      OpBranchConditional %620 %621 %623 
                                             %621 = OpLabel 
                                                      OpStore %619 %99 
                                                      OpBranch %622 
                                             %623 = OpLabel 
                                                      OpStore %619 %126 
                                                      OpBranch %622 
                                             %622 = OpLabel 
                                         f32 %624 = OpLoad %619 
                                                      OpStore %241 %624 
                                Private f32* %626 = OpAccessChain %9 %57 
                                         f32 %627 = OpLoad %626 
                                         f32 %628 = OpFNegate %627 
                                Private f32* %629 = OpAccessChain %9 %48 
                                         f32 %630 = OpLoad %629 
                                         f32 %631 = OpFAdd %628 %630 
                                                      OpStore %625 %631 
                                         f32 %633 = OpLoad %241 
                                         f32 %634 = OpLoad %625 
                                         f32 %635 = OpFMul %633 %634 
                                Private f32* %636 = OpAccessChain %9 %57 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpFAdd %635 %637 
                                Private f32* %639 = OpAccessChain %632 %52 
                                                      OpStore %639 %638 
                                Private f32* %641 = OpAccessChain %9 %52 
                                         f32 %642 = OpLoad %641 
                                Private f32* %643 = OpAccessChain %632 %52 
                                         f32 %644 = OpLoad %643 
                                        bool %645 = OpFOrdGreaterThanEqual %642 %644 
                                                      OpStore %640 %645 
                                        bool %648 = OpLoad %640 
                                                      OpSelectionMerge %650 None 
                                                      OpBranchConditional %648 %649 %651 
                                             %649 = OpLabel 
                                                      OpStore %647 %99 
                                                      OpBranch %650 
                                             %651 = OpLabel 
                                                      OpStore %647 %126 
                                                      OpBranch %650 
                                             %650 = OpLabel 
                                         f32 %652 = OpLoad %647 
                                                      OpStore %646 %652 
                                Private f32* %654 = OpAccessChain %632 %52 
                                         f32 %655 = OpLoad %654 
                                         f32 %656 = OpFNegate %655 
                                Private f32* %657 = OpAccessChain %9 %52 
                                         f32 %658 = OpLoad %657 
                                         f32 %659 = OpFAdd %656 %658 
                                Private f32* %660 = OpAccessChain %653 %52 
                                                      OpStore %660 %659 
                                         f32 %661 = OpLoad %646 
                                Private f32* %662 = OpAccessChain %653 %52 
                                         f32 %663 = OpLoad %662 
                                         f32 %664 = OpFMul %661 %663 
                                Private f32* %665 = OpAccessChain %632 %52 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpFAdd %664 %666 
                                Private f32* %668 = OpAccessChain %653 %52 
                                                      OpStore %668 %667 
                                Private f32* %669 = OpAccessChain %653 %52 
                                         f32 %670 = OpLoad %669 
                                Uniform f32* %672 = OpAccessChain %30 %671 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFMul %670 %673 
                                Private f32* %675 = OpAccessChain %653 %52 
                                                      OpStore %675 %674 
                                Private f32* %676 = OpAccessChain %653 %52 
                                         f32 %677 = OpLoad %676 
                                Private f32* %678 = OpAccessChain %20 %52 
                                         f32 %679 = OpLoad %678 
                                         f32 %680 = OpExtInst %1 37 %677 %679 
                                Private f32* %681 = OpAccessChain %653 %52 
                                                      OpStore %681 %680 
                                Private f32* %683 = OpAccessChain %189 %48 
                                         f32 %684 = OpLoad %683 
                                Private f32* %685 = OpAccessChain %189 %52 
                                         f32 %686 = OpLoad %685 
                                         f32 %687 = OpFAdd %684 %686 
                                                      OpStore %682 %687 
                                Private f32* %688 = OpAccessChain %20 %57 
                                         f32 %689 = OpLoad %688 
                                Private f32* %690 = OpAccessChain %125 %52 
                                         f32 %691 = OpLoad %690 
                                         f32 %692 = OpFMul %689 %691 
                                         f32 %693 = OpLoad %682 
                                         f32 %694 = OpFAdd %692 %693 
                                                      OpStore %682 %694 
                                         f32 %695 = OpLoad %682 
                                         f32 %697 = OpFMul %695 %696 
                                                      OpStore %682 %697 
                                         f32 %698 = OpLoad %682 
                                         f32 %699 = OpExtInst %1 43 %698 %126 %99 
                                                      OpStore %682 %699 
                                         f32 %700 = OpLoad %490 
                                       f32_3 %701 = OpCompositeConstruct %700 %700 %700 
                                       f32_3 %702 = OpExtInst %1 4 %701 
                                       f32_3 %705 = OpFAdd %702 %704 
                                                      OpStore %632 %705 
                                       f32_3 %706 = OpLoad %632 
                                       f32_3 %707 = OpExtInst %1 10 %706 
                                                      OpStore %632 %707 
                                       f32_3 %708 = OpLoad %632 
                                       f32_3 %710 = OpFMul %708 %709 
                                       f32_3 %713 = OpFAdd %710 %712 
                                                      OpStore %632 %713 
                                       f32_3 %714 = OpLoad %632 
                                       f32_3 %715 = OpExtInst %1 4 %714 
                                       f32_3 %717 = OpFAdd %715 %716 
                                                      OpStore %632 %717 
                                       f32_3 %718 = OpLoad %632 
                                       f32_3 %719 = OpCompositeConstruct %126 %126 %126 
                                       f32_3 %720 = OpCompositeConstruct %99 %99 %99 
                                       f32_3 %721 = OpExtInst %1 43 %718 %719 %720 
                                                      OpStore %632 %721 
                                       f32_3 %722 = OpLoad %632 
                                       f32_3 %723 = OpFAdd %722 %716 
                                                      OpStore %632 %723 
                                         f32 %724 = OpLoad %593 
                                       f32_3 %725 = OpCompositeConstruct %724 %724 %724 
                                       f32_3 %726 = OpLoad %632 
                                       f32_3 %727 = OpFMul %725 %726 
                                       f32_3 %729 = OpFAdd %727 %728 
                                                      OpStore %632 %729 
                                       f32_3 %730 = OpLoad %632 
                                       f32_3 %731 = OpLoad %653 
                                       f32_3 %732 = OpVectorShuffle %731 %731 0 0 0 
                                       f32_3 %733 = OpFMul %730 %732 
                                       f32_4 %734 = OpLoad %20 
                                       f32_4 %735 = OpVectorShuffle %734 %733 4 5 6 3 
                                                      OpStore %20 %735 
                                       f32_3 %736 = OpLoad %653 
                                       f32_3 %737 = OpVectorShuffle %736 %736 0 0 0 
                                       f32_3 %738 = OpFNegate %737 
                                       f32_3 %739 = OpLoad %632 
                                       f32_3 %740 = OpFMul %738 %739 
                                       f32_3 %741 = OpLoad %400 
                                       f32_3 %742 = OpFAdd %740 %741 
                                                      OpStore %653 %742 
                                         f32 %743 = OpLoad %682 
                                       f32_3 %744 = OpCompositeConstruct %743 %743 %743 
                                       f32_3 %745 = OpLoad %653 
                                       f32_3 %746 = OpFMul %744 %745 
                                       f32_4 %747 = OpLoad %20 
                                       f32_3 %748 = OpVectorShuffle %747 %747 0 1 2 
                                       f32_3 %749 = OpFAdd %746 %748 
                                                      OpStore %653 %749 
                                       f32_3 %750 = OpLoad %653 
                                       f32_4 %751 = OpLoad %472 
                                       f32_4 %752 = OpVectorShuffle %751 %750 4 5 6 3 
                                                      OpStore %472 %752 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Blend One One, One One
  ColorMask RGB 0
  ZWrite Off
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 126406
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _EmissiveColor;
uniform 	float _EmissiveThresholdSensitivity;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ParallaxTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat16_4;
float u_xlat5;
float u_xlat10;
bool u_xlatb10;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz + (-_EmissiveColor.xyz);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y + u_xlat1.x;
    u_xlat1.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb1 = u_xlat1.x<_EmissiveThresholdSensitivity;
    u_xlat10_2 = texture(_ParallaxTex, vs_TEXCOORD4.xy);
    u_xlat1.x = u_xlatb1 ? 0.75 : float(0.0);
    u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_4.xyz + u_xlat10_0.xyz;
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb10 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10 = u_xlat2.y * 0.25 + 0.75;
        u_xlat5 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat5);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat10 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xx);
    u_xlat1.x = u_xlat10 * u_xlat10_2.w;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 218
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %152 %161 %162 %174 %204 %210 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate %174 Location 174 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %210 Location 210 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_2 %140 = OpConstantComposite %139 %139 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %146 %146 
                                             %151 = OpTypePointer Output %95 
                               Output f32_2* %152 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_2 %156 = OpConstantComposite %139 %155 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_2 %159 = OpConstantComposite %158 %139 
                               Output f32_2* %161 = OpVariable Output 
                                Input f32_4* %162 = OpVariable Input 
                                             %173 = OpTypePointer Input %50 
                                Input f32_3* %174 = OpVariable Input 
                                         u32 %180 = OpConstant 0 
                                             %181 = OpTypePointer Private %6 
                                         u32 %194 = OpConstant 2 
                                Private f32* %196 = OpVariable Private 
                               Output f32_3* %204 = OpVariable Output 
                               Output f32_4* %210 = OpVariable Output 
                                       f32_4 %211 = OpConstantComposite %158 %158 %158 %158 
                                             %212 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %96 = OpLoad %44 
                                        f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                               Uniform f32_4* %98 = OpAccessChain %21 %36 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %97 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
                                                      OpStore %9 %103 
                              Uniform f32_4* %104 = OpAccessChain %21 %36 %23 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %107 = OpLoad %44 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 0 
                                       f32_2 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %9 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %36 %36 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpLoad %44 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 2 
                                       f32_2 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %9 %125 
                              Uniform f32_4* %126 = OpAccessChain %21 %36 %46 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                                       f32_4 %129 = OpLoad %44 
                                       f32_2 %130 = OpVectorShuffle %129 %129 3 3 
                                       f32_2 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_2 %134 = OpFAdd %131 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 3 
                                                      OpStore %9 %136 
                                       f32_4 %137 = OpLoad %9 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %9 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %9 %143 
                                       f32_4 %144 = OpLoad %9 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %9 %150 
                                       f32_4 %153 = OpLoad %9 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %157 = OpFMul %154 %156 
                                       f32_2 %160 = OpFAdd %157 %159 
                                                      OpStore %152 %160 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                              Uniform f32_4* %165 = OpAccessChain %21 %46 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_2 %168 = OpFMul %164 %167 
                              Uniform f32_4* %169 = OpAccessChain %21 %46 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %168 %171 
                                                      OpStore %161 %172 
                                       f32_3 %175 = OpLoad %174 
                              Uniform f32_4* %176 = OpAccessChain %21 %24 %23 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %175 %178 
                                Private f32* %182 = OpAccessChain %9 %180 
                                                      OpStore %182 %179 
                                       f32_3 %183 = OpLoad %174 
                              Uniform f32_4* %184 = OpAccessChain %21 %24 %24 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                         f32 %187 = OpDot %183 %186 
                                Private f32* %188 = OpAccessChain %9 %81 
                                                      OpStore %188 %187 
                                       f32_3 %189 = OpLoad %174 
                              Uniform f32_4* %190 = OpAccessChain %21 %24 %36 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %189 %192 
                                Private f32* %195 = OpAccessChain %9 %194 
                                                      OpStore %195 %193 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %198 %200 
                                                      OpStore %196 %201 
                                         f32 %202 = OpLoad %196 
                                         f32 %203 = OpExtInst %1 32 %202 
                                                      OpStore %196 %203 
                                         f32 %205 = OpLoad %196 
                                       f32_3 %206 = OpCompositeConstruct %205 %205 %205 
                                       f32_4 %207 = OpLoad %9 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %206 %208 
                                                      OpStore %204 %209 
                                                      OpStore %210 %211 
                                 Output f32* %213 = OpAccessChain %85 %23 %81 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFNegate %214 
                                 Output f32* %216 = OpAccessChain %85 %23 %81 
                                                      OpStore %216 %215 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 311
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %83 %135 %299 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpDecorate %28 ArrayStride 28 
                                                      OpMemberDecorate %29 0 RelaxedPrecision 
                                                      OpMemberDecorate %29 0 Offset 29 
                                                      OpMemberDecorate %29 1 Offset 29 
                                                      OpMemberDecorate %29 2 Offset 29 
                                                      OpMemberDecorate %29 3 Offset 29 
                                                      OpMemberDecorate %29 4 Offset 29 
                                                      OpMemberDecorate %29 5 RelaxedPrecision 
                                                      OpMemberDecorate %29 5 Offset 29 
                                                      OpMemberDecorate %29 6 Offset 29 
                                                      OpMemberDecorate %29 7 Offset 29 
                                                      OpMemberDecorate %29 8 Offset 29 
                                                      OpMemberDecorate %29 9 RelaxedPrecision 
                                                      OpMemberDecorate %29 9 Offset 29 
                                                      OpDecorate %29 Block 
                                                      OpDecorate %31 DescriptorSet 31 
                                                      OpDecorate %31 Binding 31 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %81 DescriptorSet 81 
                                                      OpDecorate %81 Binding 81 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 Location 83 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %177 SpecId 177 
                                                      OpDecorate %254 DescriptorSet 254 
                                                      OpDecorate %254 Binding 254 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %279 DescriptorSet 279 
                                                      OpDecorate %279 Binding 279 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %299 Location 299 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeArray %7 %26 
                                              %29 = OpTypeStruct %7 %7 %27 %20 %20 %7 %28 %7 %6 %6 
                                              %30 = OpTypePointer Uniform %29 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32; f32;}* %31 = OpVariable Uniform 
                                              %32 = OpTypeInt 32 1 
                                          i32 %33 = OpConstant 7 
                                              %34 = OpTypePointer Uniform %7 
                                          u32 %47 = OpConstant 1 
                                              %48 = OpTypePointer Private %6 
                                          u32 %51 = OpConstant 0 
                                          u32 %56 = OpConstant 2 
                                              %70 = OpTypeBool 
                                              %71 = OpTypePointer Private %70 
                                Private bool* %72 = OpVariable Private 
                                          i32 %75 = OpConstant 8 
                                              %76 = OpTypePointer Uniform %6 
                               Private f32_3* %80 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %81 = OpVariable UniformConstant 
                                 Input f32_2* %83 = OpVariable Input 
                                              %87 = OpTypePointer Function %6 
                                          f32 %92 = OpConstant 3.674022E-40 
                                          f32 %94 = OpConstant 3.674022E-40 
                               Private f32_3* %97 = OpVariable Private 
                              Private f32_3* %103 = OpVariable Private 
                              Private f32_4* %111 = OpVariable Private 
                                         u32 %112 = OpConstant 3 
                                         i32 %115 = OpConstant 9 
                                         i32 %125 = OpConstant 0 
                                         i32 %126 = OpConstant 1 
                                         i32 %128 = OpConstant -1 
                                             %134 = OpTypePointer Input %20 
                                Input f32_3* %135 = OpVariable Input 
                                         i32 %138 = OpConstant 6 
                                         i32 %151 = OpConstant 2 
                                         i32 %161 = OpConstant 3 
                               Private bool* %166 = OpVariable Private 
                                         f32 %169 = OpConstant 3.674022E-40 
                                        bool %171 = OpConstantFalse 
                                        bool %177 = OpSpecConstantFalse 
                              Private f32_3* %183 = OpVariable Private 
                                             %211 = OpTypePointer Function %20 
                                         i32 %221 = OpConstant 4 
                                             %222 = OpTypePointer Uniform %20 
                              Private f32_4* %227 = OpVariable Private 
                                Private f32* %234 = OpVariable Private 
                                         f32 %237 = OpConstant 3.674022E-40 
                                         f32 %242 = OpConstant 3.674022E-40 
                                             %251 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %252 = OpTypeSampledImage %251 
                                             %253 = OpTypePointer UniformConstant %252 
 UniformConstant read_only Texture3DSampled* %254 = OpVariable UniformConstant 
                              Private f32_3* %265 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %279 = OpVariable UniformConstant 
                                         i32 %293 = OpConstant 5 
                                             %298 = OpTypePointer Output %7 
                               Output f32_4* %299 = OpVariable Output 
                                             %308 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %88 = OpVariable Function 
                             Function f32_3* %212 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %23 = OpLoad %9 
                                        f32_3 %24 = OpVectorShuffle %23 %23 0 1 2 
                               Uniform f32_4* %35 = OpAccessChain %31 %33 
                                        f32_4 %36 = OpLoad %35 
                                        f32_3 %37 = OpVectorShuffle %36 %36 0 1 2 
                                        f32_3 %38 = OpFNegate %37 
                                        f32_3 %39 = OpFAdd %24 %38 
                                                      OpStore %22 %39 
                                        f32_3 %40 = OpLoad %22 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                                        f32_3 %42 = OpLoad %22 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_2 %44 = OpFMul %41 %43 
                                        f32_3 %45 = OpLoad %22 
                                        f32_3 %46 = OpVectorShuffle %45 %44 3 4 2 
                                                      OpStore %22 %46 
                                 Private f32* %49 = OpAccessChain %22 %47 
                                          f32 %50 = OpLoad %49 
                                 Private f32* %52 = OpAccessChain %22 %51 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFAdd %50 %53 
                                 Private f32* %55 = OpAccessChain %22 %51 
                                                      OpStore %55 %54 
                                 Private f32* %57 = OpAccessChain %22 %56 
                                          f32 %58 = OpLoad %57 
                                 Private f32* %59 = OpAccessChain %22 %56 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %58 %60 
                                 Private f32* %62 = OpAccessChain %22 %51 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %22 %51 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %22 %51 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpExtInst %1 31 %67 
                                 Private f32* %69 = OpAccessChain %22 %51 
                                                      OpStore %69 %68 
                                 Private f32* %73 = OpAccessChain %22 %51 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %77 = OpAccessChain %31 %75 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %74 %78 
                                                      OpStore %72 %79 
                   read_only Texture2DSampled %82 = OpLoad %81 
                                        f32_2 %84 = OpLoad %83 
                                        f32_4 %85 = OpImageSampleImplicitLod %82 %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                                      OpStore %80 %86 
                                         bool %89 = OpLoad %72 
                                                      OpSelectionMerge %91 None 
                                                      OpBranchConditional %89 %90 %93 
                                              %90 = OpLabel 
                                                      OpStore %88 %92 
                                                      OpBranch %91 
                                              %93 = OpLabel 
                                                      OpStore %88 %94 
                                                      OpBranch %91 
                                              %91 = OpLabel 
                                          f32 %95 = OpLoad %88 
                                 Private f32* %96 = OpAccessChain %22 %51 
                                                      OpStore %96 %95 
                                        f32_4 %98 = OpLoad %9 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFNegate %99 
                                       f32_3 %101 = OpLoad %80 
                                       f32_3 %102 = OpFAdd %100 %101 
                                                      OpStore %97 %102 
                                       f32_3 %104 = OpLoad %22 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 0 0 
                                       f32_3 %106 = OpLoad %97 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                       f32_3 %110 = OpFAdd %107 %109 
                                                      OpStore %103 %110 
                                Private f32* %113 = OpAccessChain %9 %112 
                                         f32 %114 = OpLoad %113 
                                Uniform f32* %116 = OpAccessChain %31 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                         f32 %119 = OpFAdd %114 %118 
                                Private f32* %120 = OpAccessChain %111 %51 
                                                      OpStore %120 %119 
                                Private f32* %121 = OpAccessChain %111 %51 
                                         f32 %122 = OpLoad %121 
                                        bool %123 = OpFOrdLessThan %122 %94 
                                                      OpStore %72 %123 
                                        bool %124 = OpLoad %72 
                                         i32 %127 = OpSelect %124 %126 %125 
                                         i32 %129 = OpIMul %127 %128 
                                        bool %130 = OpINotEqual %129 %125 
                                                      OpSelectionMerge %132 None 
                                                      OpBranchConditional %130 %131 %132 
                                             %131 = OpLabel 
                                                      OpKill
                                             %132 = OpLabel 
                                       f32_3 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 1 1 1 
                              Uniform f32_4* %139 = OpAccessChain %31 %138 %126 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFMul %137 %141 
                                                      OpStore %22 %142 
                              Uniform f32_4* %143 = OpAccessChain %31 %138 %125 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpLoad %135 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 0 0 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_3 %149 = OpLoad %22 
                                       f32_3 %150 = OpFAdd %148 %149 
                                                      OpStore %22 %150 
                              Uniform f32_4* %152 = OpAccessChain %31 %138 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpLoad %135 
                                       f32_3 %156 = OpVectorShuffle %155 %155 2 2 2 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_3 %158 = OpLoad %22 
                                       f32_3 %159 = OpFAdd %157 %158 
                                                      OpStore %22 %159 
                                       f32_3 %160 = OpLoad %22 
                              Uniform f32_4* %162 = OpAccessChain %31 %138 %161 
                                       f32_4 %163 = OpLoad %162 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                       f32_3 %165 = OpFAdd %160 %164 
                                                      OpStore %22 %165 
                                Uniform f32* %167 = OpAccessChain %31 %126 %51 
                                         f32 %168 = OpLoad %167 
                                        bool %170 = OpFOrdEqual %168 %169 
                                                      OpStore %166 %170 
                                                      OpSelectionMerge %173 None 
                                                      OpBranchConditional %171 %172 %173 
                                             %172 = OpLabel 
                                        bool %174 = OpLoad %166 
                                                      OpSelectionMerge %176 None 
                                                      OpBranchConditional %174 %175 %176 
                                             %175 = OpLabel 
                                                      OpBranch %176 
                                             %176 = OpLabel 
                                                      OpBranch %173 
                                             %173 = OpLabel 
                                                      OpSelectionMerge %179 None 
                                                      OpBranchConditional %177 %178 %260 
                                             %178 = OpLabel 
                                Uniform f32* %180 = OpAccessChain %31 %126 %47 
                                         f32 %181 = OpLoad %180 
                                        bool %182 = OpFOrdEqual %181 %169 
                                                      OpStore %166 %182 
                                       f32_3 %184 = OpLoad %135 
                                       f32_3 %185 = OpVectorShuffle %184 %184 1 1 1 
                              Uniform f32_4* %186 = OpAccessChain %31 %151 %126 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFMul %185 %188 
                                                      OpStore %183 %189 
                              Uniform f32_4* %190 = OpAccessChain %31 %151 %125 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_3 %193 = OpLoad %135 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 0 0 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_3 %196 = OpLoad %183 
                                       f32_3 %197 = OpFAdd %195 %196 
                                                      OpStore %183 %197 
                              Uniform f32_4* %198 = OpAccessChain %31 %151 %151 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_3 %201 = OpLoad %135 
                                       f32_3 %202 = OpVectorShuffle %201 %201 2 2 2 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_3 %204 = OpLoad %183 
                                       f32_3 %205 = OpFAdd %203 %204 
                                                      OpStore %183 %205 
                                       f32_3 %206 = OpLoad %183 
                              Uniform f32_4* %207 = OpAccessChain %31 %151 %161 
                                       f32_4 %208 = OpLoad %207 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %210 = OpFAdd %206 %209 
                                                      OpStore %183 %210 
                                        bool %213 = OpLoad %166 
                                                      OpSelectionMerge %215 None 
                                                      OpBranchConditional %213 %214 %217 
                                             %214 = OpLabel 
                                       f32_3 %216 = OpLoad %183 
                                                      OpStore %212 %216 
                                                      OpBranch %215 
                                             %217 = OpLabel 
                                       f32_3 %218 = OpLoad %135 
                                                      OpStore %212 %218 
                                                      OpBranch %215 
                                             %215 = OpLabel 
                                       f32_3 %219 = OpLoad %212 
                                                      OpStore %183 %219 
                                       f32_3 %220 = OpLoad %183 
                              Uniform f32_3* %223 = OpAccessChain %31 %221 
                                       f32_3 %224 = OpLoad %223 
                                       f32_3 %225 = OpFNegate %224 
                                       f32_3 %226 = OpFAdd %220 %225 
                                                      OpStore %183 %226 
                                       f32_3 %228 = OpLoad %183 
                              Uniform f32_3* %229 = OpAccessChain %31 %161 
                                       f32_3 %230 = OpLoad %229 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %227 
                                       f32_4 %233 = OpVectorShuffle %232 %231 0 4 5 6 
                                                      OpStore %227 %233 
                                Private f32* %235 = OpAccessChain %227 %47 
                                         f32 %236 = OpLoad %235 
                                         f32 %238 = OpFMul %236 %237 
                                         f32 %239 = OpFAdd %238 %92 
                                                      OpStore %234 %239 
                                Uniform f32* %240 = OpAccessChain %31 %126 %56 
                                         f32 %241 = OpLoad %240 
                                         f32 %243 = OpFMul %241 %242 
                                         f32 %244 = OpFAdd %243 %92 
                                Private f32* %245 = OpAccessChain %183 %51 
                                                      OpStore %245 %244 
                                         f32 %246 = OpLoad %234 
                                Private f32* %247 = OpAccessChain %183 %51 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpExtInst %1 40 %246 %248 
                                Private f32* %250 = OpAccessChain %227 %51 
                                                      OpStore %250 %249 
                  read_only Texture3DSampled %255 = OpLoad %254 
                                       f32_4 %256 = OpLoad %227 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 2 3 
                                       f32_4 %258 = OpImageSampleImplicitLod %255 %257 
                                                      OpStore %227 %258 
                                       f32_4 %259 = OpLoad %227 
                                                      OpStore %111 %259 
                                                      OpBranch %179 
                                             %260 = OpLabel 
                                Private f32* %261 = OpAccessChain %111 %51 
                                                      OpStore %261 %169 
                                Private f32* %262 = OpAccessChain %111 %47 
                                                      OpStore %262 %169 
                                Private f32* %263 = OpAccessChain %111 %56 
                                                      OpStore %263 %169 
                                Private f32* %264 = OpAccessChain %111 %112 
                                                      OpStore %264 %169 
                                                      OpBranch %179 
                                             %179 = OpLabel 
                                       f32_4 %266 = OpLoad %111 
                              Uniform f32_4* %267 = OpAccessChain %31 %125 
                                       f32_4 %268 = OpLoad %267 
                                         f32 %269 = OpDot %266 %268 
                                Private f32* %270 = OpAccessChain %265 %51 
                                                      OpStore %270 %269 
                                Private f32* %271 = OpAccessChain %265 %51 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 43 %272 %94 %169 
                                Private f32* %274 = OpAccessChain %265 %51 
                                                      OpStore %274 %273 
                                       f32_3 %275 = OpLoad %22 
                                       f32_3 %276 = OpLoad %22 
                                         f32 %277 = OpDot %275 %276 
                                Private f32* %278 = OpAccessChain %22 %51 
                                                      OpStore %278 %277 
                  read_only Texture2DSampled %280 = OpLoad %279 
                                       f32_3 %281 = OpLoad %22 
                                       f32_2 %282 = OpVectorShuffle %281 %281 0 0 
                                       f32_4 %283 = OpImageSampleImplicitLod %280 %282 
                                         f32 %284 = OpCompositeExtract %283 3 
                                Private f32* %285 = OpAccessChain %22 %51 
                                                      OpStore %285 %284 
                                Private f32* %286 = OpAccessChain %265 %51 
                                         f32 %287 = OpLoad %286 
                                Private f32* %288 = OpAccessChain %22 %51 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFMul %287 %289 
                                Private f32* %291 = OpAccessChain %22 %51 
                                                      OpStore %291 %290 
                                       f32_3 %292 = OpLoad %103 
                              Uniform f32_4* %294 = OpAccessChain %31 %293 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpFMul %292 %296 
                                                      OpStore %265 %297 
                                       f32_3 %300 = OpLoad %22 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 0 0 
                                       f32_3 %302 = OpLoad %265 
                                       f32_3 %303 = OpFMul %301 %302 
                                       f32_4 %304 = OpLoad %299 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %299 %305 
                                Private f32* %306 = OpAccessChain %9 %112 
                                         f32 %307 = OpLoad %306 
                                 Output f32* %309 = OpAccessChain %299 %112 
                                                      OpStore %309 %307 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _EmissiveColor;
uniform 	float _EmissiveThresholdSensitivity;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ParallaxTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
float u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat4;
vec3 u_xlat16_4;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz + (-_EmissiveColor.xyz);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y + u_xlat1.x;
    u_xlat1.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb1 = u_xlat1.x<_EmissiveThresholdSensitivity;
    u_xlat10_2 = texture(_ParallaxTex, vs_TEXCOORD4.xy);
    u_xlat1.x = u_xlatb1 ? 0.75 : float(0.0);
    u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_4.xyz + u_xlat10_0.xyz;
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat1.y * 0.25 + 0.75;
        u_xlat2 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat4.x, u_xlat2);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat1.x = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 218
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %152 %161 %162 %174 %204 %210 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate %174 Location 174 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %210 Location 210 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_2 %140 = OpConstantComposite %139 %139 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %146 %146 
                                             %151 = OpTypePointer Output %95 
                               Output f32_2* %152 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_2 %156 = OpConstantComposite %139 %155 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_2 %159 = OpConstantComposite %158 %139 
                               Output f32_2* %161 = OpVariable Output 
                                Input f32_4* %162 = OpVariable Input 
                                             %173 = OpTypePointer Input %50 
                                Input f32_3* %174 = OpVariable Input 
                                         u32 %180 = OpConstant 0 
                                             %181 = OpTypePointer Private %6 
                                         u32 %194 = OpConstant 2 
                                Private f32* %196 = OpVariable Private 
                               Output f32_3* %204 = OpVariable Output 
                               Output f32_4* %210 = OpVariable Output 
                                       f32_4 %211 = OpConstantComposite %158 %158 %158 %158 
                                             %212 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %96 = OpLoad %44 
                                        f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                               Uniform f32_4* %98 = OpAccessChain %21 %36 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %97 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
                                                      OpStore %9 %103 
                              Uniform f32_4* %104 = OpAccessChain %21 %36 %23 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %107 = OpLoad %44 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 0 
                                       f32_2 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %9 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %36 %36 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpLoad %44 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 2 
                                       f32_2 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %9 %125 
                              Uniform f32_4* %126 = OpAccessChain %21 %36 %46 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                                       f32_4 %129 = OpLoad %44 
                                       f32_2 %130 = OpVectorShuffle %129 %129 3 3 
                                       f32_2 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_2 %134 = OpFAdd %131 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 3 
                                                      OpStore %9 %136 
                                       f32_4 %137 = OpLoad %9 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %9 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %9 %143 
                                       f32_4 %144 = OpLoad %9 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %9 %150 
                                       f32_4 %153 = OpLoad %9 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %157 = OpFMul %154 %156 
                                       f32_2 %160 = OpFAdd %157 %159 
                                                      OpStore %152 %160 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                              Uniform f32_4* %165 = OpAccessChain %21 %46 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_2 %168 = OpFMul %164 %167 
                              Uniform f32_4* %169 = OpAccessChain %21 %46 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %168 %171 
                                                      OpStore %161 %172 
                                       f32_3 %175 = OpLoad %174 
                              Uniform f32_4* %176 = OpAccessChain %21 %24 %23 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %175 %178 
                                Private f32* %182 = OpAccessChain %9 %180 
                                                      OpStore %182 %179 
                                       f32_3 %183 = OpLoad %174 
                              Uniform f32_4* %184 = OpAccessChain %21 %24 %24 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                         f32 %187 = OpDot %183 %186 
                                Private f32* %188 = OpAccessChain %9 %81 
                                                      OpStore %188 %187 
                                       f32_3 %189 = OpLoad %174 
                              Uniform f32_4* %190 = OpAccessChain %21 %24 %36 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %189 %192 
                                Private f32* %195 = OpAccessChain %9 %194 
                                                      OpStore %195 %193 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %198 %200 
                                                      OpStore %196 %201 
                                         f32 %202 = OpLoad %196 
                                         f32 %203 = OpExtInst %1 32 %202 
                                                      OpStore %196 %203 
                                         f32 %205 = OpLoad %196 
                                       f32_3 %206 = OpCompositeConstruct %205 %205 %205 
                                       f32_4 %207 = OpLoad %9 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %206 %208 
                                                      OpStore %204 %209 
                                                      OpStore %210 %211 
                                 Output f32* %213 = OpAccessChain %85 %23 %81 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFNegate %214 
                                 Output f32* %216 = OpAccessChain %85 %23 %81 
                                                      OpStore %216 %215 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 267
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %84 %151 %255 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpMemberDecorate %27 0 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 RelaxedPrecision 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpMemberDecorate %27 8 RelaxedPrecision 
                                                      OpMemberDecorate %27 8 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %82 DescriptorSet 82 
                                                      OpDecorate %82 Binding 82 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 Location 84 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %143 SpecId 143 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %229 DescriptorSet 229 
                                                      OpDecorate %229 Binding 229 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %255 Location 255 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeVector %6 3 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %7 %25 
                                              %27 = OpTypeStruct %7 %7 %26 %21 %21 %7 %7 %6 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 6 
                                              %32 = OpTypePointer Uniform %7 
                                          u32 %47 = OpConstant 1 
                                              %48 = OpTypePointer Private %6 
                                          u32 %51 = OpConstant 0 
                                          u32 %56 = OpConstant 2 
                                              %70 = OpTypeBool 
                                              %71 = OpTypePointer Private %70 
                                Private bool* %72 = OpVariable Private 
                                          i32 %75 = OpConstant 7 
                                              %76 = OpTypePointer Uniform %6 
                                              %80 = OpTypePointer Private %21 
                               Private f32_3* %81 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %82 = OpVariable UniformConstant 
                                 Input f32_2* %84 = OpVariable Input 
                                              %88 = OpTypePointer Function %6 
                                          f32 %93 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                               Private f32_3* %98 = OpVariable Private 
                              Private f32_3* %104 = OpVariable Private 
                                Private f32* %112 = OpVariable Private 
                                         u32 %113 = OpConstant 3 
                                         i32 %116 = OpConstant 8 
                                         i32 %124 = OpConstant 0 
                                         i32 %125 = OpConstant 1 
                                         i32 %127 = OpConstant -1 
                                         f32 %135 = OpConstant 3.674022E-40 
                                        bool %137 = OpConstantFalse 
                                        bool %143 = OpSpecConstantFalse 
                              Private f32_3* %149 = OpVariable Private 
                                             %150 = OpTypePointer Input %21 
                                Input f32_3* %151 = OpVariable Input 
                                         i32 %154 = OpConstant 2 
                                         i32 %176 = OpConstant 3 
                                             %181 = OpTypePointer Function %21 
                                         i32 %194 = OpConstant 4 
                                             %195 = OpTypePointer Uniform %21 
                                         f32 %211 = OpConstant 3.674022E-40 
                                Private f32* %215 = OpVariable Private 
                                         f32 %218 = OpConstant 3.674022E-40 
                                             %226 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %227 = OpTypeSampledImage %226 
                                             %228 = OpTypePointer UniformConstant %227 
 UniformConstant read_only Texture3DSampled* %229 = OpVariable UniformConstant 
                              Private f32_4* %234 = OpVariable Private 
                              Private f32_3* %247 = OpVariable Private 
                                         i32 %249 = OpConstant 5 
                                             %254 = OpTypePointer Output %7 
                               Output f32_4* %255 = OpVariable Output 
                                             %264 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %89 = OpVariable Function 
                             Function f32_3* %182 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %22 = OpLoad %9 
                                        f32_3 %23 = OpVectorShuffle %22 %22 0 1 2 
                               Uniform f32_4* %33 = OpAccessChain %29 %31 
                                        f32_4 %34 = OpLoad %33 
                                        f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                        f32_3 %36 = OpFNegate %35 
                                        f32_3 %37 = OpFAdd %23 %36 
                                        f32_4 %38 = OpLoad %20 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 6 3 
                                                      OpStore %20 %39 
                                        f32_4 %40 = OpLoad %20 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                                        f32_4 %42 = OpLoad %20 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_2 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %20 
                                        f32_4 %46 = OpVectorShuffle %45 %44 4 5 2 3 
                                                      OpStore %20 %46 
                                 Private f32* %49 = OpAccessChain %20 %47 
                                          f32 %50 = OpLoad %49 
                                 Private f32* %52 = OpAccessChain %20 %51 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFAdd %50 %53 
                                 Private f32* %55 = OpAccessChain %20 %51 
                                                      OpStore %55 %54 
                                 Private f32* %57 = OpAccessChain %20 %56 
                                          f32 %58 = OpLoad %57 
                                 Private f32* %59 = OpAccessChain %20 %56 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %58 %60 
                                 Private f32* %62 = OpAccessChain %20 %51 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %20 %51 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %20 %51 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpExtInst %1 31 %67 
                                 Private f32* %69 = OpAccessChain %20 %51 
                                                      OpStore %69 %68 
                                 Private f32* %73 = OpAccessChain %20 %51 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %77 = OpAccessChain %29 %75 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %74 %78 
                                                      OpStore %72 %79 
                   read_only Texture2DSampled %83 = OpLoad %82 
                                        f32_2 %85 = OpLoad %84 
                                        f32_4 %86 = OpImageSampleImplicitLod %83 %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                                      OpStore %81 %87 
                                         bool %90 = OpLoad %72 
                                                      OpSelectionMerge %92 None 
                                                      OpBranchConditional %90 %91 %94 
                                              %91 = OpLabel 
                                                      OpStore %89 %93 
                                                      OpBranch %92 
                                              %94 = OpLabel 
                                                      OpStore %89 %95 
                                                      OpBranch %92 
                                              %92 = OpLabel 
                                          f32 %96 = OpLoad %89 
                                 Private f32* %97 = OpAccessChain %20 %51 
                                                      OpStore %97 %96 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_3 %101 = OpFNegate %100 
                                       f32_3 %102 = OpLoad %81 
                                       f32_3 %103 = OpFAdd %101 %102 
                                                      OpStore %98 %103 
                                       f32_4 %105 = OpLoad %20 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 0 0 
                                       f32_3 %107 = OpLoad %98 
                                       f32_3 %108 = OpFMul %106 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpFAdd %108 %110 
                                                      OpStore %104 %111 
                                Private f32* %114 = OpAccessChain %9 %113 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %117 = OpAccessChain %29 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFNegate %118 
                                         f32 %120 = OpFAdd %115 %119 
                                                      OpStore %112 %120 
                                         f32 %121 = OpLoad %112 
                                        bool %122 = OpFOrdLessThan %121 %95 
                                                      OpStore %72 %122 
                                        bool %123 = OpLoad %72 
                                         i32 %126 = OpSelect %123 %125 %124 
                                         i32 %128 = OpIMul %126 %127 
                                        bool %129 = OpINotEqual %128 %124 
                                                      OpSelectionMerge %131 None 
                                                      OpBranchConditional %129 %130 %131 
                                             %130 = OpLabel 
                                                      OpKill
                                             %131 = OpLabel 
                                Uniform f32* %133 = OpAccessChain %29 %125 %51 
                                         f32 %134 = OpLoad %133 
                                        bool %136 = OpFOrdEqual %134 %135 
                                                      OpStore %72 %136 
                                                      OpSelectionMerge %139 None 
                                                      OpBranchConditional %137 %138 %139 
                                             %138 = OpLabel 
                                        bool %140 = OpLoad %72 
                                                      OpSelectionMerge %142 None 
                                                      OpBranchConditional %140 %141 %142 
                                             %141 = OpLabel 
                                                      OpBranch %142 
                                             %142 = OpLabel 
                                                      OpBranch %139 
                                             %139 = OpLabel 
                                                      OpSelectionMerge %145 None 
                                                      OpBranchConditional %143 %144 %236 
                                             %144 = OpLabel 
                                Uniform f32* %146 = OpAccessChain %29 %125 %47 
                                         f32 %147 = OpLoad %146 
                                        bool %148 = OpFOrdEqual %147 %135 
                                                      OpStore %72 %148 
                                       f32_3 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 1 1 1 
                              Uniform f32_4* %155 = OpAccessChain %29 %154 %125 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %153 %157 
                                                      OpStore %149 %158 
                              Uniform f32_4* %159 = OpAccessChain %29 %154 %124 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpLoad %151 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 0 0 
                                       f32_3 %164 = OpFMul %161 %163 
                                       f32_3 %165 = OpLoad %149 
                                       f32_3 %166 = OpFAdd %164 %165 
                                                      OpStore %149 %166 
                              Uniform f32_4* %167 = OpAccessChain %29 %154 %154 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpLoad %151 
                                       f32_3 %171 = OpVectorShuffle %170 %170 2 2 2 
                                       f32_3 %172 = OpFMul %169 %171 
                                       f32_3 %173 = OpLoad %149 
                                       f32_3 %174 = OpFAdd %172 %173 
                                                      OpStore %149 %174 
                                       f32_3 %175 = OpLoad %149 
                              Uniform f32_4* %177 = OpAccessChain %29 %154 %176 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFAdd %175 %179 
                                                      OpStore %149 %180 
                                        bool %183 = OpLoad %72 
                                                      OpSelectionMerge %185 None 
                                                      OpBranchConditional %183 %184 %187 
                                             %184 = OpLabel 
                                       f32_3 %186 = OpLoad %149 
                                                      OpStore %182 %186 
                                                      OpBranch %185 
                                             %187 = OpLabel 
                                       f32_3 %188 = OpLoad %151 
                                                      OpStore %182 %188 
                                                      OpBranch %185 
                                             %185 = OpLabel 
                                       f32_3 %189 = OpLoad %182 
                                       f32_4 %190 = OpLoad %20 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %20 %191 
                                       f32_4 %192 = OpLoad %20 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                              Uniform f32_3* %196 = OpAccessChain %29 %194 
                                       f32_3 %197 = OpLoad %196 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %193 %198 
                                       f32_4 %200 = OpLoad %20 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
                                                      OpStore %20 %201 
                                       f32_4 %202 = OpLoad %20 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                              Uniform f32_3* %204 = OpAccessChain %29 %176 
                                       f32_3 %205 = OpLoad %204 
                                       f32_3 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %20 
                                       f32_4 %208 = OpVectorShuffle %207 %206 0 4 5 6 
                                                      OpStore %20 %208 
                                Private f32* %209 = OpAccessChain %20 %47 
                                         f32 %210 = OpLoad %209 
                                         f32 %212 = OpFMul %210 %211 
                                         f32 %213 = OpFAdd %212 %93 
                                Private f32* %214 = OpAccessChain %149 %51 
                                                      OpStore %214 %213 
                                Uniform f32* %216 = OpAccessChain %29 %125 %56 
                                         f32 %217 = OpLoad %216 
                                         f32 %219 = OpFMul %217 %218 
                                         f32 %220 = OpFAdd %219 %93 
                                                      OpStore %215 %220 
                                Private f32* %221 = OpAccessChain %149 %51 
                                         f32 %222 = OpLoad %221 
                                         f32 %223 = OpLoad %215 
                                         f32 %224 = OpExtInst %1 40 %222 %223 
                                Private f32* %225 = OpAccessChain %20 %51 
                                                      OpStore %225 %224 
                  read_only Texture3DSampled %230 = OpLoad %229 
                                       f32_4 %231 = OpLoad %20 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 2 3 
                                       f32_4 %233 = OpImageSampleImplicitLod %230 %232 
                                                      OpStore %20 %233 
                                       f32_4 %235 = OpLoad %20 
                                                      OpStore %234 %235 
                                                      OpBranch %145 
                                             %236 = OpLabel 
                                Private f32* %237 = OpAccessChain %234 %51 
                                                      OpStore %237 %135 
                                Private f32* %238 = OpAccessChain %234 %47 
                                                      OpStore %238 %135 
                                Private f32* %239 = OpAccessChain %234 %56 
                                                      OpStore %239 %135 
                                Private f32* %240 = OpAccessChain %234 %113 
                                                      OpStore %240 %135 
                                                      OpBranch %145 
                                             %145 = OpLabel 
                                       f32_4 %241 = OpLoad %234 
                              Uniform f32_4* %242 = OpAccessChain %29 %124 
                                       f32_4 %243 = OpLoad %242 
                                         f32 %244 = OpDot %241 %243 
                                                      OpStore %112 %244 
                                         f32 %245 = OpLoad %112 
                                         f32 %246 = OpExtInst %1 43 %245 %95 %135 
                                                      OpStore %112 %246 
                                       f32_3 %248 = OpLoad %104 
                              Uniform f32_4* %250 = OpAccessChain %29 %249 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFMul %248 %252 
                                                      OpStore %247 %253 
                                         f32 %256 = OpLoad %112 
                                       f32_3 %257 = OpCompositeConstruct %256 %256 %256 
                                       f32_3 %258 = OpLoad %247 
                                       f32_3 %259 = OpFMul %257 %258 
                                       f32_4 %260 = OpLoad %255 
                                       f32_4 %261 = OpVectorShuffle %260 %259 4 5 6 3 
                                                      OpStore %255 %261 
                                Private f32* %262 = OpAccessChain %9 %113 
                                         f32 %263 = OpLoad %262 
                                 Output f32* %265 = OpAccessChain %255 %113 
                                                      OpStore %265 %263 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _EmissiveColor;
uniform 	float _EmissiveThresholdSensitivity;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ParallaxTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
float u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz + (-_EmissiveColor.xyz);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y + u_xlat1.x;
    u_xlat1.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb1 = u_xlat1.x<_EmissiveThresholdSensitivity;
    u_xlat10_2 = texture(_ParallaxTex, vs_TEXCOORD4.xy);
    u_xlat1.x = u_xlatb1 ? 0.75 : float(0.0);
    u_xlat16_5.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz + u_xlat10_0.xyz;
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat3 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat6.x, u_xlat3);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat2.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb6 = 0.0<u_xlat1.z;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat10.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(0.5, 0.5);
    u_xlat10_3 = texture(_LightTexture0, u_xlat10.xy);
    u_xlat13 = u_xlat6.x * u_xlat10_3.w;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_3 = texture(_LightTextureB0, u_xlat1.xx);
    u_xlat1.x = u_xlat13 * u_xlat10_3.w;
    u_xlat1.x = u_xlat2.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 218
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %152 %161 %162 %174 %204 %210 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate %174 Location 174 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %210 Location 210 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_2 %140 = OpConstantComposite %139 %139 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %146 %146 
                                             %151 = OpTypePointer Output %95 
                               Output f32_2* %152 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_2 %156 = OpConstantComposite %139 %155 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_2 %159 = OpConstantComposite %158 %139 
                               Output f32_2* %161 = OpVariable Output 
                                Input f32_4* %162 = OpVariable Input 
                                             %173 = OpTypePointer Input %50 
                                Input f32_3* %174 = OpVariable Input 
                                         u32 %180 = OpConstant 0 
                                             %181 = OpTypePointer Private %6 
                                         u32 %194 = OpConstant 2 
                                Private f32* %196 = OpVariable Private 
                               Output f32_3* %204 = OpVariable Output 
                               Output f32_4* %210 = OpVariable Output 
                                       f32_4 %211 = OpConstantComposite %158 %158 %158 %158 
                                             %212 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %96 = OpLoad %44 
                                        f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                               Uniform f32_4* %98 = OpAccessChain %21 %36 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %97 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
                                                      OpStore %9 %103 
                              Uniform f32_4* %104 = OpAccessChain %21 %36 %23 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %107 = OpLoad %44 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 0 
                                       f32_2 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %9 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %36 %36 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpLoad %44 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 2 
                                       f32_2 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %9 %125 
                              Uniform f32_4* %126 = OpAccessChain %21 %36 %46 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                                       f32_4 %129 = OpLoad %44 
                                       f32_2 %130 = OpVectorShuffle %129 %129 3 3 
                                       f32_2 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_2 %134 = OpFAdd %131 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 3 
                                                      OpStore %9 %136 
                                       f32_4 %137 = OpLoad %9 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %9 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %9 %143 
                                       f32_4 %144 = OpLoad %9 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %9 %150 
                                       f32_4 %153 = OpLoad %9 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %157 = OpFMul %154 %156 
                                       f32_2 %160 = OpFAdd %157 %159 
                                                      OpStore %152 %160 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                              Uniform f32_4* %165 = OpAccessChain %21 %46 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_2 %168 = OpFMul %164 %167 
                              Uniform f32_4* %169 = OpAccessChain %21 %46 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %168 %171 
                                                      OpStore %161 %172 
                                       f32_3 %175 = OpLoad %174 
                              Uniform f32_4* %176 = OpAccessChain %21 %24 %23 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %175 %178 
                                Private f32* %182 = OpAccessChain %9 %180 
                                                      OpStore %182 %179 
                                       f32_3 %183 = OpLoad %174 
                              Uniform f32_4* %184 = OpAccessChain %21 %24 %24 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                         f32 %187 = OpDot %183 %186 
                                Private f32* %188 = OpAccessChain %9 %81 
                                                      OpStore %188 %187 
                                       f32_3 %189 = OpLoad %174 
                              Uniform f32_4* %190 = OpAccessChain %21 %24 %36 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %189 %192 
                                Private f32* %195 = OpAccessChain %9 %194 
                                                      OpStore %195 %193 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %198 %200 
                                                      OpStore %196 %201 
                                         f32 %202 = OpLoad %196 
                                         f32 %203 = OpExtInst %1 32 %202 
                                                      OpStore %196 %203 
                                         f32 %205 = OpLoad %196 
                                       f32_3 %206 = OpCompositeConstruct %205 %205 %205 
                                       f32_4 %207 = OpLoad %9 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %206 %208 
                                                      OpStore %204 %209 
                                                      OpStore %210 %211 
                                 Output f32* %213 = OpAccessChain %85 %23 %81 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFNegate %214 
                                 Output f32* %216 = OpAccessChain %85 %23 %81 
                                                      OpStore %216 %215 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 350
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %85 %137 %338 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %28 0 RelaxedPrecision 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpMemberDecorate %28 1 Offset 28 
                                                      OpMemberDecorate %28 2 Offset 28 
                                                      OpMemberDecorate %28 3 Offset 28 
                                                      OpMemberDecorate %28 4 Offset 28 
                                                      OpMemberDecorate %28 5 RelaxedPrecision 
                                                      OpMemberDecorate %28 5 Offset 28 
                                                      OpMemberDecorate %28 6 Offset 28 
                                                      OpMemberDecorate %28 7 Offset 28 
                                                      OpMemberDecorate %28 8 Offset 28 
                                                      OpMemberDecorate %28 9 RelaxedPrecision 
                                                      OpMemberDecorate %28 9 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 Location 85 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %175 SpecId 175 
                                                      OpDecorate %254 DescriptorSet 254 
                                                      OpDecorate %254 Binding 254 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %297 DescriptorSet 297 
                                                      OpDecorate %297 Binding 297 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %314 DescriptorSet 314 
                                                      OpDecorate %314 Binding 314 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %338 Location 338 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeVector %6 3 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %7 %25 
                                              %27 = OpTypeArray %7 %25 
                                              %28 = OpTypeStruct %7 %7 %26 %21 %21 %7 %27 %7 %6 %6 
                                              %29 = OpTypePointer Uniform %28 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32; f32;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 7 
                                              %33 = OpTypePointer Uniform %7 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Private %6 
                                          u32 %52 = OpConstant 0 
                                          u32 %57 = OpConstant 2 
                                              %71 = OpTypeBool 
                                              %72 = OpTypePointer Private %71 
                                Private bool* %73 = OpVariable Private 
                                          i32 %76 = OpConstant 8 
                                              %77 = OpTypePointer Uniform %6 
                                              %81 = OpTypePointer Private %21 
                               Private f32_3* %82 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %83 = OpVariable UniformConstant 
                                 Input f32_2* %85 = OpVariable Input 
                                              %89 = OpTypePointer Function %6 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                               Private f32_3* %99 = OpVariable Private 
                              Private f32_3* %105 = OpVariable Private 
                              Private f32_4* %113 = OpVariable Private 
                                         u32 %114 = OpConstant 3 
                                         i32 %117 = OpConstant 9 
                                         i32 %127 = OpConstant 0 
                                         i32 %128 = OpConstant 1 
                                         i32 %130 = OpConstant -1 
                                             %136 = OpTypePointer Input %21 
                                Input f32_3* %137 = OpVariable Input 
                                         i32 %140 = OpConstant 6 
                                         i32 %151 = OpConstant 2 
                                         i32 %160 = OpConstant 3 
                               Private bool* %164 = OpVariable Private 
                                         f32 %167 = OpConstant 3.674022E-40 
                                        bool %169 = OpConstantFalse 
                                        bool %175 = OpSpecConstantFalse 
                              Private f32_3* %181 = OpVariable Private 
                              Private f32_3* %209 = OpVariable Private 
                                             %210 = OpTypePointer Function %21 
                                         i32 %220 = OpConstant 4 
                                             %221 = OpTypePointer Uniform %21 
                              Private f32_4* %226 = OpVariable Private 
                                         f32 %235 = OpConstant 3.674022E-40 
                                         f32 %241 = OpConstant 3.674022E-40 
                                             %251 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %252 = OpTypeSampledImage %251 
                                             %253 = OpTypePointer UniformConstant %252 
 UniformConstant read_only Texture3DSampled* %254 = OpVariable UniformConstant 
                                Private f32* %265 = OpVariable Private 
                              Private f32_3* %275 = OpVariable Private 
                                       f32_2 %292 = OpConstantComposite %241 %241 
                                Private f32* %296 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %297 = OpVariable UniformConstant 
 UniformConstant read_only Texture2DSampled* %314 = OpVariable UniformConstant 
                                         i32 %332 = OpConstant 5 
                                             %337 = OpTypePointer Output %7 
                               Output f32_4* %338 = OpVariable Output 
                                             %347 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %90 = OpVariable Function 
                             Function f32_3* %211 = OpVariable Function 
                               Function f32* %276 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %22 = OpLoad %9 
                                        f32_3 %23 = OpVectorShuffle %22 %22 0 1 2 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFNegate %36 
                                        f32_3 %38 = OpFAdd %23 %37 
                                        f32_4 %39 = OpLoad %20 
                                        f32_4 %40 = OpVectorShuffle %39 %38 4 5 6 3 
                                                      OpStore %20 %40 
                                        f32_4 %41 = OpLoad %20 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpLoad %20 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_2 %45 = OpFMul %42 %44 
                                        f32_4 %46 = OpLoad %20 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 2 3 
                                                      OpStore %20 %47 
                                 Private f32* %50 = OpAccessChain %20 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %53 = OpAccessChain %20 %52 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFAdd %51 %54 
                                 Private f32* %56 = OpAccessChain %20 %52 
                                                      OpStore %56 %55 
                                 Private f32* %58 = OpAccessChain %20 %57 
                                          f32 %59 = OpLoad %58 
                                 Private f32* %60 = OpAccessChain %20 %57 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFMul %59 %61 
                                 Private f32* %63 = OpAccessChain %20 %52 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %62 %64 
                                 Private f32* %66 = OpAccessChain %20 %52 
                                                      OpStore %66 %65 
                                 Private f32* %67 = OpAccessChain %20 %52 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpExtInst %1 31 %68 
                                 Private f32* %70 = OpAccessChain %20 %52 
                                                      OpStore %70 %69 
                                 Private f32* %74 = OpAccessChain %20 %52 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %78 = OpAccessChain %30 %76 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %75 %79 
                                                      OpStore %73 %80 
                   read_only Texture2DSampled %84 = OpLoad %83 
                                        f32_2 %86 = OpLoad %85 
                                        f32_4 %87 = OpImageSampleImplicitLod %84 %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                                      OpStore %82 %88 
                                         bool %91 = OpLoad %73 
                                                      OpSelectionMerge %93 None 
                                                      OpBranchConditional %91 %92 %95 
                                              %92 = OpLabel 
                                                      OpStore %90 %94 
                                                      OpBranch %93 
                                              %95 = OpLabel 
                                                      OpStore %90 %96 
                                                      OpBranch %93 
                                              %93 = OpLabel 
                                          f32 %97 = OpLoad %90 
                                 Private f32* %98 = OpAccessChain %20 %52 
                                                      OpStore %98 %97 
                                       f32_4 %100 = OpLoad %9 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_3 %102 = OpFNegate %101 
                                       f32_3 %103 = OpLoad %82 
                                       f32_3 %104 = OpFAdd %102 %103 
                                                      OpStore %99 %104 
                                       f32_4 %106 = OpLoad %20 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 0 0 
                                       f32_3 %108 = OpLoad %99 
                                       f32_3 %109 = OpFMul %107 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_3 %112 = OpFAdd %109 %111 
                                                      OpStore %105 %112 
                                Private f32* %115 = OpAccessChain %9 %114 
                                         f32 %116 = OpLoad %115 
                                Uniform f32* %118 = OpAccessChain %30 %117 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFNegate %119 
                                         f32 %121 = OpFAdd %116 %120 
                                Private f32* %122 = OpAccessChain %113 %52 
                                                      OpStore %122 %121 
                                Private f32* %123 = OpAccessChain %113 %52 
                                         f32 %124 = OpLoad %123 
                                        bool %125 = OpFOrdLessThan %124 %96 
                                                      OpStore %73 %125 
                                        bool %126 = OpLoad %73 
                                         i32 %129 = OpSelect %126 %128 %127 
                                         i32 %131 = OpIMul %129 %130 
                                        bool %132 = OpINotEqual %131 %127 
                                                      OpSelectionMerge %134 None 
                                                      OpBranchConditional %132 %133 %134 
                                             %133 = OpLabel 
                                                      OpKill
                                             %134 = OpLabel 
                                       f32_3 %138 = OpLoad %137 
                                       f32_4 %139 = OpVectorShuffle %138 %138 1 1 1 1 
                              Uniform f32_4* %141 = OpAccessChain %30 %140 %128 
                                       f32_4 %142 = OpLoad %141 
                                       f32_4 %143 = OpFMul %139 %142 
                                                      OpStore %20 %143 
                              Uniform f32_4* %144 = OpAccessChain %30 %140 %127 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpLoad %137 
                                       f32_4 %147 = OpVectorShuffle %146 %146 0 0 0 0 
                                       f32_4 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %20 
                                       f32_4 %150 = OpFAdd %148 %149 
                                                      OpStore %20 %150 
                              Uniform f32_4* %152 = OpAccessChain %30 %140 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpLoad %137 
                                       f32_4 %155 = OpVectorShuffle %154 %154 2 2 2 2 
                                       f32_4 %156 = OpFMul %153 %155 
                                       f32_4 %157 = OpLoad %20 
                                       f32_4 %158 = OpFAdd %156 %157 
                                                      OpStore %20 %158 
                                       f32_4 %159 = OpLoad %20 
                              Uniform f32_4* %161 = OpAccessChain %30 %140 %160 
                                       f32_4 %162 = OpLoad %161 
                                       f32_4 %163 = OpFAdd %159 %162 
                                                      OpStore %20 %163 
                                Uniform f32* %165 = OpAccessChain %30 %128 %52 
                                         f32 %166 = OpLoad %165 
                                        bool %168 = OpFOrdEqual %166 %167 
                                                      OpStore %164 %168 
                                                      OpSelectionMerge %171 None 
                                                      OpBranchConditional %169 %170 %171 
                                             %170 = OpLabel 
                                        bool %172 = OpLoad %164 
                                                      OpSelectionMerge %174 None 
                                                      OpBranchConditional %172 %173 %174 
                                             %173 = OpLabel 
                                                      OpBranch %174 
                                             %174 = OpLabel 
                                                      OpBranch %171 
                                             %171 = OpLabel 
                                                      OpSelectionMerge %177 None 
                                                      OpBranchConditional %175 %176 %260 
                                             %176 = OpLabel 
                                Uniform f32* %178 = OpAccessChain %30 %128 %48 
                                         f32 %179 = OpLoad %178 
                                        bool %180 = OpFOrdEqual %179 %167 
                                                      OpStore %164 %180 
                                       f32_3 %182 = OpLoad %137 
                                       f32_3 %183 = OpVectorShuffle %182 %182 1 1 1 
                              Uniform f32_4* %184 = OpAccessChain %30 %151 %128 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %183 %186 
                                                      OpStore %181 %187 
                              Uniform f32_4* %188 = OpAccessChain %30 %151 %127 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpLoad %137 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 0 0 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %194 = OpLoad %181 
                                       f32_3 %195 = OpFAdd %193 %194 
                                                      OpStore %181 %195 
                              Uniform f32_4* %196 = OpAccessChain %30 %151 %151 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpLoad %137 
                                       f32_3 %200 = OpVectorShuffle %199 %199 2 2 2 
                                       f32_3 %201 = OpFMul %198 %200 
                                       f32_3 %202 = OpLoad %181 
                                       f32_3 %203 = OpFAdd %201 %202 
                                                      OpStore %181 %203 
                                       f32_3 %204 = OpLoad %181 
                              Uniform f32_4* %205 = OpAccessChain %30 %151 %160 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFAdd %204 %207 
                                                      OpStore %181 %208 
                                        bool %212 = OpLoad %164 
                                                      OpSelectionMerge %214 None 
                                                      OpBranchConditional %212 %213 %216 
                                             %213 = OpLabel 
                                       f32_3 %215 = OpLoad %181 
                                                      OpStore %211 %215 
                                                      OpBranch %214 
                                             %216 = OpLabel 
                                       f32_3 %217 = OpLoad %137 
                                                      OpStore %211 %217 
                                                      OpBranch %214 
                                             %214 = OpLabel 
                                       f32_3 %218 = OpLoad %211 
                                                      OpStore %209 %218 
                                       f32_3 %219 = OpLoad %209 
                              Uniform f32_3* %222 = OpAccessChain %30 %220 
                                       f32_3 %223 = OpLoad %222 
                                       f32_3 %224 = OpFNegate %223 
                                       f32_3 %225 = OpFAdd %219 %224 
                                                      OpStore %209 %225 
                                       f32_3 %227 = OpLoad %209 
                              Uniform f32_3* %228 = OpAccessChain %30 %160 
                                       f32_3 %229 = OpLoad %228 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_4 %231 = OpLoad %226 
                                       f32_4 %232 = OpVectorShuffle %231 %230 0 4 5 6 
                                                      OpStore %226 %232 
                                Private f32* %233 = OpAccessChain %226 %48 
                                         f32 %234 = OpLoad %233 
                                         f32 %236 = OpFMul %234 %235 
                                         f32 %237 = OpFAdd %236 %94 
                                Private f32* %238 = OpAccessChain %209 %52 
                                                      OpStore %238 %237 
                                Uniform f32* %239 = OpAccessChain %30 %128 %57 
                                         f32 %240 = OpLoad %239 
                                         f32 %242 = OpFMul %240 %241 
                                         f32 %243 = OpFAdd %242 %94 
                                Private f32* %244 = OpAccessChain %181 %52 
                                                      OpStore %244 %243 
                                Private f32* %245 = OpAccessChain %181 %52 
                                         f32 %246 = OpLoad %245 
                                Private f32* %247 = OpAccessChain %209 %52 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpExtInst %1 40 %246 %248 
                                Private f32* %250 = OpAccessChain %226 %52 
                                                      OpStore %250 %249 
                  read_only Texture3DSampled %255 = OpLoad %254 
                                       f32_4 %256 = OpLoad %226 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 2 3 
                                       f32_4 %258 = OpImageSampleImplicitLod %255 %257 
                                                      OpStore %226 %258 
                                       f32_4 %259 = OpLoad %226 
                                                      OpStore %113 %259 
                                                      OpBranch %177 
                                             %260 = OpLabel 
                                Private f32* %261 = OpAccessChain %113 %52 
                                                      OpStore %261 %167 
                                Private f32* %262 = OpAccessChain %113 %48 
                                                      OpStore %262 %167 
                                Private f32* %263 = OpAccessChain %113 %57 
                                                      OpStore %263 %167 
                                Private f32* %264 = OpAccessChain %113 %114 
                                                      OpStore %264 %167 
                                                      OpBranch %177 
                                             %177 = OpLabel 
                                       f32_4 %266 = OpLoad %113 
                              Uniform f32_4* %267 = OpAccessChain %30 %127 
                                       f32_4 %268 = OpLoad %267 
                                         f32 %269 = OpDot %266 %268 
                                                      OpStore %265 %269 
                                         f32 %270 = OpLoad %265 
                                         f32 %271 = OpExtInst %1 43 %270 %96 %167 
                                                      OpStore %265 %271 
                                Private f32* %272 = OpAccessChain %20 %57 
                                         f32 %273 = OpLoad %272 
                                        bool %274 = OpFOrdLessThan %96 %273 
                                                      OpStore %164 %274 
                                        bool %277 = OpLoad %164 
                                                      OpSelectionMerge %279 None 
                                                      OpBranchConditional %277 %278 %280 
                                             %278 = OpLabel 
                                                      OpStore %276 %167 
                                                      OpBranch %279 
                                             %280 = OpLabel 
                                                      OpStore %276 %96 
                                                      OpBranch %279 
                                             %279 = OpLabel 
                                         f32 %281 = OpLoad %276 
                                Private f32* %282 = OpAccessChain %275 %52 
                                                      OpStore %282 %281 
                                       f32_4 %283 = OpLoad %20 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 1 
                                       f32_4 %285 = OpLoad %20 
                                       f32_2 %286 = OpVectorShuffle %285 %285 3 3 
                                       f32_2 %287 = OpFDiv %284 %286 
                                       f32_3 %288 = OpLoad %209 
                                       f32_3 %289 = OpVectorShuffle %288 %287 3 4 2 
                                                      OpStore %209 %289 
                                       f32_3 %290 = OpLoad %209 
                                       f32_2 %291 = OpVectorShuffle %290 %290 0 1 
                                       f32_2 %293 = OpFAdd %291 %292 
                                       f32_3 %294 = OpLoad %209 
                                       f32_3 %295 = OpVectorShuffle %294 %293 3 4 2 
                                                      OpStore %209 %295 
                  read_only Texture2DSampled %298 = OpLoad %297 
                                       f32_3 %299 = OpLoad %209 
                                       f32_2 %300 = OpVectorShuffle %299 %299 0 1 
                                       f32_4 %301 = OpImageSampleImplicitLod %298 %300 
                                         f32 %302 = OpCompositeExtract %301 3 
                                                      OpStore %296 %302 
                                         f32 %303 = OpLoad %296 
                                Private f32* %304 = OpAccessChain %275 %52 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                Private f32* %307 = OpAccessChain %275 %52 
                                                      OpStore %307 %306 
                                       f32_4 %308 = OpLoad %20 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_4 %310 = OpLoad %20 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                         f32 %312 = OpDot %309 %311 
                                Private f32* %313 = OpAccessChain %20 %52 
                                                      OpStore %313 %312 
                  read_only Texture2DSampled %315 = OpLoad %314 
                                       f32_4 %316 = OpLoad %20 
                                       f32_2 %317 = OpVectorShuffle %316 %316 0 0 
                                       f32_4 %318 = OpImageSampleImplicitLod %315 %317 
                                         f32 %319 = OpCompositeExtract %318 3 
                                Private f32* %320 = OpAccessChain %20 %52 
                                                      OpStore %320 %319 
                                Private f32* %321 = OpAccessChain %20 %52 
                                         f32 %322 = OpLoad %321 
                                Private f32* %323 = OpAccessChain %275 %52 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFMul %322 %324 
                                Private f32* %326 = OpAccessChain %275 %52 
                                                      OpStore %326 %325 
                                         f32 %327 = OpLoad %265 
                                Private f32* %328 = OpAccessChain %275 %52 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFMul %327 %329 
                                                      OpStore %265 %330 
                                       f32_3 %331 = OpLoad %105 
                              Uniform f32_4* %333 = OpAccessChain %30 %332 
                                       f32_4 %334 = OpLoad %333 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFMul %331 %335 
                                                      OpStore %275 %336 
                                         f32 %339 = OpLoad %265 
                                       f32_3 %340 = OpCompositeConstruct %339 %339 %339 
                                       f32_3 %341 = OpLoad %275 
                                       f32_3 %342 = OpFMul %340 %341 
                                       f32_4 %343 = OpLoad %338 
                                       f32_4 %344 = OpVectorShuffle %343 %342 4 5 6 3 
                                                      OpStore %338 %344 
                                Private f32* %345 = OpAccessChain %9 %114 
                                         f32 %346 = OpLoad %345 
                                 Output f32* %348 = OpAccessChain %338 %114 
                                                      OpStore %348 %346 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _EmissiveColor;
uniform 	float _EmissiveThresholdSensitivity;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ParallaxTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat10_3;
vec3 u_xlat16_5;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz + (-_EmissiveColor.xyz);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y + u_xlat1.x;
    u_xlat1.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb1 = u_xlat1.x<_EmissiveThresholdSensitivity;
    u_xlat10_2 = texture(_ParallaxTex, vs_TEXCOORD4.xy);
    u_xlat1.x = u_xlatb1 ? 0.75 : float(0.0);
    u_xlat16_5.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz + u_xlat10_0.xyz;
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat2.xx);
    u_xlat10_3 = texture(_LightTexture0, u_xlat1.xyz);
    u_xlat16_1 = u_xlat10_2.w * u_xlat10_3.w;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 218
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %152 %161 %162 %174 %204 %210 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate %174 Location 174 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %210 Location 210 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_2 %140 = OpConstantComposite %139 %139 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %146 %146 
                                             %151 = OpTypePointer Output %95 
                               Output f32_2* %152 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_2 %156 = OpConstantComposite %139 %155 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_2 %159 = OpConstantComposite %158 %139 
                               Output f32_2* %161 = OpVariable Output 
                                Input f32_4* %162 = OpVariable Input 
                                             %173 = OpTypePointer Input %50 
                                Input f32_3* %174 = OpVariable Input 
                                         u32 %180 = OpConstant 0 
                                             %181 = OpTypePointer Private %6 
                                         u32 %194 = OpConstant 2 
                                Private f32* %196 = OpVariable Private 
                               Output f32_3* %204 = OpVariable Output 
                               Output f32_4* %210 = OpVariable Output 
                                       f32_4 %211 = OpConstantComposite %158 %158 %158 %158 
                                             %212 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %96 = OpLoad %44 
                                        f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                               Uniform f32_4* %98 = OpAccessChain %21 %36 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %97 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
                                                      OpStore %9 %103 
                              Uniform f32_4* %104 = OpAccessChain %21 %36 %23 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %107 = OpLoad %44 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 0 
                                       f32_2 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %9 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %36 %36 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpLoad %44 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 2 
                                       f32_2 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %9 %125 
                              Uniform f32_4* %126 = OpAccessChain %21 %36 %46 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                                       f32_4 %129 = OpLoad %44 
                                       f32_2 %130 = OpVectorShuffle %129 %129 3 3 
                                       f32_2 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_2 %134 = OpFAdd %131 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 3 
                                                      OpStore %9 %136 
                                       f32_4 %137 = OpLoad %9 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %9 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %9 %143 
                                       f32_4 %144 = OpLoad %9 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %9 %150 
                                       f32_4 %153 = OpLoad %9 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %157 = OpFMul %154 %156 
                                       f32_2 %160 = OpFAdd %157 %159 
                                                      OpStore %152 %160 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                              Uniform f32_4* %165 = OpAccessChain %21 %46 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_2 %168 = OpFMul %164 %167 
                              Uniform f32_4* %169 = OpAccessChain %21 %46 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %168 %171 
                                                      OpStore %161 %172 
                                       f32_3 %175 = OpLoad %174 
                              Uniform f32_4* %176 = OpAccessChain %21 %24 %23 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %175 %178 
                                Private f32* %182 = OpAccessChain %9 %180 
                                                      OpStore %182 %179 
                                       f32_3 %183 = OpLoad %174 
                              Uniform f32_4* %184 = OpAccessChain %21 %24 %24 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                         f32 %187 = OpDot %183 %186 
                                Private f32* %188 = OpAccessChain %9 %81 
                                                      OpStore %188 %187 
                                       f32_3 %189 = OpLoad %174 
                              Uniform f32_4* %190 = OpAccessChain %21 %24 %36 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %189 %192 
                                Private f32* %195 = OpAccessChain %9 %194 
                                                      OpStore %195 %193 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %198 %200 
                                                      OpStore %196 %201 
                                         f32 %202 = OpLoad %196 
                                         f32 %203 = OpExtInst %1 32 %202 
                                                      OpStore %196 %203 
                                         f32 %205 = OpLoad %196 
                                       f32_3 %206 = OpCompositeConstruct %205 %205 %205 
                                       f32_4 %207 = OpLoad %9 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %206 %208 
                                                      OpStore %204 %209 
                                                      OpStore %210 %211 
                                 Output f32* %213 = OpAccessChain %85 %23 %81 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFNegate %214 
                                 Output f32* %216 = OpAccessChain %85 %23 %81 
                                                      OpStore %216 %215 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 323
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %83 %135 %311 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpDecorate %28 ArrayStride 28 
                                                      OpMemberDecorate %29 0 RelaxedPrecision 
                                                      OpMemberDecorate %29 0 Offset 29 
                                                      OpMemberDecorate %29 1 Offset 29 
                                                      OpMemberDecorate %29 2 Offset 29 
                                                      OpMemberDecorate %29 3 Offset 29 
                                                      OpMemberDecorate %29 4 Offset 29 
                                                      OpMemberDecorate %29 5 RelaxedPrecision 
                                                      OpMemberDecorate %29 5 Offset 29 
                                                      OpMemberDecorate %29 6 Offset 29 
                                                      OpMemberDecorate %29 7 Offset 29 
                                                      OpMemberDecorate %29 8 Offset 29 
                                                      OpMemberDecorate %29 9 RelaxedPrecision 
                                                      OpMemberDecorate %29 9 Offset 29 
                                                      OpDecorate %29 Block 
                                                      OpDecorate %31 DescriptorSet 31 
                                                      OpDecorate %31 Binding 31 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %81 DescriptorSet 81 
                                                      OpDecorate %81 Binding 81 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 Location 83 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %177 SpecId 177 
                                                      OpDecorate %254 DescriptorSet 254 
                                                      OpDecorate %254 Binding 254 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %278 DescriptorSet 278 
                                                      OpDecorate %278 Binding 278 
                                                      OpDecorate %287 DescriptorSet 287 
                                                      OpDecorate %287 Binding 287 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %311 Location 311 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeArray %7 %26 
                                              %29 = OpTypeStruct %7 %7 %27 %20 %20 %7 %28 %7 %6 %6 
                                              %30 = OpTypePointer Uniform %29 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32; f32;}* %31 = OpVariable Uniform 
                                              %32 = OpTypeInt 32 1 
                                          i32 %33 = OpConstant 7 
                                              %34 = OpTypePointer Uniform %7 
                                          u32 %47 = OpConstant 1 
                                              %48 = OpTypePointer Private %6 
                                          u32 %51 = OpConstant 0 
                                          u32 %56 = OpConstant 2 
                                              %70 = OpTypeBool 
                                              %71 = OpTypePointer Private %70 
                                Private bool* %72 = OpVariable Private 
                                          i32 %75 = OpConstant 8 
                                              %76 = OpTypePointer Uniform %6 
                               Private f32_3* %80 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %81 = OpVariable UniformConstant 
                                 Input f32_2* %83 = OpVariable Input 
                                              %87 = OpTypePointer Function %6 
                                          f32 %92 = OpConstant 3.674022E-40 
                                          f32 %94 = OpConstant 3.674022E-40 
                               Private f32_3* %97 = OpVariable Private 
                              Private f32_3* %103 = OpVariable Private 
                              Private f32_4* %111 = OpVariable Private 
                                         u32 %112 = OpConstant 3 
                                         i32 %115 = OpConstant 9 
                                         i32 %125 = OpConstant 0 
                                         i32 %126 = OpConstant 1 
                                         i32 %128 = OpConstant -1 
                                             %134 = OpTypePointer Input %20 
                                Input f32_3* %135 = OpVariable Input 
                                         i32 %138 = OpConstant 6 
                                         i32 %151 = OpConstant 2 
                                         i32 %161 = OpConstant 3 
                               Private bool* %166 = OpVariable Private 
                                         f32 %169 = OpConstant 3.674022E-40 
                                        bool %171 = OpConstantFalse 
                                        bool %177 = OpSpecConstantFalse 
                              Private f32_3* %183 = OpVariable Private 
                                             %211 = OpTypePointer Function %20 
                                         i32 %221 = OpConstant 4 
                                             %222 = OpTypePointer Uniform %20 
                              Private f32_4* %227 = OpVariable Private 
                                Private f32* %234 = OpVariable Private 
                                         f32 %237 = OpConstant 3.674022E-40 
                                         f32 %242 = OpConstant 3.674022E-40 
                                             %251 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %252 = OpTypeSampledImage %251 
                                             %253 = OpTypePointer UniformConstant %252 
 UniformConstant read_only Texture3DSampled* %254 = OpVariable UniformConstant 
                              Private f32_3* %265 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %278 = OpVariable UniformConstant 
                                             %284 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %285 = OpTypeSampledImage %284 
                                             %286 = OpTypePointer UniformConstant %285 
UniformConstant read_only TextureCubeSampled* %287 = OpVariable UniformConstant 
                                         i32 %305 = OpConstant 5 
                                             %310 = OpTypePointer Output %7 
                               Output f32_4* %311 = OpVariable Output 
                                             %320 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %88 = OpVariable Function 
                             Function f32_3* %212 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %23 = OpLoad %9 
                                        f32_3 %24 = OpVectorShuffle %23 %23 0 1 2 
                               Uniform f32_4* %35 = OpAccessChain %31 %33 
                                        f32_4 %36 = OpLoad %35 
                                        f32_3 %37 = OpVectorShuffle %36 %36 0 1 2 
                                        f32_3 %38 = OpFNegate %37 
                                        f32_3 %39 = OpFAdd %24 %38 
                                                      OpStore %22 %39 
                                        f32_3 %40 = OpLoad %22 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                                        f32_3 %42 = OpLoad %22 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_2 %44 = OpFMul %41 %43 
                                        f32_3 %45 = OpLoad %22 
                                        f32_3 %46 = OpVectorShuffle %45 %44 3 4 2 
                                                      OpStore %22 %46 
                                 Private f32* %49 = OpAccessChain %22 %47 
                                          f32 %50 = OpLoad %49 
                                 Private f32* %52 = OpAccessChain %22 %51 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFAdd %50 %53 
                                 Private f32* %55 = OpAccessChain %22 %51 
                                                      OpStore %55 %54 
                                 Private f32* %57 = OpAccessChain %22 %56 
                                          f32 %58 = OpLoad %57 
                                 Private f32* %59 = OpAccessChain %22 %56 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %58 %60 
                                 Private f32* %62 = OpAccessChain %22 %51 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %22 %51 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %22 %51 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpExtInst %1 31 %67 
                                 Private f32* %69 = OpAccessChain %22 %51 
                                                      OpStore %69 %68 
                                 Private f32* %73 = OpAccessChain %22 %51 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %77 = OpAccessChain %31 %75 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %74 %78 
                                                      OpStore %72 %79 
                   read_only Texture2DSampled %82 = OpLoad %81 
                                        f32_2 %84 = OpLoad %83 
                                        f32_4 %85 = OpImageSampleImplicitLod %82 %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                                      OpStore %80 %86 
                                         bool %89 = OpLoad %72 
                                                      OpSelectionMerge %91 None 
                                                      OpBranchConditional %89 %90 %93 
                                              %90 = OpLabel 
                                                      OpStore %88 %92 
                                                      OpBranch %91 
                                              %93 = OpLabel 
                                                      OpStore %88 %94 
                                                      OpBranch %91 
                                              %91 = OpLabel 
                                          f32 %95 = OpLoad %88 
                                 Private f32* %96 = OpAccessChain %22 %51 
                                                      OpStore %96 %95 
                                        f32_4 %98 = OpLoad %9 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFNegate %99 
                                       f32_3 %101 = OpLoad %80 
                                       f32_3 %102 = OpFAdd %100 %101 
                                                      OpStore %97 %102 
                                       f32_3 %104 = OpLoad %22 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 0 0 
                                       f32_3 %106 = OpLoad %97 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                       f32_3 %110 = OpFAdd %107 %109 
                                                      OpStore %103 %110 
                                Private f32* %113 = OpAccessChain %9 %112 
                                         f32 %114 = OpLoad %113 
                                Uniform f32* %116 = OpAccessChain %31 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                         f32 %119 = OpFAdd %114 %118 
                                Private f32* %120 = OpAccessChain %111 %51 
                                                      OpStore %120 %119 
                                Private f32* %121 = OpAccessChain %111 %51 
                                         f32 %122 = OpLoad %121 
                                        bool %123 = OpFOrdLessThan %122 %94 
                                                      OpStore %72 %123 
                                        bool %124 = OpLoad %72 
                                         i32 %127 = OpSelect %124 %126 %125 
                                         i32 %129 = OpIMul %127 %128 
                                        bool %130 = OpINotEqual %129 %125 
                                                      OpSelectionMerge %132 None 
                                                      OpBranchConditional %130 %131 %132 
                                             %131 = OpLabel 
                                                      OpKill
                                             %132 = OpLabel 
                                       f32_3 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 1 1 1 
                              Uniform f32_4* %139 = OpAccessChain %31 %138 %126 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFMul %137 %141 
                                                      OpStore %22 %142 
                              Uniform f32_4* %143 = OpAccessChain %31 %138 %125 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpLoad %135 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 0 0 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_3 %149 = OpLoad %22 
                                       f32_3 %150 = OpFAdd %148 %149 
                                                      OpStore %22 %150 
                              Uniform f32_4* %152 = OpAccessChain %31 %138 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpLoad %135 
                                       f32_3 %156 = OpVectorShuffle %155 %155 2 2 2 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_3 %158 = OpLoad %22 
                                       f32_3 %159 = OpFAdd %157 %158 
                                                      OpStore %22 %159 
                                       f32_3 %160 = OpLoad %22 
                              Uniform f32_4* %162 = OpAccessChain %31 %138 %161 
                                       f32_4 %163 = OpLoad %162 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                       f32_3 %165 = OpFAdd %160 %164 
                                                      OpStore %22 %165 
                                Uniform f32* %167 = OpAccessChain %31 %126 %51 
                                         f32 %168 = OpLoad %167 
                                        bool %170 = OpFOrdEqual %168 %169 
                                                      OpStore %166 %170 
                                                      OpSelectionMerge %173 None 
                                                      OpBranchConditional %171 %172 %173 
                                             %172 = OpLabel 
                                        bool %174 = OpLoad %166 
                                                      OpSelectionMerge %176 None 
                                                      OpBranchConditional %174 %175 %176 
                                             %175 = OpLabel 
                                                      OpBranch %176 
                                             %176 = OpLabel 
                                                      OpBranch %173 
                                             %173 = OpLabel 
                                                      OpSelectionMerge %179 None 
                                                      OpBranchConditional %177 %178 %260 
                                             %178 = OpLabel 
                                Uniform f32* %180 = OpAccessChain %31 %126 %47 
                                         f32 %181 = OpLoad %180 
                                        bool %182 = OpFOrdEqual %181 %169 
                                                      OpStore %166 %182 
                                       f32_3 %184 = OpLoad %135 
                                       f32_3 %185 = OpVectorShuffle %184 %184 1 1 1 
                              Uniform f32_4* %186 = OpAccessChain %31 %151 %126 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFMul %185 %188 
                                                      OpStore %183 %189 
                              Uniform f32_4* %190 = OpAccessChain %31 %151 %125 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_3 %193 = OpLoad %135 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 0 0 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_3 %196 = OpLoad %183 
                                       f32_3 %197 = OpFAdd %195 %196 
                                                      OpStore %183 %197 
                              Uniform f32_4* %198 = OpAccessChain %31 %151 %151 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_3 %201 = OpLoad %135 
                                       f32_3 %202 = OpVectorShuffle %201 %201 2 2 2 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_3 %204 = OpLoad %183 
                                       f32_3 %205 = OpFAdd %203 %204 
                                                      OpStore %183 %205 
                                       f32_3 %206 = OpLoad %183 
                              Uniform f32_4* %207 = OpAccessChain %31 %151 %161 
                                       f32_4 %208 = OpLoad %207 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %210 = OpFAdd %206 %209 
                                                      OpStore %183 %210 
                                        bool %213 = OpLoad %166 
                                                      OpSelectionMerge %215 None 
                                                      OpBranchConditional %213 %214 %217 
                                             %214 = OpLabel 
                                       f32_3 %216 = OpLoad %183 
                                                      OpStore %212 %216 
                                                      OpBranch %215 
                                             %217 = OpLabel 
                                       f32_3 %218 = OpLoad %135 
                                                      OpStore %212 %218 
                                                      OpBranch %215 
                                             %215 = OpLabel 
                                       f32_3 %219 = OpLoad %212 
                                                      OpStore %183 %219 
                                       f32_3 %220 = OpLoad %183 
                              Uniform f32_3* %223 = OpAccessChain %31 %221 
                                       f32_3 %224 = OpLoad %223 
                                       f32_3 %225 = OpFNegate %224 
                                       f32_3 %226 = OpFAdd %220 %225 
                                                      OpStore %183 %226 
                                       f32_3 %228 = OpLoad %183 
                              Uniform f32_3* %229 = OpAccessChain %31 %161 
                                       f32_3 %230 = OpLoad %229 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %227 
                                       f32_4 %233 = OpVectorShuffle %232 %231 0 4 5 6 
                                                      OpStore %227 %233 
                                Private f32* %235 = OpAccessChain %227 %47 
                                         f32 %236 = OpLoad %235 
                                         f32 %238 = OpFMul %236 %237 
                                         f32 %239 = OpFAdd %238 %92 
                                                      OpStore %234 %239 
                                Uniform f32* %240 = OpAccessChain %31 %126 %56 
                                         f32 %241 = OpLoad %240 
                                         f32 %243 = OpFMul %241 %242 
                                         f32 %244 = OpFAdd %243 %92 
                                Private f32* %245 = OpAccessChain %183 %51 
                                                      OpStore %245 %244 
                                         f32 %246 = OpLoad %234 
                                Private f32* %247 = OpAccessChain %183 %51 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpExtInst %1 40 %246 %248 
                                Private f32* %250 = OpAccessChain %227 %51 
                                                      OpStore %250 %249 
                  read_only Texture3DSampled %255 = OpLoad %254 
                                       f32_4 %256 = OpLoad %227 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 2 3 
                                       f32_4 %258 = OpImageSampleImplicitLod %255 %257 
                                                      OpStore %227 %258 
                                       f32_4 %259 = OpLoad %227 
                                                      OpStore %111 %259 
                                                      OpBranch %179 
                                             %260 = OpLabel 
                                Private f32* %261 = OpAccessChain %111 %51 
                                                      OpStore %261 %169 
                                Private f32* %262 = OpAccessChain %111 %47 
                                                      OpStore %262 %169 
                                Private f32* %263 = OpAccessChain %111 %56 
                                                      OpStore %263 %169 
                                Private f32* %264 = OpAccessChain %111 %112 
                                                      OpStore %264 %169 
                                                      OpBranch %179 
                                             %179 = OpLabel 
                                       f32_4 %266 = OpLoad %111 
                              Uniform f32_4* %267 = OpAccessChain %31 %125 
                                       f32_4 %268 = OpLoad %267 
                                         f32 %269 = OpDot %266 %268 
                                Private f32* %270 = OpAccessChain %265 %51 
                                                      OpStore %270 %269 
                                Private f32* %271 = OpAccessChain %265 %51 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 43 %272 %94 %169 
                                Private f32* %274 = OpAccessChain %265 %51 
                                                      OpStore %274 %273 
                                       f32_3 %275 = OpLoad %22 
                                       f32_3 %276 = OpLoad %22 
                                         f32 %277 = OpDot %275 %276 
                                                      OpStore %234 %277 
                  read_only Texture2DSampled %279 = OpLoad %278 
                                         f32 %280 = OpLoad %234 
                                       f32_2 %281 = OpCompositeConstruct %280 %280 
                                       f32_4 %282 = OpImageSampleImplicitLod %279 %281 
                                         f32 %283 = OpCompositeExtract %282 3 
                                                      OpStore %234 %283 
                read_only TextureCubeSampled %288 = OpLoad %287 
                                       f32_3 %289 = OpLoad %22 
                                       f32_4 %290 = OpImageSampleImplicitLod %288 %289 
                                         f32 %291 = OpCompositeExtract %290 3 
                                Private f32* %292 = OpAccessChain %22 %51 
                                                      OpStore %292 %291 
                                Private f32* %293 = OpAccessChain %22 %51 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpLoad %234 
                                         f32 %296 = OpFMul %294 %295 
                                Private f32* %297 = OpAccessChain %22 %51 
                                                      OpStore %297 %296 
                                Private f32* %298 = OpAccessChain %265 %51 
                                         f32 %299 = OpLoad %298 
                                Private f32* %300 = OpAccessChain %22 %51 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFMul %299 %301 
                                Private f32* %303 = OpAccessChain %22 %51 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %103 
                              Uniform f32_4* %306 = OpAccessChain %31 %305 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFMul %304 %308 
                                                      OpStore %265 %309 
                                       f32_3 %312 = OpLoad %22 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 0 0 
                                       f32_3 %314 = OpLoad %265 
                                       f32_3 %315 = OpFMul %313 %314 
                                       f32_4 %316 = OpLoad %311 
                                       f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                                      OpStore %311 %317 
                                Private f32* %318 = OpAccessChain %9 %112 
                                         f32 %319 = OpLoad %318 
                                 Output f32* %321 = OpAccessChain %311 %112 
                                                      OpStore %321 %319 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat1.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _EmissiveColor;
uniform 	float _EmissiveThresholdSensitivity;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ParallaxTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat16_4;
float u_xlat7;
bool u_xlatb7;
float u_xlat10;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz + (-_EmissiveColor.xyz);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y + u_xlat1.x;
    u_xlat1.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb1 = u_xlat1.x<_EmissiveThresholdSensitivity;
    u_xlat10_2 = texture(_ParallaxTex, vs_TEXCOORD4.xy);
    u_xlat1.x = u_xlatb1 ? 0.75 : float(0.0);
    u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_4.xyz + u_xlat10_0.xyz;
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb7 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb7)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7 = u_xlat2.y * 0.25 + 0.75;
        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat7);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat7 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xy);
    u_xlat1.x = u_xlat7 * u_xlat10_2.w;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 218
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %152 %161 %162 %174 %204 %210 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate %174 Location 174 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %210 Location 210 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_2 %140 = OpConstantComposite %139 %139 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %146 %146 
                                             %151 = OpTypePointer Output %95 
                               Output f32_2* %152 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_2 %156 = OpConstantComposite %139 %155 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_2 %159 = OpConstantComposite %158 %139 
                               Output f32_2* %161 = OpVariable Output 
                                Input f32_4* %162 = OpVariable Input 
                                             %173 = OpTypePointer Input %50 
                                Input f32_3* %174 = OpVariable Input 
                                         u32 %180 = OpConstant 0 
                                             %181 = OpTypePointer Private %6 
                                         u32 %194 = OpConstant 2 
                                Private f32* %196 = OpVariable Private 
                               Output f32_3* %204 = OpVariable Output 
                               Output f32_4* %210 = OpVariable Output 
                                       f32_4 %211 = OpConstantComposite %158 %158 %158 %158 
                                             %212 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %96 = OpLoad %44 
                                        f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                               Uniform f32_4* %98 = OpAccessChain %21 %36 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %97 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
                                                      OpStore %9 %103 
                              Uniform f32_4* %104 = OpAccessChain %21 %36 %23 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %107 = OpLoad %44 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 0 
                                       f32_2 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %9 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %36 %36 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpLoad %44 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 2 
                                       f32_2 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %9 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %9 %125 
                              Uniform f32_4* %126 = OpAccessChain %21 %36 %46 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                                       f32_4 %129 = OpLoad %44 
                                       f32_2 %130 = OpVectorShuffle %129 %129 3 3 
                                       f32_2 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_2 %134 = OpFAdd %131 %133 
                                       f32_4 %135 = OpLoad %9 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 2 3 
                                                      OpStore %9 %136 
                                       f32_4 %137 = OpLoad %9 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %9 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %9 %143 
                                       f32_4 %144 = OpLoad %9 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %9 %150 
                                       f32_4 %153 = OpLoad %9 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %157 = OpFMul %154 %156 
                                       f32_2 %160 = OpFAdd %157 %159 
                                                      OpStore %152 %160 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                              Uniform f32_4* %165 = OpAccessChain %21 %46 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_2 %168 = OpFMul %164 %167 
                              Uniform f32_4* %169 = OpAccessChain %21 %46 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %168 %171 
                                                      OpStore %161 %172 
                                       f32_3 %175 = OpLoad %174 
                              Uniform f32_4* %176 = OpAccessChain %21 %24 %23 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %175 %178 
                                Private f32* %182 = OpAccessChain %9 %180 
                                                      OpStore %182 %179 
                                       f32_3 %183 = OpLoad %174 
                              Uniform f32_4* %184 = OpAccessChain %21 %24 %24 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                         f32 %187 = OpDot %183 %186 
                                Private f32* %188 = OpAccessChain %9 %81 
                                                      OpStore %188 %187 
                                       f32_3 %189 = OpLoad %174 
                              Uniform f32_4* %190 = OpAccessChain %21 %24 %36 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %189 %192 
                                Private f32* %195 = OpAccessChain %9 %194 
                                                      OpStore %195 %193 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %198 %200 
                                                      OpStore %196 %201 
                                         f32 %202 = OpLoad %196 
                                         f32 %203 = OpExtInst %1 32 %202 
                                                      OpStore %196 %203 
                                         f32 %205 = OpLoad %196 
                                       f32_3 %206 = OpCompositeConstruct %205 %205 %205 
                                       f32_4 %207 = OpLoad %9 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %206 %208 
                                                      OpStore %204 %209 
                                                      OpStore %210 %211 
                                 Output f32* %213 = OpAccessChain %85 %23 %81 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFNegate %214 
                                 Output f32* %216 = OpAccessChain %85 %23 %81 
                                                      OpStore %216 %215 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 317
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %83 %135 %305 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpDecorate %28 ArrayStride 28 
                                                      OpMemberDecorate %29 0 RelaxedPrecision 
                                                      OpMemberDecorate %29 0 Offset 29 
                                                      OpMemberDecorate %29 1 Offset 29 
                                                      OpMemberDecorate %29 2 Offset 29 
                                                      OpMemberDecorate %29 3 Offset 29 
                                                      OpMemberDecorate %29 4 Offset 29 
                                                      OpMemberDecorate %29 5 RelaxedPrecision 
                                                      OpMemberDecorate %29 5 Offset 29 
                                                      OpMemberDecorate %29 6 Offset 29 
                                                      OpMemberDecorate %29 7 Offset 29 
                                                      OpMemberDecorate %29 8 Offset 29 
                                                      OpMemberDecorate %29 9 RelaxedPrecision 
                                                      OpMemberDecorate %29 9 Offset 29 
                                                      OpDecorate %29 Block 
                                                      OpDecorate %31 DescriptorSet 31 
                                                      OpDecorate %31 Binding 31 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %81 DescriptorSet 81 
                                                      OpDecorate %81 Binding 81 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 Location 83 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %188 SpecId 188 
                                                      OpDecorate %264 DescriptorSet 264 
                                                      OpDecorate %264 Binding 264 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %285 DescriptorSet 285 
                                                      OpDecorate %285 Binding 285 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %305 Location 305 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeArray %7 %26 
                                              %29 = OpTypeStruct %7 %7 %27 %20 %20 %7 %28 %7 %6 %6 
                                              %30 = OpTypePointer Uniform %29 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32; f32;}* %31 = OpVariable Uniform 
                                              %32 = OpTypeInt 32 1 
                                          i32 %33 = OpConstant 7 
                                              %34 = OpTypePointer Uniform %7 
                                          u32 %47 = OpConstant 1 
                                              %48 = OpTypePointer Private %6 
                                          u32 %51 = OpConstant 0 
                                          u32 %56 = OpConstant 2 
                                              %70 = OpTypeBool 
                                              %71 = OpTypePointer Private %70 
                                Private bool* %72 = OpVariable Private 
                                          i32 %75 = OpConstant 8 
                                              %76 = OpTypePointer Uniform %6 
                               Private f32_3* %80 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %81 = OpVariable UniformConstant 
                                 Input f32_2* %83 = OpVariable Input 
                                              %87 = OpTypePointer Function %6 
                                          f32 %92 = OpConstant 3.674022E-40 
                                          f32 %94 = OpConstant 3.674022E-40 
                               Private f32_3* %97 = OpVariable Private 
                              Private f32_3* %103 = OpVariable Private 
                              Private f32_4* %111 = OpVariable Private 
                                         u32 %112 = OpConstant 3 
                                         i32 %115 = OpConstant 9 
                                         i32 %125 = OpConstant 0 
                                         i32 %126 = OpConstant 1 
                                         i32 %128 = OpConstant -1 
                                             %134 = OpTypePointer Input %20 
                                Input f32_3* %135 = OpVariable Input 
                                         i32 %138 = OpConstant 6 
                                         i32 %156 = OpConstant 2 
                                         i32 %170 = OpConstant 3 
                               Private bool* %177 = OpVariable Private 
                                         f32 %180 = OpConstant 3.674022E-40 
                                        bool %182 = OpConstantFalse 
                                        bool %188 = OpSpecConstantFalse 
                              Private f32_3* %194 = OpVariable Private 
                                             %222 = OpTypePointer Function %20 
                                         i32 %232 = OpConstant 4 
                                             %233 = OpTypePointer Uniform %20 
                              Private f32_4* %238 = OpVariable Private 
                                Private f32* %245 = OpVariable Private 
                                         f32 %248 = OpConstant 3.674022E-40 
                                Private f32* %251 = OpVariable Private 
                                         f32 %254 = OpConstant 3.674022E-40 
                                             %261 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %262 = OpTypeSampledImage %261 
                                             %263 = OpTypePointer UniformConstant %262 
 UniformConstant read_only Texture3DSampled* %264 = OpVariable UniformConstant 
                              Private f32_3* %275 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %285 = OpVariable UniformConstant 
                                         i32 %299 = OpConstant 5 
                                             %304 = OpTypePointer Output %7 
                               Output f32_4* %305 = OpVariable Output 
                                             %314 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %88 = OpVariable Function 
                             Function f32_3* %223 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %23 = OpLoad %9 
                                        f32_3 %24 = OpVectorShuffle %23 %23 0 1 2 
                               Uniform f32_4* %35 = OpAccessChain %31 %33 
                                        f32_4 %36 = OpLoad %35 
                                        f32_3 %37 = OpVectorShuffle %36 %36 0 1 2 
                                        f32_3 %38 = OpFNegate %37 
                                        f32_3 %39 = OpFAdd %24 %38 
                                                      OpStore %22 %39 
                                        f32_3 %40 = OpLoad %22 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                                        f32_3 %42 = OpLoad %22 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_2 %44 = OpFMul %41 %43 
                                        f32_3 %45 = OpLoad %22 
                                        f32_3 %46 = OpVectorShuffle %45 %44 3 4 2 
                                                      OpStore %22 %46 
                                 Private f32* %49 = OpAccessChain %22 %47 
                                          f32 %50 = OpLoad %49 
                                 Private f32* %52 = OpAccessChain %22 %51 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFAdd %50 %53 
                                 Private f32* %55 = OpAccessChain %22 %51 
                                                      OpStore %55 %54 
                                 Private f32* %57 = OpAccessChain %22 %56 
                                          f32 %58 = OpLoad %57 
                                 Private f32* %59 = OpAccessChain %22 %56 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %58 %60 
                                 Private f32* %62 = OpAccessChain %22 %51 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %22 %51 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %22 %51 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpExtInst %1 31 %67 
                                 Private f32* %69 = OpAccessChain %22 %51 
                                                      OpStore %69 %68 
                                 Private f32* %73 = OpAccessChain %22 %51 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %77 = OpAccessChain %31 %75 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %74 %78 
                                                      OpStore %72 %79 
                   read_only Texture2DSampled %82 = OpLoad %81 
                                        f32_2 %84 = OpLoad %83 
                                        f32_4 %85 = OpImageSampleImplicitLod %82 %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                                      OpStore %80 %86 
                                         bool %89 = OpLoad %72 
                                                      OpSelectionMerge %91 None 
                                                      OpBranchConditional %89 %90 %93 
                                              %90 = OpLabel 
                                                      OpStore %88 %92 
                                                      OpBranch %91 
                                              %93 = OpLabel 
                                                      OpStore %88 %94 
                                                      OpBranch %91 
                                              %91 = OpLabel 
                                          f32 %95 = OpLoad %88 
                                 Private f32* %96 = OpAccessChain %22 %51 
                                                      OpStore %96 %95 
                                        f32_4 %98 = OpLoad %9 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFNegate %99 
                                       f32_3 %101 = OpLoad %80 
                                       f32_3 %102 = OpFAdd %100 %101 
                                                      OpStore %97 %102 
                                       f32_3 %104 = OpLoad %22 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 0 0 
                                       f32_3 %106 = OpLoad %97 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                       f32_3 %110 = OpFAdd %107 %109 
                                                      OpStore %103 %110 
                                Private f32* %113 = OpAccessChain %9 %112 
                                         f32 %114 = OpLoad %113 
                                Uniform f32* %116 = OpAccessChain %31 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                         f32 %119 = OpFAdd %114 %118 
                                Private f32* %120 = OpAccessChain %111 %51 
                                                      OpStore %120 %119 
                                Private f32* %121 = OpAccessChain %111 %51 
                                         f32 %122 = OpLoad %121 
                                        bool %123 = OpFOrdLessThan %122 %94 
                                                      OpStore %72 %123 
                                        bool %124 = OpLoad %72 
                                         i32 %127 = OpSelect %124 %126 %125 
                                         i32 %129 = OpIMul %127 %128 
                                        bool %130 = OpINotEqual %129 %125 
                                                      OpSelectionMerge %132 None 
                                                      OpBranchConditional %130 %131 %132 
                                             %131 = OpLabel 
                                                      OpKill
                                             %132 = OpLabel 
                                       f32_3 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %31 %138 %126 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                       f32_3 %143 = OpLoad %22 
                                       f32_3 %144 = OpVectorShuffle %143 %142 3 4 2 
                                                      OpStore %22 %144 
                              Uniform f32_4* %145 = OpAccessChain %31 %138 %125 
                                       f32_4 %146 = OpLoad %145 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_3 %148 = OpLoad %135 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 0 
                                       f32_2 %150 = OpFMul %147 %149 
                                       f32_3 %151 = OpLoad %22 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFAdd %150 %152 
                                       f32_3 %154 = OpLoad %22 
                                       f32_3 %155 = OpVectorShuffle %154 %153 3 4 2 
                                                      OpStore %22 %155 
                              Uniform f32_4* %157 = OpAccessChain %31 %138 %156 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                                       f32_3 %160 = OpLoad %135 
                                       f32_2 %161 = OpVectorShuffle %160 %160 2 2 
                                       f32_2 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %22 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                                       f32_2 %165 = OpFAdd %162 %164 
                                       f32_3 %166 = OpLoad %22 
                                       f32_3 %167 = OpVectorShuffle %166 %165 3 4 2 
                                                      OpStore %22 %167 
                                       f32_3 %168 = OpLoad %22 
                                       f32_2 %169 = OpVectorShuffle %168 %168 0 1 
                              Uniform f32_4* %171 = OpAccessChain %31 %138 %170 
                                       f32_4 %172 = OpLoad %171 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                                       f32_2 %174 = OpFAdd %169 %173 
                                       f32_3 %175 = OpLoad %22 
                                       f32_3 %176 = OpVectorShuffle %175 %174 3 4 2 
                                                      OpStore %22 %176 
                                Uniform f32* %178 = OpAccessChain %31 %126 %51 
                                         f32 %179 = OpLoad %178 
                                        bool %181 = OpFOrdEqual %179 %180 
                                                      OpStore %177 %181 
                                                      OpSelectionMerge %184 None 
                                                      OpBranchConditional %182 %183 %184 
                                             %183 = OpLabel 
                                        bool %185 = OpLoad %177 
                                                      OpSelectionMerge %187 None 
                                                      OpBranchConditional %185 %186 %187 
                                             %186 = OpLabel 
                                                      OpBranch %187 
                                             %187 = OpLabel 
                                                      OpBranch %184 
                                             %184 = OpLabel 
                                                      OpSelectionMerge %190 None 
                                                      OpBranchConditional %188 %189 %270 
                                             %189 = OpLabel 
                                Uniform f32* %191 = OpAccessChain %31 %126 %47 
                                         f32 %192 = OpLoad %191 
                                        bool %193 = OpFOrdEqual %192 %180 
                                                      OpStore %177 %193 
                                       f32_3 %195 = OpLoad %135 
                                       f32_3 %196 = OpVectorShuffle %195 %195 1 1 1 
                              Uniform f32_4* %197 = OpAccessChain %31 %156 %126 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpFMul %196 %199 
                                                      OpStore %194 %200 
                              Uniform f32_4* %201 = OpAccessChain %31 %156 %125 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                       f32_3 %204 = OpLoad %135 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 0 0 
                                       f32_3 %206 = OpFMul %203 %205 
                                       f32_3 %207 = OpLoad %194 
                                       f32_3 %208 = OpFAdd %206 %207 
                                                      OpStore %194 %208 
                              Uniform f32_4* %209 = OpAccessChain %31 %156 %156 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpLoad %135 
                                       f32_3 %213 = OpVectorShuffle %212 %212 2 2 2 
                                       f32_3 %214 = OpFMul %211 %213 
                                       f32_3 %215 = OpLoad %194 
                                       f32_3 %216 = OpFAdd %214 %215 
                                                      OpStore %194 %216 
                                       f32_3 %217 = OpLoad %194 
                              Uniform f32_4* %218 = OpAccessChain %31 %156 %170 
                                       f32_4 %219 = OpLoad %218 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpFAdd %217 %220 
                                                      OpStore %194 %221 
                                        bool %224 = OpLoad %177 
                                                      OpSelectionMerge %226 None 
                                                      OpBranchConditional %224 %225 %228 
                                             %225 = OpLabel 
                                       f32_3 %227 = OpLoad %194 
                                                      OpStore %223 %227 
                                                      OpBranch %226 
                                             %228 = OpLabel 
                                       f32_3 %229 = OpLoad %135 
                                                      OpStore %223 %229 
                                                      OpBranch %226 
                                             %226 = OpLabel 
                                       f32_3 %230 = OpLoad %223 
                                                      OpStore %194 %230 
                                       f32_3 %231 = OpLoad %194 
                              Uniform f32_3* %234 = OpAccessChain %31 %232 
                                       f32_3 %235 = OpLoad %234 
                                       f32_3 %236 = OpFNegate %235 
                                       f32_3 %237 = OpFAdd %231 %236 
                                                      OpStore %194 %237 
                                       f32_3 %239 = OpLoad %194 
                              Uniform f32_3* %240 = OpAccessChain %31 %170 
                                       f32_3 %241 = OpLoad %240 
                                       f32_3 %242 = OpFMul %239 %241 
                                       f32_4 %243 = OpLoad %238 
                                       f32_4 %244 = OpVectorShuffle %243 %242 0 4 5 6 
                                                      OpStore %238 %244 
                                Private f32* %246 = OpAccessChain %238 %47 
                                         f32 %247 = OpLoad %246 
                                         f32 %249 = OpFMul %247 %248 
                                         f32 %250 = OpFAdd %249 %92 
                                                      OpStore %245 %250 
                                Uniform f32* %252 = OpAccessChain %31 %126 %56 
                                         f32 %253 = OpLoad %252 
                                         f32 %255 = OpFMul %253 %254 
                                         f32 %256 = OpFAdd %255 %92 
                                                      OpStore %251 %256 
                                         f32 %257 = OpLoad %251 
                                         f32 %258 = OpLoad %245 
                                         f32 %259 = OpExtInst %1 40 %257 %258 
                                Private f32* %260 = OpAccessChain %238 %51 
                                                      OpStore %260 %259 
                  read_only Texture3DSampled %265 = OpLoad %264 
                                       f32_4 %266 = OpLoad %238 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 2 3 
                                       f32_4 %268 = OpImageSampleImplicitLod %265 %267 
                                                      OpStore %238 %268 
                                       f32_4 %269 = OpLoad %238 
                                                      OpStore %111 %269 
                                                      OpBranch %190 
                                             %270 = OpLabel 
                                Private f32* %271 = OpAccessChain %111 %51 
                                                      OpStore %271 %180 
                                Private f32* %272 = OpAccessChain %111 %47 
                                                      OpStore %272 %180 
                                Private f32* %273 = OpAccessChain %111 %56 
                                                      OpStore %273 %180 
                                Private f32* %274 = OpAccessChain %111 %112 
                                                      OpStore %274 %180 
                                                      OpBranch %190 
                                             %190 = OpLabel 
                                       f32_4 %276 = OpLoad %111 
                              Uniform f32_4* %277 = OpAccessChain %31 %125 
                                       f32_4 %278 = OpLoad %277 
                                         f32 %279 = OpDot %276 %278 
                                Private f32* %280 = OpAccessChain %275 %51 
                                                      OpStore %280 %279 
                                Private f32* %281 = OpAccessChain %275 %51 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpExtInst %1 43 %282 %94 %180 
                                Private f32* %284 = OpAccessChain %275 %51 
                                                      OpStore %284 %283 
                  read_only Texture2DSampled %286 = OpLoad %285 
                                       f32_3 %287 = OpLoad %22 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                       f32_4 %289 = OpImageSampleImplicitLod %286 %288 
                                         f32 %290 = OpCompositeExtract %289 3 
                                Private f32* %291 = OpAccessChain %22 %51 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %275 %51 
                                         f32 %293 = OpLoad %292 
                                Private f32* %294 = OpAccessChain %22 %51 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFMul %293 %295 
                                Private f32* %297 = OpAccessChain %22 %51 
                                                      OpStore %297 %296 
                                       f32_3 %298 = OpLoad %103 
                              Uniform f32_4* %300 = OpAccessChain %31 %299 
                                       f32_4 %301 = OpLoad %300 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_3 %303 = OpFMul %298 %302 
                                                      OpStore %275 %303 
                                       f32_3 %306 = OpLoad %22 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 0 0 
                                       f32_3 %308 = OpLoad %275 
                                       f32_3 %309 = OpFMul %307 %308 
                                       f32_4 %310 = OpLoad %305 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %305 %311 
                                Private f32* %312 = OpAccessChain %9 %112 
                                         f32 %313 = OpLoad %312 
                                 Output f32* %315 = OpAccessChain %305 %112 
                                                      OpStore %315 %313 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "META"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 172141
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "EDITOR_VISUALIZATION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD2;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat0.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat0.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _EmissiveColor;
uniform 	float _EmissiveThresholdSensitivity;
uniform 	int unity_VisualizationMode;
uniform 	int _CheckAlbedo;
uniform 	vec4 _AlbedoCompareColor;
uniform 	float _AlbedoMinLuminance;
uniform 	float _AlbedoMaxLuminance;
uniform 	float _AlbedoHueTolerance;
uniform 	float _AlbedoSaturationTolerance;
uniform 	vec4 unity_MaterialValidateLowColor;
uniform 	vec4 unity_MaterialValidateHighColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ParallaxTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
bvec3 u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec2 u_xlat6;
bool u_xlatb6;
float u_xlat7;
bvec3 u_xlatb7;
float u_xlat8;
vec2 u_xlat9;
vec2 u_xlat10;
vec2 u_xlat12;
bool u_xlatb12;
bool u_xlatb13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat18 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb18 = u_xlat18<0.0;
    if((int(u_xlatb18) * int(0xffffffffu))!=0){discard;}
    if(unity_VisualizationMode == 0) {
        u_xlat1.xyz = u_xlat10_0.xyz + (-_EmissiveColor.xyz);
        u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
        u_xlat18 = u_xlat1.y + u_xlat1.x;
        u_xlat18 = u_xlat1.z * u_xlat1.z + u_xlat18;
        u_xlat18 = sqrt(u_xlat18);
        u_xlatb18 = u_xlat18<_EmissiveThresholdSensitivity;
        u_xlat10_1 = texture(_ParallaxTex, vs_TEXCOORD2.xy);
        u_xlat18 = u_xlatb18 ? 0.75 : float(0.0);
        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_1.xyz;
        u_xlat0.xyz = vec3(u_xlat18) * u_xlat16_1.xyz + u_xlat10_0.xyz;
        u_xlatb1.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
        u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
        u_xlatb3.xyz = lessThan(u_xlat0.xyzx, vec4(1.0, 1.0, 1.0, 0.0)).xyz;
        u_xlat4.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
        u_xlat4.xyz = u_xlat4.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
        u_xlat4.xyz = log2(u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
        u_xlat4.xyz = exp2(u_xlat4.xyz);
        u_xlat5.xyz = log2(u_xlat0.xyz);
        u_xlat5.xyz = u_xlat5.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
        u_xlat5.xyz = exp2(u_xlat5.xyz);
        u_xlat3.x = (u_xlatb3.x) ? u_xlat4.x : u_xlat5.x;
        u_xlat3.y = (u_xlatb3.y) ? u_xlat4.y : u_xlat5.y;
        u_xlat3.z = (u_xlatb3.z) ? u_xlat4.z : u_xlat5.z;
        u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat2.x = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
        u_xlat18 = dot(u_xlat1.xyz, vec3(0.333299994, 0.333299994, 0.333299994));
        u_xlat18 = (_CheckAlbedo != 0) ? u_xlat2.x : u_xlat18;
        if(_CheckAlbedo == 0) {
            u_xlatb1.x = u_xlat18<0.0120000001;
            u_xlatb7.x = 0.899999976<u_xlat18;
            u_xlat2.y = 0.0;
            u_xlat3 = (u_xlatb7.x) ? unity_MaterialValidateHighColor : u_xlat2.xxxy;
            SV_Target0 = (u_xlatb1.x) ? unity_MaterialValidateLowColor : u_xlat3;
        } else {
            u_xlatb1.x = u_xlat18<_AlbedoMinLuminance;
            if(u_xlatb1.x){
                SV_Target0 = unity_MaterialValidateLowColor;
            } else {
                u_xlatb18 = _AlbedoMaxLuminance<u_xlat18;
                if(u_xlatb18){
                    SV_Target0 = unity_MaterialValidateHighColor;
                } else {
                    u_xlatb1.xy = lessThan(u_xlat0.yxyy, u_xlat0.zzzz).xy;
                    u_xlatb18 = u_xlatb1.y && u_xlatb1.x;
                    if(u_xlatb18){
                        u_xlatb18 = u_xlat0.z!=0.0;
                        u_xlatb1.x = u_xlat0.y<u_xlat0.x;
                        u_xlat1.x = (u_xlatb1.x) ? u_xlat0.y : u_xlat0.x;
                        u_xlat1.x = u_xlat0.z + (-u_xlat1.x);
                        u_xlatb13 = u_xlat1.x!=0.0;
                        u_xlat9.y = u_xlat1.x / u_xlat0.z;
                        u_xlat19 = (-u_xlat0.y) + u_xlat0.x;
                        u_xlat1.x = u_xlat19 / u_xlat1.x;
                        u_xlat9.x = u_xlat1.x + 4.0;
                        u_xlat10.x = u_xlat19 + 4.0;
                        u_xlat10.y = 0.0;
                        u_xlat3.yz = (bool(u_xlatb13)) ? u_xlat9.xy : u_xlat10.xy;
                        u_xlat1.x = u_xlat3.y * 0.166666672;
                        u_xlatb13 = u_xlat3.y<36.0;
                        u_xlat19 = u_xlat3.y * 0.166666672 + 1.0;
                        u_xlat3.x = (u_xlatb13) ? u_xlat19 : u_xlat1.x;
                        u_xlat1.xz = mix(vec2(0.0, 0.0), u_xlat3.xz, vec2(bvec2(u_xlatb18)));
                    } else {
                        u_xlatb18 = u_xlat0.x<u_xlat0.y;
                        if(u_xlatb18){
                            u_xlatb18 = u_xlat0.y!=0.0;
                            u_xlat7 = (u_xlatb1.y) ? u_xlat0.x : u_xlat0.z;
                            u_xlat7 = u_xlat0.y + (-u_xlat7);
                            u_xlatb19 = u_xlat7!=0.0;
                            u_xlat9.y = u_xlat7 / u_xlat0.y;
                            u_xlat8 = (-u_xlat0.x) + u_xlat0.z;
                            u_xlat7 = u_xlat8 / u_xlat7;
                            u_xlat9.x = u_xlat7 + 2.0;
                            u_xlat10.x = u_xlat8 + 2.0;
                            u_xlat10.y = 0.0;
                            u_xlat3.yz = (bool(u_xlatb19)) ? u_xlat9.xy : u_xlat10.xy;
                            u_xlat7 = u_xlat3.y * 0.166666672;
                            u_xlatb19 = u_xlat3.y<36.0;
                            u_xlat8 = u_xlat3.y * 0.166666672 + 1.0;
                            u_xlat3.x = (u_xlatb19) ? u_xlat8 : u_xlat7;
                            u_xlat1.xz = mix(vec2(0.0, 0.0), u_xlat3.xz, vec2(bvec2(u_xlatb18)));
                        } else {
                            u_xlatb18 = u_xlat0.x!=0.0;
                            u_xlatb7.x = u_xlat0.z<u_xlat0.y;
                            u_xlat7 = (u_xlatb7.x) ? u_xlat0.z : u_xlat0.y;
                            u_xlat7 = u_xlat0.x + (-u_xlat7);
                            u_xlatb19 = u_xlat7!=0.0;
                            u_xlat9.y = u_xlat7 / u_xlat0.x;
                            u_xlat6.x = (-u_xlat0.z) + u_xlat0.y;
                            u_xlat9.x = u_xlat6.x / u_xlat7;
                            u_xlat6.y = 0.0;
                            u_xlat0.yz = (bool(u_xlatb19)) ? u_xlat9.xy : u_xlat6.xy;
                            u_xlat7 = u_xlat0.y * 0.166666672;
                            u_xlatb19 = u_xlat0.y<36.0;
                            u_xlat6.x = u_xlat0.y * 0.166666672 + 1.0;
                            u_xlat0.x = (u_xlatb19) ? u_xlat6.x : u_xlat7;
                            u_xlat1.xz = mix(vec2(0.0, 0.0), u_xlat0.xz, vec2(bvec2(u_xlatb18)));
                        //ENDIF
                        }
                    //ENDIF
                    }
                    u_xlatb0.xy = lessThan(_AlbedoCompareColor.yxyy, _AlbedoCompareColor.zzzz).xy;
                    u_xlatb0.x = u_xlatb0.y && u_xlatb0.x;
                    if(u_xlatb0.x){
                        u_xlatb0.x = _AlbedoCompareColor.z!=0.0;
                        u_xlat6.x = min(_AlbedoCompareColor.y, _AlbedoCompareColor.x);
                        u_xlat6.x = (-u_xlat6.x) + _AlbedoCompareColor.z;
                        u_xlatb12 = u_xlat6.x!=0.0;
                        u_xlat9.y = u_xlat6.x / _AlbedoCompareColor.z;
                        u_xlat18 = (-_AlbedoCompareColor.y) + _AlbedoCompareColor.x;
                        u_xlat6.x = u_xlat18 / u_xlat6.x;
                        u_xlat9.x = u_xlat6.x + 4.0;
                        u_xlat10.x = u_xlat18 + 4.0;
                        u_xlat10.y = 0.0;
                        u_xlat3.yz = (bool(u_xlatb12)) ? u_xlat9.xy : u_xlat10.xy;
                        u_xlat6.x = u_xlat3.y * 0.166666672;
                        u_xlatb12 = u_xlat3.y<36.0;
                        u_xlat18 = u_xlat3.y * 0.166666672 + 1.0;
                        u_xlat3.x = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
                        u_xlat0.xy = mix(vec2(0.0, 0.0), u_xlat3.xz, vec2(u_xlatb0.xx));
                    } else {
                        u_xlatb12 = _AlbedoCompareColor.x<_AlbedoCompareColor.y;
                        if(u_xlatb12){
                            u_xlatb12 = _AlbedoCompareColor.y!=0.0;
                            u_xlat18 = min(_AlbedoCompareColor.x, _AlbedoCompareColor.z);
                            u_xlat18 = (-u_xlat18) + _AlbedoCompareColor.y;
                            u_xlatb7.x = u_xlat18!=0.0;
                            u_xlat9.y = u_xlat18 / _AlbedoCompareColor.y;
                            u_xlat19 = (-_AlbedoCompareColor.x) + _AlbedoCompareColor.z;
                            u_xlat18 = u_xlat19 / u_xlat18;
                            u_xlat9.x = u_xlat18 + 2.0;
                            u_xlat10.x = u_xlat19 + 2.0;
                            u_xlat10.y = 0.0;
                            u_xlat3.yz = (u_xlatb7.x) ? u_xlat9.xy : u_xlat10.xy;
                            u_xlat18 = u_xlat3.y * 0.166666672;
                            u_xlatb7.x = u_xlat3.y<36.0;
                            u_xlat19 = u_xlat3.y * 0.166666672 + 1.0;
                            u_xlat3.x = (u_xlatb7.x) ? u_xlat19 : u_xlat18;
                            u_xlat0.xy = mix(vec2(0.0, 0.0), u_xlat3.xz, vec2(bvec2(u_xlatb12)));
                        } else {
                            u_xlatb12 = _AlbedoCompareColor.x!=0.0;
                            u_xlat18 = min(_AlbedoCompareColor.z, _AlbedoCompareColor.y);
                            u_xlat18 = (-u_xlat18) + _AlbedoCompareColor.x;
                            u_xlatb7.x = u_xlat18!=0.0;
                            u_xlat9.y = u_xlat18 / _AlbedoCompareColor.x;
                            u_xlat10.x = (-_AlbedoCompareColor.z) + _AlbedoCompareColor.y;
                            u_xlat9.x = u_xlat10.x / u_xlat18;
                            u_xlat10.y = 0.0;
                            u_xlat3.yz = (u_xlatb7.x) ? u_xlat9.xy : u_xlat10.xy;
                            u_xlat18 = u_xlat3.y * 0.166666672;
                            u_xlatb7.x = u_xlat3.y<36.0;
                            u_xlat19 = u_xlat3.y * 0.166666672 + 1.0;
                            u_xlat3.x = (u_xlatb7.x) ? u_xlat19 : u_xlat18;
                            u_xlat0.xy = mix(vec2(0.0, 0.0), u_xlat3.xz, vec2(bvec2(u_xlatb12)));
                        //ENDIF
                        }
                    //ENDIF
                    }
                    u_xlat12.xy = u_xlat0.yx + (-vec2(_AlbedoSaturationTolerance, _AlbedoHueTolerance));
                    u_xlatb7.xz = lessThan(u_xlat1.zzxx, u_xlat12.xxyy).xz;
                    u_xlat12.x = u_xlat12.y + 1.0;
                    u_xlatb12 = u_xlat1.x<u_xlat12.x;
                    u_xlatb12 = u_xlatb12 && u_xlatb7.z;
                    u_xlatb12 = u_xlatb12 || u_xlatb7.x;
                    u_xlat0.xy = u_xlat0.yx + vec2(_AlbedoSaturationTolerance, _AlbedoHueTolerance);
                    u_xlatb0.xw = lessThan(u_xlat0.xxxy, u_xlat1.zzzx).xw;
                    u_xlat6.x = u_xlat0.y + -1.0;
                    u_xlatb6 = u_xlat6.x<u_xlat1.x;
                    u_xlatb6 = u_xlatb6 && u_xlatb0.w;
                    u_xlatb0.x = u_xlatb6 || u_xlatb0.x;
                    u_xlat2.z = 0.0;
                    u_xlat1 = (u_xlatb0.x) ? unity_MaterialValidateHighColor : u_xlat2.xxxz;
                    SV_Target0 = (bool(u_xlatb12)) ? unity_MaterialValidateLowColor : u_xlat1;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    } else {
        u_xlatb0.x = unity_VisualizationMode==1;
        SV_Target0 = mix(vec4(0.0, 0.0, 0.0, 0.0), unity_MaterialValidateLowColor, vec4(u_xlatb0.xxxx));
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "EDITOR_VISUALIZATION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 284
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %13 %32 %89 %166 %255 %263 %264 %276 
                                                      OpDecorate %13 Location 13 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %164 0 BuiltIn 164 
                                                      OpMemberDecorate %164 1 BuiltIn 164 
                                                      OpMemberDecorate %164 2 BuiltIn 164 
                                                      OpDecorate %164 Block 
                                                      OpDecorate %255 Location 255 
                                                      OpDecorate %263 Location 263 
                                                      OpDecorate %264 Location 264 
                                                      OpDecorate %276 Location 276 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypePointer Input %11 
                                 Input f32_4* %13 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 2 
                                              %16 = OpTypePointer Input %9 
                                              %20 = OpTypePointer Private %11 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypePointer Function %9 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %30 = OpTypePointer Private %9 
                                 Input f32_4* %32 = OpVariable Input 
                                              %33 = OpTypeVector %9 2 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %11 %36 
                                              %38 = OpTypeArray %11 %36 
                                              %39 = OpTypeVector %14 4 
                                              %40 = OpTypeStruct %37 %38 %11 %11 %39 %11 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 2 
                                              %45 = OpTypePointer Uniform %11 
                                              %56 = OpTypeVector %9 3 
                                              %57 = OpTypePointer Function %56 
                                          i32 %59 = OpConstant 4 
                                              %60 = OpTypeVector %6 4 
                                              %61 = OpTypePointer Uniform %39 
                                          u32 %65 = OpConstant 0 
                                Private bool* %77 = OpVariable Private 
                               Private f32_4* %81 = OpVariable Private 
                                 Input f32_4* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                                         i32 %120 = OpConstant 0 
                                         i32 %121 = OpConstant 1 
                                         u32 %162 = OpConstant 1 
                                             %163 = OpTypeArray %9 %162 
                                             %164 = OpTypeStruct %11 %9 %163 
                                             %165 = OpTypePointer Output %164 
        Output struct {f32_4; f32; f32[1];}* %166 = OpVariable Output 
                                             %174 = OpTypePointer Output %11 
                                         f32 %242 = OpConstant 3.674022E-40 
                                       f32_2 %243 = OpConstantComposite %242 %242 
                                         f32 %249 = OpConstant 3.674022E-40 
                                       f32_2 %250 = OpConstantComposite %249 %249 
                                             %254 = OpTypePointer Output %33 
                               Output f32_2* %255 = OpVariable Output 
                                         f32 %258 = OpConstant 3.674022E-40 
                                       f32_2 %259 = OpConstantComposite %242 %258 
                                       f32_2 %261 = OpConstantComposite %10 %242 
                               Output f32_2* %263 = OpVariable Output 
                                Input f32_4* %264 = OpVariable Input 
                                         i32 %267 = OpConstant 5 
                               Output f32_4* %276 = OpVariable Output 
                                       f32_4 %277 = OpConstantComposite %10 %10 %10 %10 
                                             %278 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %23 = OpVariable Function 
                              Function f32_3* %58 = OpVariable Function 
                                Function f32* %82 = OpVariable Function 
                             Function f32_3* %103 = OpVariable Function 
                                   Input f32* %17 = OpAccessChain %13 %15 
                                          f32 %18 = OpLoad %17 
                                         bool %19 = OpFOrdLessThan %10 %18 
                                                      OpStore %8 %19 
                                         bool %24 = OpLoad %8 
                                                      OpSelectionMerge %26 None 
                                                      OpBranchConditional %24 %25 %28 
                                              %25 = OpLabel 
                                                      OpStore %23 %27 
                                                      OpBranch %26 
                                              %28 = OpLabel 
                                                      OpStore %23 %10 
                                                      OpBranch %26 
                                              %26 = OpLabel 
                                          f32 %29 = OpLoad %23 
                                 Private f32* %31 = OpAccessChain %21 %15 
                                                      OpStore %31 %29 
                                        f32_4 %34 = OpLoad %32 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                        f32_4 %54 = OpLoad %21 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 2 3 
                                                      OpStore %21 %55 
                               Uniform u32_4* %62 = OpAccessChain %42 %59 
                                        u32_4 %63 = OpLoad %62 
                                          u32 %64 = OpCompositeExtract %63 0 
                                         bool %66 = OpINotEqual %64 %65 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %71 
                                              %67 = OpLabel 
                                        f32_4 %69 = OpLoad %21 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %58 %70 
                                                      OpBranch %68 
                                              %71 = OpLabel 
                                        f32_4 %72 = OpLoad %13 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                                      OpStore %58 %73 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                        f32_3 %74 = OpLoad %58 
                                        f32_4 %75 = OpLoad %21 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %21 %76 
                                 Private f32* %78 = OpAccessChain %21 %15 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %10 %79 
                                                      OpStore %77 %80 
                                         bool %83 = OpLoad %77 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %86 
                                              %84 = OpLabel 
                                                      OpStore %82 %27 
                                                      OpBranch %85 
                                              %86 = OpLabel 
                                                      OpStore %82 %10 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %87 = OpLoad %82 
                                 Private f32* %88 = OpAccessChain %81 %15 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                               Uniform f32_4* %93 = OpAccessChain %42 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                        f32_2 %96 = OpFMul %91 %95 
                               Uniform f32_4* %97 = OpAccessChain %42 %92 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 2 3 
                                       f32_2 %100 = OpFAdd %96 %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %81 %102 
                              Uniform u32_4* %104 = OpAccessChain %42 %59 
                                       u32_4 %105 = OpLoad %104 
                                         u32 %106 = OpCompositeExtract %105 1 
                                        bool %107 = OpINotEqual %106 %65 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %81 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %103 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_4 %113 = OpLoad %21 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %103 %114 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %115 = OpLoad %103 
                                       f32_4 %116 = OpLoad %21 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %21 %117 
                                       f32_4 %118 = OpLoad %21 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %122 = OpAccessChain %42 %120 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpFMul %119 %123 
                                                      OpStore %81 %124 
                              Uniform f32_4* %125 = OpAccessChain %42 %120 %120 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %21 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %81 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %81 %131 
                              Uniform f32_4* %132 = OpAccessChain %42 %120 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpLoad %21 
                                       f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
                                       f32_4 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %81 
                                       f32_4 %138 = OpFAdd %136 %137 
                                                      OpStore %21 %138 
                                       f32_4 %139 = OpLoad %21 
                              Uniform f32_4* %140 = OpAccessChain %42 %120 %92 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpFAdd %139 %141 
                                                      OpStore %21 %142 
                                       f32_4 %143 = OpLoad %21 
                                       f32_4 %144 = OpVectorShuffle %143 %143 1 1 1 1 
                              Uniform f32_4* %145 = OpAccessChain %42 %121 %121 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %144 %146 
                                                      OpStore %81 %147 
                              Uniform f32_4* %148 = OpAccessChain %42 %121 %120 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpLoad %21 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 0 0 0 
                                       f32_4 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %81 
                                       f32_4 %154 = OpFAdd %152 %153 
                                                      OpStore %81 %154 
                              Uniform f32_4* %155 = OpAccessChain %42 %121 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_4 %157 = OpLoad %21 
                                       f32_4 %158 = OpVectorShuffle %157 %157 2 2 2 2 
                                       f32_4 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpFAdd %159 %160 
                                                      OpStore %81 %161 
                              Uniform f32_4* %167 = OpAccessChain %42 %121 %92 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %21 
                                       f32_4 %170 = OpVectorShuffle %169 %169 3 3 3 3 
                                       f32_4 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %81 
                                       f32_4 %173 = OpFAdd %171 %172 
                               Output f32_4* %175 = OpAccessChain %166 %120 
                                                      OpStore %175 %173 
                                       f32_4 %176 = OpLoad %13 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 1 1 1 
                              Uniform f32_4* %178 = OpAccessChain %42 %120 %121 
                                       f32_4 %179 = OpLoad %178 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %21 %180 
                              Uniform f32_4* %181 = OpAccessChain %42 %120 %120 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %13 
                                       f32_4 %184 = OpVectorShuffle %183 %183 0 0 0 0 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %21 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %21 %187 
                              Uniform f32_4* %188 = OpAccessChain %42 %120 %44 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %13 
                                       f32_4 %191 = OpVectorShuffle %190 %190 2 2 2 2 
                                       f32_4 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %21 
                                       f32_4 %194 = OpFAdd %192 %193 
                                                      OpStore %21 %194 
                                       f32_4 %195 = OpLoad %21 
                              Uniform f32_4* %196 = OpAccessChain %42 %120 %92 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpFAdd %195 %197 
                                                      OpStore %21 %198 
                                       f32_4 %199 = OpLoad %21 
                                       f32_2 %200 = OpVectorShuffle %199 %199 1 1 
                              Uniform f32_4* %201 = OpAccessChain %42 %121 %121 
                                       f32_4 %202 = OpLoad %201 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                                       f32_2 %204 = OpFMul %200 %203 
                                       f32_4 %205 = OpLoad %81 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %81 %206 
                              Uniform f32_4* %207 = OpAccessChain %42 %121 %120 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 1 
                                       f32_4 %210 = OpLoad %21 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 0 
                                       f32_2 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %81 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                                       f32_2 %215 = OpFAdd %212 %214 
                                       f32_4 %216 = OpLoad %21 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 2 3 
                                                      OpStore %21 %217 
                              Uniform f32_4* %218 = OpAccessChain %42 %121 %44 
                                       f32_4 %219 = OpLoad %218 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_4 %221 = OpLoad %21 
                                       f32_2 %222 = OpVectorShuffle %221 %221 2 2 
                                       f32_2 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %21 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 1 
                                       f32_2 %226 = OpFAdd %223 %225 
                                       f32_4 %227 = OpLoad %21 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore %21 %228 
                              Uniform f32_4* %229 = OpAccessChain %42 %121 %92 
                                       f32_4 %230 = OpLoad %229 
                                       f32_2 %231 = OpVectorShuffle %230 %230 0 1 
                                       f32_4 %232 = OpLoad %21 
                                       f32_2 %233 = OpVectorShuffle %232 %232 3 3 
                                       f32_2 %234 = OpFMul %231 %233 
                                       f32_4 %235 = OpLoad %21 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                                       f32_2 %237 = OpFAdd %234 %236 
                                       f32_4 %238 = OpLoad %21 
                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 2 3 
                                                      OpStore %21 %239 
                                       f32_4 %240 = OpLoad %21 
                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
                                       f32_2 %244 = OpFAdd %241 %243 
                                       f32_4 %245 = OpLoad %21 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 2 3 
                                                      OpStore %21 %246 
                                       f32_4 %247 = OpLoad %21 
                                       f32_2 %248 = OpVectorShuffle %247 %247 0 1 
                                       f32_2 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %21 
                                       f32_4 %253 = OpVectorShuffle %252 %251 4 5 2 3 
                                                      OpStore %21 %253 
                                       f32_4 %256 = OpLoad %21 
                                       f32_2 %257 = OpVectorShuffle %256 %256 0 1 
                                       f32_2 %260 = OpFMul %257 %259 
                                       f32_2 %262 = OpFAdd %260 %261 
                                                      OpStore %255 %262 
                                       f32_4 %265 = OpLoad %264 
                                       f32_2 %266 = OpVectorShuffle %265 %265 0 1 
                              Uniform f32_4* %268 = OpAccessChain %42 %267 
                                       f32_4 %269 = OpLoad %268 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 1 
                                       f32_2 %271 = OpFMul %266 %270 
                              Uniform f32_4* %272 = OpAccessChain %42 %267 
                                       f32_4 %273 = OpLoad %272 
                                       f32_2 %274 = OpVectorShuffle %273 %273 2 3 
                                       f32_2 %275 = OpFAdd %271 %274 
                                                      OpStore %263 %275 
                                                      OpStore %276 %277 
                                 Output f32* %279 = OpAccessChain %166 %120 %162 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFNegate %280 
                                 Output f32* %282 = OpAccessChain %166 %120 %162 
                                                      OpStore %282 %281 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 1167
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %111 %319 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 RelaxedPrecision 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 RelaxedPrecision 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 RelaxedPrecision 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 RelaxedPrecision 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpMemberDecorate %27 8 RelaxedPrecision 
                                                      OpMemberDecorate %27 8 Offset 27 
                                                      OpMemberDecorate %27 9 RelaxedPrecision 
                                                      OpMemberDecorate %27 9 Offset 27 
                                                      OpMemberDecorate %27 10 RelaxedPrecision 
                                                      OpMemberDecorate %27 10 Offset 27 
                                                      OpMemberDecorate %27 11 RelaxedPrecision 
                                                      OpMemberDecorate %27 11 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %65 SpecId 65 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %109 DescriptorSet 109 
                                                      OpDecorate %109 Binding 109 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 Location 111 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %292 SpecId 292 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %319 Location 319 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %542 RelaxedPrecision 
                                                      OpDecorate %544 RelaxedPrecision 
                                                      OpDecorate %545 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %577 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %599 RelaxedPrecision 
                                                      OpDecorate %600 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %639 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %664 RelaxedPrecision 
                                                      OpDecorate %665 RelaxedPrecision 
                                                      OpDecorate %673 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %676 RelaxedPrecision 
                                                      OpDecorate %679 RelaxedPrecision 
                                                      OpDecorate %681 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %685 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %692 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %702 RelaxedPrecision 
                                                      OpDecorate %703 RelaxedPrecision 
                                                      OpDecorate %709 RelaxedPrecision 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %720 RelaxedPrecision 
                                                      OpDecorate %721 RelaxedPrecision 
                                                      OpDecorate %722 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                                      OpDecorate %750 RelaxedPrecision 
                                                      OpDecorate %751 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %760 RelaxedPrecision 
                                                      OpDecorate %762 RelaxedPrecision 
                                                      OpDecorate %763 RelaxedPrecision 
                                                      OpDecorate %766 RelaxedPrecision 
                                                      OpDecorate %767 RelaxedPrecision 
                                                      OpDecorate %769 RelaxedPrecision 
                                                      OpDecorate %770 RelaxedPrecision 
                                                      OpDecorate %773 RelaxedPrecision 
                                                      OpDecorate %775 RelaxedPrecision 
                                                      OpDecorate %776 RelaxedPrecision 
                                                      OpDecorate %779 RelaxedPrecision 
                                                      OpDecorate %780 RelaxedPrecision 
                                                      OpDecorate %782 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %803 RelaxedPrecision 
                                                      OpDecorate %806 RelaxedPrecision 
                                                      OpDecorate %807 RelaxedPrecision 
                                                      OpDecorate %810 RelaxedPrecision 
                                                      OpDecorate %815 RelaxedPrecision 
                                                      OpDecorate %816 RelaxedPrecision 
                                                      OpDecorate %817 RelaxedPrecision 
                                                      OpDecorate %825 RelaxedPrecision 
                                                      OpDecorate %828 RelaxedPrecision 
                                                      OpDecorate %829 RelaxedPrecision 
                                                      OpDecorate %836 RelaxedPrecision 
                                                      OpDecorate %837 RelaxedPrecision 
                                                      OpDecorate %839 RelaxedPrecision 
                                                      OpDecorate %844 RelaxedPrecision 
                                                      OpDecorate %846 RelaxedPrecision 
                                                      OpDecorate %856 SpecId 856 
                                                      OpDecorate %860 RelaxedPrecision 
                                                      OpDecorate %864 RelaxedPrecision 
                                                      OpDecorate %866 RelaxedPrecision 
                                                      OpDecorate %868 RelaxedPrecision 
                                                      OpDecorate %869 RelaxedPrecision 
                                                      OpDecorate %872 RelaxedPrecision 
                                                      OpDecorate %873 RelaxedPrecision 
                                                      OpDecorate %875 RelaxedPrecision 
                                                      OpDecorate %876 RelaxedPrecision 
                                                      OpDecorate %879 RelaxedPrecision 
                                                      OpDecorate %884 RelaxedPrecision 
                                                      OpDecorate %886 RelaxedPrecision 
                                                      OpDecorate %887 RelaxedPrecision 
                                                      OpDecorate %889 RelaxedPrecision 
                                                      OpDecorate %890 RelaxedPrecision 
                                                      OpDecorate %892 RelaxedPrecision 
                                                      OpDecorate %893 RelaxedPrecision 
                                                      OpDecorate %896 RelaxedPrecision 
                                                      OpDecorate %898 RelaxedPrecision 
                                                      OpDecorate %899 RelaxedPrecision 
                                                      OpDecorate %902 RelaxedPrecision 
                                                      OpDecorate %903 RelaxedPrecision 
                                                      OpDecorate %906 RelaxedPrecision 
                                                      OpDecorate %907 RelaxedPrecision 
                                                      OpDecorate %924 RelaxedPrecision 
                                                      OpDecorate %926 RelaxedPrecision 
                                                      OpDecorate %929 RelaxedPrecision 
                                                      OpDecorate %930 RelaxedPrecision 
                                                      OpDecorate %932 RelaxedPrecision 
                                                      OpDecorate %937 RelaxedPrecision 
                                                      OpDecorate %938 RelaxedPrecision 
                                                      OpDecorate %939 RelaxedPrecision 
                                                      OpDecorate %947 RelaxedPrecision 
                                                      OpDecorate %949 RelaxedPrecision 
                                                      OpDecorate %950 RelaxedPrecision 
                                                      OpDecorate %957 RelaxedPrecision 
                                                      OpDecorate %958 RelaxedPrecision 
                                                      OpDecorate %960 RelaxedPrecision 
                                                      OpDecorate %965 RelaxedPrecision 
                                                      OpDecorate %970 RelaxedPrecision 
                                                      OpDecorate %972 RelaxedPrecision 
                                                      OpDecorate %973 RelaxedPrecision 
                                                      OpDecorate %976 RelaxedPrecision 
                                                      OpDecorate %977 RelaxedPrecision 
                                                      OpDecorate %979 RelaxedPrecision 
                                                      OpDecorate %980 RelaxedPrecision 
                                                      OpDecorate %983 RelaxedPrecision 
                                                      OpDecorate %988 RelaxedPrecision 
                                                      OpDecorate %990 RelaxedPrecision 
                                                      OpDecorate %991 RelaxedPrecision 
                                                      OpDecorate %993 RelaxedPrecision 
                                                      OpDecorate %995 RelaxedPrecision 
                                                      OpDecorate %996 RelaxedPrecision 
                                                      OpDecorate %998 RelaxedPrecision 
                                                      OpDecorate %999 RelaxedPrecision 
                                                      OpDecorate %1002 RelaxedPrecision 
                                                      OpDecorate %1004 RelaxedPrecision 
                                                      OpDecorate %1005 RelaxedPrecision 
                                                      OpDecorate %1013 RelaxedPrecision 
                                                      OpDecorate %1015 RelaxedPrecision 
                                                      OpDecorate %1016 RelaxedPrecision 
                                                      OpDecorate %1020 RelaxedPrecision 
                                                      OpDecorate %1021 RelaxedPrecision 
                                                      OpDecorate %1024 RelaxedPrecision 
                                                      OpDecorate %1029 RelaxedPrecision 
                                                      OpDecorate %1030 RelaxedPrecision 
                                                      OpDecorate %1031 RelaxedPrecision 
                                                      OpDecorate %1037 RelaxedPrecision 
                                                      OpDecorate %1040 RelaxedPrecision 
                                                      OpDecorate %1041 RelaxedPrecision 
                                                      OpDecorate %1048 RelaxedPrecision 
                                                      OpDecorate %1049 RelaxedPrecision 
                                                      OpDecorate %1051 RelaxedPrecision 
                                                      OpDecorate %1054 RelaxedPrecision 
                                                      OpDecorate %1055 RelaxedPrecision 
                                                      OpDecorate %1058 RelaxedPrecision 
                                                      OpDecorate %1061 RelaxedPrecision 
                                                      OpDecorate %1062 RelaxedPrecision 
                                                      OpDecorate %1063 RelaxedPrecision 
                                                      OpDecorate %1064 RelaxedPrecision 
                                                      OpDecorate %1065 RelaxedPrecision 
                                                      OpDecorate %1066 RelaxedPrecision 
                                                      OpDecorate %1067 RelaxedPrecision 
                                                      OpDecorate %1068 RelaxedPrecision 
                                                      OpDecorate %1069 RelaxedPrecision 
                                                      OpDecorate %1072 RelaxedPrecision 
                                                      OpDecorate %1073 RelaxedPrecision 
                                                      OpDecorate %1077 RelaxedPrecision 
                                                      OpDecorate %1079 RelaxedPrecision 
                                                      OpDecorate %1094 RelaxedPrecision 
                                                      OpDecorate %1095 RelaxedPrecision 
                                                      OpDecorate %1097 RelaxedPrecision 
                                                      OpDecorate %1099 RelaxedPrecision 
                                                      OpDecorate %1100 RelaxedPrecision 
                                                      OpDecorate %1101 RelaxedPrecision 
                                                      OpDecorate %1104 RelaxedPrecision 
                                                      OpDecorate %1105 RelaxedPrecision 
                                                      OpDecorate %1106 RelaxedPrecision 
                                                      OpDecorate %1107 RelaxedPrecision 
                                                      OpDecorate %1108 RelaxedPrecision 
                                                      OpDecorate %1111 RelaxedPrecision 
                                                      OpDecorate %1113 RelaxedPrecision 
                                                      OpDecorate %1114 RelaxedPrecision 
                                                      OpDecorate %1116 RelaxedPrecision 
                                                      OpDecorate %1135 RelaxedPrecision 
                                                      OpDecorate %1137 RelaxedPrecision 
                                                      OpDecorate %1138 RelaxedPrecision 
                                                      OpDecorate %1139 RelaxedPrecision 
                                                      OpDecorate %1146 RelaxedPrecision 
                                                      OpDecorate %1148 RelaxedPrecision 
                                                      OpDecorate %1149 RelaxedPrecision 
                                                      OpDecorate %1162 RelaxedPrecision 
                                                      OpDecorate %1165 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                              %26 = OpTypeInt 32 1 
                                              %27 = OpTypeStruct %7 %6 %26 %26 %7 %6 %6 %6 %6 %7 %7 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_4; f32; i32; i32; f32_4; f32; f32; f32; f32; f32_4; f32_4; f32;}* %29 = OpVariable Uniform 
                                          i32 %30 = OpConstant 11 
                                              %31 = OpTypePointer Uniform %6 
                                          u32 %36 = OpConstant 0 
                                              %38 = OpTypeBool 
                                              %39 = OpTypePointer Private %38 
                                Private bool* %40 = OpVariable Private 
                                          f32 %43 = OpConstant 3.674022E-40 
                                          i32 %46 = OpConstant 0 
                                          i32 %47 = OpConstant 1 
                                          i32 %49 = OpConstant -1 
                                         bool %55 = OpConstantFalse 
                                          i32 %58 = OpConstant 2 
                                              %59 = OpTypePointer Uniform %26 
                                         bool %65 = OpSpecConstantFalse 
                                         bool %66 = OpSpecConstantOp System.Collections.Generic.List`1[SpirV.ObjectReference] 
                                              %69 = OpTypeVector %6 3 
                                              %70 = OpTypePointer Private %69 
                               Private f32_3* %71 = OpVariable Private 
                                              %74 = OpTypePointer Uniform %7 
                                 Private f32* %87 = OpVariable Private 
                                          u32 %88 = OpConstant 1 
                                          u32 %94 = OpConstant 2 
                              Private f32_3* %108 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %109 = OpVariable UniformConstant 
                                Input f32_2* %111 = OpVariable Input 
                                             %115 = OpTypePointer Function %6 
                                         f32 %120 = OpConstant 3.674022E-40 
                              Private f32_4* %123 = OpVariable Private 
                              Private f32_3* %131 = OpVariable Private 
                                             %140 = OpTypeVector %38 3 
                                             %141 = OpTypePointer Private %140 
                             Private bool_3* %142 = OpVariable Private 
                                         f32 %143 = OpConstant 3.674022E-40 
                                       f32_4 %144 = OpConstantComposite %143 %143 %143 %43 
                                             %147 = OpTypeVector %38 4 
                              Private f32_3* %150 = OpVariable Private 
                                         f32 %152 = OpConstant 3.674022E-40 
                                       f32_3 %153 = OpConstantComposite %152 %152 %152 
                             Private bool_3* %155 = OpVariable Private 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_4 %159 = OpConstantComposite %158 %158 %158 %43 
                              Private f32_3* %162 = OpVariable Private 
                                         f32 %164 = OpConstant 3.674022E-40 
                                       f32_3 %165 = OpConstantComposite %164 %164 %164 
                                         f32 %168 = OpConstant 3.674022E-40 
                                       f32_3 %169 = OpConstantComposite %168 %168 %168 
                                         f32 %174 = OpConstant 3.674022E-40 
                                       f32_3 %175 = OpConstantComposite %174 %174 %174 
                              Private f32_3* %179 = OpVariable Private 
                                         f32 %183 = OpConstant 3.674022E-40 
                                       f32_3 %184 = OpConstantComposite %183 %183 %183 
                              Private f32_3* %188 = OpVariable Private 
                                         f32 %262 = OpConstant 3.674022E-40 
                                         f32 %263 = OpConstant 3.674022E-40 
                                         f32 %264 = OpConstant 3.674022E-40 
                                       f32_3 %265 = OpConstantComposite %262 %263 %264 
                                Private f32* %268 = OpVariable Private 
                                         f32 %270 = OpConstant 3.674022E-40 
                                       f32_3 %271 = OpConstantComposite %270 %270 %270 
                                         i32 %274 = OpConstant 3 
                                        bool %292 = OpSpecConstantFalse 
                                        bool %293 = OpSpecConstantOp System.Collections.Generic.List`1[SpirV.ObjectReference] 
                                         f32 %297 = OpConstant 3.674022E-40 
                                         f32 %299 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %7 
                                         i32 %311 = OpConstant 10 
                                             %318 = OpTypePointer Output %7 
                               Output f32_4* %319 = OpVariable Output 
                                         i32 %324 = OpConstant 9 
                                         i32 %332 = OpConstant 5 
                                         i32 %342 = OpConstant 6 
                                             %353 = OpTypeVector %38 2 
                                             %354 = OpTypePointer Private %353 
                             Private bool_2* %355 = OpVariable Private 
                              Private f32_3* %380 = OpVariable Private 
                              Private f32_3* %410 = OpVariable Private 
                                Private f32* %424 = OpVariable Private 
                                         f32 %427 = OpConstant 3.674022E-40 
                                Private f32* %429 = OpVariable Private 
                                         f32 %454 = OpConstant 3.674022E-40 
                                         f32 %458 = OpConstant 3.674022E-40 
                                             %478 = OpTypePointer Function %15 
                                       f32_2 %486 = OpConstantComposite %43 %43 
                                             %526 = OpTypePointer Private %15 
                              Private f32_2* %527 = OpVariable Private 
                              Private f32_2* %547 = OpVariable Private 
                                         f32 %550 = OpConstant 3.674022E-40 
                                       f32_2 %551 = OpConstantComposite %550 %550 
                              Private f32_3* %565 = OpVariable Private 
                              Private f32_2* %653 = OpVariable Private 
                                Private f32* %679 = OpVariable Private 
                             Private bool_2* %683 = OpVariable Private 
                                         i32 %715 = OpConstant 4 
                             Private bool_2* %753 = OpVariable Private 
                              Private f32_2* %778 = OpVariable Private 
                                       f32_2 %781 = OpConstantComposite %427 %427 
                                        bool %856 = OpSpecConstantFalse 
                              Private f32_2* %864 = OpVariable Private 
                              Private f32_2* %993 = OpVariable Private 
                                        i32 %1056 = OpConstant 8 
                                        i32 %1059 = OpConstant 7 
                              Private bool* %1075 = OpVariable Private 
                                        f32 %1112 = OpConstant 3.674022E-40 
                                      f32_4 %1164 = OpConstantComposite %43 %43 %43 %43 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %116 = OpVariable Function 
                               Function f32* %189 = OpVariable Function 
                               Function f32* %201 = OpVariable Function 
                               Function f32* %213 = OpVariable Function 
                               Function f32* %225 = OpVariable Function 
                               Function f32* %237 = OpVariable Function 
                               Function f32* %249 = OpVariable Function 
                               Function f32* %273 = OpVariable Function 
                             Function f32_4* %306 = OpVariable Function 
                             Function f32_4* %320 = OpVariable Function 
                               Function f32* %381 = OpVariable Function 
                               Function f32* %433 = OpVariable Function 
                               Function f32* %443 = OpVariable Function 
                               Function f32* %467 = OpVariable Function 
                             Function f32_2* %479 = OpVariable Function 
                               Function f32* %502 = OpVariable Function 
                               Function f32* %553 = OpVariable Function 
                               Function f32* %566 = OpVariable Function 
                               Function f32* %590 = OpVariable Function 
                             Function f32_2* %602 = OpVariable Function 
                               Function f32* %623 = OpVariable Function 
                             Function f32_2* %668 = OpVariable Function 
                               Function f32* %694 = OpVariable Function 
                             Function f32_2* %705 = OpVariable Function 
                               Function f32* %783 = OpVariable Function 
                               Function f32* %795 = OpVariable Function 
                               Function f32* %819 = OpVariable Function 
                             Function f32_2* %831 = OpVariable Function 
                               Function f32* %908 = OpVariable Function 
                               Function f32* %919 = OpVariable Function 
                               Function f32* %941 = OpVariable Function 
                             Function f32_2* %952 = OpVariable Function 
                            Function f32_2* %1008 = OpVariable Function 
                              Function f32* %1032 = OpVariable Function 
                            Function f32_2* %1043 = OpVariable Function 
                            Function f32_4* %1129 = OpVariable Function 
                            Function f32_4* %1140 = OpVariable Function 
                            Function f32_4* %1156 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %32 = OpAccessChain %29 %30 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpFNegate %33 
                                          f32 %35 = OpFAdd %25 %34 
                                 Private f32* %37 = OpAccessChain %20 %36 
                                                      OpStore %37 %35 
                                 Private f32* %41 = OpAccessChain %20 %36 
                                          f32 %42 = OpLoad %41 
                                         bool %44 = OpFOrdLessThan %42 %43 
                                                      OpStore %40 %44 
                                         bool %45 = OpLoad %40 
                                          i32 %48 = OpSelect %45 %47 %46 
                                          i32 %50 = OpIMul %48 %49 
                                         bool %51 = OpINotEqual %50 %46 
                                                      OpSelectionMerge %53 None 
                                                      OpBranchConditional %51 %52 %53 
                                              %52 = OpLabel 
                                                      OpKill
                                              %53 = OpLabel 
                                                      OpSelectionMerge %57 None 
                                                      OpBranchConditional %55 %56 %57 
                                              %56 = OpLabel 
                                 Uniform i32* %60 = OpAccessChain %29 %58 
                                          i32 %61 = OpLoad %60 
                                         bool %62 = OpIEqual %61 %46 
                                                      OpSelectionMerge %64 None 
                                                      OpBranchConditional %62 %63 %64 
                                              %63 = OpLabel 
                                                      OpBranch %64 
                                              %64 = OpLabel 
                                                      OpBranch %57 
                                              %57 = OpLabel 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %1150 
                                              %67 = OpLabel 
                                        f32_4 %72 = OpLoad %9 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                               Uniform f32_4* %75 = OpAccessChain %29 %46 
                                        f32_4 %76 = OpLoad %75 
                                        f32_3 %77 = OpVectorShuffle %76 %76 0 1 2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %79 = OpFAdd %73 %78 
                                                      OpStore %71 %79 
                                        f32_3 %80 = OpLoad %71 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_3 %82 = OpLoad %71 
                                        f32_2 %83 = OpVectorShuffle %82 %82 0 1 
                                        f32_2 %84 = OpFMul %81 %83 
                                        f32_3 %85 = OpLoad %71 
                                        f32_3 %86 = OpVectorShuffle %85 %84 3 4 2 
                                                      OpStore %71 %86 
                                 Private f32* %89 = OpAccessChain %71 %88 
                                          f32 %90 = OpLoad %89 
                                 Private f32* %91 = OpAccessChain %71 %36 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFAdd %90 %92 
                                                      OpStore %87 %93 
                                 Private f32* %95 = OpAccessChain %71 %94 
                                          f32 %96 = OpLoad %95 
                                 Private f32* %97 = OpAccessChain %71 %94 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFMul %96 %98 
                                         f32 %100 = OpLoad %87 
                                         f32 %101 = OpFAdd %99 %100 
                                                      OpStore %87 %101 
                                         f32 %102 = OpLoad %87 
                                         f32 %103 = OpExtInst %1 31 %102 
                                                      OpStore %87 %103 
                                         f32 %104 = OpLoad %87 
                                Uniform f32* %105 = OpAccessChain %29 %47 
                                         f32 %106 = OpLoad %105 
                                        bool %107 = OpFOrdLessThan %104 %106 
                                                      OpStore %40 %107 
                  read_only Texture2DSampled %110 = OpLoad %109 
                                       f32_2 %112 = OpLoad %111 
                                       f32_4 %113 = OpImageSampleImplicitLod %110 %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %108 %114 
                                        bool %117 = OpLoad %40 
                                                      OpSelectionMerge %119 None 
                                                      OpBranchConditional %117 %118 %121 
                                             %118 = OpLabel 
                                                      OpStore %116 %120 
                                                      OpBranch %119 
                                             %121 = OpLabel 
                                                      OpStore %116 %43 
                                                      OpBranch %119 
                                             %119 = OpLabel 
                                         f32 %122 = OpLoad %116 
                                                      OpStore %87 %122 
                                       f32_4 %124 = OpLoad %9 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFNegate %125 
                                       f32_3 %127 = OpLoad %108 
                                       f32_3 %128 = OpFAdd %126 %127 
                                       f32_4 %129 = OpLoad %123 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %123 %130 
                                         f32 %132 = OpLoad %87 
                                       f32_3 %133 = OpCompositeConstruct %132 %132 %132 
                                       f32_4 %134 = OpLoad %123 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpFAdd %136 %138 
                                                      OpStore %131 %139 
                                       f32_3 %145 = OpLoad %131 
                                       f32_4 %146 = OpVectorShuffle %145 %145 0 1 2 0 
                                      bool_4 %148 = OpFOrdGreaterThanEqual %144 %146 
                                      bool_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                                      OpStore %142 %149 
                                       f32_3 %151 = OpLoad %131 
                                       f32_3 %154 = OpFMul %151 %153 
                                                      OpStore %150 %154 
                                       f32_3 %156 = OpLoad %131 
                                       f32_4 %157 = OpVectorShuffle %156 %156 0 1 2 0 
                                      bool_4 %160 = OpFOrdLessThan %157 %159 
                                      bool_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                                      OpStore %155 %161 
                                       f32_3 %163 = OpLoad %131 
                                       f32_3 %166 = OpFAdd %163 %165 
                                                      OpStore %162 %166 
                                       f32_3 %167 = OpLoad %162 
                                       f32_3 %170 = OpFMul %167 %169 
                                                      OpStore %162 %170 
                                       f32_3 %171 = OpLoad %162 
                                       f32_3 %172 = OpExtInst %1 30 %171 
                                                      OpStore %162 %172 
                                       f32_3 %173 = OpLoad %162 
                                       f32_3 %176 = OpFMul %173 %175 
                                                      OpStore %162 %176 
                                       f32_3 %177 = OpLoad %162 
                                       f32_3 %178 = OpExtInst %1 29 %177 
                                                      OpStore %162 %178 
                                       f32_3 %180 = OpLoad %131 
                                       f32_3 %181 = OpExtInst %1 30 %180 
                                                      OpStore %179 %181 
                                       f32_3 %182 = OpLoad %179 
                                       f32_3 %185 = OpFMul %182 %184 
                                                      OpStore %179 %185 
                                       f32_3 %186 = OpLoad %179 
                                       f32_3 %187 = OpExtInst %1 29 %186 
                                                      OpStore %179 %187 
                                      bool_3 %190 = OpLoad %155 
                                        bool %191 = OpCompositeExtract %190 0 
                                                      OpSelectionMerge %193 None 
                                                      OpBranchConditional %191 %192 %196 
                                             %192 = OpLabel 
                                Private f32* %194 = OpAccessChain %162 %36 
                                         f32 %195 = OpLoad %194 
                                                      OpStore %189 %195 
                                                      OpBranch %193 
                                             %196 = OpLabel 
                                Private f32* %197 = OpAccessChain %179 %36 
                                         f32 %198 = OpLoad %197 
                                                      OpStore %189 %198 
                                                      OpBranch %193 
                                             %193 = OpLabel 
                                         f32 %199 = OpLoad %189 
                                Private f32* %200 = OpAccessChain %188 %36 
                                                      OpStore %200 %199 
                                      bool_3 %202 = OpLoad %155 
                                        bool %203 = OpCompositeExtract %202 1 
                                                      OpSelectionMerge %205 None 
                                                      OpBranchConditional %203 %204 %208 
                                             %204 = OpLabel 
                                Private f32* %206 = OpAccessChain %162 %88 
                                         f32 %207 = OpLoad %206 
                                                      OpStore %201 %207 
                                                      OpBranch %205 
                                             %208 = OpLabel 
                                Private f32* %209 = OpAccessChain %179 %88 
                                         f32 %210 = OpLoad %209 
                                                      OpStore %201 %210 
                                                      OpBranch %205 
                                             %205 = OpLabel 
                                         f32 %211 = OpLoad %201 
                                Private f32* %212 = OpAccessChain %188 %88 
                                                      OpStore %212 %211 
                                      bool_3 %214 = OpLoad %155 
                                        bool %215 = OpCompositeExtract %214 2 
                                                      OpSelectionMerge %217 None 
                                                      OpBranchConditional %215 %216 %220 
                                             %216 = OpLabel 
                                Private f32* %218 = OpAccessChain %162 %94 
                                         f32 %219 = OpLoad %218 
                                                      OpStore %213 %219 
                                                      OpBranch %217 
                                             %220 = OpLabel 
                                Private f32* %221 = OpAccessChain %179 %94 
                                         f32 %222 = OpLoad %221 
                                                      OpStore %213 %222 
                                                      OpBranch %217 
                                             %217 = OpLabel 
                                         f32 %223 = OpLoad %213 
                                Private f32* %224 = OpAccessChain %188 %94 
                                                      OpStore %224 %223 
                                      bool_3 %226 = OpLoad %142 
                                        bool %227 = OpCompositeExtract %226 0 
                                                      OpSelectionMerge %229 None 
                                                      OpBranchConditional %227 %228 %232 
                                             %228 = OpLabel 
                                Private f32* %230 = OpAccessChain %150 %36 
                                         f32 %231 = OpLoad %230 
                                                      OpStore %225 %231 
                                                      OpBranch %229 
                                             %232 = OpLabel 
                                Private f32* %233 = OpAccessChain %188 %36 
                                         f32 %234 = OpLoad %233 
                                                      OpStore %225 %234 
                                                      OpBranch %229 
                                             %229 = OpLabel 
                                         f32 %235 = OpLoad %225 
                                Private f32* %236 = OpAccessChain %71 %36 
                                                      OpStore %236 %235 
                                      bool_3 %238 = OpLoad %142 
                                        bool %239 = OpCompositeExtract %238 1 
                                                      OpSelectionMerge %241 None 
                                                      OpBranchConditional %239 %240 %244 
                                             %240 = OpLabel 
                                Private f32* %242 = OpAccessChain %150 %88 
                                         f32 %243 = OpLoad %242 
                                                      OpStore %237 %243 
                                                      OpBranch %241 
                                             %244 = OpLabel 
                                Private f32* %245 = OpAccessChain %188 %88 
                                         f32 %246 = OpLoad %245 
                                                      OpStore %237 %246 
                                                      OpBranch %241 
                                             %241 = OpLabel 
                                         f32 %247 = OpLoad %237 
                                Private f32* %248 = OpAccessChain %71 %88 
                                                      OpStore %248 %247 
                                      bool_3 %250 = OpLoad %142 
                                        bool %251 = OpCompositeExtract %250 2 
                                                      OpSelectionMerge %253 None 
                                                      OpBranchConditional %251 %252 %256 
                                             %252 = OpLabel 
                                Private f32* %254 = OpAccessChain %150 %94 
                                         f32 %255 = OpLoad %254 
                                                      OpStore %249 %255 
                                                      OpBranch %253 
                                             %256 = OpLabel 
                                Private f32* %257 = OpAccessChain %188 %94 
                                         f32 %258 = OpLoad %257 
                                                      OpStore %249 %258 
                                                      OpBranch %253 
                                             %253 = OpLabel 
                                         f32 %259 = OpLoad %249 
                                Private f32* %260 = OpAccessChain %71 %94 
                                                      OpStore %260 %259 
                                       f32_3 %261 = OpLoad %71 
                                         f32 %266 = OpDot %261 %265 
                                Private f32* %267 = OpAccessChain %20 %36 
                                                      OpStore %267 %266 
                                       f32_3 %269 = OpLoad %71 
                                         f32 %272 = OpDot %269 %271 
                                                      OpStore %268 %272 
                                Uniform i32* %275 = OpAccessChain %29 %274 
                                         i32 %276 = OpLoad %275 
                                        bool %277 = OpINotEqual %276 %46 
                                                      OpSelectionMerge %279 None 
                                                      OpBranchConditional %277 %278 %282 
                                             %278 = OpLabel 
                                Private f32* %280 = OpAccessChain %20 %36 
                                         f32 %281 = OpLoad %280 
                                                      OpStore %273 %281 
                                                      OpBranch %279 
                                             %282 = OpLabel 
                                         f32 %283 = OpLoad %268 
                                                      OpStore %273 %283 
                                                      OpBranch %279 
                                             %279 = OpLabel 
                                         f32 %284 = OpLoad %273 
                                                      OpStore %268 %284 
                                                      OpSelectionMerge %286 None 
                                                      OpBranchConditional %55 %285 %286 
                                             %285 = OpLabel 
                                Uniform i32* %287 = OpAccessChain %29 %274 
                                         i32 %288 = OpLoad %287 
                                        bool %289 = OpIEqual %288 %46 
                                                      OpSelectionMerge %291 None 
                                                      OpBranchConditional %289 %290 %291 
                                             %290 = OpLabel 
                                                      OpBranch %291 
                                             %291 = OpLabel 
                                                      OpBranch %286 
                                             %286 = OpLabel 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %330 
                                             %294 = OpLabel 
                                         f32 %296 = OpLoad %268 
                                        bool %298 = OpFOrdLessThan %296 %297 
                                                      OpStore %40 %298 
                                         f32 %300 = OpLoad %268 
                                        bool %301 = OpFOrdLessThan %299 %300 
                                      bool_3 %302 = OpLoad %142 
                                      bool_3 %303 = OpCompositeInsert %301 %302 0 
                                                      OpStore %142 %303 
                                Private f32* %304 = OpAccessChain %20 %88 
                                                      OpStore %304 %43 
                                      bool_3 %307 = OpLoad %142 
                                        bool %308 = OpCompositeExtract %307 0 
                                                      OpSelectionMerge %310 None 
                                                      OpBranchConditional %308 %309 %314 
                                             %309 = OpLabel 
                              Uniform f32_4* %312 = OpAccessChain %29 %311 
                                       f32_4 %313 = OpLoad %312 
                                                      OpStore %306 %313 
                                                      OpBranch %310 
                                             %314 = OpLabel 
                                       f32_4 %315 = OpLoad %20 
                                       f32_4 %316 = OpVectorShuffle %315 %315 0 0 0 1 
                                                      OpStore %306 %316 
                                                      OpBranch %310 
                                             %310 = OpLabel 
                                       f32_4 %317 = OpLoad %306 
                                                      OpStore %123 %317 
                                        bool %321 = OpLoad %40 
                                                      OpSelectionMerge %323 None 
                                                      OpBranchConditional %321 %322 %327 
                                             %322 = OpLabel 
                              Uniform f32_4* %325 = OpAccessChain %29 %324 
                                       f32_4 %326 = OpLoad %325 
                                                      OpStore %320 %326 
                                                      OpBranch %323 
                                             %327 = OpLabel 
                                       f32_4 %328 = OpLoad %123 
                                                      OpStore %320 %328 
                                                      OpBranch %323 
                                             %323 = OpLabel 
                                       f32_4 %329 = OpLoad %320 
                                                      OpStore %319 %329 
                                                      OpBranch %295 
                                             %330 = OpLabel 
                                         f32 %331 = OpLoad %268 
                                Uniform f32* %333 = OpAccessChain %29 %332 
                                         f32 %334 = OpLoad %333 
                                        bool %335 = OpFOrdLessThan %331 %334 
                                                      OpStore %40 %335 
                                        bool %336 = OpLoad %40 
                                                      OpSelectionMerge %338 None 
                                                      OpBranchConditional %336 %337 %341 
                                             %337 = OpLabel 
                              Uniform f32_4* %339 = OpAccessChain %29 %324 
                                       f32_4 %340 = OpLoad %339 
                                                      OpStore %319 %340 
                                                      OpBranch %338 
                                             %341 = OpLabel 
                                Uniform f32* %343 = OpAccessChain %29 %342 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpLoad %268 
                                        bool %346 = OpFOrdLessThan %344 %345 
                                                      OpStore %40 %346 
                                        bool %347 = OpLoad %40 
                                                      OpSelectionMerge %349 None 
                                                      OpBranchConditional %347 %348 %352 
                                             %348 = OpLabel 
                              Uniform f32_4* %350 = OpAccessChain %29 %311 
                                       f32_4 %351 = OpLoad %350 
                                                      OpStore %319 %351 
                                                      OpBranch %349 
                                             %352 = OpLabel 
                                       f32_3 %356 = OpLoad %131 
                                       f32_4 %357 = OpVectorShuffle %356 %356 1 0 1 1 
                                       f32_3 %358 = OpLoad %131 
                                       f32_4 %359 = OpVectorShuffle %358 %358 2 2 2 2 
                                      bool_4 %360 = OpFOrdLessThan %357 %359 
                                      bool_2 %361 = OpVectorShuffle %360 %360 0 1 
                                                      OpStore %355 %361 
                                      bool_2 %362 = OpLoad %355 
                                        bool %363 = OpCompositeExtract %362 1 
                                      bool_2 %364 = OpLoad %355 
                                        bool %365 = OpCompositeExtract %364 0 
                                        bool %366 = OpLogicalAnd %363 %365 
                                                      OpStore %40 %366 
                                        bool %367 = OpLoad %40 
                                                      OpSelectionMerge %369 None 
                                                      OpBranchConditional %367 %368 %490 
                                             %368 = OpLabel 
                                Private f32* %370 = OpAccessChain %131 %94 
                                         f32 %371 = OpLoad %370 
                                        bool %372 = OpFOrdNotEqual %371 %43 
                                                      OpStore %40 %372 
                                Private f32* %373 = OpAccessChain %131 %88 
                                         f32 %374 = OpLoad %373 
                                Private f32* %375 = OpAccessChain %131 %36 
                                         f32 %376 = OpLoad %375 
                                        bool %377 = OpFOrdLessThan %374 %376 
                                      bool_2 %378 = OpLoad %355 
                                      bool_2 %379 = OpCompositeInsert %377 %378 0 
                                                      OpStore %355 %379 
                                      bool_2 %382 = OpLoad %355 
                                        bool %383 = OpCompositeExtract %382 0 
                                                      OpSelectionMerge %385 None 
                                                      OpBranchConditional %383 %384 %388 
                                             %384 = OpLabel 
                                Private f32* %386 = OpAccessChain %131 %88 
                                         f32 %387 = OpLoad %386 
                                                      OpStore %381 %387 
                                                      OpBranch %385 
                                             %388 = OpLabel 
                                Private f32* %389 = OpAccessChain %131 %36 
                                         f32 %390 = OpLoad %389 
                                                      OpStore %381 %390 
                                                      OpBranch %385 
                                             %385 = OpLabel 
                                         f32 %391 = OpLoad %381 
                                Private f32* %392 = OpAccessChain %380 %36 
                                                      OpStore %392 %391 
                                Private f32* %393 = OpAccessChain %131 %94 
                                         f32 %394 = OpLoad %393 
                                Private f32* %395 = OpAccessChain %380 %36 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFNegate %396 
                                         f32 %398 = OpFAdd %394 %397 
                                Private f32* %399 = OpAccessChain %380 %36 
                                                      OpStore %399 %398 
                                Private f32* %400 = OpAccessChain %380 %36 
                                         f32 %401 = OpLoad %400 
                                        bool %402 = OpFOrdNotEqual %401 %43 
                                      bool_2 %403 = OpLoad %355 
                                      bool_2 %404 = OpCompositeInsert %402 %403 0 
                                                      OpStore %355 %404 
                                Private f32* %405 = OpAccessChain %380 %36 
                                         f32 %406 = OpLoad %405 
                                Private f32* %407 = OpAccessChain %131 %94 
                                         f32 %408 = OpLoad %407 
                                         f32 %409 = OpFDiv %406 %408 
                                                      OpStore %268 %409 
                                Private f32* %411 = OpAccessChain %131 %88 
                                         f32 %412 = OpLoad %411 
                                         f32 %413 = OpFNegate %412 
                                Private f32* %414 = OpAccessChain %131 %36 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpFAdd %413 %415 
                                Private f32* %417 = OpAccessChain %410 %36 
                                                      OpStore %417 %416 
                                Private f32* %418 = OpAccessChain %410 %36 
                                         f32 %419 = OpLoad %418 
                                Private f32* %420 = OpAccessChain %380 %36 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFDiv %419 %421 
                                Private f32* %423 = OpAccessChain %380 %36 
                                                      OpStore %423 %422 
                                Private f32* %425 = OpAccessChain %380 %36 
                                         f32 %426 = OpLoad %425 
                                         f32 %428 = OpFAdd %426 %427 
                                                      OpStore %424 %428 
                                Private f32* %430 = OpAccessChain %410 %36 
                                         f32 %431 = OpLoad %430 
                                         f32 %432 = OpFAdd %431 %427 
                                                      OpStore %429 %432 
                                      bool_2 %434 = OpLoad %355 
                                        bool %435 = OpCompositeExtract %434 0 
                                                      OpSelectionMerge %437 None 
                                                      OpBranchConditional %435 %436 %439 
                                             %436 = OpLabel 
                                         f32 %438 = OpLoad %424 
                                                      OpStore %433 %438 
                                                      OpBranch %437 
                                             %439 = OpLabel 
                                         f32 %440 = OpLoad %429 
                                                      OpStore %433 %440 
                                                      OpBranch %437 
                                             %437 = OpLabel 
                                         f32 %441 = OpLoad %433 
                                Private f32* %442 = OpAccessChain %380 %36 
                                                      OpStore %442 %441 
                                      bool_2 %444 = OpLoad %355 
                                        bool %445 = OpCompositeExtract %444 0 
                                                      OpSelectionMerge %447 None 
                                                      OpBranchConditional %445 %446 %449 
                                             %446 = OpLabel 
                                         f32 %448 = OpLoad %268 
                                                      OpStore %443 %448 
                                                      OpBranch %447 
                                             %449 = OpLabel 
                                                      OpStore %443 %43 
                                                      OpBranch %447 
                                             %447 = OpLabel 
                                         f32 %450 = OpLoad %443 
                                Private f32* %451 = OpAccessChain %410 %94 
                                                      OpStore %451 %450 
                                Private f32* %452 = OpAccessChain %380 %36 
                                         f32 %453 = OpLoad %452 
                                         f32 %455 = OpFMul %453 %454 
                                                      OpStore %268 %455 
                                Private f32* %456 = OpAccessChain %380 %36 
                                         f32 %457 = OpLoad %456 
                                        bool %459 = OpFOrdLessThan %457 %458 
                                      bool_2 %460 = OpLoad %355 
                                      bool_2 %461 = OpCompositeInsert %459 %460 0 
                                                      OpStore %355 %461 
                                Private f32* %462 = OpAccessChain %380 %36 
                                         f32 %463 = OpLoad %462 
                                         f32 %464 = OpFMul %463 %454 
                                         f32 %465 = OpFAdd %464 %158 
                                Private f32* %466 = OpAccessChain %380 %36 
                                                      OpStore %466 %465 
                                      bool_2 %468 = OpLoad %355 
                                        bool %469 = OpCompositeExtract %468 0 
                                                      OpSelectionMerge %471 None 
                                                      OpBranchConditional %469 %470 %474 
                                             %470 = OpLabel 
                                Private f32* %472 = OpAccessChain %380 %36 
                                         f32 %473 = OpLoad %472 
                                                      OpStore %467 %473 
                                                      OpBranch %471 
                                             %474 = OpLabel 
                                         f32 %475 = OpLoad %268 
                                                      OpStore %467 %475 
                                                      OpBranch %471 
                                             %471 = OpLabel 
                                         f32 %476 = OpLoad %467 
                                Private f32* %477 = OpAccessChain %410 %36 
                                                      OpStore %477 %476 
                                        bool %480 = OpLoad %40 
                                                      OpSelectionMerge %482 None 
                                                      OpBranchConditional %480 %481 %485 
                                             %481 = OpLabel 
                                       f32_3 %483 = OpLoad %410 
                                       f32_2 %484 = OpVectorShuffle %483 %483 0 2 
                                                      OpStore %479 %484 
                                                      OpBranch %482 
                                             %485 = OpLabel 
                                                      OpStore %479 %486 
                                                      OpBranch %482 
                                             %482 = OpLabel 
                                       f32_2 %487 = OpLoad %479 
                                       f32_3 %488 = OpLoad %380 
                                       f32_3 %489 = OpVectorShuffle %488 %487 3 1 4 
                                                      OpStore %380 %489 
                                                      OpBranch %369 
                                             %490 = OpLabel 
                                Private f32* %491 = OpAccessChain %131 %36 
                                         f32 %492 = OpLoad %491 
                                Private f32* %493 = OpAccessChain %131 %88 
                                         f32 %494 = OpLoad %493 
                                        bool %495 = OpFOrdLessThan %492 %494 
                                                      OpStore %40 %495 
                                        bool %496 = OpLoad %40 
                                                      OpSelectionMerge %498 None 
                                                      OpBranchConditional %496 %497 %612 
                                             %497 = OpLabel 
                                Private f32* %499 = OpAccessChain %131 %88 
                                         f32 %500 = OpLoad %499 
                                        bool %501 = OpFOrdNotEqual %500 %43 
                                                      OpStore %40 %501 
                                      bool_2 %503 = OpLoad %355 
                                        bool %504 = OpCompositeExtract %503 1 
                                                      OpSelectionMerge %506 None 
                                                      OpBranchConditional %504 %505 %509 
                                             %505 = OpLabel 
                                Private f32* %507 = OpAccessChain %131 %36 
                                         f32 %508 = OpLoad %507 
                                                      OpStore %502 %508 
                                                      OpBranch %506 
                                             %509 = OpLabel 
                                Private f32* %510 = OpAccessChain %131 %94 
                                         f32 %511 = OpLoad %510 
                                                      OpStore %502 %511 
                                                      OpBranch %506 
                                             %506 = OpLabel 
                                         f32 %512 = OpLoad %502 
                                Private f32* %513 = OpAccessChain %410 %36 
                                                      OpStore %513 %512 
                                Private f32* %514 = OpAccessChain %131 %88 
                                         f32 %515 = OpLoad %514 
                                Private f32* %516 = OpAccessChain %410 %36 
                                         f32 %517 = OpLoad %516 
                                         f32 %518 = OpFNegate %517 
                                         f32 %519 = OpFAdd %515 %518 
                                Private f32* %520 = OpAccessChain %410 %36 
                                                      OpStore %520 %519 
                                Private f32* %521 = OpAccessChain %410 %36 
                                         f32 %522 = OpLoad %521 
                                        bool %523 = OpFOrdNotEqual %522 %43 
                                      bool_2 %524 = OpLoad %355 
                                      bool_2 %525 = OpCompositeInsert %523 %524 0 
                                                      OpStore %355 %525 
                                Private f32* %528 = OpAccessChain %410 %36 
                                         f32 %529 = OpLoad %528 
                                Private f32* %530 = OpAccessChain %131 %88 
                                         f32 %531 = OpLoad %530 
                                         f32 %532 = OpFDiv %529 %531 
                                Private f32* %533 = OpAccessChain %527 %36 
                                                      OpStore %533 %532 
                                Private f32* %534 = OpAccessChain %131 %36 
                                         f32 %535 = OpLoad %534 
                                         f32 %536 = OpFNegate %535 
                                Private f32* %537 = OpAccessChain %131 %94 
                                         f32 %538 = OpLoad %537 
                                         f32 %539 = OpFAdd %536 %538 
                                Private f32* %540 = OpAccessChain %410 %94 
                                                      OpStore %540 %539 
                                Private f32* %541 = OpAccessChain %410 %94 
                                         f32 %542 = OpLoad %541 
                                Private f32* %543 = OpAccessChain %410 %36 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFDiv %542 %544 
                                Private f32* %546 = OpAccessChain %410 %36 
                                                      OpStore %546 %545 
                                       f32_3 %548 = OpLoad %410 
                                       f32_2 %549 = OpVectorShuffle %548 %548 0 2 
                                       f32_2 %552 = OpFAdd %549 %551 
                                                      OpStore %547 %552 
                                      bool_2 %554 = OpLoad %355 
                                        bool %555 = OpCompositeExtract %554 0 
                                                      OpSelectionMerge %557 None 
                                                      OpBranchConditional %555 %556 %560 
                                             %556 = OpLabel 
                                Private f32* %558 = OpAccessChain %547 %36 
                                         f32 %559 = OpLoad %558 
                                                      OpStore %553 %559 
                                                      OpBranch %557 
                                             %560 = OpLabel 
                                Private f32* %561 = OpAccessChain %547 %88 
                                         f32 %562 = OpLoad %561 
                                                      OpStore %553 %562 
                                                      OpBranch %557 
                                             %557 = OpLabel 
                                         f32 %563 = OpLoad %553 
                                Private f32* %564 = OpAccessChain %410 %36 
                                                      OpStore %564 %563 
                                      bool_2 %567 = OpLoad %355 
                                        bool %568 = OpCompositeExtract %567 0 
                                                      OpSelectionMerge %570 None 
                                                      OpBranchConditional %568 %569 %573 
                                             %569 = OpLabel 
                                Private f32* %571 = OpAccessChain %527 %36 
                                         f32 %572 = OpLoad %571 
                                                      OpStore %566 %572 
                                                      OpBranch %570 
                                             %573 = OpLabel 
                                                      OpStore %566 %43 
                                                      OpBranch %570 
                                             %570 = OpLabel 
                                         f32 %574 = OpLoad %566 
                                Private f32* %575 = OpAccessChain %565 %94 
                                                      OpStore %575 %574 
                                Private f32* %576 = OpAccessChain %410 %36 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpFMul %577 %454 
                                Private f32* %579 = OpAccessChain %527 %36 
                                                      OpStore %579 %578 
                                Private f32* %580 = OpAccessChain %410 %36 
                                         f32 %581 = OpLoad %580 
                                        bool %582 = OpFOrdLessThan %581 %458 
                                      bool_2 %583 = OpLoad %355 
                                      bool_2 %584 = OpCompositeInsert %582 %583 0 
                                                      OpStore %355 %584 
                                Private f32* %585 = OpAccessChain %410 %36 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpFMul %586 %454 
                                         f32 %588 = OpFAdd %587 %158 
                                Private f32* %589 = OpAccessChain %410 %36 
                                                      OpStore %589 %588 
                                      bool_2 %591 = OpLoad %355 
                                        bool %592 = OpCompositeExtract %591 0 
                                                      OpSelectionMerge %594 None 
                                                      OpBranchConditional %592 %593 %597 
                                             %593 = OpLabel 
                                Private f32* %595 = OpAccessChain %410 %36 
                                         f32 %596 = OpLoad %595 
                                                      OpStore %590 %596 
                                                      OpBranch %594 
                                             %597 = OpLabel 
                                Private f32* %598 = OpAccessChain %527 %36 
                                         f32 %599 = OpLoad %598 
                                                      OpStore %590 %599 
                                                      OpBranch %594 
                                             %594 = OpLabel 
                                         f32 %600 = OpLoad %590 
                                Private f32* %601 = OpAccessChain %565 %36 
                                                      OpStore %601 %600 
                                        bool %603 = OpLoad %40 
                                                      OpSelectionMerge %605 None 
                                                      OpBranchConditional %603 %604 %608 
                                             %604 = OpLabel 
                                       f32_3 %606 = OpLoad %565 
                                       f32_2 %607 = OpVectorShuffle %606 %606 0 2 
                                                      OpStore %602 %607 
                                                      OpBranch %605 
                                             %608 = OpLabel 
                                                      OpStore %602 %486 
                                                      OpBranch %605 
                                             %605 = OpLabel 
                                       f32_2 %609 = OpLoad %602 
                                       f32_3 %610 = OpLoad %380 
                                       f32_3 %611 = OpVectorShuffle %610 %609 3 1 4 
                                                      OpStore %380 %611 
                                                      OpBranch %498 
                                             %612 = OpLabel 
                                Private f32* %613 = OpAccessChain %131 %36 
                                         f32 %614 = OpLoad %613 
                                        bool %615 = OpFOrdNotEqual %614 %43 
                                                      OpStore %40 %615 
                                Private f32* %616 = OpAccessChain %131 %94 
                                         f32 %617 = OpLoad %616 
                                Private f32* %618 = OpAccessChain %131 %88 
                                         f32 %619 = OpLoad %618 
                                        bool %620 = OpFOrdLessThan %617 %619 
                                      bool_2 %621 = OpLoad %355 
                                      bool_2 %622 = OpCompositeInsert %620 %621 0 
                                                      OpStore %355 %622 
                                      bool_2 %624 = OpLoad %355 
                                        bool %625 = OpCompositeExtract %624 0 
                                                      OpSelectionMerge %627 None 
                                                      OpBranchConditional %625 %626 %630 
                                             %626 = OpLabel 
                                Private f32* %628 = OpAccessChain %131 %94 
                                         f32 %629 = OpLoad %628 
                                                      OpStore %623 %629 
                                                      OpBranch %627 
                                             %630 = OpLabel 
                                Private f32* %631 = OpAccessChain %131 %88 
                                         f32 %632 = OpLoad %631 
                                                      OpStore %623 %632 
                                                      OpBranch %627 
                                             %627 = OpLabel 
                                         f32 %633 = OpLoad %623 
                                Private f32* %634 = OpAccessChain %410 %36 
                                                      OpStore %634 %633 
                                Private f32* %635 = OpAccessChain %131 %36 
                                         f32 %636 = OpLoad %635 
                                Private f32* %637 = OpAccessChain %410 %36 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpFNegate %638 
                                         f32 %640 = OpFAdd %636 %639 
                                Private f32* %641 = OpAccessChain %410 %36 
                                                      OpStore %641 %640 
                                Private f32* %642 = OpAccessChain %410 %36 
                                         f32 %643 = OpLoad %642 
                                        bool %644 = OpFOrdNotEqual %643 %43 
                                      bool_2 %645 = OpLoad %355 
                                      bool_2 %646 = OpCompositeInsert %644 %645 0 
                                                      OpStore %355 %646 
                                Private f32* %647 = OpAccessChain %410 %36 
                                         f32 %648 = OpLoad %647 
                                Private f32* %649 = OpAccessChain %131 %36 
                                         f32 %650 = OpLoad %649 
                                         f32 %651 = OpFDiv %648 %650 
                                Private f32* %652 = OpAccessChain %527 %88 
                                                      OpStore %652 %651 
                                Private f32* %654 = OpAccessChain %131 %94 
                                         f32 %655 = OpLoad %654 
                                         f32 %656 = OpFNegate %655 
                                Private f32* %657 = OpAccessChain %131 %88 
                                         f32 %658 = OpLoad %657 
                                         f32 %659 = OpFAdd %656 %658 
                                Private f32* %660 = OpAccessChain %653 %36 
                                                      OpStore %660 %659 
                                Private f32* %661 = OpAccessChain %653 %36 
                                         f32 %662 = OpLoad %661 
                                Private f32* %663 = OpAccessChain %410 %36 
                                         f32 %664 = OpLoad %663 
                                         f32 %665 = OpFDiv %662 %664 
                                Private f32* %666 = OpAccessChain %527 %36 
                                                      OpStore %666 %665 
                                Private f32* %667 = OpAccessChain %653 %88 
                                                      OpStore %667 %43 
                                      bool_2 %669 = OpLoad %355 
                                        bool %670 = OpCompositeExtract %669 0 
                                                      OpSelectionMerge %672 None 
                                                      OpBranchConditional %670 %671 %674 
                                             %671 = OpLabel 
                                       f32_2 %673 = OpLoad %527 
                                                      OpStore %668 %673 
                                                      OpBranch %672 
                                             %674 = OpLabel 
                                       f32_2 %675 = OpLoad %653 
                                                      OpStore %668 %675 
                                                      OpBranch %672 
                                             %672 = OpLabel 
                                       f32_2 %676 = OpLoad %668 
                                       f32_3 %677 = OpLoad %410 
                                       f32_3 %678 = OpVectorShuffle %677 %676 0 3 4 
                                                      OpStore %410 %678 
                                Private f32* %680 = OpAccessChain %410 %88 
                                         f32 %681 = OpLoad %680 
                                         f32 %682 = OpFMul %681 %454 
                                                      OpStore %679 %682 
                                Private f32* %684 = OpAccessChain %410 %88 
                                         f32 %685 = OpLoad %684 
                                        bool %686 = OpFOrdLessThan %685 %458 
                                      bool_2 %687 = OpLoad %683 
                                      bool_2 %688 = OpCompositeInsert %686 %687 0 
                                                      OpStore %683 %688 
                                Private f32* %689 = OpAccessChain %410 %88 
                                         f32 %690 = OpLoad %689 
                                         f32 %691 = OpFMul %690 %454 
                                         f32 %692 = OpFAdd %691 %158 
                                Private f32* %693 = OpAccessChain %527 %36 
                                                      OpStore %693 %692 
                                      bool_2 %695 = OpLoad %683 
                                        bool %696 = OpCompositeExtract %695 0 
                                                      OpSelectionMerge %698 None 
                                                      OpBranchConditional %696 %697 %701 
                                             %697 = OpLabel 
                                Private f32* %699 = OpAccessChain %527 %36 
                                         f32 %700 = OpLoad %699 
                                                      OpStore %694 %700 
                                                      OpBranch %698 
                                             %701 = OpLabel 
                                         f32 %702 = OpLoad %679 
                                                      OpStore %694 %702 
                                                      OpBranch %698 
                                             %698 = OpLabel 
                                         f32 %703 = OpLoad %694 
                                Private f32* %704 = OpAccessChain %410 %36 
                                                      OpStore %704 %703 
                                        bool %706 = OpLoad %40 
                                                      OpSelectionMerge %708 None 
                                                      OpBranchConditional %706 %707 %711 
                                             %707 = OpLabel 
                                       f32_3 %709 = OpLoad %410 
                                       f32_2 %710 = OpVectorShuffle %709 %709 0 2 
                                                      OpStore %705 %710 
                                                      OpBranch %708 
                                             %711 = OpLabel 
                                                      OpStore %705 %486 
                                                      OpBranch %708 
                                             %708 = OpLabel 
                                       f32_2 %712 = OpLoad %705 
                                       f32_3 %713 = OpLoad %380 
                                       f32_3 %714 = OpVectorShuffle %713 %712 3 1 4 
                                                      OpStore %380 %714 
                                                      OpBranch %498 
                                             %498 = OpLabel 
                                                      OpBranch %369 
                                             %369 = OpLabel 
                              Uniform f32_4* %716 = OpAccessChain %29 %715 
                                       f32_4 %717 = OpLoad %716 
                                       f32_4 %718 = OpVectorShuffle %717 %717 1 0 1 1 
                              Uniform f32_4* %719 = OpAccessChain %29 %715 
                                       f32_4 %720 = OpLoad %719 
                                       f32_4 %721 = OpVectorShuffle %720 %720 2 2 2 2 
                                      bool_4 %722 = OpFOrdLessThan %718 %721 
                                      bool_2 %723 = OpVectorShuffle %722 %722 0 1 
                                                      OpStore %683 %723 
                                      bool_2 %724 = OpLoad %683 
                                        bool %725 = OpCompositeExtract %724 1 
                                      bool_2 %726 = OpLoad %683 
                                        bool %727 = OpCompositeExtract %726 0 
                                        bool %728 = OpLogicalAnd %725 %727 
                                      bool_2 %729 = OpLoad %683 
                                      bool_2 %730 = OpCompositeInsert %728 %729 0 
                                                      OpStore %683 %730 
                                      bool_2 %731 = OpLoad %683 
                                        bool %732 = OpCompositeExtract %731 0 
                                                      OpSelectionMerge %734 None 
                                                      OpBranchConditional %732 %733 %842 
                                             %733 = OpLabel 
                                Uniform f32* %735 = OpAccessChain %29 %715 %94 
                                         f32 %736 = OpLoad %735 
                                        bool %737 = OpFOrdNotEqual %736 %43 
                                      bool_2 %738 = OpLoad %683 
                                      bool_2 %739 = OpCompositeInsert %737 %738 0 
                                                      OpStore %683 %739 
                                Uniform f32* %740 = OpAccessChain %29 %715 %88 
                                         f32 %741 = OpLoad %740 
                                Uniform f32* %742 = OpAccessChain %29 %715 %36 
                                         f32 %743 = OpLoad %742 
                                         f32 %744 = OpExtInst %1 37 %741 %743 
                                Private f32* %745 = OpAccessChain %410 %36 
                                                      OpStore %745 %744 
                                Private f32* %746 = OpAccessChain %410 %36 
                                         f32 %747 = OpLoad %746 
                                         f32 %748 = OpFNegate %747 
                                Uniform f32* %749 = OpAccessChain %29 %715 %94 
                                         f32 %750 = OpLoad %749 
                                         f32 %751 = OpFAdd %748 %750 
                                Private f32* %752 = OpAccessChain %410 %36 
                                                      OpStore %752 %751 
                                Private f32* %754 = OpAccessChain %410 %36 
                                         f32 %755 = OpLoad %754 
                                        bool %756 = OpFOrdNotEqual %755 %43 
                                      bool_2 %757 = OpLoad %753 
                                      bool_2 %758 = OpCompositeInsert %756 %757 0 
                                                      OpStore %753 %758 
                                Private f32* %759 = OpAccessChain %410 %36 
                                         f32 %760 = OpLoad %759 
                                Uniform f32* %761 = OpAccessChain %29 %715 %94 
                                         f32 %762 = OpLoad %761 
                                         f32 %763 = OpFDiv %760 %762 
                                Private f32* %764 = OpAccessChain %527 %36 
                                                      OpStore %764 %763 
                                Uniform f32* %765 = OpAccessChain %29 %715 %88 
                                         f32 %766 = OpLoad %765 
                                         f32 %767 = OpFNegate %766 
                                Uniform f32* %768 = OpAccessChain %29 %715 %36 
                                         f32 %769 = OpLoad %768 
                                         f32 %770 = OpFAdd %767 %769 
                                Private f32* %771 = OpAccessChain %410 %94 
                                                      OpStore %771 %770 
                                Private f32* %772 = OpAccessChain %410 %94 
                                         f32 %773 = OpLoad %772 
                                Private f32* %774 = OpAccessChain %410 %36 
                                         f32 %775 = OpLoad %774 
                                         f32 %776 = OpFDiv %773 %775 
                                Private f32* %777 = OpAccessChain %410 %36 
                                                      OpStore %777 %776 
                                       f32_3 %779 = OpLoad %410 
                                       f32_2 %780 = OpVectorShuffle %779 %779 0 2 
                                       f32_2 %782 = OpFAdd %780 %781 
                                                      OpStore %778 %782 
                                      bool_2 %784 = OpLoad %753 
                                        bool %785 = OpCompositeExtract %784 0 
                                                      OpSelectionMerge %787 None 
                                                      OpBranchConditional %785 %786 %790 
                                             %786 = OpLabel 
                                Private f32* %788 = OpAccessChain %778 %36 
                                         f32 %789 = OpLoad %788 
                                                      OpStore %783 %789 
                                                      OpBranch %787 
                                             %790 = OpLabel 
                                Private f32* %791 = OpAccessChain %778 %88 
                                         f32 %792 = OpLoad %791 
                                                      OpStore %783 %792 
                                                      OpBranch %787 
                                             %787 = OpLabel 
                                         f32 %793 = OpLoad %783 
                                Private f32* %794 = OpAccessChain %410 %36 
                                                      OpStore %794 %793 
                                      bool_2 %796 = OpLoad %753 
                                        bool %797 = OpCompositeExtract %796 0 
                                                      OpSelectionMerge %799 None 
                                                      OpBranchConditional %797 %798 %802 
                                             %798 = OpLabel 
                                Private f32* %800 = OpAccessChain %527 %36 
                                         f32 %801 = OpLoad %800 
                                                      OpStore %795 %801 
                                                      OpBranch %799 
                                             %802 = OpLabel 
                                                      OpStore %795 %43 
                                                      OpBranch %799 
                                             %799 = OpLabel 
                                         f32 %803 = OpLoad %795 
                                Private f32* %804 = OpAccessChain %565 %94 
                                                      OpStore %804 %803 
                                Private f32* %805 = OpAccessChain %410 %36 
                                         f32 %806 = OpLoad %805 
                                         f32 %807 = OpFMul %806 %454 
                                Private f32* %808 = OpAccessChain %527 %36 
                                                      OpStore %808 %807 
                                Private f32* %809 = OpAccessChain %410 %36 
                                         f32 %810 = OpLoad %809 
                                        bool %811 = OpFOrdLessThan %810 %458 
                                      bool_2 %812 = OpLoad %753 
                                      bool_2 %813 = OpCompositeInsert %811 %812 0 
                                                      OpStore %753 %813 
                                Private f32* %814 = OpAccessChain %410 %36 
                                         f32 %815 = OpLoad %814 
                                         f32 %816 = OpFMul %815 %454 
                                         f32 %817 = OpFAdd %816 %158 
                                Private f32* %818 = OpAccessChain %410 %36 
                                                      OpStore %818 %817 
                                      bool_2 %820 = OpLoad %753 
                                        bool %821 = OpCompositeExtract %820 0 
                                                      OpSelectionMerge %823 None 
                                                      OpBranchConditional %821 %822 %826 
                                             %822 = OpLabel 
                                Private f32* %824 = OpAccessChain %410 %36 
                                         f32 %825 = OpLoad %824 
                                                      OpStore %819 %825 
                                                      OpBranch %823 
                                             %826 = OpLabel 
                                Private f32* %827 = OpAccessChain %527 %36 
                                         f32 %828 = OpLoad %827 
                                                      OpStore %819 %828 
                                                      OpBranch %823 
                                             %823 = OpLabel 
                                         f32 %829 = OpLoad %819 
                                Private f32* %830 = OpAccessChain %565 %36 
                                                      OpStore %830 %829 
                                      bool_2 %832 = OpLoad %683 
                                        bool %833 = OpCompositeExtract %832 0 
                                                      OpSelectionMerge %835 None 
                                                      OpBranchConditional %833 %834 %838 
                                             %834 = OpLabel 
                                       f32_3 %836 = OpLoad %565 
                                       f32_2 %837 = OpVectorShuffle %836 %836 0 2 
                                                      OpStore %831 %837 
                                                      OpBranch %835 
                                             %838 = OpLabel 
                                                      OpStore %831 %486 
                                                      OpBranch %835 
                                             %835 = OpLabel 
                                       f32_2 %839 = OpLoad %831 
                                       f32_3 %840 = OpLoad %410 
                                       f32_3 %841 = OpVectorShuffle %840 %839 3 4 2 
                                                      OpStore %410 %841 
                                                      OpBranch %734 
                                             %842 = OpLabel 
                                Uniform f32* %843 = OpAccessChain %29 %715 %36 
                                         f32 %844 = OpLoad %843 
                                Uniform f32* %845 = OpAccessChain %29 %715 %88 
                                         f32 %846 = OpLoad %845 
                                        bool %847 = OpFOrdLessThan %844 %846 
                                      bool_2 %848 = OpLoad %683 
                                      bool_2 %849 = OpCompositeInsert %847 %848 0 
                                                      OpStore %683 %849 
                                                      OpSelectionMerge %851 None 
                                                      OpBranchConditional %55 %850 %851 
                                             %850 = OpLabel 
                                      bool_2 %852 = OpLoad %683 
                                        bool %853 = OpCompositeExtract %852 0 
                                                      OpSelectionMerge %855 None 
                                                      OpBranchConditional %853 %854 %855 
                                             %854 = OpLabel 
                                                      OpBranch %855 
                                             %855 = OpLabel 
                                                      OpBranch %851 
                                             %851 = OpLabel 
                                                      OpSelectionMerge %858 None 
                                                      OpBranchConditional %856 %857 %963 
                                             %857 = OpLabel 
                                Uniform f32* %859 = OpAccessChain %29 %715 %88 
                                         f32 %860 = OpLoad %859 
                                        bool %861 = OpFOrdNotEqual %860 %43 
                                      bool_2 %862 = OpLoad %683 
                                      bool_2 %863 = OpCompositeInsert %861 %862 0 
                                                      OpStore %683 %863 
                                Uniform f32* %865 = OpAccessChain %29 %715 %36 
                                         f32 %866 = OpLoad %865 
                                Uniform f32* %867 = OpAccessChain %29 %715 %94 
                                         f32 %868 = OpLoad %867 
                                         f32 %869 = OpExtInst %1 37 %866 %868 
                                Private f32* %870 = OpAccessChain %864 %36 
                                                      OpStore %870 %869 
                                Private f32* %871 = OpAccessChain %864 %36 
                                         f32 %872 = OpLoad %871 
                                         f32 %873 = OpFNegate %872 
                                Uniform f32* %874 = OpAccessChain %29 %715 %88 
                                         f32 %875 = OpLoad %874 
                                         f32 %876 = OpFAdd %873 %875 
                                Private f32* %877 = OpAccessChain %864 %36 
                                                      OpStore %877 %876 
                                Private f32* %878 = OpAccessChain %864 %36 
                                         f32 %879 = OpLoad %878 
                                        bool %880 = OpFOrdNotEqual %879 %43 
                                      bool_2 %881 = OpLoad %753 
                                      bool_2 %882 = OpCompositeInsert %880 %881 0 
                                                      OpStore %753 %882 
                                Private f32* %883 = OpAccessChain %864 %36 
                                         f32 %884 = OpLoad %883 
                                Uniform f32* %885 = OpAccessChain %29 %715 %88 
                                         f32 %886 = OpLoad %885 
                                         f32 %887 = OpFDiv %884 %886 
                                                      OpStore %679 %887 
                                Uniform f32* %888 = OpAccessChain %29 %715 %36 
                                         f32 %889 = OpLoad %888 
                                         f32 %890 = OpFNegate %889 
                                Uniform f32* %891 = OpAccessChain %29 %715 %94 
                                         f32 %892 = OpLoad %891 
                                         f32 %893 = OpFAdd %890 %892 
                                Private f32* %894 = OpAccessChain %565 %36 
                                                      OpStore %894 %893 
                                Private f32* %895 = OpAccessChain %565 %36 
                                         f32 %896 = OpLoad %895 
                                Private f32* %897 = OpAccessChain %864 %36 
                                         f32 %898 = OpLoad %897 
                                         f32 %899 = OpFDiv %896 %898 
                                Private f32* %900 = OpAccessChain %864 %36 
                                                      OpStore %900 %899 
                                Private f32* %901 = OpAccessChain %864 %36 
                                         f32 %902 = OpLoad %901 
                                         f32 %903 = OpFAdd %902 %550 
                                Private f32* %904 = OpAccessChain %778 %36 
                                                      OpStore %904 %903 
                                Private f32* %905 = OpAccessChain %565 %36 
                                         f32 %906 = OpLoad %905 
                                         f32 %907 = OpFAdd %906 %550 
                                                      OpStore %87 %907 
                                      bool_2 %909 = OpLoad %753 
                                        bool %910 = OpCompositeExtract %909 0 
                                                      OpSelectionMerge %912 None 
                                                      OpBranchConditional %910 %911 %915 
                                             %911 = OpLabel 
                                Private f32* %913 = OpAccessChain %778 %36 
                                         f32 %914 = OpLoad %913 
                                                      OpStore %908 %914 
                                                      OpBranch %912 
                                             %915 = OpLabel 
                                         f32 %916 = OpLoad %87 
                                                      OpStore %908 %916 
                                                      OpBranch %912 
                                             %912 = OpLabel 
                                         f32 %917 = OpLoad %908 
                                Private f32* %918 = OpAccessChain %864 %36 
                                                      OpStore %918 %917 
                                      bool_2 %920 = OpLoad %753 
                                        bool %921 = OpCompositeExtract %920 0 
                                                      OpSelectionMerge %923 None 
                                                      OpBranchConditional %921 %922 %925 
                                             %922 = OpLabel 
                                         f32 %924 = OpLoad %679 
                                                      OpStore %919 %924 
                                                      OpBranch %923 
                                             %925 = OpLabel 
                                                      OpStore %919 %43 
                                                      OpBranch %923 
                                             %923 = OpLabel 
                                         f32 %926 = OpLoad %919 
                                Private f32* %927 = OpAccessChain %565 %94 
                                                      OpStore %927 %926 
                                Private f32* %928 = OpAccessChain %864 %36 
                                         f32 %929 = OpLoad %928 
                                         f32 %930 = OpFMul %929 %454 
                                                      OpStore %679 %930 
                                Private f32* %931 = OpAccessChain %864 %36 
                                         f32 %932 = OpLoad %931 
                                        bool %933 = OpFOrdLessThan %932 %458 
                                      bool_2 %934 = OpLoad %753 
                                      bool_2 %935 = OpCompositeInsert %933 %934 0 
                                                      OpStore %753 %935 
                                Private f32* %936 = OpAccessChain %864 %36 
                                         f32 %937 = OpLoad %936 
                                         f32 %938 = OpFMul %937 %454 
                                         f32 %939 = OpFAdd %938 %158 
                                Private f32* %940 = OpAccessChain %864 %36 
                                                      OpStore %940 %939 
                                      bool_2 %942 = OpLoad %753 
                                        bool %943 = OpCompositeExtract %942 0 
                                                      OpSelectionMerge %945 None 
                                                      OpBranchConditional %943 %944 %948 
                                             %944 = OpLabel 
                                Private f32* %946 = OpAccessChain %864 %36 
                                         f32 %947 = OpLoad %946 
                                                      OpStore %941 %947 
                                                      OpBranch %945 
                                             %948 = OpLabel 
                                         f32 %949 = OpLoad %679 
                                                      OpStore %941 %949 
                                                      OpBranch %945 
                                             %945 = OpLabel 
                                         f32 %950 = OpLoad %941 
                                Private f32* %951 = OpAccessChain %565 %36 
                                                      OpStore %951 %950 
                                      bool_2 %953 = OpLoad %683 
                                        bool %954 = OpCompositeExtract %953 0 
                                                      OpSelectionMerge %956 None 
                                                      OpBranchConditional %954 %955 %959 
                                             %955 = OpLabel 
                                       f32_3 %957 = OpLoad %565 
                                       f32_2 %958 = OpVectorShuffle %957 %957 0 2 
                                                      OpStore %952 %958 
                                                      OpBranch %956 
                                             %959 = OpLabel 
                                                      OpStore %952 %486 
                                                      OpBranch %956 
                                             %956 = OpLabel 
                                       f32_2 %960 = OpLoad %952 
                                       f32_3 %961 = OpLoad %410 
                                       f32_3 %962 = OpVectorShuffle %961 %960 3 4 2 
                                                      OpStore %410 %962 
                                                      OpBranch %858 
                                             %963 = OpLabel 
                                Uniform f32* %964 = OpAccessChain %29 %715 %36 
                                         f32 %965 = OpLoad %964 
                                        bool %966 = OpFOrdNotEqual %965 %43 
                                      bool_2 %967 = OpLoad %683 
                                      bool_2 %968 = OpCompositeInsert %966 %967 0 
                                                      OpStore %683 %968 
                                Uniform f32* %969 = OpAccessChain %29 %715 %94 
                                         f32 %970 = OpLoad %969 
                                Uniform f32* %971 = OpAccessChain %29 %715 %88 
                                         f32 %972 = OpLoad %971 
                                         f32 %973 = OpExtInst %1 37 %970 %972 
                                Private f32* %974 = OpAccessChain %864 %36 
                                                      OpStore %974 %973 
                                Private f32* %975 = OpAccessChain %864 %36 
                                         f32 %976 = OpLoad %975 
                                         f32 %977 = OpFNegate %976 
                                Uniform f32* %978 = OpAccessChain %29 %715 %36 
                                         f32 %979 = OpLoad %978 
                                         f32 %980 = OpFAdd %977 %979 
                                Private f32* %981 = OpAccessChain %864 %36 
                                                      OpStore %981 %980 
                                Private f32* %982 = OpAccessChain %864 %36 
                                         f32 %983 = OpLoad %982 
                                        bool %984 = OpFOrdNotEqual %983 %43 
                                      bool_2 %985 = OpLoad %753 
                                      bool_2 %986 = OpCompositeInsert %984 %985 0 
                                                      OpStore %753 %986 
                                Private f32* %987 = OpAccessChain %864 %36 
                                         f32 %988 = OpLoad %987 
                                Uniform f32* %989 = OpAccessChain %29 %715 %36 
                                         f32 %990 = OpLoad %989 
                                         f32 %991 = OpFDiv %988 %990 
                                Private f32* %992 = OpAccessChain %653 %88 
                                                      OpStore %992 %991 
                                Uniform f32* %994 = OpAccessChain %29 %715 %94 
                                         f32 %995 = OpLoad %994 
                                         f32 %996 = OpFNegate %995 
                                Uniform f32* %997 = OpAccessChain %29 %715 %88 
                                         f32 %998 = OpLoad %997 
                                         f32 %999 = OpFAdd %996 %998 
                               Private f32* %1000 = OpAccessChain %993 %36 
                                                      OpStore %1000 %999 
                               Private f32* %1001 = OpAccessChain %993 %36 
                                        f32 %1002 = OpLoad %1001 
                               Private f32* %1003 = OpAccessChain %864 %36 
                                        f32 %1004 = OpLoad %1003 
                                        f32 %1005 = OpFDiv %1002 %1004 
                               Private f32* %1006 = OpAccessChain %653 %36 
                                                      OpStore %1006 %1005 
                               Private f32* %1007 = OpAccessChain %993 %88 
                                                      OpStore %1007 %43 
                                     bool_2 %1009 = OpLoad %753 
                                       bool %1010 = OpCompositeExtract %1009 0 
                                                      OpSelectionMerge %1012 None 
                                                      OpBranchConditional %1010 %1011 %1014 
                                            %1011 = OpLabel 
                                      f32_2 %1013 = OpLoad %653 
                                                      OpStore %1008 %1013 
                                                      OpBranch %1012 
                                            %1014 = OpLabel 
                                      f32_2 %1015 = OpLoad %993 
                                                      OpStore %1008 %1015 
                                                      OpBranch %1012 
                                            %1012 = OpLabel 
                                      f32_2 %1016 = OpLoad %1008 
                                      f32_3 %1017 = OpLoad %565 
                                      f32_3 %1018 = OpVectorShuffle %1017 %1016 0 3 4 
                                                      OpStore %565 %1018 
                               Private f32* %1019 = OpAccessChain %565 %88 
                                        f32 %1020 = OpLoad %1019 
                                        f32 %1021 = OpFMul %1020 %454 
                               Private f32* %1022 = OpAccessChain %864 %36 
                                                      OpStore %1022 %1021 
                               Private f32* %1023 = OpAccessChain %565 %88 
                                        f32 %1024 = OpLoad %1023 
                                       bool %1025 = OpFOrdLessThan %1024 %458 
                                     bool_2 %1026 = OpLoad %753 
                                     bool_2 %1027 = OpCompositeInsert %1025 %1026 0 
                                                      OpStore %753 %1027 
                               Private f32* %1028 = OpAccessChain %565 %88 
                                        f32 %1029 = OpLoad %1028 
                                        f32 %1030 = OpFMul %1029 %454 
                                        f32 %1031 = OpFAdd %1030 %158 
                                                      OpStore %679 %1031 
                                     bool_2 %1033 = OpLoad %753 
                                       bool %1034 = OpCompositeExtract %1033 0 
                                                      OpSelectionMerge %1036 None 
                                                      OpBranchConditional %1034 %1035 %1038 
                                            %1035 = OpLabel 
                                        f32 %1037 = OpLoad %679 
                                                      OpStore %1032 %1037 
                                                      OpBranch %1036 
                                            %1038 = OpLabel 
                               Private f32* %1039 = OpAccessChain %864 %36 
                                        f32 %1040 = OpLoad %1039 
                                                      OpStore %1032 %1040 
                                                      OpBranch %1036 
                                            %1036 = OpLabel 
                                        f32 %1041 = OpLoad %1032 
                               Private f32* %1042 = OpAccessChain %565 %36 
                                                      OpStore %1042 %1041 
                                     bool_2 %1044 = OpLoad %683 
                                       bool %1045 = OpCompositeExtract %1044 0 
                                                      OpSelectionMerge %1047 None 
                                                      OpBranchConditional %1045 %1046 %1050 
                                            %1046 = OpLabel 
                                      f32_3 %1048 = OpLoad %565 
                                      f32_2 %1049 = OpVectorShuffle %1048 %1048 0 2 
                                                      OpStore %1043 %1049 
                                                      OpBranch %1047 
                                            %1050 = OpLabel 
                                                      OpStore %1043 %486 
                                                      OpBranch %1047 
                                            %1047 = OpLabel 
                                      f32_2 %1051 = OpLoad %1043 
                                      f32_3 %1052 = OpLoad %410 
                                      f32_3 %1053 = OpVectorShuffle %1052 %1051 3 4 2 
                                                      OpStore %410 %1053 
                                                      OpBranch %858 
                                             %858 = OpLabel 
                                                      OpBranch %734 
                                             %734 = OpLabel 
                                      f32_3 %1054 = OpLoad %410 
                                      f32_2 %1055 = OpVectorShuffle %1054 %1054 1 0 
                               Uniform f32* %1057 = OpAccessChain %29 %1056 
                                        f32 %1058 = OpLoad %1057 
                               Uniform f32* %1060 = OpAccessChain %29 %1059 
                                        f32 %1061 = OpLoad %1060 
                                      f32_2 %1062 = OpCompositeConstruct %1058 %1061 
                                      f32_2 %1063 = OpFNegate %1062 
                                      f32_2 %1064 = OpFAdd %1055 %1063 
                                                      OpStore %864 %1064 
                                      f32_3 %1065 = OpLoad %380 
                                      f32_4 %1066 = OpVectorShuffle %1065 %1065 2 0 2 2 
                                      f32_2 %1067 = OpLoad %864 
                                      f32_4 %1068 = OpVectorShuffle %1067 %1067 0 1 0 0 
                                     bool_4 %1069 = OpFOrdLessThan %1066 %1068 
                                     bool_2 %1070 = OpVectorShuffle %1069 %1069 0 1 
                                                      OpStore %683 %1070 
                               Private f32* %1071 = OpAccessChain %864 %88 
                                        f32 %1072 = OpLoad %1071 
                                        f32 %1073 = OpFAdd %1072 %158 
                               Private f32* %1074 = OpAccessChain %864 %36 
                                                      OpStore %1074 %1073 
                               Private f32* %1076 = OpAccessChain %380 %36 
                                        f32 %1077 = OpLoad %1076 
                               Private f32* %1078 = OpAccessChain %864 %36 
                                        f32 %1079 = OpLoad %1078 
                                       bool %1080 = OpFOrdLessThan %1077 %1079 
                                                      OpStore %1075 %1080 
                                       bool %1081 = OpLoad %1075 
                                     bool_2 %1082 = OpLoad %683 
                                       bool %1083 = OpCompositeExtract %1082 1 
                                       bool %1084 = OpLogicalAnd %1081 %1083 
                                     bool_2 %1085 = OpLoad %753 
                                     bool_2 %1086 = OpCompositeInsert %1084 %1085 0 
                                                      OpStore %753 %1086 
                                     bool_2 %1087 = OpLoad %753 
                                       bool %1088 = OpCompositeExtract %1087 0 
                                     bool_2 %1089 = OpLoad %683 
                                       bool %1090 = OpCompositeExtract %1089 0 
                                       bool %1091 = OpLogicalOr %1088 %1090 
                                     bool_2 %1092 = OpLoad %683 
                                     bool_2 %1093 = OpCompositeInsert %1091 %1092 0 
                                                      OpStore %683 %1093 
                                      f32_3 %1094 = OpLoad %410 
                                      f32_2 %1095 = OpVectorShuffle %1094 %1094 1 0 
                               Uniform f32* %1096 = OpAccessChain %29 %1056 
                                        f32 %1097 = OpLoad %1096 
                               Uniform f32* %1098 = OpAccessChain %29 %1059 
                                        f32 %1099 = OpLoad %1098 
                                      f32_2 %1100 = OpCompositeConstruct %1097 %1099 
                                      f32_2 %1101 = OpFAdd %1095 %1100 
                                      f32_3 %1102 = OpLoad %410 
                                      f32_3 %1103 = OpVectorShuffle %1102 %1101 3 4 2 
                                                      OpStore %410 %1103 
                                      f32_3 %1104 = OpLoad %410 
                                      f32_4 %1105 = OpVectorShuffle %1104 %1104 0 1 0 0 
                                      f32_3 %1106 = OpLoad %380 
                                      f32_4 %1107 = OpVectorShuffle %1106 %1106 2 0 2 2 
                                     bool_4 %1108 = OpFOrdLessThan %1105 %1107 
                                     bool_2 %1109 = OpVectorShuffle %1108 %1108 0 1 
                                                      OpStore %753 %1109 
                               Private f32* %1110 = OpAccessChain %410 %88 
                                        f32 %1111 = OpLoad %1110 
                                        f32 %1113 = OpFAdd %1111 %1112 
                                                      OpStore %268 %1113 
                                        f32 %1114 = OpLoad %268 
                               Private f32* %1115 = OpAccessChain %380 %36 
                                        f32 %1116 = OpLoad %1115 
                                       bool %1117 = OpFOrdLessThan %1114 %1116 
                                                      OpStore %40 %1117 
                                       bool %1118 = OpLoad %40 
                                     bool_2 %1119 = OpLoad %753 
                                       bool %1120 = OpCompositeExtract %1119 1 
                                       bool %1121 = OpLogicalAnd %1118 %1120 
                                                      OpStore %1075 %1121 
                                       bool %1122 = OpLoad %1075 
                                     bool_2 %1123 = OpLoad %753 
                                       bool %1124 = OpCompositeExtract %1123 0 
                                       bool %1125 = OpLogicalOr %1122 %1124 
                                     bool_2 %1126 = OpLoad %753 
                                     bool_2 %1127 = OpCompositeInsert %1125 %1126 0 
                                                      OpStore %753 %1127 
                               Private f32* %1128 = OpAccessChain %20 %94 
                                                      OpStore %1128 %43 
                                     bool_2 %1130 = OpLoad %753 
                                       bool %1131 = OpCompositeExtract %1130 0 
                                                      OpSelectionMerge %1133 None 
                                                      OpBranchConditional %1131 %1132 %1136 
                                            %1132 = OpLabel 
                             Uniform f32_4* %1134 = OpAccessChain %29 %311 
                                      f32_4 %1135 = OpLoad %1134 
                                                      OpStore %1129 %1135 
                                                      OpBranch %1133 
                                            %1136 = OpLabel 
                                      f32_4 %1137 = OpLoad %20 
                                      f32_4 %1138 = OpVectorShuffle %1137 %1137 0 0 0 2 
                                                      OpStore %1129 %1138 
                                                      OpBranch %1133 
                                            %1133 = OpLabel 
                                      f32_4 %1139 = OpLoad %1129 
                                                      OpStore %20 %1139 
                                     bool_2 %1141 = OpLoad %683 
                                       bool %1142 = OpCompositeExtract %1141 0 
                                                      OpSelectionMerge %1144 None 
                                                      OpBranchConditional %1142 %1143 %1147 
                                            %1143 = OpLabel 
                             Uniform f32_4* %1145 = OpAccessChain %29 %324 
                                      f32_4 %1146 = OpLoad %1145 
                                                      OpStore %1140 %1146 
                                                      OpBranch %1144 
                                            %1147 = OpLabel 
                                      f32_4 %1148 = OpLoad %20 
                                                      OpStore %1140 %1148 
                                                      OpBranch %1144 
                                            %1144 = OpLabel 
                                      f32_4 %1149 = OpLoad %1140 
                                                      OpStore %319 %1149 
                                                      OpBranch %349 
                                             %349 = OpLabel 
                                                      OpBranch %338 
                                             %338 = OpLabel 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                                      OpBranch %68 
                                            %1150 = OpLabel 
                               Uniform i32* %1151 = OpAccessChain %29 %58 
                                        i32 %1152 = OpLoad %1151 
                                       bool %1153 = OpIEqual %1152 %47 
                                     bool_2 %1154 = OpLoad %683 
                                     bool_2 %1155 = OpCompositeInsert %1153 %1154 0 
                                                      OpStore %683 %1155 
                                     bool_2 %1157 = OpLoad %683 
                                       bool %1158 = OpCompositeExtract %1157 0 
                                                      OpSelectionMerge %1160 None 
                                                      OpBranchConditional %1158 %1159 %1163 
                                            %1159 = OpLabel 
                             Uniform f32_4* %1161 = OpAccessChain %29 %324 
                                      f32_4 %1162 = OpLoad %1161 
                                                      OpStore %1156 %1162 
                                                      OpBranch %1160 
                                            %1163 = OpLabel 
                                                      OpStore %1156 %1164 
                                                      OpBranch %1160 
                                            %1160 = OpLabel 
                                      f32_4 %1165 = OpLoad %1156 
                                                      OpStore %319 %1165 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD2;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixVP[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[2].xy * u_xlat0.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixVP[3].xy * u_xlat0.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	vec4 _EmissiveColor;
uniform 	float _EmissiveThresholdSensitivity;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float unity_UseLinearSpace;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ParallaxTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec2 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_3;
float u_xlat12;
float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat12 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat16_12 = dot(u_xlat10_0.xyz, vec3(0.298900008, 0.586600006, 0.114500001));
    u_xlat16_1.xy = (-vec2(u_xlat16_12)) + u_xlat10_0.xz;
    u_xlat16_1.xy = u_xlat16_1.xy + vec2(1.0, 1.0);
    u_xlat16_12 = (-u_xlat16_1.x) * 0.298900008 + 1.0;
    u_xlat16_12 = (-u_xlat16_1.y) * 0.114500001 + u_xlat16_12;
    u_xlat1.xz = log2(u_xlat16_1.xy);
    u_xlat16_12 = u_xlat16_12 * 1.70473921;
    u_xlat1.y = log2(u_xlat16_12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat2.xyz = u_xlat10_0.xyz + (-_EmissiveColor.xyz);
    u_xlat2.xy = u_xlat2.xy * u_xlat2.xy;
    u_xlat12 = u_xlat2.y + u_xlat2.x;
    u_xlat12 = u_xlat2.z * u_xlat2.z + u_xlat12;
    u_xlat12 = sqrt(u_xlat12);
    u_xlatb12 = u_xlat12<_EmissiveThresholdSensitivity;
    u_xlat2.xy = mix(vec2(0.0, 0.0), vec2(1.0, 0.75), vec2(bvec2(u_xlatb12)));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xxx;
    u_xlat2.xzw = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xzw = u_xlat1.xyz * u_xlat2.xzw + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat2.xzw = u_xlat1.xyz * u_xlat2.xzw;
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
    u_xlat1.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat2.xzw;
    u_xlat10_3 = texture(_ParallaxTex, vs_TEXCOORD2.xy);
    u_xlat16_2.xzw = (-u_xlat10_0.xyz) + u_xlat10_3.xyz;
    u_xlat0.xyz = u_xlat2.yyy * u_xlat16_2.xzw + u_xlat10_0.xyz;
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat12 = unity_OneOverOutputBoost;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.w = 1.0;
    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat1 : u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 284
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %13 %32 %89 %166 %255 %263 %264 %276 
                                                      OpDecorate %13 Location 13 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %164 0 BuiltIn 164 
                                                      OpMemberDecorate %164 1 BuiltIn 164 
                                                      OpMemberDecorate %164 2 BuiltIn 164 
                                                      OpDecorate %164 Block 
                                                      OpDecorate %255 Location 255 
                                                      OpDecorate %263 Location 263 
                                                      OpDecorate %264 Location 264 
                                                      OpDecorate %276 Location 276 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypePointer Input %11 
                                 Input f32_4* %13 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 2 
                                              %16 = OpTypePointer Input %9 
                                              %20 = OpTypePointer Private %11 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypePointer Function %9 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %30 = OpTypePointer Private %9 
                                 Input f32_4* %32 = OpVariable Input 
                                              %33 = OpTypeVector %9 2 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %11 %36 
                                              %38 = OpTypeArray %11 %36 
                                              %39 = OpTypeVector %14 4 
                                              %40 = OpTypeStruct %37 %38 %11 %11 %39 %11 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 2 
                                              %45 = OpTypePointer Uniform %11 
                                              %56 = OpTypeVector %9 3 
                                              %57 = OpTypePointer Function %56 
                                          i32 %59 = OpConstant 4 
                                              %60 = OpTypeVector %6 4 
                                              %61 = OpTypePointer Uniform %39 
                                          u32 %65 = OpConstant 0 
                                Private bool* %77 = OpVariable Private 
                               Private f32_4* %81 = OpVariable Private 
                                 Input f32_4* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                                         i32 %120 = OpConstant 0 
                                         i32 %121 = OpConstant 1 
                                         u32 %162 = OpConstant 1 
                                             %163 = OpTypeArray %9 %162 
                                             %164 = OpTypeStruct %11 %9 %163 
                                             %165 = OpTypePointer Output %164 
        Output struct {f32_4; f32; f32[1];}* %166 = OpVariable Output 
                                             %174 = OpTypePointer Output %11 
                                         f32 %242 = OpConstant 3.674022E-40 
                                       f32_2 %243 = OpConstantComposite %242 %242 
                                         f32 %249 = OpConstant 3.674022E-40 
                                       f32_2 %250 = OpConstantComposite %249 %249 
                                             %254 = OpTypePointer Output %33 
                               Output f32_2* %255 = OpVariable Output 
                                         f32 %258 = OpConstant 3.674022E-40 
                                       f32_2 %259 = OpConstantComposite %242 %258 
                                       f32_2 %261 = OpConstantComposite %10 %242 
                               Output f32_2* %263 = OpVariable Output 
                                Input f32_4* %264 = OpVariable Input 
                                         i32 %267 = OpConstant 5 
                               Output f32_4* %276 = OpVariable Output 
                                       f32_4 %277 = OpConstantComposite %10 %10 %10 %10 
                                             %278 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %23 = OpVariable Function 
                              Function f32_3* %58 = OpVariable Function 
                                Function f32* %82 = OpVariable Function 
                             Function f32_3* %103 = OpVariable Function 
                                   Input f32* %17 = OpAccessChain %13 %15 
                                          f32 %18 = OpLoad %17 
                                         bool %19 = OpFOrdLessThan %10 %18 
                                                      OpStore %8 %19 
                                         bool %24 = OpLoad %8 
                                                      OpSelectionMerge %26 None 
                                                      OpBranchConditional %24 %25 %28 
                                              %25 = OpLabel 
                                                      OpStore %23 %27 
                                                      OpBranch %26 
                                              %28 = OpLabel 
                                                      OpStore %23 %10 
                                                      OpBranch %26 
                                              %26 = OpLabel 
                                          f32 %29 = OpLoad %23 
                                 Private f32* %31 = OpAccessChain %21 %15 
                                                      OpStore %31 %29 
                                        f32_4 %34 = OpLoad %32 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                        f32_4 %54 = OpLoad %21 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 2 3 
                                                      OpStore %21 %55 
                               Uniform u32_4* %62 = OpAccessChain %42 %59 
                                        u32_4 %63 = OpLoad %62 
                                          u32 %64 = OpCompositeExtract %63 0 
                                         bool %66 = OpINotEqual %64 %65 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %71 
                                              %67 = OpLabel 
                                        f32_4 %69 = OpLoad %21 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %58 %70 
                                                      OpBranch %68 
                                              %71 = OpLabel 
                                        f32_4 %72 = OpLoad %13 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                                      OpStore %58 %73 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                        f32_3 %74 = OpLoad %58 
                                        f32_4 %75 = OpLoad %21 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %21 %76 
                                 Private f32* %78 = OpAccessChain %21 %15 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %10 %79 
                                                      OpStore %77 %80 
                                         bool %83 = OpLoad %77 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %86 
                                              %84 = OpLabel 
                                                      OpStore %82 %27 
                                                      OpBranch %85 
                                              %86 = OpLabel 
                                                      OpStore %82 %10 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %87 = OpLoad %82 
                                 Private f32* %88 = OpAccessChain %81 %15 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                               Uniform f32_4* %93 = OpAccessChain %42 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                        f32_2 %96 = OpFMul %91 %95 
                               Uniform f32_4* %97 = OpAccessChain %42 %92 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 2 3 
                                       f32_2 %100 = OpFAdd %96 %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %81 %102 
                              Uniform u32_4* %104 = OpAccessChain %42 %59 
                                       u32_4 %105 = OpLoad %104 
                                         u32 %106 = OpCompositeExtract %105 1 
                                        bool %107 = OpINotEqual %106 %65 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %81 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %103 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_4 %113 = OpLoad %21 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %103 %114 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %115 = OpLoad %103 
                                       f32_4 %116 = OpLoad %21 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %21 %117 
                                       f32_4 %118 = OpLoad %21 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %122 = OpAccessChain %42 %120 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpFMul %119 %123 
                                                      OpStore %81 %124 
                              Uniform f32_4* %125 = OpAccessChain %42 %120 %120 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %21 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %81 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %81 %131 
                              Uniform f32_4* %132 = OpAccessChain %42 %120 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpLoad %21 
                                       f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
                                       f32_4 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %81 
                                       f32_4 %138 = OpFAdd %136 %137 
                                                      OpStore %21 %138 
                                       f32_4 %139 = OpLoad %21 
                              Uniform f32_4* %140 = OpAccessChain %42 %120 %92 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpFAdd %139 %141 
                                                      OpStore %21 %142 
                                       f32_4 %143 = OpLoad %21 
                                       f32_4 %144 = OpVectorShuffle %143 %143 1 1 1 1 
                              Uniform f32_4* %145 = OpAccessChain %42 %121 %121 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %144 %146 
                                                      OpStore %81 %147 
                              Uniform f32_4* %148 = OpAccessChain %42 %121 %120 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpLoad %21 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 0 0 0 
                                       f32_4 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %81 
                                       f32_4 %154 = OpFAdd %152 %153 
                                                      OpStore %81 %154 
                              Uniform f32_4* %155 = OpAccessChain %42 %121 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_4 %157 = OpLoad %21 
                                       f32_4 %158 = OpVectorShuffle %157 %157 2 2 2 2 
                                       f32_4 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpFAdd %159 %160 
                                                      OpStore %81 %161 
                              Uniform f32_4* %167 = OpAccessChain %42 %121 %92 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %21 
                                       f32_4 %170 = OpVectorShuffle %169 %169 3 3 3 3 
                                       f32_4 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %81 
                                       f32_4 %173 = OpFAdd %171 %172 
                               Output f32_4* %175 = OpAccessChain %166 %120 
                                                      OpStore %175 %173 
                                       f32_4 %176 = OpLoad %13 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 1 1 1 
                              Uniform f32_4* %178 = OpAccessChain %42 %120 %121 
                                       f32_4 %179 = OpLoad %178 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %21 %180 
                              Uniform f32_4* %181 = OpAccessChain %42 %120 %120 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %13 
                                       f32_4 %184 = OpVectorShuffle %183 %183 0 0 0 0 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %21 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %21 %187 
                              Uniform f32_4* %188 = OpAccessChain %42 %120 %44 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %13 
                                       f32_4 %191 = OpVectorShuffle %190 %190 2 2 2 2 
                                       f32_4 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %21 
                                       f32_4 %194 = OpFAdd %192 %193 
                                                      OpStore %21 %194 
                                       f32_4 %195 = OpLoad %21 
                              Uniform f32_4* %196 = OpAccessChain %42 %120 %92 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpFAdd %195 %197 
                                                      OpStore %21 %198 
                                       f32_4 %199 = OpLoad %21 
                                       f32_2 %200 = OpVectorShuffle %199 %199 1 1 
                              Uniform f32_4* %201 = OpAccessChain %42 %121 %121 
                                       f32_4 %202 = OpLoad %201 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                                       f32_2 %204 = OpFMul %200 %203 
                                       f32_4 %205 = OpLoad %81 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %81 %206 
                              Uniform f32_4* %207 = OpAccessChain %42 %121 %120 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 1 
                                       f32_4 %210 = OpLoad %21 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 0 
                                       f32_2 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %81 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                                       f32_2 %215 = OpFAdd %212 %214 
                                       f32_4 %216 = OpLoad %21 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 2 3 
                                                      OpStore %21 %217 
                              Uniform f32_4* %218 = OpAccessChain %42 %121 %44 
                                       f32_4 %219 = OpLoad %218 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_4 %221 = OpLoad %21 
                                       f32_2 %222 = OpVectorShuffle %221 %221 2 2 
                                       f32_2 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %21 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 1 
                                       f32_2 %226 = OpFAdd %223 %225 
                                       f32_4 %227 = OpLoad %21 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore %21 %228 
                              Uniform f32_4* %229 = OpAccessChain %42 %121 %92 
                                       f32_4 %230 = OpLoad %229 
                                       f32_2 %231 = OpVectorShuffle %230 %230 0 1 
                                       f32_4 %232 = OpLoad %21 
                                       f32_2 %233 = OpVectorShuffle %232 %232 3 3 
                                       f32_2 %234 = OpFMul %231 %233 
                                       f32_4 %235 = OpLoad %21 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                                       f32_2 %237 = OpFAdd %234 %236 
                                       f32_4 %238 = OpLoad %21 
                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 2 3 
                                                      OpStore %21 %239 
                                       f32_4 %240 = OpLoad %21 
                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
                                       f32_2 %244 = OpFAdd %241 %243 
                                       f32_4 %245 = OpLoad %21 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 2 3 
                                                      OpStore %21 %246 
                                       f32_4 %247 = OpLoad %21 
                                       f32_2 %248 = OpVectorShuffle %247 %247 0 1 
                                       f32_2 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %21 
                                       f32_4 %253 = OpVectorShuffle %252 %251 4 5 2 3 
                                                      OpStore %21 %253 
                                       f32_4 %256 = OpLoad %21 
                                       f32_2 %257 = OpVectorShuffle %256 %256 0 1 
                                       f32_2 %260 = OpFMul %257 %259 
                                       f32_2 %262 = OpFAdd %260 %261 
                                                      OpStore %255 %262 
                                       f32_4 %265 = OpLoad %264 
                                       f32_2 %266 = OpVectorShuffle %265 %265 0 1 
                              Uniform f32_4* %268 = OpAccessChain %42 %267 
                                       f32_4 %269 = OpLoad %268 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 1 
                                       f32_2 %271 = OpFMul %266 %270 
                              Uniform f32_4* %272 = OpAccessChain %42 %267 
                                       f32_4 %273 = OpLoad %272 
                                       f32_2 %274 = OpVectorShuffle %273 %273 2 3 
                                       f32_2 %275 = OpFAdd %271 %274 
                                                      OpStore %263 %275 
                                                      OpStore %276 %277 
                                 Output f32* %279 = OpAccessChain %166 %120 %162 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFNegate %280 
                                 Output f32* %282 = OpAccessChain %166 %120 %162 
                                                      OpStore %282 %281 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 315
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %228 %301 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpMemberDecorate %27 8 RelaxedPrecision 
                                                      OpMemberDecorate %27 8 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %226 DescriptorSet 226 
                                                      OpDecorate %226 Binding 226 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 Location 228 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %301 Location 301 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                              %26 = OpTypeVector %21 4 
                                              %27 = OpTypeStruct %6 %6 %7 %6 %26 %6 %6 %6 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32; f32; f32_4; f32; u32_4; f32; f32; f32; f32;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 8 
                                              %32 = OpTypePointer Uniform %6 
                                          u32 %37 = OpConstant 0 
                                              %39 = OpTypeBool 
                                              %40 = OpTypePointer Private %39 
                                Private bool* %41 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                          i32 %47 = OpConstant 0 
                                          i32 %48 = OpConstant 1 
                                          i32 %50 = OpConstant -1 
                                              %56 = OpTypeVector %6 3 
                                          f32 %59 = OpConstant 3.674022E-40 
                                          f32 %60 = OpConstant 3.674022E-40 
                                          f32 %61 = OpConstant 3.674022E-40 
                                        f32_3 %62 = OpConstantComposite %59 %60 %61 
                                              %65 = OpTypePointer Private %56 
                               Private f32_3* %66 = OpVariable Private 
                                          f32 %77 = OpConstant 3.674022E-40 
                                        f32_2 %78 = OpConstantComposite %77 %77 
                                 Private f32* %82 = OpVariable Private 
                                          u32 %88 = OpConstant 1 
                               Private f32_3* %95 = OpVariable Private 
                                         f32 %102 = OpConstant 3.674022E-40 
                              Private f32_4* %127 = OpVariable Private 
                                         i32 %130 = OpConstant 2 
                                             %131 = OpTypePointer Uniform %7 
                                Private f32* %146 = OpVariable Private 
                                         u32 %152 = OpConstant 2 
                                         i32 %163 = OpConstant 3 
                                       f32_2 %167 = OpConstantComposite %44 %44 
                                         f32 %168 = OpConstant 3.674022E-40 
                                       f32_2 %169 = OpConstantComposite %77 %168 
                                             %171 = OpTypeVector %39 2 
                                         f32 %182 = OpConstant 3.674022E-40 
                                       f32_3 %183 = OpConstantComposite %182 %182 %182 
                                         f32 %185 = OpConstant 3.674022E-40 
                                       f32_3 %186 = OpConstantComposite %185 %185 %185 
                                         f32 %194 = OpConstant 3.674022E-40 
                                       f32_3 %195 = OpConstantComposite %194 %194 %194 
                                       f32_4 %205 = OpConstantComposite %44 %44 %44 %44 
                                         i32 %206 = OpConstant 7 
                                             %210 = OpTypeVector %39 4 
                                             %213 = OpTypePointer Function %56 
                              Private f32_3* %225 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %226 = OpVariable UniformConstant 
                                Input f32_2* %228 = OpVariable Input 
                              Private f32_3* %237 = OpVariable Private 
                                         i32 %247 = OpConstant 5 
                                         i32 %259 = OpConstant 6 
                              Private f32_4* %272 = OpVariable Private 
                                         i32 %274 = OpConstant 4 
                                             %275 = OpTypePointer Uniform %26 
                                       f32_3 %284 = OpConstantComposite %44 %44 %44 
                                             %288 = OpTypePointer Function %6 
                                             %300 = OpTypePointer Output %7 
                               Output f32_4* %301 = OpVariable Output 
                                             %302 = OpTypePointer Function %7 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %214 = OpVariable Function 
                             Function f32_3* %273 = OpVariable Function 
                               Function f32* %289 = OpVariable Function 
                             Function f32_4* %303 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %33 = OpAccessChain %29 %31 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFNegate %34 
                                          f32 %36 = OpFAdd %25 %35 
                                 Private f32* %38 = OpAccessChain %20 %37 
                                                      OpStore %38 %36 
                                 Private f32* %42 = OpAccessChain %20 %37 
                                          f32 %43 = OpLoad %42 
                                         bool %45 = OpFOrdLessThan %43 %44 
                                                      OpStore %41 %45 
                                         bool %46 = OpLoad %41 
                                          i32 %49 = OpSelect %46 %48 %47 
                                          i32 %51 = OpIMul %49 %50 
                                         bool %52 = OpINotEqual %51 %47 
                                                      OpSelectionMerge %54 None 
                                                      OpBranchConditional %52 %53 %54 
                                              %53 = OpLabel 
                                                      OpKill
                                              %54 = OpLabel 
                                        f32_4 %57 = OpLoad %9 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                                          f32 %63 = OpDot %58 %62 
                                 Private f32* %64 = OpAccessChain %20 %37 
                                                      OpStore %64 %63 
                                        f32_4 %67 = OpLoad %9 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 2 
                                        f32_4 %69 = OpLoad %20 
                                        f32_2 %70 = OpVectorShuffle %69 %69 0 0 
                                        f32_2 %71 = OpFNegate %70 
                                        f32_2 %72 = OpFAdd %68 %71 
                                        f32_3 %73 = OpLoad %66 
                                        f32_3 %74 = OpVectorShuffle %73 %72 3 4 2 
                                                      OpStore %66 %74 
                                        f32_3 %75 = OpLoad %66 
                                        f32_2 %76 = OpVectorShuffle %75 %75 0 1 
                                        f32_2 %79 = OpFAdd %76 %78 
                                        f32_3 %80 = OpLoad %66 
                                        f32_3 %81 = OpVectorShuffle %80 %79 3 4 2 
                                                      OpStore %66 %81 
                                 Private f32* %83 = OpAccessChain %66 %37 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFNegate %84 
                                          f32 %86 = OpFMul %85 %59 
                                          f32 %87 = OpFAdd %86 %77 
                                                      OpStore %82 %87 
                                 Private f32* %89 = OpAccessChain %66 %88 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFNegate %90 
                                          f32 %92 = OpFMul %91 %61 
                                          f32 %93 = OpLoad %82 
                                          f32 %94 = OpFAdd %92 %93 
                                                      OpStore %82 %94 
                                        f32_3 %96 = OpLoad %66 
                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
                                        f32_2 %98 = OpExtInst %1 30 %97 
                                        f32_3 %99 = OpLoad %95 
                                       f32_3 %100 = OpVectorShuffle %99 %98 3 1 4 
                                                      OpStore %95 %100 
                                         f32 %101 = OpLoad %82 
                                         f32 %103 = OpFMul %101 %102 
                                                      OpStore %82 %103 
                                         f32 %104 = OpLoad %82 
                                         f32 %105 = OpExtInst %1 30 %104 
                                Private f32* %106 = OpAccessChain %95 %88 
                                                      OpStore %106 %105 
                                       f32_3 %107 = OpLoad %95 
                                Uniform f32* %108 = OpAccessChain %29 %48 
                                         f32 %109 = OpLoad %108 
                                Uniform f32* %110 = OpAccessChain %29 %48 
                                         f32 %111 = OpLoad %110 
                                Uniform f32* %112 = OpAccessChain %29 %48 
                                         f32 %113 = OpLoad %112 
                                       f32_3 %114 = OpCompositeConstruct %109 %111 %113 
                                         f32 %115 = OpCompositeExtract %114 0 
                                         f32 %116 = OpCompositeExtract %114 1 
                                         f32 %117 = OpCompositeExtract %114 2 
                                       f32_3 %118 = OpCompositeConstruct %115 %116 %117 
                                       f32_3 %119 = OpFMul %107 %118 
                                                      OpStore %95 %119 
                                       f32_3 %120 = OpLoad %95 
                                       f32_3 %121 = OpExtInst %1 29 %120 
                                                      OpStore %95 %121 
                                       f32_3 %122 = OpLoad %95 
                                Uniform f32* %123 = OpAccessChain %29 %47 
                                         f32 %124 = OpLoad %123 
                                       f32_3 %125 = OpCompositeConstruct %124 %124 %124 
                                       f32_3 %126 = OpFMul %122 %125 
                                                      OpStore %95 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                              Uniform f32_4* %132 = OpAccessChain %29 %130 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_3 %135 = OpFNegate %134 
                                       f32_3 %136 = OpFAdd %129 %135 
                                       f32_4 %137 = OpLoad %127 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 6 3 
                                                      OpStore %127 %138 
                                       f32_4 %139 = OpLoad %127 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_4 %141 = OpLoad %127 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                                       f32_2 %143 = OpFMul %140 %142 
                                       f32_4 %144 = OpLoad %127 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %127 %145 
                                Private f32* %147 = OpAccessChain %127 %88 
                                         f32 %148 = OpLoad %147 
                                Private f32* %149 = OpAccessChain %127 %37 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFAdd %148 %150 
                                                      OpStore %146 %151 
                                Private f32* %153 = OpAccessChain %127 %152 
                                         f32 %154 = OpLoad %153 
                                Private f32* %155 = OpAccessChain %127 %152 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFMul %154 %156 
                                         f32 %158 = OpLoad %146 
                                         f32 %159 = OpFAdd %157 %158 
                                                      OpStore %146 %159 
                                         f32 %160 = OpLoad %146 
                                         f32 %161 = OpExtInst %1 31 %160 
                                                      OpStore %146 %161 
                                         f32 %162 = OpLoad %146 
                                Uniform f32* %164 = OpAccessChain %29 %163 
                                         f32 %165 = OpLoad %164 
                                        bool %166 = OpFOrdLessThan %162 %165 
                                                      OpStore %41 %166 
                                        bool %170 = OpLoad %41 
                                      bool_2 %172 = OpCompositeConstruct %170 %170 
                                       f32_2 %173 = OpSelect %172 %78 %167 
                                       f32_2 %174 = OpExtInst %1 46 %167 %169 %173 
                                       f32_4 %175 = OpLoad %127 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 3 
                                                      OpStore %127 %176 
                                       f32_3 %177 = OpLoad %95 
                                       f32_4 %178 = OpLoad %127 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 0 0 
                                       f32_3 %180 = OpFMul %177 %179 
                                                      OpStore %95 %180 
                                       f32_3 %181 = OpLoad %95 
                                       f32_3 %184 = OpFMul %181 %183 
                                       f32_3 %187 = OpFAdd %184 %186 
                                       f32_4 %188 = OpLoad %127 
                                       f32_4 %189 = OpVectorShuffle %188 %187 4 1 5 6 
                                                      OpStore %127 %189 
                                       f32_3 %190 = OpLoad %95 
                                       f32_4 %191 = OpLoad %127 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 2 3 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %196 = OpFAdd %193 %195 
                                       f32_4 %197 = OpLoad %127 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 1 5 6 
                                                      OpStore %127 %198 
                                       f32_3 %199 = OpLoad %95 
                                       f32_4 %200 = OpLoad %127 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 2 3 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %127 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 1 5 6 
                                                      OpStore %127 %204 
                                Uniform f32* %207 = OpAccessChain %29 %206 
                                         f32 %208 = OpLoad %207 
                                       f32_4 %209 = OpCompositeConstruct %208 %208 %208 %208 
                                      bool_4 %211 = OpFOrdNotEqual %205 %209 
                                        bool %212 = OpAny %211 
                                                      OpStore %41 %212 
                                        bool %215 = OpLoad %41 
                                                      OpSelectionMerge %217 None 
                                                      OpBranchConditional %215 %216 %219 
                                             %216 = OpLabel 
                                       f32_3 %218 = OpLoad %95 
                                                      OpStore %214 %218 
                                                      OpBranch %217 
                                             %219 = OpLabel 
                                       f32_4 %220 = OpLoad %127 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 2 3 
                                                      OpStore %214 %221 
                                                      OpBranch %217 
                                             %217 = OpLabel 
                                       f32_3 %222 = OpLoad %214 
                                       f32_4 %223 = OpLoad %20 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %20 %224 
                  read_only Texture2DSampled %227 = OpLoad %226 
                                       f32_2 %229 = OpLoad %228 
                                       f32_4 %230 = OpImageSampleImplicitLod %227 %229 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                                      OpStore %225 %231 
                                       f32_4 %232 = OpLoad %9 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_3 %234 = OpFNegate %233 
                                       f32_3 %235 = OpLoad %225 
                                       f32_3 %236 = OpFAdd %234 %235 
                                                      OpStore %66 %236 
                                       f32_4 %238 = OpLoad %127 
                                       f32_3 %239 = OpVectorShuffle %238 %238 1 1 1 
                                       f32_3 %240 = OpLoad %66 
                                       f32_3 %241 = OpFMul %239 %240 
                                       f32_4 %242 = OpLoad %9 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpFAdd %241 %243 
                                                      OpStore %237 %244 
                                       f32_3 %245 = OpLoad %237 
                                       f32_3 %246 = OpExtInst %1 30 %245 
                                                      OpStore %237 %246 
                                Uniform f32* %248 = OpAccessChain %29 %247 
                                         f32 %249 = OpLoad %248 
                                                      OpStore %146 %249 
                                         f32 %250 = OpLoad %146 
                                         f32 %251 = OpExtInst %1 43 %250 %44 %77 
                                                      OpStore %146 %251 
                                       f32_3 %252 = OpLoad %237 
                                         f32 %253 = OpLoad %146 
                                       f32_3 %254 = OpCompositeConstruct %253 %253 %253 
                                       f32_3 %255 = OpFMul %252 %254 
                                                      OpStore %237 %255 
                                       f32_3 %256 = OpLoad %237 
                                       f32_3 %257 = OpExtInst %1 29 %256 
                                                      OpStore %237 %257 
                                       f32_3 %258 = OpLoad %237 
                                Uniform f32* %260 = OpAccessChain %29 %259 
                                         f32 %261 = OpLoad %260 
                                Uniform f32* %262 = OpAccessChain %29 %259 
                                         f32 %263 = OpLoad %262 
                                Uniform f32* %264 = OpAccessChain %29 %259 
                                         f32 %265 = OpLoad %264 
                                       f32_3 %266 = OpCompositeConstruct %261 %263 %265 
                                         f32 %267 = OpCompositeExtract %266 0 
                                         f32 %268 = OpCompositeExtract %266 1 
                                         f32 %269 = OpCompositeExtract %266 2 
                                       f32_3 %270 = OpCompositeConstruct %267 %268 %269 
                                       f32_3 %271 = OpExtInst %1 37 %258 %270 
                                                      OpStore %237 %271 
                              Uniform u32_4* %276 = OpAccessChain %29 %274 
                                       u32_4 %277 = OpLoad %276 
                                         u32 %278 = OpCompositeExtract %277 0 
                                        bool %279 = OpINotEqual %278 %37 
                                                      OpSelectionMerge %281 None 
                                                      OpBranchConditional %279 %280 %283 
                                             %280 = OpLabel 
                                       f32_3 %282 = OpLoad %237 
                                                      OpStore %273 %282 
                                                      OpBranch %281 
                                             %283 = OpLabel 
                                                      OpStore %273 %284 
                                                      OpBranch %281 
                                             %281 = OpLabel 
                                       f32_3 %285 = OpLoad %273 
                                       f32_4 %286 = OpLoad %272 
                                       f32_4 %287 = OpVectorShuffle %286 %285 4 5 6 3 
                                                      OpStore %272 %287 
                              Uniform u32_4* %290 = OpAccessChain %29 %274 
                                       u32_4 %291 = OpLoad %290 
                                         u32 %292 = OpCompositeExtract %291 0 
                                        bool %293 = OpINotEqual %292 %37 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %296 
                                             %294 = OpLabel 
                                                      OpStore %289 %77 
                                                      OpBranch %295 
                                             %296 = OpLabel 
                                                      OpStore %289 %44 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                         f32 %297 = OpLoad %289 
                                Private f32* %298 = OpAccessChain %272 %22 
                                                      OpStore %298 %297 
                                Private f32* %299 = OpAccessChain %20 %22 
                                                      OpStore %299 %77 
                              Uniform u32_4* %304 = OpAccessChain %29 %274 
                                       u32_4 %305 = OpLoad %304 
                                         u32 %306 = OpCompositeExtract %305 1 
                                        bool %307 = OpINotEqual %306 %37 
                                                      OpSelectionMerge %309 None 
                                                      OpBranchConditional %307 %308 %311 
                                             %308 = OpLabel 
                                       f32_4 %310 = OpLoad %20 
                                                      OpStore %303 %310 
                                                      OpBranch %309 
                                             %311 = OpLabel 
                                       f32_4 %312 = OpLoad %272 
                                                      OpStore %303 %312 
                                                      OpBranch %309 
                                             %309 = OpLabel 
                                       f32_4 %313 = OpLoad %303 
                                                      OpStore %301 %313 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "EDITOR_VISUALIZATION" }
"// shader disassembly not supported on DXBC"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "EDITOR_VISUALIZATION" }
""
}
SubProgram "vulkan " {
Keywords { "EDITOR_VISUALIZATION" }
""
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "EDITOR_VISUALIZATION" }
"// shader disassembly not supported on DXBC"
}
}
}
}
Fallback "VertexLit"
}