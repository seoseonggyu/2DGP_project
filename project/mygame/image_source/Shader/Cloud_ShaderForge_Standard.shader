//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Cloud/ShaderForge/Standard" {
Properties {
_BaseColor ("BaseColor", Color) = (1,1,1,0.5)
_Shading ("Shading", Color) = (0,0,0,0.5)
_DepthIntensity ("DepthIntensity", Float) = 0.5
_PerlinNormalMap ("PerlinNormalMap", 2D) = "white" { }
_Tiling ("Tiling", Float) = 3000
_Density ("Density", Float) = -0.25
_Alpha ("Alpha", Float) = 5
_AlphaCut ("AlphaCut", Float) = 0.01
_Speed ("Speed", Float) = 0.1
_SpeedSecondLayer ("SpeedSecondLayer", Float) = 4
_WindDirection ("WindDirection", Vector) = (1,0,0,0)
_CloudNormalsDirection ("CloudNormalsDirection", Vector) = (1,1,-1,0)
_MipLevel ("Mip Level", Float) = 0
_EdgeBlend ("EdgeBlend", Range(0, 10)) = 2
_ZOffset ("Z Offset", Float) = 0
_Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
}
SubShader {
 LOD 200
 Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "Transparent" "SHADOWSUPPORT" = "true" }
  Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
  ZWrite Off
  GpuProgramID 5784
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _LightColor0;
uniform 	vec4 _TimeEditor;
uniform 	vec4 _BaseColor;
uniform 	vec4 _Shading;
uniform 	float _DepthIntensity;
uniform 	float _Tiling;
uniform 	float _Density;
uniform 	float _Alpha;
uniform 	float _AlphaCut;
uniform 	float _Speed;
uniform 	float _SpeedSecondLayer;
uniform 	vec4 _CloudNormalsDirection;
uniform 	vec4 _PerlinNormalMap_ST;
uniform 	float _MipLevel;
uniform 	float _ZOffset;
uniform  sampler2D _PerlinNormalMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec2 u_xlat4;
float u_xlat6;
bool u_xlatb6;
float u_xlat7;
void main()
{
    u_xlat0.yw = vs_TEXCOORD0.zz + vec2(vec2(_ZOffset, _ZOffset));
    u_xlat0.xz = vs_TEXCOORD0.xx;
    u_xlat0 = u_xlat0 / vec4(vec4(_Tiling, _Tiling, _Tiling, _Tiling));
    u_xlat1.x = _Time.y + _TimeEditor.y;
    u_xlat1.x = u_xlat1.x * 0.00100000005;
    u_xlat0 = u_xlat1.xxxx * vec4(_Speed, _Speed, _SpeedSecondLayer, _SpeedSecondLayer) + u_xlat0;
    u_xlat4.xy = u_xlat0.zw + vec2(0.0, 0.5);
    u_xlat0.xy = u_xlat0.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat0.xy = u_xlat4.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_0 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat7 = u_xlat10_1.w + _Density;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(vec3(_Density, _Density, _Density));
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6 = vs_COLOR0.w * u_xlat7 + (-u_xlat10_0.w);
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + (-u_xlat16_0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * _CloudNormalsDirection.xyz;
    u_xlat1.x = u_xlat6 * _Alpha + (-_AlphaCut);
    u_xlat6 = u_xlat6 * _Alpha;
    SV_Target0.w = u_xlat6;
    u_xlat6 = ceil(u_xlat1.x);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat6 = u_xlat6 + -1.0;
    u_xlatb6 = u_xlat6<0.0;
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
    u_xlat0.xyw = u_xlat0.xxx * vs_TEXCOORD2.xyz + u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.zzz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.330000013, -0.600000024));
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = (-u_xlat0.x) * _Shading.w + 1.0;
    u_xlat2.x = _CloudNormalsDirection.y * vs_COLOR0.z + 1.0;
    u_xlat2.x = u_xlat2.x * 0.5 + _DepthIntensity;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.xyz = _BaseColor.xyz + (-_Shading.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Shading.xyz;
    u_xlat1.xyz = (-_LightColor0.xyz) + vec3(0.800000012, 0.800000012, 0.800000012);
    u_xlat1.xyz = _BaseColor.www * u_xlat1.xyz + _LightColor0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %51 %82 %93 %131 %134 %179 %213 %219 %220 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %51 Location 51 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %219 Location 219 
                                                      OpDecorate %220 Location 220 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypePointer Output %7 
                                Output f32_4* %51 = OpVariable Output 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %91 = OpTypeVector %6 3 
                                              %92 = OpTypePointer Input %91 
                                 Input f32_3* %93 = OpVariable Input 
                                          u32 %99 = OpConstant 0 
                                             %100 = OpTypePointer Private %6 
                                         u32 %113 = OpConstant 2 
                                Private f32* %115 = OpVariable Private 
                                             %130 = OpTypePointer Output %91 
                               Output f32_3* %131 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                               Output f32_3* %179 = OpVariable Output 
                                             %182 = OpTypePointer Private %91 
                              Private f32_3* %183 = OpVariable Private 
                               Output f32_3* %213 = OpVariable Output 
                               Output f32_4* %219 = OpVariable Output 
                                Input f32_4* %220 = OpVariable Input 
                                             %222 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %52 = OpAccessChain %21 %23 %46 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %51 %58 
                                        f32_4 %59 = OpLoad %44 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %61 = OpAccessChain %21 %36 %24 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpFMul %60 %62 
                                                      OpStore %9 %63 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %44 
                                        f32_4 %67 = OpVectorShuffle %66 %66 0 0 0 0 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %9 %70 
                               Uniform f32_4* %71 = OpAccessChain %21 %36 %36 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %44 
                                        f32_4 %74 = OpVectorShuffle %73 %73 2 2 2 2 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %9 %77 
                               Uniform f32_4* %83 = OpAccessChain %21 %36 %46 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %44 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                Output f32_4* %90 = OpAccessChain %82 %23 
                                                      OpStore %90 %89 
                                        f32_3 %94 = OpLoad %93 
                               Uniform f32_4* %95 = OpAccessChain %21 %24 %23 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                          f32 %98 = OpDot %94 %97 
                                Private f32* %101 = OpAccessChain %9 %99 
                                                      OpStore %101 %98 
                                       f32_3 %102 = OpLoad %93 
                              Uniform f32_4* %103 = OpAccessChain %21 %24 %24 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                         f32 %106 = OpDot %102 %105 
                                Private f32* %107 = OpAccessChain %9 %78 
                                                      OpStore %107 %106 
                                       f32_3 %108 = OpLoad %93 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %36 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %114 = OpAccessChain %9 %113 
                                                      OpStore %114 %112 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_4 %118 = OpLoad %9 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %117 %119 
                                                      OpStore %115 %120 
                                         f32 %121 = OpLoad %115 
                                         f32 %122 = OpExtInst %1 32 %121 
                                                      OpStore %115 %122 
                                         f32 %123 = OpLoad %115 
                                       f32_3 %124 = OpCompositeConstruct %123 %123 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %9 %129 
                                       f32_4 %132 = OpLoad %9 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                                      OpStore %131 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %21 %23 %24 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %136 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %44 %142 
                              Uniform f32_4* %143 = OpAccessChain %21 %23 %23 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_4 %146 = OpLoad %134 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 0 0 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %44 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFAdd %148 %150 
                                       f32_4 %152 = OpLoad %44 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %44 %153 
                              Uniform f32_4* %154 = OpAccessChain %21 %23 %36 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_4 %157 = OpLoad %134 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %44 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %44 %164 
                                       f32_4 %165 = OpLoad %44 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_4 %167 = OpLoad %44 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %166 %168 
                                                      OpStore %115 %169 
                                         f32 %170 = OpLoad %115 
                                         f32 %171 = OpExtInst %1 32 %170 
                                                      OpStore %115 %171 
                                         f32 %172 = OpLoad %115 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_4 %174 = OpLoad %44 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %44 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %44 %178 
                                       f32_4 %180 = OpLoad %44 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                                      OpStore %179 %181 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 2 0 1 
                                       f32_4 %186 = OpLoad %44 
                                       f32_3 %187 = OpVectorShuffle %186 %186 1 2 0 
                                       f32_3 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 2 0 
                                       f32_4 %191 = OpLoad %44 
                                       f32_3 %192 = OpVectorShuffle %191 %191 2 0 1 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %194 = OpLoad %183 
                                       f32_3 %195 = OpFNegate %194 
                                       f32_3 %196 = OpFAdd %193 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %134 
                                       f32_3 %202 = OpVectorShuffle %201 %201 3 3 3 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %9 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %9 %205 
                                       f32_4 %206 = OpLoad %9 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %207 %209 
                                                      OpStore %115 %210 
                                         f32 %211 = OpLoad %115 
                                         f32 %212 = OpExtInst %1 32 %211 
                                                      OpStore %115 %212 
                                         f32 %214 = OpLoad %115 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFMul %215 %217 
                                                      OpStore %213 %218 
                                       f32_4 %221 = OpLoad %220 
                                                      OpStore %219 %221 
                                 Output f32* %223 = OpAccessChain %82 %23 %78 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFNegate %224 
                                 Output f32* %226 = OpAccessChain %82 %23 %78 
                                                      OpStore %226 %225 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 397
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %178 %228 %263 %268 %275 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 RelaxedPrecision 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 RelaxedPrecision 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 RelaxedPrecision 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 RelaxedPrecision 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 RelaxedPrecision 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 RelaxedPrecision 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 RelaxedPrecision 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 RelaxedPrecision 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %228 Location 228 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %263 Location 263 
                                                      OpDecorate %268 Location 268 
                                                      OpDecorate %275 Location 275 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeStruct %7 %7 %7 %7 %7 %6 %6 %6 %6 %6 %6 %6 %7 %7 %6 %6 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32; f32;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 15 
                                              %20 = OpTypePointer Uniform %6 
                                          i32 %37 = OpConstant 6 
                               Private f32_4* %53 = OpVariable Private 
                                          i32 %54 = OpConstant 0 
                                              %55 = OpTypeInt 32 0 
                                          u32 %56 = OpConstant 1 
                                          i32 %59 = OpConstant 2 
                                          u32 %63 = OpConstant 0 
                                              %64 = OpTypePointer Private %6 
                                          f32 %68 = OpConstant 3.674022E-40 
                               Private f32_4* %71 = OpVariable Private 
                                          i32 %74 = OpConstant 10 
                                          i32 %79 = OpConstant 11 
                                              %88 = OpTypePointer Private %12 
                               Private f32_2* %89 = OpVariable Private 
                                          f32 %92 = OpConstant 3.674022E-40 
                                          f32 %93 = OpConstant 3.674022E-40 
                                        f32_2 %94 = OpConstantComposite %92 %93 
                                          i32 %98 = OpConstant 13 
                                              %99 = OpTypePointer Uniform %7 
                              Private f32_4* %110 = OpVariable Private 
                                             %111 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %112 = OpTypeSampledImage %111 
                                             %113 = OpTypePointer UniformConstant %112 
 UniformConstant read_only Texture2DSampled* %114 = OpVariable UniformConstant 
                                         i32 %118 = OpConstant 14 
                              Private f32_4* %133 = OpVariable Private 
                                         u32 %140 = OpConstant 3 
                                         i32 %143 = OpConstant 7 
                                         f32 %150 = OpConstant 3.674022E-40 
                                             %153 = OpTypeVector %6 3 
                                             %154 = OpTypePointer Private %153 
                              Private f32_3* %155 = OpVariable Private 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_3 %159 = OpConstantComposite %158 %158 %158 
                                         f32 %174 = OpConstant 3.674022E-40 
                                       f32_3 %175 = OpConstantComposite %174 %174 %174 
                                Private f32* %177 = OpVariable Private 
                                Input f32_4* %178 = OpVariable Input 
                                             %179 = OpTypePointer Input %6 
                              Private f32_3* %189 = OpVariable Private 
                                         i32 %205 = OpConstant 12 
                                         i32 %213 = OpConstant 8 
                                         i32 %217 = OpConstant 9 
                                             %227 = OpTypePointer Output %7 
                               Output f32_4* %228 = OpVariable Output 
                                             %230 = OpTypePointer Output %6 
                                             %244 = OpTypeBool 
                                             %245 = OpTypePointer Private %244 
                               Private bool* %246 = OpVariable Private 
                                         i32 %251 = OpConstant 1 
                                         i32 %253 = OpConstant -1 
                              Private f32_3* %259 = OpVariable Private 
                                             %262 = OpTypePointer Input %153 
                                Input f32_3* %263 = OpVariable Input 
                                Input f32_3* %268 = OpVariable Input 
                                Input f32_3* %275 = OpVariable Input 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %314 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                       f32_3 %316 = OpConstantComposite %313 %314 %315 
                                         i32 %327 = OpConstant 4 
                                Private f32* %333 = OpVariable Private 
                                         u32 %336 = OpConstant 2 
                                         i32 %343 = OpConstant 5 
                              Private f32_3* %354 = OpVariable Private 
                                         i32 %355 = OpConstant 3 
                                         f32 %378 = OpConstant 3.674022E-40 
                                       f32_3 %379 = OpConstantComposite %378 %378 %378 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 2 2 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                 Uniform f32* %23 = OpAccessChain %17 %19 
                                          f32 %24 = OpLoad %23 
                                        f32_2 %25 = OpCompositeConstruct %22 %24 
                                          f32 %26 = OpCompositeExtract %25 0 
                                          f32 %27 = OpCompositeExtract %25 1 
                                        f32_2 %28 = OpCompositeConstruct %26 %27 
                                        f32_2 %29 = OpFAdd %14 %28 
                                        f32_4 %30 = OpLoad %9 
                                        f32_4 %31 = OpVectorShuffle %30 %29 0 4 2 5 
                                                      OpStore %9 %31 
                                        f32_4 %32 = OpLoad %11 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 0 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpVectorShuffle %34 %33 4 1 5 3 
                                                      OpStore %9 %35 
                                        f32_4 %36 = OpLoad %9 
                                 Uniform f32* %38 = OpAccessChain %17 %37 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %17 %37 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %17 %37 
                                          f32 %43 = OpLoad %42 
                                 Uniform f32* %44 = OpAccessChain %17 %37 
                                          f32 %45 = OpLoad %44 
                                        f32_4 %46 = OpCompositeConstruct %39 %41 %43 %45 
                                          f32 %47 = OpCompositeExtract %46 0 
                                          f32 %48 = OpCompositeExtract %46 1 
                                          f32 %49 = OpCompositeExtract %46 2 
                                          f32 %50 = OpCompositeExtract %46 3 
                                        f32_4 %51 = OpCompositeConstruct %47 %48 %49 %50 
                                        f32_4 %52 = OpFDiv %36 %51 
                                                      OpStore %9 %52 
                                 Uniform f32* %57 = OpAccessChain %17 %54 %56 
                                          f32 %58 = OpLoad %57 
                                 Uniform f32* %60 = OpAccessChain %17 %59 %56 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %58 %61 
                                 Private f32* %65 = OpAccessChain %53 %63 
                                                      OpStore %65 %62 
                                 Private f32* %66 = OpAccessChain %53 %63 
                                          f32 %67 = OpLoad %66 
                                          f32 %69 = OpFMul %67 %68 
                                 Private f32* %70 = OpAccessChain %53 %63 
                                                      OpStore %70 %69 
                                        f32_4 %72 = OpLoad %53 
                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
                                 Uniform f32* %75 = OpAccessChain %17 %74 
                                          f32 %76 = OpLoad %75 
                                 Uniform f32* %77 = OpAccessChain %17 %74 
                                          f32 %78 = OpLoad %77 
                                 Uniform f32* %80 = OpAccessChain %17 %79 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %17 %79 
                                          f32 %83 = OpLoad %82 
                                        f32_4 %84 = OpCompositeConstruct %76 %78 %81 %83 
                                        f32_4 %85 = OpFMul %73 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %71 %87 
                                        f32_4 %90 = OpLoad %71 
                                        f32_2 %91 = OpVectorShuffle %90 %90 2 3 
                                        f32_2 %95 = OpFAdd %91 %94 
                                                      OpStore %89 %95 
                                        f32_4 %96 = OpLoad %71 
                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %98 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %97 %102 
                              Uniform f32_4* %104 = OpAccessChain %17 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %53 %109 
                  read_only Texture2DSampled %115 = OpLoad %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                Uniform f32* %119 = OpAccessChain %17 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_4 %121 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                                      OpStore %110 %121 
                                       f32_2 %122 = OpLoad %89 
                              Uniform f32_4* %123 = OpAccessChain %17 %98 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_2 %126 = OpFMul %122 %125 
                              Uniform f32_4* %127 = OpAccessChain %17 %98 
                                       f32_4 %128 = OpLoad %127 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                       f32_4 %131 = OpLoad %53 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %53 %132 
                  read_only Texture2DSampled %134 = OpLoad %114 
                                       f32_4 %135 = OpLoad %53 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                Uniform f32* %137 = OpAccessChain %17 %118 
                                         f32 %138 = OpLoad %137 
                                       f32_4 %139 = OpImageSampleExplicitLod %134 %136 Lod %7 
                                                      OpStore %133 %139 
                                Private f32* %141 = OpAccessChain %110 %140 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %144 = OpAccessChain %17 %143 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpFAdd %142 %145 
                                Private f32* %147 = OpAccessChain %89 %63 
                                                      OpStore %147 %146 
                                Private f32* %148 = OpAccessChain %89 %63 
                                         f32 %149 = OpLoad %148 
                                         f32 %151 = OpExtInst %1 43 %149 %92 %150 
                                Private f32* %152 = OpAccessChain %89 %63 
                                                      OpStore %152 %151 
                                       f32_4 %156 = OpLoad %110 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %160 = OpFMul %157 %159 
                                Uniform f32* %161 = OpAccessChain %17 %143 
                                         f32 %162 = OpLoad %161 
                                Uniform f32* %163 = OpAccessChain %17 %143 
                                         f32 %164 = OpLoad %163 
                                Uniform f32* %165 = OpAccessChain %17 %143 
                                         f32 %166 = OpLoad %165 
                                       f32_3 %167 = OpCompositeConstruct %162 %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                         f32 %169 = OpCompositeExtract %167 1 
                                         f32 %170 = OpCompositeExtract %167 2 
                                       f32_3 %171 = OpCompositeConstruct %168 %169 %170 
                                       f32_3 %172 = OpFAdd %160 %171 
                                                      OpStore %155 %172 
                                       f32_3 %173 = OpLoad %155 
                                       f32_3 %176 = OpFAdd %173 %175 
                                                      OpStore %155 %176 
                                  Input f32* %180 = OpAccessChain %178 %140 
                                         f32 %181 = OpLoad %180 
                                Private f32* %182 = OpAccessChain %89 %63 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFMul %181 %183 
                                Private f32* %185 = OpAccessChain %133 %140 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                         f32 %188 = OpFAdd %184 %187 
                                                      OpStore %177 %188 
                                       f32_4 %190 = OpLoad %133 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %191 %159 
                                       f32_3 %193 = OpFAdd %192 %175 
                                                      OpStore %189 %193 
                                       f32_4 %194 = OpLoad %178 
                                       f32_3 %195 = OpVectorShuffle %194 %194 3 3 3 
                                       f32_3 %196 = OpLoad %155 
                                       f32_3 %197 = OpFMul %195 %196 
                                       f32_3 %198 = OpLoad %189 
                                       f32_3 %199 = OpFNegate %198 
                                       f32_3 %200 = OpFAdd %197 %199 
                                       f32_4 %201 = OpLoad %53 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %53 %202 
                                       f32_4 %203 = OpLoad %53 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                              Uniform f32_4* %206 = OpAccessChain %17 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %204 %208 
                                       f32_4 %210 = OpLoad %53 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %53 %211 
                                         f32 %212 = OpLoad %177 
                                Uniform f32* %214 = OpAccessChain %17 %213 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFMul %212 %215 
                                Uniform f32* %218 = OpAccessChain %17 %217 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFNegate %219 
                                         f32 %221 = OpFAdd %216 %220 
                                Private f32* %222 = OpAccessChain %89 %63 
                                                      OpStore %222 %221 
                                         f32 %223 = OpLoad %177 
                                Uniform f32* %224 = OpAccessChain %17 %213 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                                      OpStore %177 %226 
                                         f32 %229 = OpLoad %177 
                                 Output f32* %231 = OpAccessChain %228 %140 
                                                      OpStore %231 %229 
                                Private f32* %232 = OpAccessChain %89 %63 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpExtInst %1 9 %233 
                                Private f32* %235 = OpAccessChain %89 %63 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %89 %63 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 43 %237 %92 %150 
                                Private f32* %239 = OpAccessChain %89 %63 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %89 %63 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFAdd %241 %174 
                                Private f32* %243 = OpAccessChain %89 %63 
                                                      OpStore %243 %242 
                                Private f32* %247 = OpAccessChain %89 %63 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdLessThan %248 %92 
                                                      OpStore %246 %249 
                                        bool %250 = OpLoad %246 
                                         i32 %252 = OpSelect %250 %251 %54 
                                         i32 %254 = OpIMul %252 %253 
                                        bool %255 = OpINotEqual %254 %54 
                                                      OpSelectionMerge %257 None 
                                                      OpBranchConditional %255 %256 %257 
                                             %256 = OpLabel 
                                                      OpKill
                                             %257 = OpLabel 
                                       f32_4 %260 = OpLoad %53 
                                       f32_3 %261 = OpVectorShuffle %260 %260 1 1 1 
                                       f32_3 %264 = OpLoad %263 
                                       f32_3 %265 = OpFMul %261 %264 
                                                      OpStore %259 %265 
                                       f32_4 %266 = OpLoad %53 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
                                       f32_3 %269 = OpLoad %268 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %259 
                                       f32_3 %272 = OpFAdd %270 %271 
                                       f32_4 %273 = OpLoad %53 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 6 
                                                      OpStore %53 %274 
                                       f32_3 %276 = OpLoad %275 
                                       f32_3 %277 = OpLoad %275 
                                         f32 %278 = OpDot %276 %277 
                                Private f32* %279 = OpAccessChain %259 %63 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %259 %63 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 32 %281 
                                Private f32* %283 = OpAccessChain %259 %63 
                                                      OpStore %283 %282 
                                       f32_3 %284 = OpLoad %259 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpLoad %275 
                                       f32_3 %287 = OpFMul %285 %286 
                                                      OpStore %259 %287 
                                       f32_4 %288 = OpLoad %53 
                                       f32_3 %289 = OpVectorShuffle %288 %288 2 2 2 
                                       f32_3 %290 = OpLoad %259 
                                       f32_3 %291 = OpFMul %289 %290 
                                       f32_4 %292 = OpLoad %53 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 3 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %53 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %53 %296 
                                       f32_4 %297 = OpLoad %53 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_4 %299 = OpLoad %53 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                         f32 %301 = OpDot %298 %300 
                                                      OpStore %177 %301 
                                         f32 %302 = OpLoad %177 
                                         f32 %303 = OpExtInst %1 32 %302 
                                                      OpStore %177 %303 
                                         f32 %304 = OpLoad %177 
                                       f32_3 %305 = OpCompositeConstruct %304 %304 %304 
                                       f32_4 %306 = OpLoad %53 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %53 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %53 %310 
                                       f32_4 %311 = OpLoad %53 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                         f32 %317 = OpDot %312 %316 
                                Private f32* %318 = OpAccessChain %53 %63 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %53 %63 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %150 
                                Private f32* %323 = OpAccessChain %53 %63 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %53 %63 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFNegate %325 
                                Uniform f32* %328 = OpAccessChain %17 %327 %140 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFMul %326 %329 
                                         f32 %331 = OpFAdd %330 %150 
                                Private f32* %332 = OpAccessChain %53 %63 
                                                      OpStore %332 %331 
                                Uniform f32* %334 = OpAccessChain %17 %205 %56 
                                         f32 %335 = OpLoad %334 
                                  Input f32* %337 = OpAccessChain %178 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFMul %335 %338 
                                         f32 %340 = OpFAdd %339 %150 
                                                      OpStore %333 %340 
                                         f32 %341 = OpLoad %333 
                                         f32 %342 = OpFMul %341 %93 
                                Uniform f32* %344 = OpAccessChain %17 %343 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFAdd %342 %345 
                                                      OpStore %333 %346 
                                         f32 %347 = OpLoad %333 
                                         f32 %348 = OpExtInst %1 43 %347 %92 %150 
                                                      OpStore %333 %348 
                                         f32 %349 = OpLoad %333 
                                Private f32* %350 = OpAccessChain %53 %63 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                Private f32* %353 = OpAccessChain %53 %63 
                                                      OpStore %353 %352 
                              Uniform f32_4* %356 = OpAccessChain %17 %355 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                              Uniform f32_4* %359 = OpAccessChain %17 %327 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFNegate %361 
                                       f32_3 %363 = OpFAdd %358 %362 
                                                      OpStore %354 %363 
                                       f32_4 %364 = OpLoad %53 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 0 0 
                                       f32_3 %366 = OpLoad %354 
                                       f32_3 %367 = OpFMul %365 %366 
                              Uniform f32_4* %368 = OpAccessChain %17 %327 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFAdd %367 %370 
                                       f32_4 %372 = OpLoad %53 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %53 %373 
                              Uniform f32_4* %374 = OpAccessChain %17 %251 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFNegate %376 
                                       f32_3 %380 = OpFAdd %377 %379 
                                                      OpStore %259 %380 
                              Uniform f32_4* %381 = OpAccessChain %17 %355 
                                       f32_4 %382 = OpLoad %381 
                                       f32_3 %383 = OpVectorShuffle %382 %382 3 3 3 
                                       f32_3 %384 = OpLoad %259 
                                       f32_3 %385 = OpFMul %383 %384 
                              Uniform f32_4* %386 = OpAccessChain %17 %251 
                                       f32_4 %387 = OpLoad %386 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFAdd %385 %388 
                                                      OpStore %259 %389 
                                       f32_4 %390 = OpLoad %53 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpLoad %259 
                                       f32_3 %393 = OpFMul %391 %392 
                                       f32_4 %394 = OpLoad %228 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
                                                      OpStore %228 %395 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _LightColor0;
uniform 	vec4 _TimeEditor;
uniform 	vec4 _BaseColor;
uniform 	vec4 _Shading;
uniform 	float _DepthIntensity;
uniform 	float _Tiling;
uniform 	float _Density;
uniform 	float _Alpha;
uniform 	float _AlphaCut;
uniform 	float _Speed;
uniform 	float _SpeedSecondLayer;
uniform 	vec4 _CloudNormalsDirection;
uniform 	vec4 _PerlinNormalMap_ST;
uniform 	float _MipLevel;
uniform 	float _ZOffset;
uniform  sampler2D _PerlinNormalMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec2 u_xlat4;
float u_xlat6;
bool u_xlatb6;
float u_xlat7;
void main()
{
    u_xlat0.yw = vs_TEXCOORD0.zz + vec2(vec2(_ZOffset, _ZOffset));
    u_xlat0.xz = vs_TEXCOORD0.xx;
    u_xlat0 = u_xlat0 / vec4(vec4(_Tiling, _Tiling, _Tiling, _Tiling));
    u_xlat1.x = _Time.y + _TimeEditor.y;
    u_xlat1.x = u_xlat1.x * 0.00100000005;
    u_xlat0 = u_xlat1.xxxx * vec4(_Speed, _Speed, _SpeedSecondLayer, _SpeedSecondLayer) + u_xlat0;
    u_xlat4.xy = u_xlat0.zw + vec2(0.0, 0.5);
    u_xlat0.xy = u_xlat0.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat0.xy = u_xlat4.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_0 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat7 = u_xlat10_1.w + _Density;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(vec3(_Density, _Density, _Density));
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6 = vs_COLOR0.w * u_xlat7 + (-u_xlat10_0.w);
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + (-u_xlat16_0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * _CloudNormalsDirection.xyz;
    u_xlat1.x = u_xlat6 * _Alpha + (-_AlphaCut);
    u_xlat6 = u_xlat6 * _Alpha;
    SV_Target0.w = u_xlat6;
    u_xlat6 = ceil(u_xlat1.x);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat6 = u_xlat6 + -1.0;
    u_xlatb6 = u_xlat6<0.0;
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
    u_xlat0.xyw = u_xlat0.xxx * vs_TEXCOORD2.xyz + u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.zzz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.330000013, -0.600000024));
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = (-u_xlat0.x) * _Shading.w + 1.0;
    u_xlat2.x = _CloudNormalsDirection.y * vs_COLOR0.z + 1.0;
    u_xlat2.x = u_xlat2.x * 0.5 + _DepthIntensity;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.xyz = _BaseColor.xyz + (-_Shading.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Shading.xyz;
    u_xlat1.xyz = (-_LightColor0.xyz) + vec3(0.800000012, 0.800000012, 0.800000012);
    u_xlat1.xyz = _BaseColor.www * u_xlat1.xyz + _LightColor0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %51 %82 %93 %131 %134 %179 %213 %219 %220 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %51 Location 51 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %219 Location 219 
                                                      OpDecorate %220 Location 220 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypePointer Output %7 
                                Output f32_4* %51 = OpVariable Output 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %91 = OpTypeVector %6 3 
                                              %92 = OpTypePointer Input %91 
                                 Input f32_3* %93 = OpVariable Input 
                                          u32 %99 = OpConstant 0 
                                             %100 = OpTypePointer Private %6 
                                         u32 %113 = OpConstant 2 
                                Private f32* %115 = OpVariable Private 
                                             %130 = OpTypePointer Output %91 
                               Output f32_3* %131 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                               Output f32_3* %179 = OpVariable Output 
                                             %182 = OpTypePointer Private %91 
                              Private f32_3* %183 = OpVariable Private 
                               Output f32_3* %213 = OpVariable Output 
                               Output f32_4* %219 = OpVariable Output 
                                Input f32_4* %220 = OpVariable Input 
                                             %222 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %52 = OpAccessChain %21 %23 %46 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %51 %58 
                                        f32_4 %59 = OpLoad %44 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %61 = OpAccessChain %21 %36 %24 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpFMul %60 %62 
                                                      OpStore %9 %63 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %44 
                                        f32_4 %67 = OpVectorShuffle %66 %66 0 0 0 0 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %9 %70 
                               Uniform f32_4* %71 = OpAccessChain %21 %36 %36 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %44 
                                        f32_4 %74 = OpVectorShuffle %73 %73 2 2 2 2 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %9 %77 
                               Uniform f32_4* %83 = OpAccessChain %21 %36 %46 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %44 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                Output f32_4* %90 = OpAccessChain %82 %23 
                                                      OpStore %90 %89 
                                        f32_3 %94 = OpLoad %93 
                               Uniform f32_4* %95 = OpAccessChain %21 %24 %23 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                          f32 %98 = OpDot %94 %97 
                                Private f32* %101 = OpAccessChain %9 %99 
                                                      OpStore %101 %98 
                                       f32_3 %102 = OpLoad %93 
                              Uniform f32_4* %103 = OpAccessChain %21 %24 %24 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                         f32 %106 = OpDot %102 %105 
                                Private f32* %107 = OpAccessChain %9 %78 
                                                      OpStore %107 %106 
                                       f32_3 %108 = OpLoad %93 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %36 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %114 = OpAccessChain %9 %113 
                                                      OpStore %114 %112 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_4 %118 = OpLoad %9 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %117 %119 
                                                      OpStore %115 %120 
                                         f32 %121 = OpLoad %115 
                                         f32 %122 = OpExtInst %1 32 %121 
                                                      OpStore %115 %122 
                                         f32 %123 = OpLoad %115 
                                       f32_3 %124 = OpCompositeConstruct %123 %123 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %9 %129 
                                       f32_4 %132 = OpLoad %9 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                                      OpStore %131 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %21 %23 %24 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %136 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %44 %142 
                              Uniform f32_4* %143 = OpAccessChain %21 %23 %23 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_4 %146 = OpLoad %134 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 0 0 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %44 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFAdd %148 %150 
                                       f32_4 %152 = OpLoad %44 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %44 %153 
                              Uniform f32_4* %154 = OpAccessChain %21 %23 %36 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_4 %157 = OpLoad %134 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %44 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %44 %164 
                                       f32_4 %165 = OpLoad %44 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_4 %167 = OpLoad %44 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %166 %168 
                                                      OpStore %115 %169 
                                         f32 %170 = OpLoad %115 
                                         f32 %171 = OpExtInst %1 32 %170 
                                                      OpStore %115 %171 
                                         f32 %172 = OpLoad %115 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_4 %174 = OpLoad %44 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %44 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %44 %178 
                                       f32_4 %180 = OpLoad %44 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                                      OpStore %179 %181 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 2 0 1 
                                       f32_4 %186 = OpLoad %44 
                                       f32_3 %187 = OpVectorShuffle %186 %186 1 2 0 
                                       f32_3 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 2 0 
                                       f32_4 %191 = OpLoad %44 
                                       f32_3 %192 = OpVectorShuffle %191 %191 2 0 1 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %194 = OpLoad %183 
                                       f32_3 %195 = OpFNegate %194 
                                       f32_3 %196 = OpFAdd %193 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %134 
                                       f32_3 %202 = OpVectorShuffle %201 %201 3 3 3 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %9 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %9 %205 
                                       f32_4 %206 = OpLoad %9 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %207 %209 
                                                      OpStore %115 %210 
                                         f32 %211 = OpLoad %115 
                                         f32 %212 = OpExtInst %1 32 %211 
                                                      OpStore %115 %212 
                                         f32 %214 = OpLoad %115 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFMul %215 %217 
                                                      OpStore %213 %218 
                                       f32_4 %221 = OpLoad %220 
                                                      OpStore %219 %221 
                                 Output f32* %223 = OpAccessChain %82 %23 %78 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFNegate %224 
                                 Output f32* %226 = OpAccessChain %82 %23 %78 
                                                      OpStore %226 %225 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 397
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %178 %228 %263 %268 %275 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 RelaxedPrecision 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 RelaxedPrecision 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 RelaxedPrecision 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 RelaxedPrecision 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 RelaxedPrecision 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 RelaxedPrecision 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 RelaxedPrecision 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 RelaxedPrecision 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %228 Location 228 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %263 Location 263 
                                                      OpDecorate %268 Location 268 
                                                      OpDecorate %275 Location 275 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeStruct %7 %7 %7 %7 %7 %6 %6 %6 %6 %6 %6 %6 %7 %7 %6 %6 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32; f32;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 15 
                                              %20 = OpTypePointer Uniform %6 
                                          i32 %37 = OpConstant 6 
                               Private f32_4* %53 = OpVariable Private 
                                          i32 %54 = OpConstant 0 
                                              %55 = OpTypeInt 32 0 
                                          u32 %56 = OpConstant 1 
                                          i32 %59 = OpConstant 2 
                                          u32 %63 = OpConstant 0 
                                              %64 = OpTypePointer Private %6 
                                          f32 %68 = OpConstant 3.674022E-40 
                               Private f32_4* %71 = OpVariable Private 
                                          i32 %74 = OpConstant 10 
                                          i32 %79 = OpConstant 11 
                                              %88 = OpTypePointer Private %12 
                               Private f32_2* %89 = OpVariable Private 
                                          f32 %92 = OpConstant 3.674022E-40 
                                          f32 %93 = OpConstant 3.674022E-40 
                                        f32_2 %94 = OpConstantComposite %92 %93 
                                          i32 %98 = OpConstant 13 
                                              %99 = OpTypePointer Uniform %7 
                              Private f32_4* %110 = OpVariable Private 
                                             %111 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %112 = OpTypeSampledImage %111 
                                             %113 = OpTypePointer UniformConstant %112 
 UniformConstant read_only Texture2DSampled* %114 = OpVariable UniformConstant 
                                         i32 %118 = OpConstant 14 
                              Private f32_4* %133 = OpVariable Private 
                                         u32 %140 = OpConstant 3 
                                         i32 %143 = OpConstant 7 
                                         f32 %150 = OpConstant 3.674022E-40 
                                             %153 = OpTypeVector %6 3 
                                             %154 = OpTypePointer Private %153 
                              Private f32_3* %155 = OpVariable Private 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_3 %159 = OpConstantComposite %158 %158 %158 
                                         f32 %174 = OpConstant 3.674022E-40 
                                       f32_3 %175 = OpConstantComposite %174 %174 %174 
                                Private f32* %177 = OpVariable Private 
                                Input f32_4* %178 = OpVariable Input 
                                             %179 = OpTypePointer Input %6 
                              Private f32_3* %189 = OpVariable Private 
                                         i32 %205 = OpConstant 12 
                                         i32 %213 = OpConstant 8 
                                         i32 %217 = OpConstant 9 
                                             %227 = OpTypePointer Output %7 
                               Output f32_4* %228 = OpVariable Output 
                                             %230 = OpTypePointer Output %6 
                                             %244 = OpTypeBool 
                                             %245 = OpTypePointer Private %244 
                               Private bool* %246 = OpVariable Private 
                                         i32 %251 = OpConstant 1 
                                         i32 %253 = OpConstant -1 
                              Private f32_3* %259 = OpVariable Private 
                                             %262 = OpTypePointer Input %153 
                                Input f32_3* %263 = OpVariable Input 
                                Input f32_3* %268 = OpVariable Input 
                                Input f32_3* %275 = OpVariable Input 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %314 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                       f32_3 %316 = OpConstantComposite %313 %314 %315 
                                         i32 %327 = OpConstant 4 
                                Private f32* %333 = OpVariable Private 
                                         u32 %336 = OpConstant 2 
                                         i32 %343 = OpConstant 5 
                              Private f32_3* %354 = OpVariable Private 
                                         i32 %355 = OpConstant 3 
                                         f32 %378 = OpConstant 3.674022E-40 
                                       f32_3 %379 = OpConstantComposite %378 %378 %378 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 2 2 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                 Uniform f32* %23 = OpAccessChain %17 %19 
                                          f32 %24 = OpLoad %23 
                                        f32_2 %25 = OpCompositeConstruct %22 %24 
                                          f32 %26 = OpCompositeExtract %25 0 
                                          f32 %27 = OpCompositeExtract %25 1 
                                        f32_2 %28 = OpCompositeConstruct %26 %27 
                                        f32_2 %29 = OpFAdd %14 %28 
                                        f32_4 %30 = OpLoad %9 
                                        f32_4 %31 = OpVectorShuffle %30 %29 0 4 2 5 
                                                      OpStore %9 %31 
                                        f32_4 %32 = OpLoad %11 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 0 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpVectorShuffle %34 %33 4 1 5 3 
                                                      OpStore %9 %35 
                                        f32_4 %36 = OpLoad %9 
                                 Uniform f32* %38 = OpAccessChain %17 %37 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %17 %37 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %17 %37 
                                          f32 %43 = OpLoad %42 
                                 Uniform f32* %44 = OpAccessChain %17 %37 
                                          f32 %45 = OpLoad %44 
                                        f32_4 %46 = OpCompositeConstruct %39 %41 %43 %45 
                                          f32 %47 = OpCompositeExtract %46 0 
                                          f32 %48 = OpCompositeExtract %46 1 
                                          f32 %49 = OpCompositeExtract %46 2 
                                          f32 %50 = OpCompositeExtract %46 3 
                                        f32_4 %51 = OpCompositeConstruct %47 %48 %49 %50 
                                        f32_4 %52 = OpFDiv %36 %51 
                                                      OpStore %9 %52 
                                 Uniform f32* %57 = OpAccessChain %17 %54 %56 
                                          f32 %58 = OpLoad %57 
                                 Uniform f32* %60 = OpAccessChain %17 %59 %56 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %58 %61 
                                 Private f32* %65 = OpAccessChain %53 %63 
                                                      OpStore %65 %62 
                                 Private f32* %66 = OpAccessChain %53 %63 
                                          f32 %67 = OpLoad %66 
                                          f32 %69 = OpFMul %67 %68 
                                 Private f32* %70 = OpAccessChain %53 %63 
                                                      OpStore %70 %69 
                                        f32_4 %72 = OpLoad %53 
                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
                                 Uniform f32* %75 = OpAccessChain %17 %74 
                                          f32 %76 = OpLoad %75 
                                 Uniform f32* %77 = OpAccessChain %17 %74 
                                          f32 %78 = OpLoad %77 
                                 Uniform f32* %80 = OpAccessChain %17 %79 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %17 %79 
                                          f32 %83 = OpLoad %82 
                                        f32_4 %84 = OpCompositeConstruct %76 %78 %81 %83 
                                        f32_4 %85 = OpFMul %73 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %71 %87 
                                        f32_4 %90 = OpLoad %71 
                                        f32_2 %91 = OpVectorShuffle %90 %90 2 3 
                                        f32_2 %95 = OpFAdd %91 %94 
                                                      OpStore %89 %95 
                                        f32_4 %96 = OpLoad %71 
                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %98 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %97 %102 
                              Uniform f32_4* %104 = OpAccessChain %17 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %53 %109 
                  read_only Texture2DSampled %115 = OpLoad %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                Uniform f32* %119 = OpAccessChain %17 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_4 %121 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                                      OpStore %110 %121 
                                       f32_2 %122 = OpLoad %89 
                              Uniform f32_4* %123 = OpAccessChain %17 %98 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_2 %126 = OpFMul %122 %125 
                              Uniform f32_4* %127 = OpAccessChain %17 %98 
                                       f32_4 %128 = OpLoad %127 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                       f32_4 %131 = OpLoad %53 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %53 %132 
                  read_only Texture2DSampled %134 = OpLoad %114 
                                       f32_4 %135 = OpLoad %53 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                Uniform f32* %137 = OpAccessChain %17 %118 
                                         f32 %138 = OpLoad %137 
                                       f32_4 %139 = OpImageSampleExplicitLod %134 %136 Lod %7 
                                                      OpStore %133 %139 
                                Private f32* %141 = OpAccessChain %110 %140 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %144 = OpAccessChain %17 %143 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpFAdd %142 %145 
                                Private f32* %147 = OpAccessChain %89 %63 
                                                      OpStore %147 %146 
                                Private f32* %148 = OpAccessChain %89 %63 
                                         f32 %149 = OpLoad %148 
                                         f32 %151 = OpExtInst %1 43 %149 %92 %150 
                                Private f32* %152 = OpAccessChain %89 %63 
                                                      OpStore %152 %151 
                                       f32_4 %156 = OpLoad %110 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %160 = OpFMul %157 %159 
                                Uniform f32* %161 = OpAccessChain %17 %143 
                                         f32 %162 = OpLoad %161 
                                Uniform f32* %163 = OpAccessChain %17 %143 
                                         f32 %164 = OpLoad %163 
                                Uniform f32* %165 = OpAccessChain %17 %143 
                                         f32 %166 = OpLoad %165 
                                       f32_3 %167 = OpCompositeConstruct %162 %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                         f32 %169 = OpCompositeExtract %167 1 
                                         f32 %170 = OpCompositeExtract %167 2 
                                       f32_3 %171 = OpCompositeConstruct %168 %169 %170 
                                       f32_3 %172 = OpFAdd %160 %171 
                                                      OpStore %155 %172 
                                       f32_3 %173 = OpLoad %155 
                                       f32_3 %176 = OpFAdd %173 %175 
                                                      OpStore %155 %176 
                                  Input f32* %180 = OpAccessChain %178 %140 
                                         f32 %181 = OpLoad %180 
                                Private f32* %182 = OpAccessChain %89 %63 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFMul %181 %183 
                                Private f32* %185 = OpAccessChain %133 %140 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                         f32 %188 = OpFAdd %184 %187 
                                                      OpStore %177 %188 
                                       f32_4 %190 = OpLoad %133 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %191 %159 
                                       f32_3 %193 = OpFAdd %192 %175 
                                                      OpStore %189 %193 
                                       f32_4 %194 = OpLoad %178 
                                       f32_3 %195 = OpVectorShuffle %194 %194 3 3 3 
                                       f32_3 %196 = OpLoad %155 
                                       f32_3 %197 = OpFMul %195 %196 
                                       f32_3 %198 = OpLoad %189 
                                       f32_3 %199 = OpFNegate %198 
                                       f32_3 %200 = OpFAdd %197 %199 
                                       f32_4 %201 = OpLoad %53 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %53 %202 
                                       f32_4 %203 = OpLoad %53 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                              Uniform f32_4* %206 = OpAccessChain %17 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %204 %208 
                                       f32_4 %210 = OpLoad %53 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %53 %211 
                                         f32 %212 = OpLoad %177 
                                Uniform f32* %214 = OpAccessChain %17 %213 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFMul %212 %215 
                                Uniform f32* %218 = OpAccessChain %17 %217 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFNegate %219 
                                         f32 %221 = OpFAdd %216 %220 
                                Private f32* %222 = OpAccessChain %89 %63 
                                                      OpStore %222 %221 
                                         f32 %223 = OpLoad %177 
                                Uniform f32* %224 = OpAccessChain %17 %213 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                                      OpStore %177 %226 
                                         f32 %229 = OpLoad %177 
                                 Output f32* %231 = OpAccessChain %228 %140 
                                                      OpStore %231 %229 
                                Private f32* %232 = OpAccessChain %89 %63 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpExtInst %1 9 %233 
                                Private f32* %235 = OpAccessChain %89 %63 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %89 %63 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 43 %237 %92 %150 
                                Private f32* %239 = OpAccessChain %89 %63 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %89 %63 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFAdd %241 %174 
                                Private f32* %243 = OpAccessChain %89 %63 
                                                      OpStore %243 %242 
                                Private f32* %247 = OpAccessChain %89 %63 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdLessThan %248 %92 
                                                      OpStore %246 %249 
                                        bool %250 = OpLoad %246 
                                         i32 %252 = OpSelect %250 %251 %54 
                                         i32 %254 = OpIMul %252 %253 
                                        bool %255 = OpINotEqual %254 %54 
                                                      OpSelectionMerge %257 None 
                                                      OpBranchConditional %255 %256 %257 
                                             %256 = OpLabel 
                                                      OpKill
                                             %257 = OpLabel 
                                       f32_4 %260 = OpLoad %53 
                                       f32_3 %261 = OpVectorShuffle %260 %260 1 1 1 
                                       f32_3 %264 = OpLoad %263 
                                       f32_3 %265 = OpFMul %261 %264 
                                                      OpStore %259 %265 
                                       f32_4 %266 = OpLoad %53 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
                                       f32_3 %269 = OpLoad %268 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %259 
                                       f32_3 %272 = OpFAdd %270 %271 
                                       f32_4 %273 = OpLoad %53 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 6 
                                                      OpStore %53 %274 
                                       f32_3 %276 = OpLoad %275 
                                       f32_3 %277 = OpLoad %275 
                                         f32 %278 = OpDot %276 %277 
                                Private f32* %279 = OpAccessChain %259 %63 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %259 %63 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 32 %281 
                                Private f32* %283 = OpAccessChain %259 %63 
                                                      OpStore %283 %282 
                                       f32_3 %284 = OpLoad %259 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpLoad %275 
                                       f32_3 %287 = OpFMul %285 %286 
                                                      OpStore %259 %287 
                                       f32_4 %288 = OpLoad %53 
                                       f32_3 %289 = OpVectorShuffle %288 %288 2 2 2 
                                       f32_3 %290 = OpLoad %259 
                                       f32_3 %291 = OpFMul %289 %290 
                                       f32_4 %292 = OpLoad %53 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 3 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %53 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %53 %296 
                                       f32_4 %297 = OpLoad %53 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_4 %299 = OpLoad %53 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                         f32 %301 = OpDot %298 %300 
                                                      OpStore %177 %301 
                                         f32 %302 = OpLoad %177 
                                         f32 %303 = OpExtInst %1 32 %302 
                                                      OpStore %177 %303 
                                         f32 %304 = OpLoad %177 
                                       f32_3 %305 = OpCompositeConstruct %304 %304 %304 
                                       f32_4 %306 = OpLoad %53 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %53 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %53 %310 
                                       f32_4 %311 = OpLoad %53 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                         f32 %317 = OpDot %312 %316 
                                Private f32* %318 = OpAccessChain %53 %63 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %53 %63 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %150 
                                Private f32* %323 = OpAccessChain %53 %63 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %53 %63 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFNegate %325 
                                Uniform f32* %328 = OpAccessChain %17 %327 %140 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFMul %326 %329 
                                         f32 %331 = OpFAdd %330 %150 
                                Private f32* %332 = OpAccessChain %53 %63 
                                                      OpStore %332 %331 
                                Uniform f32* %334 = OpAccessChain %17 %205 %56 
                                         f32 %335 = OpLoad %334 
                                  Input f32* %337 = OpAccessChain %178 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFMul %335 %338 
                                         f32 %340 = OpFAdd %339 %150 
                                                      OpStore %333 %340 
                                         f32 %341 = OpLoad %333 
                                         f32 %342 = OpFMul %341 %93 
                                Uniform f32* %344 = OpAccessChain %17 %343 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFAdd %342 %345 
                                                      OpStore %333 %346 
                                         f32 %347 = OpLoad %333 
                                         f32 %348 = OpExtInst %1 43 %347 %92 %150 
                                                      OpStore %333 %348 
                                         f32 %349 = OpLoad %333 
                                Private f32* %350 = OpAccessChain %53 %63 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                Private f32* %353 = OpAccessChain %53 %63 
                                                      OpStore %353 %352 
                              Uniform f32_4* %356 = OpAccessChain %17 %355 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                              Uniform f32_4* %359 = OpAccessChain %17 %327 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFNegate %361 
                                       f32_3 %363 = OpFAdd %358 %362 
                                                      OpStore %354 %363 
                                       f32_4 %364 = OpLoad %53 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 0 0 
                                       f32_3 %366 = OpLoad %354 
                                       f32_3 %367 = OpFMul %365 %366 
                              Uniform f32_4* %368 = OpAccessChain %17 %327 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFAdd %367 %370 
                                       f32_4 %372 = OpLoad %53 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %53 %373 
                              Uniform f32_4* %374 = OpAccessChain %17 %251 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFNegate %376 
                                       f32_3 %380 = OpFAdd %377 %379 
                                                      OpStore %259 %380 
                              Uniform f32_4* %381 = OpAccessChain %17 %355 
                                       f32_4 %382 = OpLoad %381 
                                       f32_3 %383 = OpVectorShuffle %382 %382 3 3 3 
                                       f32_3 %384 = OpLoad %259 
                                       f32_3 %385 = OpFMul %383 %384 
                              Uniform f32_4* %386 = OpAccessChain %17 %251 
                                       f32_4 %387 = OpLoad %386 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFAdd %385 %388 
                                                      OpStore %259 %389 
                                       f32_4 %390 = OpLoad %53 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpLoad %259 
                                       f32_3 %393 = OpFMul %391 %392 
                                       f32_4 %394 = OpLoad %228 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
                                                      OpStore %228 %395 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _LightColor0;
uniform 	vec4 _TimeEditor;
uniform 	vec4 _BaseColor;
uniform 	vec4 _Shading;
uniform 	float _DepthIntensity;
uniform 	float _Tiling;
uniform 	float _Density;
uniform 	float _Alpha;
uniform 	float _AlphaCut;
uniform 	float _Speed;
uniform 	float _SpeedSecondLayer;
uniform 	vec4 _CloudNormalsDirection;
uniform 	vec4 _PerlinNormalMap_ST;
uniform 	float _MipLevel;
uniform 	float _ZOffset;
uniform  sampler2D _PerlinNormalMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec2 u_xlat4;
float u_xlat6;
bool u_xlatb6;
float u_xlat7;
void main()
{
    u_xlat0.yw = vs_TEXCOORD0.zz + vec2(vec2(_ZOffset, _ZOffset));
    u_xlat0.xz = vs_TEXCOORD0.xx;
    u_xlat0 = u_xlat0 / vec4(vec4(_Tiling, _Tiling, _Tiling, _Tiling));
    u_xlat1.x = _Time.y + _TimeEditor.y;
    u_xlat1.x = u_xlat1.x * 0.00100000005;
    u_xlat0 = u_xlat1.xxxx * vec4(_Speed, _Speed, _SpeedSecondLayer, _SpeedSecondLayer) + u_xlat0;
    u_xlat4.xy = u_xlat0.zw + vec2(0.0, 0.5);
    u_xlat0.xy = u_xlat0.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat0.xy = u_xlat4.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_0 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat7 = u_xlat10_1.w + _Density;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(vec3(_Density, _Density, _Density));
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6 = vs_COLOR0.w * u_xlat7 + (-u_xlat10_0.w);
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + (-u_xlat16_0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * _CloudNormalsDirection.xyz;
    u_xlat1.x = u_xlat6 * _Alpha + (-_AlphaCut);
    u_xlat6 = u_xlat6 * _Alpha;
    SV_Target0.w = u_xlat6;
    u_xlat6 = ceil(u_xlat1.x);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat6 = u_xlat6 + -1.0;
    u_xlatb6 = u_xlat6<0.0;
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
    u_xlat0.xyw = u_xlat0.xxx * vs_TEXCOORD2.xyz + u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.zzz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.330000013, -0.600000024));
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = (-u_xlat0.x) * _Shading.w + 1.0;
    u_xlat2.x = _CloudNormalsDirection.y * vs_COLOR0.z + 1.0;
    u_xlat2.x = u_xlat2.x * 0.5 + _DepthIntensity;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.xyz = _BaseColor.xyz + (-_Shading.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Shading.xyz;
    u_xlat1.xyz = (-_LightColor0.xyz) + vec3(0.800000012, 0.800000012, 0.800000012);
    u_xlat1.xyz = _BaseColor.www * u_xlat1.xyz + _LightColor0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %51 %82 %93 %131 %134 %179 %213 %219 %220 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %51 Location 51 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %219 Location 219 
                                                      OpDecorate %220 Location 220 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypePointer Output %7 
                                Output f32_4* %51 = OpVariable Output 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %91 = OpTypeVector %6 3 
                                              %92 = OpTypePointer Input %91 
                                 Input f32_3* %93 = OpVariable Input 
                                          u32 %99 = OpConstant 0 
                                             %100 = OpTypePointer Private %6 
                                         u32 %113 = OpConstant 2 
                                Private f32* %115 = OpVariable Private 
                                             %130 = OpTypePointer Output %91 
                               Output f32_3* %131 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                               Output f32_3* %179 = OpVariable Output 
                                             %182 = OpTypePointer Private %91 
                              Private f32_3* %183 = OpVariable Private 
                               Output f32_3* %213 = OpVariable Output 
                               Output f32_4* %219 = OpVariable Output 
                                Input f32_4* %220 = OpVariable Input 
                                             %222 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %52 = OpAccessChain %21 %23 %46 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %51 %58 
                                        f32_4 %59 = OpLoad %44 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %61 = OpAccessChain %21 %36 %24 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpFMul %60 %62 
                                                      OpStore %9 %63 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %44 
                                        f32_4 %67 = OpVectorShuffle %66 %66 0 0 0 0 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %9 %70 
                               Uniform f32_4* %71 = OpAccessChain %21 %36 %36 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %44 
                                        f32_4 %74 = OpVectorShuffle %73 %73 2 2 2 2 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %9 %77 
                               Uniform f32_4* %83 = OpAccessChain %21 %36 %46 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %44 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                Output f32_4* %90 = OpAccessChain %82 %23 
                                                      OpStore %90 %89 
                                        f32_3 %94 = OpLoad %93 
                               Uniform f32_4* %95 = OpAccessChain %21 %24 %23 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                          f32 %98 = OpDot %94 %97 
                                Private f32* %101 = OpAccessChain %9 %99 
                                                      OpStore %101 %98 
                                       f32_3 %102 = OpLoad %93 
                              Uniform f32_4* %103 = OpAccessChain %21 %24 %24 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                         f32 %106 = OpDot %102 %105 
                                Private f32* %107 = OpAccessChain %9 %78 
                                                      OpStore %107 %106 
                                       f32_3 %108 = OpLoad %93 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %36 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %114 = OpAccessChain %9 %113 
                                                      OpStore %114 %112 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_4 %118 = OpLoad %9 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %117 %119 
                                                      OpStore %115 %120 
                                         f32 %121 = OpLoad %115 
                                         f32 %122 = OpExtInst %1 32 %121 
                                                      OpStore %115 %122 
                                         f32 %123 = OpLoad %115 
                                       f32_3 %124 = OpCompositeConstruct %123 %123 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %9 %129 
                                       f32_4 %132 = OpLoad %9 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                                      OpStore %131 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %21 %23 %24 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %136 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %44 %142 
                              Uniform f32_4* %143 = OpAccessChain %21 %23 %23 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_4 %146 = OpLoad %134 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 0 0 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %44 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFAdd %148 %150 
                                       f32_4 %152 = OpLoad %44 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %44 %153 
                              Uniform f32_4* %154 = OpAccessChain %21 %23 %36 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_4 %157 = OpLoad %134 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %44 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %44 %164 
                                       f32_4 %165 = OpLoad %44 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_4 %167 = OpLoad %44 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %166 %168 
                                                      OpStore %115 %169 
                                         f32 %170 = OpLoad %115 
                                         f32 %171 = OpExtInst %1 32 %170 
                                                      OpStore %115 %171 
                                         f32 %172 = OpLoad %115 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_4 %174 = OpLoad %44 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %44 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %44 %178 
                                       f32_4 %180 = OpLoad %44 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                                      OpStore %179 %181 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 2 0 1 
                                       f32_4 %186 = OpLoad %44 
                                       f32_3 %187 = OpVectorShuffle %186 %186 1 2 0 
                                       f32_3 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 2 0 
                                       f32_4 %191 = OpLoad %44 
                                       f32_3 %192 = OpVectorShuffle %191 %191 2 0 1 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %194 = OpLoad %183 
                                       f32_3 %195 = OpFNegate %194 
                                       f32_3 %196 = OpFAdd %193 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %134 
                                       f32_3 %202 = OpVectorShuffle %201 %201 3 3 3 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %9 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %9 %205 
                                       f32_4 %206 = OpLoad %9 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %207 %209 
                                                      OpStore %115 %210 
                                         f32 %211 = OpLoad %115 
                                         f32 %212 = OpExtInst %1 32 %211 
                                                      OpStore %115 %212 
                                         f32 %214 = OpLoad %115 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFMul %215 %217 
                                                      OpStore %213 %218 
                                       f32_4 %221 = OpLoad %220 
                                                      OpStore %219 %221 
                                 Output f32* %223 = OpAccessChain %82 %23 %78 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFNegate %224 
                                 Output f32* %226 = OpAccessChain %82 %23 %78 
                                                      OpStore %226 %225 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 397
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %178 %228 %263 %268 %275 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 RelaxedPrecision 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 RelaxedPrecision 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 RelaxedPrecision 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 RelaxedPrecision 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 RelaxedPrecision 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 RelaxedPrecision 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 RelaxedPrecision 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 RelaxedPrecision 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %228 Location 228 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %263 Location 263 
                                                      OpDecorate %268 Location 268 
                                                      OpDecorate %275 Location 275 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeStruct %7 %7 %7 %7 %7 %6 %6 %6 %6 %6 %6 %6 %7 %7 %6 %6 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32; f32;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 15 
                                              %20 = OpTypePointer Uniform %6 
                                          i32 %37 = OpConstant 6 
                               Private f32_4* %53 = OpVariable Private 
                                          i32 %54 = OpConstant 0 
                                              %55 = OpTypeInt 32 0 
                                          u32 %56 = OpConstant 1 
                                          i32 %59 = OpConstant 2 
                                          u32 %63 = OpConstant 0 
                                              %64 = OpTypePointer Private %6 
                                          f32 %68 = OpConstant 3.674022E-40 
                               Private f32_4* %71 = OpVariable Private 
                                          i32 %74 = OpConstant 10 
                                          i32 %79 = OpConstant 11 
                                              %88 = OpTypePointer Private %12 
                               Private f32_2* %89 = OpVariable Private 
                                          f32 %92 = OpConstant 3.674022E-40 
                                          f32 %93 = OpConstant 3.674022E-40 
                                        f32_2 %94 = OpConstantComposite %92 %93 
                                          i32 %98 = OpConstant 13 
                                              %99 = OpTypePointer Uniform %7 
                              Private f32_4* %110 = OpVariable Private 
                                             %111 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %112 = OpTypeSampledImage %111 
                                             %113 = OpTypePointer UniformConstant %112 
 UniformConstant read_only Texture2DSampled* %114 = OpVariable UniformConstant 
                                         i32 %118 = OpConstant 14 
                              Private f32_4* %133 = OpVariable Private 
                                         u32 %140 = OpConstant 3 
                                         i32 %143 = OpConstant 7 
                                         f32 %150 = OpConstant 3.674022E-40 
                                             %153 = OpTypeVector %6 3 
                                             %154 = OpTypePointer Private %153 
                              Private f32_3* %155 = OpVariable Private 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_3 %159 = OpConstantComposite %158 %158 %158 
                                         f32 %174 = OpConstant 3.674022E-40 
                                       f32_3 %175 = OpConstantComposite %174 %174 %174 
                                Private f32* %177 = OpVariable Private 
                                Input f32_4* %178 = OpVariable Input 
                                             %179 = OpTypePointer Input %6 
                              Private f32_3* %189 = OpVariable Private 
                                         i32 %205 = OpConstant 12 
                                         i32 %213 = OpConstant 8 
                                         i32 %217 = OpConstant 9 
                                             %227 = OpTypePointer Output %7 
                               Output f32_4* %228 = OpVariable Output 
                                             %230 = OpTypePointer Output %6 
                                             %244 = OpTypeBool 
                                             %245 = OpTypePointer Private %244 
                               Private bool* %246 = OpVariable Private 
                                         i32 %251 = OpConstant 1 
                                         i32 %253 = OpConstant -1 
                              Private f32_3* %259 = OpVariable Private 
                                             %262 = OpTypePointer Input %153 
                                Input f32_3* %263 = OpVariable Input 
                                Input f32_3* %268 = OpVariable Input 
                                Input f32_3* %275 = OpVariable Input 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %314 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                       f32_3 %316 = OpConstantComposite %313 %314 %315 
                                         i32 %327 = OpConstant 4 
                                Private f32* %333 = OpVariable Private 
                                         u32 %336 = OpConstant 2 
                                         i32 %343 = OpConstant 5 
                              Private f32_3* %354 = OpVariable Private 
                                         i32 %355 = OpConstant 3 
                                         f32 %378 = OpConstant 3.674022E-40 
                                       f32_3 %379 = OpConstantComposite %378 %378 %378 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 2 2 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                 Uniform f32* %23 = OpAccessChain %17 %19 
                                          f32 %24 = OpLoad %23 
                                        f32_2 %25 = OpCompositeConstruct %22 %24 
                                          f32 %26 = OpCompositeExtract %25 0 
                                          f32 %27 = OpCompositeExtract %25 1 
                                        f32_2 %28 = OpCompositeConstruct %26 %27 
                                        f32_2 %29 = OpFAdd %14 %28 
                                        f32_4 %30 = OpLoad %9 
                                        f32_4 %31 = OpVectorShuffle %30 %29 0 4 2 5 
                                                      OpStore %9 %31 
                                        f32_4 %32 = OpLoad %11 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 0 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpVectorShuffle %34 %33 4 1 5 3 
                                                      OpStore %9 %35 
                                        f32_4 %36 = OpLoad %9 
                                 Uniform f32* %38 = OpAccessChain %17 %37 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %17 %37 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %17 %37 
                                          f32 %43 = OpLoad %42 
                                 Uniform f32* %44 = OpAccessChain %17 %37 
                                          f32 %45 = OpLoad %44 
                                        f32_4 %46 = OpCompositeConstruct %39 %41 %43 %45 
                                          f32 %47 = OpCompositeExtract %46 0 
                                          f32 %48 = OpCompositeExtract %46 1 
                                          f32 %49 = OpCompositeExtract %46 2 
                                          f32 %50 = OpCompositeExtract %46 3 
                                        f32_4 %51 = OpCompositeConstruct %47 %48 %49 %50 
                                        f32_4 %52 = OpFDiv %36 %51 
                                                      OpStore %9 %52 
                                 Uniform f32* %57 = OpAccessChain %17 %54 %56 
                                          f32 %58 = OpLoad %57 
                                 Uniform f32* %60 = OpAccessChain %17 %59 %56 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %58 %61 
                                 Private f32* %65 = OpAccessChain %53 %63 
                                                      OpStore %65 %62 
                                 Private f32* %66 = OpAccessChain %53 %63 
                                          f32 %67 = OpLoad %66 
                                          f32 %69 = OpFMul %67 %68 
                                 Private f32* %70 = OpAccessChain %53 %63 
                                                      OpStore %70 %69 
                                        f32_4 %72 = OpLoad %53 
                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
                                 Uniform f32* %75 = OpAccessChain %17 %74 
                                          f32 %76 = OpLoad %75 
                                 Uniform f32* %77 = OpAccessChain %17 %74 
                                          f32 %78 = OpLoad %77 
                                 Uniform f32* %80 = OpAccessChain %17 %79 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %17 %79 
                                          f32 %83 = OpLoad %82 
                                        f32_4 %84 = OpCompositeConstruct %76 %78 %81 %83 
                                        f32_4 %85 = OpFMul %73 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %71 %87 
                                        f32_4 %90 = OpLoad %71 
                                        f32_2 %91 = OpVectorShuffle %90 %90 2 3 
                                        f32_2 %95 = OpFAdd %91 %94 
                                                      OpStore %89 %95 
                                        f32_4 %96 = OpLoad %71 
                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %98 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %97 %102 
                              Uniform f32_4* %104 = OpAccessChain %17 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %53 %109 
                  read_only Texture2DSampled %115 = OpLoad %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                Uniform f32* %119 = OpAccessChain %17 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_4 %121 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                                      OpStore %110 %121 
                                       f32_2 %122 = OpLoad %89 
                              Uniform f32_4* %123 = OpAccessChain %17 %98 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_2 %126 = OpFMul %122 %125 
                              Uniform f32_4* %127 = OpAccessChain %17 %98 
                                       f32_4 %128 = OpLoad %127 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                       f32_4 %131 = OpLoad %53 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %53 %132 
                  read_only Texture2DSampled %134 = OpLoad %114 
                                       f32_4 %135 = OpLoad %53 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                Uniform f32* %137 = OpAccessChain %17 %118 
                                         f32 %138 = OpLoad %137 
                                       f32_4 %139 = OpImageSampleExplicitLod %134 %136 Lod %7 
                                                      OpStore %133 %139 
                                Private f32* %141 = OpAccessChain %110 %140 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %144 = OpAccessChain %17 %143 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpFAdd %142 %145 
                                Private f32* %147 = OpAccessChain %89 %63 
                                                      OpStore %147 %146 
                                Private f32* %148 = OpAccessChain %89 %63 
                                         f32 %149 = OpLoad %148 
                                         f32 %151 = OpExtInst %1 43 %149 %92 %150 
                                Private f32* %152 = OpAccessChain %89 %63 
                                                      OpStore %152 %151 
                                       f32_4 %156 = OpLoad %110 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %160 = OpFMul %157 %159 
                                Uniform f32* %161 = OpAccessChain %17 %143 
                                         f32 %162 = OpLoad %161 
                                Uniform f32* %163 = OpAccessChain %17 %143 
                                         f32 %164 = OpLoad %163 
                                Uniform f32* %165 = OpAccessChain %17 %143 
                                         f32 %166 = OpLoad %165 
                                       f32_3 %167 = OpCompositeConstruct %162 %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                         f32 %169 = OpCompositeExtract %167 1 
                                         f32 %170 = OpCompositeExtract %167 2 
                                       f32_3 %171 = OpCompositeConstruct %168 %169 %170 
                                       f32_3 %172 = OpFAdd %160 %171 
                                                      OpStore %155 %172 
                                       f32_3 %173 = OpLoad %155 
                                       f32_3 %176 = OpFAdd %173 %175 
                                                      OpStore %155 %176 
                                  Input f32* %180 = OpAccessChain %178 %140 
                                         f32 %181 = OpLoad %180 
                                Private f32* %182 = OpAccessChain %89 %63 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFMul %181 %183 
                                Private f32* %185 = OpAccessChain %133 %140 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                         f32 %188 = OpFAdd %184 %187 
                                                      OpStore %177 %188 
                                       f32_4 %190 = OpLoad %133 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %191 %159 
                                       f32_3 %193 = OpFAdd %192 %175 
                                                      OpStore %189 %193 
                                       f32_4 %194 = OpLoad %178 
                                       f32_3 %195 = OpVectorShuffle %194 %194 3 3 3 
                                       f32_3 %196 = OpLoad %155 
                                       f32_3 %197 = OpFMul %195 %196 
                                       f32_3 %198 = OpLoad %189 
                                       f32_3 %199 = OpFNegate %198 
                                       f32_3 %200 = OpFAdd %197 %199 
                                       f32_4 %201 = OpLoad %53 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %53 %202 
                                       f32_4 %203 = OpLoad %53 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                              Uniform f32_4* %206 = OpAccessChain %17 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %204 %208 
                                       f32_4 %210 = OpLoad %53 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %53 %211 
                                         f32 %212 = OpLoad %177 
                                Uniform f32* %214 = OpAccessChain %17 %213 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFMul %212 %215 
                                Uniform f32* %218 = OpAccessChain %17 %217 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFNegate %219 
                                         f32 %221 = OpFAdd %216 %220 
                                Private f32* %222 = OpAccessChain %89 %63 
                                                      OpStore %222 %221 
                                         f32 %223 = OpLoad %177 
                                Uniform f32* %224 = OpAccessChain %17 %213 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                                      OpStore %177 %226 
                                         f32 %229 = OpLoad %177 
                                 Output f32* %231 = OpAccessChain %228 %140 
                                                      OpStore %231 %229 
                                Private f32* %232 = OpAccessChain %89 %63 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpExtInst %1 9 %233 
                                Private f32* %235 = OpAccessChain %89 %63 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %89 %63 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 43 %237 %92 %150 
                                Private f32* %239 = OpAccessChain %89 %63 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %89 %63 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFAdd %241 %174 
                                Private f32* %243 = OpAccessChain %89 %63 
                                                      OpStore %243 %242 
                                Private f32* %247 = OpAccessChain %89 %63 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdLessThan %248 %92 
                                                      OpStore %246 %249 
                                        bool %250 = OpLoad %246 
                                         i32 %252 = OpSelect %250 %251 %54 
                                         i32 %254 = OpIMul %252 %253 
                                        bool %255 = OpINotEqual %254 %54 
                                                      OpSelectionMerge %257 None 
                                                      OpBranchConditional %255 %256 %257 
                                             %256 = OpLabel 
                                                      OpKill
                                             %257 = OpLabel 
                                       f32_4 %260 = OpLoad %53 
                                       f32_3 %261 = OpVectorShuffle %260 %260 1 1 1 
                                       f32_3 %264 = OpLoad %263 
                                       f32_3 %265 = OpFMul %261 %264 
                                                      OpStore %259 %265 
                                       f32_4 %266 = OpLoad %53 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
                                       f32_3 %269 = OpLoad %268 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %259 
                                       f32_3 %272 = OpFAdd %270 %271 
                                       f32_4 %273 = OpLoad %53 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 6 
                                                      OpStore %53 %274 
                                       f32_3 %276 = OpLoad %275 
                                       f32_3 %277 = OpLoad %275 
                                         f32 %278 = OpDot %276 %277 
                                Private f32* %279 = OpAccessChain %259 %63 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %259 %63 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 32 %281 
                                Private f32* %283 = OpAccessChain %259 %63 
                                                      OpStore %283 %282 
                                       f32_3 %284 = OpLoad %259 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpLoad %275 
                                       f32_3 %287 = OpFMul %285 %286 
                                                      OpStore %259 %287 
                                       f32_4 %288 = OpLoad %53 
                                       f32_3 %289 = OpVectorShuffle %288 %288 2 2 2 
                                       f32_3 %290 = OpLoad %259 
                                       f32_3 %291 = OpFMul %289 %290 
                                       f32_4 %292 = OpLoad %53 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 3 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %53 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %53 %296 
                                       f32_4 %297 = OpLoad %53 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_4 %299 = OpLoad %53 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                         f32 %301 = OpDot %298 %300 
                                                      OpStore %177 %301 
                                         f32 %302 = OpLoad %177 
                                         f32 %303 = OpExtInst %1 32 %302 
                                                      OpStore %177 %303 
                                         f32 %304 = OpLoad %177 
                                       f32_3 %305 = OpCompositeConstruct %304 %304 %304 
                                       f32_4 %306 = OpLoad %53 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %53 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %53 %310 
                                       f32_4 %311 = OpLoad %53 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                         f32 %317 = OpDot %312 %316 
                                Private f32* %318 = OpAccessChain %53 %63 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %53 %63 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %150 
                                Private f32* %323 = OpAccessChain %53 %63 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %53 %63 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFNegate %325 
                                Uniform f32* %328 = OpAccessChain %17 %327 %140 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFMul %326 %329 
                                         f32 %331 = OpFAdd %330 %150 
                                Private f32* %332 = OpAccessChain %53 %63 
                                                      OpStore %332 %331 
                                Uniform f32* %334 = OpAccessChain %17 %205 %56 
                                         f32 %335 = OpLoad %334 
                                  Input f32* %337 = OpAccessChain %178 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFMul %335 %338 
                                         f32 %340 = OpFAdd %339 %150 
                                                      OpStore %333 %340 
                                         f32 %341 = OpLoad %333 
                                         f32 %342 = OpFMul %341 %93 
                                Uniform f32* %344 = OpAccessChain %17 %343 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFAdd %342 %345 
                                                      OpStore %333 %346 
                                         f32 %347 = OpLoad %333 
                                         f32 %348 = OpExtInst %1 43 %347 %92 %150 
                                                      OpStore %333 %348 
                                         f32 %349 = OpLoad %333 
                                Private f32* %350 = OpAccessChain %53 %63 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                Private f32* %353 = OpAccessChain %53 %63 
                                                      OpStore %353 %352 
                              Uniform f32_4* %356 = OpAccessChain %17 %355 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                              Uniform f32_4* %359 = OpAccessChain %17 %327 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFNegate %361 
                                       f32_3 %363 = OpFAdd %358 %362 
                                                      OpStore %354 %363 
                                       f32_4 %364 = OpLoad %53 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 0 0 
                                       f32_3 %366 = OpLoad %354 
                                       f32_3 %367 = OpFMul %365 %366 
                              Uniform f32_4* %368 = OpAccessChain %17 %327 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFAdd %367 %370 
                                       f32_4 %372 = OpLoad %53 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %53 %373 
                              Uniform f32_4* %374 = OpAccessChain %17 %251 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFNegate %376 
                                       f32_3 %380 = OpFAdd %377 %379 
                                                      OpStore %259 %380 
                              Uniform f32_4* %381 = OpAccessChain %17 %355 
                                       f32_4 %382 = OpLoad %381 
                                       f32_3 %383 = OpVectorShuffle %382 %382 3 3 3 
                                       f32_3 %384 = OpLoad %259 
                                       f32_3 %385 = OpFMul %383 %384 
                              Uniform f32_4* %386 = OpAccessChain %17 %251 
                                       f32_4 %387 = OpLoad %386 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFAdd %385 %388 
                                                      OpStore %259 %389 
                                       f32_4 %390 = OpLoad %53 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpLoad %259 
                                       f32_3 %393 = OpFMul %391 %392 
                                       f32_4 %394 = OpLoad %228 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
                                                      OpStore %228 %395 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _LightColor0;
uniform 	vec4 _TimeEditor;
uniform 	vec4 _BaseColor;
uniform 	vec4 _Shading;
uniform 	float _DepthIntensity;
uniform 	float _Tiling;
uniform 	float _Density;
uniform 	float _Alpha;
uniform 	float _AlphaCut;
uniform 	float _Speed;
uniform 	float _SpeedSecondLayer;
uniform 	vec4 _CloudNormalsDirection;
uniform 	vec4 _PerlinNormalMap_ST;
uniform 	float _MipLevel;
uniform 	float _ZOffset;
uniform  sampler2D _PerlinNormalMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec2 u_xlat4;
float u_xlat6;
bool u_xlatb6;
float u_xlat7;
void main()
{
    u_xlat0.yw = vs_TEXCOORD0.zz + vec2(vec2(_ZOffset, _ZOffset));
    u_xlat0.xz = vs_TEXCOORD0.xx;
    u_xlat0 = u_xlat0 / vec4(vec4(_Tiling, _Tiling, _Tiling, _Tiling));
    u_xlat1.x = _Time.y + _TimeEditor.y;
    u_xlat1.x = u_xlat1.x * 0.00100000005;
    u_xlat0 = u_xlat1.xxxx * vec4(_Speed, _Speed, _SpeedSecondLayer, _SpeedSecondLayer) + u_xlat0;
    u_xlat4.xy = u_xlat0.zw + vec2(0.0, 0.5);
    u_xlat0.xy = u_xlat0.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat0.xy = u_xlat4.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_0 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat7 = u_xlat10_1.w + _Density;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(vec3(_Density, _Density, _Density));
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6 = vs_COLOR0.w * u_xlat7 + (-u_xlat10_0.w);
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + (-u_xlat16_0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * _CloudNormalsDirection.xyz;
    u_xlat1.x = u_xlat6 * _Alpha + (-_AlphaCut);
    u_xlat6 = u_xlat6 * _Alpha;
    SV_Target0.w = u_xlat6;
    u_xlat6 = ceil(u_xlat1.x);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat6 = u_xlat6 + -1.0;
    u_xlatb6 = u_xlat6<0.0;
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
    u_xlat0.xyw = u_xlat0.xxx * vs_TEXCOORD2.xyz + u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.zzz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.330000013, -0.600000024));
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = (-u_xlat0.x) * _Shading.w + 1.0;
    u_xlat2.x = _CloudNormalsDirection.y * vs_COLOR0.z + 1.0;
    u_xlat2.x = u_xlat2.x * 0.5 + _DepthIntensity;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.xyz = _BaseColor.xyz + (-_Shading.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Shading.xyz;
    u_xlat1.xyz = (-_LightColor0.xyz) + vec3(0.800000012, 0.800000012, 0.800000012);
    u_xlat1.xyz = _BaseColor.www * u_xlat1.xyz + _LightColor0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %51 %82 %93 %131 %134 %179 %213 %219 %220 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %51 Location 51 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %219 Location 219 
                                                      OpDecorate %220 Location 220 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypePointer Output %7 
                                Output f32_4* %51 = OpVariable Output 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %91 = OpTypeVector %6 3 
                                              %92 = OpTypePointer Input %91 
                                 Input f32_3* %93 = OpVariable Input 
                                          u32 %99 = OpConstant 0 
                                             %100 = OpTypePointer Private %6 
                                         u32 %113 = OpConstant 2 
                                Private f32* %115 = OpVariable Private 
                                             %130 = OpTypePointer Output %91 
                               Output f32_3* %131 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                               Output f32_3* %179 = OpVariable Output 
                                             %182 = OpTypePointer Private %91 
                              Private f32_3* %183 = OpVariable Private 
                               Output f32_3* %213 = OpVariable Output 
                               Output f32_4* %219 = OpVariable Output 
                                Input f32_4* %220 = OpVariable Input 
                                             %222 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %52 = OpAccessChain %21 %23 %46 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %51 %58 
                                        f32_4 %59 = OpLoad %44 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %61 = OpAccessChain %21 %36 %24 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpFMul %60 %62 
                                                      OpStore %9 %63 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %44 
                                        f32_4 %67 = OpVectorShuffle %66 %66 0 0 0 0 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %9 %70 
                               Uniform f32_4* %71 = OpAccessChain %21 %36 %36 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %44 
                                        f32_4 %74 = OpVectorShuffle %73 %73 2 2 2 2 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %9 %77 
                               Uniform f32_4* %83 = OpAccessChain %21 %36 %46 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %44 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                Output f32_4* %90 = OpAccessChain %82 %23 
                                                      OpStore %90 %89 
                                        f32_3 %94 = OpLoad %93 
                               Uniform f32_4* %95 = OpAccessChain %21 %24 %23 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                          f32 %98 = OpDot %94 %97 
                                Private f32* %101 = OpAccessChain %9 %99 
                                                      OpStore %101 %98 
                                       f32_3 %102 = OpLoad %93 
                              Uniform f32_4* %103 = OpAccessChain %21 %24 %24 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                         f32 %106 = OpDot %102 %105 
                                Private f32* %107 = OpAccessChain %9 %78 
                                                      OpStore %107 %106 
                                       f32_3 %108 = OpLoad %93 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %36 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %114 = OpAccessChain %9 %113 
                                                      OpStore %114 %112 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_4 %118 = OpLoad %9 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %117 %119 
                                                      OpStore %115 %120 
                                         f32 %121 = OpLoad %115 
                                         f32 %122 = OpExtInst %1 32 %121 
                                                      OpStore %115 %122 
                                         f32 %123 = OpLoad %115 
                                       f32_3 %124 = OpCompositeConstruct %123 %123 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %9 %129 
                                       f32_4 %132 = OpLoad %9 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                                      OpStore %131 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %21 %23 %24 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %136 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %44 %142 
                              Uniform f32_4* %143 = OpAccessChain %21 %23 %23 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_4 %146 = OpLoad %134 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 0 0 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %44 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFAdd %148 %150 
                                       f32_4 %152 = OpLoad %44 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %44 %153 
                              Uniform f32_4* %154 = OpAccessChain %21 %23 %36 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_4 %157 = OpLoad %134 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %44 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %44 %164 
                                       f32_4 %165 = OpLoad %44 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_4 %167 = OpLoad %44 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %166 %168 
                                                      OpStore %115 %169 
                                         f32 %170 = OpLoad %115 
                                         f32 %171 = OpExtInst %1 32 %170 
                                                      OpStore %115 %171 
                                         f32 %172 = OpLoad %115 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_4 %174 = OpLoad %44 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %44 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %44 %178 
                                       f32_4 %180 = OpLoad %44 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                                      OpStore %179 %181 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 2 0 1 
                                       f32_4 %186 = OpLoad %44 
                                       f32_3 %187 = OpVectorShuffle %186 %186 1 2 0 
                                       f32_3 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 2 0 
                                       f32_4 %191 = OpLoad %44 
                                       f32_3 %192 = OpVectorShuffle %191 %191 2 0 1 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %194 = OpLoad %183 
                                       f32_3 %195 = OpFNegate %194 
                                       f32_3 %196 = OpFAdd %193 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %134 
                                       f32_3 %202 = OpVectorShuffle %201 %201 3 3 3 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %9 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %9 %205 
                                       f32_4 %206 = OpLoad %9 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %207 %209 
                                                      OpStore %115 %210 
                                         f32 %211 = OpLoad %115 
                                         f32 %212 = OpExtInst %1 32 %211 
                                                      OpStore %115 %212 
                                         f32 %214 = OpLoad %115 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFMul %215 %217 
                                                      OpStore %213 %218 
                                       f32_4 %221 = OpLoad %220 
                                                      OpStore %219 %221 
                                 Output f32* %223 = OpAccessChain %82 %23 %78 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFNegate %224 
                                 Output f32* %226 = OpAccessChain %82 %23 %78 
                                                      OpStore %226 %225 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 397
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %178 %228 %263 %268 %275 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 RelaxedPrecision 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 RelaxedPrecision 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 RelaxedPrecision 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 RelaxedPrecision 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 RelaxedPrecision 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 RelaxedPrecision 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 RelaxedPrecision 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 RelaxedPrecision 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %228 Location 228 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %263 Location 263 
                                                      OpDecorate %268 Location 268 
                                                      OpDecorate %275 Location 275 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeStruct %7 %7 %7 %7 %7 %6 %6 %6 %6 %6 %6 %6 %7 %7 %6 %6 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32; f32;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 15 
                                              %20 = OpTypePointer Uniform %6 
                                          i32 %37 = OpConstant 6 
                               Private f32_4* %53 = OpVariable Private 
                                          i32 %54 = OpConstant 0 
                                              %55 = OpTypeInt 32 0 
                                          u32 %56 = OpConstant 1 
                                          i32 %59 = OpConstant 2 
                                          u32 %63 = OpConstant 0 
                                              %64 = OpTypePointer Private %6 
                                          f32 %68 = OpConstant 3.674022E-40 
                               Private f32_4* %71 = OpVariable Private 
                                          i32 %74 = OpConstant 10 
                                          i32 %79 = OpConstant 11 
                                              %88 = OpTypePointer Private %12 
                               Private f32_2* %89 = OpVariable Private 
                                          f32 %92 = OpConstant 3.674022E-40 
                                          f32 %93 = OpConstant 3.674022E-40 
                                        f32_2 %94 = OpConstantComposite %92 %93 
                                          i32 %98 = OpConstant 13 
                                              %99 = OpTypePointer Uniform %7 
                              Private f32_4* %110 = OpVariable Private 
                                             %111 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %112 = OpTypeSampledImage %111 
                                             %113 = OpTypePointer UniformConstant %112 
 UniformConstant read_only Texture2DSampled* %114 = OpVariable UniformConstant 
                                         i32 %118 = OpConstant 14 
                              Private f32_4* %133 = OpVariable Private 
                                         u32 %140 = OpConstant 3 
                                         i32 %143 = OpConstant 7 
                                         f32 %150 = OpConstant 3.674022E-40 
                                             %153 = OpTypeVector %6 3 
                                             %154 = OpTypePointer Private %153 
                              Private f32_3* %155 = OpVariable Private 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_3 %159 = OpConstantComposite %158 %158 %158 
                                         f32 %174 = OpConstant 3.674022E-40 
                                       f32_3 %175 = OpConstantComposite %174 %174 %174 
                                Private f32* %177 = OpVariable Private 
                                Input f32_4* %178 = OpVariable Input 
                                             %179 = OpTypePointer Input %6 
                              Private f32_3* %189 = OpVariable Private 
                                         i32 %205 = OpConstant 12 
                                         i32 %213 = OpConstant 8 
                                         i32 %217 = OpConstant 9 
                                             %227 = OpTypePointer Output %7 
                               Output f32_4* %228 = OpVariable Output 
                                             %230 = OpTypePointer Output %6 
                                             %244 = OpTypeBool 
                                             %245 = OpTypePointer Private %244 
                               Private bool* %246 = OpVariable Private 
                                         i32 %251 = OpConstant 1 
                                         i32 %253 = OpConstant -1 
                              Private f32_3* %259 = OpVariable Private 
                                             %262 = OpTypePointer Input %153 
                                Input f32_3* %263 = OpVariable Input 
                                Input f32_3* %268 = OpVariable Input 
                                Input f32_3* %275 = OpVariable Input 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %314 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                       f32_3 %316 = OpConstantComposite %313 %314 %315 
                                         i32 %327 = OpConstant 4 
                                Private f32* %333 = OpVariable Private 
                                         u32 %336 = OpConstant 2 
                                         i32 %343 = OpConstant 5 
                              Private f32_3* %354 = OpVariable Private 
                                         i32 %355 = OpConstant 3 
                                         f32 %378 = OpConstant 3.674022E-40 
                                       f32_3 %379 = OpConstantComposite %378 %378 %378 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 2 2 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                 Uniform f32* %23 = OpAccessChain %17 %19 
                                          f32 %24 = OpLoad %23 
                                        f32_2 %25 = OpCompositeConstruct %22 %24 
                                          f32 %26 = OpCompositeExtract %25 0 
                                          f32 %27 = OpCompositeExtract %25 1 
                                        f32_2 %28 = OpCompositeConstruct %26 %27 
                                        f32_2 %29 = OpFAdd %14 %28 
                                        f32_4 %30 = OpLoad %9 
                                        f32_4 %31 = OpVectorShuffle %30 %29 0 4 2 5 
                                                      OpStore %9 %31 
                                        f32_4 %32 = OpLoad %11 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 0 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpVectorShuffle %34 %33 4 1 5 3 
                                                      OpStore %9 %35 
                                        f32_4 %36 = OpLoad %9 
                                 Uniform f32* %38 = OpAccessChain %17 %37 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %17 %37 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %17 %37 
                                          f32 %43 = OpLoad %42 
                                 Uniform f32* %44 = OpAccessChain %17 %37 
                                          f32 %45 = OpLoad %44 
                                        f32_4 %46 = OpCompositeConstruct %39 %41 %43 %45 
                                          f32 %47 = OpCompositeExtract %46 0 
                                          f32 %48 = OpCompositeExtract %46 1 
                                          f32 %49 = OpCompositeExtract %46 2 
                                          f32 %50 = OpCompositeExtract %46 3 
                                        f32_4 %51 = OpCompositeConstruct %47 %48 %49 %50 
                                        f32_4 %52 = OpFDiv %36 %51 
                                                      OpStore %9 %52 
                                 Uniform f32* %57 = OpAccessChain %17 %54 %56 
                                          f32 %58 = OpLoad %57 
                                 Uniform f32* %60 = OpAccessChain %17 %59 %56 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %58 %61 
                                 Private f32* %65 = OpAccessChain %53 %63 
                                                      OpStore %65 %62 
                                 Private f32* %66 = OpAccessChain %53 %63 
                                          f32 %67 = OpLoad %66 
                                          f32 %69 = OpFMul %67 %68 
                                 Private f32* %70 = OpAccessChain %53 %63 
                                                      OpStore %70 %69 
                                        f32_4 %72 = OpLoad %53 
                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
                                 Uniform f32* %75 = OpAccessChain %17 %74 
                                          f32 %76 = OpLoad %75 
                                 Uniform f32* %77 = OpAccessChain %17 %74 
                                          f32 %78 = OpLoad %77 
                                 Uniform f32* %80 = OpAccessChain %17 %79 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %17 %79 
                                          f32 %83 = OpLoad %82 
                                        f32_4 %84 = OpCompositeConstruct %76 %78 %81 %83 
                                        f32_4 %85 = OpFMul %73 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %71 %87 
                                        f32_4 %90 = OpLoad %71 
                                        f32_2 %91 = OpVectorShuffle %90 %90 2 3 
                                        f32_2 %95 = OpFAdd %91 %94 
                                                      OpStore %89 %95 
                                        f32_4 %96 = OpLoad %71 
                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %98 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %97 %102 
                              Uniform f32_4* %104 = OpAccessChain %17 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %53 %109 
                  read_only Texture2DSampled %115 = OpLoad %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                Uniform f32* %119 = OpAccessChain %17 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_4 %121 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                                      OpStore %110 %121 
                                       f32_2 %122 = OpLoad %89 
                              Uniform f32_4* %123 = OpAccessChain %17 %98 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_2 %126 = OpFMul %122 %125 
                              Uniform f32_4* %127 = OpAccessChain %17 %98 
                                       f32_4 %128 = OpLoad %127 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                       f32_4 %131 = OpLoad %53 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %53 %132 
                  read_only Texture2DSampled %134 = OpLoad %114 
                                       f32_4 %135 = OpLoad %53 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                Uniform f32* %137 = OpAccessChain %17 %118 
                                         f32 %138 = OpLoad %137 
                                       f32_4 %139 = OpImageSampleExplicitLod %134 %136 Lod %7 
                                                      OpStore %133 %139 
                                Private f32* %141 = OpAccessChain %110 %140 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %144 = OpAccessChain %17 %143 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpFAdd %142 %145 
                                Private f32* %147 = OpAccessChain %89 %63 
                                                      OpStore %147 %146 
                                Private f32* %148 = OpAccessChain %89 %63 
                                         f32 %149 = OpLoad %148 
                                         f32 %151 = OpExtInst %1 43 %149 %92 %150 
                                Private f32* %152 = OpAccessChain %89 %63 
                                                      OpStore %152 %151 
                                       f32_4 %156 = OpLoad %110 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %160 = OpFMul %157 %159 
                                Uniform f32* %161 = OpAccessChain %17 %143 
                                         f32 %162 = OpLoad %161 
                                Uniform f32* %163 = OpAccessChain %17 %143 
                                         f32 %164 = OpLoad %163 
                                Uniform f32* %165 = OpAccessChain %17 %143 
                                         f32 %166 = OpLoad %165 
                                       f32_3 %167 = OpCompositeConstruct %162 %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                         f32 %169 = OpCompositeExtract %167 1 
                                         f32 %170 = OpCompositeExtract %167 2 
                                       f32_3 %171 = OpCompositeConstruct %168 %169 %170 
                                       f32_3 %172 = OpFAdd %160 %171 
                                                      OpStore %155 %172 
                                       f32_3 %173 = OpLoad %155 
                                       f32_3 %176 = OpFAdd %173 %175 
                                                      OpStore %155 %176 
                                  Input f32* %180 = OpAccessChain %178 %140 
                                         f32 %181 = OpLoad %180 
                                Private f32* %182 = OpAccessChain %89 %63 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFMul %181 %183 
                                Private f32* %185 = OpAccessChain %133 %140 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                         f32 %188 = OpFAdd %184 %187 
                                                      OpStore %177 %188 
                                       f32_4 %190 = OpLoad %133 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %191 %159 
                                       f32_3 %193 = OpFAdd %192 %175 
                                                      OpStore %189 %193 
                                       f32_4 %194 = OpLoad %178 
                                       f32_3 %195 = OpVectorShuffle %194 %194 3 3 3 
                                       f32_3 %196 = OpLoad %155 
                                       f32_3 %197 = OpFMul %195 %196 
                                       f32_3 %198 = OpLoad %189 
                                       f32_3 %199 = OpFNegate %198 
                                       f32_3 %200 = OpFAdd %197 %199 
                                       f32_4 %201 = OpLoad %53 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %53 %202 
                                       f32_4 %203 = OpLoad %53 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                              Uniform f32_4* %206 = OpAccessChain %17 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %204 %208 
                                       f32_4 %210 = OpLoad %53 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %53 %211 
                                         f32 %212 = OpLoad %177 
                                Uniform f32* %214 = OpAccessChain %17 %213 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFMul %212 %215 
                                Uniform f32* %218 = OpAccessChain %17 %217 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFNegate %219 
                                         f32 %221 = OpFAdd %216 %220 
                                Private f32* %222 = OpAccessChain %89 %63 
                                                      OpStore %222 %221 
                                         f32 %223 = OpLoad %177 
                                Uniform f32* %224 = OpAccessChain %17 %213 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                                      OpStore %177 %226 
                                         f32 %229 = OpLoad %177 
                                 Output f32* %231 = OpAccessChain %228 %140 
                                                      OpStore %231 %229 
                                Private f32* %232 = OpAccessChain %89 %63 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpExtInst %1 9 %233 
                                Private f32* %235 = OpAccessChain %89 %63 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %89 %63 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 43 %237 %92 %150 
                                Private f32* %239 = OpAccessChain %89 %63 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %89 %63 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFAdd %241 %174 
                                Private f32* %243 = OpAccessChain %89 %63 
                                                      OpStore %243 %242 
                                Private f32* %247 = OpAccessChain %89 %63 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdLessThan %248 %92 
                                                      OpStore %246 %249 
                                        bool %250 = OpLoad %246 
                                         i32 %252 = OpSelect %250 %251 %54 
                                         i32 %254 = OpIMul %252 %253 
                                        bool %255 = OpINotEqual %254 %54 
                                                      OpSelectionMerge %257 None 
                                                      OpBranchConditional %255 %256 %257 
                                             %256 = OpLabel 
                                                      OpKill
                                             %257 = OpLabel 
                                       f32_4 %260 = OpLoad %53 
                                       f32_3 %261 = OpVectorShuffle %260 %260 1 1 1 
                                       f32_3 %264 = OpLoad %263 
                                       f32_3 %265 = OpFMul %261 %264 
                                                      OpStore %259 %265 
                                       f32_4 %266 = OpLoad %53 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
                                       f32_3 %269 = OpLoad %268 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %259 
                                       f32_3 %272 = OpFAdd %270 %271 
                                       f32_4 %273 = OpLoad %53 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 6 
                                                      OpStore %53 %274 
                                       f32_3 %276 = OpLoad %275 
                                       f32_3 %277 = OpLoad %275 
                                         f32 %278 = OpDot %276 %277 
                                Private f32* %279 = OpAccessChain %259 %63 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %259 %63 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 32 %281 
                                Private f32* %283 = OpAccessChain %259 %63 
                                                      OpStore %283 %282 
                                       f32_3 %284 = OpLoad %259 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpLoad %275 
                                       f32_3 %287 = OpFMul %285 %286 
                                                      OpStore %259 %287 
                                       f32_4 %288 = OpLoad %53 
                                       f32_3 %289 = OpVectorShuffle %288 %288 2 2 2 
                                       f32_3 %290 = OpLoad %259 
                                       f32_3 %291 = OpFMul %289 %290 
                                       f32_4 %292 = OpLoad %53 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 3 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %53 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %53 %296 
                                       f32_4 %297 = OpLoad %53 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_4 %299 = OpLoad %53 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                         f32 %301 = OpDot %298 %300 
                                                      OpStore %177 %301 
                                         f32 %302 = OpLoad %177 
                                         f32 %303 = OpExtInst %1 32 %302 
                                                      OpStore %177 %303 
                                         f32 %304 = OpLoad %177 
                                       f32_3 %305 = OpCompositeConstruct %304 %304 %304 
                                       f32_4 %306 = OpLoad %53 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %53 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %53 %310 
                                       f32_4 %311 = OpLoad %53 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                         f32 %317 = OpDot %312 %316 
                                Private f32* %318 = OpAccessChain %53 %63 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %53 %63 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %150 
                                Private f32* %323 = OpAccessChain %53 %63 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %53 %63 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFNegate %325 
                                Uniform f32* %328 = OpAccessChain %17 %327 %140 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFMul %326 %329 
                                         f32 %331 = OpFAdd %330 %150 
                                Private f32* %332 = OpAccessChain %53 %63 
                                                      OpStore %332 %331 
                                Uniform f32* %334 = OpAccessChain %17 %205 %56 
                                         f32 %335 = OpLoad %334 
                                  Input f32* %337 = OpAccessChain %178 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFMul %335 %338 
                                         f32 %340 = OpFAdd %339 %150 
                                                      OpStore %333 %340 
                                         f32 %341 = OpLoad %333 
                                         f32 %342 = OpFMul %341 %93 
                                Uniform f32* %344 = OpAccessChain %17 %343 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFAdd %342 %345 
                                                      OpStore %333 %346 
                                         f32 %347 = OpLoad %333 
                                         f32 %348 = OpExtInst %1 43 %347 %92 %150 
                                                      OpStore %333 %348 
                                         f32 %349 = OpLoad %333 
                                Private f32* %350 = OpAccessChain %53 %63 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                Private f32* %353 = OpAccessChain %53 %63 
                                                      OpStore %353 %352 
                              Uniform f32_4* %356 = OpAccessChain %17 %355 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                              Uniform f32_4* %359 = OpAccessChain %17 %327 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFNegate %361 
                                       f32_3 %363 = OpFAdd %358 %362 
                                                      OpStore %354 %363 
                                       f32_4 %364 = OpLoad %53 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 0 0 
                                       f32_3 %366 = OpLoad %354 
                                       f32_3 %367 = OpFMul %365 %366 
                              Uniform f32_4* %368 = OpAccessChain %17 %327 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFAdd %367 %370 
                                       f32_4 %372 = OpLoad %53 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %53 %373 
                              Uniform f32_4* %374 = OpAccessChain %17 %251 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFNegate %376 
                                       f32_3 %380 = OpFAdd %377 %379 
                                                      OpStore %259 %380 
                              Uniform f32_4* %381 = OpAccessChain %17 %355 
                                       f32_4 %382 = OpLoad %381 
                                       f32_3 %383 = OpVectorShuffle %382 %382 3 3 3 
                                       f32_3 %384 = OpLoad %259 
                                       f32_3 %385 = OpFMul %383 %384 
                              Uniform f32_4* %386 = OpAccessChain %17 %251 
                                       f32_4 %387 = OpLoad %386 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFAdd %385 %388 
                                                      OpStore %259 %389 
                                       f32_4 %390 = OpLoad %53 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpLoad %259 
                                       f32_3 %393 = OpFMul %391 %392 
                                       f32_4 %394 = OpLoad %228 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
                                                      OpStore %228 %395 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _LightColor0;
uniform 	vec4 _TimeEditor;
uniform 	vec4 _BaseColor;
uniform 	vec4 _Shading;
uniform 	float _DepthIntensity;
uniform 	float _Tiling;
uniform 	float _Density;
uniform 	float _Alpha;
uniform 	float _AlphaCut;
uniform 	float _Speed;
uniform 	float _SpeedSecondLayer;
uniform 	vec4 _CloudNormalsDirection;
uniform 	vec4 _PerlinNormalMap_ST;
uniform 	float _MipLevel;
uniform 	float _ZOffset;
uniform  sampler2D _PerlinNormalMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec2 u_xlat4;
float u_xlat6;
bool u_xlatb6;
float u_xlat7;
void main()
{
    u_xlat0.yw = vs_TEXCOORD0.zz + vec2(vec2(_ZOffset, _ZOffset));
    u_xlat0.xz = vs_TEXCOORD0.xx;
    u_xlat0 = u_xlat0 / vec4(vec4(_Tiling, _Tiling, _Tiling, _Tiling));
    u_xlat1.x = _Time.y + _TimeEditor.y;
    u_xlat1.x = u_xlat1.x * 0.00100000005;
    u_xlat0 = u_xlat1.xxxx * vec4(_Speed, _Speed, _SpeedSecondLayer, _SpeedSecondLayer) + u_xlat0;
    u_xlat4.xy = u_xlat0.zw + vec2(0.0, 0.5);
    u_xlat0.xy = u_xlat0.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat0.xy = u_xlat4.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_0 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat7 = u_xlat10_1.w + _Density;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(vec3(_Density, _Density, _Density));
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6 = vs_COLOR0.w * u_xlat7 + (-u_xlat10_0.w);
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + (-u_xlat16_0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * _CloudNormalsDirection.xyz;
    u_xlat1.x = u_xlat6 * _Alpha + (-_AlphaCut);
    u_xlat6 = u_xlat6 * _Alpha;
    SV_Target0.w = u_xlat6;
    u_xlat6 = ceil(u_xlat1.x);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat6 = u_xlat6 + -1.0;
    u_xlatb6 = u_xlat6<0.0;
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
    u_xlat0.xyw = u_xlat0.xxx * vs_TEXCOORD2.xyz + u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.zzz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.330000013, -0.600000024));
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = (-u_xlat0.x) * _Shading.w + 1.0;
    u_xlat2.x = _CloudNormalsDirection.y * vs_COLOR0.z + 1.0;
    u_xlat2.x = u_xlat2.x * 0.5 + _DepthIntensity;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.xyz = _BaseColor.xyz + (-_Shading.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Shading.xyz;
    u_xlat1.xyz = (-_LightColor0.xyz) + vec3(0.800000012, 0.800000012, 0.800000012);
    u_xlat1.xyz = _BaseColor.www * u_xlat1.xyz + _LightColor0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %51 %82 %93 %131 %134 %179 %213 %219 %220 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %51 Location 51 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %219 Location 219 
                                                      OpDecorate %220 Location 220 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypePointer Output %7 
                                Output f32_4* %51 = OpVariable Output 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %91 = OpTypeVector %6 3 
                                              %92 = OpTypePointer Input %91 
                                 Input f32_3* %93 = OpVariable Input 
                                          u32 %99 = OpConstant 0 
                                             %100 = OpTypePointer Private %6 
                                         u32 %113 = OpConstant 2 
                                Private f32* %115 = OpVariable Private 
                                             %130 = OpTypePointer Output %91 
                               Output f32_3* %131 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                               Output f32_3* %179 = OpVariable Output 
                                             %182 = OpTypePointer Private %91 
                              Private f32_3* %183 = OpVariable Private 
                               Output f32_3* %213 = OpVariable Output 
                               Output f32_4* %219 = OpVariable Output 
                                Input f32_4* %220 = OpVariable Input 
                                             %222 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %52 = OpAccessChain %21 %23 %46 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %51 %58 
                                        f32_4 %59 = OpLoad %44 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %61 = OpAccessChain %21 %36 %24 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpFMul %60 %62 
                                                      OpStore %9 %63 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %44 
                                        f32_4 %67 = OpVectorShuffle %66 %66 0 0 0 0 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %9 %70 
                               Uniform f32_4* %71 = OpAccessChain %21 %36 %36 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %44 
                                        f32_4 %74 = OpVectorShuffle %73 %73 2 2 2 2 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %9 %77 
                               Uniform f32_4* %83 = OpAccessChain %21 %36 %46 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %44 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                Output f32_4* %90 = OpAccessChain %82 %23 
                                                      OpStore %90 %89 
                                        f32_3 %94 = OpLoad %93 
                               Uniform f32_4* %95 = OpAccessChain %21 %24 %23 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                          f32 %98 = OpDot %94 %97 
                                Private f32* %101 = OpAccessChain %9 %99 
                                                      OpStore %101 %98 
                                       f32_3 %102 = OpLoad %93 
                              Uniform f32_4* %103 = OpAccessChain %21 %24 %24 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                         f32 %106 = OpDot %102 %105 
                                Private f32* %107 = OpAccessChain %9 %78 
                                                      OpStore %107 %106 
                                       f32_3 %108 = OpLoad %93 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %36 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %114 = OpAccessChain %9 %113 
                                                      OpStore %114 %112 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_4 %118 = OpLoad %9 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %117 %119 
                                                      OpStore %115 %120 
                                         f32 %121 = OpLoad %115 
                                         f32 %122 = OpExtInst %1 32 %121 
                                                      OpStore %115 %122 
                                         f32 %123 = OpLoad %115 
                                       f32_3 %124 = OpCompositeConstruct %123 %123 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %9 %129 
                                       f32_4 %132 = OpLoad %9 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                                      OpStore %131 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %21 %23 %24 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %136 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %44 %142 
                              Uniform f32_4* %143 = OpAccessChain %21 %23 %23 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_4 %146 = OpLoad %134 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 0 0 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %44 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFAdd %148 %150 
                                       f32_4 %152 = OpLoad %44 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %44 %153 
                              Uniform f32_4* %154 = OpAccessChain %21 %23 %36 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_4 %157 = OpLoad %134 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %44 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %44 %164 
                                       f32_4 %165 = OpLoad %44 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_4 %167 = OpLoad %44 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %166 %168 
                                                      OpStore %115 %169 
                                         f32 %170 = OpLoad %115 
                                         f32 %171 = OpExtInst %1 32 %170 
                                                      OpStore %115 %171 
                                         f32 %172 = OpLoad %115 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_4 %174 = OpLoad %44 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %44 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %44 %178 
                                       f32_4 %180 = OpLoad %44 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                                      OpStore %179 %181 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 2 0 1 
                                       f32_4 %186 = OpLoad %44 
                                       f32_3 %187 = OpVectorShuffle %186 %186 1 2 0 
                                       f32_3 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 2 0 
                                       f32_4 %191 = OpLoad %44 
                                       f32_3 %192 = OpVectorShuffle %191 %191 2 0 1 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %194 = OpLoad %183 
                                       f32_3 %195 = OpFNegate %194 
                                       f32_3 %196 = OpFAdd %193 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %134 
                                       f32_3 %202 = OpVectorShuffle %201 %201 3 3 3 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %9 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %9 %205 
                                       f32_4 %206 = OpLoad %9 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %207 %209 
                                                      OpStore %115 %210 
                                         f32 %211 = OpLoad %115 
                                         f32 %212 = OpExtInst %1 32 %211 
                                                      OpStore %115 %212 
                                         f32 %214 = OpLoad %115 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFMul %215 %217 
                                                      OpStore %213 %218 
                                       f32_4 %221 = OpLoad %220 
                                                      OpStore %219 %221 
                                 Output f32* %223 = OpAccessChain %82 %23 %78 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFNegate %224 
                                 Output f32* %226 = OpAccessChain %82 %23 %78 
                                                      OpStore %226 %225 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 397
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %178 %228 %263 %268 %275 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 RelaxedPrecision 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 RelaxedPrecision 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 RelaxedPrecision 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 RelaxedPrecision 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 RelaxedPrecision 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 RelaxedPrecision 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 RelaxedPrecision 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 RelaxedPrecision 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %228 Location 228 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %263 Location 263 
                                                      OpDecorate %268 Location 268 
                                                      OpDecorate %275 Location 275 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeStruct %7 %7 %7 %7 %7 %6 %6 %6 %6 %6 %6 %6 %7 %7 %6 %6 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32; f32;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 15 
                                              %20 = OpTypePointer Uniform %6 
                                          i32 %37 = OpConstant 6 
                               Private f32_4* %53 = OpVariable Private 
                                          i32 %54 = OpConstant 0 
                                              %55 = OpTypeInt 32 0 
                                          u32 %56 = OpConstant 1 
                                          i32 %59 = OpConstant 2 
                                          u32 %63 = OpConstant 0 
                                              %64 = OpTypePointer Private %6 
                                          f32 %68 = OpConstant 3.674022E-40 
                               Private f32_4* %71 = OpVariable Private 
                                          i32 %74 = OpConstant 10 
                                          i32 %79 = OpConstant 11 
                                              %88 = OpTypePointer Private %12 
                               Private f32_2* %89 = OpVariable Private 
                                          f32 %92 = OpConstant 3.674022E-40 
                                          f32 %93 = OpConstant 3.674022E-40 
                                        f32_2 %94 = OpConstantComposite %92 %93 
                                          i32 %98 = OpConstant 13 
                                              %99 = OpTypePointer Uniform %7 
                              Private f32_4* %110 = OpVariable Private 
                                             %111 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %112 = OpTypeSampledImage %111 
                                             %113 = OpTypePointer UniformConstant %112 
 UniformConstant read_only Texture2DSampled* %114 = OpVariable UniformConstant 
                                         i32 %118 = OpConstant 14 
                              Private f32_4* %133 = OpVariable Private 
                                         u32 %140 = OpConstant 3 
                                         i32 %143 = OpConstant 7 
                                         f32 %150 = OpConstant 3.674022E-40 
                                             %153 = OpTypeVector %6 3 
                                             %154 = OpTypePointer Private %153 
                              Private f32_3* %155 = OpVariable Private 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_3 %159 = OpConstantComposite %158 %158 %158 
                                         f32 %174 = OpConstant 3.674022E-40 
                                       f32_3 %175 = OpConstantComposite %174 %174 %174 
                                Private f32* %177 = OpVariable Private 
                                Input f32_4* %178 = OpVariable Input 
                                             %179 = OpTypePointer Input %6 
                              Private f32_3* %189 = OpVariable Private 
                                         i32 %205 = OpConstant 12 
                                         i32 %213 = OpConstant 8 
                                         i32 %217 = OpConstant 9 
                                             %227 = OpTypePointer Output %7 
                               Output f32_4* %228 = OpVariable Output 
                                             %230 = OpTypePointer Output %6 
                                             %244 = OpTypeBool 
                                             %245 = OpTypePointer Private %244 
                               Private bool* %246 = OpVariable Private 
                                         i32 %251 = OpConstant 1 
                                         i32 %253 = OpConstant -1 
                              Private f32_3* %259 = OpVariable Private 
                                             %262 = OpTypePointer Input %153 
                                Input f32_3* %263 = OpVariable Input 
                                Input f32_3* %268 = OpVariable Input 
                                Input f32_3* %275 = OpVariable Input 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %314 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                       f32_3 %316 = OpConstantComposite %313 %314 %315 
                                         i32 %327 = OpConstant 4 
                                Private f32* %333 = OpVariable Private 
                                         u32 %336 = OpConstant 2 
                                         i32 %343 = OpConstant 5 
                              Private f32_3* %354 = OpVariable Private 
                                         i32 %355 = OpConstant 3 
                                         f32 %378 = OpConstant 3.674022E-40 
                                       f32_3 %379 = OpConstantComposite %378 %378 %378 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 2 2 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                 Uniform f32* %23 = OpAccessChain %17 %19 
                                          f32 %24 = OpLoad %23 
                                        f32_2 %25 = OpCompositeConstruct %22 %24 
                                          f32 %26 = OpCompositeExtract %25 0 
                                          f32 %27 = OpCompositeExtract %25 1 
                                        f32_2 %28 = OpCompositeConstruct %26 %27 
                                        f32_2 %29 = OpFAdd %14 %28 
                                        f32_4 %30 = OpLoad %9 
                                        f32_4 %31 = OpVectorShuffle %30 %29 0 4 2 5 
                                                      OpStore %9 %31 
                                        f32_4 %32 = OpLoad %11 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 0 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpVectorShuffle %34 %33 4 1 5 3 
                                                      OpStore %9 %35 
                                        f32_4 %36 = OpLoad %9 
                                 Uniform f32* %38 = OpAccessChain %17 %37 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %17 %37 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %17 %37 
                                          f32 %43 = OpLoad %42 
                                 Uniform f32* %44 = OpAccessChain %17 %37 
                                          f32 %45 = OpLoad %44 
                                        f32_4 %46 = OpCompositeConstruct %39 %41 %43 %45 
                                          f32 %47 = OpCompositeExtract %46 0 
                                          f32 %48 = OpCompositeExtract %46 1 
                                          f32 %49 = OpCompositeExtract %46 2 
                                          f32 %50 = OpCompositeExtract %46 3 
                                        f32_4 %51 = OpCompositeConstruct %47 %48 %49 %50 
                                        f32_4 %52 = OpFDiv %36 %51 
                                                      OpStore %9 %52 
                                 Uniform f32* %57 = OpAccessChain %17 %54 %56 
                                          f32 %58 = OpLoad %57 
                                 Uniform f32* %60 = OpAccessChain %17 %59 %56 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %58 %61 
                                 Private f32* %65 = OpAccessChain %53 %63 
                                                      OpStore %65 %62 
                                 Private f32* %66 = OpAccessChain %53 %63 
                                          f32 %67 = OpLoad %66 
                                          f32 %69 = OpFMul %67 %68 
                                 Private f32* %70 = OpAccessChain %53 %63 
                                                      OpStore %70 %69 
                                        f32_4 %72 = OpLoad %53 
                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
                                 Uniform f32* %75 = OpAccessChain %17 %74 
                                          f32 %76 = OpLoad %75 
                                 Uniform f32* %77 = OpAccessChain %17 %74 
                                          f32 %78 = OpLoad %77 
                                 Uniform f32* %80 = OpAccessChain %17 %79 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %17 %79 
                                          f32 %83 = OpLoad %82 
                                        f32_4 %84 = OpCompositeConstruct %76 %78 %81 %83 
                                        f32_4 %85 = OpFMul %73 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %71 %87 
                                        f32_4 %90 = OpLoad %71 
                                        f32_2 %91 = OpVectorShuffle %90 %90 2 3 
                                        f32_2 %95 = OpFAdd %91 %94 
                                                      OpStore %89 %95 
                                        f32_4 %96 = OpLoad %71 
                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %98 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %97 %102 
                              Uniform f32_4* %104 = OpAccessChain %17 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %53 %109 
                  read_only Texture2DSampled %115 = OpLoad %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                Uniform f32* %119 = OpAccessChain %17 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_4 %121 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                                      OpStore %110 %121 
                                       f32_2 %122 = OpLoad %89 
                              Uniform f32_4* %123 = OpAccessChain %17 %98 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_2 %126 = OpFMul %122 %125 
                              Uniform f32_4* %127 = OpAccessChain %17 %98 
                                       f32_4 %128 = OpLoad %127 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                       f32_4 %131 = OpLoad %53 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %53 %132 
                  read_only Texture2DSampled %134 = OpLoad %114 
                                       f32_4 %135 = OpLoad %53 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                Uniform f32* %137 = OpAccessChain %17 %118 
                                         f32 %138 = OpLoad %137 
                                       f32_4 %139 = OpImageSampleExplicitLod %134 %136 Lod %7 
                                                      OpStore %133 %139 
                                Private f32* %141 = OpAccessChain %110 %140 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %144 = OpAccessChain %17 %143 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpFAdd %142 %145 
                                Private f32* %147 = OpAccessChain %89 %63 
                                                      OpStore %147 %146 
                                Private f32* %148 = OpAccessChain %89 %63 
                                         f32 %149 = OpLoad %148 
                                         f32 %151 = OpExtInst %1 43 %149 %92 %150 
                                Private f32* %152 = OpAccessChain %89 %63 
                                                      OpStore %152 %151 
                                       f32_4 %156 = OpLoad %110 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %160 = OpFMul %157 %159 
                                Uniform f32* %161 = OpAccessChain %17 %143 
                                         f32 %162 = OpLoad %161 
                                Uniform f32* %163 = OpAccessChain %17 %143 
                                         f32 %164 = OpLoad %163 
                                Uniform f32* %165 = OpAccessChain %17 %143 
                                         f32 %166 = OpLoad %165 
                                       f32_3 %167 = OpCompositeConstruct %162 %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                         f32 %169 = OpCompositeExtract %167 1 
                                         f32 %170 = OpCompositeExtract %167 2 
                                       f32_3 %171 = OpCompositeConstruct %168 %169 %170 
                                       f32_3 %172 = OpFAdd %160 %171 
                                                      OpStore %155 %172 
                                       f32_3 %173 = OpLoad %155 
                                       f32_3 %176 = OpFAdd %173 %175 
                                                      OpStore %155 %176 
                                  Input f32* %180 = OpAccessChain %178 %140 
                                         f32 %181 = OpLoad %180 
                                Private f32* %182 = OpAccessChain %89 %63 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFMul %181 %183 
                                Private f32* %185 = OpAccessChain %133 %140 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                         f32 %188 = OpFAdd %184 %187 
                                                      OpStore %177 %188 
                                       f32_4 %190 = OpLoad %133 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %191 %159 
                                       f32_3 %193 = OpFAdd %192 %175 
                                                      OpStore %189 %193 
                                       f32_4 %194 = OpLoad %178 
                                       f32_3 %195 = OpVectorShuffle %194 %194 3 3 3 
                                       f32_3 %196 = OpLoad %155 
                                       f32_3 %197 = OpFMul %195 %196 
                                       f32_3 %198 = OpLoad %189 
                                       f32_3 %199 = OpFNegate %198 
                                       f32_3 %200 = OpFAdd %197 %199 
                                       f32_4 %201 = OpLoad %53 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %53 %202 
                                       f32_4 %203 = OpLoad %53 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                              Uniform f32_4* %206 = OpAccessChain %17 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %204 %208 
                                       f32_4 %210 = OpLoad %53 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %53 %211 
                                         f32 %212 = OpLoad %177 
                                Uniform f32* %214 = OpAccessChain %17 %213 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFMul %212 %215 
                                Uniform f32* %218 = OpAccessChain %17 %217 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFNegate %219 
                                         f32 %221 = OpFAdd %216 %220 
                                Private f32* %222 = OpAccessChain %89 %63 
                                                      OpStore %222 %221 
                                         f32 %223 = OpLoad %177 
                                Uniform f32* %224 = OpAccessChain %17 %213 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                                      OpStore %177 %226 
                                         f32 %229 = OpLoad %177 
                                 Output f32* %231 = OpAccessChain %228 %140 
                                                      OpStore %231 %229 
                                Private f32* %232 = OpAccessChain %89 %63 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpExtInst %1 9 %233 
                                Private f32* %235 = OpAccessChain %89 %63 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %89 %63 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 43 %237 %92 %150 
                                Private f32* %239 = OpAccessChain %89 %63 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %89 %63 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFAdd %241 %174 
                                Private f32* %243 = OpAccessChain %89 %63 
                                                      OpStore %243 %242 
                                Private f32* %247 = OpAccessChain %89 %63 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdLessThan %248 %92 
                                                      OpStore %246 %249 
                                        bool %250 = OpLoad %246 
                                         i32 %252 = OpSelect %250 %251 %54 
                                         i32 %254 = OpIMul %252 %253 
                                        bool %255 = OpINotEqual %254 %54 
                                                      OpSelectionMerge %257 None 
                                                      OpBranchConditional %255 %256 %257 
                                             %256 = OpLabel 
                                                      OpKill
                                             %257 = OpLabel 
                                       f32_4 %260 = OpLoad %53 
                                       f32_3 %261 = OpVectorShuffle %260 %260 1 1 1 
                                       f32_3 %264 = OpLoad %263 
                                       f32_3 %265 = OpFMul %261 %264 
                                                      OpStore %259 %265 
                                       f32_4 %266 = OpLoad %53 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
                                       f32_3 %269 = OpLoad %268 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %259 
                                       f32_3 %272 = OpFAdd %270 %271 
                                       f32_4 %273 = OpLoad %53 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 6 
                                                      OpStore %53 %274 
                                       f32_3 %276 = OpLoad %275 
                                       f32_3 %277 = OpLoad %275 
                                         f32 %278 = OpDot %276 %277 
                                Private f32* %279 = OpAccessChain %259 %63 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %259 %63 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 32 %281 
                                Private f32* %283 = OpAccessChain %259 %63 
                                                      OpStore %283 %282 
                                       f32_3 %284 = OpLoad %259 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpLoad %275 
                                       f32_3 %287 = OpFMul %285 %286 
                                                      OpStore %259 %287 
                                       f32_4 %288 = OpLoad %53 
                                       f32_3 %289 = OpVectorShuffle %288 %288 2 2 2 
                                       f32_3 %290 = OpLoad %259 
                                       f32_3 %291 = OpFMul %289 %290 
                                       f32_4 %292 = OpLoad %53 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 3 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %53 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %53 %296 
                                       f32_4 %297 = OpLoad %53 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_4 %299 = OpLoad %53 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                         f32 %301 = OpDot %298 %300 
                                                      OpStore %177 %301 
                                         f32 %302 = OpLoad %177 
                                         f32 %303 = OpExtInst %1 32 %302 
                                                      OpStore %177 %303 
                                         f32 %304 = OpLoad %177 
                                       f32_3 %305 = OpCompositeConstruct %304 %304 %304 
                                       f32_4 %306 = OpLoad %53 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %53 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %53 %310 
                                       f32_4 %311 = OpLoad %53 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                         f32 %317 = OpDot %312 %316 
                                Private f32* %318 = OpAccessChain %53 %63 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %53 %63 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %150 
                                Private f32* %323 = OpAccessChain %53 %63 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %53 %63 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFNegate %325 
                                Uniform f32* %328 = OpAccessChain %17 %327 %140 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFMul %326 %329 
                                         f32 %331 = OpFAdd %330 %150 
                                Private f32* %332 = OpAccessChain %53 %63 
                                                      OpStore %332 %331 
                                Uniform f32* %334 = OpAccessChain %17 %205 %56 
                                         f32 %335 = OpLoad %334 
                                  Input f32* %337 = OpAccessChain %178 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFMul %335 %338 
                                         f32 %340 = OpFAdd %339 %150 
                                                      OpStore %333 %340 
                                         f32 %341 = OpLoad %333 
                                         f32 %342 = OpFMul %341 %93 
                                Uniform f32* %344 = OpAccessChain %17 %343 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFAdd %342 %345 
                                                      OpStore %333 %346 
                                         f32 %347 = OpLoad %333 
                                         f32 %348 = OpExtInst %1 43 %347 %92 %150 
                                                      OpStore %333 %348 
                                         f32 %349 = OpLoad %333 
                                Private f32* %350 = OpAccessChain %53 %63 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                Private f32* %353 = OpAccessChain %53 %63 
                                                      OpStore %353 %352 
                              Uniform f32_4* %356 = OpAccessChain %17 %355 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                              Uniform f32_4* %359 = OpAccessChain %17 %327 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFNegate %361 
                                       f32_3 %363 = OpFAdd %358 %362 
                                                      OpStore %354 %363 
                                       f32_4 %364 = OpLoad %53 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 0 0 
                                       f32_3 %366 = OpLoad %354 
                                       f32_3 %367 = OpFMul %365 %366 
                              Uniform f32_4* %368 = OpAccessChain %17 %327 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFAdd %367 %370 
                                       f32_4 %372 = OpLoad %53 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %53 %373 
                              Uniform f32_4* %374 = OpAccessChain %17 %251 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFNegate %376 
                                       f32_3 %380 = OpFAdd %377 %379 
                                                      OpStore %259 %380 
                              Uniform f32_4* %381 = OpAccessChain %17 %355 
                                       f32_4 %382 = OpLoad %381 
                                       f32_3 %383 = OpVectorShuffle %382 %382 3 3 3 
                                       f32_3 %384 = OpLoad %259 
                                       f32_3 %385 = OpFMul %383 %384 
                              Uniform f32_4* %386 = OpAccessChain %17 %251 
                                       f32_4 %387 = OpLoad %386 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFAdd %385 %388 
                                                      OpStore %259 %389 
                                       f32_4 %390 = OpLoad %53 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpLoad %259 
                                       f32_3 %393 = OpFMul %391 %392 
                                       f32_4 %394 = OpLoad %228 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
                                                      OpStore %228 %395 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _LightColor0;
uniform 	vec4 _TimeEditor;
uniform 	vec4 _BaseColor;
uniform 	vec4 _Shading;
uniform 	float _DepthIntensity;
uniform 	float _Tiling;
uniform 	float _Density;
uniform 	float _Alpha;
uniform 	float _AlphaCut;
uniform 	float _Speed;
uniform 	float _SpeedSecondLayer;
uniform 	vec4 _CloudNormalsDirection;
uniform 	vec4 _PerlinNormalMap_ST;
uniform 	float _MipLevel;
uniform 	float _ZOffset;
uniform  sampler2D _PerlinNormalMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec2 u_xlat4;
float u_xlat6;
bool u_xlatb6;
float u_xlat7;
void main()
{
    u_xlat0.yw = vs_TEXCOORD0.zz + vec2(vec2(_ZOffset, _ZOffset));
    u_xlat0.xz = vs_TEXCOORD0.xx;
    u_xlat0 = u_xlat0 / vec4(vec4(_Tiling, _Tiling, _Tiling, _Tiling));
    u_xlat1.x = _Time.y + _TimeEditor.y;
    u_xlat1.x = u_xlat1.x * 0.00100000005;
    u_xlat0 = u_xlat1.xxxx * vec4(_Speed, _Speed, _SpeedSecondLayer, _SpeedSecondLayer) + u_xlat0;
    u_xlat4.xy = u_xlat0.zw + vec2(0.0, 0.5);
    u_xlat0.xy = u_xlat0.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat0.xy = u_xlat4.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_0 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat7 = u_xlat10_1.w + _Density;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(vec3(_Density, _Density, _Density));
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6 = vs_COLOR0.w * u_xlat7 + (-u_xlat10_0.w);
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + (-u_xlat16_0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * _CloudNormalsDirection.xyz;
    u_xlat1.x = u_xlat6 * _Alpha + (-_AlphaCut);
    u_xlat6 = u_xlat6 * _Alpha;
    SV_Target0.w = u_xlat6;
    u_xlat6 = ceil(u_xlat1.x);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat6 = u_xlat6 + -1.0;
    u_xlatb6 = u_xlat6<0.0;
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
    u_xlat0.xyw = u_xlat0.xxx * vs_TEXCOORD2.xyz + u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.zzz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.330000013, -0.600000024));
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = (-u_xlat0.x) * _Shading.w + 1.0;
    u_xlat2.x = _CloudNormalsDirection.y * vs_COLOR0.z + 1.0;
    u_xlat2.x = u_xlat2.x * 0.5 + _DepthIntensity;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.xyz = _BaseColor.xyz + (-_Shading.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Shading.xyz;
    u_xlat1.xyz = (-_LightColor0.xyz) + vec3(0.800000012, 0.800000012, 0.800000012);
    u_xlat1.xyz = _BaseColor.www * u_xlat1.xyz + _LightColor0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %51 %82 %93 %131 %134 %179 %213 %219 %220 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %51 Location 51 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %219 Location 219 
                                                      OpDecorate %220 Location 220 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypePointer Output %7 
                                Output f32_4* %51 = OpVariable Output 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %91 = OpTypeVector %6 3 
                                              %92 = OpTypePointer Input %91 
                                 Input f32_3* %93 = OpVariable Input 
                                          u32 %99 = OpConstant 0 
                                             %100 = OpTypePointer Private %6 
                                         u32 %113 = OpConstant 2 
                                Private f32* %115 = OpVariable Private 
                                             %130 = OpTypePointer Output %91 
                               Output f32_3* %131 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                               Output f32_3* %179 = OpVariable Output 
                                             %182 = OpTypePointer Private %91 
                              Private f32_3* %183 = OpVariable Private 
                               Output f32_3* %213 = OpVariable Output 
                               Output f32_4* %219 = OpVariable Output 
                                Input f32_4* %220 = OpVariable Input 
                                             %222 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %52 = OpAccessChain %21 %23 %46 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %51 %58 
                                        f32_4 %59 = OpLoad %44 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %61 = OpAccessChain %21 %36 %24 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpFMul %60 %62 
                                                      OpStore %9 %63 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %44 
                                        f32_4 %67 = OpVectorShuffle %66 %66 0 0 0 0 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %9 %70 
                               Uniform f32_4* %71 = OpAccessChain %21 %36 %36 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %44 
                                        f32_4 %74 = OpVectorShuffle %73 %73 2 2 2 2 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %9 %77 
                               Uniform f32_4* %83 = OpAccessChain %21 %36 %46 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %44 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                Output f32_4* %90 = OpAccessChain %82 %23 
                                                      OpStore %90 %89 
                                        f32_3 %94 = OpLoad %93 
                               Uniform f32_4* %95 = OpAccessChain %21 %24 %23 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                          f32 %98 = OpDot %94 %97 
                                Private f32* %101 = OpAccessChain %9 %99 
                                                      OpStore %101 %98 
                                       f32_3 %102 = OpLoad %93 
                              Uniform f32_4* %103 = OpAccessChain %21 %24 %24 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                         f32 %106 = OpDot %102 %105 
                                Private f32* %107 = OpAccessChain %9 %78 
                                                      OpStore %107 %106 
                                       f32_3 %108 = OpLoad %93 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %36 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %114 = OpAccessChain %9 %113 
                                                      OpStore %114 %112 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_4 %118 = OpLoad %9 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %117 %119 
                                                      OpStore %115 %120 
                                         f32 %121 = OpLoad %115 
                                         f32 %122 = OpExtInst %1 32 %121 
                                                      OpStore %115 %122 
                                         f32 %123 = OpLoad %115 
                                       f32_3 %124 = OpCompositeConstruct %123 %123 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %9 %129 
                                       f32_4 %132 = OpLoad %9 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                                      OpStore %131 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %21 %23 %24 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %136 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %44 %142 
                              Uniform f32_4* %143 = OpAccessChain %21 %23 %23 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_4 %146 = OpLoad %134 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 0 0 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %44 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFAdd %148 %150 
                                       f32_4 %152 = OpLoad %44 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %44 %153 
                              Uniform f32_4* %154 = OpAccessChain %21 %23 %36 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_4 %157 = OpLoad %134 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %44 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %44 %164 
                                       f32_4 %165 = OpLoad %44 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_4 %167 = OpLoad %44 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %166 %168 
                                                      OpStore %115 %169 
                                         f32 %170 = OpLoad %115 
                                         f32 %171 = OpExtInst %1 32 %170 
                                                      OpStore %115 %171 
                                         f32 %172 = OpLoad %115 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_4 %174 = OpLoad %44 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %44 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %44 %178 
                                       f32_4 %180 = OpLoad %44 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                                      OpStore %179 %181 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 2 0 1 
                                       f32_4 %186 = OpLoad %44 
                                       f32_3 %187 = OpVectorShuffle %186 %186 1 2 0 
                                       f32_3 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 2 0 
                                       f32_4 %191 = OpLoad %44 
                                       f32_3 %192 = OpVectorShuffle %191 %191 2 0 1 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %194 = OpLoad %183 
                                       f32_3 %195 = OpFNegate %194 
                                       f32_3 %196 = OpFAdd %193 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %134 
                                       f32_3 %202 = OpVectorShuffle %201 %201 3 3 3 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %9 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %9 %205 
                                       f32_4 %206 = OpLoad %9 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %207 %209 
                                                      OpStore %115 %210 
                                         f32 %211 = OpLoad %115 
                                         f32 %212 = OpExtInst %1 32 %211 
                                                      OpStore %115 %212 
                                         f32 %214 = OpLoad %115 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFMul %215 %217 
                                                      OpStore %213 %218 
                                       f32_4 %221 = OpLoad %220 
                                                      OpStore %219 %221 
                                 Output f32* %223 = OpAccessChain %82 %23 %78 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFNegate %224 
                                 Output f32* %226 = OpAccessChain %82 %23 %78 
                                                      OpStore %226 %225 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 397
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %178 %228 %263 %268 %275 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 RelaxedPrecision 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 RelaxedPrecision 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 RelaxedPrecision 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 RelaxedPrecision 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 RelaxedPrecision 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 RelaxedPrecision 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 RelaxedPrecision 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 RelaxedPrecision 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %228 Location 228 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %263 Location 263 
                                                      OpDecorate %268 Location 268 
                                                      OpDecorate %275 Location 275 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeStruct %7 %7 %7 %7 %7 %6 %6 %6 %6 %6 %6 %6 %7 %7 %6 %6 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32; f32;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 15 
                                              %20 = OpTypePointer Uniform %6 
                                          i32 %37 = OpConstant 6 
                               Private f32_4* %53 = OpVariable Private 
                                          i32 %54 = OpConstant 0 
                                              %55 = OpTypeInt 32 0 
                                          u32 %56 = OpConstant 1 
                                          i32 %59 = OpConstant 2 
                                          u32 %63 = OpConstant 0 
                                              %64 = OpTypePointer Private %6 
                                          f32 %68 = OpConstant 3.674022E-40 
                               Private f32_4* %71 = OpVariable Private 
                                          i32 %74 = OpConstant 10 
                                          i32 %79 = OpConstant 11 
                                              %88 = OpTypePointer Private %12 
                               Private f32_2* %89 = OpVariable Private 
                                          f32 %92 = OpConstant 3.674022E-40 
                                          f32 %93 = OpConstant 3.674022E-40 
                                        f32_2 %94 = OpConstantComposite %92 %93 
                                          i32 %98 = OpConstant 13 
                                              %99 = OpTypePointer Uniform %7 
                              Private f32_4* %110 = OpVariable Private 
                                             %111 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %112 = OpTypeSampledImage %111 
                                             %113 = OpTypePointer UniformConstant %112 
 UniformConstant read_only Texture2DSampled* %114 = OpVariable UniformConstant 
                                         i32 %118 = OpConstant 14 
                              Private f32_4* %133 = OpVariable Private 
                                         u32 %140 = OpConstant 3 
                                         i32 %143 = OpConstant 7 
                                         f32 %150 = OpConstant 3.674022E-40 
                                             %153 = OpTypeVector %6 3 
                                             %154 = OpTypePointer Private %153 
                              Private f32_3* %155 = OpVariable Private 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_3 %159 = OpConstantComposite %158 %158 %158 
                                         f32 %174 = OpConstant 3.674022E-40 
                                       f32_3 %175 = OpConstantComposite %174 %174 %174 
                                Private f32* %177 = OpVariable Private 
                                Input f32_4* %178 = OpVariable Input 
                                             %179 = OpTypePointer Input %6 
                              Private f32_3* %189 = OpVariable Private 
                                         i32 %205 = OpConstant 12 
                                         i32 %213 = OpConstant 8 
                                         i32 %217 = OpConstant 9 
                                             %227 = OpTypePointer Output %7 
                               Output f32_4* %228 = OpVariable Output 
                                             %230 = OpTypePointer Output %6 
                                             %244 = OpTypeBool 
                                             %245 = OpTypePointer Private %244 
                               Private bool* %246 = OpVariable Private 
                                         i32 %251 = OpConstant 1 
                                         i32 %253 = OpConstant -1 
                              Private f32_3* %259 = OpVariable Private 
                                             %262 = OpTypePointer Input %153 
                                Input f32_3* %263 = OpVariable Input 
                                Input f32_3* %268 = OpVariable Input 
                                Input f32_3* %275 = OpVariable Input 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %314 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                       f32_3 %316 = OpConstantComposite %313 %314 %315 
                                         i32 %327 = OpConstant 4 
                                Private f32* %333 = OpVariable Private 
                                         u32 %336 = OpConstant 2 
                                         i32 %343 = OpConstant 5 
                              Private f32_3* %354 = OpVariable Private 
                                         i32 %355 = OpConstant 3 
                                         f32 %378 = OpConstant 3.674022E-40 
                                       f32_3 %379 = OpConstantComposite %378 %378 %378 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 2 2 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                 Uniform f32* %23 = OpAccessChain %17 %19 
                                          f32 %24 = OpLoad %23 
                                        f32_2 %25 = OpCompositeConstruct %22 %24 
                                          f32 %26 = OpCompositeExtract %25 0 
                                          f32 %27 = OpCompositeExtract %25 1 
                                        f32_2 %28 = OpCompositeConstruct %26 %27 
                                        f32_2 %29 = OpFAdd %14 %28 
                                        f32_4 %30 = OpLoad %9 
                                        f32_4 %31 = OpVectorShuffle %30 %29 0 4 2 5 
                                                      OpStore %9 %31 
                                        f32_4 %32 = OpLoad %11 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 0 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpVectorShuffle %34 %33 4 1 5 3 
                                                      OpStore %9 %35 
                                        f32_4 %36 = OpLoad %9 
                                 Uniform f32* %38 = OpAccessChain %17 %37 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %17 %37 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %17 %37 
                                          f32 %43 = OpLoad %42 
                                 Uniform f32* %44 = OpAccessChain %17 %37 
                                          f32 %45 = OpLoad %44 
                                        f32_4 %46 = OpCompositeConstruct %39 %41 %43 %45 
                                          f32 %47 = OpCompositeExtract %46 0 
                                          f32 %48 = OpCompositeExtract %46 1 
                                          f32 %49 = OpCompositeExtract %46 2 
                                          f32 %50 = OpCompositeExtract %46 3 
                                        f32_4 %51 = OpCompositeConstruct %47 %48 %49 %50 
                                        f32_4 %52 = OpFDiv %36 %51 
                                                      OpStore %9 %52 
                                 Uniform f32* %57 = OpAccessChain %17 %54 %56 
                                          f32 %58 = OpLoad %57 
                                 Uniform f32* %60 = OpAccessChain %17 %59 %56 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %58 %61 
                                 Private f32* %65 = OpAccessChain %53 %63 
                                                      OpStore %65 %62 
                                 Private f32* %66 = OpAccessChain %53 %63 
                                          f32 %67 = OpLoad %66 
                                          f32 %69 = OpFMul %67 %68 
                                 Private f32* %70 = OpAccessChain %53 %63 
                                                      OpStore %70 %69 
                                        f32_4 %72 = OpLoad %53 
                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
                                 Uniform f32* %75 = OpAccessChain %17 %74 
                                          f32 %76 = OpLoad %75 
                                 Uniform f32* %77 = OpAccessChain %17 %74 
                                          f32 %78 = OpLoad %77 
                                 Uniform f32* %80 = OpAccessChain %17 %79 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %17 %79 
                                          f32 %83 = OpLoad %82 
                                        f32_4 %84 = OpCompositeConstruct %76 %78 %81 %83 
                                        f32_4 %85 = OpFMul %73 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %71 %87 
                                        f32_4 %90 = OpLoad %71 
                                        f32_2 %91 = OpVectorShuffle %90 %90 2 3 
                                        f32_2 %95 = OpFAdd %91 %94 
                                                      OpStore %89 %95 
                                        f32_4 %96 = OpLoad %71 
                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %98 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %97 %102 
                              Uniform f32_4* %104 = OpAccessChain %17 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %53 %109 
                  read_only Texture2DSampled %115 = OpLoad %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                Uniform f32* %119 = OpAccessChain %17 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_4 %121 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                                      OpStore %110 %121 
                                       f32_2 %122 = OpLoad %89 
                              Uniform f32_4* %123 = OpAccessChain %17 %98 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_2 %126 = OpFMul %122 %125 
                              Uniform f32_4* %127 = OpAccessChain %17 %98 
                                       f32_4 %128 = OpLoad %127 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                       f32_4 %131 = OpLoad %53 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %53 %132 
                  read_only Texture2DSampled %134 = OpLoad %114 
                                       f32_4 %135 = OpLoad %53 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                Uniform f32* %137 = OpAccessChain %17 %118 
                                         f32 %138 = OpLoad %137 
                                       f32_4 %139 = OpImageSampleExplicitLod %134 %136 Lod %7 
                                                      OpStore %133 %139 
                                Private f32* %141 = OpAccessChain %110 %140 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %144 = OpAccessChain %17 %143 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpFAdd %142 %145 
                                Private f32* %147 = OpAccessChain %89 %63 
                                                      OpStore %147 %146 
                                Private f32* %148 = OpAccessChain %89 %63 
                                         f32 %149 = OpLoad %148 
                                         f32 %151 = OpExtInst %1 43 %149 %92 %150 
                                Private f32* %152 = OpAccessChain %89 %63 
                                                      OpStore %152 %151 
                                       f32_4 %156 = OpLoad %110 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %160 = OpFMul %157 %159 
                                Uniform f32* %161 = OpAccessChain %17 %143 
                                         f32 %162 = OpLoad %161 
                                Uniform f32* %163 = OpAccessChain %17 %143 
                                         f32 %164 = OpLoad %163 
                                Uniform f32* %165 = OpAccessChain %17 %143 
                                         f32 %166 = OpLoad %165 
                                       f32_3 %167 = OpCompositeConstruct %162 %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                         f32 %169 = OpCompositeExtract %167 1 
                                         f32 %170 = OpCompositeExtract %167 2 
                                       f32_3 %171 = OpCompositeConstruct %168 %169 %170 
                                       f32_3 %172 = OpFAdd %160 %171 
                                                      OpStore %155 %172 
                                       f32_3 %173 = OpLoad %155 
                                       f32_3 %176 = OpFAdd %173 %175 
                                                      OpStore %155 %176 
                                  Input f32* %180 = OpAccessChain %178 %140 
                                         f32 %181 = OpLoad %180 
                                Private f32* %182 = OpAccessChain %89 %63 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFMul %181 %183 
                                Private f32* %185 = OpAccessChain %133 %140 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                         f32 %188 = OpFAdd %184 %187 
                                                      OpStore %177 %188 
                                       f32_4 %190 = OpLoad %133 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %191 %159 
                                       f32_3 %193 = OpFAdd %192 %175 
                                                      OpStore %189 %193 
                                       f32_4 %194 = OpLoad %178 
                                       f32_3 %195 = OpVectorShuffle %194 %194 3 3 3 
                                       f32_3 %196 = OpLoad %155 
                                       f32_3 %197 = OpFMul %195 %196 
                                       f32_3 %198 = OpLoad %189 
                                       f32_3 %199 = OpFNegate %198 
                                       f32_3 %200 = OpFAdd %197 %199 
                                       f32_4 %201 = OpLoad %53 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %53 %202 
                                       f32_4 %203 = OpLoad %53 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                              Uniform f32_4* %206 = OpAccessChain %17 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %204 %208 
                                       f32_4 %210 = OpLoad %53 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %53 %211 
                                         f32 %212 = OpLoad %177 
                                Uniform f32* %214 = OpAccessChain %17 %213 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFMul %212 %215 
                                Uniform f32* %218 = OpAccessChain %17 %217 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFNegate %219 
                                         f32 %221 = OpFAdd %216 %220 
                                Private f32* %222 = OpAccessChain %89 %63 
                                                      OpStore %222 %221 
                                         f32 %223 = OpLoad %177 
                                Uniform f32* %224 = OpAccessChain %17 %213 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                                      OpStore %177 %226 
                                         f32 %229 = OpLoad %177 
                                 Output f32* %231 = OpAccessChain %228 %140 
                                                      OpStore %231 %229 
                                Private f32* %232 = OpAccessChain %89 %63 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpExtInst %1 9 %233 
                                Private f32* %235 = OpAccessChain %89 %63 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %89 %63 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 43 %237 %92 %150 
                                Private f32* %239 = OpAccessChain %89 %63 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %89 %63 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFAdd %241 %174 
                                Private f32* %243 = OpAccessChain %89 %63 
                                                      OpStore %243 %242 
                                Private f32* %247 = OpAccessChain %89 %63 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdLessThan %248 %92 
                                                      OpStore %246 %249 
                                        bool %250 = OpLoad %246 
                                         i32 %252 = OpSelect %250 %251 %54 
                                         i32 %254 = OpIMul %252 %253 
                                        bool %255 = OpINotEqual %254 %54 
                                                      OpSelectionMerge %257 None 
                                                      OpBranchConditional %255 %256 %257 
                                             %256 = OpLabel 
                                                      OpKill
                                             %257 = OpLabel 
                                       f32_4 %260 = OpLoad %53 
                                       f32_3 %261 = OpVectorShuffle %260 %260 1 1 1 
                                       f32_3 %264 = OpLoad %263 
                                       f32_3 %265 = OpFMul %261 %264 
                                                      OpStore %259 %265 
                                       f32_4 %266 = OpLoad %53 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
                                       f32_3 %269 = OpLoad %268 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %259 
                                       f32_3 %272 = OpFAdd %270 %271 
                                       f32_4 %273 = OpLoad %53 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 6 
                                                      OpStore %53 %274 
                                       f32_3 %276 = OpLoad %275 
                                       f32_3 %277 = OpLoad %275 
                                         f32 %278 = OpDot %276 %277 
                                Private f32* %279 = OpAccessChain %259 %63 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %259 %63 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 32 %281 
                                Private f32* %283 = OpAccessChain %259 %63 
                                                      OpStore %283 %282 
                                       f32_3 %284 = OpLoad %259 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpLoad %275 
                                       f32_3 %287 = OpFMul %285 %286 
                                                      OpStore %259 %287 
                                       f32_4 %288 = OpLoad %53 
                                       f32_3 %289 = OpVectorShuffle %288 %288 2 2 2 
                                       f32_3 %290 = OpLoad %259 
                                       f32_3 %291 = OpFMul %289 %290 
                                       f32_4 %292 = OpLoad %53 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 3 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %53 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %53 %296 
                                       f32_4 %297 = OpLoad %53 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_4 %299 = OpLoad %53 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                         f32 %301 = OpDot %298 %300 
                                                      OpStore %177 %301 
                                         f32 %302 = OpLoad %177 
                                         f32 %303 = OpExtInst %1 32 %302 
                                                      OpStore %177 %303 
                                         f32 %304 = OpLoad %177 
                                       f32_3 %305 = OpCompositeConstruct %304 %304 %304 
                                       f32_4 %306 = OpLoad %53 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %53 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %53 %310 
                                       f32_4 %311 = OpLoad %53 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                         f32 %317 = OpDot %312 %316 
                                Private f32* %318 = OpAccessChain %53 %63 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %53 %63 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %150 
                                Private f32* %323 = OpAccessChain %53 %63 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %53 %63 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFNegate %325 
                                Uniform f32* %328 = OpAccessChain %17 %327 %140 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFMul %326 %329 
                                         f32 %331 = OpFAdd %330 %150 
                                Private f32* %332 = OpAccessChain %53 %63 
                                                      OpStore %332 %331 
                                Uniform f32* %334 = OpAccessChain %17 %205 %56 
                                         f32 %335 = OpLoad %334 
                                  Input f32* %337 = OpAccessChain %178 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFMul %335 %338 
                                         f32 %340 = OpFAdd %339 %150 
                                                      OpStore %333 %340 
                                         f32 %341 = OpLoad %333 
                                         f32 %342 = OpFMul %341 %93 
                                Uniform f32* %344 = OpAccessChain %17 %343 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFAdd %342 %345 
                                                      OpStore %333 %346 
                                         f32 %347 = OpLoad %333 
                                         f32 %348 = OpExtInst %1 43 %347 %92 %150 
                                                      OpStore %333 %348 
                                         f32 %349 = OpLoad %333 
                                Private f32* %350 = OpAccessChain %53 %63 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                Private f32* %353 = OpAccessChain %53 %63 
                                                      OpStore %353 %352 
                              Uniform f32_4* %356 = OpAccessChain %17 %355 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                              Uniform f32_4* %359 = OpAccessChain %17 %327 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFNegate %361 
                                       f32_3 %363 = OpFAdd %358 %362 
                                                      OpStore %354 %363 
                                       f32_4 %364 = OpLoad %53 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 0 0 
                                       f32_3 %366 = OpLoad %354 
                                       f32_3 %367 = OpFMul %365 %366 
                              Uniform f32_4* %368 = OpAccessChain %17 %327 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFAdd %367 %370 
                                       f32_4 %372 = OpLoad %53 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %53 %373 
                              Uniform f32_4* %374 = OpAccessChain %17 %251 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFNegate %376 
                                       f32_3 %380 = OpFAdd %377 %379 
                                                      OpStore %259 %380 
                              Uniform f32_4* %381 = OpAccessChain %17 %355 
                                       f32_4 %382 = OpLoad %381 
                                       f32_3 %383 = OpVectorShuffle %382 %382 3 3 3 
                                       f32_3 %384 = OpLoad %259 
                                       f32_3 %385 = OpFMul %383 %384 
                              Uniform f32_4* %386 = OpAccessChain %17 %251 
                                       f32_4 %387 = OpLoad %386 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFAdd %385 %388 
                                                      OpStore %259 %389 
                                       f32_4 %390 = OpLoad %53 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpLoad %259 
                                       f32_3 %393 = OpFMul %391 %392 
                                       f32_4 %394 = OpLoad %228 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
                                                      OpStore %228 %395 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _LightColor0;
uniform 	vec4 _TimeEditor;
uniform 	vec4 _BaseColor;
uniform 	vec4 _Shading;
uniform 	float _DepthIntensity;
uniform 	float _Tiling;
uniform 	float _Density;
uniform 	float _Alpha;
uniform 	float _AlphaCut;
uniform 	float _Speed;
uniform 	float _SpeedSecondLayer;
uniform 	vec4 _CloudNormalsDirection;
uniform 	vec4 _PerlinNormalMap_ST;
uniform 	float _MipLevel;
uniform 	float _ZOffset;
uniform  sampler2D _PerlinNormalMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec2 u_xlat4;
float u_xlat6;
bool u_xlatb6;
float u_xlat7;
void main()
{
    u_xlat0.yw = vs_TEXCOORD0.zz + vec2(vec2(_ZOffset, _ZOffset));
    u_xlat0.xz = vs_TEXCOORD0.xx;
    u_xlat0 = u_xlat0 / vec4(vec4(_Tiling, _Tiling, _Tiling, _Tiling));
    u_xlat1.x = _Time.y + _TimeEditor.y;
    u_xlat1.x = u_xlat1.x * 0.00100000005;
    u_xlat0 = u_xlat1.xxxx * vec4(_Speed, _Speed, _SpeedSecondLayer, _SpeedSecondLayer) + u_xlat0;
    u_xlat4.xy = u_xlat0.zw + vec2(0.0, 0.5);
    u_xlat0.xy = u_xlat0.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat0.xy = u_xlat4.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_0 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat7 = u_xlat10_1.w + _Density;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(vec3(_Density, _Density, _Density));
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6 = vs_COLOR0.w * u_xlat7 + (-u_xlat10_0.w);
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + (-u_xlat16_0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * _CloudNormalsDirection.xyz;
    u_xlat1.x = u_xlat6 * _Alpha + (-_AlphaCut);
    u_xlat6 = u_xlat6 * _Alpha;
    SV_Target0.w = u_xlat6;
    u_xlat6 = ceil(u_xlat1.x);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat6 = u_xlat6 + -1.0;
    u_xlatb6 = u_xlat6<0.0;
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
    u_xlat0.xyw = u_xlat0.xxx * vs_TEXCOORD2.xyz + u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.zzz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.330000013, -0.600000024));
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = (-u_xlat0.x) * _Shading.w + 1.0;
    u_xlat2.x = _CloudNormalsDirection.y * vs_COLOR0.z + 1.0;
    u_xlat2.x = u_xlat2.x * 0.5 + _DepthIntensity;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.xyz = _BaseColor.xyz + (-_Shading.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Shading.xyz;
    u_xlat1.xyz = (-_LightColor0.xyz) + vec3(0.800000012, 0.800000012, 0.800000012);
    u_xlat1.xyz = _BaseColor.www * u_xlat1.xyz + _LightColor0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %51 %82 %93 %131 %134 %179 %213 %219 %220 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %51 Location 51 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %219 Location 219 
                                                      OpDecorate %220 Location 220 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypePointer Output %7 
                                Output f32_4* %51 = OpVariable Output 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %91 = OpTypeVector %6 3 
                                              %92 = OpTypePointer Input %91 
                                 Input f32_3* %93 = OpVariable Input 
                                          u32 %99 = OpConstant 0 
                                             %100 = OpTypePointer Private %6 
                                         u32 %113 = OpConstant 2 
                                Private f32* %115 = OpVariable Private 
                                             %130 = OpTypePointer Output %91 
                               Output f32_3* %131 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                               Output f32_3* %179 = OpVariable Output 
                                             %182 = OpTypePointer Private %91 
                              Private f32_3* %183 = OpVariable Private 
                               Output f32_3* %213 = OpVariable Output 
                               Output f32_4* %219 = OpVariable Output 
                                Input f32_4* %220 = OpVariable Input 
                                             %222 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %52 = OpAccessChain %21 %23 %46 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %51 %58 
                                        f32_4 %59 = OpLoad %44 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %61 = OpAccessChain %21 %36 %24 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpFMul %60 %62 
                                                      OpStore %9 %63 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %44 
                                        f32_4 %67 = OpVectorShuffle %66 %66 0 0 0 0 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %9 %70 
                               Uniform f32_4* %71 = OpAccessChain %21 %36 %36 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %44 
                                        f32_4 %74 = OpVectorShuffle %73 %73 2 2 2 2 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %9 %77 
                               Uniform f32_4* %83 = OpAccessChain %21 %36 %46 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %44 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                Output f32_4* %90 = OpAccessChain %82 %23 
                                                      OpStore %90 %89 
                                        f32_3 %94 = OpLoad %93 
                               Uniform f32_4* %95 = OpAccessChain %21 %24 %23 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                          f32 %98 = OpDot %94 %97 
                                Private f32* %101 = OpAccessChain %9 %99 
                                                      OpStore %101 %98 
                                       f32_3 %102 = OpLoad %93 
                              Uniform f32_4* %103 = OpAccessChain %21 %24 %24 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                         f32 %106 = OpDot %102 %105 
                                Private f32* %107 = OpAccessChain %9 %78 
                                                      OpStore %107 %106 
                                       f32_3 %108 = OpLoad %93 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %36 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %114 = OpAccessChain %9 %113 
                                                      OpStore %114 %112 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_4 %118 = OpLoad %9 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %117 %119 
                                                      OpStore %115 %120 
                                         f32 %121 = OpLoad %115 
                                         f32 %122 = OpExtInst %1 32 %121 
                                                      OpStore %115 %122 
                                         f32 %123 = OpLoad %115 
                                       f32_3 %124 = OpCompositeConstruct %123 %123 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %9 %129 
                                       f32_4 %132 = OpLoad %9 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                                      OpStore %131 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %21 %23 %24 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %136 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %44 %142 
                              Uniform f32_4* %143 = OpAccessChain %21 %23 %23 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_4 %146 = OpLoad %134 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 0 0 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %44 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFAdd %148 %150 
                                       f32_4 %152 = OpLoad %44 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %44 %153 
                              Uniform f32_4* %154 = OpAccessChain %21 %23 %36 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_4 %157 = OpLoad %134 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %44 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %44 %164 
                                       f32_4 %165 = OpLoad %44 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_4 %167 = OpLoad %44 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %166 %168 
                                                      OpStore %115 %169 
                                         f32 %170 = OpLoad %115 
                                         f32 %171 = OpExtInst %1 32 %170 
                                                      OpStore %115 %171 
                                         f32 %172 = OpLoad %115 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_4 %174 = OpLoad %44 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %44 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %44 %178 
                                       f32_4 %180 = OpLoad %44 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                                      OpStore %179 %181 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 2 0 1 
                                       f32_4 %186 = OpLoad %44 
                                       f32_3 %187 = OpVectorShuffle %186 %186 1 2 0 
                                       f32_3 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 2 0 
                                       f32_4 %191 = OpLoad %44 
                                       f32_3 %192 = OpVectorShuffle %191 %191 2 0 1 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %194 = OpLoad %183 
                                       f32_3 %195 = OpFNegate %194 
                                       f32_3 %196 = OpFAdd %193 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %134 
                                       f32_3 %202 = OpVectorShuffle %201 %201 3 3 3 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %9 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %9 %205 
                                       f32_4 %206 = OpLoad %9 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %207 %209 
                                                      OpStore %115 %210 
                                         f32 %211 = OpLoad %115 
                                         f32 %212 = OpExtInst %1 32 %211 
                                                      OpStore %115 %212 
                                         f32 %214 = OpLoad %115 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFMul %215 %217 
                                                      OpStore %213 %218 
                                       f32_4 %221 = OpLoad %220 
                                                      OpStore %219 %221 
                                 Output f32* %223 = OpAccessChain %82 %23 %78 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFNegate %224 
                                 Output f32* %226 = OpAccessChain %82 %23 %78 
                                                      OpStore %226 %225 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 397
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %178 %228 %263 %268 %275 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 RelaxedPrecision 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 RelaxedPrecision 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 RelaxedPrecision 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 RelaxedPrecision 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 RelaxedPrecision 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 RelaxedPrecision 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 RelaxedPrecision 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 RelaxedPrecision 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %228 Location 228 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %263 Location 263 
                                                      OpDecorate %268 Location 268 
                                                      OpDecorate %275 Location 275 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeStruct %7 %7 %7 %7 %7 %6 %6 %6 %6 %6 %6 %6 %7 %7 %6 %6 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32; f32;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 15 
                                              %20 = OpTypePointer Uniform %6 
                                          i32 %37 = OpConstant 6 
                               Private f32_4* %53 = OpVariable Private 
                                          i32 %54 = OpConstant 0 
                                              %55 = OpTypeInt 32 0 
                                          u32 %56 = OpConstant 1 
                                          i32 %59 = OpConstant 2 
                                          u32 %63 = OpConstant 0 
                                              %64 = OpTypePointer Private %6 
                                          f32 %68 = OpConstant 3.674022E-40 
                               Private f32_4* %71 = OpVariable Private 
                                          i32 %74 = OpConstant 10 
                                          i32 %79 = OpConstant 11 
                                              %88 = OpTypePointer Private %12 
                               Private f32_2* %89 = OpVariable Private 
                                          f32 %92 = OpConstant 3.674022E-40 
                                          f32 %93 = OpConstant 3.674022E-40 
                                        f32_2 %94 = OpConstantComposite %92 %93 
                                          i32 %98 = OpConstant 13 
                                              %99 = OpTypePointer Uniform %7 
                              Private f32_4* %110 = OpVariable Private 
                                             %111 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %112 = OpTypeSampledImage %111 
                                             %113 = OpTypePointer UniformConstant %112 
 UniformConstant read_only Texture2DSampled* %114 = OpVariable UniformConstant 
                                         i32 %118 = OpConstant 14 
                              Private f32_4* %133 = OpVariable Private 
                                         u32 %140 = OpConstant 3 
                                         i32 %143 = OpConstant 7 
                                         f32 %150 = OpConstant 3.674022E-40 
                                             %153 = OpTypeVector %6 3 
                                             %154 = OpTypePointer Private %153 
                              Private f32_3* %155 = OpVariable Private 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_3 %159 = OpConstantComposite %158 %158 %158 
                                         f32 %174 = OpConstant 3.674022E-40 
                                       f32_3 %175 = OpConstantComposite %174 %174 %174 
                                Private f32* %177 = OpVariable Private 
                                Input f32_4* %178 = OpVariable Input 
                                             %179 = OpTypePointer Input %6 
                              Private f32_3* %189 = OpVariable Private 
                                         i32 %205 = OpConstant 12 
                                         i32 %213 = OpConstant 8 
                                         i32 %217 = OpConstant 9 
                                             %227 = OpTypePointer Output %7 
                               Output f32_4* %228 = OpVariable Output 
                                             %230 = OpTypePointer Output %6 
                                             %244 = OpTypeBool 
                                             %245 = OpTypePointer Private %244 
                               Private bool* %246 = OpVariable Private 
                                         i32 %251 = OpConstant 1 
                                         i32 %253 = OpConstant -1 
                              Private f32_3* %259 = OpVariable Private 
                                             %262 = OpTypePointer Input %153 
                                Input f32_3* %263 = OpVariable Input 
                                Input f32_3* %268 = OpVariable Input 
                                Input f32_3* %275 = OpVariable Input 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %314 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                       f32_3 %316 = OpConstantComposite %313 %314 %315 
                                         i32 %327 = OpConstant 4 
                                Private f32* %333 = OpVariable Private 
                                         u32 %336 = OpConstant 2 
                                         i32 %343 = OpConstant 5 
                              Private f32_3* %354 = OpVariable Private 
                                         i32 %355 = OpConstant 3 
                                         f32 %378 = OpConstant 3.674022E-40 
                                       f32_3 %379 = OpConstantComposite %378 %378 %378 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 2 2 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                 Uniform f32* %23 = OpAccessChain %17 %19 
                                          f32 %24 = OpLoad %23 
                                        f32_2 %25 = OpCompositeConstruct %22 %24 
                                          f32 %26 = OpCompositeExtract %25 0 
                                          f32 %27 = OpCompositeExtract %25 1 
                                        f32_2 %28 = OpCompositeConstruct %26 %27 
                                        f32_2 %29 = OpFAdd %14 %28 
                                        f32_4 %30 = OpLoad %9 
                                        f32_4 %31 = OpVectorShuffle %30 %29 0 4 2 5 
                                                      OpStore %9 %31 
                                        f32_4 %32 = OpLoad %11 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 0 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpVectorShuffle %34 %33 4 1 5 3 
                                                      OpStore %9 %35 
                                        f32_4 %36 = OpLoad %9 
                                 Uniform f32* %38 = OpAccessChain %17 %37 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %17 %37 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %17 %37 
                                          f32 %43 = OpLoad %42 
                                 Uniform f32* %44 = OpAccessChain %17 %37 
                                          f32 %45 = OpLoad %44 
                                        f32_4 %46 = OpCompositeConstruct %39 %41 %43 %45 
                                          f32 %47 = OpCompositeExtract %46 0 
                                          f32 %48 = OpCompositeExtract %46 1 
                                          f32 %49 = OpCompositeExtract %46 2 
                                          f32 %50 = OpCompositeExtract %46 3 
                                        f32_4 %51 = OpCompositeConstruct %47 %48 %49 %50 
                                        f32_4 %52 = OpFDiv %36 %51 
                                                      OpStore %9 %52 
                                 Uniform f32* %57 = OpAccessChain %17 %54 %56 
                                          f32 %58 = OpLoad %57 
                                 Uniform f32* %60 = OpAccessChain %17 %59 %56 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %58 %61 
                                 Private f32* %65 = OpAccessChain %53 %63 
                                                      OpStore %65 %62 
                                 Private f32* %66 = OpAccessChain %53 %63 
                                          f32 %67 = OpLoad %66 
                                          f32 %69 = OpFMul %67 %68 
                                 Private f32* %70 = OpAccessChain %53 %63 
                                                      OpStore %70 %69 
                                        f32_4 %72 = OpLoad %53 
                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
                                 Uniform f32* %75 = OpAccessChain %17 %74 
                                          f32 %76 = OpLoad %75 
                                 Uniform f32* %77 = OpAccessChain %17 %74 
                                          f32 %78 = OpLoad %77 
                                 Uniform f32* %80 = OpAccessChain %17 %79 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %17 %79 
                                          f32 %83 = OpLoad %82 
                                        f32_4 %84 = OpCompositeConstruct %76 %78 %81 %83 
                                        f32_4 %85 = OpFMul %73 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %71 %87 
                                        f32_4 %90 = OpLoad %71 
                                        f32_2 %91 = OpVectorShuffle %90 %90 2 3 
                                        f32_2 %95 = OpFAdd %91 %94 
                                                      OpStore %89 %95 
                                        f32_4 %96 = OpLoad %71 
                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %98 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %97 %102 
                              Uniform f32_4* %104 = OpAccessChain %17 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %53 %109 
                  read_only Texture2DSampled %115 = OpLoad %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                Uniform f32* %119 = OpAccessChain %17 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_4 %121 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                                      OpStore %110 %121 
                                       f32_2 %122 = OpLoad %89 
                              Uniform f32_4* %123 = OpAccessChain %17 %98 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_2 %126 = OpFMul %122 %125 
                              Uniform f32_4* %127 = OpAccessChain %17 %98 
                                       f32_4 %128 = OpLoad %127 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                       f32_4 %131 = OpLoad %53 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %53 %132 
                  read_only Texture2DSampled %134 = OpLoad %114 
                                       f32_4 %135 = OpLoad %53 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                Uniform f32* %137 = OpAccessChain %17 %118 
                                         f32 %138 = OpLoad %137 
                                       f32_4 %139 = OpImageSampleExplicitLod %134 %136 Lod %7 
                                                      OpStore %133 %139 
                                Private f32* %141 = OpAccessChain %110 %140 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %144 = OpAccessChain %17 %143 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpFAdd %142 %145 
                                Private f32* %147 = OpAccessChain %89 %63 
                                                      OpStore %147 %146 
                                Private f32* %148 = OpAccessChain %89 %63 
                                         f32 %149 = OpLoad %148 
                                         f32 %151 = OpExtInst %1 43 %149 %92 %150 
                                Private f32* %152 = OpAccessChain %89 %63 
                                                      OpStore %152 %151 
                                       f32_4 %156 = OpLoad %110 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %160 = OpFMul %157 %159 
                                Uniform f32* %161 = OpAccessChain %17 %143 
                                         f32 %162 = OpLoad %161 
                                Uniform f32* %163 = OpAccessChain %17 %143 
                                         f32 %164 = OpLoad %163 
                                Uniform f32* %165 = OpAccessChain %17 %143 
                                         f32 %166 = OpLoad %165 
                                       f32_3 %167 = OpCompositeConstruct %162 %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                         f32 %169 = OpCompositeExtract %167 1 
                                         f32 %170 = OpCompositeExtract %167 2 
                                       f32_3 %171 = OpCompositeConstruct %168 %169 %170 
                                       f32_3 %172 = OpFAdd %160 %171 
                                                      OpStore %155 %172 
                                       f32_3 %173 = OpLoad %155 
                                       f32_3 %176 = OpFAdd %173 %175 
                                                      OpStore %155 %176 
                                  Input f32* %180 = OpAccessChain %178 %140 
                                         f32 %181 = OpLoad %180 
                                Private f32* %182 = OpAccessChain %89 %63 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFMul %181 %183 
                                Private f32* %185 = OpAccessChain %133 %140 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                         f32 %188 = OpFAdd %184 %187 
                                                      OpStore %177 %188 
                                       f32_4 %190 = OpLoad %133 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %191 %159 
                                       f32_3 %193 = OpFAdd %192 %175 
                                                      OpStore %189 %193 
                                       f32_4 %194 = OpLoad %178 
                                       f32_3 %195 = OpVectorShuffle %194 %194 3 3 3 
                                       f32_3 %196 = OpLoad %155 
                                       f32_3 %197 = OpFMul %195 %196 
                                       f32_3 %198 = OpLoad %189 
                                       f32_3 %199 = OpFNegate %198 
                                       f32_3 %200 = OpFAdd %197 %199 
                                       f32_4 %201 = OpLoad %53 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %53 %202 
                                       f32_4 %203 = OpLoad %53 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                              Uniform f32_4* %206 = OpAccessChain %17 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %204 %208 
                                       f32_4 %210 = OpLoad %53 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %53 %211 
                                         f32 %212 = OpLoad %177 
                                Uniform f32* %214 = OpAccessChain %17 %213 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFMul %212 %215 
                                Uniform f32* %218 = OpAccessChain %17 %217 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFNegate %219 
                                         f32 %221 = OpFAdd %216 %220 
                                Private f32* %222 = OpAccessChain %89 %63 
                                                      OpStore %222 %221 
                                         f32 %223 = OpLoad %177 
                                Uniform f32* %224 = OpAccessChain %17 %213 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                                      OpStore %177 %226 
                                         f32 %229 = OpLoad %177 
                                 Output f32* %231 = OpAccessChain %228 %140 
                                                      OpStore %231 %229 
                                Private f32* %232 = OpAccessChain %89 %63 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpExtInst %1 9 %233 
                                Private f32* %235 = OpAccessChain %89 %63 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %89 %63 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 43 %237 %92 %150 
                                Private f32* %239 = OpAccessChain %89 %63 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %89 %63 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFAdd %241 %174 
                                Private f32* %243 = OpAccessChain %89 %63 
                                                      OpStore %243 %242 
                                Private f32* %247 = OpAccessChain %89 %63 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdLessThan %248 %92 
                                                      OpStore %246 %249 
                                        bool %250 = OpLoad %246 
                                         i32 %252 = OpSelect %250 %251 %54 
                                         i32 %254 = OpIMul %252 %253 
                                        bool %255 = OpINotEqual %254 %54 
                                                      OpSelectionMerge %257 None 
                                                      OpBranchConditional %255 %256 %257 
                                             %256 = OpLabel 
                                                      OpKill
                                             %257 = OpLabel 
                                       f32_4 %260 = OpLoad %53 
                                       f32_3 %261 = OpVectorShuffle %260 %260 1 1 1 
                                       f32_3 %264 = OpLoad %263 
                                       f32_3 %265 = OpFMul %261 %264 
                                                      OpStore %259 %265 
                                       f32_4 %266 = OpLoad %53 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
                                       f32_3 %269 = OpLoad %268 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %259 
                                       f32_3 %272 = OpFAdd %270 %271 
                                       f32_4 %273 = OpLoad %53 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 6 
                                                      OpStore %53 %274 
                                       f32_3 %276 = OpLoad %275 
                                       f32_3 %277 = OpLoad %275 
                                         f32 %278 = OpDot %276 %277 
                                Private f32* %279 = OpAccessChain %259 %63 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %259 %63 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 32 %281 
                                Private f32* %283 = OpAccessChain %259 %63 
                                                      OpStore %283 %282 
                                       f32_3 %284 = OpLoad %259 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpLoad %275 
                                       f32_3 %287 = OpFMul %285 %286 
                                                      OpStore %259 %287 
                                       f32_4 %288 = OpLoad %53 
                                       f32_3 %289 = OpVectorShuffle %288 %288 2 2 2 
                                       f32_3 %290 = OpLoad %259 
                                       f32_3 %291 = OpFMul %289 %290 
                                       f32_4 %292 = OpLoad %53 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 3 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %53 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %53 %296 
                                       f32_4 %297 = OpLoad %53 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_4 %299 = OpLoad %53 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                         f32 %301 = OpDot %298 %300 
                                                      OpStore %177 %301 
                                         f32 %302 = OpLoad %177 
                                         f32 %303 = OpExtInst %1 32 %302 
                                                      OpStore %177 %303 
                                         f32 %304 = OpLoad %177 
                                       f32_3 %305 = OpCompositeConstruct %304 %304 %304 
                                       f32_4 %306 = OpLoad %53 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %53 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %53 %310 
                                       f32_4 %311 = OpLoad %53 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                         f32 %317 = OpDot %312 %316 
                                Private f32* %318 = OpAccessChain %53 %63 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %53 %63 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %150 
                                Private f32* %323 = OpAccessChain %53 %63 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %53 %63 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFNegate %325 
                                Uniform f32* %328 = OpAccessChain %17 %327 %140 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFMul %326 %329 
                                         f32 %331 = OpFAdd %330 %150 
                                Private f32* %332 = OpAccessChain %53 %63 
                                                      OpStore %332 %331 
                                Uniform f32* %334 = OpAccessChain %17 %205 %56 
                                         f32 %335 = OpLoad %334 
                                  Input f32* %337 = OpAccessChain %178 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFMul %335 %338 
                                         f32 %340 = OpFAdd %339 %150 
                                                      OpStore %333 %340 
                                         f32 %341 = OpLoad %333 
                                         f32 %342 = OpFMul %341 %93 
                                Uniform f32* %344 = OpAccessChain %17 %343 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFAdd %342 %345 
                                                      OpStore %333 %346 
                                         f32 %347 = OpLoad %333 
                                         f32 %348 = OpExtInst %1 43 %347 %92 %150 
                                                      OpStore %333 %348 
                                         f32 %349 = OpLoad %333 
                                Private f32* %350 = OpAccessChain %53 %63 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                Private f32* %353 = OpAccessChain %53 %63 
                                                      OpStore %353 %352 
                              Uniform f32_4* %356 = OpAccessChain %17 %355 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                              Uniform f32_4* %359 = OpAccessChain %17 %327 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFNegate %361 
                                       f32_3 %363 = OpFAdd %358 %362 
                                                      OpStore %354 %363 
                                       f32_4 %364 = OpLoad %53 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 0 0 
                                       f32_3 %366 = OpLoad %354 
                                       f32_3 %367 = OpFMul %365 %366 
                              Uniform f32_4* %368 = OpAccessChain %17 %327 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFAdd %367 %370 
                                       f32_4 %372 = OpLoad %53 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %53 %373 
                              Uniform f32_4* %374 = OpAccessChain %17 %251 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFNegate %376 
                                       f32_3 %380 = OpFAdd %377 %379 
                                                      OpStore %259 %380 
                              Uniform f32_4* %381 = OpAccessChain %17 %355 
                                       f32_4 %382 = OpLoad %381 
                                       f32_3 %383 = OpVectorShuffle %382 %382 3 3 3 
                                       f32_3 %384 = OpLoad %259 
                                       f32_3 %385 = OpFMul %383 %384 
                              Uniform f32_4* %386 = OpAccessChain %17 %251 
                                       f32_4 %387 = OpLoad %386 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFAdd %385 %388 
                                                      OpStore %259 %389 
                                       f32_4 %390 = OpLoad %53 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpLoad %259 
                                       f32_3 %393 = OpFMul %391 %392 
                                       f32_4 %394 = OpLoad %228 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
                                                      OpStore %228 %395 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _LightColor0;
uniform 	vec4 _TimeEditor;
uniform 	vec4 _BaseColor;
uniform 	vec4 _Shading;
uniform 	float _DepthIntensity;
uniform 	float _Tiling;
uniform 	float _Density;
uniform 	float _Alpha;
uniform 	float _AlphaCut;
uniform 	float _Speed;
uniform 	float _SpeedSecondLayer;
uniform 	vec4 _CloudNormalsDirection;
uniform 	vec4 _PerlinNormalMap_ST;
uniform 	float _MipLevel;
uniform 	float _ZOffset;
uniform  sampler2D _PerlinNormalMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec2 u_xlat4;
float u_xlat6;
bool u_xlatb6;
float u_xlat7;
void main()
{
    u_xlat0.yw = vs_TEXCOORD0.zz + vec2(vec2(_ZOffset, _ZOffset));
    u_xlat0.xz = vs_TEXCOORD0.xx;
    u_xlat0 = u_xlat0 / vec4(vec4(_Tiling, _Tiling, _Tiling, _Tiling));
    u_xlat1.x = _Time.y + _TimeEditor.y;
    u_xlat1.x = u_xlat1.x * 0.00100000005;
    u_xlat0 = u_xlat1.xxxx * vec4(_Speed, _Speed, _SpeedSecondLayer, _SpeedSecondLayer) + u_xlat0;
    u_xlat4.xy = u_xlat0.zw + vec2(0.0, 0.5);
    u_xlat0.xy = u_xlat0.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat0.xy = u_xlat4.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_0 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat7 = u_xlat10_1.w + _Density;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(vec3(_Density, _Density, _Density));
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6 = vs_COLOR0.w * u_xlat7 + (-u_xlat10_0.w);
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + (-u_xlat16_0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * _CloudNormalsDirection.xyz;
    u_xlat1.x = u_xlat6 * _Alpha + (-_AlphaCut);
    u_xlat6 = u_xlat6 * _Alpha;
    SV_Target0.w = u_xlat6;
    u_xlat6 = ceil(u_xlat1.x);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat6 = u_xlat6 + -1.0;
    u_xlatb6 = u_xlat6<0.0;
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
    u_xlat0.xyw = u_xlat0.xxx * vs_TEXCOORD2.xyz + u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.zzz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.330000013, -0.600000024));
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = (-u_xlat0.x) * _Shading.w + 1.0;
    u_xlat2.x = _CloudNormalsDirection.y * vs_COLOR0.z + 1.0;
    u_xlat2.x = u_xlat2.x * 0.5 + _DepthIntensity;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.xyz = _BaseColor.xyz + (-_Shading.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Shading.xyz;
    u_xlat1.xyz = (-_LightColor0.xyz) + vec3(0.800000012, 0.800000012, 0.800000012);
    u_xlat1.xyz = _BaseColor.www * u_xlat1.xyz + _LightColor0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %51 %82 %93 %131 %134 %179 %213 %219 %220 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %51 Location 51 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %219 Location 219 
                                                      OpDecorate %220 Location 220 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypePointer Output %7 
                                Output f32_4* %51 = OpVariable Output 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %91 = OpTypeVector %6 3 
                                              %92 = OpTypePointer Input %91 
                                 Input f32_3* %93 = OpVariable Input 
                                          u32 %99 = OpConstant 0 
                                             %100 = OpTypePointer Private %6 
                                         u32 %113 = OpConstant 2 
                                Private f32* %115 = OpVariable Private 
                                             %130 = OpTypePointer Output %91 
                               Output f32_3* %131 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                               Output f32_3* %179 = OpVariable Output 
                                             %182 = OpTypePointer Private %91 
                              Private f32_3* %183 = OpVariable Private 
                               Output f32_3* %213 = OpVariable Output 
                               Output f32_4* %219 = OpVariable Output 
                                Input f32_4* %220 = OpVariable Input 
                                             %222 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %52 = OpAccessChain %21 %23 %46 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %51 %58 
                                        f32_4 %59 = OpLoad %44 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %61 = OpAccessChain %21 %36 %24 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpFMul %60 %62 
                                                      OpStore %9 %63 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %44 
                                        f32_4 %67 = OpVectorShuffle %66 %66 0 0 0 0 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %9 %70 
                               Uniform f32_4* %71 = OpAccessChain %21 %36 %36 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %44 
                                        f32_4 %74 = OpVectorShuffle %73 %73 2 2 2 2 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %9 %77 
                               Uniform f32_4* %83 = OpAccessChain %21 %36 %46 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %44 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                Output f32_4* %90 = OpAccessChain %82 %23 
                                                      OpStore %90 %89 
                                        f32_3 %94 = OpLoad %93 
                               Uniform f32_4* %95 = OpAccessChain %21 %24 %23 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                          f32 %98 = OpDot %94 %97 
                                Private f32* %101 = OpAccessChain %9 %99 
                                                      OpStore %101 %98 
                                       f32_3 %102 = OpLoad %93 
                              Uniform f32_4* %103 = OpAccessChain %21 %24 %24 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                         f32 %106 = OpDot %102 %105 
                                Private f32* %107 = OpAccessChain %9 %78 
                                                      OpStore %107 %106 
                                       f32_3 %108 = OpLoad %93 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %36 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %114 = OpAccessChain %9 %113 
                                                      OpStore %114 %112 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_4 %118 = OpLoad %9 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %117 %119 
                                                      OpStore %115 %120 
                                         f32 %121 = OpLoad %115 
                                         f32 %122 = OpExtInst %1 32 %121 
                                                      OpStore %115 %122 
                                         f32 %123 = OpLoad %115 
                                       f32_3 %124 = OpCompositeConstruct %123 %123 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %9 %129 
                                       f32_4 %132 = OpLoad %9 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                                      OpStore %131 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %21 %23 %24 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %136 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %44 %142 
                              Uniform f32_4* %143 = OpAccessChain %21 %23 %23 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_4 %146 = OpLoad %134 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 0 0 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %44 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFAdd %148 %150 
                                       f32_4 %152 = OpLoad %44 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %44 %153 
                              Uniform f32_4* %154 = OpAccessChain %21 %23 %36 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_4 %157 = OpLoad %134 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %44 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %44 %164 
                                       f32_4 %165 = OpLoad %44 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_4 %167 = OpLoad %44 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %166 %168 
                                                      OpStore %115 %169 
                                         f32 %170 = OpLoad %115 
                                         f32 %171 = OpExtInst %1 32 %170 
                                                      OpStore %115 %171 
                                         f32 %172 = OpLoad %115 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_4 %174 = OpLoad %44 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %44 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %44 %178 
                                       f32_4 %180 = OpLoad %44 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                                      OpStore %179 %181 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 2 0 1 
                                       f32_4 %186 = OpLoad %44 
                                       f32_3 %187 = OpVectorShuffle %186 %186 1 2 0 
                                       f32_3 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 2 0 
                                       f32_4 %191 = OpLoad %44 
                                       f32_3 %192 = OpVectorShuffle %191 %191 2 0 1 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %194 = OpLoad %183 
                                       f32_3 %195 = OpFNegate %194 
                                       f32_3 %196 = OpFAdd %193 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %134 
                                       f32_3 %202 = OpVectorShuffle %201 %201 3 3 3 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %9 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %9 %205 
                                       f32_4 %206 = OpLoad %9 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %207 %209 
                                                      OpStore %115 %210 
                                         f32 %211 = OpLoad %115 
                                         f32 %212 = OpExtInst %1 32 %211 
                                                      OpStore %115 %212 
                                         f32 %214 = OpLoad %115 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFMul %215 %217 
                                                      OpStore %213 %218 
                                       f32_4 %221 = OpLoad %220 
                                                      OpStore %219 %221 
                                 Output f32* %223 = OpAccessChain %82 %23 %78 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFNegate %224 
                                 Output f32* %226 = OpAccessChain %82 %23 %78 
                                                      OpStore %226 %225 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 397
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %178 %228 %263 %268 %275 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 RelaxedPrecision 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 RelaxedPrecision 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 RelaxedPrecision 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 RelaxedPrecision 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 RelaxedPrecision 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 RelaxedPrecision 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 RelaxedPrecision 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 RelaxedPrecision 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %228 Location 228 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %263 Location 263 
                                                      OpDecorate %268 Location 268 
                                                      OpDecorate %275 Location 275 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeStruct %7 %7 %7 %7 %7 %6 %6 %6 %6 %6 %6 %6 %7 %7 %6 %6 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32; f32;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 15 
                                              %20 = OpTypePointer Uniform %6 
                                          i32 %37 = OpConstant 6 
                               Private f32_4* %53 = OpVariable Private 
                                          i32 %54 = OpConstant 0 
                                              %55 = OpTypeInt 32 0 
                                          u32 %56 = OpConstant 1 
                                          i32 %59 = OpConstant 2 
                                          u32 %63 = OpConstant 0 
                                              %64 = OpTypePointer Private %6 
                                          f32 %68 = OpConstant 3.674022E-40 
                               Private f32_4* %71 = OpVariable Private 
                                          i32 %74 = OpConstant 10 
                                          i32 %79 = OpConstant 11 
                                              %88 = OpTypePointer Private %12 
                               Private f32_2* %89 = OpVariable Private 
                                          f32 %92 = OpConstant 3.674022E-40 
                                          f32 %93 = OpConstant 3.674022E-40 
                                        f32_2 %94 = OpConstantComposite %92 %93 
                                          i32 %98 = OpConstant 13 
                                              %99 = OpTypePointer Uniform %7 
                              Private f32_4* %110 = OpVariable Private 
                                             %111 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %112 = OpTypeSampledImage %111 
                                             %113 = OpTypePointer UniformConstant %112 
 UniformConstant read_only Texture2DSampled* %114 = OpVariable UniformConstant 
                                         i32 %118 = OpConstant 14 
                              Private f32_4* %133 = OpVariable Private 
                                         u32 %140 = OpConstant 3 
                                         i32 %143 = OpConstant 7 
                                         f32 %150 = OpConstant 3.674022E-40 
                                             %153 = OpTypeVector %6 3 
                                             %154 = OpTypePointer Private %153 
                              Private f32_3* %155 = OpVariable Private 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_3 %159 = OpConstantComposite %158 %158 %158 
                                         f32 %174 = OpConstant 3.674022E-40 
                                       f32_3 %175 = OpConstantComposite %174 %174 %174 
                                Private f32* %177 = OpVariable Private 
                                Input f32_4* %178 = OpVariable Input 
                                             %179 = OpTypePointer Input %6 
                              Private f32_3* %189 = OpVariable Private 
                                         i32 %205 = OpConstant 12 
                                         i32 %213 = OpConstant 8 
                                         i32 %217 = OpConstant 9 
                                             %227 = OpTypePointer Output %7 
                               Output f32_4* %228 = OpVariable Output 
                                             %230 = OpTypePointer Output %6 
                                             %244 = OpTypeBool 
                                             %245 = OpTypePointer Private %244 
                               Private bool* %246 = OpVariable Private 
                                         i32 %251 = OpConstant 1 
                                         i32 %253 = OpConstant -1 
                              Private f32_3* %259 = OpVariable Private 
                                             %262 = OpTypePointer Input %153 
                                Input f32_3* %263 = OpVariable Input 
                                Input f32_3* %268 = OpVariable Input 
                                Input f32_3* %275 = OpVariable Input 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %314 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                       f32_3 %316 = OpConstantComposite %313 %314 %315 
                                         i32 %327 = OpConstant 4 
                                Private f32* %333 = OpVariable Private 
                                         u32 %336 = OpConstant 2 
                                         i32 %343 = OpConstant 5 
                              Private f32_3* %354 = OpVariable Private 
                                         i32 %355 = OpConstant 3 
                                         f32 %378 = OpConstant 3.674022E-40 
                                       f32_3 %379 = OpConstantComposite %378 %378 %378 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 2 2 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                 Uniform f32* %23 = OpAccessChain %17 %19 
                                          f32 %24 = OpLoad %23 
                                        f32_2 %25 = OpCompositeConstruct %22 %24 
                                          f32 %26 = OpCompositeExtract %25 0 
                                          f32 %27 = OpCompositeExtract %25 1 
                                        f32_2 %28 = OpCompositeConstruct %26 %27 
                                        f32_2 %29 = OpFAdd %14 %28 
                                        f32_4 %30 = OpLoad %9 
                                        f32_4 %31 = OpVectorShuffle %30 %29 0 4 2 5 
                                                      OpStore %9 %31 
                                        f32_4 %32 = OpLoad %11 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 0 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpVectorShuffle %34 %33 4 1 5 3 
                                                      OpStore %9 %35 
                                        f32_4 %36 = OpLoad %9 
                                 Uniform f32* %38 = OpAccessChain %17 %37 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %17 %37 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %17 %37 
                                          f32 %43 = OpLoad %42 
                                 Uniform f32* %44 = OpAccessChain %17 %37 
                                          f32 %45 = OpLoad %44 
                                        f32_4 %46 = OpCompositeConstruct %39 %41 %43 %45 
                                          f32 %47 = OpCompositeExtract %46 0 
                                          f32 %48 = OpCompositeExtract %46 1 
                                          f32 %49 = OpCompositeExtract %46 2 
                                          f32 %50 = OpCompositeExtract %46 3 
                                        f32_4 %51 = OpCompositeConstruct %47 %48 %49 %50 
                                        f32_4 %52 = OpFDiv %36 %51 
                                                      OpStore %9 %52 
                                 Uniform f32* %57 = OpAccessChain %17 %54 %56 
                                          f32 %58 = OpLoad %57 
                                 Uniform f32* %60 = OpAccessChain %17 %59 %56 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %58 %61 
                                 Private f32* %65 = OpAccessChain %53 %63 
                                                      OpStore %65 %62 
                                 Private f32* %66 = OpAccessChain %53 %63 
                                          f32 %67 = OpLoad %66 
                                          f32 %69 = OpFMul %67 %68 
                                 Private f32* %70 = OpAccessChain %53 %63 
                                                      OpStore %70 %69 
                                        f32_4 %72 = OpLoad %53 
                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
                                 Uniform f32* %75 = OpAccessChain %17 %74 
                                          f32 %76 = OpLoad %75 
                                 Uniform f32* %77 = OpAccessChain %17 %74 
                                          f32 %78 = OpLoad %77 
                                 Uniform f32* %80 = OpAccessChain %17 %79 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %17 %79 
                                          f32 %83 = OpLoad %82 
                                        f32_4 %84 = OpCompositeConstruct %76 %78 %81 %83 
                                        f32_4 %85 = OpFMul %73 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %71 %87 
                                        f32_4 %90 = OpLoad %71 
                                        f32_2 %91 = OpVectorShuffle %90 %90 2 3 
                                        f32_2 %95 = OpFAdd %91 %94 
                                                      OpStore %89 %95 
                                        f32_4 %96 = OpLoad %71 
                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %98 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %97 %102 
                              Uniform f32_4* %104 = OpAccessChain %17 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %53 %109 
                  read_only Texture2DSampled %115 = OpLoad %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                Uniform f32* %119 = OpAccessChain %17 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_4 %121 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                                      OpStore %110 %121 
                                       f32_2 %122 = OpLoad %89 
                              Uniform f32_4* %123 = OpAccessChain %17 %98 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_2 %126 = OpFMul %122 %125 
                              Uniform f32_4* %127 = OpAccessChain %17 %98 
                                       f32_4 %128 = OpLoad %127 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                       f32_4 %131 = OpLoad %53 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore %53 %132 
                  read_only Texture2DSampled %134 = OpLoad %114 
                                       f32_4 %135 = OpLoad %53 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                Uniform f32* %137 = OpAccessChain %17 %118 
                                         f32 %138 = OpLoad %137 
                                       f32_4 %139 = OpImageSampleExplicitLod %134 %136 Lod %7 
                                                      OpStore %133 %139 
                                Private f32* %141 = OpAccessChain %110 %140 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %144 = OpAccessChain %17 %143 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpFAdd %142 %145 
                                Private f32* %147 = OpAccessChain %89 %63 
                                                      OpStore %147 %146 
                                Private f32* %148 = OpAccessChain %89 %63 
                                         f32 %149 = OpLoad %148 
                                         f32 %151 = OpExtInst %1 43 %149 %92 %150 
                                Private f32* %152 = OpAccessChain %89 %63 
                                                      OpStore %152 %151 
                                       f32_4 %156 = OpLoad %110 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %160 = OpFMul %157 %159 
                                Uniform f32* %161 = OpAccessChain %17 %143 
                                         f32 %162 = OpLoad %161 
                                Uniform f32* %163 = OpAccessChain %17 %143 
                                         f32 %164 = OpLoad %163 
                                Uniform f32* %165 = OpAccessChain %17 %143 
                                         f32 %166 = OpLoad %165 
                                       f32_3 %167 = OpCompositeConstruct %162 %164 %166 
                                         f32 %168 = OpCompositeExtract %167 0 
                                         f32 %169 = OpCompositeExtract %167 1 
                                         f32 %170 = OpCompositeExtract %167 2 
                                       f32_3 %171 = OpCompositeConstruct %168 %169 %170 
                                       f32_3 %172 = OpFAdd %160 %171 
                                                      OpStore %155 %172 
                                       f32_3 %173 = OpLoad %155 
                                       f32_3 %176 = OpFAdd %173 %175 
                                                      OpStore %155 %176 
                                  Input f32* %180 = OpAccessChain %178 %140 
                                         f32 %181 = OpLoad %180 
                                Private f32* %182 = OpAccessChain %89 %63 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFMul %181 %183 
                                Private f32* %185 = OpAccessChain %133 %140 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                         f32 %188 = OpFAdd %184 %187 
                                                      OpStore %177 %188 
                                       f32_4 %190 = OpLoad %133 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %191 %159 
                                       f32_3 %193 = OpFAdd %192 %175 
                                                      OpStore %189 %193 
                                       f32_4 %194 = OpLoad %178 
                                       f32_3 %195 = OpVectorShuffle %194 %194 3 3 3 
                                       f32_3 %196 = OpLoad %155 
                                       f32_3 %197 = OpFMul %195 %196 
                                       f32_3 %198 = OpLoad %189 
                                       f32_3 %199 = OpFNegate %198 
                                       f32_3 %200 = OpFAdd %197 %199 
                                       f32_4 %201 = OpLoad %53 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %53 %202 
                                       f32_4 %203 = OpLoad %53 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                              Uniform f32_4* %206 = OpAccessChain %17 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %204 %208 
                                       f32_4 %210 = OpLoad %53 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %53 %211 
                                         f32 %212 = OpLoad %177 
                                Uniform f32* %214 = OpAccessChain %17 %213 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFMul %212 %215 
                                Uniform f32* %218 = OpAccessChain %17 %217 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFNegate %219 
                                         f32 %221 = OpFAdd %216 %220 
                                Private f32* %222 = OpAccessChain %89 %63 
                                                      OpStore %222 %221 
                                         f32 %223 = OpLoad %177 
                                Uniform f32* %224 = OpAccessChain %17 %213 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                                      OpStore %177 %226 
                                         f32 %229 = OpLoad %177 
                                 Output f32* %231 = OpAccessChain %228 %140 
                                                      OpStore %231 %229 
                                Private f32* %232 = OpAccessChain %89 %63 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpExtInst %1 9 %233 
                                Private f32* %235 = OpAccessChain %89 %63 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %89 %63 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 43 %237 %92 %150 
                                Private f32* %239 = OpAccessChain %89 %63 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %89 %63 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFAdd %241 %174 
                                Private f32* %243 = OpAccessChain %89 %63 
                                                      OpStore %243 %242 
                                Private f32* %247 = OpAccessChain %89 %63 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdLessThan %248 %92 
                                                      OpStore %246 %249 
                                        bool %250 = OpLoad %246 
                                         i32 %252 = OpSelect %250 %251 %54 
                                         i32 %254 = OpIMul %252 %253 
                                        bool %255 = OpINotEqual %254 %54 
                                                      OpSelectionMerge %257 None 
                                                      OpBranchConditional %255 %256 %257 
                                             %256 = OpLabel 
                                                      OpKill
                                             %257 = OpLabel 
                                       f32_4 %260 = OpLoad %53 
                                       f32_3 %261 = OpVectorShuffle %260 %260 1 1 1 
                                       f32_3 %264 = OpLoad %263 
                                       f32_3 %265 = OpFMul %261 %264 
                                                      OpStore %259 %265 
                                       f32_4 %266 = OpLoad %53 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
                                       f32_3 %269 = OpLoad %268 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %259 
                                       f32_3 %272 = OpFAdd %270 %271 
                                       f32_4 %273 = OpLoad %53 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 6 
                                                      OpStore %53 %274 
                                       f32_3 %276 = OpLoad %275 
                                       f32_3 %277 = OpLoad %275 
                                         f32 %278 = OpDot %276 %277 
                                Private f32* %279 = OpAccessChain %259 %63 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %259 %63 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 32 %281 
                                Private f32* %283 = OpAccessChain %259 %63 
                                                      OpStore %283 %282 
                                       f32_3 %284 = OpLoad %259 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpLoad %275 
                                       f32_3 %287 = OpFMul %285 %286 
                                                      OpStore %259 %287 
                                       f32_4 %288 = OpLoad %53 
                                       f32_3 %289 = OpVectorShuffle %288 %288 2 2 2 
                                       f32_3 %290 = OpLoad %259 
                                       f32_3 %291 = OpFMul %289 %290 
                                       f32_4 %292 = OpLoad %53 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 3 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %53 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %53 %296 
                                       f32_4 %297 = OpLoad %53 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_4 %299 = OpLoad %53 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                         f32 %301 = OpDot %298 %300 
                                                      OpStore %177 %301 
                                         f32 %302 = OpLoad %177 
                                         f32 %303 = OpExtInst %1 32 %302 
                                                      OpStore %177 %303 
                                         f32 %304 = OpLoad %177 
                                       f32_3 %305 = OpCompositeConstruct %304 %304 %304 
                                       f32_4 %306 = OpLoad %53 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %53 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %53 %310 
                                       f32_4 %311 = OpLoad %53 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                         f32 %317 = OpDot %312 %316 
                                Private f32* %318 = OpAccessChain %53 %63 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %53 %63 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %150 
                                Private f32* %323 = OpAccessChain %53 %63 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %53 %63 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFNegate %325 
                                Uniform f32* %328 = OpAccessChain %17 %327 %140 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFMul %326 %329 
                                         f32 %331 = OpFAdd %330 %150 
                                Private f32* %332 = OpAccessChain %53 %63 
                                                      OpStore %332 %331 
                                Uniform f32* %334 = OpAccessChain %17 %205 %56 
                                         f32 %335 = OpLoad %334 
                                  Input f32* %337 = OpAccessChain %178 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFMul %335 %338 
                                         f32 %340 = OpFAdd %339 %150 
                                                      OpStore %333 %340 
                                         f32 %341 = OpLoad %333 
                                         f32 %342 = OpFMul %341 %93 
                                Uniform f32* %344 = OpAccessChain %17 %343 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFAdd %342 %345 
                                                      OpStore %333 %346 
                                         f32 %347 = OpLoad %333 
                                         f32 %348 = OpExtInst %1 43 %347 %92 %150 
                                                      OpStore %333 %348 
                                         f32 %349 = OpLoad %333 
                                Private f32* %350 = OpAccessChain %53 %63 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                Private f32* %353 = OpAccessChain %53 %63 
                                                      OpStore %353 %352 
                              Uniform f32_4* %356 = OpAccessChain %17 %355 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                              Uniform f32_4* %359 = OpAccessChain %17 %327 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFNegate %361 
                                       f32_3 %363 = OpFAdd %358 %362 
                                                      OpStore %354 %363 
                                       f32_4 %364 = OpLoad %53 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 0 0 
                                       f32_3 %366 = OpLoad %354 
                                       f32_3 %367 = OpFMul %365 %366 
                              Uniform f32_4* %368 = OpAccessChain %17 %327 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFAdd %367 %370 
                                       f32_4 %372 = OpLoad %53 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %53 %373 
                              Uniform f32_4* %374 = OpAccessChain %17 %251 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFNegate %376 
                                       f32_3 %380 = OpFAdd %377 %379 
                                                      OpStore %259 %380 
                              Uniform f32_4* %381 = OpAccessChain %17 %355 
                                       f32_4 %382 = OpLoad %381 
                                       f32_3 %383 = OpVectorShuffle %382 %382 3 3 3 
                                       f32_3 %384 = OpLoad %259 
                                       f32_3 %385 = OpFMul %383 %384 
                              Uniform f32_4* %386 = OpAccessChain %17 %251 
                                       f32_4 %387 = OpLoad %386 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFAdd %385 %388 
                                                      OpStore %259 %389 
                                       f32_4 %390 = OpLoad %53 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpLoad %259 
                                       f32_3 %393 = OpFMul %391 %392 
                                       f32_4 %394 = OpLoad %228 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
                                                      OpStore %228 %395 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD_DELTA"
  LOD 200
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  Blend One One, One One
  ZWrite Off
  GpuProgramID 89416
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 _TimeEditor;
uniform 	vec4 _BaseColor;
uniform 	vec4 _Shading;
uniform 	float _DepthIntensity;
uniform 	float _Tiling;
uniform 	float _Density;
uniform 	float _Alpha;
uniform 	float _AlphaCut;
uniform 	float _Speed;
uniform 	float _SpeedSecondLayer;
uniform 	vec4 _CloudNormalsDirection;
uniform 	vec4 _PerlinNormalMap_ST;
uniform 	float _MipLevel;
uniform  sampler2D _PerlinNormalMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec3 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.x = _Time.y + _TimeEditor.y;
    u_xlat0.x = u_xlat0.x * 0.00100000005;
    u_xlat1 = vs_TEXCOORD0.xzxz / vec4(vec4(_Tiling, _Tiling, _Tiling, _Tiling));
    u_xlat0 = u_xlat0.xxxx * vec4(_Speed, _Speed, _SpeedSecondLayer, _SpeedSecondLayer) + u_xlat1;
    u_xlat6.xy = u_xlat0.zw + vec2(0.0, 0.5);
    u_xlat0.xy = u_xlat0.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat0.xy = u_xlat6.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_0 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat10 = u_xlat10_1.w + _Density;
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(vec3(_Density, _Density, _Density));
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat9 = vs_COLOR0.w * u_xlat10 + (-u_xlat10_0.w);
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + (-u_xlat16_0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * _CloudNormalsDirection.xyz;
    u_xlat1.x = u_xlat9 * _Alpha + (-_AlphaCut);
    u_xlat9 = u_xlat9 * _Alpha;
    u_xlat1.x = ceil(u_xlat1.x);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x + -1.0;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz + u_xlat1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = (-u_xlat0.x) * _Shading.w + 1.0;
    u_xlat3 = _CloudNormalsDirection.y * vs_COLOR0.z + 1.0;
    u_xlat3 = u_xlat3 * 0.5 + _DepthIntensity;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat0.x = u_xlat3 * u_xlat0.x;
    u_xlat1.xyz = _BaseColor.xyz + (-_Shading.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + _Shading.xyz;
    u_xlat1.xyz = (-_LightColor0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = _BaseColor.www * u_xlat1.xyz + _LightColor0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 271
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %82 %92 %96 %134 %137 %182 %216 %222 %223 %255 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate %92 Location 92 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %182 Location 182 
                                                      OpDecorate %216 Location 216 
                                                      OpDecorate %222 Location 222 
                                                      OpDecorate %223 Location 223 
                                                      OpDecorate %255 Location 255 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %16 %17 %18 %19 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4];}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 0 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %58 = OpVariable Private 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %90 = OpTypePointer Output %7 
                                Output f32_4* %92 = OpVariable Output 
                                              %94 = OpTypeVector %6 3 
                                              %95 = OpTypePointer Input %94 
                                 Input f32_3* %96 = OpVariable Input 
                                         u32 %102 = OpConstant 0 
                                             %103 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 2 
                                Private f32* %118 = OpVariable Private 
                                             %133 = OpTypePointer Output %94 
                               Output f32_3* %134 = OpVariable Output 
                                Input f32_4* %137 = OpVariable Input 
                               Output f32_3* %182 = OpVariable Output 
                                             %185 = OpTypePointer Private %94 
                              Private f32_3* %186 = OpVariable Private 
                               Output f32_3* %216 = OpVariable Output 
                               Output f32_4* %222 = OpVariable Output 
                                Input f32_4* %223 = OpVariable Input 
                               Output f32_3* %255 = OpVariable Output 
                                             %265 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %51 = OpAccessChain %22 %24 %47 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %11 
                                        f32_4 %54 = OpVectorShuffle %53 %53 3 3 3 3 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %9 %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %61 = OpAccessChain %22 %37 %25 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpFMul %60 %62 
                                                      OpStore %58 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %37 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 0 0 0 0 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %58 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %58 %70 
                               Uniform f32_4* %71 = OpAccessChain %22 %37 %37 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %45 
                                        f32_4 %74 = OpVectorShuffle %73 %73 2 2 2 2 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %58 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %58 %77 
                               Uniform f32_4* %83 = OpAccessChain %22 %37 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %58 
                                        f32_4 %89 = OpFAdd %87 %88 
                                Output f32_4* %91 = OpAccessChain %82 %24 
                                                      OpStore %91 %89 
                                        f32_4 %93 = OpLoad %9 
                                                      OpStore %92 %93 
                                        f32_3 %97 = OpLoad %96 
                               Uniform f32_4* %98 = OpAccessChain %22 %25 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                         f32 %101 = OpDot %97 %100 
                                Private f32* %104 = OpAccessChain %45 %102 
                                                      OpStore %104 %101 
                                       f32_3 %105 = OpLoad %96 
                              Uniform f32_4* %106 = OpAccessChain %22 %25 %25 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %105 %108 
                                Private f32* %110 = OpAccessChain %45 %78 
                                                      OpStore %110 %109 
                                       f32_3 %111 = OpLoad %96 
                              Uniform f32_4* %112 = OpAccessChain %22 %25 %37 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %117 = OpAccessChain %45 %116 
                                                      OpStore %117 %115 
                                       f32_4 %119 = OpLoad %45 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_4 %121 = OpLoad %45 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %120 %122 
                                                      OpStore %118 %123 
                                         f32 %124 = OpLoad %118 
                                         f32 %125 = OpExtInst %1 32 %124 
                                                      OpStore %118 %125 
                                         f32 %126 = OpLoad %118 
                                       f32_3 %127 = OpCompositeConstruct %126 %126 %126 
                                       f32_4 %128 = OpLoad %45 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %45 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 6 3 
                                                      OpStore %45 %132 
                                       f32_4 %135 = OpLoad %45 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                                      OpStore %134 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 1 1 1 
                              Uniform f32_4* %140 = OpAccessChain %22 %24 %25 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %139 %142 
                                       f32_4 %144 = OpLoad %58 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 6 3 
                                                      OpStore %58 %145 
                              Uniform f32_4* %146 = OpAccessChain %22 %24 %24 
                                       f32_4 %147 = OpLoad %146 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_4 %149 = OpLoad %137 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 0 0 
                                       f32_3 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %58 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFAdd %151 %153 
                                       f32_4 %155 = OpLoad %58 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %58 %156 
                              Uniform f32_4* %157 = OpAccessChain %22 %24 %37 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %137 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %58 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                       f32_3 %165 = OpFAdd %162 %164 
                                       f32_4 %166 = OpLoad %58 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
                                                      OpStore %58 %167 
                                       f32_4 %168 = OpLoad %58 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_4 %170 = OpLoad %58 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %169 %171 
                                                      OpStore %118 %172 
                                         f32 %173 = OpLoad %118 
                                         f32 %174 = OpExtInst %1 32 %173 
                                                      OpStore %118 %174 
                                         f32 %175 = OpLoad %118 
                                       f32_3 %176 = OpCompositeConstruct %175 %175 %175 
                                       f32_4 %177 = OpLoad %58 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFMul %176 %178 
                                       f32_4 %180 = OpLoad %58 
                                       f32_4 %181 = OpVectorShuffle %180 %179 4 5 6 3 
                                                      OpStore %58 %181 
                                       f32_4 %183 = OpLoad %58 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                                      OpStore %182 %184 
                                       f32_4 %187 = OpLoad %45 
                                       f32_3 %188 = OpVectorShuffle %187 %187 2 0 1 
                                       f32_4 %189 = OpLoad %58 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 2 0 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                       f32_4 %192 = OpLoad %45 
                                       f32_3 %193 = OpVectorShuffle %192 %192 1 2 0 
                                       f32_4 %194 = OpLoad %58 
                                       f32_3 %195 = OpVectorShuffle %194 %194 2 0 1 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_3 %197 = OpLoad %186 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %196 %198 
                                       f32_4 %200 = OpLoad %45 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
                                                      OpStore %45 %201 
                                       f32_4 %202 = OpLoad %45 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                       f32_4 %204 = OpLoad %137 
                                       f32_3 %205 = OpVectorShuffle %204 %204 3 3 3 
                                       f32_3 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %45 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %45 %208 
                                       f32_4 %209 = OpLoad %45 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_4 %211 = OpLoad %45 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                         f32 %213 = OpDot %210 %212 
                                                      OpStore %118 %213 
                                         f32 %214 = OpLoad %118 
                                         f32 %215 = OpExtInst %1 32 %214 
                                                      OpStore %118 %215 
                                         f32 %217 = OpLoad %118 
                                       f32_3 %218 = OpCompositeConstruct %217 %217 %217 
                                       f32_4 %219 = OpLoad %45 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpFMul %218 %220 
                                                      OpStore %216 %221 
                                       f32_4 %224 = OpLoad %223 
                                                      OpStore %222 %224 
                                       f32_4 %225 = OpLoad %9 
                                       f32_3 %226 = OpVectorShuffle %225 %225 1 1 1 
                              Uniform f32_4* %227 = OpAccessChain %22 %47 %25 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFMul %226 %229 
                                       f32_4 %231 = OpLoad %45 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %45 %232 
                              Uniform f32_4* %233 = OpAccessChain %22 %47 %24 
                                       f32_4 %234 = OpLoad %233 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %235 %237 
                                       f32_4 %239 = OpLoad %45 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFAdd %238 %240 
                                       f32_4 %242 = OpLoad %45 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %45 %243 
                              Uniform f32_4* %244 = OpAccessChain %22 %47 %37 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_4 %247 = OpLoad %9 
                                       f32_3 %248 = OpVectorShuffle %247 %247 2 2 2 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %45 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %9 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %9 %254 
                              Uniform f32_4* %256 = OpAccessChain %22 %47 %47 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 3 3 3 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_4 %262 = OpLoad %9 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_3 %264 = OpFAdd %261 %263 
                                                      OpStore %255 %264 
                                 Output f32* %266 = OpAccessChain %82 %24 %78 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFNegate %267 
                                 Output f32* %269 = OpAccessChain %82 %24 %78 
                                                      OpStore %269 %268 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 402
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %30 %158 %238 %243 %248 %391 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpMemberDecorate %10 0 Offset 10 
                                                      OpMemberDecorate %10 1 Offset 10 
                                                      OpMemberDecorate %10 2 Offset 10 
                                                      OpMemberDecorate %10 3 Offset 10 
                                                      OpMemberDecorate %10 4 RelaxedPrecision 
                                                      OpMemberDecorate %10 4 Offset 10 
                                                      OpMemberDecorate %10 5 RelaxedPrecision 
                                                      OpMemberDecorate %10 5 Offset 10 
                                                      OpMemberDecorate %10 6 RelaxedPrecision 
                                                      OpMemberDecorate %10 6 Offset 10 
                                                      OpMemberDecorate %10 7 RelaxedPrecision 
                                                      OpMemberDecorate %10 7 Offset 10 
                                                      OpMemberDecorate %10 8 RelaxedPrecision 
                                                      OpMemberDecorate %10 8 Offset 10 
                                                      OpMemberDecorate %10 9 RelaxedPrecision 
                                                      OpMemberDecorate %10 9 Offset 10 
                                                      OpMemberDecorate %10 10 RelaxedPrecision 
                                                      OpMemberDecorate %10 10 Offset 10 
                                                      OpMemberDecorate %10 11 RelaxedPrecision 
                                                      OpMemberDecorate %10 11 Offset 10 
                                                      OpMemberDecorate %10 12 RelaxedPrecision 
                                                      OpMemberDecorate %10 12 Offset 10 
                                                      OpMemberDecorate %10 13 RelaxedPrecision 
                                                      OpMemberDecorate %10 13 Offset 10 
                                                      OpMemberDecorate %10 14 Offset 10 
                                                      OpMemberDecorate %10 15 Offset 10 
                                                      OpDecorate %10 Block 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %93 DescriptorSet 93 
                                                      OpDecorate %93 Binding 93 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %238 Location 238 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate %248 Location 248 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %391 Location 391 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypePointer Private %6 
                                  Private f32* %8 = OpVariable Private 
                                               %9 = OpTypeVector %6 4 
                                              %10 = OpTypeStruct %9 %9 %9 %9 %9 %9 %6 %6 %6 %6 %6 %6 %6 %9 %9 %6 
                                              %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32;}* %12 = OpVariable Uniform 
                                              %13 = OpTypeInt 32 1 
                                          i32 %14 = OpConstant 0 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 1 
                                              %17 = OpTypePointer Uniform %6 
                                          i32 %20 = OpConstant 3 
                                          f32 %25 = OpConstant 3.674022E-40 
                                              %27 = OpTypePointer Private %9 
                               Private f32_4* %28 = OpVariable Private 
                                              %29 = OpTypePointer Input %9 
                                 Input f32_4* %30 = OpVariable Input 
                                          i32 %33 = OpConstant 7 
                               Private f32_4* %49 = OpVariable Private 
                                          i32 %52 = OpConstant 11 
                                          i32 %57 = OpConstant 12 
                                              %66 = OpTypeVector %6 2 
                                              %67 = OpTypePointer Private %66 
                               Private f32_2* %68 = OpVariable Private 
                                          f32 %71 = OpConstant 3.674022E-40 
                                          f32 %72 = OpConstant 3.674022E-40 
                                        f32_2 %73 = OpConstantComposite %71 %72 
                                          i32 %77 = OpConstant 14 
                                              %78 = OpTypePointer Uniform %9 
                               Private f32_4* %89 = OpVariable Private 
                                              %90 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %91 = OpTypeSampledImage %90 
                                              %92 = OpTypePointer UniformConstant %91 
  UniformConstant read_only Texture2DSampled* %93 = OpVariable UniformConstant 
                                          i32 %97 = OpConstant 15 
                              Private f32_4* %112 = OpVariable Private 
                                         u32 %119 = OpConstant 3 
                                         i32 %122 = OpConstant 8 
                                         u32 %126 = OpConstant 0 
                                         f32 %130 = OpConstant 3.674022E-40 
                                             %133 = OpTypeVector %6 3 
                                             %134 = OpTypePointer Private %133 
                              Private f32_3* %135 = OpVariable Private 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_3 %139 = OpConstantComposite %138 %138 %138 
                                         f32 %154 = OpConstant 3.674022E-40 
                                       f32_3 %155 = OpConstantComposite %154 %154 %154 
                                Private f32* %157 = OpVariable Private 
                                Input f32_4* %158 = OpVariable Input 
                                             %159 = OpTypePointer Input %6 
                              Private f32_3* %169 = OpVariable Private 
                                         i32 %185 = OpConstant 13 
                                         i32 %193 = OpConstant 9 
                                         i32 %197 = OpConstant 10 
                                             %219 = OpTypeBool 
                                             %220 = OpTypePointer Private %219 
                               Private bool* %221 = OpVariable Private 
                                         i32 %226 = OpConstant 1 
                                         i32 %228 = OpConstant -1 
                              Private f32_3* %234 = OpVariable Private 
                                             %237 = OpTypePointer Input %133 
                                Input f32_3* %238 = OpVariable Input 
                                Input f32_3* %243 = OpVariable Input 
                                Input f32_3* %248 = OpVariable Input 
                              Private f32_3* %257 = OpVariable Private 
                                Private f32* %298 = OpVariable Private 
                                         i32 %321 = OpConstant 5 
                                Private f32* %327 = OpVariable Private 
                                         u32 %330 = OpConstant 2 
                                         i32 %337 = OpConstant 6 
                              Private f32_3* %348 = OpVariable Private 
                                         i32 %349 = OpConstant 4 
                                         i32 %368 = OpConstant 2 
                                       f32_3 %373 = OpConstantComposite %130 %130 %130 
                                             %390 = OpTypePointer Output %9 
                               Output f32_4* %391 = OpVariable Output 
                                             %399 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %18 = OpAccessChain %12 %14 %16 
                                          f32 %19 = OpLoad %18 
                                 Uniform f32* %21 = OpAccessChain %12 %20 %16 
                                          f32 %22 = OpLoad %21 
                                          f32 %23 = OpFAdd %19 %22 
                                                      OpStore %8 %23 
                                          f32 %24 = OpLoad %8 
                                          f32 %26 = OpFMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 2 0 2 
                                 Uniform f32* %34 = OpAccessChain %12 %33 
                                          f32 %35 = OpLoad %34 
                                 Uniform f32* %36 = OpAccessChain %12 %33 
                                          f32 %37 = OpLoad %36 
                                 Uniform f32* %38 = OpAccessChain %12 %33 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %12 %33 
                                          f32 %41 = OpLoad %40 
                                        f32_4 %42 = OpCompositeConstruct %35 %37 %39 %41 
                                          f32 %43 = OpCompositeExtract %42 0 
                                          f32 %44 = OpCompositeExtract %42 1 
                                          f32 %45 = OpCompositeExtract %42 2 
                                          f32 %46 = OpCompositeExtract %42 3 
                                        f32_4 %47 = OpCompositeConstruct %43 %44 %45 %46 
                                        f32_4 %48 = OpFDiv %32 %47 
                                                      OpStore %28 %48 
                                          f32 %50 = OpLoad %8 
                                        f32_4 %51 = OpCompositeConstruct %50 %50 %50 %50 
                                 Uniform f32* %53 = OpAccessChain %12 %52 
                                          f32 %54 = OpLoad %53 
                                 Uniform f32* %55 = OpAccessChain %12 %52 
                                          f32 %56 = OpLoad %55 
                                 Uniform f32* %58 = OpAccessChain %12 %57 
                                          f32 %59 = OpLoad %58 
                                 Uniform f32* %60 = OpAccessChain %12 %57 
                                          f32 %61 = OpLoad %60 
                                        f32_4 %62 = OpCompositeConstruct %54 %56 %59 %61 
                                        f32_4 %63 = OpFMul %51 %62 
                                        f32_4 %64 = OpLoad %28 
                                        f32_4 %65 = OpFAdd %63 %64 
                                                      OpStore %49 %65 
                                        f32_4 %69 = OpLoad %49 
                                        f32_2 %70 = OpVectorShuffle %69 %69 2 3 
                                        f32_2 %74 = OpFAdd %70 %73 
                                                      OpStore %68 %74 
                                        f32_4 %75 = OpLoad %49 
                                        f32_2 %76 = OpVectorShuffle %75 %75 0 1 
                               Uniform f32_4* %79 = OpAccessChain %12 %77 
                                        f32_4 %80 = OpLoad %79 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpFMul %76 %81 
                               Uniform f32_4* %83 = OpAccessChain %12 %77 
                                        f32_4 %84 = OpLoad %83 
                                        f32_2 %85 = OpVectorShuffle %84 %84 2 3 
                                        f32_2 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %28 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 2 3 
                                                      OpStore %28 %88 
                   read_only Texture2DSampled %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %28 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                                 Uniform f32* %98 = OpAccessChain %12 %97 
                                          f32 %99 = OpLoad %98 
                                       f32_4 %100 = OpImageSampleExplicitLod %94 %96 Lod %9 
                                                      OpStore %89 %100 
                                       f32_2 %101 = OpLoad %68 
                              Uniform f32_4* %102 = OpAccessChain %12 %77 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %101 %104 
                              Uniform f32_4* %106 = OpAccessChain %12 %77 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                       f32_4 %110 = OpLoad %28 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 3 
                                                      OpStore %28 %111 
                  read_only Texture2DSampled %113 = OpLoad %93 
                                       f32_4 %114 = OpLoad %28 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                                Uniform f32* %116 = OpAccessChain %12 %97 
                                         f32 %117 = OpLoad %116 
                                       f32_4 %118 = OpImageSampleExplicitLod %113 %115 Lod %9 
                                                      OpStore %112 %118 
                                Private f32* %120 = OpAccessChain %89 %119 
                                         f32 %121 = OpLoad %120 
                                Uniform f32* %123 = OpAccessChain %12 %122 
                                         f32 %124 = OpLoad %123 
                                         f32 %125 = OpFAdd %121 %124 
                                Private f32* %127 = OpAccessChain %68 %126 
                                                      OpStore %127 %125 
                                Private f32* %128 = OpAccessChain %68 %126 
                                         f32 %129 = OpLoad %128 
                                         f32 %131 = OpExtInst %1 43 %129 %71 %130 
                                Private f32* %132 = OpAccessChain %68 %126 
                                                      OpStore %132 %131 
                                       f32_4 %136 = OpLoad %89 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %140 = OpFMul %137 %139 
                                Uniform f32* %141 = OpAccessChain %12 %122 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %143 = OpAccessChain %12 %122 
                                         f32 %144 = OpLoad %143 
                                Uniform f32* %145 = OpAccessChain %12 %122 
                                         f32 %146 = OpLoad %145 
                                       f32_3 %147 = OpCompositeConstruct %142 %144 %146 
                                         f32 %148 = OpCompositeExtract %147 0 
                                         f32 %149 = OpCompositeExtract %147 1 
                                         f32 %150 = OpCompositeExtract %147 2 
                                       f32_3 %151 = OpCompositeConstruct %148 %149 %150 
                                       f32_3 %152 = OpFAdd %140 %151 
                                                      OpStore %135 %152 
                                       f32_3 %153 = OpLoad %135 
                                       f32_3 %156 = OpFAdd %153 %155 
                                                      OpStore %135 %156 
                                  Input f32* %160 = OpAccessChain %158 %119 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %68 %126 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                Private f32* %165 = OpAccessChain %112 %119 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFNegate %166 
                                         f32 %168 = OpFAdd %164 %167 
                                                      OpStore %157 %168 
                                       f32_4 %170 = OpLoad %112 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFMul %171 %139 
                                       f32_3 %173 = OpFAdd %172 %155 
                                                      OpStore %169 %173 
                                       f32_4 %174 = OpLoad %158 
                                       f32_3 %175 = OpVectorShuffle %174 %174 3 3 3 
                                       f32_3 %176 = OpLoad %135 
                                       f32_3 %177 = OpFMul %175 %176 
                                       f32_3 %178 = OpLoad %169 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %177 %179 
                                       f32_4 %181 = OpLoad %28 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %28 %182 
                                       f32_4 %183 = OpLoad %28 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                              Uniform f32_4* %186 = OpAccessChain %12 %185 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFMul %184 %188 
                                       f32_4 %190 = OpLoad %28 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %28 %191 
                                         f32 %192 = OpLoad %157 
                                Uniform f32* %194 = OpAccessChain %12 %193 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFMul %192 %195 
                                Uniform f32* %198 = OpAccessChain %12 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %196 %200 
                                Private f32* %202 = OpAccessChain %68 %126 
                                                      OpStore %202 %201 
                                         f32 %203 = OpLoad %157 
                                Uniform f32* %204 = OpAccessChain %12 %193 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %203 %205 
                                                      OpStore %157 %206 
                                Private f32* %207 = OpAccessChain %68 %126 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpExtInst %1 9 %208 
                                Private f32* %210 = OpAccessChain %68 %126 
                                                      OpStore %210 %209 
                                Private f32* %211 = OpAccessChain %68 %126 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpExtInst %1 43 %212 %71 %130 
                                Private f32* %214 = OpAccessChain %68 %126 
                                                      OpStore %214 %213 
                                Private f32* %215 = OpAccessChain %68 %126 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFAdd %216 %154 
                                Private f32* %218 = OpAccessChain %68 %126 
                                                      OpStore %218 %217 
                                Private f32* %222 = OpAccessChain %68 %126 
                                         f32 %223 = OpLoad %222 
                                        bool %224 = OpFOrdLessThan %223 %71 
                                                      OpStore %221 %224 
                                        bool %225 = OpLoad %221 
                                         i32 %227 = OpSelect %225 %226 %14 
                                         i32 %229 = OpIMul %227 %228 
                                        bool %230 = OpINotEqual %229 %14 
                                                      OpSelectionMerge %232 None 
                                                      OpBranchConditional %230 %231 %232 
                                             %231 = OpLabel 
                                                      OpKill
                                             %232 = OpLabel 
                                       f32_4 %235 = OpLoad %28 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                                       f32_3 %239 = OpLoad %238 
                                       f32_3 %240 = OpFMul %236 %239 
                                                      OpStore %234 %240 
                                       f32_4 %241 = OpLoad %28 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 0 0 
                                       f32_3 %244 = OpLoad %243 
                                       f32_3 %245 = OpFMul %242 %244 
                                       f32_3 %246 = OpLoad %234 
                                       f32_3 %247 = OpFAdd %245 %246 
                                                      OpStore %234 %247 
                                       f32_3 %249 = OpLoad %248 
                                       f32_3 %250 = OpLoad %248 
                                         f32 %251 = OpDot %249 %250 
                                Private f32* %252 = OpAccessChain %28 %126 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %28 %126 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpExtInst %1 32 %254 
                                Private f32* %256 = OpAccessChain %28 %126 
                                                      OpStore %256 %255 
                                       f32_4 %258 = OpLoad %28 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 0 0 
                                       f32_3 %260 = OpLoad %248 
                                       f32_3 %261 = OpFMul %259 %260 
                                                      OpStore %257 %261 
                                       f32_4 %262 = OpLoad %28 
                                       f32_3 %263 = OpVectorShuffle %262 %262 2 2 2 
                                       f32_3 %264 = OpLoad %257 
                                       f32_3 %265 = OpFMul %263 %264 
                                       f32_3 %266 = OpLoad %234 
                                       f32_3 %267 = OpFAdd %265 %266 
                                       f32_4 %268 = OpLoad %28 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %28 %269 
                                       f32_4 %270 = OpLoad %28 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_4 %272 = OpLoad %28 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                         f32 %274 = OpDot %271 %273 
                                Private f32* %275 = OpAccessChain %234 %126 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %234 %126 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpExtInst %1 32 %277 
                                Private f32* %279 = OpAccessChain %234 %126 
                                                      OpStore %279 %278 
                                       f32_4 %280 = OpLoad %28 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpLoad %234 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 0 0 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_4 %285 = OpLoad %28 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %28 %286 
                              Uniform f32_4* %287 = OpAccessChain %12 %226 
                                       f32_4 %288 = OpLoad %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 3 3 3 
                                       f32_4 %290 = OpLoad %30 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFNegate %291 
                                       f32_3 %293 = OpFMul %289 %292 
                              Uniform f32_4* %294 = OpAccessChain %12 %226 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpFAdd %293 %296 
                                                      OpStore %234 %297 
                                       f32_3 %299 = OpLoad %234 
                                       f32_3 %300 = OpLoad %234 
                                         f32 %301 = OpDot %299 %300 
                                                      OpStore %298 %301 
                                         f32 %302 = OpLoad %298 
                                         f32 %303 = OpExtInst %1 32 %302 
                                                      OpStore %298 %303 
                                         f32 %304 = OpLoad %298 
                                       f32_3 %305 = OpCompositeConstruct %304 %304 %304 
                                       f32_3 %306 = OpLoad %234 
                                       f32_3 %307 = OpFMul %305 %306 
                                                      OpStore %234 %307 
                                       f32_4 %308 = OpLoad %28 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpLoad %234 
                                         f32 %311 = OpDot %309 %310 
                                Private f32* %312 = OpAccessChain %28 %126 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %28 %126 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                         f32 %316 = OpFAdd %315 %130 
                                Private f32* %317 = OpAccessChain %28 %126 
                                                      OpStore %317 %316 
                                Private f32* %318 = OpAccessChain %28 %126 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFNegate %319 
                                Uniform f32* %322 = OpAccessChain %12 %321 %119 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFMul %320 %323 
                                         f32 %325 = OpFAdd %324 %130 
                                Private f32* %326 = OpAccessChain %28 %126 
                                                      OpStore %326 %325 
                                Uniform f32* %328 = OpAccessChain %12 %185 %16 
                                         f32 %329 = OpLoad %328 
                                  Input f32* %331 = OpAccessChain %158 %330 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %329 %332 
                                         f32 %334 = OpFAdd %333 %130 
                                                      OpStore %327 %334 
                                         f32 %335 = OpLoad %327 
                                         f32 %336 = OpFMul %335 %72 
                                Uniform f32* %338 = OpAccessChain %12 %337 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFAdd %336 %339 
                                                      OpStore %327 %340 
                                         f32 %341 = OpLoad %327 
                                         f32 %342 = OpExtInst %1 43 %341 %71 %130 
                                                      OpStore %327 %342 
                                         f32 %343 = OpLoad %327 
                                Private f32* %344 = OpAccessChain %28 %126 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFMul %343 %345 
                                Private f32* %347 = OpAccessChain %28 %126 
                                                      OpStore %347 %346 
                              Uniform f32_4* %350 = OpAccessChain %12 %349 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                              Uniform f32_4* %353 = OpAccessChain %12 %321 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFNegate %355 
                                       f32_3 %357 = OpFAdd %352 %356 
                                                      OpStore %348 %357 
                                       f32_4 %358 = OpLoad %28 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 0 0 
                                       f32_3 %360 = OpLoad %348 
                                       f32_3 %361 = OpFMul %359 %360 
                              Uniform f32_4* %362 = OpAccessChain %12 %321 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_3 %365 = OpFAdd %361 %364 
                                       f32_4 %366 = OpLoad %28 
                                       f32_4 %367 = OpVectorShuffle %366 %365 4 5 6 3 
                                                      OpStore %28 %367 
                              Uniform f32_4* %369 = OpAccessChain %12 %368 
                                       f32_4 %370 = OpLoad %369 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFNegate %371 
                                       f32_3 %374 = OpFAdd %372 %373 
                                                      OpStore %234 %374 
                              Uniform f32_4* %375 = OpAccessChain %12 %349 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpLoad %234 
                                       f32_3 %379 = OpFMul %377 %378 
                              Uniform f32_4* %380 = OpAccessChain %12 %368 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFAdd %379 %382 
                                                      OpStore %234 %383 
                                       f32_4 %384 = OpLoad %28 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpLoad %234 
                                       f32_3 %387 = OpFMul %385 %386 
                                       f32_4 %388 = OpLoad %28 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %28 %389 
                                         f32 %392 = OpLoad %157 
                                       f32_3 %393 = OpCompositeConstruct %392 %392 %392 
                                       f32_4 %394 = OpLoad %28 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %396 = OpFMul %393 %395 
                                       f32_4 %397 = OpLoad %391 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 5 6 3 
                                                      OpStore %391 %398 
                                 Output f32* %400 = OpAccessChain %391 %119 
                                                      OpStore %400 %71 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 _TimeEditor;
uniform 	vec4 _BaseColor;
uniform 	vec4 _Shading;
uniform 	float _DepthIntensity;
uniform 	float _Tiling;
uniform 	float _Density;
uniform 	float _Alpha;
uniform 	float _AlphaCut;
uniform 	float _Speed;
uniform 	float _SpeedSecondLayer;
uniform 	vec4 _CloudNormalsDirection;
uniform 	vec4 _PerlinNormalMap_ST;
uniform 	float _MipLevel;
uniform  sampler2D _PerlinNormalMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec3 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.x = _Time.y + _TimeEditor.y;
    u_xlat0.x = u_xlat0.x * 0.00100000005;
    u_xlat1 = vs_TEXCOORD0.xzxz / vec4(vec4(_Tiling, _Tiling, _Tiling, _Tiling));
    u_xlat0 = u_xlat0.xxxx * vec4(_Speed, _Speed, _SpeedSecondLayer, _SpeedSecondLayer) + u_xlat1;
    u_xlat6.xy = u_xlat0.zw + vec2(0.0, 0.5);
    u_xlat0.xy = u_xlat0.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat0.xy = u_xlat6.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_0 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat10 = u_xlat10_1.w + _Density;
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(vec3(_Density, _Density, _Density));
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat9 = vs_COLOR0.w * u_xlat10 + (-u_xlat10_0.w);
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + (-u_xlat16_0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * _CloudNormalsDirection.xyz;
    u_xlat1.x = u_xlat9 * _Alpha + (-_AlphaCut);
    u_xlat9 = u_xlat9 * _Alpha;
    u_xlat1.x = ceil(u_xlat1.x);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x + -1.0;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz + u_xlat1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = (-u_xlat0.x) * _Shading.w + 1.0;
    u_xlat3 = _CloudNormalsDirection.y * vs_COLOR0.z + 1.0;
    u_xlat3 = u_xlat3 * 0.5 + _DepthIntensity;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat0.x = u_xlat3 * u_xlat0.x;
    u_xlat1.xyz = _BaseColor.xyz + (-_Shading.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + _Shading.xyz;
    u_xlat1.xyz = (-_LightColor0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = _BaseColor.www * u_xlat1.xyz + _LightColor0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %51 %82 %93 %131 %134 %179 %213 %219 %220 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %51 Location 51 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %219 Location 219 
                                                      OpDecorate %220 Location 220 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypePointer Output %7 
                                Output f32_4* %51 = OpVariable Output 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %91 = OpTypeVector %6 3 
                                              %92 = OpTypePointer Input %91 
                                 Input f32_3* %93 = OpVariable Input 
                                          u32 %99 = OpConstant 0 
                                             %100 = OpTypePointer Private %6 
                                         u32 %113 = OpConstant 2 
                                Private f32* %115 = OpVariable Private 
                                             %130 = OpTypePointer Output %91 
                               Output f32_3* %131 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                               Output f32_3* %179 = OpVariable Output 
                                             %182 = OpTypePointer Private %91 
                              Private f32_3* %183 = OpVariable Private 
                               Output f32_3* %213 = OpVariable Output 
                               Output f32_4* %219 = OpVariable Output 
                                Input f32_4* %220 = OpVariable Input 
                                             %222 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %52 = OpAccessChain %21 %23 %46 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %51 %58 
                                        f32_4 %59 = OpLoad %44 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %61 = OpAccessChain %21 %36 %24 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpFMul %60 %62 
                                                      OpStore %9 %63 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %44 
                                        f32_4 %67 = OpVectorShuffle %66 %66 0 0 0 0 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %9 %70 
                               Uniform f32_4* %71 = OpAccessChain %21 %36 %36 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %44 
                                        f32_4 %74 = OpVectorShuffle %73 %73 2 2 2 2 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %9 %77 
                               Uniform f32_4* %83 = OpAccessChain %21 %36 %46 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %44 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                Output f32_4* %90 = OpAccessChain %82 %23 
                                                      OpStore %90 %89 
                                        f32_3 %94 = OpLoad %93 
                               Uniform f32_4* %95 = OpAccessChain %21 %24 %23 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                          f32 %98 = OpDot %94 %97 
                                Private f32* %101 = OpAccessChain %9 %99 
                                                      OpStore %101 %98 
                                       f32_3 %102 = OpLoad %93 
                              Uniform f32_4* %103 = OpAccessChain %21 %24 %24 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                         f32 %106 = OpDot %102 %105 
                                Private f32* %107 = OpAccessChain %9 %78 
                                                      OpStore %107 %106 
                                       f32_3 %108 = OpLoad %93 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %36 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %114 = OpAccessChain %9 %113 
                                                      OpStore %114 %112 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_4 %118 = OpLoad %9 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %117 %119 
                                                      OpStore %115 %120 
                                         f32 %121 = OpLoad %115 
                                         f32 %122 = OpExtInst %1 32 %121 
                                                      OpStore %115 %122 
                                         f32 %123 = OpLoad %115 
                                       f32_3 %124 = OpCompositeConstruct %123 %123 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %9 %129 
                                       f32_4 %132 = OpLoad %9 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                                      OpStore %131 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %21 %23 %24 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %136 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %44 %142 
                              Uniform f32_4* %143 = OpAccessChain %21 %23 %23 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_4 %146 = OpLoad %134 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 0 0 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %44 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFAdd %148 %150 
                                       f32_4 %152 = OpLoad %44 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %44 %153 
                              Uniform f32_4* %154 = OpAccessChain %21 %23 %36 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_4 %157 = OpLoad %134 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %44 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %44 %164 
                                       f32_4 %165 = OpLoad %44 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_4 %167 = OpLoad %44 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %166 %168 
                                                      OpStore %115 %169 
                                         f32 %170 = OpLoad %115 
                                         f32 %171 = OpExtInst %1 32 %170 
                                                      OpStore %115 %171 
                                         f32 %172 = OpLoad %115 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_4 %174 = OpLoad %44 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %44 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %44 %178 
                                       f32_4 %180 = OpLoad %44 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                                      OpStore %179 %181 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 2 0 1 
                                       f32_4 %186 = OpLoad %44 
                                       f32_3 %187 = OpVectorShuffle %186 %186 1 2 0 
                                       f32_3 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 2 0 
                                       f32_4 %191 = OpLoad %44 
                                       f32_3 %192 = OpVectorShuffle %191 %191 2 0 1 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %194 = OpLoad %183 
                                       f32_3 %195 = OpFNegate %194 
                                       f32_3 %196 = OpFAdd %193 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %134 
                                       f32_3 %202 = OpVectorShuffle %201 %201 3 3 3 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %9 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %9 %205 
                                       f32_4 %206 = OpLoad %9 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %207 %209 
                                                      OpStore %115 %210 
                                         f32 %211 = OpLoad %115 
                                         f32 %212 = OpExtInst %1 32 %211 
                                                      OpStore %115 %212 
                                         f32 %214 = OpLoad %115 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFMul %215 %217 
                                                      OpStore %213 %218 
                                       f32_4 %221 = OpLoad %220 
                                                      OpStore %219 %221 
                                 Output f32* %223 = OpAccessChain %82 %23 %78 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFNegate %224 
                                 Output f32* %226 = OpAccessChain %82 %23 %78 
                                                      OpStore %226 %225 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 402
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %30 %158 %238 %243 %248 %391 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpMemberDecorate %10 0 Offset 10 
                                                      OpMemberDecorate %10 1 RelaxedPrecision 
                                                      OpMemberDecorate %10 1 Offset 10 
                                                      OpMemberDecorate %10 2 Offset 10 
                                                      OpMemberDecorate %10 3 Offset 10 
                                                      OpMemberDecorate %10 4 RelaxedPrecision 
                                                      OpMemberDecorate %10 4 Offset 10 
                                                      OpMemberDecorate %10 5 RelaxedPrecision 
                                                      OpMemberDecorate %10 5 Offset 10 
                                                      OpMemberDecorate %10 6 RelaxedPrecision 
                                                      OpMemberDecorate %10 6 Offset 10 
                                                      OpMemberDecorate %10 7 RelaxedPrecision 
                                                      OpMemberDecorate %10 7 Offset 10 
                                                      OpMemberDecorate %10 8 RelaxedPrecision 
                                                      OpMemberDecorate %10 8 Offset 10 
                                                      OpMemberDecorate %10 9 RelaxedPrecision 
                                                      OpMemberDecorate %10 9 Offset 10 
                                                      OpMemberDecorate %10 10 RelaxedPrecision 
                                                      OpMemberDecorate %10 10 Offset 10 
                                                      OpMemberDecorate %10 11 RelaxedPrecision 
                                                      OpMemberDecorate %10 11 Offset 10 
                                                      OpMemberDecorate %10 12 RelaxedPrecision 
                                                      OpMemberDecorate %10 12 Offset 10 
                                                      OpMemberDecorate %10 13 RelaxedPrecision 
                                                      OpMemberDecorate %10 13 Offset 10 
                                                      OpMemberDecorate %10 14 Offset 10 
                                                      OpMemberDecorate %10 15 Offset 10 
                                                      OpDecorate %10 Block 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %93 DescriptorSet 93 
                                                      OpDecorate %93 Binding 93 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %238 Location 238 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate %248 Location 248 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %391 Location 391 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypePointer Private %6 
                                  Private f32* %8 = OpVariable Private 
                                               %9 = OpTypeVector %6 4 
                                              %10 = OpTypeStruct %9 %9 %9 %9 %9 %9 %6 %6 %6 %6 %6 %6 %6 %9 %9 %6 
                                              %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32;}* %12 = OpVariable Uniform 
                                              %13 = OpTypeInt 32 1 
                                          i32 %14 = OpConstant 0 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 1 
                                              %17 = OpTypePointer Uniform %6 
                                          i32 %20 = OpConstant 3 
                                          f32 %25 = OpConstant 3.674022E-40 
                                              %27 = OpTypePointer Private %9 
                               Private f32_4* %28 = OpVariable Private 
                                              %29 = OpTypePointer Input %9 
                                 Input f32_4* %30 = OpVariable Input 
                                          i32 %33 = OpConstant 7 
                               Private f32_4* %49 = OpVariable Private 
                                          i32 %52 = OpConstant 11 
                                          i32 %57 = OpConstant 12 
                                              %66 = OpTypeVector %6 2 
                                              %67 = OpTypePointer Private %66 
                               Private f32_2* %68 = OpVariable Private 
                                          f32 %71 = OpConstant 3.674022E-40 
                                          f32 %72 = OpConstant 3.674022E-40 
                                        f32_2 %73 = OpConstantComposite %71 %72 
                                          i32 %77 = OpConstant 14 
                                              %78 = OpTypePointer Uniform %9 
                               Private f32_4* %89 = OpVariable Private 
                                              %90 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %91 = OpTypeSampledImage %90 
                                              %92 = OpTypePointer UniformConstant %91 
  UniformConstant read_only Texture2DSampled* %93 = OpVariable UniformConstant 
                                          i32 %97 = OpConstant 15 
                              Private f32_4* %112 = OpVariable Private 
                                         u32 %119 = OpConstant 3 
                                         i32 %122 = OpConstant 8 
                                         u32 %126 = OpConstant 0 
                                         f32 %130 = OpConstant 3.674022E-40 
                                             %133 = OpTypeVector %6 3 
                                             %134 = OpTypePointer Private %133 
                              Private f32_3* %135 = OpVariable Private 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_3 %139 = OpConstantComposite %138 %138 %138 
                                         f32 %154 = OpConstant 3.674022E-40 
                                       f32_3 %155 = OpConstantComposite %154 %154 %154 
                                Private f32* %157 = OpVariable Private 
                                Input f32_4* %158 = OpVariable Input 
                                             %159 = OpTypePointer Input %6 
                              Private f32_3* %169 = OpVariable Private 
                                         i32 %185 = OpConstant 13 
                                         i32 %193 = OpConstant 9 
                                         i32 %197 = OpConstant 10 
                                             %219 = OpTypeBool 
                                             %220 = OpTypePointer Private %219 
                               Private bool* %221 = OpVariable Private 
                                         i32 %226 = OpConstant 1 
                                         i32 %228 = OpConstant -1 
                              Private f32_3* %234 = OpVariable Private 
                                             %237 = OpTypePointer Input %133 
                                Input f32_3* %238 = OpVariable Input 
                                Input f32_3* %243 = OpVariable Input 
                                Input f32_3* %248 = OpVariable Input 
                              Private f32_3* %257 = OpVariable Private 
                                Private f32* %298 = OpVariable Private 
                                         i32 %321 = OpConstant 5 
                                Private f32* %327 = OpVariable Private 
                                         u32 %330 = OpConstant 2 
                                         i32 %337 = OpConstant 6 
                              Private f32_3* %348 = OpVariable Private 
                                         i32 %349 = OpConstant 4 
                                         i32 %368 = OpConstant 2 
                                       f32_3 %373 = OpConstantComposite %130 %130 %130 
                                             %390 = OpTypePointer Output %9 
                               Output f32_4* %391 = OpVariable Output 
                                             %399 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %18 = OpAccessChain %12 %14 %16 
                                          f32 %19 = OpLoad %18 
                                 Uniform f32* %21 = OpAccessChain %12 %20 %16 
                                          f32 %22 = OpLoad %21 
                                          f32 %23 = OpFAdd %19 %22 
                                                      OpStore %8 %23 
                                          f32 %24 = OpLoad %8 
                                          f32 %26 = OpFMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 2 0 2 
                                 Uniform f32* %34 = OpAccessChain %12 %33 
                                          f32 %35 = OpLoad %34 
                                 Uniform f32* %36 = OpAccessChain %12 %33 
                                          f32 %37 = OpLoad %36 
                                 Uniform f32* %38 = OpAccessChain %12 %33 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %12 %33 
                                          f32 %41 = OpLoad %40 
                                        f32_4 %42 = OpCompositeConstruct %35 %37 %39 %41 
                                          f32 %43 = OpCompositeExtract %42 0 
                                          f32 %44 = OpCompositeExtract %42 1 
                                          f32 %45 = OpCompositeExtract %42 2 
                                          f32 %46 = OpCompositeExtract %42 3 
                                        f32_4 %47 = OpCompositeConstruct %43 %44 %45 %46 
                                        f32_4 %48 = OpFDiv %32 %47 
                                                      OpStore %28 %48 
                                          f32 %50 = OpLoad %8 
                                        f32_4 %51 = OpCompositeConstruct %50 %50 %50 %50 
                                 Uniform f32* %53 = OpAccessChain %12 %52 
                                          f32 %54 = OpLoad %53 
                                 Uniform f32* %55 = OpAccessChain %12 %52 
                                          f32 %56 = OpLoad %55 
                                 Uniform f32* %58 = OpAccessChain %12 %57 
                                          f32 %59 = OpLoad %58 
                                 Uniform f32* %60 = OpAccessChain %12 %57 
                                          f32 %61 = OpLoad %60 
                                        f32_4 %62 = OpCompositeConstruct %54 %56 %59 %61 
                                        f32_4 %63 = OpFMul %51 %62 
                                        f32_4 %64 = OpLoad %28 
                                        f32_4 %65 = OpFAdd %63 %64 
                                                      OpStore %49 %65 
                                        f32_4 %69 = OpLoad %49 
                                        f32_2 %70 = OpVectorShuffle %69 %69 2 3 
                                        f32_2 %74 = OpFAdd %70 %73 
                                                      OpStore %68 %74 
                                        f32_4 %75 = OpLoad %49 
                                        f32_2 %76 = OpVectorShuffle %75 %75 0 1 
                               Uniform f32_4* %79 = OpAccessChain %12 %77 
                                        f32_4 %80 = OpLoad %79 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpFMul %76 %81 
                               Uniform f32_4* %83 = OpAccessChain %12 %77 
                                        f32_4 %84 = OpLoad %83 
                                        f32_2 %85 = OpVectorShuffle %84 %84 2 3 
                                        f32_2 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %28 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 2 3 
                                                      OpStore %28 %88 
                   read_only Texture2DSampled %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %28 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                                 Uniform f32* %98 = OpAccessChain %12 %97 
                                          f32 %99 = OpLoad %98 
                                       f32_4 %100 = OpImageSampleExplicitLod %94 %96 Lod %9 
                                                      OpStore %89 %100 
                                       f32_2 %101 = OpLoad %68 
                              Uniform f32_4* %102 = OpAccessChain %12 %77 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %101 %104 
                              Uniform f32_4* %106 = OpAccessChain %12 %77 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                       f32_4 %110 = OpLoad %28 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 3 
                                                      OpStore %28 %111 
                  read_only Texture2DSampled %113 = OpLoad %93 
                                       f32_4 %114 = OpLoad %28 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                                Uniform f32* %116 = OpAccessChain %12 %97 
                                         f32 %117 = OpLoad %116 
                                       f32_4 %118 = OpImageSampleExplicitLod %113 %115 Lod %9 
                                                      OpStore %112 %118 
                                Private f32* %120 = OpAccessChain %89 %119 
                                         f32 %121 = OpLoad %120 
                                Uniform f32* %123 = OpAccessChain %12 %122 
                                         f32 %124 = OpLoad %123 
                                         f32 %125 = OpFAdd %121 %124 
                                Private f32* %127 = OpAccessChain %68 %126 
                                                      OpStore %127 %125 
                                Private f32* %128 = OpAccessChain %68 %126 
                                         f32 %129 = OpLoad %128 
                                         f32 %131 = OpExtInst %1 43 %129 %71 %130 
                                Private f32* %132 = OpAccessChain %68 %126 
                                                      OpStore %132 %131 
                                       f32_4 %136 = OpLoad %89 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %140 = OpFMul %137 %139 
                                Uniform f32* %141 = OpAccessChain %12 %122 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %143 = OpAccessChain %12 %122 
                                         f32 %144 = OpLoad %143 
                                Uniform f32* %145 = OpAccessChain %12 %122 
                                         f32 %146 = OpLoad %145 
                                       f32_3 %147 = OpCompositeConstruct %142 %144 %146 
                                         f32 %148 = OpCompositeExtract %147 0 
                                         f32 %149 = OpCompositeExtract %147 1 
                                         f32 %150 = OpCompositeExtract %147 2 
                                       f32_3 %151 = OpCompositeConstruct %148 %149 %150 
                                       f32_3 %152 = OpFAdd %140 %151 
                                                      OpStore %135 %152 
                                       f32_3 %153 = OpLoad %135 
                                       f32_3 %156 = OpFAdd %153 %155 
                                                      OpStore %135 %156 
                                  Input f32* %160 = OpAccessChain %158 %119 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %68 %126 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                Private f32* %165 = OpAccessChain %112 %119 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFNegate %166 
                                         f32 %168 = OpFAdd %164 %167 
                                                      OpStore %157 %168 
                                       f32_4 %170 = OpLoad %112 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFMul %171 %139 
                                       f32_3 %173 = OpFAdd %172 %155 
                                                      OpStore %169 %173 
                                       f32_4 %174 = OpLoad %158 
                                       f32_3 %175 = OpVectorShuffle %174 %174 3 3 3 
                                       f32_3 %176 = OpLoad %135 
                                       f32_3 %177 = OpFMul %175 %176 
                                       f32_3 %178 = OpLoad %169 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %177 %179 
                                       f32_4 %181 = OpLoad %28 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %28 %182 
                                       f32_4 %183 = OpLoad %28 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                              Uniform f32_4* %186 = OpAccessChain %12 %185 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFMul %184 %188 
                                       f32_4 %190 = OpLoad %28 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %28 %191 
                                         f32 %192 = OpLoad %157 
                                Uniform f32* %194 = OpAccessChain %12 %193 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFMul %192 %195 
                                Uniform f32* %198 = OpAccessChain %12 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %196 %200 
                                Private f32* %202 = OpAccessChain %68 %126 
                                                      OpStore %202 %201 
                                         f32 %203 = OpLoad %157 
                                Uniform f32* %204 = OpAccessChain %12 %193 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %203 %205 
                                                      OpStore %157 %206 
                                Private f32* %207 = OpAccessChain %68 %126 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpExtInst %1 9 %208 
                                Private f32* %210 = OpAccessChain %68 %126 
                                                      OpStore %210 %209 
                                Private f32* %211 = OpAccessChain %68 %126 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpExtInst %1 43 %212 %71 %130 
                                Private f32* %214 = OpAccessChain %68 %126 
                                                      OpStore %214 %213 
                                Private f32* %215 = OpAccessChain %68 %126 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFAdd %216 %154 
                                Private f32* %218 = OpAccessChain %68 %126 
                                                      OpStore %218 %217 
                                Private f32* %222 = OpAccessChain %68 %126 
                                         f32 %223 = OpLoad %222 
                                        bool %224 = OpFOrdLessThan %223 %71 
                                                      OpStore %221 %224 
                                        bool %225 = OpLoad %221 
                                         i32 %227 = OpSelect %225 %226 %14 
                                         i32 %229 = OpIMul %227 %228 
                                        bool %230 = OpINotEqual %229 %14 
                                                      OpSelectionMerge %232 None 
                                                      OpBranchConditional %230 %231 %232 
                                             %231 = OpLabel 
                                                      OpKill
                                             %232 = OpLabel 
                                       f32_4 %235 = OpLoad %28 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                                       f32_3 %239 = OpLoad %238 
                                       f32_3 %240 = OpFMul %236 %239 
                                                      OpStore %234 %240 
                                       f32_4 %241 = OpLoad %28 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 0 0 
                                       f32_3 %244 = OpLoad %243 
                                       f32_3 %245 = OpFMul %242 %244 
                                       f32_3 %246 = OpLoad %234 
                                       f32_3 %247 = OpFAdd %245 %246 
                                                      OpStore %234 %247 
                                       f32_3 %249 = OpLoad %248 
                                       f32_3 %250 = OpLoad %248 
                                         f32 %251 = OpDot %249 %250 
                                Private f32* %252 = OpAccessChain %28 %126 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %28 %126 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpExtInst %1 32 %254 
                                Private f32* %256 = OpAccessChain %28 %126 
                                                      OpStore %256 %255 
                                       f32_4 %258 = OpLoad %28 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 0 0 
                                       f32_3 %260 = OpLoad %248 
                                       f32_3 %261 = OpFMul %259 %260 
                                                      OpStore %257 %261 
                                       f32_4 %262 = OpLoad %28 
                                       f32_3 %263 = OpVectorShuffle %262 %262 2 2 2 
                                       f32_3 %264 = OpLoad %257 
                                       f32_3 %265 = OpFMul %263 %264 
                                       f32_3 %266 = OpLoad %234 
                                       f32_3 %267 = OpFAdd %265 %266 
                                       f32_4 %268 = OpLoad %28 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %28 %269 
                                       f32_4 %270 = OpLoad %28 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_4 %272 = OpLoad %28 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                         f32 %274 = OpDot %271 %273 
                                Private f32* %275 = OpAccessChain %234 %126 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %234 %126 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpExtInst %1 32 %277 
                                Private f32* %279 = OpAccessChain %234 %126 
                                                      OpStore %279 %278 
                                       f32_4 %280 = OpLoad %28 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpLoad %234 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 0 0 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_4 %285 = OpLoad %28 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %28 %286 
                              Uniform f32_4* %287 = OpAccessChain %12 %226 
                                       f32_4 %288 = OpLoad %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 3 3 3 
                                       f32_4 %290 = OpLoad %30 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFNegate %291 
                                       f32_3 %293 = OpFMul %289 %292 
                              Uniform f32_4* %294 = OpAccessChain %12 %226 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpFAdd %293 %296 
                                                      OpStore %234 %297 
                                       f32_3 %299 = OpLoad %234 
                                       f32_3 %300 = OpLoad %234 
                                         f32 %301 = OpDot %299 %300 
                                                      OpStore %298 %301 
                                         f32 %302 = OpLoad %298 
                                         f32 %303 = OpExtInst %1 32 %302 
                                                      OpStore %298 %303 
                                         f32 %304 = OpLoad %298 
                                       f32_3 %305 = OpCompositeConstruct %304 %304 %304 
                                       f32_3 %306 = OpLoad %234 
                                       f32_3 %307 = OpFMul %305 %306 
                                                      OpStore %234 %307 
                                       f32_4 %308 = OpLoad %28 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpLoad %234 
                                         f32 %311 = OpDot %309 %310 
                                Private f32* %312 = OpAccessChain %28 %126 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %28 %126 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                         f32 %316 = OpFAdd %315 %130 
                                Private f32* %317 = OpAccessChain %28 %126 
                                                      OpStore %317 %316 
                                Private f32* %318 = OpAccessChain %28 %126 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFNegate %319 
                                Uniform f32* %322 = OpAccessChain %12 %321 %119 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFMul %320 %323 
                                         f32 %325 = OpFAdd %324 %130 
                                Private f32* %326 = OpAccessChain %28 %126 
                                                      OpStore %326 %325 
                                Uniform f32* %328 = OpAccessChain %12 %185 %16 
                                         f32 %329 = OpLoad %328 
                                  Input f32* %331 = OpAccessChain %158 %330 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %329 %332 
                                         f32 %334 = OpFAdd %333 %130 
                                                      OpStore %327 %334 
                                         f32 %335 = OpLoad %327 
                                         f32 %336 = OpFMul %335 %72 
                                Uniform f32* %338 = OpAccessChain %12 %337 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFAdd %336 %339 
                                                      OpStore %327 %340 
                                         f32 %341 = OpLoad %327 
                                         f32 %342 = OpExtInst %1 43 %341 %71 %130 
                                                      OpStore %327 %342 
                                         f32 %343 = OpLoad %327 
                                Private f32* %344 = OpAccessChain %28 %126 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFMul %343 %345 
                                Private f32* %347 = OpAccessChain %28 %126 
                                                      OpStore %347 %346 
                              Uniform f32_4* %350 = OpAccessChain %12 %349 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                              Uniform f32_4* %353 = OpAccessChain %12 %321 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFNegate %355 
                                       f32_3 %357 = OpFAdd %352 %356 
                                                      OpStore %348 %357 
                                       f32_4 %358 = OpLoad %28 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 0 0 
                                       f32_3 %360 = OpLoad %348 
                                       f32_3 %361 = OpFMul %359 %360 
                              Uniform f32_4* %362 = OpAccessChain %12 %321 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_3 %365 = OpFAdd %361 %364 
                                       f32_4 %366 = OpLoad %28 
                                       f32_4 %367 = OpVectorShuffle %366 %365 4 5 6 3 
                                                      OpStore %28 %367 
                              Uniform f32_4* %369 = OpAccessChain %12 %368 
                                       f32_4 %370 = OpLoad %369 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFNegate %371 
                                       f32_3 %374 = OpFAdd %372 %373 
                                                      OpStore %234 %374 
                              Uniform f32_4* %375 = OpAccessChain %12 %349 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpLoad %234 
                                       f32_3 %379 = OpFMul %377 %378 
                              Uniform f32_4* %380 = OpAccessChain %12 %368 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFAdd %379 %382 
                                                      OpStore %234 %383 
                                       f32_4 %384 = OpLoad %28 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpLoad %234 
                                       f32_3 %387 = OpFMul %385 %386 
                                       f32_4 %388 = OpLoad %28 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %28 %389 
                                         f32 %392 = OpLoad %157 
                                       f32_3 %393 = OpCompositeConstruct %392 %392 %392 
                                       f32_4 %394 = OpLoad %28 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %396 = OpFMul %393 %395 
                                       f32_4 %397 = OpLoad %391 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 5 6 3 
                                                      OpStore %391 %398 
                                 Output f32* %400 = OpAccessChain %391 %119 
                                                      OpStore %400 %71 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 _TimeEditor;
uniform 	vec4 _BaseColor;
uniform 	vec4 _Shading;
uniform 	float _DepthIntensity;
uniform 	float _Tiling;
uniform 	float _Density;
uniform 	float _Alpha;
uniform 	float _AlphaCut;
uniform 	float _Speed;
uniform 	float _SpeedSecondLayer;
uniform 	vec4 _CloudNormalsDirection;
uniform 	vec4 _PerlinNormalMap_ST;
uniform 	float _MipLevel;
uniform  sampler2D _PerlinNormalMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec3 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.x = _Time.y + _TimeEditor.y;
    u_xlat0.x = u_xlat0.x * 0.00100000005;
    u_xlat1 = vs_TEXCOORD0.xzxz / vec4(vec4(_Tiling, _Tiling, _Tiling, _Tiling));
    u_xlat0 = u_xlat0.xxxx * vec4(_Speed, _Speed, _SpeedSecondLayer, _SpeedSecondLayer) + u_xlat1;
    u_xlat6.xy = u_xlat0.zw + vec2(0.0, 0.5);
    u_xlat0.xy = u_xlat0.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat0.xy = u_xlat6.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_0 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat10 = u_xlat10_1.w + _Density;
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(vec3(_Density, _Density, _Density));
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat9 = vs_COLOR0.w * u_xlat10 + (-u_xlat10_0.w);
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + (-u_xlat16_0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * _CloudNormalsDirection.xyz;
    u_xlat1.x = u_xlat9 * _Alpha + (-_AlphaCut);
    u_xlat9 = u_xlat9 * _Alpha;
    u_xlat1.x = ceil(u_xlat1.x);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x + -1.0;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz + u_xlat1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = (-u_xlat0.x) * _Shading.w + 1.0;
    u_xlat3 = _CloudNormalsDirection.y * vs_COLOR0.z + 1.0;
    u_xlat3 = u_xlat3 * 0.5 + _DepthIntensity;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat0.x = u_xlat3 * u_xlat0.x;
    u_xlat1.xyz = _BaseColor.xyz + (-_Shading.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + _Shading.xyz;
    u_xlat1.xyz = (-_LightColor0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = _BaseColor.www * u_xlat1.xyz + _LightColor0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 258
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %82 %92 %96 %134 %137 %182 %216 %222 %223 %244 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate %92 Location 92 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %182 Location 182 
                                                      OpDecorate %216 Location 216 
                                                      OpDecorate %222 Location 222 
                                                      OpDecorate %223 Location 223 
                                                      OpDecorate %244 Location 244 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %16 %17 %18 %19 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4];}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 0 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %58 = OpVariable Private 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %90 = OpTypePointer Output %7 
                                Output f32_4* %92 = OpVariable Output 
                                              %94 = OpTypeVector %6 3 
                                              %95 = OpTypePointer Input %94 
                                 Input f32_3* %96 = OpVariable Input 
                                         u32 %102 = OpConstant 0 
                                             %103 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 2 
                                Private f32* %118 = OpVariable Private 
                                             %133 = OpTypePointer Output %94 
                               Output f32_3* %134 = OpVariable Output 
                                Input f32_4* %137 = OpVariable Input 
                               Output f32_3* %182 = OpVariable Output 
                                             %185 = OpTypePointer Private %94 
                              Private f32_3* %186 = OpVariable Private 
                               Output f32_3* %216 = OpVariable Output 
                               Output f32_4* %222 = OpVariable Output 
                                Input f32_4* %223 = OpVariable Input 
                               Output f32_4* %244 = OpVariable Output 
                                             %252 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %51 = OpAccessChain %22 %24 %47 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %11 
                                        f32_4 %54 = OpVectorShuffle %53 %53 3 3 3 3 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %9 %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %61 = OpAccessChain %22 %37 %25 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpFMul %60 %62 
                                                      OpStore %58 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %37 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 0 0 0 0 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %58 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %58 %70 
                               Uniform f32_4* %71 = OpAccessChain %22 %37 %37 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %45 
                                        f32_4 %74 = OpVectorShuffle %73 %73 2 2 2 2 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %58 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %58 %77 
                               Uniform f32_4* %83 = OpAccessChain %22 %37 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %58 
                                        f32_4 %89 = OpFAdd %87 %88 
                                Output f32_4* %91 = OpAccessChain %82 %24 
                                                      OpStore %91 %89 
                                        f32_4 %93 = OpLoad %9 
                                                      OpStore %92 %93 
                                        f32_3 %97 = OpLoad %96 
                               Uniform f32_4* %98 = OpAccessChain %22 %25 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                         f32 %101 = OpDot %97 %100 
                                Private f32* %104 = OpAccessChain %45 %102 
                                                      OpStore %104 %101 
                                       f32_3 %105 = OpLoad %96 
                              Uniform f32_4* %106 = OpAccessChain %22 %25 %25 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %105 %108 
                                Private f32* %110 = OpAccessChain %45 %78 
                                                      OpStore %110 %109 
                                       f32_3 %111 = OpLoad %96 
                              Uniform f32_4* %112 = OpAccessChain %22 %25 %37 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %117 = OpAccessChain %45 %116 
                                                      OpStore %117 %115 
                                       f32_4 %119 = OpLoad %45 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_4 %121 = OpLoad %45 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %120 %122 
                                                      OpStore %118 %123 
                                         f32 %124 = OpLoad %118 
                                         f32 %125 = OpExtInst %1 32 %124 
                                                      OpStore %118 %125 
                                         f32 %126 = OpLoad %118 
                                       f32_3 %127 = OpCompositeConstruct %126 %126 %126 
                                       f32_4 %128 = OpLoad %45 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %45 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 6 3 
                                                      OpStore %45 %132 
                                       f32_4 %135 = OpLoad %45 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                                      OpStore %134 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 1 1 1 
                              Uniform f32_4* %140 = OpAccessChain %22 %24 %25 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %139 %142 
                                       f32_4 %144 = OpLoad %58 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 6 3 
                                                      OpStore %58 %145 
                              Uniform f32_4* %146 = OpAccessChain %22 %24 %24 
                                       f32_4 %147 = OpLoad %146 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_4 %149 = OpLoad %137 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 0 0 
                                       f32_3 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %58 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFAdd %151 %153 
                                       f32_4 %155 = OpLoad %58 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %58 %156 
                              Uniform f32_4* %157 = OpAccessChain %22 %24 %37 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %137 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %58 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                       f32_3 %165 = OpFAdd %162 %164 
                                       f32_4 %166 = OpLoad %58 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
                                                      OpStore %58 %167 
                                       f32_4 %168 = OpLoad %58 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_4 %170 = OpLoad %58 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %169 %171 
                                                      OpStore %118 %172 
                                         f32 %173 = OpLoad %118 
                                         f32 %174 = OpExtInst %1 32 %173 
                                                      OpStore %118 %174 
                                         f32 %175 = OpLoad %118 
                                       f32_3 %176 = OpCompositeConstruct %175 %175 %175 
                                       f32_4 %177 = OpLoad %58 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFMul %176 %178 
                                       f32_4 %180 = OpLoad %58 
                                       f32_4 %181 = OpVectorShuffle %180 %179 4 5 6 3 
                                                      OpStore %58 %181 
                                       f32_4 %183 = OpLoad %58 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                                      OpStore %182 %184 
                                       f32_4 %187 = OpLoad %45 
                                       f32_3 %188 = OpVectorShuffle %187 %187 2 0 1 
                                       f32_4 %189 = OpLoad %58 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 2 0 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                       f32_4 %192 = OpLoad %45 
                                       f32_3 %193 = OpVectorShuffle %192 %192 1 2 0 
                                       f32_4 %194 = OpLoad %58 
                                       f32_3 %195 = OpVectorShuffle %194 %194 2 0 1 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_3 %197 = OpLoad %186 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %196 %198 
                                       f32_4 %200 = OpLoad %45 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
                                                      OpStore %45 %201 
                                       f32_4 %202 = OpLoad %45 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                       f32_4 %204 = OpLoad %137 
                                       f32_3 %205 = OpVectorShuffle %204 %204 3 3 3 
                                       f32_3 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %45 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %45 %208 
                                       f32_4 %209 = OpLoad %45 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_4 %211 = OpLoad %45 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                         f32 %213 = OpDot %210 %212 
                                                      OpStore %118 %213 
                                         f32 %214 = OpLoad %118 
                                         f32 %215 = OpExtInst %1 32 %214 
                                                      OpStore %118 %215 
                                         f32 %217 = OpLoad %118 
                                       f32_3 %218 = OpCompositeConstruct %217 %217 %217 
                                       f32_4 %219 = OpLoad %45 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpFMul %218 %220 
                                                      OpStore %216 %221 
                                       f32_4 %224 = OpLoad %223 
                                                      OpStore %222 %224 
                                       f32_4 %225 = OpLoad %9 
                                       f32_4 %226 = OpVectorShuffle %225 %225 1 1 1 1 
                              Uniform f32_4* %227 = OpAccessChain %22 %47 %25 
                                       f32_4 %228 = OpLoad %227 
                                       f32_4 %229 = OpFMul %226 %228 
                                                      OpStore %45 %229 
                              Uniform f32_4* %230 = OpAccessChain %22 %47 %24 
                                       f32_4 %231 = OpLoad %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %232 0 0 0 0 
                                       f32_4 %234 = OpFMul %231 %233 
                                       f32_4 %235 = OpLoad %45 
                                       f32_4 %236 = OpFAdd %234 %235 
                                                      OpStore %45 %236 
                              Uniform f32_4* %237 = OpAccessChain %22 %47 %37 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpLoad %9 
                                       f32_4 %240 = OpVectorShuffle %239 %239 2 2 2 2 
                                       f32_4 %241 = OpFMul %238 %240 
                                       f32_4 %242 = OpLoad %45 
                                       f32_4 %243 = OpFAdd %241 %242 
                                                      OpStore %45 %243 
                              Uniform f32_4* %245 = OpAccessChain %22 %47 %47 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %9 
                                       f32_4 %248 = OpVectorShuffle %247 %247 3 3 3 3 
                                       f32_4 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %45 
                                       f32_4 %251 = OpFAdd %249 %250 
                                                      OpStore %244 %251 
                                 Output f32* %253 = OpAccessChain %82 %24 %78 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpFNegate %254 
                                 Output f32* %256 = OpAccessChain %82 %24 %78 
                                                      OpStore %256 %255 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 402
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %30 %158 %238 %243 %248 %391 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpMemberDecorate %10 0 Offset 10 
                                                      OpMemberDecorate %10 1 Offset 10 
                                                      OpMemberDecorate %10 2 Offset 10 
                                                      OpMemberDecorate %10 3 Offset 10 
                                                      OpMemberDecorate %10 4 RelaxedPrecision 
                                                      OpMemberDecorate %10 4 Offset 10 
                                                      OpMemberDecorate %10 5 RelaxedPrecision 
                                                      OpMemberDecorate %10 5 Offset 10 
                                                      OpMemberDecorate %10 6 RelaxedPrecision 
                                                      OpMemberDecorate %10 6 Offset 10 
                                                      OpMemberDecorate %10 7 RelaxedPrecision 
                                                      OpMemberDecorate %10 7 Offset 10 
                                                      OpMemberDecorate %10 8 RelaxedPrecision 
                                                      OpMemberDecorate %10 8 Offset 10 
                                                      OpMemberDecorate %10 9 RelaxedPrecision 
                                                      OpMemberDecorate %10 9 Offset 10 
                                                      OpMemberDecorate %10 10 RelaxedPrecision 
                                                      OpMemberDecorate %10 10 Offset 10 
                                                      OpMemberDecorate %10 11 RelaxedPrecision 
                                                      OpMemberDecorate %10 11 Offset 10 
                                                      OpMemberDecorate %10 12 RelaxedPrecision 
                                                      OpMemberDecorate %10 12 Offset 10 
                                                      OpMemberDecorate %10 13 RelaxedPrecision 
                                                      OpMemberDecorate %10 13 Offset 10 
                                                      OpMemberDecorate %10 14 Offset 10 
                                                      OpMemberDecorate %10 15 Offset 10 
                                                      OpDecorate %10 Block 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %93 DescriptorSet 93 
                                                      OpDecorate %93 Binding 93 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %238 Location 238 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate %248 Location 248 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %391 Location 391 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypePointer Private %6 
                                  Private f32* %8 = OpVariable Private 
                                               %9 = OpTypeVector %6 4 
                                              %10 = OpTypeStruct %9 %9 %9 %9 %9 %9 %6 %6 %6 %6 %6 %6 %6 %9 %9 %6 
                                              %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32;}* %12 = OpVariable Uniform 
                                              %13 = OpTypeInt 32 1 
                                          i32 %14 = OpConstant 0 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 1 
                                              %17 = OpTypePointer Uniform %6 
                                          i32 %20 = OpConstant 3 
                                          f32 %25 = OpConstant 3.674022E-40 
                                              %27 = OpTypePointer Private %9 
                               Private f32_4* %28 = OpVariable Private 
                                              %29 = OpTypePointer Input %9 
                                 Input f32_4* %30 = OpVariable Input 
                                          i32 %33 = OpConstant 7 
                               Private f32_4* %49 = OpVariable Private 
                                          i32 %52 = OpConstant 11 
                                          i32 %57 = OpConstant 12 
                                              %66 = OpTypeVector %6 2 
                                              %67 = OpTypePointer Private %66 
                               Private f32_2* %68 = OpVariable Private 
                                          f32 %71 = OpConstant 3.674022E-40 
                                          f32 %72 = OpConstant 3.674022E-40 
                                        f32_2 %73 = OpConstantComposite %71 %72 
                                          i32 %77 = OpConstant 14 
                                              %78 = OpTypePointer Uniform %9 
                               Private f32_4* %89 = OpVariable Private 
                                              %90 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %91 = OpTypeSampledImage %90 
                                              %92 = OpTypePointer UniformConstant %91 
  UniformConstant read_only Texture2DSampled* %93 = OpVariable UniformConstant 
                                          i32 %97 = OpConstant 15 
                              Private f32_4* %112 = OpVariable Private 
                                         u32 %119 = OpConstant 3 
                                         i32 %122 = OpConstant 8 
                                         u32 %126 = OpConstant 0 
                                         f32 %130 = OpConstant 3.674022E-40 
                                             %133 = OpTypeVector %6 3 
                                             %134 = OpTypePointer Private %133 
                              Private f32_3* %135 = OpVariable Private 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_3 %139 = OpConstantComposite %138 %138 %138 
                                         f32 %154 = OpConstant 3.674022E-40 
                                       f32_3 %155 = OpConstantComposite %154 %154 %154 
                                Private f32* %157 = OpVariable Private 
                                Input f32_4* %158 = OpVariable Input 
                                             %159 = OpTypePointer Input %6 
                              Private f32_3* %169 = OpVariable Private 
                                         i32 %185 = OpConstant 13 
                                         i32 %193 = OpConstant 9 
                                         i32 %197 = OpConstant 10 
                                             %219 = OpTypeBool 
                                             %220 = OpTypePointer Private %219 
                               Private bool* %221 = OpVariable Private 
                                         i32 %226 = OpConstant 1 
                                         i32 %228 = OpConstant -1 
                              Private f32_3* %234 = OpVariable Private 
                                             %237 = OpTypePointer Input %133 
                                Input f32_3* %238 = OpVariable Input 
                                Input f32_3* %243 = OpVariable Input 
                                Input f32_3* %248 = OpVariable Input 
                              Private f32_3* %257 = OpVariable Private 
                                Private f32* %298 = OpVariable Private 
                                         i32 %321 = OpConstant 5 
                                Private f32* %327 = OpVariable Private 
                                         u32 %330 = OpConstant 2 
                                         i32 %337 = OpConstant 6 
                              Private f32_3* %348 = OpVariable Private 
                                         i32 %349 = OpConstant 4 
                                         i32 %368 = OpConstant 2 
                                       f32_3 %373 = OpConstantComposite %130 %130 %130 
                                             %390 = OpTypePointer Output %9 
                               Output f32_4* %391 = OpVariable Output 
                                             %399 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %18 = OpAccessChain %12 %14 %16 
                                          f32 %19 = OpLoad %18 
                                 Uniform f32* %21 = OpAccessChain %12 %20 %16 
                                          f32 %22 = OpLoad %21 
                                          f32 %23 = OpFAdd %19 %22 
                                                      OpStore %8 %23 
                                          f32 %24 = OpLoad %8 
                                          f32 %26 = OpFMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 2 0 2 
                                 Uniform f32* %34 = OpAccessChain %12 %33 
                                          f32 %35 = OpLoad %34 
                                 Uniform f32* %36 = OpAccessChain %12 %33 
                                          f32 %37 = OpLoad %36 
                                 Uniform f32* %38 = OpAccessChain %12 %33 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %12 %33 
                                          f32 %41 = OpLoad %40 
                                        f32_4 %42 = OpCompositeConstruct %35 %37 %39 %41 
                                          f32 %43 = OpCompositeExtract %42 0 
                                          f32 %44 = OpCompositeExtract %42 1 
                                          f32 %45 = OpCompositeExtract %42 2 
                                          f32 %46 = OpCompositeExtract %42 3 
                                        f32_4 %47 = OpCompositeConstruct %43 %44 %45 %46 
                                        f32_4 %48 = OpFDiv %32 %47 
                                                      OpStore %28 %48 
                                          f32 %50 = OpLoad %8 
                                        f32_4 %51 = OpCompositeConstruct %50 %50 %50 %50 
                                 Uniform f32* %53 = OpAccessChain %12 %52 
                                          f32 %54 = OpLoad %53 
                                 Uniform f32* %55 = OpAccessChain %12 %52 
                                          f32 %56 = OpLoad %55 
                                 Uniform f32* %58 = OpAccessChain %12 %57 
                                          f32 %59 = OpLoad %58 
                                 Uniform f32* %60 = OpAccessChain %12 %57 
                                          f32 %61 = OpLoad %60 
                                        f32_4 %62 = OpCompositeConstruct %54 %56 %59 %61 
                                        f32_4 %63 = OpFMul %51 %62 
                                        f32_4 %64 = OpLoad %28 
                                        f32_4 %65 = OpFAdd %63 %64 
                                                      OpStore %49 %65 
                                        f32_4 %69 = OpLoad %49 
                                        f32_2 %70 = OpVectorShuffle %69 %69 2 3 
                                        f32_2 %74 = OpFAdd %70 %73 
                                                      OpStore %68 %74 
                                        f32_4 %75 = OpLoad %49 
                                        f32_2 %76 = OpVectorShuffle %75 %75 0 1 
                               Uniform f32_4* %79 = OpAccessChain %12 %77 
                                        f32_4 %80 = OpLoad %79 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpFMul %76 %81 
                               Uniform f32_4* %83 = OpAccessChain %12 %77 
                                        f32_4 %84 = OpLoad %83 
                                        f32_2 %85 = OpVectorShuffle %84 %84 2 3 
                                        f32_2 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %28 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 2 3 
                                                      OpStore %28 %88 
                   read_only Texture2DSampled %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %28 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                                 Uniform f32* %98 = OpAccessChain %12 %97 
                                          f32 %99 = OpLoad %98 
                                       f32_4 %100 = OpImageSampleExplicitLod %94 %96 Lod %9 
                                                      OpStore %89 %100 
                                       f32_2 %101 = OpLoad %68 
                              Uniform f32_4* %102 = OpAccessChain %12 %77 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %101 %104 
                              Uniform f32_4* %106 = OpAccessChain %12 %77 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                       f32_4 %110 = OpLoad %28 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 3 
                                                      OpStore %28 %111 
                  read_only Texture2DSampled %113 = OpLoad %93 
                                       f32_4 %114 = OpLoad %28 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                                Uniform f32* %116 = OpAccessChain %12 %97 
                                         f32 %117 = OpLoad %116 
                                       f32_4 %118 = OpImageSampleExplicitLod %113 %115 Lod %9 
                                                      OpStore %112 %118 
                                Private f32* %120 = OpAccessChain %89 %119 
                                         f32 %121 = OpLoad %120 
                                Uniform f32* %123 = OpAccessChain %12 %122 
                                         f32 %124 = OpLoad %123 
                                         f32 %125 = OpFAdd %121 %124 
                                Private f32* %127 = OpAccessChain %68 %126 
                                                      OpStore %127 %125 
                                Private f32* %128 = OpAccessChain %68 %126 
                                         f32 %129 = OpLoad %128 
                                         f32 %131 = OpExtInst %1 43 %129 %71 %130 
                                Private f32* %132 = OpAccessChain %68 %126 
                                                      OpStore %132 %131 
                                       f32_4 %136 = OpLoad %89 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %140 = OpFMul %137 %139 
                                Uniform f32* %141 = OpAccessChain %12 %122 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %143 = OpAccessChain %12 %122 
                                         f32 %144 = OpLoad %143 
                                Uniform f32* %145 = OpAccessChain %12 %122 
                                         f32 %146 = OpLoad %145 
                                       f32_3 %147 = OpCompositeConstruct %142 %144 %146 
                                         f32 %148 = OpCompositeExtract %147 0 
                                         f32 %149 = OpCompositeExtract %147 1 
                                         f32 %150 = OpCompositeExtract %147 2 
                                       f32_3 %151 = OpCompositeConstruct %148 %149 %150 
                                       f32_3 %152 = OpFAdd %140 %151 
                                                      OpStore %135 %152 
                                       f32_3 %153 = OpLoad %135 
                                       f32_3 %156 = OpFAdd %153 %155 
                                                      OpStore %135 %156 
                                  Input f32* %160 = OpAccessChain %158 %119 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %68 %126 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                Private f32* %165 = OpAccessChain %112 %119 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFNegate %166 
                                         f32 %168 = OpFAdd %164 %167 
                                                      OpStore %157 %168 
                                       f32_4 %170 = OpLoad %112 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFMul %171 %139 
                                       f32_3 %173 = OpFAdd %172 %155 
                                                      OpStore %169 %173 
                                       f32_4 %174 = OpLoad %158 
                                       f32_3 %175 = OpVectorShuffle %174 %174 3 3 3 
                                       f32_3 %176 = OpLoad %135 
                                       f32_3 %177 = OpFMul %175 %176 
                                       f32_3 %178 = OpLoad %169 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %177 %179 
                                       f32_4 %181 = OpLoad %28 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %28 %182 
                                       f32_4 %183 = OpLoad %28 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                              Uniform f32_4* %186 = OpAccessChain %12 %185 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFMul %184 %188 
                                       f32_4 %190 = OpLoad %28 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %28 %191 
                                         f32 %192 = OpLoad %157 
                                Uniform f32* %194 = OpAccessChain %12 %193 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFMul %192 %195 
                                Uniform f32* %198 = OpAccessChain %12 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %196 %200 
                                Private f32* %202 = OpAccessChain %68 %126 
                                                      OpStore %202 %201 
                                         f32 %203 = OpLoad %157 
                                Uniform f32* %204 = OpAccessChain %12 %193 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %203 %205 
                                                      OpStore %157 %206 
                                Private f32* %207 = OpAccessChain %68 %126 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpExtInst %1 9 %208 
                                Private f32* %210 = OpAccessChain %68 %126 
                                                      OpStore %210 %209 
                                Private f32* %211 = OpAccessChain %68 %126 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpExtInst %1 43 %212 %71 %130 
                                Private f32* %214 = OpAccessChain %68 %126 
                                                      OpStore %214 %213 
                                Private f32* %215 = OpAccessChain %68 %126 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFAdd %216 %154 
                                Private f32* %218 = OpAccessChain %68 %126 
                                                      OpStore %218 %217 
                                Private f32* %222 = OpAccessChain %68 %126 
                                         f32 %223 = OpLoad %222 
                                        bool %224 = OpFOrdLessThan %223 %71 
                                                      OpStore %221 %224 
                                        bool %225 = OpLoad %221 
                                         i32 %227 = OpSelect %225 %226 %14 
                                         i32 %229 = OpIMul %227 %228 
                                        bool %230 = OpINotEqual %229 %14 
                                                      OpSelectionMerge %232 None 
                                                      OpBranchConditional %230 %231 %232 
                                             %231 = OpLabel 
                                                      OpKill
                                             %232 = OpLabel 
                                       f32_4 %235 = OpLoad %28 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                                       f32_3 %239 = OpLoad %238 
                                       f32_3 %240 = OpFMul %236 %239 
                                                      OpStore %234 %240 
                                       f32_4 %241 = OpLoad %28 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 0 0 
                                       f32_3 %244 = OpLoad %243 
                                       f32_3 %245 = OpFMul %242 %244 
                                       f32_3 %246 = OpLoad %234 
                                       f32_3 %247 = OpFAdd %245 %246 
                                                      OpStore %234 %247 
                                       f32_3 %249 = OpLoad %248 
                                       f32_3 %250 = OpLoad %248 
                                         f32 %251 = OpDot %249 %250 
                                Private f32* %252 = OpAccessChain %28 %126 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %28 %126 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpExtInst %1 32 %254 
                                Private f32* %256 = OpAccessChain %28 %126 
                                                      OpStore %256 %255 
                                       f32_4 %258 = OpLoad %28 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 0 0 
                                       f32_3 %260 = OpLoad %248 
                                       f32_3 %261 = OpFMul %259 %260 
                                                      OpStore %257 %261 
                                       f32_4 %262 = OpLoad %28 
                                       f32_3 %263 = OpVectorShuffle %262 %262 2 2 2 
                                       f32_3 %264 = OpLoad %257 
                                       f32_3 %265 = OpFMul %263 %264 
                                       f32_3 %266 = OpLoad %234 
                                       f32_3 %267 = OpFAdd %265 %266 
                                       f32_4 %268 = OpLoad %28 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %28 %269 
                                       f32_4 %270 = OpLoad %28 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_4 %272 = OpLoad %28 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                         f32 %274 = OpDot %271 %273 
                                Private f32* %275 = OpAccessChain %234 %126 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %234 %126 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpExtInst %1 32 %277 
                                Private f32* %279 = OpAccessChain %234 %126 
                                                      OpStore %279 %278 
                                       f32_4 %280 = OpLoad %28 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpLoad %234 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 0 0 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_4 %285 = OpLoad %28 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %28 %286 
                              Uniform f32_4* %287 = OpAccessChain %12 %226 
                                       f32_4 %288 = OpLoad %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 3 3 3 
                                       f32_4 %290 = OpLoad %30 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFNegate %291 
                                       f32_3 %293 = OpFMul %289 %292 
                              Uniform f32_4* %294 = OpAccessChain %12 %226 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpFAdd %293 %296 
                                                      OpStore %234 %297 
                                       f32_3 %299 = OpLoad %234 
                                       f32_3 %300 = OpLoad %234 
                                         f32 %301 = OpDot %299 %300 
                                                      OpStore %298 %301 
                                         f32 %302 = OpLoad %298 
                                         f32 %303 = OpExtInst %1 32 %302 
                                                      OpStore %298 %303 
                                         f32 %304 = OpLoad %298 
                                       f32_3 %305 = OpCompositeConstruct %304 %304 %304 
                                       f32_3 %306 = OpLoad %234 
                                       f32_3 %307 = OpFMul %305 %306 
                                                      OpStore %234 %307 
                                       f32_4 %308 = OpLoad %28 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpLoad %234 
                                         f32 %311 = OpDot %309 %310 
                                Private f32* %312 = OpAccessChain %28 %126 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %28 %126 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                         f32 %316 = OpFAdd %315 %130 
                                Private f32* %317 = OpAccessChain %28 %126 
                                                      OpStore %317 %316 
                                Private f32* %318 = OpAccessChain %28 %126 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFNegate %319 
                                Uniform f32* %322 = OpAccessChain %12 %321 %119 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFMul %320 %323 
                                         f32 %325 = OpFAdd %324 %130 
                                Private f32* %326 = OpAccessChain %28 %126 
                                                      OpStore %326 %325 
                                Uniform f32* %328 = OpAccessChain %12 %185 %16 
                                         f32 %329 = OpLoad %328 
                                  Input f32* %331 = OpAccessChain %158 %330 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %329 %332 
                                         f32 %334 = OpFAdd %333 %130 
                                                      OpStore %327 %334 
                                         f32 %335 = OpLoad %327 
                                         f32 %336 = OpFMul %335 %72 
                                Uniform f32* %338 = OpAccessChain %12 %337 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFAdd %336 %339 
                                                      OpStore %327 %340 
                                         f32 %341 = OpLoad %327 
                                         f32 %342 = OpExtInst %1 43 %341 %71 %130 
                                                      OpStore %327 %342 
                                         f32 %343 = OpLoad %327 
                                Private f32* %344 = OpAccessChain %28 %126 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFMul %343 %345 
                                Private f32* %347 = OpAccessChain %28 %126 
                                                      OpStore %347 %346 
                              Uniform f32_4* %350 = OpAccessChain %12 %349 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                              Uniform f32_4* %353 = OpAccessChain %12 %321 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFNegate %355 
                                       f32_3 %357 = OpFAdd %352 %356 
                                                      OpStore %348 %357 
                                       f32_4 %358 = OpLoad %28 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 0 0 
                                       f32_3 %360 = OpLoad %348 
                                       f32_3 %361 = OpFMul %359 %360 
                              Uniform f32_4* %362 = OpAccessChain %12 %321 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_3 %365 = OpFAdd %361 %364 
                                       f32_4 %366 = OpLoad %28 
                                       f32_4 %367 = OpVectorShuffle %366 %365 4 5 6 3 
                                                      OpStore %28 %367 
                              Uniform f32_4* %369 = OpAccessChain %12 %368 
                                       f32_4 %370 = OpLoad %369 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFNegate %371 
                                       f32_3 %374 = OpFAdd %372 %373 
                                                      OpStore %234 %374 
                              Uniform f32_4* %375 = OpAccessChain %12 %349 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpLoad %234 
                                       f32_3 %379 = OpFMul %377 %378 
                              Uniform f32_4* %380 = OpAccessChain %12 %368 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFAdd %379 %382 
                                                      OpStore %234 %383 
                                       f32_4 %384 = OpLoad %28 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpLoad %234 
                                       f32_3 %387 = OpFMul %385 %386 
                                       f32_4 %388 = OpLoad %28 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %28 %389 
                                         f32 %392 = OpLoad %157 
                                       f32_3 %393 = OpCompositeConstruct %392 %392 %392 
                                       f32_4 %394 = OpLoad %28 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %396 = OpFMul %393 %395 
                                       f32_4 %397 = OpLoad %391 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 5 6 3 
                                                      OpStore %391 %398 
                                 Output f32* %400 = OpAccessChain %391 %119 
                                                      OpStore %400 %71 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 _TimeEditor;
uniform 	vec4 _BaseColor;
uniform 	vec4 _Shading;
uniform 	float _DepthIntensity;
uniform 	float _Tiling;
uniform 	float _Density;
uniform 	float _Alpha;
uniform 	float _AlphaCut;
uniform 	float _Speed;
uniform 	float _SpeedSecondLayer;
uniform 	vec4 _CloudNormalsDirection;
uniform 	vec4 _PerlinNormalMap_ST;
uniform 	float _MipLevel;
uniform  sampler2D _PerlinNormalMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec3 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.x = _Time.y + _TimeEditor.y;
    u_xlat0.x = u_xlat0.x * 0.00100000005;
    u_xlat1 = vs_TEXCOORD0.xzxz / vec4(vec4(_Tiling, _Tiling, _Tiling, _Tiling));
    u_xlat0 = u_xlat0.xxxx * vec4(_Speed, _Speed, _SpeedSecondLayer, _SpeedSecondLayer) + u_xlat1;
    u_xlat6.xy = u_xlat0.zw + vec2(0.0, 0.5);
    u_xlat0.xy = u_xlat0.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat0.xy = u_xlat6.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_0 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat10 = u_xlat10_1.w + _Density;
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(vec3(_Density, _Density, _Density));
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat9 = vs_COLOR0.w * u_xlat10 + (-u_xlat10_0.w);
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + (-u_xlat16_0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * _CloudNormalsDirection.xyz;
    u_xlat1.x = u_xlat9 * _Alpha + (-_AlphaCut);
    u_xlat9 = u_xlat9 * _Alpha;
    u_xlat1.x = ceil(u_xlat1.x);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x + -1.0;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz + u_xlat1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = (-u_xlat0.x) * _Shading.w + 1.0;
    u_xlat3 = _CloudNormalsDirection.y * vs_COLOR0.z + 1.0;
    u_xlat3 = u_xlat3 * 0.5 + _DepthIntensity;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat0.x = u_xlat3 * u_xlat0.x;
    u_xlat1.xyz = _BaseColor.xyz + (-_Shading.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + _Shading.xyz;
    u_xlat1.xyz = (-_LightColor0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = _BaseColor.www * u_xlat1.xyz + _LightColor0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 271
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %82 %92 %96 %134 %137 %182 %216 %222 %223 %255 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate %92 Location 92 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %182 Location 182 
                                                      OpDecorate %216 Location 216 
                                                      OpDecorate %222 Location 222 
                                                      OpDecorate %223 Location 223 
                                                      OpDecorate %255 Location 255 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %16 %17 %18 %19 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4];}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 0 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %58 = OpVariable Private 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %90 = OpTypePointer Output %7 
                                Output f32_4* %92 = OpVariable Output 
                                              %94 = OpTypeVector %6 3 
                                              %95 = OpTypePointer Input %94 
                                 Input f32_3* %96 = OpVariable Input 
                                         u32 %102 = OpConstant 0 
                                             %103 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 2 
                                Private f32* %118 = OpVariable Private 
                                             %133 = OpTypePointer Output %94 
                               Output f32_3* %134 = OpVariable Output 
                                Input f32_4* %137 = OpVariable Input 
                               Output f32_3* %182 = OpVariable Output 
                                             %185 = OpTypePointer Private %94 
                              Private f32_3* %186 = OpVariable Private 
                               Output f32_3* %216 = OpVariable Output 
                               Output f32_4* %222 = OpVariable Output 
                                Input f32_4* %223 = OpVariable Input 
                               Output f32_3* %255 = OpVariable Output 
                                             %265 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %51 = OpAccessChain %22 %24 %47 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %11 
                                        f32_4 %54 = OpVectorShuffle %53 %53 3 3 3 3 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %9 %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %61 = OpAccessChain %22 %37 %25 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpFMul %60 %62 
                                                      OpStore %58 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %37 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 0 0 0 0 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %58 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %58 %70 
                               Uniform f32_4* %71 = OpAccessChain %22 %37 %37 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %45 
                                        f32_4 %74 = OpVectorShuffle %73 %73 2 2 2 2 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %58 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %58 %77 
                               Uniform f32_4* %83 = OpAccessChain %22 %37 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %58 
                                        f32_4 %89 = OpFAdd %87 %88 
                                Output f32_4* %91 = OpAccessChain %82 %24 
                                                      OpStore %91 %89 
                                        f32_4 %93 = OpLoad %9 
                                                      OpStore %92 %93 
                                        f32_3 %97 = OpLoad %96 
                               Uniform f32_4* %98 = OpAccessChain %22 %25 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                         f32 %101 = OpDot %97 %100 
                                Private f32* %104 = OpAccessChain %45 %102 
                                                      OpStore %104 %101 
                                       f32_3 %105 = OpLoad %96 
                              Uniform f32_4* %106 = OpAccessChain %22 %25 %25 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %105 %108 
                                Private f32* %110 = OpAccessChain %45 %78 
                                                      OpStore %110 %109 
                                       f32_3 %111 = OpLoad %96 
                              Uniform f32_4* %112 = OpAccessChain %22 %25 %37 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %117 = OpAccessChain %45 %116 
                                                      OpStore %117 %115 
                                       f32_4 %119 = OpLoad %45 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_4 %121 = OpLoad %45 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %120 %122 
                                                      OpStore %118 %123 
                                         f32 %124 = OpLoad %118 
                                         f32 %125 = OpExtInst %1 32 %124 
                                                      OpStore %118 %125 
                                         f32 %126 = OpLoad %118 
                                       f32_3 %127 = OpCompositeConstruct %126 %126 %126 
                                       f32_4 %128 = OpLoad %45 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %45 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 6 3 
                                                      OpStore %45 %132 
                                       f32_4 %135 = OpLoad %45 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                                      OpStore %134 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 1 1 1 
                              Uniform f32_4* %140 = OpAccessChain %22 %24 %25 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %139 %142 
                                       f32_4 %144 = OpLoad %58 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 6 3 
                                                      OpStore %58 %145 
                              Uniform f32_4* %146 = OpAccessChain %22 %24 %24 
                                       f32_4 %147 = OpLoad %146 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_4 %149 = OpLoad %137 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 0 0 
                                       f32_3 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %58 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFAdd %151 %153 
                                       f32_4 %155 = OpLoad %58 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %58 %156 
                              Uniform f32_4* %157 = OpAccessChain %22 %24 %37 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %137 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %58 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                       f32_3 %165 = OpFAdd %162 %164 
                                       f32_4 %166 = OpLoad %58 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
                                                      OpStore %58 %167 
                                       f32_4 %168 = OpLoad %58 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_4 %170 = OpLoad %58 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %169 %171 
                                                      OpStore %118 %172 
                                         f32 %173 = OpLoad %118 
                                         f32 %174 = OpExtInst %1 32 %173 
                                                      OpStore %118 %174 
                                         f32 %175 = OpLoad %118 
                                       f32_3 %176 = OpCompositeConstruct %175 %175 %175 
                                       f32_4 %177 = OpLoad %58 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFMul %176 %178 
                                       f32_4 %180 = OpLoad %58 
                                       f32_4 %181 = OpVectorShuffle %180 %179 4 5 6 3 
                                                      OpStore %58 %181 
                                       f32_4 %183 = OpLoad %58 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                                      OpStore %182 %184 
                                       f32_4 %187 = OpLoad %45 
                                       f32_3 %188 = OpVectorShuffle %187 %187 2 0 1 
                                       f32_4 %189 = OpLoad %58 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 2 0 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                       f32_4 %192 = OpLoad %45 
                                       f32_3 %193 = OpVectorShuffle %192 %192 1 2 0 
                                       f32_4 %194 = OpLoad %58 
                                       f32_3 %195 = OpVectorShuffle %194 %194 2 0 1 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_3 %197 = OpLoad %186 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %196 %198 
                                       f32_4 %200 = OpLoad %45 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
                                                      OpStore %45 %201 
                                       f32_4 %202 = OpLoad %45 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                       f32_4 %204 = OpLoad %137 
                                       f32_3 %205 = OpVectorShuffle %204 %204 3 3 3 
                                       f32_3 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %45 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %45 %208 
                                       f32_4 %209 = OpLoad %45 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_4 %211 = OpLoad %45 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                         f32 %213 = OpDot %210 %212 
                                                      OpStore %118 %213 
                                         f32 %214 = OpLoad %118 
                                         f32 %215 = OpExtInst %1 32 %214 
                                                      OpStore %118 %215 
                                         f32 %217 = OpLoad %118 
                                       f32_3 %218 = OpCompositeConstruct %217 %217 %217 
                                       f32_4 %219 = OpLoad %45 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpFMul %218 %220 
                                                      OpStore %216 %221 
                                       f32_4 %224 = OpLoad %223 
                                                      OpStore %222 %224 
                                       f32_4 %225 = OpLoad %9 
                                       f32_3 %226 = OpVectorShuffle %225 %225 1 1 1 
                              Uniform f32_4* %227 = OpAccessChain %22 %47 %25 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFMul %226 %229 
                                       f32_4 %231 = OpLoad %45 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %45 %232 
                              Uniform f32_4* %233 = OpAccessChain %22 %47 %24 
                                       f32_4 %234 = OpLoad %233 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %235 %237 
                                       f32_4 %239 = OpLoad %45 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFAdd %238 %240 
                                       f32_4 %242 = OpLoad %45 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %45 %243 
                              Uniform f32_4* %244 = OpAccessChain %22 %47 %37 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_4 %247 = OpLoad %9 
                                       f32_3 %248 = OpVectorShuffle %247 %247 2 2 2 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %45 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %9 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %9 %254 
                              Uniform f32_4* %256 = OpAccessChain %22 %47 %47 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 3 3 3 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_4 %262 = OpLoad %9 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_3 %264 = OpFAdd %261 %263 
                                                      OpStore %255 %264 
                                 Output f32* %266 = OpAccessChain %82 %24 %78 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFNegate %267 
                                 Output f32* %269 = OpAccessChain %82 %24 %78 
                                                      OpStore %269 %268 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 402
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %30 %158 %238 %243 %248 %391 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpMemberDecorate %10 0 Offset 10 
                                                      OpMemberDecorate %10 1 Offset 10 
                                                      OpMemberDecorate %10 2 Offset 10 
                                                      OpMemberDecorate %10 3 Offset 10 
                                                      OpMemberDecorate %10 4 RelaxedPrecision 
                                                      OpMemberDecorate %10 4 Offset 10 
                                                      OpMemberDecorate %10 5 RelaxedPrecision 
                                                      OpMemberDecorate %10 5 Offset 10 
                                                      OpMemberDecorate %10 6 RelaxedPrecision 
                                                      OpMemberDecorate %10 6 Offset 10 
                                                      OpMemberDecorate %10 7 RelaxedPrecision 
                                                      OpMemberDecorate %10 7 Offset 10 
                                                      OpMemberDecorate %10 8 RelaxedPrecision 
                                                      OpMemberDecorate %10 8 Offset 10 
                                                      OpMemberDecorate %10 9 RelaxedPrecision 
                                                      OpMemberDecorate %10 9 Offset 10 
                                                      OpMemberDecorate %10 10 RelaxedPrecision 
                                                      OpMemberDecorate %10 10 Offset 10 
                                                      OpMemberDecorate %10 11 RelaxedPrecision 
                                                      OpMemberDecorate %10 11 Offset 10 
                                                      OpMemberDecorate %10 12 RelaxedPrecision 
                                                      OpMemberDecorate %10 12 Offset 10 
                                                      OpMemberDecorate %10 13 RelaxedPrecision 
                                                      OpMemberDecorate %10 13 Offset 10 
                                                      OpMemberDecorate %10 14 Offset 10 
                                                      OpMemberDecorate %10 15 Offset 10 
                                                      OpDecorate %10 Block 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %93 DescriptorSet 93 
                                                      OpDecorate %93 Binding 93 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %238 Location 238 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate %248 Location 248 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %391 Location 391 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypePointer Private %6 
                                  Private f32* %8 = OpVariable Private 
                                               %9 = OpTypeVector %6 4 
                                              %10 = OpTypeStruct %9 %9 %9 %9 %9 %9 %6 %6 %6 %6 %6 %6 %6 %9 %9 %6 
                                              %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32;}* %12 = OpVariable Uniform 
                                              %13 = OpTypeInt 32 1 
                                          i32 %14 = OpConstant 0 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 1 
                                              %17 = OpTypePointer Uniform %6 
                                          i32 %20 = OpConstant 3 
                                          f32 %25 = OpConstant 3.674022E-40 
                                              %27 = OpTypePointer Private %9 
                               Private f32_4* %28 = OpVariable Private 
                                              %29 = OpTypePointer Input %9 
                                 Input f32_4* %30 = OpVariable Input 
                                          i32 %33 = OpConstant 7 
                               Private f32_4* %49 = OpVariable Private 
                                          i32 %52 = OpConstant 11 
                                          i32 %57 = OpConstant 12 
                                              %66 = OpTypeVector %6 2 
                                              %67 = OpTypePointer Private %66 
                               Private f32_2* %68 = OpVariable Private 
                                          f32 %71 = OpConstant 3.674022E-40 
                                          f32 %72 = OpConstant 3.674022E-40 
                                        f32_2 %73 = OpConstantComposite %71 %72 
                                          i32 %77 = OpConstant 14 
                                              %78 = OpTypePointer Uniform %9 
                               Private f32_4* %89 = OpVariable Private 
                                              %90 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %91 = OpTypeSampledImage %90 
                                              %92 = OpTypePointer UniformConstant %91 
  UniformConstant read_only Texture2DSampled* %93 = OpVariable UniformConstant 
                                          i32 %97 = OpConstant 15 
                              Private f32_4* %112 = OpVariable Private 
                                         u32 %119 = OpConstant 3 
                                         i32 %122 = OpConstant 8 
                                         u32 %126 = OpConstant 0 
                                         f32 %130 = OpConstant 3.674022E-40 
                                             %133 = OpTypeVector %6 3 
                                             %134 = OpTypePointer Private %133 
                              Private f32_3* %135 = OpVariable Private 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_3 %139 = OpConstantComposite %138 %138 %138 
                                         f32 %154 = OpConstant 3.674022E-40 
                                       f32_3 %155 = OpConstantComposite %154 %154 %154 
                                Private f32* %157 = OpVariable Private 
                                Input f32_4* %158 = OpVariable Input 
                                             %159 = OpTypePointer Input %6 
                              Private f32_3* %169 = OpVariable Private 
                                         i32 %185 = OpConstant 13 
                                         i32 %193 = OpConstant 9 
                                         i32 %197 = OpConstant 10 
                                             %219 = OpTypeBool 
                                             %220 = OpTypePointer Private %219 
                               Private bool* %221 = OpVariable Private 
                                         i32 %226 = OpConstant 1 
                                         i32 %228 = OpConstant -1 
                              Private f32_3* %234 = OpVariable Private 
                                             %237 = OpTypePointer Input %133 
                                Input f32_3* %238 = OpVariable Input 
                                Input f32_3* %243 = OpVariable Input 
                                Input f32_3* %248 = OpVariable Input 
                              Private f32_3* %257 = OpVariable Private 
                                Private f32* %298 = OpVariable Private 
                                         i32 %321 = OpConstant 5 
                                Private f32* %327 = OpVariable Private 
                                         u32 %330 = OpConstant 2 
                                         i32 %337 = OpConstant 6 
                              Private f32_3* %348 = OpVariable Private 
                                         i32 %349 = OpConstant 4 
                                         i32 %368 = OpConstant 2 
                                       f32_3 %373 = OpConstantComposite %130 %130 %130 
                                             %390 = OpTypePointer Output %9 
                               Output f32_4* %391 = OpVariable Output 
                                             %399 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %18 = OpAccessChain %12 %14 %16 
                                          f32 %19 = OpLoad %18 
                                 Uniform f32* %21 = OpAccessChain %12 %20 %16 
                                          f32 %22 = OpLoad %21 
                                          f32 %23 = OpFAdd %19 %22 
                                                      OpStore %8 %23 
                                          f32 %24 = OpLoad %8 
                                          f32 %26 = OpFMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 2 0 2 
                                 Uniform f32* %34 = OpAccessChain %12 %33 
                                          f32 %35 = OpLoad %34 
                                 Uniform f32* %36 = OpAccessChain %12 %33 
                                          f32 %37 = OpLoad %36 
                                 Uniform f32* %38 = OpAccessChain %12 %33 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %12 %33 
                                          f32 %41 = OpLoad %40 
                                        f32_4 %42 = OpCompositeConstruct %35 %37 %39 %41 
                                          f32 %43 = OpCompositeExtract %42 0 
                                          f32 %44 = OpCompositeExtract %42 1 
                                          f32 %45 = OpCompositeExtract %42 2 
                                          f32 %46 = OpCompositeExtract %42 3 
                                        f32_4 %47 = OpCompositeConstruct %43 %44 %45 %46 
                                        f32_4 %48 = OpFDiv %32 %47 
                                                      OpStore %28 %48 
                                          f32 %50 = OpLoad %8 
                                        f32_4 %51 = OpCompositeConstruct %50 %50 %50 %50 
                                 Uniform f32* %53 = OpAccessChain %12 %52 
                                          f32 %54 = OpLoad %53 
                                 Uniform f32* %55 = OpAccessChain %12 %52 
                                          f32 %56 = OpLoad %55 
                                 Uniform f32* %58 = OpAccessChain %12 %57 
                                          f32 %59 = OpLoad %58 
                                 Uniform f32* %60 = OpAccessChain %12 %57 
                                          f32 %61 = OpLoad %60 
                                        f32_4 %62 = OpCompositeConstruct %54 %56 %59 %61 
                                        f32_4 %63 = OpFMul %51 %62 
                                        f32_4 %64 = OpLoad %28 
                                        f32_4 %65 = OpFAdd %63 %64 
                                                      OpStore %49 %65 
                                        f32_4 %69 = OpLoad %49 
                                        f32_2 %70 = OpVectorShuffle %69 %69 2 3 
                                        f32_2 %74 = OpFAdd %70 %73 
                                                      OpStore %68 %74 
                                        f32_4 %75 = OpLoad %49 
                                        f32_2 %76 = OpVectorShuffle %75 %75 0 1 
                               Uniform f32_4* %79 = OpAccessChain %12 %77 
                                        f32_4 %80 = OpLoad %79 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpFMul %76 %81 
                               Uniform f32_4* %83 = OpAccessChain %12 %77 
                                        f32_4 %84 = OpLoad %83 
                                        f32_2 %85 = OpVectorShuffle %84 %84 2 3 
                                        f32_2 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %28 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 2 3 
                                                      OpStore %28 %88 
                   read_only Texture2DSampled %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %28 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                                 Uniform f32* %98 = OpAccessChain %12 %97 
                                          f32 %99 = OpLoad %98 
                                       f32_4 %100 = OpImageSampleExplicitLod %94 %96 Lod %9 
                                                      OpStore %89 %100 
                                       f32_2 %101 = OpLoad %68 
                              Uniform f32_4* %102 = OpAccessChain %12 %77 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %101 %104 
                              Uniform f32_4* %106 = OpAccessChain %12 %77 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                       f32_4 %110 = OpLoad %28 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 3 
                                                      OpStore %28 %111 
                  read_only Texture2DSampled %113 = OpLoad %93 
                                       f32_4 %114 = OpLoad %28 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                                Uniform f32* %116 = OpAccessChain %12 %97 
                                         f32 %117 = OpLoad %116 
                                       f32_4 %118 = OpImageSampleExplicitLod %113 %115 Lod %9 
                                                      OpStore %112 %118 
                                Private f32* %120 = OpAccessChain %89 %119 
                                         f32 %121 = OpLoad %120 
                                Uniform f32* %123 = OpAccessChain %12 %122 
                                         f32 %124 = OpLoad %123 
                                         f32 %125 = OpFAdd %121 %124 
                                Private f32* %127 = OpAccessChain %68 %126 
                                                      OpStore %127 %125 
                                Private f32* %128 = OpAccessChain %68 %126 
                                         f32 %129 = OpLoad %128 
                                         f32 %131 = OpExtInst %1 43 %129 %71 %130 
                                Private f32* %132 = OpAccessChain %68 %126 
                                                      OpStore %132 %131 
                                       f32_4 %136 = OpLoad %89 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %140 = OpFMul %137 %139 
                                Uniform f32* %141 = OpAccessChain %12 %122 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %143 = OpAccessChain %12 %122 
                                         f32 %144 = OpLoad %143 
                                Uniform f32* %145 = OpAccessChain %12 %122 
                                         f32 %146 = OpLoad %145 
                                       f32_3 %147 = OpCompositeConstruct %142 %144 %146 
                                         f32 %148 = OpCompositeExtract %147 0 
                                         f32 %149 = OpCompositeExtract %147 1 
                                         f32 %150 = OpCompositeExtract %147 2 
                                       f32_3 %151 = OpCompositeConstruct %148 %149 %150 
                                       f32_3 %152 = OpFAdd %140 %151 
                                                      OpStore %135 %152 
                                       f32_3 %153 = OpLoad %135 
                                       f32_3 %156 = OpFAdd %153 %155 
                                                      OpStore %135 %156 
                                  Input f32* %160 = OpAccessChain %158 %119 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %68 %126 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                Private f32* %165 = OpAccessChain %112 %119 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFNegate %166 
                                         f32 %168 = OpFAdd %164 %167 
                                                      OpStore %157 %168 
                                       f32_4 %170 = OpLoad %112 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFMul %171 %139 
                                       f32_3 %173 = OpFAdd %172 %155 
                                                      OpStore %169 %173 
                                       f32_4 %174 = OpLoad %158 
                                       f32_3 %175 = OpVectorShuffle %174 %174 3 3 3 
                                       f32_3 %176 = OpLoad %135 
                                       f32_3 %177 = OpFMul %175 %176 
                                       f32_3 %178 = OpLoad %169 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %177 %179 
                                       f32_4 %181 = OpLoad %28 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %28 %182 
                                       f32_4 %183 = OpLoad %28 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                              Uniform f32_4* %186 = OpAccessChain %12 %185 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFMul %184 %188 
                                       f32_4 %190 = OpLoad %28 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %28 %191 
                                         f32 %192 = OpLoad %157 
                                Uniform f32* %194 = OpAccessChain %12 %193 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFMul %192 %195 
                                Uniform f32* %198 = OpAccessChain %12 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %196 %200 
                                Private f32* %202 = OpAccessChain %68 %126 
                                                      OpStore %202 %201 
                                         f32 %203 = OpLoad %157 
                                Uniform f32* %204 = OpAccessChain %12 %193 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %203 %205 
                                                      OpStore %157 %206 
                                Private f32* %207 = OpAccessChain %68 %126 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpExtInst %1 9 %208 
                                Private f32* %210 = OpAccessChain %68 %126 
                                                      OpStore %210 %209 
                                Private f32* %211 = OpAccessChain %68 %126 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpExtInst %1 43 %212 %71 %130 
                                Private f32* %214 = OpAccessChain %68 %126 
                                                      OpStore %214 %213 
                                Private f32* %215 = OpAccessChain %68 %126 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFAdd %216 %154 
                                Private f32* %218 = OpAccessChain %68 %126 
                                                      OpStore %218 %217 
                                Private f32* %222 = OpAccessChain %68 %126 
                                         f32 %223 = OpLoad %222 
                                        bool %224 = OpFOrdLessThan %223 %71 
                                                      OpStore %221 %224 
                                        bool %225 = OpLoad %221 
                                         i32 %227 = OpSelect %225 %226 %14 
                                         i32 %229 = OpIMul %227 %228 
                                        bool %230 = OpINotEqual %229 %14 
                                                      OpSelectionMerge %232 None 
                                                      OpBranchConditional %230 %231 %232 
                                             %231 = OpLabel 
                                                      OpKill
                                             %232 = OpLabel 
                                       f32_4 %235 = OpLoad %28 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                                       f32_3 %239 = OpLoad %238 
                                       f32_3 %240 = OpFMul %236 %239 
                                                      OpStore %234 %240 
                                       f32_4 %241 = OpLoad %28 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 0 0 
                                       f32_3 %244 = OpLoad %243 
                                       f32_3 %245 = OpFMul %242 %244 
                                       f32_3 %246 = OpLoad %234 
                                       f32_3 %247 = OpFAdd %245 %246 
                                                      OpStore %234 %247 
                                       f32_3 %249 = OpLoad %248 
                                       f32_3 %250 = OpLoad %248 
                                         f32 %251 = OpDot %249 %250 
                                Private f32* %252 = OpAccessChain %28 %126 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %28 %126 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpExtInst %1 32 %254 
                                Private f32* %256 = OpAccessChain %28 %126 
                                                      OpStore %256 %255 
                                       f32_4 %258 = OpLoad %28 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 0 0 
                                       f32_3 %260 = OpLoad %248 
                                       f32_3 %261 = OpFMul %259 %260 
                                                      OpStore %257 %261 
                                       f32_4 %262 = OpLoad %28 
                                       f32_3 %263 = OpVectorShuffle %262 %262 2 2 2 
                                       f32_3 %264 = OpLoad %257 
                                       f32_3 %265 = OpFMul %263 %264 
                                       f32_3 %266 = OpLoad %234 
                                       f32_3 %267 = OpFAdd %265 %266 
                                       f32_4 %268 = OpLoad %28 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %28 %269 
                                       f32_4 %270 = OpLoad %28 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_4 %272 = OpLoad %28 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                         f32 %274 = OpDot %271 %273 
                                Private f32* %275 = OpAccessChain %234 %126 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %234 %126 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpExtInst %1 32 %277 
                                Private f32* %279 = OpAccessChain %234 %126 
                                                      OpStore %279 %278 
                                       f32_4 %280 = OpLoad %28 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpLoad %234 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 0 0 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_4 %285 = OpLoad %28 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %28 %286 
                              Uniform f32_4* %287 = OpAccessChain %12 %226 
                                       f32_4 %288 = OpLoad %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 3 3 3 
                                       f32_4 %290 = OpLoad %30 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFNegate %291 
                                       f32_3 %293 = OpFMul %289 %292 
                              Uniform f32_4* %294 = OpAccessChain %12 %226 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpFAdd %293 %296 
                                                      OpStore %234 %297 
                                       f32_3 %299 = OpLoad %234 
                                       f32_3 %300 = OpLoad %234 
                                         f32 %301 = OpDot %299 %300 
                                                      OpStore %298 %301 
                                         f32 %302 = OpLoad %298 
                                         f32 %303 = OpExtInst %1 32 %302 
                                                      OpStore %298 %303 
                                         f32 %304 = OpLoad %298 
                                       f32_3 %305 = OpCompositeConstruct %304 %304 %304 
                                       f32_3 %306 = OpLoad %234 
                                       f32_3 %307 = OpFMul %305 %306 
                                                      OpStore %234 %307 
                                       f32_4 %308 = OpLoad %28 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpLoad %234 
                                         f32 %311 = OpDot %309 %310 
                                Private f32* %312 = OpAccessChain %28 %126 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %28 %126 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                         f32 %316 = OpFAdd %315 %130 
                                Private f32* %317 = OpAccessChain %28 %126 
                                                      OpStore %317 %316 
                                Private f32* %318 = OpAccessChain %28 %126 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFNegate %319 
                                Uniform f32* %322 = OpAccessChain %12 %321 %119 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFMul %320 %323 
                                         f32 %325 = OpFAdd %324 %130 
                                Private f32* %326 = OpAccessChain %28 %126 
                                                      OpStore %326 %325 
                                Uniform f32* %328 = OpAccessChain %12 %185 %16 
                                         f32 %329 = OpLoad %328 
                                  Input f32* %331 = OpAccessChain %158 %330 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %329 %332 
                                         f32 %334 = OpFAdd %333 %130 
                                                      OpStore %327 %334 
                                         f32 %335 = OpLoad %327 
                                         f32 %336 = OpFMul %335 %72 
                                Uniform f32* %338 = OpAccessChain %12 %337 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFAdd %336 %339 
                                                      OpStore %327 %340 
                                         f32 %341 = OpLoad %327 
                                         f32 %342 = OpExtInst %1 43 %341 %71 %130 
                                                      OpStore %327 %342 
                                         f32 %343 = OpLoad %327 
                                Private f32* %344 = OpAccessChain %28 %126 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFMul %343 %345 
                                Private f32* %347 = OpAccessChain %28 %126 
                                                      OpStore %347 %346 
                              Uniform f32_4* %350 = OpAccessChain %12 %349 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                              Uniform f32_4* %353 = OpAccessChain %12 %321 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFNegate %355 
                                       f32_3 %357 = OpFAdd %352 %356 
                                                      OpStore %348 %357 
                                       f32_4 %358 = OpLoad %28 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 0 0 
                                       f32_3 %360 = OpLoad %348 
                                       f32_3 %361 = OpFMul %359 %360 
                              Uniform f32_4* %362 = OpAccessChain %12 %321 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_3 %365 = OpFAdd %361 %364 
                                       f32_4 %366 = OpLoad %28 
                                       f32_4 %367 = OpVectorShuffle %366 %365 4 5 6 3 
                                                      OpStore %28 %367 
                              Uniform f32_4* %369 = OpAccessChain %12 %368 
                                       f32_4 %370 = OpLoad %369 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFNegate %371 
                                       f32_3 %374 = OpFAdd %372 %373 
                                                      OpStore %234 %374 
                              Uniform f32_4* %375 = OpAccessChain %12 %349 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpLoad %234 
                                       f32_3 %379 = OpFMul %377 %378 
                              Uniform f32_4* %380 = OpAccessChain %12 %368 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFAdd %379 %382 
                                                      OpStore %234 %383 
                                       f32_4 %384 = OpLoad %28 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpLoad %234 
                                       f32_3 %387 = OpFMul %385 %386 
                                       f32_4 %388 = OpLoad %28 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %28 %389 
                                         f32 %392 = OpLoad %157 
                                       f32_3 %393 = OpCompositeConstruct %392 %392 %392 
                                       f32_4 %394 = OpLoad %28 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %396 = OpFMul %393 %395 
                                       f32_4 %397 = OpLoad %391 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 5 6 3 
                                                      OpStore %391 %398 
                                 Output f32* %400 = OpAccessChain %391 %119 
                                                      OpStore %400 %71 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TANGENT0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
    vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 _TimeEditor;
uniform 	vec4 _BaseColor;
uniform 	vec4 _Shading;
uniform 	float _DepthIntensity;
uniform 	float _Tiling;
uniform 	float _Density;
uniform 	float _Alpha;
uniform 	float _AlphaCut;
uniform 	float _Speed;
uniform 	float _SpeedSecondLayer;
uniform 	vec4 _CloudNormalsDirection;
uniform 	vec4 _PerlinNormalMap_ST;
uniform 	float _MipLevel;
uniform  sampler2D _PerlinNormalMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec3 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.x = _Time.y + _TimeEditor.y;
    u_xlat0.x = u_xlat0.x * 0.00100000005;
    u_xlat1 = vs_TEXCOORD0.xzxz / vec4(vec4(_Tiling, _Tiling, _Tiling, _Tiling));
    u_xlat0 = u_xlat0.xxxx * vec4(_Speed, _Speed, _SpeedSecondLayer, _SpeedSecondLayer) + u_xlat1;
    u_xlat6.xy = u_xlat0.zw + vec2(0.0, 0.5);
    u_xlat0.xy = u_xlat0.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat0.xy = u_xlat6.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_0 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat10 = u_xlat10_1.w + _Density;
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(vec3(_Density, _Density, _Density));
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat9 = vs_COLOR0.w * u_xlat10 + (-u_xlat10_0.w);
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + (-u_xlat16_0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * _CloudNormalsDirection.xyz;
    u_xlat1.x = u_xlat9 * _Alpha + (-_AlphaCut);
    u_xlat9 = u_xlat9 * _Alpha;
    u_xlat1.x = ceil(u_xlat1.x);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x + -1.0;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz + u_xlat1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = (-u_xlat0.x) * _Shading.w + 1.0;
    u_xlat3 = _CloudNormalsDirection.y * vs_COLOR0.z + 1.0;
    u_xlat3 = u_xlat3 * 0.5 + _DepthIntensity;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat0.x = u_xlat3 * u_xlat0.x;
    u_xlat1.xyz = _BaseColor.xyz + (-_Shading.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + _Shading.xyz;
    u_xlat1.xyz = (-_LightColor0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = _BaseColor.www * u_xlat1.xyz + _LightColor0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 273
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %82 %92 %96 %134 %137 %182 %216 %222 %223 %257 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate %92 Location 92 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %182 Location 182 
                                                      OpDecorate %216 Location 216 
                                                      OpDecorate %222 Location 222 
                                                      OpDecorate %223 Location 223 
                                                      OpDecorate %257 Location 257 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %16 %17 %18 %19 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4];}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 0 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %58 = OpVariable Private 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %90 = OpTypePointer Output %7 
                                Output f32_4* %92 = OpVariable Output 
                                              %94 = OpTypeVector %6 3 
                                              %95 = OpTypePointer Input %94 
                                 Input f32_3* %96 = OpVariable Input 
                                         u32 %102 = OpConstant 0 
                                             %103 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 2 
                                Private f32* %118 = OpVariable Private 
                                             %133 = OpTypePointer Output %94 
                               Output f32_3* %134 = OpVariable Output 
                                Input f32_4* %137 = OpVariable Input 
                               Output f32_3* %182 = OpVariable Output 
                                             %185 = OpTypePointer Private %94 
                              Private f32_3* %186 = OpVariable Private 
                               Output f32_3* %216 = OpVariable Output 
                               Output f32_4* %222 = OpVariable Output 
                                Input f32_4* %223 = OpVariable Input 
                                             %225 = OpTypeVector %6 2 
                                             %256 = OpTypePointer Output %225 
                               Output f32_2* %257 = OpVariable Output 
                                             %267 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %51 = OpAccessChain %22 %24 %47 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %11 
                                        f32_4 %54 = OpVectorShuffle %53 %53 3 3 3 3 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %9 %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %61 = OpAccessChain %22 %37 %25 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpFMul %60 %62 
                                                      OpStore %58 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %37 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 0 0 0 0 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %58 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %58 %70 
                               Uniform f32_4* %71 = OpAccessChain %22 %37 %37 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %45 
                                        f32_4 %74 = OpVectorShuffle %73 %73 2 2 2 2 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %58 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %58 %77 
                               Uniform f32_4* %83 = OpAccessChain %22 %37 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %58 
                                        f32_4 %89 = OpFAdd %87 %88 
                                Output f32_4* %91 = OpAccessChain %82 %24 
                                                      OpStore %91 %89 
                                        f32_4 %93 = OpLoad %9 
                                                      OpStore %92 %93 
                                        f32_3 %97 = OpLoad %96 
                               Uniform f32_4* %98 = OpAccessChain %22 %25 %24 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                         f32 %101 = OpDot %97 %100 
                                Private f32* %104 = OpAccessChain %45 %102 
                                                      OpStore %104 %101 
                                       f32_3 %105 = OpLoad %96 
                              Uniform f32_4* %106 = OpAccessChain %22 %25 %25 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %105 %108 
                                Private f32* %110 = OpAccessChain %45 %78 
                                                      OpStore %110 %109 
                                       f32_3 %111 = OpLoad %96 
                              Uniform f32_4* %112 = OpAccessChain %22 %25 %37 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %117 = OpAccessChain %45 %116 
                                                      OpStore %117 %115 
                                       f32_4 %119 = OpLoad %45 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_4 %121 = OpLoad %45 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %120 %122 
                                                      OpStore %118 %123 
                                         f32 %124 = OpLoad %118 
                                         f32 %125 = OpExtInst %1 32 %124 
                                                      OpStore %118 %125 
                                         f32 %126 = OpLoad %118 
                                       f32_3 %127 = OpCompositeConstruct %126 %126 %126 
                                       f32_4 %128 = OpLoad %45 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %45 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 6 3 
                                                      OpStore %45 %132 
                                       f32_4 %135 = OpLoad %45 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                                      OpStore %134 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 1 1 1 
                              Uniform f32_4* %140 = OpAccessChain %22 %24 %25 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %139 %142 
                                       f32_4 %144 = OpLoad %58 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 6 3 
                                                      OpStore %58 %145 
                              Uniform f32_4* %146 = OpAccessChain %22 %24 %24 
                                       f32_4 %147 = OpLoad %146 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_4 %149 = OpLoad %137 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 0 0 
                                       f32_3 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %58 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFAdd %151 %153 
                                       f32_4 %155 = OpLoad %58 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %58 %156 
                              Uniform f32_4* %157 = OpAccessChain %22 %24 %37 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %137 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %58 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                       f32_3 %165 = OpFAdd %162 %164 
                                       f32_4 %166 = OpLoad %58 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
                                                      OpStore %58 %167 
                                       f32_4 %168 = OpLoad %58 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_4 %170 = OpLoad %58 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %169 %171 
                                                      OpStore %118 %172 
                                         f32 %173 = OpLoad %118 
                                         f32 %174 = OpExtInst %1 32 %173 
                                                      OpStore %118 %174 
                                         f32 %175 = OpLoad %118 
                                       f32_3 %176 = OpCompositeConstruct %175 %175 %175 
                                       f32_4 %177 = OpLoad %58 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFMul %176 %178 
                                       f32_4 %180 = OpLoad %58 
                                       f32_4 %181 = OpVectorShuffle %180 %179 4 5 6 3 
                                                      OpStore %58 %181 
                                       f32_4 %183 = OpLoad %58 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                                      OpStore %182 %184 
                                       f32_4 %187 = OpLoad %45 
                                       f32_3 %188 = OpVectorShuffle %187 %187 2 0 1 
                                       f32_4 %189 = OpLoad %58 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 2 0 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                       f32_4 %192 = OpLoad %45 
                                       f32_3 %193 = OpVectorShuffle %192 %192 1 2 0 
                                       f32_4 %194 = OpLoad %58 
                                       f32_3 %195 = OpVectorShuffle %194 %194 2 0 1 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_3 %197 = OpLoad %186 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %196 %198 
                                       f32_4 %200 = OpLoad %45 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
                                                      OpStore %45 %201 
                                       f32_4 %202 = OpLoad %45 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                       f32_4 %204 = OpLoad %137 
                                       f32_3 %205 = OpVectorShuffle %204 %204 3 3 3 
                                       f32_3 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %45 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %45 %208 
                                       f32_4 %209 = OpLoad %45 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_4 %211 = OpLoad %45 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                         f32 %213 = OpDot %210 %212 
                                                      OpStore %118 %213 
                                         f32 %214 = OpLoad %118 
                                         f32 %215 = OpExtInst %1 32 %214 
                                                      OpStore %118 %215 
                                         f32 %217 = OpLoad %118 
                                       f32_3 %218 = OpCompositeConstruct %217 %217 %217 
                                       f32_4 %219 = OpLoad %45 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpFMul %218 %220 
                                                      OpStore %216 %221 
                                       f32_4 %224 = OpLoad %223 
                                                      OpStore %222 %224 
                                       f32_4 %226 = OpLoad %9 
                                       f32_2 %227 = OpVectorShuffle %226 %226 1 1 
                              Uniform f32_4* %228 = OpAccessChain %22 %47 %25 
                                       f32_4 %229 = OpLoad %228 
                                       f32_2 %230 = OpVectorShuffle %229 %229 0 1 
                                       f32_2 %231 = OpFMul %227 %230 
                                       f32_4 %232 = OpLoad %45 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 2 3 
                                                      OpStore %45 %233 
                              Uniform f32_4* %234 = OpAccessChain %22 %47 %24 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                                       f32_4 %237 = OpLoad %9 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 0 
                                       f32_2 %239 = OpFMul %236 %238 
                                       f32_4 %240 = OpLoad %45 
                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
                                       f32_2 %242 = OpFAdd %239 %241 
                                       f32_4 %243 = OpLoad %9 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 2 3 
                                                      OpStore %9 %244 
                              Uniform f32_4* %245 = OpAccessChain %22 %47 %37 
                                       f32_4 %246 = OpLoad %245 
                                       f32_2 %247 = OpVectorShuffle %246 %246 0 1 
                                       f32_4 %248 = OpLoad %9 
                                       f32_2 %249 = OpVectorShuffle %248 %248 2 2 
                                       f32_2 %250 = OpFMul %247 %249 
                                       f32_4 %251 = OpLoad %9 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 1 
                                       f32_2 %253 = OpFAdd %250 %252 
                                       f32_4 %254 = OpLoad %9 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 2 3 
                                                      OpStore %9 %255 
                              Uniform f32_4* %258 = OpAccessChain %22 %47 %47 
                                       f32_4 %259 = OpLoad %258 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_4 %261 = OpLoad %9 
                                       f32_2 %262 = OpVectorShuffle %261 %261 3 3 
                                       f32_2 %263 = OpFMul %260 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_2 %265 = OpVectorShuffle %264 %264 0 1 
                                       f32_2 %266 = OpFAdd %263 %265 
                                                      OpStore %257 %266 
                                 Output f32* %268 = OpAccessChain %82 %24 %78 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                 Output f32* %271 = OpAccessChain %82 %24 %78 
                                                      OpStore %271 %270 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 402
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %30 %158 %238 %243 %248 %391 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpMemberDecorate %10 0 Offset 10 
                                                      OpMemberDecorate %10 1 RelaxedPrecision 
                                                      OpMemberDecorate %10 1 Offset 10 
                                                      OpMemberDecorate %10 2 Offset 10 
                                                      OpMemberDecorate %10 3 Offset 10 
                                                      OpMemberDecorate %10 4 RelaxedPrecision 
                                                      OpMemberDecorate %10 4 Offset 10 
                                                      OpMemberDecorate %10 5 RelaxedPrecision 
                                                      OpMemberDecorate %10 5 Offset 10 
                                                      OpMemberDecorate %10 6 RelaxedPrecision 
                                                      OpMemberDecorate %10 6 Offset 10 
                                                      OpMemberDecorate %10 7 RelaxedPrecision 
                                                      OpMemberDecorate %10 7 Offset 10 
                                                      OpMemberDecorate %10 8 RelaxedPrecision 
                                                      OpMemberDecorate %10 8 Offset 10 
                                                      OpMemberDecorate %10 9 RelaxedPrecision 
                                                      OpMemberDecorate %10 9 Offset 10 
                                                      OpMemberDecorate %10 10 RelaxedPrecision 
                                                      OpMemberDecorate %10 10 Offset 10 
                                                      OpMemberDecorate %10 11 RelaxedPrecision 
                                                      OpMemberDecorate %10 11 Offset 10 
                                                      OpMemberDecorate %10 12 RelaxedPrecision 
                                                      OpMemberDecorate %10 12 Offset 10 
                                                      OpMemberDecorate %10 13 RelaxedPrecision 
                                                      OpMemberDecorate %10 13 Offset 10 
                                                      OpMemberDecorate %10 14 Offset 10 
                                                      OpMemberDecorate %10 15 Offset 10 
                                                      OpDecorate %10 Block 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %93 DescriptorSet 93 
                                                      OpDecorate %93 Binding 93 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %238 Location 238 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate %248 Location 248 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %391 Location 391 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypePointer Private %6 
                                  Private f32* %8 = OpVariable Private 
                                               %9 = OpTypeVector %6 4 
                                              %10 = OpTypeStruct %9 %9 %9 %9 %9 %9 %6 %6 %6 %6 %6 %6 %6 %9 %9 %6 
                                              %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32;}* %12 = OpVariable Uniform 
                                              %13 = OpTypeInt 32 1 
                                          i32 %14 = OpConstant 0 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 1 
                                              %17 = OpTypePointer Uniform %6 
                                          i32 %20 = OpConstant 3 
                                          f32 %25 = OpConstant 3.674022E-40 
                                              %27 = OpTypePointer Private %9 
                               Private f32_4* %28 = OpVariable Private 
                                              %29 = OpTypePointer Input %9 
                                 Input f32_4* %30 = OpVariable Input 
                                          i32 %33 = OpConstant 7 
                               Private f32_4* %49 = OpVariable Private 
                                          i32 %52 = OpConstant 11 
                                          i32 %57 = OpConstant 12 
                                              %66 = OpTypeVector %6 2 
                                              %67 = OpTypePointer Private %66 
                               Private f32_2* %68 = OpVariable Private 
                                          f32 %71 = OpConstant 3.674022E-40 
                                          f32 %72 = OpConstant 3.674022E-40 
                                        f32_2 %73 = OpConstantComposite %71 %72 
                                          i32 %77 = OpConstant 14 
                                              %78 = OpTypePointer Uniform %9 
                               Private f32_4* %89 = OpVariable Private 
                                              %90 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %91 = OpTypeSampledImage %90 
                                              %92 = OpTypePointer UniformConstant %91 
  UniformConstant read_only Texture2DSampled* %93 = OpVariable UniformConstant 
                                          i32 %97 = OpConstant 15 
                              Private f32_4* %112 = OpVariable Private 
                                         u32 %119 = OpConstant 3 
                                         i32 %122 = OpConstant 8 
                                         u32 %126 = OpConstant 0 
                                         f32 %130 = OpConstant 3.674022E-40 
                                             %133 = OpTypeVector %6 3 
                                             %134 = OpTypePointer Private %133 
                              Private f32_3* %135 = OpVariable Private 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_3 %139 = OpConstantComposite %138 %138 %138 
                                         f32 %154 = OpConstant 3.674022E-40 
                                       f32_3 %155 = OpConstantComposite %154 %154 %154 
                                Private f32* %157 = OpVariable Private 
                                Input f32_4* %158 = OpVariable Input 
                                             %159 = OpTypePointer Input %6 
                              Private f32_3* %169 = OpVariable Private 
                                         i32 %185 = OpConstant 13 
                                         i32 %193 = OpConstant 9 
                                         i32 %197 = OpConstant 10 
                                             %219 = OpTypeBool 
                                             %220 = OpTypePointer Private %219 
                               Private bool* %221 = OpVariable Private 
                                         i32 %226 = OpConstant 1 
                                         i32 %228 = OpConstant -1 
                              Private f32_3* %234 = OpVariable Private 
                                             %237 = OpTypePointer Input %133 
                                Input f32_3* %238 = OpVariable Input 
                                Input f32_3* %243 = OpVariable Input 
                                Input f32_3* %248 = OpVariable Input 
                              Private f32_3* %257 = OpVariable Private 
                                Private f32* %298 = OpVariable Private 
                                         i32 %321 = OpConstant 5 
                                Private f32* %327 = OpVariable Private 
                                         u32 %330 = OpConstant 2 
                                         i32 %337 = OpConstant 6 
                              Private f32_3* %348 = OpVariable Private 
                                         i32 %349 = OpConstant 4 
                                         i32 %368 = OpConstant 2 
                                       f32_3 %373 = OpConstantComposite %130 %130 %130 
                                             %390 = OpTypePointer Output %9 
                               Output f32_4* %391 = OpVariable Output 
                                             %399 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %18 = OpAccessChain %12 %14 %16 
                                          f32 %19 = OpLoad %18 
                                 Uniform f32* %21 = OpAccessChain %12 %20 %16 
                                          f32 %22 = OpLoad %21 
                                          f32 %23 = OpFAdd %19 %22 
                                                      OpStore %8 %23 
                                          f32 %24 = OpLoad %8 
                                          f32 %26 = OpFMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 2 0 2 
                                 Uniform f32* %34 = OpAccessChain %12 %33 
                                          f32 %35 = OpLoad %34 
                                 Uniform f32* %36 = OpAccessChain %12 %33 
                                          f32 %37 = OpLoad %36 
                                 Uniform f32* %38 = OpAccessChain %12 %33 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %12 %33 
                                          f32 %41 = OpLoad %40 
                                        f32_4 %42 = OpCompositeConstruct %35 %37 %39 %41 
                                          f32 %43 = OpCompositeExtract %42 0 
                                          f32 %44 = OpCompositeExtract %42 1 
                                          f32 %45 = OpCompositeExtract %42 2 
                                          f32 %46 = OpCompositeExtract %42 3 
                                        f32_4 %47 = OpCompositeConstruct %43 %44 %45 %46 
                                        f32_4 %48 = OpFDiv %32 %47 
                                                      OpStore %28 %48 
                                          f32 %50 = OpLoad %8 
                                        f32_4 %51 = OpCompositeConstruct %50 %50 %50 %50 
                                 Uniform f32* %53 = OpAccessChain %12 %52 
                                          f32 %54 = OpLoad %53 
                                 Uniform f32* %55 = OpAccessChain %12 %52 
                                          f32 %56 = OpLoad %55 
                                 Uniform f32* %58 = OpAccessChain %12 %57 
                                          f32 %59 = OpLoad %58 
                                 Uniform f32* %60 = OpAccessChain %12 %57 
                                          f32 %61 = OpLoad %60 
                                        f32_4 %62 = OpCompositeConstruct %54 %56 %59 %61 
                                        f32_4 %63 = OpFMul %51 %62 
                                        f32_4 %64 = OpLoad %28 
                                        f32_4 %65 = OpFAdd %63 %64 
                                                      OpStore %49 %65 
                                        f32_4 %69 = OpLoad %49 
                                        f32_2 %70 = OpVectorShuffle %69 %69 2 3 
                                        f32_2 %74 = OpFAdd %70 %73 
                                                      OpStore %68 %74 
                                        f32_4 %75 = OpLoad %49 
                                        f32_2 %76 = OpVectorShuffle %75 %75 0 1 
                               Uniform f32_4* %79 = OpAccessChain %12 %77 
                                        f32_4 %80 = OpLoad %79 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpFMul %76 %81 
                               Uniform f32_4* %83 = OpAccessChain %12 %77 
                                        f32_4 %84 = OpLoad %83 
                                        f32_2 %85 = OpVectorShuffle %84 %84 2 3 
                                        f32_2 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %28 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 2 3 
                                                      OpStore %28 %88 
                   read_only Texture2DSampled %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %28 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                                 Uniform f32* %98 = OpAccessChain %12 %97 
                                          f32 %99 = OpLoad %98 
                                       f32_4 %100 = OpImageSampleExplicitLod %94 %96 Lod %9 
                                                      OpStore %89 %100 
                                       f32_2 %101 = OpLoad %68 
                              Uniform f32_4* %102 = OpAccessChain %12 %77 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %101 %104 
                              Uniform f32_4* %106 = OpAccessChain %12 %77 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                       f32_4 %110 = OpLoad %28 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 3 
                                                      OpStore %28 %111 
                  read_only Texture2DSampled %113 = OpLoad %93 
                                       f32_4 %114 = OpLoad %28 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                                Uniform f32* %116 = OpAccessChain %12 %97 
                                         f32 %117 = OpLoad %116 
                                       f32_4 %118 = OpImageSampleExplicitLod %113 %115 Lod %9 
                                                      OpStore %112 %118 
                                Private f32* %120 = OpAccessChain %89 %119 
                                         f32 %121 = OpLoad %120 
                                Uniform f32* %123 = OpAccessChain %12 %122 
                                         f32 %124 = OpLoad %123 
                                         f32 %125 = OpFAdd %121 %124 
                                Private f32* %127 = OpAccessChain %68 %126 
                                                      OpStore %127 %125 
                                Private f32* %128 = OpAccessChain %68 %126 
                                         f32 %129 = OpLoad %128 
                                         f32 %131 = OpExtInst %1 43 %129 %71 %130 
                                Private f32* %132 = OpAccessChain %68 %126 
                                                      OpStore %132 %131 
                                       f32_4 %136 = OpLoad %89 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %140 = OpFMul %137 %139 
                                Uniform f32* %141 = OpAccessChain %12 %122 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %143 = OpAccessChain %12 %122 
                                         f32 %144 = OpLoad %143 
                                Uniform f32* %145 = OpAccessChain %12 %122 
                                         f32 %146 = OpLoad %145 
                                       f32_3 %147 = OpCompositeConstruct %142 %144 %146 
                                         f32 %148 = OpCompositeExtract %147 0 
                                         f32 %149 = OpCompositeExtract %147 1 
                                         f32 %150 = OpCompositeExtract %147 2 
                                       f32_3 %151 = OpCompositeConstruct %148 %149 %150 
                                       f32_3 %152 = OpFAdd %140 %151 
                                                      OpStore %135 %152 
                                       f32_3 %153 = OpLoad %135 
                                       f32_3 %156 = OpFAdd %153 %155 
                                                      OpStore %135 %156 
                                  Input f32* %160 = OpAccessChain %158 %119 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %68 %126 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                Private f32* %165 = OpAccessChain %112 %119 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFNegate %166 
                                         f32 %168 = OpFAdd %164 %167 
                                                      OpStore %157 %168 
                                       f32_4 %170 = OpLoad %112 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFMul %171 %139 
                                       f32_3 %173 = OpFAdd %172 %155 
                                                      OpStore %169 %173 
                                       f32_4 %174 = OpLoad %158 
                                       f32_3 %175 = OpVectorShuffle %174 %174 3 3 3 
                                       f32_3 %176 = OpLoad %135 
                                       f32_3 %177 = OpFMul %175 %176 
                                       f32_3 %178 = OpLoad %169 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %177 %179 
                                       f32_4 %181 = OpLoad %28 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %28 %182 
                                       f32_4 %183 = OpLoad %28 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                              Uniform f32_4* %186 = OpAccessChain %12 %185 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFMul %184 %188 
                                       f32_4 %190 = OpLoad %28 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %28 %191 
                                         f32 %192 = OpLoad %157 
                                Uniform f32* %194 = OpAccessChain %12 %193 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFMul %192 %195 
                                Uniform f32* %198 = OpAccessChain %12 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %196 %200 
                                Private f32* %202 = OpAccessChain %68 %126 
                                                      OpStore %202 %201 
                                         f32 %203 = OpLoad %157 
                                Uniform f32* %204 = OpAccessChain %12 %193 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %203 %205 
                                                      OpStore %157 %206 
                                Private f32* %207 = OpAccessChain %68 %126 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpExtInst %1 9 %208 
                                Private f32* %210 = OpAccessChain %68 %126 
                                                      OpStore %210 %209 
                                Private f32* %211 = OpAccessChain %68 %126 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpExtInst %1 43 %212 %71 %130 
                                Private f32* %214 = OpAccessChain %68 %126 
                                                      OpStore %214 %213 
                                Private f32* %215 = OpAccessChain %68 %126 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFAdd %216 %154 
                                Private f32* %218 = OpAccessChain %68 %126 
                                                      OpStore %218 %217 
                                Private f32* %222 = OpAccessChain %68 %126 
                                         f32 %223 = OpLoad %222 
                                        bool %224 = OpFOrdLessThan %223 %71 
                                                      OpStore %221 %224 
                                        bool %225 = OpLoad %221 
                                         i32 %227 = OpSelect %225 %226 %14 
                                         i32 %229 = OpIMul %227 %228 
                                        bool %230 = OpINotEqual %229 %14 
                                                      OpSelectionMerge %232 None 
                                                      OpBranchConditional %230 %231 %232 
                                             %231 = OpLabel 
                                                      OpKill
                                             %232 = OpLabel 
                                       f32_4 %235 = OpLoad %28 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                                       f32_3 %239 = OpLoad %238 
                                       f32_3 %240 = OpFMul %236 %239 
                                                      OpStore %234 %240 
                                       f32_4 %241 = OpLoad %28 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 0 0 
                                       f32_3 %244 = OpLoad %243 
                                       f32_3 %245 = OpFMul %242 %244 
                                       f32_3 %246 = OpLoad %234 
                                       f32_3 %247 = OpFAdd %245 %246 
                                                      OpStore %234 %247 
                                       f32_3 %249 = OpLoad %248 
                                       f32_3 %250 = OpLoad %248 
                                         f32 %251 = OpDot %249 %250 
                                Private f32* %252 = OpAccessChain %28 %126 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %28 %126 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpExtInst %1 32 %254 
                                Private f32* %256 = OpAccessChain %28 %126 
                                                      OpStore %256 %255 
                                       f32_4 %258 = OpLoad %28 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 0 0 
                                       f32_3 %260 = OpLoad %248 
                                       f32_3 %261 = OpFMul %259 %260 
                                                      OpStore %257 %261 
                                       f32_4 %262 = OpLoad %28 
                                       f32_3 %263 = OpVectorShuffle %262 %262 2 2 2 
                                       f32_3 %264 = OpLoad %257 
                                       f32_3 %265 = OpFMul %263 %264 
                                       f32_3 %266 = OpLoad %234 
                                       f32_3 %267 = OpFAdd %265 %266 
                                       f32_4 %268 = OpLoad %28 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %28 %269 
                                       f32_4 %270 = OpLoad %28 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_4 %272 = OpLoad %28 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                         f32 %274 = OpDot %271 %273 
                                Private f32* %275 = OpAccessChain %234 %126 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %234 %126 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpExtInst %1 32 %277 
                                Private f32* %279 = OpAccessChain %234 %126 
                                                      OpStore %279 %278 
                                       f32_4 %280 = OpLoad %28 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpLoad %234 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 0 0 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_4 %285 = OpLoad %28 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %28 %286 
                              Uniform f32_4* %287 = OpAccessChain %12 %226 
                                       f32_4 %288 = OpLoad %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 3 3 3 
                                       f32_4 %290 = OpLoad %30 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFNegate %291 
                                       f32_3 %293 = OpFMul %289 %292 
                              Uniform f32_4* %294 = OpAccessChain %12 %226 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpFAdd %293 %296 
                                                      OpStore %234 %297 
                                       f32_3 %299 = OpLoad %234 
                                       f32_3 %300 = OpLoad %234 
                                         f32 %301 = OpDot %299 %300 
                                                      OpStore %298 %301 
                                         f32 %302 = OpLoad %298 
                                         f32 %303 = OpExtInst %1 32 %302 
                                                      OpStore %298 %303 
                                         f32 %304 = OpLoad %298 
                                       f32_3 %305 = OpCompositeConstruct %304 %304 %304 
                                       f32_3 %306 = OpLoad %234 
                                       f32_3 %307 = OpFMul %305 %306 
                                                      OpStore %234 %307 
                                       f32_4 %308 = OpLoad %28 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpLoad %234 
                                         f32 %311 = OpDot %309 %310 
                                Private f32* %312 = OpAccessChain %28 %126 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %28 %126 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                         f32 %316 = OpFAdd %315 %130 
                                Private f32* %317 = OpAccessChain %28 %126 
                                                      OpStore %317 %316 
                                Private f32* %318 = OpAccessChain %28 %126 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFNegate %319 
                                Uniform f32* %322 = OpAccessChain %12 %321 %119 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFMul %320 %323 
                                         f32 %325 = OpFAdd %324 %130 
                                Private f32* %326 = OpAccessChain %28 %126 
                                                      OpStore %326 %325 
                                Uniform f32* %328 = OpAccessChain %12 %185 %16 
                                         f32 %329 = OpLoad %328 
                                  Input f32* %331 = OpAccessChain %158 %330 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %329 %332 
                                         f32 %334 = OpFAdd %333 %130 
                                                      OpStore %327 %334 
                                         f32 %335 = OpLoad %327 
                                         f32 %336 = OpFMul %335 %72 
                                Uniform f32* %338 = OpAccessChain %12 %337 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFAdd %336 %339 
                                                      OpStore %327 %340 
                                         f32 %341 = OpLoad %327 
                                         f32 %342 = OpExtInst %1 43 %341 %71 %130 
                                                      OpStore %327 %342 
                                         f32 %343 = OpLoad %327 
                                Private f32* %344 = OpAccessChain %28 %126 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFMul %343 %345 
                                Private f32* %347 = OpAccessChain %28 %126 
                                                      OpStore %347 %346 
                              Uniform f32_4* %350 = OpAccessChain %12 %349 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                              Uniform f32_4* %353 = OpAccessChain %12 %321 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFNegate %355 
                                       f32_3 %357 = OpFAdd %352 %356 
                                                      OpStore %348 %357 
                                       f32_4 %358 = OpLoad %28 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 0 0 
                                       f32_3 %360 = OpLoad %348 
                                       f32_3 %361 = OpFMul %359 %360 
                              Uniform f32_4* %362 = OpAccessChain %12 %321 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_3 %365 = OpFAdd %361 %364 
                                       f32_4 %366 = OpLoad %28 
                                       f32_4 %367 = OpVectorShuffle %366 %365 4 5 6 3 
                                                      OpStore %28 %367 
                              Uniform f32_4* %369 = OpAccessChain %12 %368 
                                       f32_4 %370 = OpLoad %369 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFNegate %371 
                                       f32_3 %374 = OpFAdd %372 %373 
                                                      OpStore %234 %374 
                              Uniform f32_4* %375 = OpAccessChain %12 %349 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpLoad %234 
                                       f32_3 %379 = OpFMul %377 %378 
                              Uniform f32_4* %380 = OpAccessChain %12 %368 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFAdd %379 %382 
                                                      OpStore %234 %383 
                                       f32_4 %384 = OpLoad %28 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpLoad %234 
                                       f32_3 %387 = OpFMul %385 %386 
                                       f32_4 %388 = OpLoad %28 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %28 %389 
                                         f32 %392 = OpLoad %157 
                                       f32_3 %393 = OpCompositeConstruct %392 %392 %392 
                                       f32_4 %394 = OpLoad %28 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %396 = OpFMul %393 %395 
                                       f32_4 %397 = OpLoad %391 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 5 6 3 
                                                      OpStore %391 %398 
                                 Output f32* %400 = OpAccessChain %391 %119 
                                                      OpStore %400 %71 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
}
}
 Pass {
  Name "SHADOWCASTER"
  LOD 200
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "SHADOWCASTER" "QUEUE" = "Transparent" "RenderType" = "Transparent" "SHADOWSUPPORT" = "true" }
  Offset 1, 1
  GpuProgramID 152546
Program "vp" {
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD1;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat4);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat4) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _TimeEditor;
uniform 	float _Tiling;
uniform 	float _Density;
uniform 	float _Alpha;
uniform 	float _AlphaCut;
uniform 	float _Speed;
uniform 	float _SpeedSecondLayer;
uniform 	vec4 _PerlinNormalMap_ST;
uniform 	float _MipLevel;
uniform  sampler2D _PerlinNormalMap;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec2 u_xlat2;
vec2 u_xlat4;
void main()
{
    u_xlat0.x = _Time.y + _TimeEditor.y;
    u_xlat0.x = u_xlat0.x * 0.00100000005;
    u_xlat1 = vs_TEXCOORD1.xzxz / vec4(_Tiling);
    u_xlat0 = u_xlat0.xxxx * vec4(_Speed, _Speed, _SpeedSecondLayer, _SpeedSecondLayer) + u_xlat1;
    u_xlat4.xy = u_xlat0.zw + vec2(0.0, 0.5);
    u_xlat0.xy = u_xlat0.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat0.x = u_xlat10_1.w + _Density;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = u_xlat4.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat2.xy, _MipLevel);
    u_xlat0.x = vs_COLOR0.w * u_xlat0.x + (-u_xlat10_1.w);
    u_xlat0.x = u_xlat0.x * _Alpha + (-_AlphaCut);
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 150
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %50 %120 %142 %143 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpDecorate %50 Location 50 
                                                     OpMemberDecorate %118 0 BuiltIn 118 
                                                     OpMemberDecorate %118 1 BuiltIn 118 
                                                     OpMemberDecorate %118 2 BuiltIn 118 
                                                     OpDecorate %118 Block 
                                                     OpDecorate %142 Location 142 
                                                     OpDecorate %143 Location 143 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %7 %16 %17 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 1 
                                             %23 = OpTypePointer Uniform %7 
                                         i32 %27 = OpConstant 0 
                                         i32 %35 = OpConstant 2 
                              Private f32_4* %43 = OpVariable Private 
                                         i32 %45 = OpConstant 3 
                                             %49 = OpTypePointer Output %7 
                               Output f32_4* %50 = OpVariable Output 
                                         u32 %84 = OpConstant 0 
                                             %85 = OpTypePointer Uniform %6 
                                         u32 %88 = OpConstant 3 
                                             %89 = OpTypePointer Private %6 
                                         f32 %96 = OpConstant 3.674022E-40 
                                        f32 %101 = OpConstant 3.674022E-40 
                               Private f32* %104 = OpVariable Private 
                                        u32 %105 = OpConstant 2 
                                        u32 %116 = OpConstant 1 
                                            %117 = OpTypeArray %6 %116 
                                            %118 = OpTypeStruct %7 %6 %117 
                                            %119 = OpTypePointer Output %118 
       Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                            %121 = OpTypeVector %6 3 
                                            %140 = OpTypePointer Output %6 
                              Output f32_4* %142 = OpVariable Output 
                               Input f32_4* %143 = OpVariable Input 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %24 = OpAccessChain %20 %22 %22 
                                       f32_4 %25 = OpLoad %24 
                                       f32_4 %26 = OpFMul %13 %25 
                                                     OpStore %9 %26 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %27 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %44 = OpLoad %9 
                              Uniform f32_4* %46 = OpAccessChain %20 %22 %45 
                                       f32_4 %47 = OpLoad %46 
                                       f32_4 %48 = OpFAdd %44 %47 
                                                     OpStore %43 %48 
                              Uniform f32_4* %51 = OpAccessChain %20 %22 %45 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpLoad %11 
                                       f32_4 %54 = OpVectorShuffle %53 %53 3 3 3 3 
                                       f32_4 %55 = OpFMul %52 %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpFAdd %55 %56 
                                                     OpStore %50 %57 
                                       f32_4 %58 = OpLoad %43 
                                       f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                              Uniform f32_4* %60 = OpAccessChain %20 %35 %22 
                                       f32_4 %61 = OpLoad %60 
                                       f32_4 %62 = OpFMul %59 %61 
                                                     OpStore %9 %62 
                              Uniform f32_4* %63 = OpAccessChain %20 %35 %27 
                                       f32_4 %64 = OpLoad %63 
                                       f32_4 %65 = OpLoad %43 
                                       f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                       f32_4 %67 = OpFMul %64 %66 
                                       f32_4 %68 = OpLoad %9 
                                       f32_4 %69 = OpFAdd %67 %68 
                                                     OpStore %9 %69 
                              Uniform f32_4* %70 = OpAccessChain %20 %35 %35 
                                       f32_4 %71 = OpLoad %70 
                                       f32_4 %72 = OpLoad %43 
                                       f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                       f32_4 %74 = OpFMul %71 %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpFAdd %74 %75 
                                                     OpStore %9 %76 
                              Uniform f32_4* %77 = OpAccessChain %20 %35 %45 
                                       f32_4 %78 = OpLoad %77 
                                       f32_4 %79 = OpLoad %43 
                                       f32_4 %80 = OpVectorShuffle %79 %79 3 3 3 3 
                                       f32_4 %81 = OpFMul %78 %80 
                                       f32_4 %82 = OpLoad %9 
                                       f32_4 %83 = OpFAdd %81 %82 
                                                     OpStore %9 %83 
                                Uniform f32* %86 = OpAccessChain %20 %27 %84 
                                         f32 %87 = OpLoad %86 
                                Private f32* %90 = OpAccessChain %9 %88 
                                         f32 %91 = OpLoad %90 
                                         f32 %92 = OpFDiv %87 %91 
                                Private f32* %93 = OpAccessChain %43 %84 
                                                     OpStore %93 %92 
                                Private f32* %94 = OpAccessChain %43 %84 
                                         f32 %95 = OpLoad %94 
                                         f32 %97 = OpExtInst %1 37 %95 %96 
                                Private f32* %98 = OpAccessChain %43 %84 
                                                     OpStore %98 %97 
                                Private f32* %99 = OpAccessChain %43 %84 
                                        f32 %100 = OpLoad %99 
                                        f32 %102 = OpExtInst %1 40 %100 %101 
                               Private f32* %103 = OpAccessChain %43 %84 
                                                     OpStore %103 %102 
                               Private f32* %106 = OpAccessChain %9 %105 
                                        f32 %107 = OpLoad %106 
                               Private f32* %108 = OpAccessChain %43 %84 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFAdd %107 %109 
                                                     OpStore %104 %110 
                               Private f32* %111 = OpAccessChain %9 %88 
                                        f32 %112 = OpLoad %111 
                                        f32 %113 = OpLoad %104 
                                        f32 %114 = OpExtInst %1 37 %112 %113 
                               Private f32* %115 = OpAccessChain %43 %84 
                                                     OpStore %115 %114 
                                      f32_4 %122 = OpLoad %9 
                                      f32_3 %123 = OpVectorShuffle %122 %122 0 1 3 
                              Output f32_4* %124 = OpAccessChain %120 %27 
                                      f32_4 %125 = OpLoad %124 
                                      f32_4 %126 = OpVectorShuffle %125 %123 4 5 2 6 
                                                     OpStore %124 %126 
                                        f32 %127 = OpLoad %104 
                                        f32 %128 = OpFNegate %127 
                               Private f32* %129 = OpAccessChain %43 %84 
                                        f32 %130 = OpLoad %129 
                                        f32 %131 = OpFAdd %128 %130 
                               Private f32* %132 = OpAccessChain %9 %84 
                                                     OpStore %132 %131 
                               Uniform f32* %133 = OpAccessChain %20 %27 %116 
                                        f32 %134 = OpLoad %133 
                               Private f32* %135 = OpAccessChain %9 %84 
                                        f32 %136 = OpLoad %135 
                                        f32 %137 = OpFMul %134 %136 
                                        f32 %138 = OpLoad %104 
                                        f32 %139 = OpFAdd %137 %138 
                                Output f32* %141 = OpAccessChain %120 %27 %105 
                                                     OpStore %141 %139 
                                      f32_4 %144 = OpLoad %143 
                                                     OpStore %142 %144 
                                Output f32* %145 = OpAccessChain %120 %27 %116 
                                        f32 %146 = OpLoad %145 
                                        f32 %147 = OpFNegate %146 
                                Output f32* %148 = OpAccessChain %120 %27 %116 
                                                     OpStore %148 %147 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 173
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %30 %119 %170 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpMemberDecorate %10 0 Offset 10 
                                                      OpMemberDecorate %10 1 Offset 10 
                                                      OpMemberDecorate %10 2 RelaxedPrecision 
                                                      OpMemberDecorate %10 2 Offset 10 
                                                      OpMemberDecorate %10 3 RelaxedPrecision 
                                                      OpMemberDecorate %10 3 Offset 10 
                                                      OpMemberDecorate %10 4 RelaxedPrecision 
                                                      OpMemberDecorate %10 4 Offset 10 
                                                      OpMemberDecorate %10 5 RelaxedPrecision 
                                                      OpMemberDecorate %10 5 Offset 10 
                                                      OpMemberDecorate %10 6 RelaxedPrecision 
                                                      OpMemberDecorate %10 6 Offset 10 
                                                      OpMemberDecorate %10 7 RelaxedPrecision 
                                                      OpMemberDecorate %10 7 Offset 10 
                                                      OpMemberDecorate %10 8 Offset 10 
                                                      OpMemberDecorate %10 9 Offset 10 
                                                      OpDecorate %10 Block 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %82 DescriptorSet 82 
                                                      OpDecorate %82 Binding 82 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %170 Location 170 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypePointer Private %6 
                                  Private f32* %8 = OpVariable Private 
                                               %9 = OpTypeVector %6 4 
                                              %10 = OpTypeStruct %9 %9 %6 %6 %6 %6 %6 %6 %9 %6 
                                              %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32;}* %12 = OpVariable Uniform 
                                              %13 = OpTypeInt 32 1 
                                          i32 %14 = OpConstant 0 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 1 
                                              %17 = OpTypePointer Uniform %6 
                                          i32 %20 = OpConstant 1 
                                          f32 %25 = OpConstant 3.674022E-40 
                                              %27 = OpTypePointer Private %9 
                               Private f32_4* %28 = OpVariable Private 
                                              %29 = OpTypePointer Input %9 
                                 Input f32_4* %30 = OpVariable Input 
                                          i32 %33 = OpConstant 2 
                               Private f32_4* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 6 
                                          i32 %46 = OpConstant 7 
                                              %55 = OpTypeVector %6 2 
                                              %56 = OpTypePointer Private %55 
                               Private f32_2* %57 = OpVariable Private 
                                          f32 %60 = OpConstant 3.674022E-40 
                                          f32 %61 = OpConstant 3.674022E-40 
                                        f32_2 %62 = OpConstantComposite %60 %61 
                                          i32 %66 = OpConstant 8 
                                              %67 = OpTypePointer Uniform %9 
                                 Private f32* %78 = OpVariable Private 
                                              %79 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %80 = OpTypeSampledImage %79 
                                              %81 = OpTypePointer UniformConstant %80 
  UniformConstant read_only Texture2DSampled* %82 = OpVariable UniformConstant 
                                          i32 %86 = OpConstant 9 
                                          u32 %90 = OpConstant 3 
                                 Private f32* %92 = OpVariable Private 
                                          i32 %94 = OpConstant 3 
                                          f32 %99 = OpConstant 3.674022E-40 
                                Input f32_4* %119 = OpVariable Input 
                                             %120 = OpTypePointer Input %6 
                                         u32 %128 = OpConstant 0 
                                         i32 %132 = OpConstant 4 
                                         i32 %136 = OpConstant 5 
                                         f32 %152 = OpConstant 3.674022E-40 
                                             %155 = OpTypeBool 
                                             %156 = OpTypePointer Private %155 
                               Private bool* %157 = OpVariable Private 
                                         i32 %163 = OpConstant -1 
                                             %169 = OpTypePointer Output %9 
                               Output f32_4* %170 = OpVariable Output 
                                       f32_4 %171 = OpConstantComposite %60 %60 %60 %60 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %18 = OpAccessChain %12 %14 %16 
                                          f32 %19 = OpLoad %18 
                                 Uniform f32* %21 = OpAccessChain %12 %20 %16 
                                          f32 %22 = OpLoad %21 
                                          f32 %23 = OpFAdd %19 %22 
                                                      OpStore %8 %23 
                                          f32 %24 = OpLoad %8 
                                          f32 %26 = OpFMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 2 0 2 
                                 Uniform f32* %34 = OpAccessChain %12 %33 
                                          f32 %35 = OpLoad %34 
                                        f32_4 %36 = OpCompositeConstruct %35 %35 %35 %35 
                                        f32_4 %37 = OpFDiv %32 %36 
                                                      OpStore %28 %37 
                                          f32 %39 = OpLoad %8 
                                        f32_4 %40 = OpCompositeConstruct %39 %39 %39 %39 
                                 Uniform f32* %42 = OpAccessChain %12 %41 
                                          f32 %43 = OpLoad %42 
                                 Uniform f32* %44 = OpAccessChain %12 %41 
                                          f32 %45 = OpLoad %44 
                                 Uniform f32* %47 = OpAccessChain %12 %46 
                                          f32 %48 = OpLoad %47 
                                 Uniform f32* %49 = OpAccessChain %12 %46 
                                          f32 %50 = OpLoad %49 
                                        f32_4 %51 = OpCompositeConstruct %43 %45 %48 %50 
                                        f32_4 %52 = OpFMul %40 %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpFAdd %52 %53 
                                                      OpStore %38 %54 
                                        f32_4 %58 = OpLoad %38 
                                        f32_2 %59 = OpVectorShuffle %58 %58 2 3 
                                        f32_2 %63 = OpFAdd %59 %62 
                                                      OpStore %57 %63 
                                        f32_4 %64 = OpLoad %38 
                                        f32_2 %65 = OpVectorShuffle %64 %64 0 1 
                               Uniform f32_4* %68 = OpAccessChain %12 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_2 %70 = OpVectorShuffle %69 %69 0 1 
                                        f32_2 %71 = OpFMul %65 %70 
                               Uniform f32_4* %72 = OpAccessChain %12 %66 
                                        f32_4 %73 = OpLoad %72 
                                        f32_2 %74 = OpVectorShuffle %73 %73 2 3 
                                        f32_2 %75 = OpFAdd %71 %74 
                                        f32_4 %76 = OpLoad %28 
                                        f32_4 %77 = OpVectorShuffle %76 %75 4 5 2 3 
                                                      OpStore %28 %77 
                   read_only Texture2DSampled %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %28 
                                        f32_2 %85 = OpVectorShuffle %84 %84 0 1 
                                 Uniform f32* %87 = OpAccessChain %12 %86 
                                          f32 %88 = OpLoad %87 
                                        f32_4 %89 = OpImageSampleExplicitLod %83 %85 Lod %9 
                                          f32 %91 = OpCompositeExtract %89 3 
                                                      OpStore %78 %91 
                                          f32 %93 = OpLoad %78 
                                 Uniform f32* %95 = OpAccessChain %12 %94 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFAdd %93 %96 
                                                      OpStore %92 %97 
                                          f32 %98 = OpLoad %92 
                                         f32 %100 = OpExtInst %1 43 %98 %60 %99 
                                                      OpStore %92 %100 
                                       f32_2 %101 = OpLoad %57 
                              Uniform f32_4* %102 = OpAccessChain %12 %66 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %101 %104 
                              Uniform f32_4* %106 = OpAccessChain %12 %66 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                       f32_4 %110 = OpLoad %28 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 3 
                                                      OpStore %28 %111 
                  read_only Texture2DSampled %112 = OpLoad %82 
                                       f32_4 %113 = OpLoad %28 
                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
                                Uniform f32* %115 = OpAccessChain %12 %86 
                                         f32 %116 = OpLoad %115 
                                       f32_4 %117 = OpImageSampleExplicitLod %112 %114 Lod %9 
                                         f32 %118 = OpCompositeExtract %117 3 
                                                      OpStore %78 %118 
                                  Input f32* %121 = OpAccessChain %119 %90 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpLoad %92 
                                         f32 %124 = OpFMul %122 %123 
                                         f32 %125 = OpLoad %78 
                                         f32 %126 = OpFNegate %125 
                                         f32 %127 = OpFAdd %124 %126 
                                Private f32* %129 = OpAccessChain %28 %128 
                                                      OpStore %129 %127 
                                Private f32* %130 = OpAccessChain %28 %128 
                                         f32 %131 = OpLoad %130 
                                Uniform f32* %133 = OpAccessChain %12 %132 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFMul %131 %134 
                                Uniform f32* %137 = OpAccessChain %12 %136 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpFNegate %138 
                                         f32 %140 = OpFAdd %135 %139 
                                Private f32* %141 = OpAccessChain %57 %128 
                                                      OpStore %141 %140 
                                Private f32* %142 = OpAccessChain %57 %128 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpExtInst %1 9 %143 
                                Private f32* %145 = OpAccessChain %57 %128 
                                                      OpStore %145 %144 
                                Private f32* %146 = OpAccessChain %57 %128 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpExtInst %1 43 %147 %60 %99 
                                Private f32* %149 = OpAccessChain %57 %128 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %57 %128 
                                         f32 %151 = OpLoad %150 
                                         f32 %153 = OpFAdd %151 %152 
                                Private f32* %154 = OpAccessChain %57 %128 
                                                      OpStore %154 %153 
                                Private f32* %158 = OpAccessChain %57 %128 
                                         f32 %159 = OpLoad %158 
                                        bool %160 = OpFOrdLessThan %159 %60 
                                                      OpStore %157 %160 
                                        bool %161 = OpLoad %157 
                                         i32 %162 = OpSelect %161 %20 %14 
                                         i32 %164 = OpIMul %162 %163 
                                        bool %165 = OpINotEqual %164 %14 
                                                      OpSelectionMerge %167 None 
                                                      OpBranchConditional %165 %166 %167 
                                             %166 = OpLabel 
                                                      OpKill
                                             %167 = OpLabel 
                                                      OpStore %170 %171 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
out vec3 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD0.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
    vs_TEXCOORD1 = u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _TimeEditor;
uniform 	float _Tiling;
uniform 	float _Density;
uniform 	float _Alpha;
uniform 	float _AlphaCut;
uniform 	float _Speed;
uniform 	float _SpeedSecondLayer;
uniform 	vec4 _PerlinNormalMap_ST;
uniform 	float _MipLevel;
uniform  sampler2D _PerlinNormalMap;
in  vec3 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec2 u_xlat2;
vec2 u_xlat4;
void main()
{
    u_xlat0.x = _Time.y + _TimeEditor.y;
    u_xlat0.x = u_xlat0.x * 0.00100000005;
    u_xlat1 = vs_TEXCOORD1.xzxz / vec4(_Tiling);
    u_xlat0 = u_xlat0.xxxx * vec4(_Speed, _Speed, _SpeedSecondLayer, _SpeedSecondLayer) + u_xlat1;
    u_xlat4.xy = u_xlat0.zw + vec2(0.0, 0.5);
    u_xlat0.xy = u_xlat0.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat0.xy, _MipLevel);
    u_xlat0.x = u_xlat10_1.w + _Density;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = u_xlat4.xy * _PerlinNormalMap_ST.xy + _PerlinNormalMap_ST.zw;
    u_xlat10_1 = textureLod(_PerlinNormalMap, u_xlat2.xy, _MipLevel);
    u_xlat0.x = vs_COLOR0.w * u_xlat0.x + (-u_xlat10_1.w);
    u_xlat0.x = u_xlat0.x * _Alpha + (-_AlphaCut);
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
    SV_Target0 = u_xlat0.xxxx * _LightPositionRange.wwww;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 110
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %58 %67 %92 %101 %102 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpDecorate %58 Location 58 
                                                     OpDecorate %67 Location 67 
                                                     OpMemberDecorate %90 0 BuiltIn 90 
                                                     OpMemberDecorate %90 1 BuiltIn 90 
                                                     OpMemberDecorate %90 2 BuiltIn 90 
                                                     OpDecorate %90 Block 
                                                     OpDecorate %101 Location 101 
                                                     OpDecorate %102 Location 102 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %7 %16 %17 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 1 
                                             %23 = OpTypePointer Uniform %7 
                                         i32 %27 = OpConstant 0 
                                         i32 %35 = OpConstant 2 
                              Private f32_4* %43 = OpVariable Private 
                                         i32 %44 = OpConstant 3 
                                             %56 = OpTypeVector %6 3 
                                             %57 = OpTypePointer Output %56 
                               Output f32_3* %58 = OpVariable Output 
                                             %66 = OpTypePointer Output %7 
                               Output f32_4* %67 = OpVariable Output 
                                         u32 %88 = OpConstant 1 
                                             %89 = OpTypeArray %6 %88 
                                             %90 = OpTypeStruct %7 %6 %89 
                                             %91 = OpTypePointer Output %90 
        Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                              Output f32_4* %101 = OpVariable Output 
                               Input f32_4* %102 = OpVariable Input 
                                            %104 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %24 = OpAccessChain %20 %22 %22 
                                       f32_4 %25 = OpLoad %24 
                                       f32_4 %26 = OpFMul %13 %25 
                                                     OpStore %9 %26 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %27 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpLoad %11 
                                       f32_4 %48 = OpVectorShuffle %47 %47 3 3 3 3 
                                       f32_4 %49 = OpFMul %46 %48 
                                       f32_4 %50 = OpLoad %9 
                                       f32_4 %51 = OpFAdd %49 %50 
                                                     OpStore %43 %51 
                                       f32_4 %52 = OpLoad %9 
                              Uniform f32_4* %53 = OpAccessChain %20 %22 %44 
                                       f32_4 %54 = OpLoad %53 
                                       f32_4 %55 = OpFAdd %52 %54 
                                                     OpStore %9 %55 
                                       f32_4 %59 = OpLoad %43 
                                       f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                              Uniform f32_4* %61 = OpAccessChain %20 %27 
                                       f32_4 %62 = OpLoad %61 
                                       f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                       f32_3 %64 = OpFNegate %63 
                                       f32_3 %65 = OpFAdd %60 %64 
                                                     OpStore %58 %65 
                                       f32_4 %68 = OpLoad %43 
                                                     OpStore %67 %68 
                                       f32_4 %69 = OpLoad %9 
                                       f32_4 %70 = OpVectorShuffle %69 %69 1 1 1 1 
                              Uniform f32_4* %71 = OpAccessChain %20 %35 %22 
                                       f32_4 %72 = OpLoad %71 
                                       f32_4 %73 = OpFMul %70 %72 
                                                     OpStore %43 %73 
                              Uniform f32_4* %74 = OpAccessChain %20 %35 %27 
                                       f32_4 %75 = OpLoad %74 
                                       f32_4 %76 = OpLoad %9 
                                       f32_4 %77 = OpVectorShuffle %76 %76 0 0 0 0 
                                       f32_4 %78 = OpFMul %75 %77 
                                       f32_4 %79 = OpLoad %43 
                                       f32_4 %80 = OpFAdd %78 %79 
                                                     OpStore %43 %80 
                              Uniform f32_4* %81 = OpAccessChain %20 %35 %35 
                                       f32_4 %82 = OpLoad %81 
                                       f32_4 %83 = OpLoad %9 
                                       f32_4 %84 = OpVectorShuffle %83 %83 2 2 2 2 
                                       f32_4 %85 = OpFMul %82 %84 
                                       f32_4 %86 = OpLoad %43 
                                       f32_4 %87 = OpFAdd %85 %86 
                                                     OpStore %43 %87 
                              Uniform f32_4* %93 = OpAccessChain %20 %35 %44 
                                       f32_4 %94 = OpLoad %93 
                                       f32_4 %95 = OpLoad %9 
                                       f32_4 %96 = OpVectorShuffle %95 %95 3 3 3 3 
                                       f32_4 %97 = OpFMul %94 %96 
                                       f32_4 %98 = OpLoad %43 
                                       f32_4 %99 = OpFAdd %97 %98 
                              Output f32_4* %100 = OpAccessChain %92 %27 
                                                     OpStore %100 %99 
                                      f32_4 %103 = OpLoad %102 
                                                     OpStore %101 %103 
                                Output f32* %105 = OpAccessChain %92 %27 %88 
                                        f32 %106 = OpLoad %105 
                                        f32 %107 = OpFNegate %106 
                                Output f32* %108 = OpAccessChain %92 %27 %88 
                                                     OpStore %108 %107 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 197
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %30 %119 %172 %189 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpMemberDecorate %10 0 Offset 10 
                                                      OpMemberDecorate %10 1 Offset 10 
                                                      OpMemberDecorate %10 2 Offset 10 
                                                      OpMemberDecorate %10 3 Offset 10 
                                                      OpMemberDecorate %10 4 RelaxedPrecision 
                                                      OpMemberDecorate %10 4 Offset 10 
                                                      OpMemberDecorate %10 5 RelaxedPrecision 
                                                      OpMemberDecorate %10 5 Offset 10 
                                                      OpMemberDecorate %10 6 RelaxedPrecision 
                                                      OpMemberDecorate %10 6 Offset 10 
                                                      OpMemberDecorate %10 7 RelaxedPrecision 
                                                      OpMemberDecorate %10 7 Offset 10 
                                                      OpMemberDecorate %10 8 RelaxedPrecision 
                                                      OpMemberDecorate %10 8 Offset 10 
                                                      OpMemberDecorate %10 9 RelaxedPrecision 
                                                      OpMemberDecorate %10 9 Offset 10 
                                                      OpMemberDecorate %10 10 Offset 10 
                                                      OpMemberDecorate %10 11 Offset 10 
                                                      OpDecorate %10 Block 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %82 DescriptorSet 82 
                                                      OpDecorate %82 Binding 82 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate %189 Location 189 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypePointer Private %6 
                                  Private f32* %8 = OpVariable Private 
                                               %9 = OpTypeVector %6 4 
                                              %10 = OpTypeStruct %9 %9 %9 %9 %6 %6 %6 %6 %6 %6 %9 %6 
                                              %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32;}* %12 = OpVariable Uniform 
                                              %13 = OpTypeInt 32 1 
                                          i32 %14 = OpConstant 0 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 1 
                                              %17 = OpTypePointer Uniform %6 
                                          i32 %20 = OpConstant 3 
                                          f32 %25 = OpConstant 3.674022E-40 
                                              %27 = OpTypePointer Private %9 
                               Private f32_4* %28 = OpVariable Private 
                                              %29 = OpTypePointer Input %9 
                                 Input f32_4* %30 = OpVariable Input 
                                          i32 %33 = OpConstant 4 
                               Private f32_4* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 8 
                                          i32 %46 = OpConstant 9 
                                              %55 = OpTypeVector %6 2 
                                              %56 = OpTypePointer Private %55 
                               Private f32_2* %57 = OpVariable Private 
                                          f32 %60 = OpConstant 3.674022E-40 
                                          f32 %61 = OpConstant 3.674022E-40 
                                        f32_2 %62 = OpConstantComposite %60 %61 
                                          i32 %66 = OpConstant 10 
                                              %67 = OpTypePointer Uniform %9 
                                 Private f32* %78 = OpVariable Private 
                                              %79 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %80 = OpTypeSampledImage %79 
                                              %81 = OpTypePointer UniformConstant %80 
  UniformConstant read_only Texture2DSampled* %82 = OpVariable UniformConstant 
                                          i32 %86 = OpConstant 11 
                                          u32 %90 = OpConstant 3 
                                 Private f32* %92 = OpVariable Private 
                                          i32 %94 = OpConstant 5 
                                          f32 %99 = OpConstant 3.674022E-40 
                                Input f32_4* %119 = OpVariable Input 
                                             %120 = OpTypePointer Input %6 
                                         u32 %128 = OpConstant 0 
                                         i32 %132 = OpConstant 6 
                                         i32 %136 = OpConstant 7 
                                         f32 %152 = OpConstant 3.674022E-40 
                                             %155 = OpTypeBool 
                                             %156 = OpTypePointer Private %155 
                               Private bool* %157 = OpVariable Private 
                                         i32 %162 = OpConstant 1 
                                         i32 %164 = OpConstant -1 
                                             %170 = OpTypeVector %6 3 
                                             %171 = OpTypePointer Input %170 
                                Input f32_3* %172 = OpVariable Input 
                                         i32 %183 = OpConstant 2 
                                             %188 = OpTypePointer Output %9 
                               Output f32_4* %189 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %18 = OpAccessChain %12 %14 %16 
                                          f32 %19 = OpLoad %18 
                                 Uniform f32* %21 = OpAccessChain %12 %20 %16 
                                          f32 %22 = OpLoad %21 
                                          f32 %23 = OpFAdd %19 %22 
                                                      OpStore %8 %23 
                                          f32 %24 = OpLoad %8 
                                          f32 %26 = OpFMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 2 0 2 
                                 Uniform f32* %34 = OpAccessChain %12 %33 
                                          f32 %35 = OpLoad %34 
                                        f32_4 %36 = OpCompositeConstruct %35 %35 %35 %35 
                                        f32_4 %37 = OpFDiv %32 %36 
                                                      OpStore %28 %37 
                                          f32 %39 = OpLoad %8 
                                        f32_4 %40 = OpCompositeConstruct %39 %39 %39 %39 
                                 Uniform f32* %42 = OpAccessChain %12 %41 
                                          f32 %43 = OpLoad %42 
                                 Uniform f32* %44 = OpAccessChain %12 %41 
                                          f32 %45 = OpLoad %44 
                                 Uniform f32* %47 = OpAccessChain %12 %46 
                                          f32 %48 = OpLoad %47 
                                 Uniform f32* %49 = OpAccessChain %12 %46 
                                          f32 %50 = OpLoad %49 
                                        f32_4 %51 = OpCompositeConstruct %43 %45 %48 %50 
                                        f32_4 %52 = OpFMul %40 %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpFAdd %52 %53 
                                                      OpStore %38 %54 
                                        f32_4 %58 = OpLoad %38 
                                        f32_2 %59 = OpVectorShuffle %58 %58 2 3 
                                        f32_2 %63 = OpFAdd %59 %62 
                                                      OpStore %57 %63 
                                        f32_4 %64 = OpLoad %38 
                                        f32_2 %65 = OpVectorShuffle %64 %64 0 1 
                               Uniform f32_4* %68 = OpAccessChain %12 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_2 %70 = OpVectorShuffle %69 %69 0 1 
                                        f32_2 %71 = OpFMul %65 %70 
                               Uniform f32_4* %72 = OpAccessChain %12 %66 
                                        f32_4 %73 = OpLoad %72 
                                        f32_2 %74 = OpVectorShuffle %73 %73 2 3 
                                        f32_2 %75 = OpFAdd %71 %74 
                                        f32_4 %76 = OpLoad %28 
                                        f32_4 %77 = OpVectorShuffle %76 %75 4 5 2 3 
                                                      OpStore %28 %77 
                   read_only Texture2DSampled %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %28 
                                        f32_2 %85 = OpVectorShuffle %84 %84 0 1 
                                 Uniform f32* %87 = OpAccessChain %12 %86 
                                          f32 %88 = OpLoad %87 
                                        f32_4 %89 = OpImageSampleExplicitLod %83 %85 Lod %9 
                                          f32 %91 = OpCompositeExtract %89 3 
                                                      OpStore %78 %91 
                                          f32 %93 = OpLoad %78 
                                 Uniform f32* %95 = OpAccessChain %12 %94 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFAdd %93 %96 
                                                      OpStore %92 %97 
                                          f32 %98 = OpLoad %92 
                                         f32 %100 = OpExtInst %1 43 %98 %60 %99 
                                                      OpStore %92 %100 
                                       f32_2 %101 = OpLoad %57 
                              Uniform f32_4* %102 = OpAccessChain %12 %66 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %101 %104 
                              Uniform f32_4* %106 = OpAccessChain %12 %66 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                       f32_4 %110 = OpLoad %28 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 3 
                                                      OpStore %28 %111 
                  read_only Texture2DSampled %112 = OpLoad %82 
                                       f32_4 %113 = OpLoad %28 
                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
                                Uniform f32* %115 = OpAccessChain %12 %86 
                                         f32 %116 = OpLoad %115 
                                       f32_4 %117 = OpImageSampleExplicitLod %112 %114 Lod %9 
                                         f32 %118 = OpCompositeExtract %117 3 
                                                      OpStore %78 %118 
                                  Input f32* %121 = OpAccessChain %119 %90 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpLoad %92 
                                         f32 %124 = OpFMul %122 %123 
                                         f32 %125 = OpLoad %78 
                                         f32 %126 = OpFNegate %125 
                                         f32 %127 = OpFAdd %124 %126 
                                Private f32* %129 = OpAccessChain %28 %128 
                                                      OpStore %129 %127 
                                Private f32* %130 = OpAccessChain %28 %128 
                                         f32 %131 = OpLoad %130 
                                Uniform f32* %133 = OpAccessChain %12 %132 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFMul %131 %134 
                                Uniform f32* %137 = OpAccessChain %12 %136 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpFNegate %138 
                                         f32 %140 = OpFAdd %135 %139 
                                Private f32* %141 = OpAccessChain %57 %128 
                                                      OpStore %141 %140 
                                Private f32* %142 = OpAccessChain %57 %128 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpExtInst %1 9 %143 
                                Private f32* %145 = OpAccessChain %57 %128 
                                                      OpStore %145 %144 
                                Private f32* %146 = OpAccessChain %57 %128 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpExtInst %1 43 %147 %60 %99 
                                Private f32* %149 = OpAccessChain %57 %128 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %57 %128 
                                         f32 %151 = OpLoad %150 
                                         f32 %153 = OpFAdd %151 %152 
                                Private f32* %154 = OpAccessChain %57 %128 
                                                      OpStore %154 %153 
                                Private f32* %158 = OpAccessChain %57 %128 
                                         f32 %159 = OpLoad %158 
                                        bool %160 = OpFOrdLessThan %159 %60 
                                                      OpStore %157 %160 
                                        bool %161 = OpLoad %157 
                                         i32 %163 = OpSelect %161 %162 %14 
                                         i32 %165 = OpIMul %163 %164 
                                        bool %166 = OpINotEqual %165 %14 
                                                      OpSelectionMerge %168 None 
                                                      OpBranchConditional %166 %167 %168 
                                             %167 = OpLabel 
                                                      OpKill
                                             %168 = OpLabel 
                                       f32_3 %173 = OpLoad %172 
                                       f32_3 %174 = OpLoad %172 
                                         f32 %175 = OpDot %173 %174 
                                Private f32* %176 = OpAccessChain %28 %128 
                                                      OpStore %176 %175 
                                Private f32* %177 = OpAccessChain %28 %128 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpExtInst %1 31 %178 
                                Private f32* %180 = OpAccessChain %28 %128 
                                                      OpStore %180 %179 
                                Private f32* %181 = OpAccessChain %28 %128 
                                         f32 %182 = OpLoad %181 
                                Uniform f32* %184 = OpAccessChain %12 %183 %128 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFAdd %182 %185 
                                Private f32* %187 = OpAccessChain %28 %128 
                                                      OpStore %187 %186 
                                       f32_4 %190 = OpLoad %28 
                                       f32_4 %191 = OpVectorShuffle %190 %190 0 0 0 0 
                              Uniform f32_4* %192 = OpAccessChain %12 %162 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpVectorShuffle %193 %193 3 3 3 3 
                                       f32_4 %195 = OpFMul %191 %194 
                                                      OpStore %189 %195 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_CUBE" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_CUBE" }
""
}
}
}
}
Fallback "Diffuse"
CustomEditor "ShaderForgeMaterialInspector"
}