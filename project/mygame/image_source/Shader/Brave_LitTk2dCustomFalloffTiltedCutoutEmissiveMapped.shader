//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Brave/LitTk2dCustomFalloffTiltedCutoutEmissiveMapped" {
Properties {
_MainTex ("Base (RGB)", 2D) = "white" { }
_Perpendicular ("Is Perpendicular Tilt", Float) = 1
_Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
_EmissiveMap ("Emissive Map", 2D) = "white" { }
_EmissivePower ("Emissive Power", Float) = 0
_EmissiveColorPower ("Emissive Color Power", Float) = 7
_EmissiveColor ("Emissive Color", Color) = (1,1,1,1)
_EmissiveGlowToggle ("Emissive Mode", Float) = 0
_NoiseAmount ("Noise Amount", Float) = 0
_ValueMaximum ("Value Max", Float) = 1
_ValueMinimum ("Value Min", Float) = 0
}
SubShader {
 Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" "UnlitTilted" = "UnlitTilted" }
 Pass {
  Name "FORWARD"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" "UnlitTilted" = "UnlitTilted" }
  ColorMask RGB 0
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 32831
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _EmissiveMap_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _EmissiveMap_ST.xy + _EmissiveMap_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _EmissiveGlowToggle;
uniform 	float _ValueMaximum;
uniform 	float _ValueMinimum;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _EmissiveMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat16_6;
float u_xlat7;
float u_xlat9;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat16_19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1.xyz = log2(u_xlat10_0.xyz);
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10_2 = texture(_EmissiveMap, vs_TEXCOORD0.zw);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xxx;
    u_xlat16_19 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlatb2 = _EmissiveGlowToggle>=0.100000001;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat16_19 = (-u_xlat16_19) + 0.100000024;
    u_xlat19 = u_xlat2.x * u_xlat16_19 + 1.0;
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat20 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb20 = u_xlat20<0.0;
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb20){
        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb20)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat20 = u_xlat3.y * 0.25 + 0.75;
        u_xlat9 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat20, u_xlat9);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat20 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat3.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat20) * u_xlat4.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.w = u_xlat10_0.w;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat1.xyw = u_xlat1.yzx * vec3(u_xlat19) + u_xlat3.yzx;
    u_xlatb18 = u_xlat1.x>=u_xlat1.y;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat1.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.xy + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat18) * u_xlat5 + u_xlat4;
    u_xlatb18 = u_xlat1.w>=u_xlat4.x;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat1.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat1.wyx;
    u_xlat4 = (-u_xlat1) + u_xlat4;
    u_xlat1 = vec4(u_xlat18) * u_xlat4 + u_xlat1;
    u_xlat18 = min(u_xlat1.y, u_xlat1.w);
    u_xlat18 = (-u_xlat18) + u_xlat1.x;
    u_xlat7 = (-u_xlat1.y) + u_xlat1.w;
    u_xlat19 = u_xlat18 * 6.0 + 1.00000001e-010;
    u_xlat7 = u_xlat7 / u_xlat19;
    u_xlat7 = u_xlat7 + u_xlat1.z;
    u_xlat13 = u_xlat1.x + 1.00000001e-010;
    u_xlat18 = u_xlat18 / u_xlat13;
    u_xlatb13 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat16_6 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat6.x = u_xlat13 * u_xlat16_6 + u_xlat10_0.z;
    u_xlatb12 = u_xlat10_0.x>=u_xlat6.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat6.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat12 * u_xlat0 + u_xlat6.x;
    u_xlat6.x = u_xlat0 * _ValueMinimum;
    u_xlat6.x = max(u_xlat6.x, u_xlat1.x);
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0 = u_xlat12 * 50.0 + u_xlat0;
    u_xlat0 = u_xlat0 * _ValueMaximum;
    u_xlat0 = min(u_xlat0, u_xlat6.x);
    u_xlat1.xyz = abs(vec3(u_xlat7)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat6.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat3.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 175
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %91 %92 %106 %122 %153 %159 %162 %164 %167 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate %91 Location 91 
                                                      OpDecorate %92 Location 92 
                                                      OpDecorate %106 Location 106 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate %159 Location 159 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %167 Location 167 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %89 = OpTypePointer Output %7 
                                Output f32_4* %91 = OpVariable Output 
                                 Input f32_4* %92 = OpVariable Input 
                                              %93 = OpTypeVector %6 2 
                                Input f32_4* %106 = OpVariable Input 
                                         i32 %109 = OpConstant 4 
                                             %120 = OpTypeVector %6 3 
                                             %121 = OpTypePointer Input %120 
                                Input f32_3* %122 = OpVariable Input 
                                         u32 %128 = OpConstant 0 
                                             %129 = OpTypePointer Private %6 
                                         u32 %142 = OpConstant 2 
                                Private f32* %144 = OpVariable Private 
                                             %152 = OpTypePointer Output %120 
                               Output f32_3* %153 = OpVariable Output 
                               Output f32_3* %159 = OpVariable Output 
                               Output f32_4* %162 = OpVariable Output 
                               Output f32_3* %164 = OpVariable Output 
                                         f32 %165 = OpConstant 3.674022E-40 
                                       f32_3 %166 = OpConstantComposite %165 %165 %165 
                               Output f32_4* %167 = OpVariable Output 
                                       f32_4 %168 = OpConstantComposite %165 %165 %165 %165 
                                             %169 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %36 %24 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %36 %23 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %36 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %82 = OpAccessChain %21 %36 %46 
                                        f32_4 %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %44 
                                        f32_4 %85 = OpVectorShuffle %84 %84 3 3 3 3 
                                        f32_4 %86 = OpFMul %83 %85 
                                        f32_4 %87 = OpLoad %57 
                                        f32_4 %88 = OpFAdd %86 %87 
                                Output f32_4* %90 = OpAccessChain %81 %23 
                                                      OpStore %90 %88 
                                        f32_4 %94 = OpLoad %92 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                               Uniform f32_4* %96 = OpAccessChain %21 %46 
                                        f32_4 %97 = OpLoad %96 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_2 %99 = OpFMul %95 %98 
                              Uniform f32_4* %100 = OpAccessChain %21 %46 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 2 3 
                                       f32_2 %103 = OpFAdd %99 %102 
                                       f32_4 %104 = OpLoad %91 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 2 3 
                                                      OpStore %91 %105 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
                              Uniform f32_4* %110 = OpAccessChain %21 %109 
                                       f32_4 %111 = OpLoad %110 
                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
                                       f32_2 %113 = OpFMul %108 %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %109 
                                       f32_4 %115 = OpLoad %114 
                                       f32_2 %116 = OpVectorShuffle %115 %115 2 3 
                                       f32_2 %117 = OpFAdd %113 %116 
                                       f32_4 %118 = OpLoad %91 
                                       f32_4 %119 = OpVectorShuffle %118 %117 0 1 4 5 
                                                      OpStore %91 %119 
                                       f32_3 %123 = OpLoad %122 
                              Uniform f32_4* %124 = OpAccessChain %21 %24 %23 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %130 = OpAccessChain %44 %128 
                                                      OpStore %130 %127 
                                       f32_3 %131 = OpLoad %122 
                              Uniform f32_4* %132 = OpAccessChain %21 %24 %24 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                         f32 %135 = OpDot %131 %134 
                                Private f32* %136 = OpAccessChain %44 %77 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %122 
                              Uniform f32_4* %138 = OpAccessChain %21 %24 %36 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %137 %140 
                                Private f32* %143 = OpAccessChain %44 %142 
                                                      OpStore %143 %141 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_4 %147 = OpLoad %44 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                         f32 %149 = OpDot %146 %148 
                                                      OpStore %144 %149 
                                         f32 %150 = OpLoad %144 
                                         f32 %151 = OpExtInst %1 32 %150 
                                                      OpStore %144 %151 
                                         f32 %154 = OpLoad %144 
                                       f32_3 %155 = OpCompositeConstruct %154 %154 %154 
                                       f32_4 %156 = OpLoad %44 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %155 %157 
                                                      OpStore %153 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                                      OpStore %159 %161 
                                       f32_4 %163 = OpLoad %9 
                                                      OpStore %162 %163 
                                                      OpStore %164 %166 
                                                      OpStore %167 %168 
                                 Output f32* %170 = OpAccessChain %81 %23 %77 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFNegate %171 
                                 Output f32* %173 = OpAccessChain %81 %23 %77 
                                                      OpStore %173 %172 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 574
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %166 %295 %301 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %31 ArrayStride 31 
                                                      OpMemberDecorate %32 0 RelaxedPrecision 
                                                      OpMemberDecorate %32 0 Offset 32 
                                                      OpMemberDecorate %32 1 Offset 32 
                                                      OpMemberDecorate %32 2 Offset 32 
                                                      OpMemberDecorate %32 3 Offset 32 
                                                      OpMemberDecorate %32 4 Offset 32 
                                                      OpMemberDecorate %32 5 RelaxedPrecision 
                                                      OpMemberDecorate %32 5 Offset 32 
                                                      OpMemberDecorate %32 6 Offset 32 
                                                      OpMemberDecorate %32 7 Offset 32 
                                                      OpMemberDecorate %32 8 Offset 32 
                                                      OpMemberDecorate %32 9 Offset 32 
                                                      OpMemberDecorate %32 10 Offset 32 
                                                      OpMemberDecorate %32 11 RelaxedPrecision 
                                                      OpMemberDecorate %32 11 Offset 32 
                                                      OpDecorate %32 Block 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %68 DescriptorSet 68 
                                                      OpDecorate %68 Binding 68 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %157 SpecId 157 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %260 DescriptorSet 260 
                                                      OpDecorate %260 Binding 260 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %295 Location 295 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %301 Location 301 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
                               Private f32_4* %27 = OpVariable Private 
                                              %29 = OpTypeInt 32 0 
                                          u32 %30 = OpConstant 4 
                                              %31 = OpTypeArray %7 %30 
                                              %32 = OpTypeStruct %7 %7 %31 %21 %21 %7 %6 %6 %6 %6 %6 %6 
                                              %33 = OpTypePointer Uniform %32 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32;}* %34 = OpVariable Uniform 
                                              %35 = OpTypeInt 32 1 
                                          i32 %36 = OpConstant 7 
                                              %37 = OpTypePointer Uniform %6 
                                          i32 %59 = OpConstant 6 
                                              %66 = OpTypePointer Private %6 
                                 Private f32* %67 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %68 = OpVariable UniformConstant 
                                          u32 %73 = OpConstant 0 
                               Private f32_4* %82 = OpVariable Private 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %87 = OpConstant 3.674022E-40 
                                        f32_3 %88 = OpConstantComposite %85 %86 %87 
                                              %91 = OpTypeBool 
                                              %92 = OpTypePointer Private %91 
                                Private bool* %93 = OpVariable Private 
                                          i32 %94 = OpConstant 8 
                                          f32 %97 = OpConstant 3.674022E-40 
                                 Private f32* %99 = OpVariable Private 
                                             %100 = OpTypePointer Function %6 
                                         f32 %105 = OpConstant 3.674022E-40 
                                         f32 %107 = OpConstant 3.674022E-40 
                                Private f32* %109 = OpVariable Private 
                                         f32 %113 = OpConstant 3.674022E-40 
                              Private f32_3* %119 = OpVariable Private 
                                         u32 %125 = OpConstant 3 
                                         i32 %128 = OpConstant 11 
                               Private bool* %134 = OpVariable Private 
                                         i32 %139 = OpConstant 0 
                                         i32 %140 = OpConstant 1 
                                         i32 %142 = OpConstant -1 
                                        bool %151 = OpConstantFalse 
                                        bool %157 = OpSpecConstantFalse 
                                         u32 %160 = OpConstant 1 
                              Private f32_4* %164 = OpVariable Private 
                                             %165 = OpTypePointer Input %21 
                                Input f32_3* %166 = OpVariable Input 
                                         i32 %169 = OpConstant 2 
                                             %170 = OpTypePointer Uniform %7 
                                         i32 %201 = OpConstant 3 
                                             %208 = OpTypePointer Function %21 
                                         i32 %222 = OpConstant 4 
                                             %223 = OpTypePointer Uniform %21 
                              Private f32_4* %230 = OpVariable Private 
                                Private f32* %238 = OpVariable Private 
                                         f32 %241 = OpConstant 3.674022E-40 
                                         f32 %243 = OpConstant 3.674022E-40 
                                         u32 %245 = OpConstant 2 
                                         f32 %248 = OpConstant 3.674022E-40 
                                             %257 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %258 = OpTypeSampledImage %257 
                                             %259 = OpTypePointer UniformConstant %258 
 UniformConstant read_only Texture3DSampled* %260 = OpVariable UniformConstant 
                              Private f32_3* %271 = OpVariable Private 
                              Private f32_3* %281 = OpVariable Private 
                                         i32 %284 = OpConstant 5 
                                Input f32_3* %295 = OpVariable Input 
                                             %300 = OpTypePointer Output %7 
                               Output f32_4* %301 = OpVariable Output 
                                             %304 = OpTypePointer Output %6 
                               Private bool* %313 = OpVariable Private 
                                Private f32* %319 = OpVariable Private 
                                             %334 = OpTypePointer Private %17 
                              Private f32_2* %335 = OpVariable Private 
                                         f32 %337 = OpConstant 3.674022E-40 
                                         f32 %353 = OpConstant 3.674022E-40 
                                       f32_2 %354 = OpConstantComposite %337 %353 
                                Private f32* %422 = OpVariable Private 
                                         f32 %424 = OpConstant 3.674022E-40 
                                         f32 %426 = OpConstant 3.674022E-40 
                               Private bool* %441 = OpVariable Private 
                                Private f32* %454 = OpVariable Private 
                              Private f32_3* %461 = OpVariable Private 
                               Private bool* %470 = OpVariable Private 
                                Private f32* %476 = OpVariable Private 
                              Private f32_3* %483 = OpVariable Private 
                                         i32 %501 = OpConstant 10 
                                         f32 %517 = OpConstant 3.674022E-40 
                                         i32 %525 = OpConstant 9 
                                         f32 %539 = OpConstant 3.674022E-40 
                                       f32_3 %540 = OpConstantComposite %105 %353 %539 
                                       f32_3 %545 = OpConstantComposite %424 %424 %424 
                                         f32 %547 = OpConstant 3.674022E-40 
                                       f32_3 %548 = OpConstantComposite %547 %547 %547 
                                       f32_3 %552 = OpConstantComposite %337 %337 %337 
                                       f32_3 %564 = OpConstantComposite %105 %105 %105 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %101 = OpVariable Function 
                             Function f32_3* %209 = OpVariable Function 
                               Function f32* %320 = OpVariable Function 
                               Function f32* %363 = OpVariable Function 
                               Function f32* %447 = OpVariable Function 
                               Function f32* %477 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                                        f32_4 %24 = OpLoad %9 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpExtInst %1 30 %25 
                                                      OpStore %23 %26 
                                        f32_3 %28 = OpLoad %23 
                                 Uniform f32* %38 = OpAccessChain %34 %36 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %34 %36 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %34 %36 
                                          f32 %43 = OpLoad %42 
                                        f32_3 %44 = OpCompositeConstruct %39 %41 %43 
                                          f32 %45 = OpCompositeExtract %44 0 
                                          f32 %46 = OpCompositeExtract %44 1 
                                          f32 %47 = OpCompositeExtract %44 2 
                                        f32_3 %48 = OpCompositeConstruct %45 %46 %47 
                                        f32_3 %49 = OpFMul %28 %48 
                                        f32_4 %50 = OpLoad %27 
                                        f32_4 %51 = OpVectorShuffle %50 %49 4 5 6 3 
                                                      OpStore %27 %51 
                                        f32_4 %52 = OpLoad %27 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpExtInst %1 29 %53 
                                        f32_4 %55 = OpLoad %27 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %27 %56 
                                        f32_4 %57 = OpLoad %27 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                                 Uniform f32* %60 = OpAccessChain %34 %59 
                                          f32 %61 = OpLoad %60 
                                        f32_3 %62 = OpCompositeConstruct %61 %61 %61 
                                        f32_3 %63 = OpFMul %58 %62 
                                        f32_4 %64 = OpLoad %27 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %27 %65 
                   read_only Texture2DSampled %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %16 
                                        f32_2 %71 = OpVectorShuffle %70 %70 2 3 
                                        f32_4 %72 = OpImageSampleImplicitLod %69 %71 
                                          f32 %74 = OpCompositeExtract %72 0 
                                                      OpStore %67 %74 
                                          f32 %75 = OpLoad %67 
                                        f32_3 %76 = OpCompositeConstruct %75 %75 %75 
                                        f32_4 %77 = OpLoad %27 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %27 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %27 %81 
                                        f32_4 %83 = OpLoad %9 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                          f32 %89 = OpDot %84 %88 
                                 Private f32* %90 = OpAccessChain %82 %73 
                                                      OpStore %90 %89 
                                 Uniform f32* %95 = OpAccessChain %34 %94 
                                          f32 %96 = OpLoad %95 
                                         bool %98 = OpFOrdGreaterThanEqual %96 %97 
                                                      OpStore %93 %98 
                                        bool %102 = OpLoad %93 
                                                      OpSelectionMerge %104 None 
                                                      OpBranchConditional %102 %103 %106 
                                             %103 = OpLabel 
                                                      OpStore %101 %105 
                                                      OpBranch %104 
                                             %106 = OpLabel 
                                                      OpStore %101 %107 
                                                      OpBranch %104 
                                             %104 = OpLabel 
                                         f32 %108 = OpLoad %101 
                                                      OpStore %99 %108 
                                Private f32* %110 = OpAccessChain %82 %73 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpFNegate %111 
                                         f32 %114 = OpFAdd %112 %113 
                                                      OpStore %109 %114 
                                         f32 %115 = OpLoad %99 
                                         f32 %116 = OpLoad %109 
                                         f32 %117 = OpFMul %115 %116 
                                         f32 %118 = OpFAdd %117 %105 
                                                      OpStore %99 %118 
                                         f32 %120 = OpLoad %99 
                                       f32_3 %121 = OpCompositeConstruct %120 %120 %120 
                                       f32_4 %122 = OpLoad %27 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                                      OpStore %119 %124 
                                Private f32* %126 = OpAccessChain %9 %125 
                                         f32 %127 = OpLoad %126 
                                Uniform f32* %129 = OpAccessChain %34 %128 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFNegate %130 
                                         f32 %132 = OpFAdd %127 %131 
                                Private f32* %133 = OpAccessChain %82 %73 
                                                      OpStore %133 %132 
                                Private f32* %135 = OpAccessChain %82 %73 
                                         f32 %136 = OpLoad %135 
                                        bool %137 = OpFOrdLessThan %136 %107 
                                                      OpStore %134 %137 
                                        bool %138 = OpLoad %134 
                                         i32 %141 = OpSelect %138 %140 %139 
                                         i32 %143 = OpIMul %141 %142 
                                        bool %144 = OpINotEqual %143 %139 
                                                      OpSelectionMerge %146 None 
                                                      OpBranchConditional %144 %145 %146 
                                             %145 = OpLabel 
                                                      OpKill
                                             %146 = OpLabel 
                                Uniform f32* %148 = OpAccessChain %34 %140 %73 
                                         f32 %149 = OpLoad %148 
                                        bool %150 = OpFOrdEqual %149 %105 
                                                      OpStore %134 %150 
                                                      OpSelectionMerge %153 None 
                                                      OpBranchConditional %151 %152 %153 
                                             %152 = OpLabel 
                                        bool %154 = OpLoad %134 
                                                      OpSelectionMerge %156 None 
                                                      OpBranchConditional %154 %155 %156 
                                             %155 = OpLabel 
                                                      OpBranch %156 
                                             %156 = OpLabel 
                                                      OpBranch %153 
                                             %153 = OpLabel 
                                                      OpSelectionMerge %159 None 
                                                      OpBranchConditional %157 %158 %266 
                                             %158 = OpLabel 
                                Uniform f32* %161 = OpAccessChain %34 %140 %160 
                                         f32 %162 = OpLoad %161 
                                        bool %163 = OpFOrdEqual %162 %105 
                                                      OpStore %134 %163 
                                       f32_3 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 1 1 1 
                              Uniform f32_4* %171 = OpAccessChain %34 %169 %140 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFMul %168 %173 
                                       f32_4 %175 = OpLoad %164 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %164 %176 
                              Uniform f32_4* %177 = OpAccessChain %34 %169 %139 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpLoad %166 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 0 0 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %164 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %164 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %164 %187 
                              Uniform f32_4* %188 = OpAccessChain %34 %169 %169 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpLoad %166 
                                       f32_3 %192 = OpVectorShuffle %191 %191 2 2 2 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_4 %194 = OpLoad %164 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFAdd %193 %195 
                                       f32_4 %197 = OpLoad %164 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %164 %198 
                                       f32_4 %199 = OpLoad %164 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                              Uniform f32_4* %202 = OpAccessChain %34 %169 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFAdd %200 %204 
                                       f32_4 %206 = OpLoad %164 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %164 %207 
                                        bool %210 = OpLoad %134 
                                                      OpSelectionMerge %212 None 
                                                      OpBranchConditional %210 %211 %215 
                                             %211 = OpLabel 
                                       f32_4 %213 = OpLoad %164 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                                      OpStore %209 %214 
                                                      OpBranch %212 
                                             %215 = OpLabel 
                                       f32_3 %216 = OpLoad %166 
                                                      OpStore %209 %216 
                                                      OpBranch %212 
                                             %212 = OpLabel 
                                       f32_3 %217 = OpLoad %209 
                                       f32_4 %218 = OpLoad %164 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %164 %219 
                                       f32_4 %220 = OpLoad %164 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                              Uniform f32_3* %224 = OpAccessChain %34 %222 
                                       f32_3 %225 = OpLoad %224 
                                       f32_3 %226 = OpFNegate %225 
                                       f32_3 %227 = OpFAdd %221 %226 
                                       f32_4 %228 = OpLoad %164 
                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
                                                      OpStore %164 %229 
                                       f32_4 %231 = OpLoad %164 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                              Uniform f32_3* %233 = OpAccessChain %34 %201 
                                       f32_3 %234 = OpLoad %233 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_4 %236 = OpLoad %230 
                                       f32_4 %237 = OpVectorShuffle %236 %235 0 4 5 6 
                                                      OpStore %230 %237 
                                Private f32* %239 = OpAccessChain %230 %160 
                                         f32 %240 = OpLoad %239 
                                         f32 %242 = OpFMul %240 %241 
                                         f32 %244 = OpFAdd %242 %243 
                                                      OpStore %238 %244 
                                Uniform f32* %246 = OpAccessChain %34 %140 %245 
                                         f32 %247 = OpLoad %246 
                                         f32 %249 = OpFMul %247 %248 
                                         f32 %250 = OpFAdd %249 %243 
                                Private f32* %251 = OpAccessChain %164 %73 
                                                      OpStore %251 %250 
                                         f32 %252 = OpLoad %238 
                                Private f32* %253 = OpAccessChain %164 %73 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpExtInst %1 40 %252 %254 
                                Private f32* %256 = OpAccessChain %230 %73 
                                                      OpStore %256 %255 
                  read_only Texture3DSampled %261 = OpLoad %260 
                                       f32_4 %262 = OpLoad %230 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 2 3 
                                       f32_4 %264 = OpImageSampleImplicitLod %261 %263 
                                                      OpStore %230 %264 
                                       f32_4 %265 = OpLoad %230 
                                                      OpStore %82 %265 
                                                      OpBranch %159 
                                             %266 = OpLabel 
                                Private f32* %267 = OpAccessChain %82 %73 
                                                      OpStore %267 %105 
                                Private f32* %268 = OpAccessChain %82 %160 
                                                      OpStore %268 %105 
                                Private f32* %269 = OpAccessChain %82 %245 
                                                      OpStore %269 %105 
                                Private f32* %270 = OpAccessChain %82 %125 
                                                      OpStore %270 %105 
                                                      OpBranch %159 
                                             %159 = OpLabel 
                                       f32_4 %272 = OpLoad %82 
                              Uniform f32_4* %273 = OpAccessChain %34 %139 
                                       f32_4 %274 = OpLoad %273 
                                         f32 %275 = OpDot %272 %274 
                                Private f32* %276 = OpAccessChain %271 %73 
                                                      OpStore %276 %275 
                                Private f32* %277 = OpAccessChain %271 %73 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpExtInst %1 43 %278 %107 %105 
                                Private f32* %280 = OpAccessChain %271 %73 
                                                      OpStore %280 %279 
                                       f32_4 %282 = OpLoad %9 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                              Uniform f32_4* %285 = OpAccessChain %34 %284 
                                       f32_4 %286 = OpLoad %285 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpFMul %283 %287 
                                                      OpStore %281 %288 
                                       f32_3 %289 = OpLoad %271 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 0 0 
                                       f32_3 %291 = OpLoad %281 
                                       f32_3 %292 = OpFMul %290 %291 
                                                      OpStore %271 %292 
                                       f32_4 %293 = OpLoad %9 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                                       f32_3 %296 = OpLoad %295 
                                       f32_3 %297 = OpFMul %294 %296 
                                       f32_3 %298 = OpLoad %271 
                                       f32_3 %299 = OpFAdd %297 %298 
                                                      OpStore %271 %299 
                                Private f32* %302 = OpAccessChain %9 %125 
                                         f32 %303 = OpLoad %302 
                                 Output f32* %305 = OpAccessChain %301 %125 
                                                      OpStore %305 %303 
                                       f32_4 %306 = OpLoad %27 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                         f32 %308 = OpLoad %99 
                                       f32_3 %309 = OpCompositeConstruct %308 %308 %308 
                                       f32_3 %310 = OpFMul %307 %309 
                                       f32_3 %311 = OpLoad %271 
                                       f32_3 %312 = OpFAdd %310 %311 
                                                      OpStore %271 %312 
                                Private f32* %314 = OpAccessChain %271 %160 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %271 %245 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %315 %317 
                                                      OpStore %313 %318 
                                        bool %321 = OpLoad %313 
                                                      OpSelectionMerge %323 None 
                                                      OpBranchConditional %321 %322 %324 
                                             %322 = OpLabel 
                                                      OpStore %320 %105 
                                                      OpBranch %323 
                                             %324 = OpLabel 
                                                      OpStore %320 %107 
                                                      OpBranch %323 
                                             %323 = OpLabel 
                                         f32 %325 = OpLoad %320 
                                                      OpStore %319 %325 
                                       f32_3 %326 = OpLoad %271 
                                       f32_2 %327 = OpVectorShuffle %326 %326 2 1 
                                       f32_2 %328 = OpFNegate %327 
                                       f32_3 %329 = OpLoad %271 
                                       f32_2 %330 = OpVectorShuffle %329 %329 1 2 
                                       f32_2 %331 = OpFAdd %328 %330 
                                       f32_3 %332 = OpLoad %23 
                                       f32_3 %333 = OpVectorShuffle %332 %331 3 4 2 
                                                      OpStore %23 %333 
                                Private f32* %336 = OpAccessChain %335 %73 
                                                      OpStore %336 %105 
                                Private f32* %338 = OpAccessChain %335 %160 
                                                      OpStore %338 %337 
                                         f32 %339 = OpLoad %319 
                                       f32_2 %340 = OpCompositeConstruct %339 %339 
                                       f32_3 %341 = OpLoad %23 
                                       f32_2 %342 = OpVectorShuffle %341 %341 0 1 
                                       f32_2 %343 = OpFMul %340 %342 
                                       f32_3 %344 = OpLoad %271 
                                       f32_2 %345 = OpVectorShuffle %344 %344 2 1 
                                       f32_2 %346 = OpFAdd %343 %345 
                                       f32_4 %347 = OpLoad %230 
                                       f32_4 %348 = OpVectorShuffle %347 %346 4 5 2 3 
                                                      OpStore %230 %348 
                                         f32 %349 = OpLoad %319 
                                       f32_2 %350 = OpCompositeConstruct %349 %349 
                                       f32_2 %351 = OpLoad %335 
                                       f32_2 %352 = OpFMul %350 %351 
                                       f32_2 %355 = OpFAdd %352 %354 
                                       f32_4 %356 = OpLoad %230 
                                       f32_4 %357 = OpVectorShuffle %356 %355 0 1 4 5 
                                                      OpStore %230 %357 
                                Private f32* %358 = OpAccessChain %271 %73 
                                         f32 %359 = OpLoad %358 
                                Private f32* %360 = OpAccessChain %230 %73 
                                         f32 %361 = OpLoad %360 
                                        bool %362 = OpFOrdGreaterThanEqual %359 %361 
                                                      OpStore %313 %362 
                                        bool %364 = OpLoad %313 
                                                      OpSelectionMerge %366 None 
                                                      OpBranchConditional %364 %365 %367 
                                             %365 = OpLabel 
                                                      OpStore %363 %105 
                                                      OpBranch %366 
                                             %367 = OpLabel 
                                                      OpStore %363 %107 
                                                      OpBranch %366 
                                             %366 = OpLabel 
                                         f32 %368 = OpLoad %363 
                                                      OpStore %319 %368 
                                       f32_4 %369 = OpLoad %230 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 3 
                                       f32_3 %371 = OpFNegate %370 
                                       f32_4 %372 = OpLoad %27 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %27 %373 
                                Private f32* %374 = OpAccessChain %271 %73 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpFNegate %375 
                                Private f32* %377 = OpAccessChain %27 %125 
                                                      OpStore %377 %376 
                                Private f32* %378 = OpAccessChain %27 %73 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %271 %73 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFAdd %379 %381 
                                Private f32* %383 = OpAccessChain %164 %73 
                                                      OpStore %383 %382 
                                       f32_4 %384 = OpLoad %27 
                                       f32_3 %385 = OpVectorShuffle %384 %384 1 2 3 
                                       f32_4 %386 = OpLoad %230 
                                       f32_3 %387 = OpVectorShuffle %386 %386 1 2 0 
                                       f32_3 %388 = OpFAdd %385 %387 
                                       f32_4 %389 = OpLoad %164 
                                       f32_4 %390 = OpVectorShuffle %389 %388 0 4 5 6 
                                                      OpStore %164 %390 
                                         f32 %391 = OpLoad %319 
                                       f32_3 %392 = OpCompositeConstruct %391 %391 %391 
                                       f32_4 %393 = OpLoad %164 
                                       f32_3 %394 = OpVectorShuffle %393 %393 0 1 2 
                                       f32_3 %395 = OpFMul %392 %394 
                                       f32_4 %396 = OpLoad %230 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 3 
                                       f32_3 %398 = OpFAdd %395 %397 
                                       f32_4 %399 = OpLoad %27 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %27 %400 
                                         f32 %401 = OpLoad %319 
                                Private f32* %402 = OpAccessChain %164 %125 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %401 %403 
                                Private f32* %405 = OpAccessChain %271 %73 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFAdd %404 %406 
                                                      OpStore %319 %407 
                                Private f32* %408 = OpAccessChain %27 %160 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpLoad %319 
                                         f32 %411 = OpExtInst %1 37 %409 %410 
                                                      OpStore %99 %411 
                                         f32 %412 = OpLoad %99 
                                         f32 %413 = OpFNegate %412 
                                Private f32* %414 = OpAccessChain %27 %73 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpFAdd %413 %415 
                                                      OpStore %99 %416 
                                Private f32* %417 = OpAccessChain %27 %160 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpFNegate %418 
                                         f32 %420 = OpLoad %319 
                                         f32 %421 = OpFAdd %419 %420 
                                                      OpStore %319 %421 
                                         f32 %423 = OpLoad %99 
                                         f32 %425 = OpFMul %423 %424 
                                         f32 %427 = OpFAdd %425 %426 
                                                      OpStore %422 %427 
                                         f32 %428 = OpLoad %319 
                                         f32 %429 = OpLoad %422 
                                         f32 %430 = OpFDiv %428 %429 
                                                      OpStore %319 %430 
                                         f32 %431 = OpLoad %319 
                                Private f32* %432 = OpAccessChain %27 %245 
                                         f32 %433 = OpLoad %432 
                                         f32 %434 = OpFAdd %431 %433 
                                                      OpStore %319 %434 
                                Private f32* %435 = OpAccessChain %27 %73 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpFAdd %436 %426 
                                                      OpStore %422 %437 
                                         f32 %438 = OpLoad %99 
                                         f32 %439 = OpLoad %422 
                                         f32 %440 = OpFDiv %438 %439 
                                                      OpStore %422 %440 
                                Private f32* %442 = OpAccessChain %9 %160 
                                         f32 %443 = OpLoad %442 
                                Private f32* %444 = OpAccessChain %9 %245 
                                         f32 %445 = OpLoad %444 
                                        bool %446 = OpFOrdGreaterThanEqual %443 %445 
                                                      OpStore %441 %446 
                                        bool %448 = OpLoad %441 
                                                      OpSelectionMerge %450 None 
                                                      OpBranchConditional %448 %449 %451 
                                             %449 = OpLabel 
                                                      OpStore %447 %105 
                                                      OpBranch %450 
                                             %451 = OpLabel 
                                                      OpStore %447 %107 
                                                      OpBranch %450 
                                             %450 = OpLabel 
                                         f32 %452 = OpLoad %447 
                                Private f32* %453 = OpAccessChain %335 %73 
                                                      OpStore %453 %452 
                                Private f32* %455 = OpAccessChain %9 %245 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpFNegate %456 
                                Private f32* %458 = OpAccessChain %9 %160 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFAdd %457 %459 
                                                      OpStore %454 %460 
                                Private f32* %462 = OpAccessChain %335 %73 
                                         f32 %463 = OpLoad %462 
                                         f32 %464 = OpLoad %454 
                                         f32 %465 = OpFMul %463 %464 
                                Private f32* %466 = OpAccessChain %9 %245 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFAdd %465 %467 
                                Private f32* %469 = OpAccessChain %461 %73 
                                                      OpStore %469 %468 
                                Private f32* %471 = OpAccessChain %9 %73 
                                         f32 %472 = OpLoad %471 
                                Private f32* %473 = OpAccessChain %461 %73 
                                         f32 %474 = OpLoad %473 
                                        bool %475 = OpFOrdGreaterThanEqual %472 %474 
                                                      OpStore %470 %475 
                                        bool %478 = OpLoad %470 
                                                      OpSelectionMerge %480 None 
                                                      OpBranchConditional %478 %479 %481 
                                             %479 = OpLabel 
                                                      OpStore %477 %105 
                                                      OpBranch %480 
                                             %481 = OpLabel 
                                                      OpStore %477 %107 
                                                      OpBranch %480 
                                             %480 = OpLabel 
                                         f32 %482 = OpLoad %477 
                                                      OpStore %476 %482 
                                Private f32* %484 = OpAccessChain %461 %73 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFNegate %485 
                                Private f32* %487 = OpAccessChain %9 %73 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpFAdd %486 %488 
                                Private f32* %490 = OpAccessChain %483 %73 
                                                      OpStore %490 %489 
                                         f32 %491 = OpLoad %476 
                                Private f32* %492 = OpAccessChain %483 %73 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFMul %491 %493 
                                Private f32* %495 = OpAccessChain %461 %73 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpFAdd %494 %496 
                                Private f32* %498 = OpAccessChain %483 %73 
                                                      OpStore %498 %497 
                                Private f32* %499 = OpAccessChain %483 %73 
                                         f32 %500 = OpLoad %499 
                                Uniform f32* %502 = OpAccessChain %34 %501 
                                         f32 %503 = OpLoad %502 
                                         f32 %504 = OpFMul %500 %503 
                                Private f32* %505 = OpAccessChain %461 %73 
                                                      OpStore %505 %504 
                                Private f32* %506 = OpAccessChain %461 %73 
                                         f32 %507 = OpLoad %506 
                                Private f32* %508 = OpAccessChain %27 %73 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpExtInst %1 40 %507 %509 
                                Private f32* %511 = OpAccessChain %461 %73 
                                                      OpStore %511 %510 
                                       f32_3 %512 = OpLoad %119 
                                         f32 %513 = OpDot %512 %88 
                                Private f32* %514 = OpAccessChain %271 %73 
                                                      OpStore %514 %513 
                                Private f32* %515 = OpAccessChain %271 %73 
                                         f32 %516 = OpLoad %515 
                                         f32 %518 = OpFMul %516 %517 
                                Private f32* %519 = OpAccessChain %483 %73 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFAdd %518 %520 
                                Private f32* %522 = OpAccessChain %483 %73 
                                                      OpStore %522 %521 
                                Private f32* %523 = OpAccessChain %483 %73 
                                         f32 %524 = OpLoad %523 
                                Uniform f32* %526 = OpAccessChain %34 %525 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpFMul %524 %527 
                                Private f32* %529 = OpAccessChain %483 %73 
                                                      OpStore %529 %528 
                                Private f32* %530 = OpAccessChain %483 %73 
                                         f32 %531 = OpLoad %530 
                                Private f32* %532 = OpAccessChain %461 %73 
                                         f32 %533 = OpLoad %532 
                                         f32 %534 = OpExtInst %1 37 %531 %533 
                                Private f32* %535 = OpAccessChain %483 %73 
                                                      OpStore %535 %534 
                                         f32 %536 = OpLoad %319 
                                       f32_3 %537 = OpCompositeConstruct %536 %536 %536 
                                       f32_3 %538 = OpExtInst %1 4 %537 
                                       f32_3 %541 = OpFAdd %538 %540 
                                                      OpStore %461 %541 
                                       f32_3 %542 = OpLoad %461 
                                       f32_3 %543 = OpExtInst %1 10 %542 
                                                      OpStore %461 %543 
                                       f32_3 %544 = OpLoad %461 
                                       f32_3 %546 = OpFMul %544 %545 
                                       f32_3 %549 = OpFAdd %546 %548 
                                                      OpStore %461 %549 
                                       f32_3 %550 = OpLoad %461 
                                       f32_3 %551 = OpExtInst %1 4 %550 
                                       f32_3 %553 = OpFAdd %551 %552 
                                                      OpStore %461 %553 
                                       f32_3 %554 = OpLoad %461 
                                       f32_3 %555 = OpCompositeConstruct %107 %107 %107 
                                       f32_3 %556 = OpCompositeConstruct %105 %105 %105 
                                       f32_3 %557 = OpExtInst %1 43 %554 %555 %556 
                                                      OpStore %461 %557 
                                       f32_3 %558 = OpLoad %461 
                                       f32_3 %559 = OpFAdd %558 %552 
                                                      OpStore %461 %559 
                                         f32 %560 = OpLoad %422 
                                       f32_3 %561 = OpCompositeConstruct %560 %560 %560 
                                       f32_3 %562 = OpLoad %461 
                                       f32_3 %563 = OpFMul %561 %562 
                                       f32_3 %565 = OpFAdd %563 %564 
                                                      OpStore %461 %565 
                                       f32_3 %566 = OpLoad %461 
                                       f32_3 %567 = OpLoad %483 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 0 0 
                                       f32_3 %569 = OpFMul %566 %568 
                                                      OpStore %483 %569 
                                       f32_3 %570 = OpLoad %483 
                                       f32_4 %571 = OpLoad %301 
                                       f32_4 %572 = OpVectorShuffle %571 %570 4 5 6 3 
                                                      OpStore %301 %572 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _EmissiveMap_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _EmissiveMap_ST.xy + _EmissiveMap_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat1);
    u_xlat2.y = dot(unity_SHAg, u_xlat1);
    u_xlat2.z = dot(unity_SHAb, u_xlat1);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _EmissiveGlowToggle;
uniform 	float _ValueMaximum;
uniform 	float _ValueMinimum;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _EmissiveMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat16_6;
float u_xlat7;
float u_xlat9;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat16_19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1.xyz = log2(u_xlat10_0.xyz);
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10_2 = texture(_EmissiveMap, vs_TEXCOORD0.zw);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xxx;
    u_xlat16_19 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlatb2 = _EmissiveGlowToggle>=0.100000001;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat16_19 = (-u_xlat16_19) + 0.100000024;
    u_xlat19 = u_xlat2.x * u_xlat16_19 + 1.0;
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat20 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb20 = u_xlat20<0.0;
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb20){
        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb20)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat20 = u_xlat3.y * 0.25 + 0.75;
        u_xlat9 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat20, u_xlat9);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat20 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat3.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat20) * u_xlat4.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.w = u_xlat10_0.w;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat1.xyw = u_xlat1.yzx * vec3(u_xlat19) + u_xlat3.yzx;
    u_xlatb18 = u_xlat1.x>=u_xlat1.y;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat1.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.xy + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat18) * u_xlat5 + u_xlat4;
    u_xlatb18 = u_xlat1.w>=u_xlat4.x;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat1.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat1.wyx;
    u_xlat4 = (-u_xlat1) + u_xlat4;
    u_xlat1 = vec4(u_xlat18) * u_xlat4 + u_xlat1;
    u_xlat18 = min(u_xlat1.y, u_xlat1.w);
    u_xlat18 = (-u_xlat18) + u_xlat1.x;
    u_xlat7 = (-u_xlat1.y) + u_xlat1.w;
    u_xlat19 = u_xlat18 * 6.0 + 1.00000001e-010;
    u_xlat7 = u_xlat7 / u_xlat19;
    u_xlat7 = u_xlat7 + u_xlat1.z;
    u_xlat13 = u_xlat1.x + 1.00000001e-010;
    u_xlat18 = u_xlat18 / u_xlat13;
    u_xlatb13 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat16_6 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat6.x = u_xlat13 * u_xlat16_6 + u_xlat10_0.z;
    u_xlatb12 = u_xlat10_0.x>=u_xlat6.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat6.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat12 * u_xlat0 + u_xlat6.x;
    u_xlat6.x = u_xlat0 * _ValueMinimum;
    u_xlat6.x = max(u_xlat6.x, u_xlat1.x);
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0 = u_xlat12 * 50.0 + u_xlat0;
    u_xlat0 = u_xlat0 * _ValueMaximum;
    u_xlat0 = min(u_xlat0, u_xlat6.x);
    u_xlat1.xyz = abs(vec3(u_xlat7)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat6.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat3.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 290
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %83 %93 %94 %109 %125 %164 %167 %170 %279 %282 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %81 0 BuiltIn 81 
                                                      OpMemberDecorate %81 1 BuiltIn 81 
                                                      OpMemberDecorate %81 2 BuiltIn 81 
                                                      OpDecorate %81 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %109 Location 109 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %167 Location 167 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %279 Location 279 
                                                      OpDecorate %282 Location 282 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %58 = OpVariable Private 
                                          i32 %61 = OpConstant 9 
                                          u32 %79 = OpConstant 1 
                                              %80 = OpTypeArray %6 %79 
                                              %81 = OpTypeStruct %7 %6 %80 
                                              %82 = OpTypePointer Output %81 
         Output struct {f32_4; f32; f32[1];}* %83 = OpVariable Output 
                                              %91 = OpTypePointer Output %7 
                                Output f32_4* %93 = OpVariable Output 
                                 Input f32_4* %94 = OpVariable Input 
                                              %95 = OpTypeVector %6 2 
                                          i32 %98 = OpConstant 10 
                                Input f32_4* %109 = OpVariable Input 
                                         i32 %112 = OpConstant 11 
                                             %123 = OpTypeVector %6 3 
                                             %124 = OpTypePointer Input %123 
                                Input f32_3* %125 = OpVariable Input 
                                         i32 %127 = OpConstant 8 
                                         u32 %132 = OpConstant 0 
                                             %133 = OpTypePointer Private %6 
                                         u32 %146 = OpConstant 2 
                                Private f32* %148 = OpVariable Private 
                                             %163 = OpTypePointer Output %123 
                               Output f32_3* %164 = OpVariable Output 
                               Output f32_3* %167 = OpVariable Output 
                               Output f32_4* %170 = OpVariable Output 
                                             %172 = OpTypePointer Private %123 
                              Private f32_3* %173 = OpVariable Private 
                              Private f32_4* %190 = OpVariable Private 
                              Private f32_3* %196 = OpVariable Private 
                                         i32 %202 = OpConstant 4 
                                         i32 %208 = OpConstant 5 
                                         i32 %214 = OpConstant 6 
                                         f32 %223 = OpConstant 3.674022E-40 
                                         u32 %224 = OpConstant 3 
                                         f32 %245 = OpConstant 3.674022E-40 
                                       f32_3 %246 = OpConstantComposite %245 %245 %245 
                                         f32 %254 = OpConstant 3.674022E-40 
                                       f32_3 %255 = OpConstantComposite %254 %254 %254 
                                         f32 %266 = OpConstant 3.674022E-40 
                                       f32_3 %267 = OpConstantComposite %266 %266 %266 
                                         f32 %269 = OpConstant 3.674022E-40 
                                       f32_3 %270 = OpConstantComposite %269 %269 %269 
                               Output f32_3* %279 = OpVariable Output 
                               Output f32_4* %282 = OpVariable Output 
                                       f32_4 %283 = OpConstantComposite %245 %245 %245 %245 
                                             %284 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %51 = OpAccessChain %21 %23 %47 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %11 
                                        f32_4 %54 = OpVectorShuffle %53 %53 3 3 3 3 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %9 %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %21 %61 %24 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %60 %63 
                                                      OpStore %58 %64 
                               Uniform f32_4* %65 = OpAccessChain %21 %61 %29 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %45 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %58 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %58 %71 
                               Uniform f32_4* %72 = OpAccessChain %21 %61 %37 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %45 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %58 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %58 %78 
                               Uniform f32_4* %84 = OpAccessChain %21 %61 %47 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpLoad %45 
                                        f32_4 %87 = OpVectorShuffle %86 %86 3 3 3 3 
                                        f32_4 %88 = OpFMul %85 %87 
                                        f32_4 %89 = OpLoad %58 
                                        f32_4 %90 = OpFAdd %88 %89 
                                Output f32_4* %92 = OpAccessChain %83 %29 
                                                      OpStore %92 %90 
                                        f32_4 %96 = OpLoad %94 
                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
                               Uniform f32_4* %99 = OpAccessChain %21 %98 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                       f32_2 %102 = OpFMul %97 %101 
                              Uniform f32_4* %103 = OpAccessChain %21 %98 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_2 %106 = OpFAdd %102 %105 
                                       f32_4 %107 = OpLoad %93 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 2 3 
                                                      OpStore %93 %108 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                              Uniform f32_4* %113 = OpAccessChain %21 %112 
                                       f32_4 %114 = OpLoad %113 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                                       f32_2 %116 = OpFMul %111 %115 
                              Uniform f32_4* %117 = OpAccessChain %21 %112 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 3 
                                       f32_2 %120 = OpFAdd %116 %119 
                                       f32_4 %121 = OpLoad %93 
                                       f32_4 %122 = OpVectorShuffle %121 %120 0 1 4 5 
                                                      OpStore %93 %122 
                                       f32_3 %126 = OpLoad %125 
                              Uniform f32_4* %128 = OpAccessChain %21 %127 %29 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %126 %130 
                                Private f32* %134 = OpAccessChain %45 %132 
                                                      OpStore %134 %131 
                                       f32_3 %135 = OpLoad %125 
                              Uniform f32_4* %136 = OpAccessChain %21 %127 %24 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %135 %138 
                                Private f32* %140 = OpAccessChain %45 %79 
                                                      OpStore %140 %139 
                                       f32_3 %141 = OpLoad %125 
                              Uniform f32_4* %142 = OpAccessChain %21 %127 %37 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                         f32 %145 = OpDot %141 %144 
                                Private f32* %147 = OpAccessChain %45 %146 
                                                      OpStore %147 %145 
                                       f32_4 %149 = OpLoad %45 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %45 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                         f32 %153 = OpDot %150 %152 
                                                      OpStore %148 %153 
                                         f32 %154 = OpLoad %148 
                                         f32 %155 = OpExtInst %1 32 %154 
                                                      OpStore %148 %155 
                                         f32 %156 = OpLoad %148 
                                       f32_3 %157 = OpCompositeConstruct %156 %156 %156 
                                       f32_4 %158 = OpLoad %45 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %45 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %45 %162 
                                       f32_4 %165 = OpLoad %45 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                                      OpStore %164 %166 
                                       f32_4 %168 = OpLoad %9 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                                      OpStore %167 %169 
                                       f32_4 %171 = OpLoad %9 
                                                      OpStore %170 %171 
                                Private f32* %174 = OpAccessChain %45 %79 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %45 %79 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpFMul %175 %177 
                                Private f32* %179 = OpAccessChain %173 %132 
                                                      OpStore %179 %178 
                                Private f32* %180 = OpAccessChain %45 %132 
                                         f32 %181 = OpLoad %180 
                                Private f32* %182 = OpAccessChain %45 %132 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFMul %181 %183 
                                Private f32* %185 = OpAccessChain %173 %132 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                         f32 %188 = OpFAdd %184 %187 
                                Private f32* %189 = OpAccessChain %173 %132 
                                                      OpStore %189 %188 
                                       f32_4 %191 = OpLoad %45 
                                       f32_4 %192 = OpVectorShuffle %191 %191 1 2 2 0 
                                       f32_4 %193 = OpLoad %45 
                                       f32_4 %194 = OpVectorShuffle %193 %193 0 1 2 2 
                                       f32_4 %195 = OpFMul %192 %194 
                                                      OpStore %190 %195 
                              Uniform f32_4* %197 = OpAccessChain %21 %47 
                                       f32_4 %198 = OpLoad %197 
                                       f32_4 %199 = OpLoad %190 
                                         f32 %200 = OpDot %198 %199 
                                Private f32* %201 = OpAccessChain %196 %132 
                                                      OpStore %201 %200 
                              Uniform f32_4* %203 = OpAccessChain %21 %202 
                                       f32_4 %204 = OpLoad %203 
                                       f32_4 %205 = OpLoad %190 
                                         f32 %206 = OpDot %204 %205 
                                Private f32* %207 = OpAccessChain %196 %79 
                                                      OpStore %207 %206 
                              Uniform f32_4* %209 = OpAccessChain %21 %208 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %190 
                                         f32 %212 = OpDot %210 %211 
                                Private f32* %213 = OpAccessChain %196 %146 
                                                      OpStore %213 %212 
                              Uniform f32_4* %215 = OpAccessChain %21 %214 
                                       f32_4 %216 = OpLoad %215 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpLoad %173 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 0 0 
                                       f32_3 %220 = OpFMul %217 %219 
                                       f32_3 %221 = OpLoad %196 
                                       f32_3 %222 = OpFAdd %220 %221 
                                                      OpStore %173 %222 
                                Private f32* %225 = OpAccessChain %45 %224 
                                                      OpStore %225 %223 
                              Uniform f32_4* %226 = OpAccessChain %21 %29 
                                       f32_4 %227 = OpLoad %226 
                                       f32_4 %228 = OpLoad %45 
                                         f32 %229 = OpDot %227 %228 
                                Private f32* %230 = OpAccessChain %196 %132 
                                                      OpStore %230 %229 
                              Uniform f32_4* %231 = OpAccessChain %21 %24 
                                       f32_4 %232 = OpLoad %231 
                                       f32_4 %233 = OpLoad %45 
                                         f32 %234 = OpDot %232 %233 
                                Private f32* %235 = OpAccessChain %196 %79 
                                                      OpStore %235 %234 
                              Uniform f32_4* %236 = OpAccessChain %21 %37 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %45 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %196 %146 
                                                      OpStore %240 %239 
                                       f32_3 %241 = OpLoad %173 
                                       f32_3 %242 = OpLoad %196 
                                       f32_3 %243 = OpFAdd %241 %242 
                                                      OpStore %173 %243 
                                       f32_3 %244 = OpLoad %173 
                                       f32_3 %247 = OpExtInst %1 40 %244 %246 
                                                      OpStore %173 %247 
                                       f32_3 %248 = OpLoad %173 
                                       f32_3 %249 = OpExtInst %1 30 %248 
                                       f32_4 %250 = OpLoad %45 
                                       f32_4 %251 = OpVectorShuffle %250 %249 4 5 6 3 
                                                      OpStore %45 %251 
                                       f32_4 %252 = OpLoad %45 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_4 %257 = OpLoad %45 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %45 %258 
                                       f32_4 %259 = OpLoad %45 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpExtInst %1 29 %260 
                                       f32_4 %262 = OpLoad %45 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %45 %263 
                                       f32_4 %264 = OpLoad %45 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %45 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %45 %273 
                                       f32_4 %274 = OpLoad %45 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_3 %276 = OpExtInst %1 40 %275 %246 
                                       f32_4 %277 = OpLoad %45 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 6 3 
                                                      OpStore %45 %278 
                                       f32_4 %280 = OpLoad %45 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                                      OpStore %279 %281 
                                                      OpStore %282 %283 
                                 Output f32* %285 = OpAccessChain %83 %29 %79 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFNegate %286 
                                 Output f32* %288 = OpAccessChain %83 %29 %79 
                                                      OpStore %288 %287 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 574
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %166 %295 %301 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %31 ArrayStride 31 
                                                      OpMemberDecorate %32 0 RelaxedPrecision 
                                                      OpMemberDecorate %32 0 Offset 32 
                                                      OpMemberDecorate %32 1 Offset 32 
                                                      OpMemberDecorate %32 2 Offset 32 
                                                      OpMemberDecorate %32 3 Offset 32 
                                                      OpMemberDecorate %32 4 Offset 32 
                                                      OpMemberDecorate %32 5 RelaxedPrecision 
                                                      OpMemberDecorate %32 5 Offset 32 
                                                      OpMemberDecorate %32 6 Offset 32 
                                                      OpMemberDecorate %32 7 Offset 32 
                                                      OpMemberDecorate %32 8 Offset 32 
                                                      OpMemberDecorate %32 9 Offset 32 
                                                      OpMemberDecorate %32 10 Offset 32 
                                                      OpMemberDecorate %32 11 RelaxedPrecision 
                                                      OpMemberDecorate %32 11 Offset 32 
                                                      OpDecorate %32 Block 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %68 DescriptorSet 68 
                                                      OpDecorate %68 Binding 68 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %157 SpecId 157 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %260 DescriptorSet 260 
                                                      OpDecorate %260 Binding 260 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %295 Location 295 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %301 Location 301 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
                               Private f32_4* %27 = OpVariable Private 
                                              %29 = OpTypeInt 32 0 
                                          u32 %30 = OpConstant 4 
                                              %31 = OpTypeArray %7 %30 
                                              %32 = OpTypeStruct %7 %7 %31 %21 %21 %7 %6 %6 %6 %6 %6 %6 
                                              %33 = OpTypePointer Uniform %32 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32;}* %34 = OpVariable Uniform 
                                              %35 = OpTypeInt 32 1 
                                          i32 %36 = OpConstant 7 
                                              %37 = OpTypePointer Uniform %6 
                                          i32 %59 = OpConstant 6 
                                              %66 = OpTypePointer Private %6 
                                 Private f32* %67 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %68 = OpVariable UniformConstant 
                                          u32 %73 = OpConstant 0 
                               Private f32_4* %82 = OpVariable Private 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %87 = OpConstant 3.674022E-40 
                                        f32_3 %88 = OpConstantComposite %85 %86 %87 
                                              %91 = OpTypeBool 
                                              %92 = OpTypePointer Private %91 
                                Private bool* %93 = OpVariable Private 
                                          i32 %94 = OpConstant 8 
                                          f32 %97 = OpConstant 3.674022E-40 
                                 Private f32* %99 = OpVariable Private 
                                             %100 = OpTypePointer Function %6 
                                         f32 %105 = OpConstant 3.674022E-40 
                                         f32 %107 = OpConstant 3.674022E-40 
                                Private f32* %109 = OpVariable Private 
                                         f32 %113 = OpConstant 3.674022E-40 
                              Private f32_3* %119 = OpVariable Private 
                                         u32 %125 = OpConstant 3 
                                         i32 %128 = OpConstant 11 
                               Private bool* %134 = OpVariable Private 
                                         i32 %139 = OpConstant 0 
                                         i32 %140 = OpConstant 1 
                                         i32 %142 = OpConstant -1 
                                        bool %151 = OpConstantFalse 
                                        bool %157 = OpSpecConstantFalse 
                                         u32 %160 = OpConstant 1 
                              Private f32_4* %164 = OpVariable Private 
                                             %165 = OpTypePointer Input %21 
                                Input f32_3* %166 = OpVariable Input 
                                         i32 %169 = OpConstant 2 
                                             %170 = OpTypePointer Uniform %7 
                                         i32 %201 = OpConstant 3 
                                             %208 = OpTypePointer Function %21 
                                         i32 %222 = OpConstant 4 
                                             %223 = OpTypePointer Uniform %21 
                              Private f32_4* %230 = OpVariable Private 
                                Private f32* %238 = OpVariable Private 
                                         f32 %241 = OpConstant 3.674022E-40 
                                         f32 %243 = OpConstant 3.674022E-40 
                                         u32 %245 = OpConstant 2 
                                         f32 %248 = OpConstant 3.674022E-40 
                                             %257 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %258 = OpTypeSampledImage %257 
                                             %259 = OpTypePointer UniformConstant %258 
 UniformConstant read_only Texture3DSampled* %260 = OpVariable UniformConstant 
                              Private f32_3* %271 = OpVariable Private 
                              Private f32_3* %281 = OpVariable Private 
                                         i32 %284 = OpConstant 5 
                                Input f32_3* %295 = OpVariable Input 
                                             %300 = OpTypePointer Output %7 
                               Output f32_4* %301 = OpVariable Output 
                                             %304 = OpTypePointer Output %6 
                               Private bool* %313 = OpVariable Private 
                                Private f32* %319 = OpVariable Private 
                                             %334 = OpTypePointer Private %17 
                              Private f32_2* %335 = OpVariable Private 
                                         f32 %337 = OpConstant 3.674022E-40 
                                         f32 %353 = OpConstant 3.674022E-40 
                                       f32_2 %354 = OpConstantComposite %337 %353 
                                Private f32* %422 = OpVariable Private 
                                         f32 %424 = OpConstant 3.674022E-40 
                                         f32 %426 = OpConstant 3.674022E-40 
                               Private bool* %441 = OpVariable Private 
                                Private f32* %454 = OpVariable Private 
                              Private f32_3* %461 = OpVariable Private 
                               Private bool* %470 = OpVariable Private 
                                Private f32* %476 = OpVariable Private 
                              Private f32_3* %483 = OpVariable Private 
                                         i32 %501 = OpConstant 10 
                                         f32 %517 = OpConstant 3.674022E-40 
                                         i32 %525 = OpConstant 9 
                                         f32 %539 = OpConstant 3.674022E-40 
                                       f32_3 %540 = OpConstantComposite %105 %353 %539 
                                       f32_3 %545 = OpConstantComposite %424 %424 %424 
                                         f32 %547 = OpConstant 3.674022E-40 
                                       f32_3 %548 = OpConstantComposite %547 %547 %547 
                                       f32_3 %552 = OpConstantComposite %337 %337 %337 
                                       f32_3 %564 = OpConstantComposite %105 %105 %105 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %101 = OpVariable Function 
                             Function f32_3* %209 = OpVariable Function 
                               Function f32* %320 = OpVariable Function 
                               Function f32* %363 = OpVariable Function 
                               Function f32* %447 = OpVariable Function 
                               Function f32* %477 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                                        f32_4 %24 = OpLoad %9 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpExtInst %1 30 %25 
                                                      OpStore %23 %26 
                                        f32_3 %28 = OpLoad %23 
                                 Uniform f32* %38 = OpAccessChain %34 %36 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %34 %36 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %34 %36 
                                          f32 %43 = OpLoad %42 
                                        f32_3 %44 = OpCompositeConstruct %39 %41 %43 
                                          f32 %45 = OpCompositeExtract %44 0 
                                          f32 %46 = OpCompositeExtract %44 1 
                                          f32 %47 = OpCompositeExtract %44 2 
                                        f32_3 %48 = OpCompositeConstruct %45 %46 %47 
                                        f32_3 %49 = OpFMul %28 %48 
                                        f32_4 %50 = OpLoad %27 
                                        f32_4 %51 = OpVectorShuffle %50 %49 4 5 6 3 
                                                      OpStore %27 %51 
                                        f32_4 %52 = OpLoad %27 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpExtInst %1 29 %53 
                                        f32_4 %55 = OpLoad %27 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %27 %56 
                                        f32_4 %57 = OpLoad %27 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                                 Uniform f32* %60 = OpAccessChain %34 %59 
                                          f32 %61 = OpLoad %60 
                                        f32_3 %62 = OpCompositeConstruct %61 %61 %61 
                                        f32_3 %63 = OpFMul %58 %62 
                                        f32_4 %64 = OpLoad %27 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %27 %65 
                   read_only Texture2DSampled %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %16 
                                        f32_2 %71 = OpVectorShuffle %70 %70 2 3 
                                        f32_4 %72 = OpImageSampleImplicitLod %69 %71 
                                          f32 %74 = OpCompositeExtract %72 0 
                                                      OpStore %67 %74 
                                          f32 %75 = OpLoad %67 
                                        f32_3 %76 = OpCompositeConstruct %75 %75 %75 
                                        f32_4 %77 = OpLoad %27 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %27 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %27 %81 
                                        f32_4 %83 = OpLoad %9 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                          f32 %89 = OpDot %84 %88 
                                 Private f32* %90 = OpAccessChain %82 %73 
                                                      OpStore %90 %89 
                                 Uniform f32* %95 = OpAccessChain %34 %94 
                                          f32 %96 = OpLoad %95 
                                         bool %98 = OpFOrdGreaterThanEqual %96 %97 
                                                      OpStore %93 %98 
                                        bool %102 = OpLoad %93 
                                                      OpSelectionMerge %104 None 
                                                      OpBranchConditional %102 %103 %106 
                                             %103 = OpLabel 
                                                      OpStore %101 %105 
                                                      OpBranch %104 
                                             %106 = OpLabel 
                                                      OpStore %101 %107 
                                                      OpBranch %104 
                                             %104 = OpLabel 
                                         f32 %108 = OpLoad %101 
                                                      OpStore %99 %108 
                                Private f32* %110 = OpAccessChain %82 %73 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpFNegate %111 
                                         f32 %114 = OpFAdd %112 %113 
                                                      OpStore %109 %114 
                                         f32 %115 = OpLoad %99 
                                         f32 %116 = OpLoad %109 
                                         f32 %117 = OpFMul %115 %116 
                                         f32 %118 = OpFAdd %117 %105 
                                                      OpStore %99 %118 
                                         f32 %120 = OpLoad %99 
                                       f32_3 %121 = OpCompositeConstruct %120 %120 %120 
                                       f32_4 %122 = OpLoad %27 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                                      OpStore %119 %124 
                                Private f32* %126 = OpAccessChain %9 %125 
                                         f32 %127 = OpLoad %126 
                                Uniform f32* %129 = OpAccessChain %34 %128 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFNegate %130 
                                         f32 %132 = OpFAdd %127 %131 
                                Private f32* %133 = OpAccessChain %82 %73 
                                                      OpStore %133 %132 
                                Private f32* %135 = OpAccessChain %82 %73 
                                         f32 %136 = OpLoad %135 
                                        bool %137 = OpFOrdLessThan %136 %107 
                                                      OpStore %134 %137 
                                        bool %138 = OpLoad %134 
                                         i32 %141 = OpSelect %138 %140 %139 
                                         i32 %143 = OpIMul %141 %142 
                                        bool %144 = OpINotEqual %143 %139 
                                                      OpSelectionMerge %146 None 
                                                      OpBranchConditional %144 %145 %146 
                                             %145 = OpLabel 
                                                      OpKill
                                             %146 = OpLabel 
                                Uniform f32* %148 = OpAccessChain %34 %140 %73 
                                         f32 %149 = OpLoad %148 
                                        bool %150 = OpFOrdEqual %149 %105 
                                                      OpStore %134 %150 
                                                      OpSelectionMerge %153 None 
                                                      OpBranchConditional %151 %152 %153 
                                             %152 = OpLabel 
                                        bool %154 = OpLoad %134 
                                                      OpSelectionMerge %156 None 
                                                      OpBranchConditional %154 %155 %156 
                                             %155 = OpLabel 
                                                      OpBranch %156 
                                             %156 = OpLabel 
                                                      OpBranch %153 
                                             %153 = OpLabel 
                                                      OpSelectionMerge %159 None 
                                                      OpBranchConditional %157 %158 %266 
                                             %158 = OpLabel 
                                Uniform f32* %161 = OpAccessChain %34 %140 %160 
                                         f32 %162 = OpLoad %161 
                                        bool %163 = OpFOrdEqual %162 %105 
                                                      OpStore %134 %163 
                                       f32_3 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 1 1 1 
                              Uniform f32_4* %171 = OpAccessChain %34 %169 %140 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFMul %168 %173 
                                       f32_4 %175 = OpLoad %164 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %164 %176 
                              Uniform f32_4* %177 = OpAccessChain %34 %169 %139 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpLoad %166 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 0 0 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %164 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %164 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %164 %187 
                              Uniform f32_4* %188 = OpAccessChain %34 %169 %169 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpLoad %166 
                                       f32_3 %192 = OpVectorShuffle %191 %191 2 2 2 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_4 %194 = OpLoad %164 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFAdd %193 %195 
                                       f32_4 %197 = OpLoad %164 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %164 %198 
                                       f32_4 %199 = OpLoad %164 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                              Uniform f32_4* %202 = OpAccessChain %34 %169 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFAdd %200 %204 
                                       f32_4 %206 = OpLoad %164 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %164 %207 
                                        bool %210 = OpLoad %134 
                                                      OpSelectionMerge %212 None 
                                                      OpBranchConditional %210 %211 %215 
                                             %211 = OpLabel 
                                       f32_4 %213 = OpLoad %164 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                                      OpStore %209 %214 
                                                      OpBranch %212 
                                             %215 = OpLabel 
                                       f32_3 %216 = OpLoad %166 
                                                      OpStore %209 %216 
                                                      OpBranch %212 
                                             %212 = OpLabel 
                                       f32_3 %217 = OpLoad %209 
                                       f32_4 %218 = OpLoad %164 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %164 %219 
                                       f32_4 %220 = OpLoad %164 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                              Uniform f32_3* %224 = OpAccessChain %34 %222 
                                       f32_3 %225 = OpLoad %224 
                                       f32_3 %226 = OpFNegate %225 
                                       f32_3 %227 = OpFAdd %221 %226 
                                       f32_4 %228 = OpLoad %164 
                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
                                                      OpStore %164 %229 
                                       f32_4 %231 = OpLoad %164 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                              Uniform f32_3* %233 = OpAccessChain %34 %201 
                                       f32_3 %234 = OpLoad %233 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_4 %236 = OpLoad %230 
                                       f32_4 %237 = OpVectorShuffle %236 %235 0 4 5 6 
                                                      OpStore %230 %237 
                                Private f32* %239 = OpAccessChain %230 %160 
                                         f32 %240 = OpLoad %239 
                                         f32 %242 = OpFMul %240 %241 
                                         f32 %244 = OpFAdd %242 %243 
                                                      OpStore %238 %244 
                                Uniform f32* %246 = OpAccessChain %34 %140 %245 
                                         f32 %247 = OpLoad %246 
                                         f32 %249 = OpFMul %247 %248 
                                         f32 %250 = OpFAdd %249 %243 
                                Private f32* %251 = OpAccessChain %164 %73 
                                                      OpStore %251 %250 
                                         f32 %252 = OpLoad %238 
                                Private f32* %253 = OpAccessChain %164 %73 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpExtInst %1 40 %252 %254 
                                Private f32* %256 = OpAccessChain %230 %73 
                                                      OpStore %256 %255 
                  read_only Texture3DSampled %261 = OpLoad %260 
                                       f32_4 %262 = OpLoad %230 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 2 3 
                                       f32_4 %264 = OpImageSampleImplicitLod %261 %263 
                                                      OpStore %230 %264 
                                       f32_4 %265 = OpLoad %230 
                                                      OpStore %82 %265 
                                                      OpBranch %159 
                                             %266 = OpLabel 
                                Private f32* %267 = OpAccessChain %82 %73 
                                                      OpStore %267 %105 
                                Private f32* %268 = OpAccessChain %82 %160 
                                                      OpStore %268 %105 
                                Private f32* %269 = OpAccessChain %82 %245 
                                                      OpStore %269 %105 
                                Private f32* %270 = OpAccessChain %82 %125 
                                                      OpStore %270 %105 
                                                      OpBranch %159 
                                             %159 = OpLabel 
                                       f32_4 %272 = OpLoad %82 
                              Uniform f32_4* %273 = OpAccessChain %34 %139 
                                       f32_4 %274 = OpLoad %273 
                                         f32 %275 = OpDot %272 %274 
                                Private f32* %276 = OpAccessChain %271 %73 
                                                      OpStore %276 %275 
                                Private f32* %277 = OpAccessChain %271 %73 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpExtInst %1 43 %278 %107 %105 
                                Private f32* %280 = OpAccessChain %271 %73 
                                                      OpStore %280 %279 
                                       f32_4 %282 = OpLoad %9 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                              Uniform f32_4* %285 = OpAccessChain %34 %284 
                                       f32_4 %286 = OpLoad %285 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpFMul %283 %287 
                                                      OpStore %281 %288 
                                       f32_3 %289 = OpLoad %271 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 0 0 
                                       f32_3 %291 = OpLoad %281 
                                       f32_3 %292 = OpFMul %290 %291 
                                                      OpStore %271 %292 
                                       f32_4 %293 = OpLoad %9 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                                       f32_3 %296 = OpLoad %295 
                                       f32_3 %297 = OpFMul %294 %296 
                                       f32_3 %298 = OpLoad %271 
                                       f32_3 %299 = OpFAdd %297 %298 
                                                      OpStore %271 %299 
                                Private f32* %302 = OpAccessChain %9 %125 
                                         f32 %303 = OpLoad %302 
                                 Output f32* %305 = OpAccessChain %301 %125 
                                                      OpStore %305 %303 
                                       f32_4 %306 = OpLoad %27 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                         f32 %308 = OpLoad %99 
                                       f32_3 %309 = OpCompositeConstruct %308 %308 %308 
                                       f32_3 %310 = OpFMul %307 %309 
                                       f32_3 %311 = OpLoad %271 
                                       f32_3 %312 = OpFAdd %310 %311 
                                                      OpStore %271 %312 
                                Private f32* %314 = OpAccessChain %271 %160 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %271 %245 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %315 %317 
                                                      OpStore %313 %318 
                                        bool %321 = OpLoad %313 
                                                      OpSelectionMerge %323 None 
                                                      OpBranchConditional %321 %322 %324 
                                             %322 = OpLabel 
                                                      OpStore %320 %105 
                                                      OpBranch %323 
                                             %324 = OpLabel 
                                                      OpStore %320 %107 
                                                      OpBranch %323 
                                             %323 = OpLabel 
                                         f32 %325 = OpLoad %320 
                                                      OpStore %319 %325 
                                       f32_3 %326 = OpLoad %271 
                                       f32_2 %327 = OpVectorShuffle %326 %326 2 1 
                                       f32_2 %328 = OpFNegate %327 
                                       f32_3 %329 = OpLoad %271 
                                       f32_2 %330 = OpVectorShuffle %329 %329 1 2 
                                       f32_2 %331 = OpFAdd %328 %330 
                                       f32_3 %332 = OpLoad %23 
                                       f32_3 %333 = OpVectorShuffle %332 %331 3 4 2 
                                                      OpStore %23 %333 
                                Private f32* %336 = OpAccessChain %335 %73 
                                                      OpStore %336 %105 
                                Private f32* %338 = OpAccessChain %335 %160 
                                                      OpStore %338 %337 
                                         f32 %339 = OpLoad %319 
                                       f32_2 %340 = OpCompositeConstruct %339 %339 
                                       f32_3 %341 = OpLoad %23 
                                       f32_2 %342 = OpVectorShuffle %341 %341 0 1 
                                       f32_2 %343 = OpFMul %340 %342 
                                       f32_3 %344 = OpLoad %271 
                                       f32_2 %345 = OpVectorShuffle %344 %344 2 1 
                                       f32_2 %346 = OpFAdd %343 %345 
                                       f32_4 %347 = OpLoad %230 
                                       f32_4 %348 = OpVectorShuffle %347 %346 4 5 2 3 
                                                      OpStore %230 %348 
                                         f32 %349 = OpLoad %319 
                                       f32_2 %350 = OpCompositeConstruct %349 %349 
                                       f32_2 %351 = OpLoad %335 
                                       f32_2 %352 = OpFMul %350 %351 
                                       f32_2 %355 = OpFAdd %352 %354 
                                       f32_4 %356 = OpLoad %230 
                                       f32_4 %357 = OpVectorShuffle %356 %355 0 1 4 5 
                                                      OpStore %230 %357 
                                Private f32* %358 = OpAccessChain %271 %73 
                                         f32 %359 = OpLoad %358 
                                Private f32* %360 = OpAccessChain %230 %73 
                                         f32 %361 = OpLoad %360 
                                        bool %362 = OpFOrdGreaterThanEqual %359 %361 
                                                      OpStore %313 %362 
                                        bool %364 = OpLoad %313 
                                                      OpSelectionMerge %366 None 
                                                      OpBranchConditional %364 %365 %367 
                                             %365 = OpLabel 
                                                      OpStore %363 %105 
                                                      OpBranch %366 
                                             %367 = OpLabel 
                                                      OpStore %363 %107 
                                                      OpBranch %366 
                                             %366 = OpLabel 
                                         f32 %368 = OpLoad %363 
                                                      OpStore %319 %368 
                                       f32_4 %369 = OpLoad %230 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 3 
                                       f32_3 %371 = OpFNegate %370 
                                       f32_4 %372 = OpLoad %27 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %27 %373 
                                Private f32* %374 = OpAccessChain %271 %73 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpFNegate %375 
                                Private f32* %377 = OpAccessChain %27 %125 
                                                      OpStore %377 %376 
                                Private f32* %378 = OpAccessChain %27 %73 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %271 %73 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFAdd %379 %381 
                                Private f32* %383 = OpAccessChain %164 %73 
                                                      OpStore %383 %382 
                                       f32_4 %384 = OpLoad %27 
                                       f32_3 %385 = OpVectorShuffle %384 %384 1 2 3 
                                       f32_4 %386 = OpLoad %230 
                                       f32_3 %387 = OpVectorShuffle %386 %386 1 2 0 
                                       f32_3 %388 = OpFAdd %385 %387 
                                       f32_4 %389 = OpLoad %164 
                                       f32_4 %390 = OpVectorShuffle %389 %388 0 4 5 6 
                                                      OpStore %164 %390 
                                         f32 %391 = OpLoad %319 
                                       f32_3 %392 = OpCompositeConstruct %391 %391 %391 
                                       f32_4 %393 = OpLoad %164 
                                       f32_3 %394 = OpVectorShuffle %393 %393 0 1 2 
                                       f32_3 %395 = OpFMul %392 %394 
                                       f32_4 %396 = OpLoad %230 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 3 
                                       f32_3 %398 = OpFAdd %395 %397 
                                       f32_4 %399 = OpLoad %27 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %27 %400 
                                         f32 %401 = OpLoad %319 
                                Private f32* %402 = OpAccessChain %164 %125 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %401 %403 
                                Private f32* %405 = OpAccessChain %271 %73 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFAdd %404 %406 
                                                      OpStore %319 %407 
                                Private f32* %408 = OpAccessChain %27 %160 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpLoad %319 
                                         f32 %411 = OpExtInst %1 37 %409 %410 
                                                      OpStore %99 %411 
                                         f32 %412 = OpLoad %99 
                                         f32 %413 = OpFNegate %412 
                                Private f32* %414 = OpAccessChain %27 %73 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpFAdd %413 %415 
                                                      OpStore %99 %416 
                                Private f32* %417 = OpAccessChain %27 %160 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpFNegate %418 
                                         f32 %420 = OpLoad %319 
                                         f32 %421 = OpFAdd %419 %420 
                                                      OpStore %319 %421 
                                         f32 %423 = OpLoad %99 
                                         f32 %425 = OpFMul %423 %424 
                                         f32 %427 = OpFAdd %425 %426 
                                                      OpStore %422 %427 
                                         f32 %428 = OpLoad %319 
                                         f32 %429 = OpLoad %422 
                                         f32 %430 = OpFDiv %428 %429 
                                                      OpStore %319 %430 
                                         f32 %431 = OpLoad %319 
                                Private f32* %432 = OpAccessChain %27 %245 
                                         f32 %433 = OpLoad %432 
                                         f32 %434 = OpFAdd %431 %433 
                                                      OpStore %319 %434 
                                Private f32* %435 = OpAccessChain %27 %73 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpFAdd %436 %426 
                                                      OpStore %422 %437 
                                         f32 %438 = OpLoad %99 
                                         f32 %439 = OpLoad %422 
                                         f32 %440 = OpFDiv %438 %439 
                                                      OpStore %422 %440 
                                Private f32* %442 = OpAccessChain %9 %160 
                                         f32 %443 = OpLoad %442 
                                Private f32* %444 = OpAccessChain %9 %245 
                                         f32 %445 = OpLoad %444 
                                        bool %446 = OpFOrdGreaterThanEqual %443 %445 
                                                      OpStore %441 %446 
                                        bool %448 = OpLoad %441 
                                                      OpSelectionMerge %450 None 
                                                      OpBranchConditional %448 %449 %451 
                                             %449 = OpLabel 
                                                      OpStore %447 %105 
                                                      OpBranch %450 
                                             %451 = OpLabel 
                                                      OpStore %447 %107 
                                                      OpBranch %450 
                                             %450 = OpLabel 
                                         f32 %452 = OpLoad %447 
                                Private f32* %453 = OpAccessChain %335 %73 
                                                      OpStore %453 %452 
                                Private f32* %455 = OpAccessChain %9 %245 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpFNegate %456 
                                Private f32* %458 = OpAccessChain %9 %160 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFAdd %457 %459 
                                                      OpStore %454 %460 
                                Private f32* %462 = OpAccessChain %335 %73 
                                         f32 %463 = OpLoad %462 
                                         f32 %464 = OpLoad %454 
                                         f32 %465 = OpFMul %463 %464 
                                Private f32* %466 = OpAccessChain %9 %245 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFAdd %465 %467 
                                Private f32* %469 = OpAccessChain %461 %73 
                                                      OpStore %469 %468 
                                Private f32* %471 = OpAccessChain %9 %73 
                                         f32 %472 = OpLoad %471 
                                Private f32* %473 = OpAccessChain %461 %73 
                                         f32 %474 = OpLoad %473 
                                        bool %475 = OpFOrdGreaterThanEqual %472 %474 
                                                      OpStore %470 %475 
                                        bool %478 = OpLoad %470 
                                                      OpSelectionMerge %480 None 
                                                      OpBranchConditional %478 %479 %481 
                                             %479 = OpLabel 
                                                      OpStore %477 %105 
                                                      OpBranch %480 
                                             %481 = OpLabel 
                                                      OpStore %477 %107 
                                                      OpBranch %480 
                                             %480 = OpLabel 
                                         f32 %482 = OpLoad %477 
                                                      OpStore %476 %482 
                                Private f32* %484 = OpAccessChain %461 %73 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFNegate %485 
                                Private f32* %487 = OpAccessChain %9 %73 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpFAdd %486 %488 
                                Private f32* %490 = OpAccessChain %483 %73 
                                                      OpStore %490 %489 
                                         f32 %491 = OpLoad %476 
                                Private f32* %492 = OpAccessChain %483 %73 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFMul %491 %493 
                                Private f32* %495 = OpAccessChain %461 %73 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpFAdd %494 %496 
                                Private f32* %498 = OpAccessChain %483 %73 
                                                      OpStore %498 %497 
                                Private f32* %499 = OpAccessChain %483 %73 
                                         f32 %500 = OpLoad %499 
                                Uniform f32* %502 = OpAccessChain %34 %501 
                                         f32 %503 = OpLoad %502 
                                         f32 %504 = OpFMul %500 %503 
                                Private f32* %505 = OpAccessChain %461 %73 
                                                      OpStore %505 %504 
                                Private f32* %506 = OpAccessChain %461 %73 
                                         f32 %507 = OpLoad %506 
                                Private f32* %508 = OpAccessChain %27 %73 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpExtInst %1 40 %507 %509 
                                Private f32* %511 = OpAccessChain %461 %73 
                                                      OpStore %511 %510 
                                       f32_3 %512 = OpLoad %119 
                                         f32 %513 = OpDot %512 %88 
                                Private f32* %514 = OpAccessChain %271 %73 
                                                      OpStore %514 %513 
                                Private f32* %515 = OpAccessChain %271 %73 
                                         f32 %516 = OpLoad %515 
                                         f32 %518 = OpFMul %516 %517 
                                Private f32* %519 = OpAccessChain %483 %73 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFAdd %518 %520 
                                Private f32* %522 = OpAccessChain %483 %73 
                                                      OpStore %522 %521 
                                Private f32* %523 = OpAccessChain %483 %73 
                                         f32 %524 = OpLoad %523 
                                Uniform f32* %526 = OpAccessChain %34 %525 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpFMul %524 %527 
                                Private f32* %529 = OpAccessChain %483 %73 
                                                      OpStore %529 %528 
                                Private f32* %530 = OpAccessChain %483 %73 
                                         f32 %531 = OpLoad %530 
                                Private f32* %532 = OpAccessChain %461 %73 
                                         f32 %533 = OpLoad %532 
                                         f32 %534 = OpExtInst %1 37 %531 %533 
                                Private f32* %535 = OpAccessChain %483 %73 
                                                      OpStore %535 %534 
                                         f32 %536 = OpLoad %319 
                                       f32_3 %537 = OpCompositeConstruct %536 %536 %536 
                                       f32_3 %538 = OpExtInst %1 4 %537 
                                       f32_3 %541 = OpFAdd %538 %540 
                                                      OpStore %461 %541 
                                       f32_3 %542 = OpLoad %461 
                                       f32_3 %543 = OpExtInst %1 10 %542 
                                                      OpStore %461 %543 
                                       f32_3 %544 = OpLoad %461 
                                       f32_3 %546 = OpFMul %544 %545 
                                       f32_3 %549 = OpFAdd %546 %548 
                                                      OpStore %461 %549 
                                       f32_3 %550 = OpLoad %461 
                                       f32_3 %551 = OpExtInst %1 4 %550 
                                       f32_3 %553 = OpFAdd %551 %552 
                                                      OpStore %461 %553 
                                       f32_3 %554 = OpLoad %461 
                                       f32_3 %555 = OpCompositeConstruct %107 %107 %107 
                                       f32_3 %556 = OpCompositeConstruct %105 %105 %105 
                                       f32_3 %557 = OpExtInst %1 43 %554 %555 %556 
                                                      OpStore %461 %557 
                                       f32_3 %558 = OpLoad %461 
                                       f32_3 %559 = OpFAdd %558 %552 
                                                      OpStore %461 %559 
                                         f32 %560 = OpLoad %422 
                                       f32_3 %561 = OpCompositeConstruct %560 %560 %560 
                                       f32_3 %562 = OpLoad %461 
                                       f32_3 %563 = OpFMul %561 %562 
                                       f32_3 %565 = OpFAdd %563 %564 
                                                      OpStore %461 %565 
                                       f32_3 %566 = OpLoad %461 
                                       f32_3 %567 = OpLoad %483 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 0 0 
                                       f32_3 %569 = OpFMul %566 %568 
                                                      OpStore %483 %569 
                                       f32_3 %570 = OpLoad %483 
                                       f32_4 %571 = OpLoad %301 
                                       f32_4 %572 = OpVectorShuffle %571 %570 4 5 6 3 
                                                      OpStore %301 %572 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _EmissiveMap_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat11;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _EmissiveMap_ST.xy + _EmissiveMap_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    vs_TEXCOORD1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _EmissiveGlowToggle;
uniform 	float _ValueMaximum;
uniform 	float _ValueMinimum;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _EmissiveMap;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat15;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat16_19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1.xyz = log2(u_xlat10_0.xyz);
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10_2 = texture(_EmissiveMap, vs_TEXCOORD0.zw);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xxx;
    u_xlat16_19 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlatb2 = _EmissiveGlowToggle>=0.100000001;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat16_19 = (-u_xlat16_19) + 0.100000024;
    u_xlat19 = u_xlat2.x * u_xlat16_19 + 1.0;
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat20 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb20 = u_xlat20<0.0;
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat20 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat20) + u_xlat3.x;
    u_xlat20 = unity_ShadowFadeCenterAndType.w * u_xlat3.x + u_xlat20;
    u_xlat20 = u_xlat20 * _LightShadowData.z + _LightShadowData.w;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlatb3 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat9.xyz = (bool(u_xlatb9)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat9.xyz = u_xlat9.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat9.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat9.x = u_xlat4.y * 0.25 + 0.75;
        u_xlat15.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat15.x, u_xlat9.x);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat9.x = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
    u_xlat15.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat15.xy);
    u_xlat20 = u_xlat20 + u_xlat10_4.x;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat9.x = min(u_xlat20, u_xlat9.x);
    u_xlat20 = (u_xlatb3) ? u_xlat9.x : u_xlat20;
    u_xlat3.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat20) * u_xlat4.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.w = u_xlat10_0.w;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat1.xyw = u_xlat1.yzx * vec3(u_xlat19) + u_xlat3.yzx;
    u_xlatb18 = u_xlat1.x>=u_xlat1.y;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat1.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.xy + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat18) * u_xlat5 + u_xlat4;
    u_xlatb18 = u_xlat1.w>=u_xlat4.x;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat1.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat1.wyx;
    u_xlat4 = (-u_xlat1) + u_xlat4;
    u_xlat1 = vec4(u_xlat18) * u_xlat4 + u_xlat1;
    u_xlat18 = min(u_xlat1.y, u_xlat1.w);
    u_xlat18 = (-u_xlat18) + u_xlat1.x;
    u_xlat7 = (-u_xlat1.y) + u_xlat1.w;
    u_xlat19 = u_xlat18 * 6.0 + 1.00000001e-010;
    u_xlat7 = u_xlat7 / u_xlat19;
    u_xlat7 = u_xlat7 + u_xlat1.z;
    u_xlat13 = u_xlat1.x + 1.00000001e-010;
    u_xlat18 = u_xlat18 / u_xlat13;
    u_xlatb13 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat16_6 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat6.x = u_xlat13 * u_xlat16_6 + u_xlat10_0.z;
    u_xlatb12 = u_xlat10_0.x>=u_xlat6.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat6.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat12 * u_xlat0 + u_xlat6.x;
    u_xlat6.x = u_xlat0 * _ValueMinimum;
    u_xlat6.x = max(u_xlat6.x, u_xlat1.x);
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0 = u_xlat12 * 50.0 + u_xlat0;
    u_xlat0 = u_xlat0 * _ValueMaximum;
    u_xlat0 = min(u_xlat0, u_xlat6.x);
    u_xlat1.xyz = abs(vec3(u_xlat7)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat6.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat3.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 208
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %88 %92 %93 %108 %124 %155 %161 %164 %166 %188 %200 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %86 0 BuiltIn 86 
                                                      OpMemberDecorate %86 1 BuiltIn 86 
                                                      OpMemberDecorate %86 2 BuiltIn 86 
                                                      OpDecorate %86 Block 
                                                      OpDecorate %92 Location 92 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %108 Location 108 
                                                      OpDecorate %124 Location 124 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %188 Location 188 
                                                      OpDecorate %200 Location 200 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %84 = OpConstant 1 
                                              %85 = OpTypeArray %6 %84 
                                              %86 = OpTypeStruct %7 %6 %85 
                                              %87 = OpTypePointer Output %86 
         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
                                              %90 = OpTypePointer Output %7 
                                Output f32_4* %92 = OpVariable Output 
                                 Input f32_4* %93 = OpVariable Input 
                                              %94 = OpTypeVector %6 2 
                                          i32 %97 = OpConstant 4 
                                Input f32_4* %108 = OpVariable Input 
                                         i32 %111 = OpConstant 5 
                                             %122 = OpTypeVector %6 3 
                                             %123 = OpTypePointer Input %122 
                                Input f32_3* %124 = OpVariable Input 
                                         u32 %130 = OpConstant 0 
                                             %131 = OpTypePointer Private %6 
                                         u32 %144 = OpConstant 2 
                                Private f32* %146 = OpVariable Private 
                                             %154 = OpTypePointer Output %122 
                               Output f32_3* %155 = OpVariable Output 
                               Output f32_3* %161 = OpVariable Output 
                               Output f32_4* %164 = OpVariable Output 
                               Output f32_3* %166 = OpVariable Output 
                                         f32 %167 = OpConstant 3.674022E-40 
                                       f32_3 %168 = OpConstantComposite %167 %167 %167 
                                             %171 = OpTypePointer Uniform %6 
                                         f32 %178 = OpConstant 3.674022E-40 
                                         u32 %180 = OpConstant 3 
                                       f32_2 %184 = OpConstantComposite %178 %178 
                               Output f32_4* %188 = OpVariable Output 
                               Output f32_4* %200 = OpVariable Output 
                                       f32_4 %201 = OpConstantComposite %167 %167 %167 %167 
                                             %202 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %46 %23 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %46 %28 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %46 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %77 = OpAccessChain %21 %46 %46 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %44 
                                        f32_4 %80 = OpVectorShuffle %79 %79 3 3 3 3 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %57 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %44 %83 
                                        f32_4 %89 = OpLoad %44 
                                Output f32_4* %91 = OpAccessChain %88 %28 
                                                      OpStore %91 %89 
                                        f32_4 %95 = OpLoad %93 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                               Uniform f32_4* %98 = OpAccessChain %21 %97 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %96 %100 
                              Uniform f32_4* %102 = OpAccessChain %21 %97 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 2 3 
                                       f32_2 %105 = OpFAdd %101 %104 
                                       f32_4 %106 = OpLoad %92 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 2 3 
                                                      OpStore %92 %107 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 0 1 
                              Uniform f32_4* %112 = OpAccessChain %21 %111 
                                       f32_4 %113 = OpLoad %112 
                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
                                       f32_2 %115 = OpFMul %110 %114 
                              Uniform f32_4* %116 = OpAccessChain %21 %111 
                                       f32_4 %117 = OpLoad %116 
                                       f32_2 %118 = OpVectorShuffle %117 %117 2 3 
                                       f32_2 %119 = OpFAdd %115 %118 
                                       f32_4 %120 = OpLoad %92 
                                       f32_4 %121 = OpVectorShuffle %120 %119 0 1 4 5 
                                                      OpStore %92 %121 
                                       f32_3 %125 = OpLoad %124 
                              Uniform f32_4* %126 = OpAccessChain %21 %36 %28 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %132 = OpAccessChain %57 %130 
                                                      OpStore %132 %129 
                                       f32_3 %133 = OpLoad %124 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %23 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                Private f32* %138 = OpAccessChain %57 %84 
                                                      OpStore %138 %137 
                                       f32_3 %139 = OpLoad %124 
                              Uniform f32_4* %140 = OpAccessChain %21 %36 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %139 %142 
                                Private f32* %145 = OpAccessChain %57 %144 
                                                      OpStore %145 %143 
                                       f32_4 %147 = OpLoad %57 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_4 %149 = OpLoad %57 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %148 %150 
                                                      OpStore %146 %151 
                                         f32 %152 = OpLoad %146 
                                         f32 %153 = OpExtInst %1 32 %152 
                                                      OpStore %146 %153 
                                         f32 %156 = OpLoad %146 
                                       f32_3 %157 = OpCompositeConstruct %156 %156 %156 
                                       f32_4 %158 = OpLoad %57 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFMul %157 %159 
                                                      OpStore %155 %160 
                                       f32_4 %162 = OpLoad %9 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                                      OpStore %161 %163 
                                       f32_4 %165 = OpLoad %9 
                                                      OpStore %164 %165 
                                                      OpStore %166 %168 
                                Private f32* %169 = OpAccessChain %44 %84 
                                         f32 %170 = OpLoad %169 
                                Uniform f32* %172 = OpAccessChain %21 %28 %130 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFMul %170 %173 
                                Private f32* %175 = OpAccessChain %9 %130 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %9 %130 
                                         f32 %177 = OpLoad %176 
                                         f32 %179 = OpFMul %177 %178 
                                Private f32* %181 = OpAccessChain %9 %180 
                                                      OpStore %181 %179 
                                       f32_4 %182 = OpLoad %44 
                                       f32_2 %183 = OpVectorShuffle %182 %182 0 3 
                                       f32_2 %185 = OpFMul %183 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 1 5 3 
                                                      OpStore %9 %187 
                                       f32_4 %189 = OpLoad %44 
                                       f32_2 %190 = OpVectorShuffle %189 %189 2 3 
                                       f32_4 %191 = OpLoad %188 
                                       f32_4 %192 = OpVectorShuffle %191 %190 0 1 4 5 
                                                      OpStore %188 %192 
                                       f32_4 %193 = OpLoad %9 
                                       f32_2 %194 = OpVectorShuffle %193 %193 2 2 
                                       f32_4 %195 = OpLoad %9 
                                       f32_2 %196 = OpVectorShuffle %195 %195 0 3 
                                       f32_2 %197 = OpFAdd %194 %196 
                                       f32_4 %198 = OpLoad %188 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 3 
                                                      OpStore %188 %199 
                                                      OpStore %200 %201 
                                 Output f32* %203 = OpAccessChain %88 %28 %84 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFNegate %204 
                                 Output f32* %206 = OpAccessChain %88 %28 %84 
                                                      OpStore %206 %205 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 666
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %151 %333 %387 %393 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %31 ArrayStride 31 
                                                      OpDecorate %32 ArrayStride 32 
                                                      OpMemberDecorate %33 0 Offset 33 
                                                      OpMemberDecorate %33 1 RelaxedPrecision 
                                                      OpMemberDecorate %33 1 Offset 33 
                                                      OpMemberDecorate %33 2 RelaxedPrecision 
                                                      OpMemberDecorate %33 2 Offset 33 
                                                      OpMemberDecorate %33 3 Offset 33 
                                                      OpMemberDecorate %33 4 Offset 33 
                                                      OpMemberDecorate %33 5 Offset 33 
                                                      OpMemberDecorate %33 6 Offset 33 
                                                      OpMemberDecorate %33 7 Offset 33 
                                                      OpMemberDecorate %33 8 Offset 33 
                                                      OpMemberDecorate %33 9 RelaxedPrecision 
                                                      OpMemberDecorate %33 9 Offset 33 
                                                      OpMemberDecorate %33 10 Offset 33 
                                                      OpMemberDecorate %33 11 Offset 33 
                                                      OpMemberDecorate %33 12 Offset 33 
                                                      OpMemberDecorate %33 13 Offset 33 
                                                      OpMemberDecorate %33 14 Offset 33 
                                                      OpMemberDecorate %33 15 RelaxedPrecision 
                                                      OpMemberDecorate %33 15 Offset 33 
                                                      OpDecorate %33 Block 
                                                      OpDecorate %35 DescriptorSet 35 
                                                      OpDecorate %35 Binding 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %232 SpecId 232 
                                                      OpDecorate %312 DescriptorSet 312 
                                                      OpDecorate %312 Binding 312 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %342 DescriptorSet 342 
                                                      OpDecorate %342 Binding 342 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %387 Location 387 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %393 Location 393 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %559 RelaxedPrecision 
                                                      OpDecorate %564 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
                               Private f32_4* %27 = OpVariable Private 
                                              %29 = OpTypeInt 32 0 
                                          u32 %30 = OpConstant 4 
                                              %31 = OpTypeArray %7 %30 
                                              %32 = OpTypeArray %7 %30 
                                              %33 = OpTypeStruct %21 %7 %7 %7 %31 %7 %32 %21 %21 %7 %6 %6 %6 %6 %6 %6 
                                              %34 = OpTypePointer Uniform %33 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32;}* %35 = OpVariable Uniform 
                                              %36 = OpTypeInt 32 1 
                                          i32 %37 = OpConstant 11 
                                              %38 = OpTypePointer Uniform %6 
                                          i32 %60 = OpConstant 10 
                                              %67 = OpTypePointer Private %6 
                                 Private f32* %68 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %69 = OpVariable UniformConstant 
                                          u32 %74 = OpConstant 0 
                               Private f32_4* %83 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %88 = OpConstant 3.674022E-40 
                                        f32_3 %89 = OpConstantComposite %86 %87 %88 
                                              %92 = OpTypeBool 
                                              %93 = OpTypePointer Private %92 
                                Private bool* %94 = OpVariable Private 
                                          i32 %95 = OpConstant 12 
                                          f32 %98 = OpConstant 3.674022E-40 
                                Private f32* %100 = OpVariable Private 
                                             %101 = OpTypePointer Function %6 
                                         f32 %106 = OpConstant 3.674022E-40 
                                         f32 %108 = OpConstant 3.674022E-40 
                                Private f32* %110 = OpVariable Private 
                                         f32 %114 = OpConstant 3.674022E-40 
                              Private f32_3* %120 = OpVariable Private 
                                         u32 %126 = OpConstant 3 
                                         i32 %129 = OpConstant 15 
                               Private bool* %135 = OpVariable Private 
                                         i32 %140 = OpConstant 0 
                                         i32 %141 = OpConstant 1 
                                         i32 %143 = OpConstant -1 
                              Private f32_4* %149 = OpVariable Private 
                                             %150 = OpTypePointer Input %21 
                                Input f32_3* %151 = OpVariable Input 
                                             %154 = OpTypePointer Uniform %21 
                              Private f32_3* %160 = OpVariable Private 
                                         i32 %161 = OpConstant 4 
                                         u32 %162 = OpConstant 2 
                                         u32 %168 = OpConstant 1 
                                         i32 %170 = OpConstant 2 
                                Private f32* %174 = OpVariable Private 
                                         i32 %180 = OpConstant 3 
                                             %181 = OpTypePointer Uniform %7 
                               Private bool* %221 = OpVariable Private 
                                         i32 %222 = OpConstant 5 
                                        bool %226 = OpConstantFalse 
                                        bool %232 = OpSpecConstantFalse 
                               Private bool* %235 = OpVariable Private 
                                         i32 %241 = OpConstant 6 
                              Private f32_3* %267 = OpVariable Private 
                                             %268 = OpTypePointer Function %21 
                                         i32 %278 = OpConstant 8 
                              Private f32_4* %283 = OpVariable Private 
                                         i32 %285 = OpConstant 7 
                                         f32 %293 = OpConstant 3.674022E-40 
                                         f32 %295 = OpConstant 3.674022E-40 
                                Private f32* %298 = OpVariable Private 
                                         f32 %301 = OpConstant 3.674022E-40 
                                             %309 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %310 = OpTypeSampledImage %309 
                                             %311 = OpTypePointer UniformConstant %310 
 UniformConstant read_only Texture3DSampled* %312 = OpVariable UniformConstant 
                              Private f32_3* %323 = OpVariable Private 
                                Input f32_4* %333 = OpVariable Input 
                                Private f32* %341 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %342 = OpVariable UniformConstant 
                              Private f32_3* %348 = OpVariable Private 
                                         i32 %376 = OpConstant 9 
                                Input f32_3* %387 = OpVariable Input 
                                             %392 = OpTypePointer Output %7 
                               Output f32_4* %393 = OpVariable Output 
                                             %396 = OpTypePointer Output %6 
                               Private bool* %405 = OpVariable Private 
                                Private f32* %411 = OpVariable Private 
                                             %426 = OpTypePointer Private %17 
                              Private f32_2* %427 = OpVariable Private 
                                         f32 %429 = OpConstant 3.674022E-40 
                                         f32 %445 = OpConstant 3.674022E-40 
                                       f32_2 %446 = OpConstantComposite %429 %445 
                                Private f32* %514 = OpVariable Private 
                                         f32 %516 = OpConstant 3.674022E-40 
                                         f32 %518 = OpConstant 3.674022E-40 
                               Private bool* %533 = OpVariable Private 
                                Private f32* %546 = OpVariable Private 
                              Private f32_3* %553 = OpVariable Private 
                               Private bool* %562 = OpVariable Private 
                                Private f32* %568 = OpVariable Private 
                              Private f32_3* %575 = OpVariable Private 
                                         i32 %593 = OpConstant 14 
                                         f32 %609 = OpConstant 3.674022E-40 
                                         i32 %617 = OpConstant 13 
                                         f32 %631 = OpConstant 3.674022E-40 
                                       f32_3 %632 = OpConstantComposite %106 %445 %631 
                                       f32_3 %637 = OpConstantComposite %516 %516 %516 
                                         f32 %639 = OpConstant 3.674022E-40 
                                       f32_3 %640 = OpConstantComposite %639 %639 %639 
                                       f32_3 %644 = OpConstantComposite %429 %429 %429 
                                       f32_3 %656 = OpConstantComposite %106 %106 %106 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %102 = OpVariable Function 
                             Function f32_3* %269 = OpVariable Function 
                               Function f32* %363 = OpVariable Function 
                               Function f32* %412 = OpVariable Function 
                               Function f32* %455 = OpVariable Function 
                               Function f32* %539 = OpVariable Function 
                               Function f32* %569 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                                        f32_4 %24 = OpLoad %9 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpExtInst %1 30 %25 
                                                      OpStore %23 %26 
                                        f32_3 %28 = OpLoad %23 
                                 Uniform f32* %39 = OpAccessChain %35 %37 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %41 = OpAccessChain %35 %37 
                                          f32 %42 = OpLoad %41 
                                 Uniform f32* %43 = OpAccessChain %35 %37 
                                          f32 %44 = OpLoad %43 
                                        f32_3 %45 = OpCompositeConstruct %40 %42 %44 
                                          f32 %46 = OpCompositeExtract %45 0 
                                          f32 %47 = OpCompositeExtract %45 1 
                                          f32 %48 = OpCompositeExtract %45 2 
                                        f32_3 %49 = OpCompositeConstruct %46 %47 %48 
                                        f32_3 %50 = OpFMul %28 %49 
                                        f32_4 %51 = OpLoad %27 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %27 %52 
                                        f32_4 %53 = OpLoad %27 
                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                                        f32_3 %55 = OpExtInst %1 29 %54 
                                        f32_4 %56 = OpLoad %27 
                                        f32_4 %57 = OpVectorShuffle %56 %55 4 5 6 3 
                                                      OpStore %27 %57 
                                        f32_4 %58 = OpLoad %27 
                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                 Uniform f32* %61 = OpAccessChain %35 %60 
                                          f32 %62 = OpLoad %61 
                                        f32_3 %63 = OpCompositeConstruct %62 %62 %62 
                                        f32_3 %64 = OpFMul %59 %63 
                                        f32_4 %65 = OpLoad %27 
                                        f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                                      OpStore %27 %66 
                   read_only Texture2DSampled %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %16 
                                        f32_2 %72 = OpVectorShuffle %71 %71 2 3 
                                        f32_4 %73 = OpImageSampleImplicitLod %70 %72 
                                          f32 %75 = OpCompositeExtract %73 0 
                                                      OpStore %68 %75 
                                          f32 %76 = OpLoad %68 
                                        f32_3 %77 = OpCompositeConstruct %76 %76 %76 
                                        f32_4 %78 = OpLoad %27 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %27 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %27 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                          f32 %90 = OpDot %85 %89 
                                 Private f32* %91 = OpAccessChain %83 %74 
                                                      OpStore %91 %90 
                                 Uniform f32* %96 = OpAccessChain %35 %95 
                                          f32 %97 = OpLoad %96 
                                         bool %99 = OpFOrdGreaterThanEqual %97 %98 
                                                      OpStore %94 %99 
                                        bool %103 = OpLoad %94 
                                                      OpSelectionMerge %105 None 
                                                      OpBranchConditional %103 %104 %107 
                                             %104 = OpLabel 
                                                      OpStore %102 %106 
                                                      OpBranch %105 
                                             %107 = OpLabel 
                                                      OpStore %102 %108 
                                                      OpBranch %105 
                                             %105 = OpLabel 
                                         f32 %109 = OpLoad %102 
                                                      OpStore %100 %109 
                                Private f32* %111 = OpAccessChain %83 %74 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFNegate %112 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %110 %115 
                                         f32 %116 = OpLoad %100 
                                         f32 %117 = OpLoad %110 
                                         f32 %118 = OpFMul %116 %117 
                                         f32 %119 = OpFAdd %118 %106 
                                                      OpStore %100 %119 
                                         f32 %121 = OpLoad %100 
                                       f32_3 %122 = OpCompositeConstruct %121 %121 %121 
                                       f32_4 %123 = OpLoad %27 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_3 %125 = OpFMul %122 %124 
                                                      OpStore %120 %125 
                                Private f32* %127 = OpAccessChain %9 %126 
                                         f32 %128 = OpLoad %127 
                                Uniform f32* %130 = OpAccessChain %35 %129 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFNegate %131 
                                         f32 %133 = OpFAdd %128 %132 
                                Private f32* %134 = OpAccessChain %83 %74 
                                                      OpStore %134 %133 
                                Private f32* %136 = OpAccessChain %83 %74 
                                         f32 %137 = OpLoad %136 
                                        bool %138 = OpFOrdLessThan %137 %108 
                                                      OpStore %135 %138 
                                        bool %139 = OpLoad %135 
                                         i32 %142 = OpSelect %139 %141 %140 
                                         i32 %144 = OpIMul %142 %143 
                                        bool %145 = OpINotEqual %144 %140 
                                                      OpSelectionMerge %147 None 
                                                      OpBranchConditional %145 %146 %147 
                                             %146 = OpLabel 
                                                      OpKill
                                             %147 = OpLabel 
                                       f32_3 %152 = OpLoad %151 
                                       f32_3 %153 = OpFNegate %152 
                              Uniform f32_3* %155 = OpAccessChain %35 %140 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %149 
                                       f32_4 %159 = OpVectorShuffle %158 %157 4 5 6 3 
                                                      OpStore %149 %159 
                                Uniform f32* %163 = OpAccessChain %35 %161 %140 %162 
                                         f32 %164 = OpLoad %163 
                                Private f32* %165 = OpAccessChain %160 %74 
                                                      OpStore %165 %164 
                                Uniform f32* %166 = OpAccessChain %35 %161 %141 %162 
                                         f32 %167 = OpLoad %166 
                                Private f32* %169 = OpAccessChain %160 %168 
                                                      OpStore %169 %167 
                                Uniform f32* %171 = OpAccessChain %35 %161 %170 %162 
                                         f32 %172 = OpLoad %171 
                                Private f32* %173 = OpAccessChain %160 %162 
                                                      OpStore %173 %172 
                                       f32_4 %175 = OpLoad %149 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpLoad %160 
                                         f32 %178 = OpDot %176 %177 
                                                      OpStore %174 %178 
                                       f32_3 %179 = OpLoad %151 
                              Uniform f32_4* %182 = OpAccessChain %35 %180 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %179 %185 
                                       f32_4 %187 = OpLoad %149 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %149 %188 
                                       f32_4 %189 = OpLoad %149 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %149 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                Private f32* %194 = OpAccessChain %149 %74 
                                                      OpStore %194 %193 
                                Private f32* %195 = OpAccessChain %149 %74 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 31 %196 
                                Private f32* %198 = OpAccessChain %149 %74 
                                                      OpStore %198 %197 
                                         f32 %199 = OpLoad %174 
                                         f32 %200 = OpFNegate %199 
                                Private f32* %201 = OpAccessChain %149 %74 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFAdd %200 %202 
                                Private f32* %204 = OpAccessChain %149 %74 
                                                      OpStore %204 %203 
                                Uniform f32* %205 = OpAccessChain %35 %180 %126 
                                         f32 %206 = OpLoad %205 
                                Private f32* %207 = OpAccessChain %149 %74 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFMul %206 %208 
                                         f32 %210 = OpLoad %174 
                                         f32 %211 = OpFAdd %209 %210 
                                                      OpStore %174 %211 
                                         f32 %212 = OpLoad %174 
                                Uniform f32* %213 = OpAccessChain %35 %170 %162 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFMul %212 %214 
                                Uniform f32* %216 = OpAccessChain %35 %170 %126 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFAdd %215 %217 
                                                      OpStore %174 %218 
                                         f32 %219 = OpLoad %174 
                                         f32 %220 = OpExtInst %1 43 %219 %108 %106 
                                                      OpStore %174 %220 
                                Uniform f32* %223 = OpAccessChain %35 %222 %74 
                                         f32 %224 = OpLoad %223 
                                        bool %225 = OpFOrdEqual %224 %106 
                                                      OpStore %221 %225 
                                                      OpSelectionMerge %228 None 
                                                      OpBranchConditional %226 %227 %228 
                                             %227 = OpLabel 
                                        bool %229 = OpLoad %221 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %229 %230 %231 
                                             %230 = OpLabel 
                                                      OpBranch %231 
                                             %231 = OpLabel 
                                                      OpBranch %228 
                                             %228 = OpLabel 
                                                      OpSelectionMerge %234 None 
                                                      OpBranchConditional %232 %233 %318 
                                             %233 = OpLabel 
                                Uniform f32* %236 = OpAccessChain %35 %222 %168 
                                         f32 %237 = OpLoad %236 
                                        bool %238 = OpFOrdEqual %237 %106 
                                                      OpStore %235 %238 
                                       f32_3 %239 = OpLoad %151 
                                       f32_3 %240 = OpVectorShuffle %239 %239 1 1 1 
                              Uniform f32_4* %242 = OpAccessChain %35 %241 %141 
                                       f32_4 %243 = OpLoad %242 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpFMul %240 %244 
                                                      OpStore %160 %245 
                              Uniform f32_4* %246 = OpAccessChain %35 %241 %140 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpLoad %151 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 0 0 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %252 = OpLoad %160 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %160 %253 
                              Uniform f32_4* %254 = OpAccessChain %35 %241 %170 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpLoad %151 
                                       f32_3 %258 = OpVectorShuffle %257 %257 2 2 2 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %160 
                                       f32_3 %261 = OpFAdd %259 %260 
                                                      OpStore %160 %261 
                                       f32_3 %262 = OpLoad %160 
                              Uniform f32_4* %263 = OpAccessChain %35 %241 %180 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %266 = OpFAdd %262 %265 
                                                      OpStore %160 %266 
                                        bool %270 = OpLoad %235 
                                                      OpSelectionMerge %272 None 
                                                      OpBranchConditional %270 %271 %274 
                                             %271 = OpLabel 
                                       f32_3 %273 = OpLoad %160 
                                                      OpStore %269 %273 
                                                      OpBranch %272 
                                             %274 = OpLabel 
                                       f32_3 %275 = OpLoad %151 
                                                      OpStore %269 %275 
                                                      OpBranch %272 
                                             %272 = OpLabel 
                                       f32_3 %276 = OpLoad %269 
                                                      OpStore %267 %276 
                                       f32_3 %277 = OpLoad %267 
                              Uniform f32_3* %279 = OpAccessChain %35 %278 
                                       f32_3 %280 = OpLoad %279 
                                       f32_3 %281 = OpFNegate %280 
                                       f32_3 %282 = OpFAdd %277 %281 
                                                      OpStore %267 %282 
                                       f32_3 %284 = OpLoad %267 
                              Uniform f32_3* %286 = OpAccessChain %35 %285 
                                       f32_3 %287 = OpLoad %286 
                                       f32_3 %288 = OpFMul %284 %287 
                                       f32_4 %289 = OpLoad %283 
                                       f32_4 %290 = OpVectorShuffle %289 %288 0 4 5 6 
                                                      OpStore %283 %290 
                                Private f32* %291 = OpAccessChain %283 %168 
                                         f32 %292 = OpLoad %291 
                                         f32 %294 = OpFMul %292 %293 
                                         f32 %296 = OpFAdd %294 %295 
                                Private f32* %297 = OpAccessChain %267 %74 
                                                      OpStore %297 %296 
                                Uniform f32* %299 = OpAccessChain %35 %222 %162 
                                         f32 %300 = OpLoad %299 
                                         f32 %302 = OpFMul %300 %301 
                                         f32 %303 = OpFAdd %302 %295 
                                                      OpStore %298 %303 
                                         f32 %304 = OpLoad %298 
                                Private f32* %305 = OpAccessChain %267 %74 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpExtInst %1 40 %304 %306 
                                Private f32* %308 = OpAccessChain %283 %74 
                                                      OpStore %308 %307 
                  read_only Texture3DSampled %313 = OpLoad %312 
                                       f32_4 %314 = OpLoad %283 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 2 3 
                                       f32_4 %316 = OpImageSampleImplicitLod %313 %315 
                                                      OpStore %283 %316 
                                       f32_4 %317 = OpLoad %283 
                                                      OpStore %83 %317 
                                                      OpBranch %234 
                                             %318 = OpLabel 
                                Private f32* %319 = OpAccessChain %83 %74 
                                                      OpStore %319 %106 
                                Private f32* %320 = OpAccessChain %83 %168 
                                                      OpStore %320 %106 
                                Private f32* %321 = OpAccessChain %83 %162 
                                                      OpStore %321 %106 
                                Private f32* %322 = OpAccessChain %83 %126 
                                                      OpStore %322 %106 
                                                      OpBranch %234 
                                             %234 = OpLabel 
                                       f32_4 %324 = OpLoad %83 
                              Uniform f32_4* %325 = OpAccessChain %35 %141 
                                       f32_4 %326 = OpLoad %325 
                                         f32 %327 = OpDot %324 %326 
                                Private f32* %328 = OpAccessChain %323 %74 
                                                      OpStore %328 %327 
                                Private f32* %329 = OpAccessChain %323 %74 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpExtInst %1 43 %330 %108 %106 
                                Private f32* %332 = OpAccessChain %323 %74 
                                                      OpStore %332 %331 
                                       f32_4 %334 = OpLoad %333 
                                       f32_2 %335 = OpVectorShuffle %334 %334 0 1 
                                       f32_4 %336 = OpLoad %333 
                                       f32_2 %337 = OpVectorShuffle %336 %336 3 3 
                                       f32_2 %338 = OpFDiv %335 %337 
                                       f32_3 %339 = OpLoad %267 
                                       f32_3 %340 = OpVectorShuffle %339 %338 3 4 2 
                                                      OpStore %267 %340 
                  read_only Texture2DSampled %343 = OpLoad %342 
                                       f32_3 %344 = OpLoad %267 
                                       f32_2 %345 = OpVectorShuffle %344 %344 0 1 
                                       f32_4 %346 = OpImageSampleImplicitLod %343 %345 
                                         f32 %347 = OpCompositeExtract %346 0 
                                                      OpStore %341 %347 
                                         f32 %349 = OpLoad %174 
                                         f32 %350 = OpLoad %341 
                                         f32 %351 = OpFAdd %349 %350 
                                Private f32* %352 = OpAccessChain %348 %74 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %348 %74 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpExtInst %1 43 %354 %108 %106 
                                Private f32* %356 = OpAccessChain %348 %74 
                                                      OpStore %356 %355 
                                Private f32* %357 = OpAccessChain %348 %74 
                                         f32 %358 = OpLoad %357 
                                Private f32* %359 = OpAccessChain %323 %74 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpExtInst %1 37 %358 %360 
                                Private f32* %362 = OpAccessChain %323 %74 
                                                      OpStore %362 %361 
                                        bool %364 = OpLoad %221 
                                                      OpSelectionMerge %366 None 
                                                      OpBranchConditional %364 %365 %369 
                                             %365 = OpLabel 
                                Private f32* %367 = OpAccessChain %323 %74 
                                         f32 %368 = OpLoad %367 
                                                      OpStore %363 %368 
                                                      OpBranch %366 
                                             %369 = OpLabel 
                                Private f32* %370 = OpAccessChain %348 %74 
                                         f32 %371 = OpLoad %370 
                                                      OpStore %363 %371 
                                                      OpBranch %366 
                                             %366 = OpLabel 
                                         f32 %372 = OpLoad %363 
                                Private f32* %373 = OpAccessChain %323 %74 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                              Uniform f32_4* %377 = OpAccessChain %35 %376 
                                       f32_4 %378 = OpLoad %377 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFMul %375 %379 
                                                      OpStore %348 %380 
                                       f32_3 %381 = OpLoad %323 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 0 0 
                                       f32_3 %383 = OpLoad %348 
                                       f32_3 %384 = OpFMul %382 %383 
                                                      OpStore %323 %384 
                                       f32_4 %385 = OpLoad %9 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_3 %388 = OpLoad %387 
                                       f32_3 %389 = OpFMul %386 %388 
                                       f32_3 %390 = OpLoad %323 
                                       f32_3 %391 = OpFAdd %389 %390 
                                                      OpStore %323 %391 
                                Private f32* %394 = OpAccessChain %9 %126 
                                         f32 %395 = OpLoad %394 
                                 Output f32* %397 = OpAccessChain %393 %126 
                                                      OpStore %397 %395 
                                       f32_4 %398 = OpLoad %27 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                         f32 %400 = OpLoad %100 
                                       f32_3 %401 = OpCompositeConstruct %400 %400 %400 
                                       f32_3 %402 = OpFMul %399 %401 
                                       f32_3 %403 = OpLoad %323 
                                       f32_3 %404 = OpFAdd %402 %403 
                                                      OpStore %323 %404 
                                Private f32* %406 = OpAccessChain %323 %168 
                                         f32 %407 = OpLoad %406 
                                Private f32* %408 = OpAccessChain %323 %162 
                                         f32 %409 = OpLoad %408 
                                        bool %410 = OpFOrdGreaterThanEqual %407 %409 
                                                      OpStore %405 %410 
                                        bool %413 = OpLoad %405 
                                                      OpSelectionMerge %415 None 
                                                      OpBranchConditional %413 %414 %416 
                                             %414 = OpLabel 
                                                      OpStore %412 %106 
                                                      OpBranch %415 
                                             %416 = OpLabel 
                                                      OpStore %412 %108 
                                                      OpBranch %415 
                                             %415 = OpLabel 
                                         f32 %417 = OpLoad %412 
                                                      OpStore %411 %417 
                                       f32_3 %418 = OpLoad %323 
                                       f32_2 %419 = OpVectorShuffle %418 %418 2 1 
                                       f32_2 %420 = OpFNegate %419 
                                       f32_3 %421 = OpLoad %323 
                                       f32_2 %422 = OpVectorShuffle %421 %421 1 2 
                                       f32_2 %423 = OpFAdd %420 %422 
                                       f32_3 %424 = OpLoad %23 
                                       f32_3 %425 = OpVectorShuffle %424 %423 3 4 2 
                                                      OpStore %23 %425 
                                Private f32* %428 = OpAccessChain %427 %74 
                                                      OpStore %428 %106 
                                Private f32* %430 = OpAccessChain %427 %168 
                                                      OpStore %430 %429 
                                         f32 %431 = OpLoad %411 
                                       f32_2 %432 = OpCompositeConstruct %431 %431 
                                       f32_3 %433 = OpLoad %23 
                                       f32_2 %434 = OpVectorShuffle %433 %433 0 1 
                                       f32_2 %435 = OpFMul %432 %434 
                                       f32_3 %436 = OpLoad %323 
                                       f32_2 %437 = OpVectorShuffle %436 %436 2 1 
                                       f32_2 %438 = OpFAdd %435 %437 
                                       f32_4 %439 = OpLoad %283 
                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 2 3 
                                                      OpStore %283 %440 
                                         f32 %441 = OpLoad %411 
                                       f32_2 %442 = OpCompositeConstruct %441 %441 
                                       f32_2 %443 = OpLoad %427 
                                       f32_2 %444 = OpFMul %442 %443 
                                       f32_2 %447 = OpFAdd %444 %446 
                                       f32_4 %448 = OpLoad %283 
                                       f32_4 %449 = OpVectorShuffle %448 %447 0 1 4 5 
                                                      OpStore %283 %449 
                                Private f32* %450 = OpAccessChain %323 %74 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %283 %74 
                                         f32 %453 = OpLoad %452 
                                        bool %454 = OpFOrdGreaterThanEqual %451 %453 
                                                      OpStore %405 %454 
                                        bool %456 = OpLoad %405 
                                                      OpSelectionMerge %458 None 
                                                      OpBranchConditional %456 %457 %459 
                                             %457 = OpLabel 
                                                      OpStore %455 %106 
                                                      OpBranch %458 
                                             %459 = OpLabel 
                                                      OpStore %455 %108 
                                                      OpBranch %458 
                                             %458 = OpLabel 
                                         f32 %460 = OpLoad %455 
                                                      OpStore %411 %460 
                                       f32_4 %461 = OpLoad %283 
                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 3 
                                       f32_3 %463 = OpFNegate %462 
                                       f32_4 %464 = OpLoad %27 
                                       f32_4 %465 = OpVectorShuffle %464 %463 4 5 6 3 
                                                      OpStore %27 %465 
                                Private f32* %466 = OpAccessChain %323 %74 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFNegate %467 
                                Private f32* %469 = OpAccessChain %27 %126 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %27 %74 
                                         f32 %471 = OpLoad %470 
                                Private f32* %472 = OpAccessChain %323 %74 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpFAdd %471 %473 
                                Private f32* %475 = OpAccessChain %149 %74 
                                                      OpStore %475 %474 
                                       f32_4 %476 = OpLoad %27 
                                       f32_3 %477 = OpVectorShuffle %476 %476 1 2 3 
                                       f32_4 %478 = OpLoad %283 
                                       f32_3 %479 = OpVectorShuffle %478 %478 1 2 0 
                                       f32_3 %480 = OpFAdd %477 %479 
                                       f32_4 %481 = OpLoad %149 
                                       f32_4 %482 = OpVectorShuffle %481 %480 0 4 5 6 
                                                      OpStore %149 %482 
                                         f32 %483 = OpLoad %411 
                                       f32_3 %484 = OpCompositeConstruct %483 %483 %483 
                                       f32_4 %485 = OpLoad %149 
                                       f32_3 %486 = OpVectorShuffle %485 %485 0 1 2 
                                       f32_3 %487 = OpFMul %484 %486 
                                       f32_4 %488 = OpLoad %283 
                                       f32_3 %489 = OpVectorShuffle %488 %488 0 1 3 
                                       f32_3 %490 = OpFAdd %487 %489 
                                       f32_4 %491 = OpLoad %27 
                                       f32_4 %492 = OpVectorShuffle %491 %490 4 5 6 3 
                                                      OpStore %27 %492 
                                         f32 %493 = OpLoad %411 
                                Private f32* %494 = OpAccessChain %149 %126 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpFMul %493 %495 
                                Private f32* %497 = OpAccessChain %323 %74 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpFAdd %496 %498 
                                                      OpStore %411 %499 
                                Private f32* %500 = OpAccessChain %27 %168 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpLoad %411 
                                         f32 %503 = OpExtInst %1 37 %501 %502 
                                                      OpStore %100 %503 
                                         f32 %504 = OpLoad %100 
                                         f32 %505 = OpFNegate %504 
                                Private f32* %506 = OpAccessChain %27 %74 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpFAdd %505 %507 
                                                      OpStore %100 %508 
                                Private f32* %509 = OpAccessChain %27 %168 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFNegate %510 
                                         f32 %512 = OpLoad %411 
                                         f32 %513 = OpFAdd %511 %512 
                                                      OpStore %411 %513 
                                         f32 %515 = OpLoad %100 
                                         f32 %517 = OpFMul %515 %516 
                                         f32 %519 = OpFAdd %517 %518 
                                                      OpStore %514 %519 
                                         f32 %520 = OpLoad %411 
                                         f32 %521 = OpLoad %514 
                                         f32 %522 = OpFDiv %520 %521 
                                                      OpStore %411 %522 
                                         f32 %523 = OpLoad %411 
                                Private f32* %524 = OpAccessChain %27 %162 
                                         f32 %525 = OpLoad %524 
                                         f32 %526 = OpFAdd %523 %525 
                                                      OpStore %411 %526 
                                Private f32* %527 = OpAccessChain %27 %74 
                                         f32 %528 = OpLoad %527 
                                         f32 %529 = OpFAdd %528 %518 
                                                      OpStore %514 %529 
                                         f32 %530 = OpLoad %100 
                                         f32 %531 = OpLoad %514 
                                         f32 %532 = OpFDiv %530 %531 
                                                      OpStore %514 %532 
                                Private f32* %534 = OpAccessChain %9 %168 
                                         f32 %535 = OpLoad %534 
                                Private f32* %536 = OpAccessChain %9 %162 
                                         f32 %537 = OpLoad %536 
                                        bool %538 = OpFOrdGreaterThanEqual %535 %537 
                                                      OpStore %533 %538 
                                        bool %540 = OpLoad %533 
                                                      OpSelectionMerge %542 None 
                                                      OpBranchConditional %540 %541 %543 
                                             %541 = OpLabel 
                                                      OpStore %539 %106 
                                                      OpBranch %542 
                                             %543 = OpLabel 
                                                      OpStore %539 %108 
                                                      OpBranch %542 
                                             %542 = OpLabel 
                                         f32 %544 = OpLoad %539 
                                Private f32* %545 = OpAccessChain %427 %74 
                                                      OpStore %545 %544 
                                Private f32* %547 = OpAccessChain %9 %162 
                                         f32 %548 = OpLoad %547 
                                         f32 %549 = OpFNegate %548 
                                Private f32* %550 = OpAccessChain %9 %168 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpFAdd %549 %551 
                                                      OpStore %546 %552 
                                Private f32* %554 = OpAccessChain %427 %74 
                                         f32 %555 = OpLoad %554 
                                         f32 %556 = OpLoad %546 
                                         f32 %557 = OpFMul %555 %556 
                                Private f32* %558 = OpAccessChain %9 %162 
                                         f32 %559 = OpLoad %558 
                                         f32 %560 = OpFAdd %557 %559 
                                Private f32* %561 = OpAccessChain %553 %74 
                                                      OpStore %561 %560 
                                Private f32* %563 = OpAccessChain %9 %74 
                                         f32 %564 = OpLoad %563 
                                Private f32* %565 = OpAccessChain %553 %74 
                                         f32 %566 = OpLoad %565 
                                        bool %567 = OpFOrdGreaterThanEqual %564 %566 
                                                      OpStore %562 %567 
                                        bool %570 = OpLoad %562 
                                                      OpSelectionMerge %572 None 
                                                      OpBranchConditional %570 %571 %573 
                                             %571 = OpLabel 
                                                      OpStore %569 %106 
                                                      OpBranch %572 
                                             %573 = OpLabel 
                                                      OpStore %569 %108 
                                                      OpBranch %572 
                                             %572 = OpLabel 
                                         f32 %574 = OpLoad %569 
                                                      OpStore %568 %574 
                                Private f32* %576 = OpAccessChain %553 %74 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpFNegate %577 
                                Private f32* %579 = OpAccessChain %9 %74 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFAdd %578 %580 
                                Private f32* %582 = OpAccessChain %575 %74 
                                                      OpStore %582 %581 
                                         f32 %583 = OpLoad %568 
                                Private f32* %584 = OpAccessChain %575 %74 
                                         f32 %585 = OpLoad %584 
                                         f32 %586 = OpFMul %583 %585 
                                Private f32* %587 = OpAccessChain %553 %74 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpFAdd %586 %588 
                                Private f32* %590 = OpAccessChain %575 %74 
                                                      OpStore %590 %589 
                                Private f32* %591 = OpAccessChain %575 %74 
                                         f32 %592 = OpLoad %591 
                                Uniform f32* %594 = OpAccessChain %35 %593 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpFMul %592 %595 
                                Private f32* %597 = OpAccessChain %553 %74 
                                                      OpStore %597 %596 
                                Private f32* %598 = OpAccessChain %553 %74 
                                         f32 %599 = OpLoad %598 
                                Private f32* %600 = OpAccessChain %27 %74 
                                         f32 %601 = OpLoad %600 
                                         f32 %602 = OpExtInst %1 40 %599 %601 
                                Private f32* %603 = OpAccessChain %553 %74 
                                                      OpStore %603 %602 
                                       f32_3 %604 = OpLoad %120 
                                         f32 %605 = OpDot %604 %89 
                                Private f32* %606 = OpAccessChain %323 %74 
                                                      OpStore %606 %605 
                                Private f32* %607 = OpAccessChain %323 %74 
                                         f32 %608 = OpLoad %607 
                                         f32 %610 = OpFMul %608 %609 
                                Private f32* %611 = OpAccessChain %575 %74 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFAdd %610 %612 
                                Private f32* %614 = OpAccessChain %575 %74 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %575 %74 
                                         f32 %616 = OpLoad %615 
                                Uniform f32* %618 = OpAccessChain %35 %617 
                                         f32 %619 = OpLoad %618 
                                         f32 %620 = OpFMul %616 %619 
                                Private f32* %621 = OpAccessChain %575 %74 
                                                      OpStore %621 %620 
                                Private f32* %622 = OpAccessChain %575 %74 
                                         f32 %623 = OpLoad %622 
                                Private f32* %624 = OpAccessChain %553 %74 
                                         f32 %625 = OpLoad %624 
                                         f32 %626 = OpExtInst %1 37 %623 %625 
                                Private f32* %627 = OpAccessChain %575 %74 
                                                      OpStore %627 %626 
                                         f32 %628 = OpLoad %411 
                                       f32_3 %629 = OpCompositeConstruct %628 %628 %628 
                                       f32_3 %630 = OpExtInst %1 4 %629 
                                       f32_3 %633 = OpFAdd %630 %632 
                                                      OpStore %553 %633 
                                       f32_3 %634 = OpLoad %553 
                                       f32_3 %635 = OpExtInst %1 10 %634 
                                                      OpStore %553 %635 
                                       f32_3 %636 = OpLoad %553 
                                       f32_3 %638 = OpFMul %636 %637 
                                       f32_3 %641 = OpFAdd %638 %640 
                                                      OpStore %553 %641 
                                       f32_3 %642 = OpLoad %553 
                                       f32_3 %643 = OpExtInst %1 4 %642 
                                       f32_3 %645 = OpFAdd %643 %644 
                                                      OpStore %553 %645 
                                       f32_3 %646 = OpLoad %553 
                                       f32_3 %647 = OpCompositeConstruct %108 %108 %108 
                                       f32_3 %648 = OpCompositeConstruct %106 %106 %106 
                                       f32_3 %649 = OpExtInst %1 43 %646 %647 %648 
                                                      OpStore %553 %649 
                                       f32_3 %650 = OpLoad %553 
                                       f32_3 %651 = OpFAdd %650 %644 
                                                      OpStore %553 %651 
                                         f32 %652 = OpLoad %514 
                                       f32_3 %653 = OpCompositeConstruct %652 %652 %652 
                                       f32_3 %654 = OpLoad %553 
                                       f32_3 %655 = OpFMul %653 %654 
                                       f32_3 %657 = OpFAdd %655 %656 
                                                      OpStore %553 %657 
                                       f32_3 %658 = OpLoad %553 
                                       f32_3 %659 = OpLoad %575 
                                       f32_3 %660 = OpVectorShuffle %659 %659 0 0 0 
                                       f32_3 %661 = OpFMul %658 %660 
                                                      OpStore %575 %661 
                                       f32_3 %662 = OpLoad %575 
                                       f32_4 %663 = OpLoad %393 
                                       f32_4 %664 = OpVectorShuffle %663 %662 4 5 6 3 
                                                      OpStore %393 %664 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _EmissiveMap_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _EmissiveMap_ST.xy + _EmissiveMap_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _EmissiveGlowToggle;
uniform 	float _ValueMaximum;
uniform 	float _ValueMinimum;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _EmissiveMap;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat15;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat16_19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1.xyz = log2(u_xlat10_0.xyz);
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10_2 = texture(_EmissiveMap, vs_TEXCOORD0.zw);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xxx;
    u_xlat16_19 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlatb2 = _EmissiveGlowToggle>=0.100000001;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat16_19 = (-u_xlat16_19) + 0.100000024;
    u_xlat19 = u_xlat2.x * u_xlat16_19 + 1.0;
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat20 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb20 = u_xlat20<0.0;
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat20 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat20) + u_xlat3.x;
    u_xlat20 = unity_ShadowFadeCenterAndType.w * u_xlat3.x + u_xlat20;
    u_xlat20 = u_xlat20 * _LightShadowData.z + _LightShadowData.w;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlatb3 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat9.xyz = (bool(u_xlatb9)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat9.xyz = u_xlat9.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat9.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat9.x = u_xlat4.y * 0.25 + 0.75;
        u_xlat15.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat15.x, u_xlat9.x);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat9.x = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
    u_xlat15.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat15.xy);
    u_xlat20 = u_xlat20 + u_xlat10_4.x;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat9.x = min(u_xlat20, u_xlat9.x);
    u_xlat20 = (u_xlatb3) ? u_xlat9.x : u_xlat20;
    u_xlat3.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat20) * u_xlat4.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.w = u_xlat10_0.w;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat1.xyw = u_xlat1.yzx * vec3(u_xlat19) + u_xlat3.yzx;
    u_xlatb18 = u_xlat1.x>=u_xlat1.y;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat1.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.xy + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat18) * u_xlat5 + u_xlat4;
    u_xlatb18 = u_xlat1.w>=u_xlat4.x;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat1.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat1.wyx;
    u_xlat4 = (-u_xlat1) + u_xlat4;
    u_xlat1 = vec4(u_xlat18) * u_xlat4 + u_xlat1;
    u_xlat18 = min(u_xlat1.y, u_xlat1.w);
    u_xlat18 = (-u_xlat18) + u_xlat1.x;
    u_xlat7 = (-u_xlat1.y) + u_xlat1.w;
    u_xlat19 = u_xlat18 * 6.0 + 1.00000001e-010;
    u_xlat7 = u_xlat7 / u_xlat19;
    u_xlat7 = u_xlat7 + u_xlat1.z;
    u_xlat13 = u_xlat1.x + 1.00000001e-010;
    u_xlat18 = u_xlat18 / u_xlat13;
    u_xlatb13 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat16_6 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat6.x = u_xlat13 * u_xlat16_6 + u_xlat10_0.z;
    u_xlatb12 = u_xlat10_0.x>=u_xlat6.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat6.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat12 * u_xlat0 + u_xlat6.x;
    u_xlat6.x = u_xlat0 * _ValueMinimum;
    u_xlat6.x = max(u_xlat6.x, u_xlat1.x);
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0 = u_xlat12 * 50.0 + u_xlat0;
    u_xlat0 = u_xlat0 * _ValueMaximum;
    u_xlat0 = min(u_xlat0, u_xlat6.x);
    u_xlat1.xyz = abs(vec3(u_xlat7)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat6.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat3.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 318
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %94 %95 %110 %126 %165 %168 %171 %281 %298 %310 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpMemberDecorate %19 12 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %168 Location 168 
                                                      OpDecorate %171 Location 171 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %281 Location 281 
                                                      OpDecorate %298 Location 298 
                                                      OpDecorate %310 Location 310 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %58 = OpVariable Private 
                                          i32 %61 = OpConstant 10 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %92 = OpTypePointer Output %7 
                                Output f32_4* %94 = OpVariable Output 
                                 Input f32_4* %95 = OpVariable Input 
                                              %96 = OpTypeVector %6 2 
                                          i32 %99 = OpConstant 11 
                                Input f32_4* %110 = OpVariable Input 
                                         i32 %113 = OpConstant 12 
                                             %124 = OpTypeVector %6 3 
                                             %125 = OpTypePointer Input %124 
                                Input f32_3* %126 = OpVariable Input 
                                         i32 %128 = OpConstant 9 
                                         u32 %133 = OpConstant 0 
                                             %134 = OpTypePointer Private %6 
                                         u32 %147 = OpConstant 2 
                                Private f32* %149 = OpVariable Private 
                                             %164 = OpTypePointer Output %124 
                               Output f32_3* %165 = OpVariable Output 
                               Output f32_3* %168 = OpVariable Output 
                               Output f32_4* %171 = OpVariable Output 
                                             %173 = OpTypePointer Private %124 
                              Private f32_3* %174 = OpVariable Private 
                              Private f32_4* %191 = OpVariable Private 
                              Private f32_3* %197 = OpVariable Private 
                                         i32 %198 = OpConstant 4 
                                         i32 %204 = OpConstant 5 
                                         i32 %210 = OpConstant 6 
                                         i32 %216 = OpConstant 7 
                                         f32 %225 = OpConstant 3.674022E-40 
                                         u32 %226 = OpConstant 3 
                                         f32 %247 = OpConstant 3.674022E-40 
                                       f32_3 %248 = OpConstantComposite %247 %247 %247 
                                         f32 %256 = OpConstant 3.674022E-40 
                                       f32_3 %257 = OpConstantComposite %256 %256 %256 
                                         f32 %268 = OpConstant 3.674022E-40 
                                       f32_3 %269 = OpConstantComposite %268 %268 %268 
                                         f32 %271 = OpConstant 3.674022E-40 
                                       f32_3 %272 = OpConstantComposite %271 %271 %271 
                               Output f32_3* %281 = OpVariable Output 
                                             %286 = OpTypePointer Uniform %6 
                                         f32 %293 = OpConstant 3.674022E-40 
                                       f32_3 %294 = OpConstantComposite %293 %293 %293 
                               Output f32_4* %298 = OpVariable Output 
                               Output f32_4* %310 = OpVariable Output 
                                       f32_4 %311 = OpConstantComposite %247 %247 %247 %247 
                                             %312 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %51 = OpAccessChain %21 %23 %47 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %11 
                                        f32_4 %54 = OpVectorShuffle %53 %53 3 3 3 3 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %9 %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %21 %61 %24 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %60 %63 
                                                      OpStore %58 %64 
                               Uniform f32_4* %65 = OpAccessChain %21 %61 %29 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %45 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %58 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %58 %71 
                               Uniform f32_4* %72 = OpAccessChain %21 %61 %37 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %45 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %58 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %58 %78 
                               Uniform f32_4* %79 = OpAccessChain %21 %61 %47 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %45 
                                        f32_4 %82 = OpVectorShuffle %81 %81 3 3 3 3 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %58 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %45 %85 
                                        f32_4 %91 = OpLoad %45 
                                Output f32_4* %93 = OpAccessChain %90 %29 
                                                      OpStore %93 %91 
                                        f32_4 %97 = OpLoad %95 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %100 = OpAccessChain %21 %99 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %98 %102 
                              Uniform f32_4* %104 = OpAccessChain %21 %99 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                       f32_4 %108 = OpLoad %94 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %94 %109 
                                       f32_4 %111 = OpLoad %110 
                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
                              Uniform f32_4* %114 = OpAccessChain %21 %113 
                                       f32_4 %115 = OpLoad %114 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_2 %117 = OpFMul %112 %116 
                              Uniform f32_4* %118 = OpAccessChain %21 %113 
                                       f32_4 %119 = OpLoad %118 
                                       f32_2 %120 = OpVectorShuffle %119 %119 2 3 
                                       f32_2 %121 = OpFAdd %117 %120 
                                       f32_4 %122 = OpLoad %94 
                                       f32_4 %123 = OpVectorShuffle %122 %121 0 1 4 5 
                                                      OpStore %94 %123 
                                       f32_3 %127 = OpLoad %126 
                              Uniform f32_4* %129 = OpAccessChain %21 %128 %29 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                         f32 %132 = OpDot %127 %131 
                                Private f32* %135 = OpAccessChain %58 %133 
                                                      OpStore %135 %132 
                                       f32_3 %136 = OpLoad %126 
                              Uniform f32_4* %137 = OpAccessChain %21 %128 %24 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                         f32 %140 = OpDot %136 %139 
                                Private f32* %141 = OpAccessChain %58 %86 
                                                      OpStore %141 %140 
                                       f32_3 %142 = OpLoad %126 
                              Uniform f32_4* %143 = OpAccessChain %21 %128 %37 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                         f32 %146 = OpDot %142 %145 
                                Private f32* %148 = OpAccessChain %58 %147 
                                                      OpStore %148 %146 
                                       f32_4 %150 = OpLoad %58 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_4 %152 = OpLoad %58 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %151 %153 
                                                      OpStore %149 %154 
                                         f32 %155 = OpLoad %149 
                                         f32 %156 = OpExtInst %1 32 %155 
                                                      OpStore %149 %156 
                                         f32 %157 = OpLoad %149 
                                       f32_3 %158 = OpCompositeConstruct %157 %157 %157 
                                       f32_4 %159 = OpLoad %58 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFMul %158 %160 
                                       f32_4 %162 = OpLoad %58 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %58 %163 
                                       f32_4 %166 = OpLoad %58 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                                      OpStore %165 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                                      OpStore %168 %170 
                                       f32_4 %172 = OpLoad %9 
                                                      OpStore %171 %172 
                                Private f32* %175 = OpAccessChain %58 %86 
                                         f32 %176 = OpLoad %175 
                                Private f32* %177 = OpAccessChain %58 %86 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpFMul %176 %178 
                                Private f32* %180 = OpAccessChain %174 %133 
                                                      OpStore %180 %179 
                                Private f32* %181 = OpAccessChain %58 %133 
                                         f32 %182 = OpLoad %181 
                                Private f32* %183 = OpAccessChain %58 %133 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpFMul %182 %184 
                                Private f32* %186 = OpAccessChain %174 %133 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFNegate %187 
                                         f32 %189 = OpFAdd %185 %188 
                                Private f32* %190 = OpAccessChain %174 %133 
                                                      OpStore %190 %189 
                                       f32_4 %192 = OpLoad %58 
                                       f32_4 %193 = OpVectorShuffle %192 %192 1 2 2 0 
                                       f32_4 %194 = OpLoad %58 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 1 2 2 
                                       f32_4 %196 = OpFMul %193 %195 
                                                      OpStore %191 %196 
                              Uniform f32_4* %199 = OpAccessChain %21 %198 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpLoad %191 
                                         f32 %202 = OpDot %200 %201 
                                Private f32* %203 = OpAccessChain %197 %133 
                                                      OpStore %203 %202 
                              Uniform f32_4* %205 = OpAccessChain %21 %204 
                                       f32_4 %206 = OpLoad %205 
                                       f32_4 %207 = OpLoad %191 
                                         f32 %208 = OpDot %206 %207 
                                Private f32* %209 = OpAccessChain %197 %86 
                                                      OpStore %209 %208 
                              Uniform f32_4* %211 = OpAccessChain %21 %210 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %191 
                                         f32 %214 = OpDot %212 %213 
                                Private f32* %215 = OpAccessChain %197 %147 
                                                      OpStore %215 %214 
                              Uniform f32_4* %217 = OpAccessChain %21 %216 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpLoad %174 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 0 0 
                                       f32_3 %222 = OpFMul %219 %221 
                                       f32_3 %223 = OpLoad %197 
                                       f32_3 %224 = OpFAdd %222 %223 
                                                      OpStore %174 %224 
                                Private f32* %227 = OpAccessChain %58 %226 
                                                      OpStore %227 %225 
                              Uniform f32_4* %228 = OpAccessChain %21 %24 
                                       f32_4 %229 = OpLoad %228 
                                       f32_4 %230 = OpLoad %58 
                                         f32 %231 = OpDot %229 %230 
                                Private f32* %232 = OpAccessChain %197 %133 
                                                      OpStore %232 %231 
                              Uniform f32_4* %233 = OpAccessChain %21 %37 
                                       f32_4 %234 = OpLoad %233 
                                       f32_4 %235 = OpLoad %58 
                                         f32 %236 = OpDot %234 %235 
                                Private f32* %237 = OpAccessChain %197 %86 
                                                      OpStore %237 %236 
                              Uniform f32_4* %238 = OpAccessChain %21 %47 
                                       f32_4 %239 = OpLoad %238 
                                       f32_4 %240 = OpLoad %58 
                                         f32 %241 = OpDot %239 %240 
                                Private f32* %242 = OpAccessChain %197 %147 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %174 
                                       f32_3 %244 = OpLoad %197 
                                       f32_3 %245 = OpFAdd %243 %244 
                                                      OpStore %174 %245 
                                       f32_3 %246 = OpLoad %174 
                                       f32_3 %249 = OpExtInst %1 40 %246 %248 
                                                      OpStore %174 %249 
                                       f32_3 %250 = OpLoad %174 
                                       f32_3 %251 = OpExtInst %1 30 %250 
                                       f32_4 %252 = OpLoad %58 
                                       f32_4 %253 = OpVectorShuffle %252 %251 4 5 6 3 
                                                      OpStore %58 %253 
                                       f32_4 %254 = OpLoad %58 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %258 = OpFMul %255 %257 
                                       f32_4 %259 = OpLoad %58 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %58 %260 
                                       f32_4 %261 = OpLoad %58 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpExtInst %1 29 %262 
                                       f32_4 %264 = OpLoad %58 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %58 %265 
                                       f32_4 %266 = OpLoad %58 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %273 = OpFAdd %270 %272 
                                       f32_4 %274 = OpLoad %58 
                                       f32_4 %275 = OpVectorShuffle %274 %273 4 5 6 3 
                                                      OpStore %58 %275 
                                       f32_4 %276 = OpLoad %58 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpExtInst %1 40 %277 %248 
                                       f32_4 %279 = OpLoad %58 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %58 %280 
                                       f32_4 %282 = OpLoad %58 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                                      OpStore %281 %283 
                                Private f32* %284 = OpAccessChain %45 %86 
                                         f32 %285 = OpLoad %284 
                                Uniform f32* %287 = OpAccessChain %21 %29 %133 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFMul %285 %288 
                                Private f32* %290 = OpAccessChain %45 %86 
                                                      OpStore %290 %289 
                                       f32_4 %291 = OpLoad %45 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 3 1 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_4 %296 = OpLoad %58 
                                       f32_4 %297 = OpVectorShuffle %296 %295 4 1 5 6 
                                                      OpStore %58 %297 
                                       f32_4 %299 = OpLoad %45 
                                       f32_2 %300 = OpVectorShuffle %299 %299 2 3 
                                       f32_4 %301 = OpLoad %298 
                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
                                                      OpStore %298 %302 
                                       f32_4 %303 = OpLoad %58 
                                       f32_2 %304 = OpVectorShuffle %303 %303 2 2 
                                       f32_4 %305 = OpLoad %58 
                                       f32_2 %306 = OpVectorShuffle %305 %305 0 3 
                                       f32_2 %307 = OpFAdd %304 %306 
                                       f32_4 %308 = OpLoad %298 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 2 3 
                                                      OpStore %298 %309 
                                                      OpStore %310 %311 
                                 Output f32* %313 = OpAccessChain %90 %29 %86 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                 Output f32* %316 = OpAccessChain %90 %29 %86 
                                                      OpStore %316 %315 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 666
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %151 %333 %387 %393 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %31 ArrayStride 31 
                                                      OpDecorate %32 ArrayStride 32 
                                                      OpMemberDecorate %33 0 Offset 33 
                                                      OpMemberDecorate %33 1 RelaxedPrecision 
                                                      OpMemberDecorate %33 1 Offset 33 
                                                      OpMemberDecorate %33 2 RelaxedPrecision 
                                                      OpMemberDecorate %33 2 Offset 33 
                                                      OpMemberDecorate %33 3 Offset 33 
                                                      OpMemberDecorate %33 4 Offset 33 
                                                      OpMemberDecorate %33 5 Offset 33 
                                                      OpMemberDecorate %33 6 Offset 33 
                                                      OpMemberDecorate %33 7 Offset 33 
                                                      OpMemberDecorate %33 8 Offset 33 
                                                      OpMemberDecorate %33 9 RelaxedPrecision 
                                                      OpMemberDecorate %33 9 Offset 33 
                                                      OpMemberDecorate %33 10 Offset 33 
                                                      OpMemberDecorate %33 11 Offset 33 
                                                      OpMemberDecorate %33 12 Offset 33 
                                                      OpMemberDecorate %33 13 Offset 33 
                                                      OpMemberDecorate %33 14 Offset 33 
                                                      OpMemberDecorate %33 15 RelaxedPrecision 
                                                      OpMemberDecorate %33 15 Offset 33 
                                                      OpDecorate %33 Block 
                                                      OpDecorate %35 DescriptorSet 35 
                                                      OpDecorate %35 Binding 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %232 SpecId 232 
                                                      OpDecorate %312 DescriptorSet 312 
                                                      OpDecorate %312 Binding 312 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %342 DescriptorSet 342 
                                                      OpDecorate %342 Binding 342 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %387 Location 387 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %393 Location 393 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %559 RelaxedPrecision 
                                                      OpDecorate %564 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
                               Private f32_4* %27 = OpVariable Private 
                                              %29 = OpTypeInt 32 0 
                                          u32 %30 = OpConstant 4 
                                              %31 = OpTypeArray %7 %30 
                                              %32 = OpTypeArray %7 %30 
                                              %33 = OpTypeStruct %21 %7 %7 %7 %31 %7 %32 %21 %21 %7 %6 %6 %6 %6 %6 %6 
                                              %34 = OpTypePointer Uniform %33 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32;}* %35 = OpVariable Uniform 
                                              %36 = OpTypeInt 32 1 
                                          i32 %37 = OpConstant 11 
                                              %38 = OpTypePointer Uniform %6 
                                          i32 %60 = OpConstant 10 
                                              %67 = OpTypePointer Private %6 
                                 Private f32* %68 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %69 = OpVariable UniformConstant 
                                          u32 %74 = OpConstant 0 
                               Private f32_4* %83 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %88 = OpConstant 3.674022E-40 
                                        f32_3 %89 = OpConstantComposite %86 %87 %88 
                                              %92 = OpTypeBool 
                                              %93 = OpTypePointer Private %92 
                                Private bool* %94 = OpVariable Private 
                                          i32 %95 = OpConstant 12 
                                          f32 %98 = OpConstant 3.674022E-40 
                                Private f32* %100 = OpVariable Private 
                                             %101 = OpTypePointer Function %6 
                                         f32 %106 = OpConstant 3.674022E-40 
                                         f32 %108 = OpConstant 3.674022E-40 
                                Private f32* %110 = OpVariable Private 
                                         f32 %114 = OpConstant 3.674022E-40 
                              Private f32_3* %120 = OpVariable Private 
                                         u32 %126 = OpConstant 3 
                                         i32 %129 = OpConstant 15 
                               Private bool* %135 = OpVariable Private 
                                         i32 %140 = OpConstant 0 
                                         i32 %141 = OpConstant 1 
                                         i32 %143 = OpConstant -1 
                              Private f32_4* %149 = OpVariable Private 
                                             %150 = OpTypePointer Input %21 
                                Input f32_3* %151 = OpVariable Input 
                                             %154 = OpTypePointer Uniform %21 
                              Private f32_3* %160 = OpVariable Private 
                                         i32 %161 = OpConstant 4 
                                         u32 %162 = OpConstant 2 
                                         u32 %168 = OpConstant 1 
                                         i32 %170 = OpConstant 2 
                                Private f32* %174 = OpVariable Private 
                                         i32 %180 = OpConstant 3 
                                             %181 = OpTypePointer Uniform %7 
                               Private bool* %221 = OpVariable Private 
                                         i32 %222 = OpConstant 5 
                                        bool %226 = OpConstantFalse 
                                        bool %232 = OpSpecConstantFalse 
                               Private bool* %235 = OpVariable Private 
                                         i32 %241 = OpConstant 6 
                              Private f32_3* %267 = OpVariable Private 
                                             %268 = OpTypePointer Function %21 
                                         i32 %278 = OpConstant 8 
                              Private f32_4* %283 = OpVariable Private 
                                         i32 %285 = OpConstant 7 
                                         f32 %293 = OpConstant 3.674022E-40 
                                         f32 %295 = OpConstant 3.674022E-40 
                                Private f32* %298 = OpVariable Private 
                                         f32 %301 = OpConstant 3.674022E-40 
                                             %309 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %310 = OpTypeSampledImage %309 
                                             %311 = OpTypePointer UniformConstant %310 
 UniformConstant read_only Texture3DSampled* %312 = OpVariable UniformConstant 
                              Private f32_3* %323 = OpVariable Private 
                                Input f32_4* %333 = OpVariable Input 
                                Private f32* %341 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %342 = OpVariable UniformConstant 
                              Private f32_3* %348 = OpVariable Private 
                                         i32 %376 = OpConstant 9 
                                Input f32_3* %387 = OpVariable Input 
                                             %392 = OpTypePointer Output %7 
                               Output f32_4* %393 = OpVariable Output 
                                             %396 = OpTypePointer Output %6 
                               Private bool* %405 = OpVariable Private 
                                Private f32* %411 = OpVariable Private 
                                             %426 = OpTypePointer Private %17 
                              Private f32_2* %427 = OpVariable Private 
                                         f32 %429 = OpConstant 3.674022E-40 
                                         f32 %445 = OpConstant 3.674022E-40 
                                       f32_2 %446 = OpConstantComposite %429 %445 
                                Private f32* %514 = OpVariable Private 
                                         f32 %516 = OpConstant 3.674022E-40 
                                         f32 %518 = OpConstant 3.674022E-40 
                               Private bool* %533 = OpVariable Private 
                                Private f32* %546 = OpVariable Private 
                              Private f32_3* %553 = OpVariable Private 
                               Private bool* %562 = OpVariable Private 
                                Private f32* %568 = OpVariable Private 
                              Private f32_3* %575 = OpVariable Private 
                                         i32 %593 = OpConstant 14 
                                         f32 %609 = OpConstant 3.674022E-40 
                                         i32 %617 = OpConstant 13 
                                         f32 %631 = OpConstant 3.674022E-40 
                                       f32_3 %632 = OpConstantComposite %106 %445 %631 
                                       f32_3 %637 = OpConstantComposite %516 %516 %516 
                                         f32 %639 = OpConstant 3.674022E-40 
                                       f32_3 %640 = OpConstantComposite %639 %639 %639 
                                       f32_3 %644 = OpConstantComposite %429 %429 %429 
                                       f32_3 %656 = OpConstantComposite %106 %106 %106 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %102 = OpVariable Function 
                             Function f32_3* %269 = OpVariable Function 
                               Function f32* %363 = OpVariable Function 
                               Function f32* %412 = OpVariable Function 
                               Function f32* %455 = OpVariable Function 
                               Function f32* %539 = OpVariable Function 
                               Function f32* %569 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                                        f32_4 %24 = OpLoad %9 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpExtInst %1 30 %25 
                                                      OpStore %23 %26 
                                        f32_3 %28 = OpLoad %23 
                                 Uniform f32* %39 = OpAccessChain %35 %37 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %41 = OpAccessChain %35 %37 
                                          f32 %42 = OpLoad %41 
                                 Uniform f32* %43 = OpAccessChain %35 %37 
                                          f32 %44 = OpLoad %43 
                                        f32_3 %45 = OpCompositeConstruct %40 %42 %44 
                                          f32 %46 = OpCompositeExtract %45 0 
                                          f32 %47 = OpCompositeExtract %45 1 
                                          f32 %48 = OpCompositeExtract %45 2 
                                        f32_3 %49 = OpCompositeConstruct %46 %47 %48 
                                        f32_3 %50 = OpFMul %28 %49 
                                        f32_4 %51 = OpLoad %27 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %27 %52 
                                        f32_4 %53 = OpLoad %27 
                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                                        f32_3 %55 = OpExtInst %1 29 %54 
                                        f32_4 %56 = OpLoad %27 
                                        f32_4 %57 = OpVectorShuffle %56 %55 4 5 6 3 
                                                      OpStore %27 %57 
                                        f32_4 %58 = OpLoad %27 
                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                 Uniform f32* %61 = OpAccessChain %35 %60 
                                          f32 %62 = OpLoad %61 
                                        f32_3 %63 = OpCompositeConstruct %62 %62 %62 
                                        f32_3 %64 = OpFMul %59 %63 
                                        f32_4 %65 = OpLoad %27 
                                        f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                                      OpStore %27 %66 
                   read_only Texture2DSampled %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %16 
                                        f32_2 %72 = OpVectorShuffle %71 %71 2 3 
                                        f32_4 %73 = OpImageSampleImplicitLod %70 %72 
                                          f32 %75 = OpCompositeExtract %73 0 
                                                      OpStore %68 %75 
                                          f32 %76 = OpLoad %68 
                                        f32_3 %77 = OpCompositeConstruct %76 %76 %76 
                                        f32_4 %78 = OpLoad %27 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %27 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %27 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                          f32 %90 = OpDot %85 %89 
                                 Private f32* %91 = OpAccessChain %83 %74 
                                                      OpStore %91 %90 
                                 Uniform f32* %96 = OpAccessChain %35 %95 
                                          f32 %97 = OpLoad %96 
                                         bool %99 = OpFOrdGreaterThanEqual %97 %98 
                                                      OpStore %94 %99 
                                        bool %103 = OpLoad %94 
                                                      OpSelectionMerge %105 None 
                                                      OpBranchConditional %103 %104 %107 
                                             %104 = OpLabel 
                                                      OpStore %102 %106 
                                                      OpBranch %105 
                                             %107 = OpLabel 
                                                      OpStore %102 %108 
                                                      OpBranch %105 
                                             %105 = OpLabel 
                                         f32 %109 = OpLoad %102 
                                                      OpStore %100 %109 
                                Private f32* %111 = OpAccessChain %83 %74 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFNegate %112 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %110 %115 
                                         f32 %116 = OpLoad %100 
                                         f32 %117 = OpLoad %110 
                                         f32 %118 = OpFMul %116 %117 
                                         f32 %119 = OpFAdd %118 %106 
                                                      OpStore %100 %119 
                                         f32 %121 = OpLoad %100 
                                       f32_3 %122 = OpCompositeConstruct %121 %121 %121 
                                       f32_4 %123 = OpLoad %27 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_3 %125 = OpFMul %122 %124 
                                                      OpStore %120 %125 
                                Private f32* %127 = OpAccessChain %9 %126 
                                         f32 %128 = OpLoad %127 
                                Uniform f32* %130 = OpAccessChain %35 %129 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFNegate %131 
                                         f32 %133 = OpFAdd %128 %132 
                                Private f32* %134 = OpAccessChain %83 %74 
                                                      OpStore %134 %133 
                                Private f32* %136 = OpAccessChain %83 %74 
                                         f32 %137 = OpLoad %136 
                                        bool %138 = OpFOrdLessThan %137 %108 
                                                      OpStore %135 %138 
                                        bool %139 = OpLoad %135 
                                         i32 %142 = OpSelect %139 %141 %140 
                                         i32 %144 = OpIMul %142 %143 
                                        bool %145 = OpINotEqual %144 %140 
                                                      OpSelectionMerge %147 None 
                                                      OpBranchConditional %145 %146 %147 
                                             %146 = OpLabel 
                                                      OpKill
                                             %147 = OpLabel 
                                       f32_3 %152 = OpLoad %151 
                                       f32_3 %153 = OpFNegate %152 
                              Uniform f32_3* %155 = OpAccessChain %35 %140 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %149 
                                       f32_4 %159 = OpVectorShuffle %158 %157 4 5 6 3 
                                                      OpStore %149 %159 
                                Uniform f32* %163 = OpAccessChain %35 %161 %140 %162 
                                         f32 %164 = OpLoad %163 
                                Private f32* %165 = OpAccessChain %160 %74 
                                                      OpStore %165 %164 
                                Uniform f32* %166 = OpAccessChain %35 %161 %141 %162 
                                         f32 %167 = OpLoad %166 
                                Private f32* %169 = OpAccessChain %160 %168 
                                                      OpStore %169 %167 
                                Uniform f32* %171 = OpAccessChain %35 %161 %170 %162 
                                         f32 %172 = OpLoad %171 
                                Private f32* %173 = OpAccessChain %160 %162 
                                                      OpStore %173 %172 
                                       f32_4 %175 = OpLoad %149 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpLoad %160 
                                         f32 %178 = OpDot %176 %177 
                                                      OpStore %174 %178 
                                       f32_3 %179 = OpLoad %151 
                              Uniform f32_4* %182 = OpAccessChain %35 %180 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %179 %185 
                                       f32_4 %187 = OpLoad %149 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %149 %188 
                                       f32_4 %189 = OpLoad %149 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %149 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                Private f32* %194 = OpAccessChain %149 %74 
                                                      OpStore %194 %193 
                                Private f32* %195 = OpAccessChain %149 %74 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 31 %196 
                                Private f32* %198 = OpAccessChain %149 %74 
                                                      OpStore %198 %197 
                                         f32 %199 = OpLoad %174 
                                         f32 %200 = OpFNegate %199 
                                Private f32* %201 = OpAccessChain %149 %74 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFAdd %200 %202 
                                Private f32* %204 = OpAccessChain %149 %74 
                                                      OpStore %204 %203 
                                Uniform f32* %205 = OpAccessChain %35 %180 %126 
                                         f32 %206 = OpLoad %205 
                                Private f32* %207 = OpAccessChain %149 %74 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFMul %206 %208 
                                         f32 %210 = OpLoad %174 
                                         f32 %211 = OpFAdd %209 %210 
                                                      OpStore %174 %211 
                                         f32 %212 = OpLoad %174 
                                Uniform f32* %213 = OpAccessChain %35 %170 %162 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFMul %212 %214 
                                Uniform f32* %216 = OpAccessChain %35 %170 %126 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFAdd %215 %217 
                                                      OpStore %174 %218 
                                         f32 %219 = OpLoad %174 
                                         f32 %220 = OpExtInst %1 43 %219 %108 %106 
                                                      OpStore %174 %220 
                                Uniform f32* %223 = OpAccessChain %35 %222 %74 
                                         f32 %224 = OpLoad %223 
                                        bool %225 = OpFOrdEqual %224 %106 
                                                      OpStore %221 %225 
                                                      OpSelectionMerge %228 None 
                                                      OpBranchConditional %226 %227 %228 
                                             %227 = OpLabel 
                                        bool %229 = OpLoad %221 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %229 %230 %231 
                                             %230 = OpLabel 
                                                      OpBranch %231 
                                             %231 = OpLabel 
                                                      OpBranch %228 
                                             %228 = OpLabel 
                                                      OpSelectionMerge %234 None 
                                                      OpBranchConditional %232 %233 %318 
                                             %233 = OpLabel 
                                Uniform f32* %236 = OpAccessChain %35 %222 %168 
                                         f32 %237 = OpLoad %236 
                                        bool %238 = OpFOrdEqual %237 %106 
                                                      OpStore %235 %238 
                                       f32_3 %239 = OpLoad %151 
                                       f32_3 %240 = OpVectorShuffle %239 %239 1 1 1 
                              Uniform f32_4* %242 = OpAccessChain %35 %241 %141 
                                       f32_4 %243 = OpLoad %242 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpFMul %240 %244 
                                                      OpStore %160 %245 
                              Uniform f32_4* %246 = OpAccessChain %35 %241 %140 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpLoad %151 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 0 0 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %252 = OpLoad %160 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %160 %253 
                              Uniform f32_4* %254 = OpAccessChain %35 %241 %170 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpLoad %151 
                                       f32_3 %258 = OpVectorShuffle %257 %257 2 2 2 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %160 
                                       f32_3 %261 = OpFAdd %259 %260 
                                                      OpStore %160 %261 
                                       f32_3 %262 = OpLoad %160 
                              Uniform f32_4* %263 = OpAccessChain %35 %241 %180 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %266 = OpFAdd %262 %265 
                                                      OpStore %160 %266 
                                        bool %270 = OpLoad %235 
                                                      OpSelectionMerge %272 None 
                                                      OpBranchConditional %270 %271 %274 
                                             %271 = OpLabel 
                                       f32_3 %273 = OpLoad %160 
                                                      OpStore %269 %273 
                                                      OpBranch %272 
                                             %274 = OpLabel 
                                       f32_3 %275 = OpLoad %151 
                                                      OpStore %269 %275 
                                                      OpBranch %272 
                                             %272 = OpLabel 
                                       f32_3 %276 = OpLoad %269 
                                                      OpStore %267 %276 
                                       f32_3 %277 = OpLoad %267 
                              Uniform f32_3* %279 = OpAccessChain %35 %278 
                                       f32_3 %280 = OpLoad %279 
                                       f32_3 %281 = OpFNegate %280 
                                       f32_3 %282 = OpFAdd %277 %281 
                                                      OpStore %267 %282 
                                       f32_3 %284 = OpLoad %267 
                              Uniform f32_3* %286 = OpAccessChain %35 %285 
                                       f32_3 %287 = OpLoad %286 
                                       f32_3 %288 = OpFMul %284 %287 
                                       f32_4 %289 = OpLoad %283 
                                       f32_4 %290 = OpVectorShuffle %289 %288 0 4 5 6 
                                                      OpStore %283 %290 
                                Private f32* %291 = OpAccessChain %283 %168 
                                         f32 %292 = OpLoad %291 
                                         f32 %294 = OpFMul %292 %293 
                                         f32 %296 = OpFAdd %294 %295 
                                Private f32* %297 = OpAccessChain %267 %74 
                                                      OpStore %297 %296 
                                Uniform f32* %299 = OpAccessChain %35 %222 %162 
                                         f32 %300 = OpLoad %299 
                                         f32 %302 = OpFMul %300 %301 
                                         f32 %303 = OpFAdd %302 %295 
                                                      OpStore %298 %303 
                                         f32 %304 = OpLoad %298 
                                Private f32* %305 = OpAccessChain %267 %74 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpExtInst %1 40 %304 %306 
                                Private f32* %308 = OpAccessChain %283 %74 
                                                      OpStore %308 %307 
                  read_only Texture3DSampled %313 = OpLoad %312 
                                       f32_4 %314 = OpLoad %283 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 2 3 
                                       f32_4 %316 = OpImageSampleImplicitLod %313 %315 
                                                      OpStore %283 %316 
                                       f32_4 %317 = OpLoad %283 
                                                      OpStore %83 %317 
                                                      OpBranch %234 
                                             %318 = OpLabel 
                                Private f32* %319 = OpAccessChain %83 %74 
                                                      OpStore %319 %106 
                                Private f32* %320 = OpAccessChain %83 %168 
                                                      OpStore %320 %106 
                                Private f32* %321 = OpAccessChain %83 %162 
                                                      OpStore %321 %106 
                                Private f32* %322 = OpAccessChain %83 %126 
                                                      OpStore %322 %106 
                                                      OpBranch %234 
                                             %234 = OpLabel 
                                       f32_4 %324 = OpLoad %83 
                              Uniform f32_4* %325 = OpAccessChain %35 %141 
                                       f32_4 %326 = OpLoad %325 
                                         f32 %327 = OpDot %324 %326 
                                Private f32* %328 = OpAccessChain %323 %74 
                                                      OpStore %328 %327 
                                Private f32* %329 = OpAccessChain %323 %74 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpExtInst %1 43 %330 %108 %106 
                                Private f32* %332 = OpAccessChain %323 %74 
                                                      OpStore %332 %331 
                                       f32_4 %334 = OpLoad %333 
                                       f32_2 %335 = OpVectorShuffle %334 %334 0 1 
                                       f32_4 %336 = OpLoad %333 
                                       f32_2 %337 = OpVectorShuffle %336 %336 3 3 
                                       f32_2 %338 = OpFDiv %335 %337 
                                       f32_3 %339 = OpLoad %267 
                                       f32_3 %340 = OpVectorShuffle %339 %338 3 4 2 
                                                      OpStore %267 %340 
                  read_only Texture2DSampled %343 = OpLoad %342 
                                       f32_3 %344 = OpLoad %267 
                                       f32_2 %345 = OpVectorShuffle %344 %344 0 1 
                                       f32_4 %346 = OpImageSampleImplicitLod %343 %345 
                                         f32 %347 = OpCompositeExtract %346 0 
                                                      OpStore %341 %347 
                                         f32 %349 = OpLoad %174 
                                         f32 %350 = OpLoad %341 
                                         f32 %351 = OpFAdd %349 %350 
                                Private f32* %352 = OpAccessChain %348 %74 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %348 %74 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpExtInst %1 43 %354 %108 %106 
                                Private f32* %356 = OpAccessChain %348 %74 
                                                      OpStore %356 %355 
                                Private f32* %357 = OpAccessChain %348 %74 
                                         f32 %358 = OpLoad %357 
                                Private f32* %359 = OpAccessChain %323 %74 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpExtInst %1 37 %358 %360 
                                Private f32* %362 = OpAccessChain %323 %74 
                                                      OpStore %362 %361 
                                        bool %364 = OpLoad %221 
                                                      OpSelectionMerge %366 None 
                                                      OpBranchConditional %364 %365 %369 
                                             %365 = OpLabel 
                                Private f32* %367 = OpAccessChain %323 %74 
                                         f32 %368 = OpLoad %367 
                                                      OpStore %363 %368 
                                                      OpBranch %366 
                                             %369 = OpLabel 
                                Private f32* %370 = OpAccessChain %348 %74 
                                         f32 %371 = OpLoad %370 
                                                      OpStore %363 %371 
                                                      OpBranch %366 
                                             %366 = OpLabel 
                                         f32 %372 = OpLoad %363 
                                Private f32* %373 = OpAccessChain %323 %74 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                              Uniform f32_4* %377 = OpAccessChain %35 %376 
                                       f32_4 %378 = OpLoad %377 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFMul %375 %379 
                                                      OpStore %348 %380 
                                       f32_3 %381 = OpLoad %323 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 0 0 
                                       f32_3 %383 = OpLoad %348 
                                       f32_3 %384 = OpFMul %382 %383 
                                                      OpStore %323 %384 
                                       f32_4 %385 = OpLoad %9 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_3 %388 = OpLoad %387 
                                       f32_3 %389 = OpFMul %386 %388 
                                       f32_3 %390 = OpLoad %323 
                                       f32_3 %391 = OpFAdd %389 %390 
                                                      OpStore %323 %391 
                                Private f32* %394 = OpAccessChain %9 %126 
                                         f32 %395 = OpLoad %394 
                                 Output f32* %397 = OpAccessChain %393 %126 
                                                      OpStore %397 %395 
                                       f32_4 %398 = OpLoad %27 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                         f32 %400 = OpLoad %100 
                                       f32_3 %401 = OpCompositeConstruct %400 %400 %400 
                                       f32_3 %402 = OpFMul %399 %401 
                                       f32_3 %403 = OpLoad %323 
                                       f32_3 %404 = OpFAdd %402 %403 
                                                      OpStore %323 %404 
                                Private f32* %406 = OpAccessChain %323 %168 
                                         f32 %407 = OpLoad %406 
                                Private f32* %408 = OpAccessChain %323 %162 
                                         f32 %409 = OpLoad %408 
                                        bool %410 = OpFOrdGreaterThanEqual %407 %409 
                                                      OpStore %405 %410 
                                        bool %413 = OpLoad %405 
                                                      OpSelectionMerge %415 None 
                                                      OpBranchConditional %413 %414 %416 
                                             %414 = OpLabel 
                                                      OpStore %412 %106 
                                                      OpBranch %415 
                                             %416 = OpLabel 
                                                      OpStore %412 %108 
                                                      OpBranch %415 
                                             %415 = OpLabel 
                                         f32 %417 = OpLoad %412 
                                                      OpStore %411 %417 
                                       f32_3 %418 = OpLoad %323 
                                       f32_2 %419 = OpVectorShuffle %418 %418 2 1 
                                       f32_2 %420 = OpFNegate %419 
                                       f32_3 %421 = OpLoad %323 
                                       f32_2 %422 = OpVectorShuffle %421 %421 1 2 
                                       f32_2 %423 = OpFAdd %420 %422 
                                       f32_3 %424 = OpLoad %23 
                                       f32_3 %425 = OpVectorShuffle %424 %423 3 4 2 
                                                      OpStore %23 %425 
                                Private f32* %428 = OpAccessChain %427 %74 
                                                      OpStore %428 %106 
                                Private f32* %430 = OpAccessChain %427 %168 
                                                      OpStore %430 %429 
                                         f32 %431 = OpLoad %411 
                                       f32_2 %432 = OpCompositeConstruct %431 %431 
                                       f32_3 %433 = OpLoad %23 
                                       f32_2 %434 = OpVectorShuffle %433 %433 0 1 
                                       f32_2 %435 = OpFMul %432 %434 
                                       f32_3 %436 = OpLoad %323 
                                       f32_2 %437 = OpVectorShuffle %436 %436 2 1 
                                       f32_2 %438 = OpFAdd %435 %437 
                                       f32_4 %439 = OpLoad %283 
                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 2 3 
                                                      OpStore %283 %440 
                                         f32 %441 = OpLoad %411 
                                       f32_2 %442 = OpCompositeConstruct %441 %441 
                                       f32_2 %443 = OpLoad %427 
                                       f32_2 %444 = OpFMul %442 %443 
                                       f32_2 %447 = OpFAdd %444 %446 
                                       f32_4 %448 = OpLoad %283 
                                       f32_4 %449 = OpVectorShuffle %448 %447 0 1 4 5 
                                                      OpStore %283 %449 
                                Private f32* %450 = OpAccessChain %323 %74 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %283 %74 
                                         f32 %453 = OpLoad %452 
                                        bool %454 = OpFOrdGreaterThanEqual %451 %453 
                                                      OpStore %405 %454 
                                        bool %456 = OpLoad %405 
                                                      OpSelectionMerge %458 None 
                                                      OpBranchConditional %456 %457 %459 
                                             %457 = OpLabel 
                                                      OpStore %455 %106 
                                                      OpBranch %458 
                                             %459 = OpLabel 
                                                      OpStore %455 %108 
                                                      OpBranch %458 
                                             %458 = OpLabel 
                                         f32 %460 = OpLoad %455 
                                                      OpStore %411 %460 
                                       f32_4 %461 = OpLoad %283 
                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 3 
                                       f32_3 %463 = OpFNegate %462 
                                       f32_4 %464 = OpLoad %27 
                                       f32_4 %465 = OpVectorShuffle %464 %463 4 5 6 3 
                                                      OpStore %27 %465 
                                Private f32* %466 = OpAccessChain %323 %74 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFNegate %467 
                                Private f32* %469 = OpAccessChain %27 %126 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %27 %74 
                                         f32 %471 = OpLoad %470 
                                Private f32* %472 = OpAccessChain %323 %74 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpFAdd %471 %473 
                                Private f32* %475 = OpAccessChain %149 %74 
                                                      OpStore %475 %474 
                                       f32_4 %476 = OpLoad %27 
                                       f32_3 %477 = OpVectorShuffle %476 %476 1 2 3 
                                       f32_4 %478 = OpLoad %283 
                                       f32_3 %479 = OpVectorShuffle %478 %478 1 2 0 
                                       f32_3 %480 = OpFAdd %477 %479 
                                       f32_4 %481 = OpLoad %149 
                                       f32_4 %482 = OpVectorShuffle %481 %480 0 4 5 6 
                                                      OpStore %149 %482 
                                         f32 %483 = OpLoad %411 
                                       f32_3 %484 = OpCompositeConstruct %483 %483 %483 
                                       f32_4 %485 = OpLoad %149 
                                       f32_3 %486 = OpVectorShuffle %485 %485 0 1 2 
                                       f32_3 %487 = OpFMul %484 %486 
                                       f32_4 %488 = OpLoad %283 
                                       f32_3 %489 = OpVectorShuffle %488 %488 0 1 3 
                                       f32_3 %490 = OpFAdd %487 %489 
                                       f32_4 %491 = OpLoad %27 
                                       f32_4 %492 = OpVectorShuffle %491 %490 4 5 6 3 
                                                      OpStore %27 %492 
                                         f32 %493 = OpLoad %411 
                                Private f32* %494 = OpAccessChain %149 %126 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpFMul %493 %495 
                                Private f32* %497 = OpAccessChain %323 %74 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpFAdd %496 %498 
                                                      OpStore %411 %499 
                                Private f32* %500 = OpAccessChain %27 %168 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpLoad %411 
                                         f32 %503 = OpExtInst %1 37 %501 %502 
                                                      OpStore %100 %503 
                                         f32 %504 = OpLoad %100 
                                         f32 %505 = OpFNegate %504 
                                Private f32* %506 = OpAccessChain %27 %74 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpFAdd %505 %507 
                                                      OpStore %100 %508 
                                Private f32* %509 = OpAccessChain %27 %168 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFNegate %510 
                                         f32 %512 = OpLoad %411 
                                         f32 %513 = OpFAdd %511 %512 
                                                      OpStore %411 %513 
                                         f32 %515 = OpLoad %100 
                                         f32 %517 = OpFMul %515 %516 
                                         f32 %519 = OpFAdd %517 %518 
                                                      OpStore %514 %519 
                                         f32 %520 = OpLoad %411 
                                         f32 %521 = OpLoad %514 
                                         f32 %522 = OpFDiv %520 %521 
                                                      OpStore %411 %522 
                                         f32 %523 = OpLoad %411 
                                Private f32* %524 = OpAccessChain %27 %162 
                                         f32 %525 = OpLoad %524 
                                         f32 %526 = OpFAdd %523 %525 
                                                      OpStore %411 %526 
                                Private f32* %527 = OpAccessChain %27 %74 
                                         f32 %528 = OpLoad %527 
                                         f32 %529 = OpFAdd %528 %518 
                                                      OpStore %514 %529 
                                         f32 %530 = OpLoad %100 
                                         f32 %531 = OpLoad %514 
                                         f32 %532 = OpFDiv %530 %531 
                                                      OpStore %514 %532 
                                Private f32* %534 = OpAccessChain %9 %168 
                                         f32 %535 = OpLoad %534 
                                Private f32* %536 = OpAccessChain %9 %162 
                                         f32 %537 = OpLoad %536 
                                        bool %538 = OpFOrdGreaterThanEqual %535 %537 
                                                      OpStore %533 %538 
                                        bool %540 = OpLoad %533 
                                                      OpSelectionMerge %542 None 
                                                      OpBranchConditional %540 %541 %543 
                                             %541 = OpLabel 
                                                      OpStore %539 %106 
                                                      OpBranch %542 
                                             %543 = OpLabel 
                                                      OpStore %539 %108 
                                                      OpBranch %542 
                                             %542 = OpLabel 
                                         f32 %544 = OpLoad %539 
                                Private f32* %545 = OpAccessChain %427 %74 
                                                      OpStore %545 %544 
                                Private f32* %547 = OpAccessChain %9 %162 
                                         f32 %548 = OpLoad %547 
                                         f32 %549 = OpFNegate %548 
                                Private f32* %550 = OpAccessChain %9 %168 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpFAdd %549 %551 
                                                      OpStore %546 %552 
                                Private f32* %554 = OpAccessChain %427 %74 
                                         f32 %555 = OpLoad %554 
                                         f32 %556 = OpLoad %546 
                                         f32 %557 = OpFMul %555 %556 
                                Private f32* %558 = OpAccessChain %9 %162 
                                         f32 %559 = OpLoad %558 
                                         f32 %560 = OpFAdd %557 %559 
                                Private f32* %561 = OpAccessChain %553 %74 
                                                      OpStore %561 %560 
                                Private f32* %563 = OpAccessChain %9 %74 
                                         f32 %564 = OpLoad %563 
                                Private f32* %565 = OpAccessChain %553 %74 
                                         f32 %566 = OpLoad %565 
                                        bool %567 = OpFOrdGreaterThanEqual %564 %566 
                                                      OpStore %562 %567 
                                        bool %570 = OpLoad %562 
                                                      OpSelectionMerge %572 None 
                                                      OpBranchConditional %570 %571 %573 
                                             %571 = OpLabel 
                                                      OpStore %569 %106 
                                                      OpBranch %572 
                                             %573 = OpLabel 
                                                      OpStore %569 %108 
                                                      OpBranch %572 
                                             %572 = OpLabel 
                                         f32 %574 = OpLoad %569 
                                                      OpStore %568 %574 
                                Private f32* %576 = OpAccessChain %553 %74 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpFNegate %577 
                                Private f32* %579 = OpAccessChain %9 %74 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFAdd %578 %580 
                                Private f32* %582 = OpAccessChain %575 %74 
                                                      OpStore %582 %581 
                                         f32 %583 = OpLoad %568 
                                Private f32* %584 = OpAccessChain %575 %74 
                                         f32 %585 = OpLoad %584 
                                         f32 %586 = OpFMul %583 %585 
                                Private f32* %587 = OpAccessChain %553 %74 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpFAdd %586 %588 
                                Private f32* %590 = OpAccessChain %575 %74 
                                                      OpStore %590 %589 
                                Private f32* %591 = OpAccessChain %575 %74 
                                         f32 %592 = OpLoad %591 
                                Uniform f32* %594 = OpAccessChain %35 %593 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpFMul %592 %595 
                                Private f32* %597 = OpAccessChain %553 %74 
                                                      OpStore %597 %596 
                                Private f32* %598 = OpAccessChain %553 %74 
                                         f32 %599 = OpLoad %598 
                                Private f32* %600 = OpAccessChain %27 %74 
                                         f32 %601 = OpLoad %600 
                                         f32 %602 = OpExtInst %1 40 %599 %601 
                                Private f32* %603 = OpAccessChain %553 %74 
                                                      OpStore %603 %602 
                                       f32_3 %604 = OpLoad %120 
                                         f32 %605 = OpDot %604 %89 
                                Private f32* %606 = OpAccessChain %323 %74 
                                                      OpStore %606 %605 
                                Private f32* %607 = OpAccessChain %323 %74 
                                         f32 %608 = OpLoad %607 
                                         f32 %610 = OpFMul %608 %609 
                                Private f32* %611 = OpAccessChain %575 %74 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFAdd %610 %612 
                                Private f32* %614 = OpAccessChain %575 %74 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %575 %74 
                                         f32 %616 = OpLoad %615 
                                Uniform f32* %618 = OpAccessChain %35 %617 
                                         f32 %619 = OpLoad %618 
                                         f32 %620 = OpFMul %616 %619 
                                Private f32* %621 = OpAccessChain %575 %74 
                                                      OpStore %621 %620 
                                Private f32* %622 = OpAccessChain %575 %74 
                                         f32 %623 = OpLoad %622 
                                Private f32* %624 = OpAccessChain %553 %74 
                                         f32 %625 = OpLoad %624 
                                         f32 %626 = OpExtInst %1 37 %623 %625 
                                Private f32* %627 = OpAccessChain %575 %74 
                                                      OpStore %627 %626 
                                         f32 %628 = OpLoad %411 
                                       f32_3 %629 = OpCompositeConstruct %628 %628 %628 
                                       f32_3 %630 = OpExtInst %1 4 %629 
                                       f32_3 %633 = OpFAdd %630 %632 
                                                      OpStore %553 %633 
                                       f32_3 %634 = OpLoad %553 
                                       f32_3 %635 = OpExtInst %1 10 %634 
                                                      OpStore %553 %635 
                                       f32_3 %636 = OpLoad %553 
                                       f32_3 %638 = OpFMul %636 %637 
                                       f32_3 %641 = OpFAdd %638 %640 
                                                      OpStore %553 %641 
                                       f32_3 %642 = OpLoad %553 
                                       f32_3 %643 = OpExtInst %1 4 %642 
                                       f32_3 %645 = OpFAdd %643 %644 
                                                      OpStore %553 %645 
                                       f32_3 %646 = OpLoad %553 
                                       f32_3 %647 = OpCompositeConstruct %108 %108 %108 
                                       f32_3 %648 = OpCompositeConstruct %106 %106 %106 
                                       f32_3 %649 = OpExtInst %1 43 %646 %647 %648 
                                                      OpStore %553 %649 
                                       f32_3 %650 = OpLoad %553 
                                       f32_3 %651 = OpFAdd %650 %644 
                                                      OpStore %553 %651 
                                         f32 %652 = OpLoad %514 
                                       f32_3 %653 = OpCompositeConstruct %652 %652 %652 
                                       f32_3 %654 = OpLoad %553 
                                       f32_3 %655 = OpFMul %653 %654 
                                       f32_3 %657 = OpFAdd %655 %656 
                                                      OpStore %553 %657 
                                       f32_3 %658 = OpLoad %553 
                                       f32_3 %659 = OpLoad %575 
                                       f32_3 %660 = OpVectorShuffle %659 %659 0 0 0 
                                       f32_3 %661 = OpFMul %658 %660 
                                                      OpStore %575 %661 
                                       f32_3 %662 = OpLoad %575 
                                       f32_4 %663 = OpLoad %393 
                                       f32_4 %664 = OpVectorShuffle %663 %662 4 5 6 3 
                                                      OpStore %393 %664 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _EmissiveMap_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _EmissiveMap_ST.xy + _EmissiveMap_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _EmissiveGlowToggle;
uniform 	float _ValueMaximum;
uniform 	float _ValueMinimum;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _EmissiveMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat16_6;
float u_xlat7;
float u_xlat9;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat16_19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1.xyz = log2(u_xlat10_0.xyz);
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10_2 = texture(_EmissiveMap, vs_TEXCOORD0.zw);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xxx;
    u_xlat16_19 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlatb2 = _EmissiveGlowToggle>=0.100000001;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat16_19 = (-u_xlat16_19) + 0.100000024;
    u_xlat19 = u_xlat2.x * u_xlat16_19 + 1.0;
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat20 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb20 = u_xlat20<0.0;
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb20){
        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb20)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat20 = u_xlat3.y * 0.25 + 0.75;
        u_xlat9 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat20, u_xlat9);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat20 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat3.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat20) * u_xlat4.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.w = u_xlat10_0.w;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat1.xyw = u_xlat1.yzx * vec3(u_xlat19) + u_xlat3.yzx;
    u_xlatb18 = u_xlat1.x>=u_xlat1.y;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat1.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.xy + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat18) * u_xlat5 + u_xlat4;
    u_xlatb18 = u_xlat1.w>=u_xlat4.x;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat1.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat1.wyx;
    u_xlat4 = (-u_xlat1) + u_xlat4;
    u_xlat1 = vec4(u_xlat18) * u_xlat4 + u_xlat1;
    u_xlat18 = min(u_xlat1.y, u_xlat1.w);
    u_xlat18 = (-u_xlat18) + u_xlat1.x;
    u_xlat7 = (-u_xlat1.y) + u_xlat1.w;
    u_xlat19 = u_xlat18 * 6.0 + 1.00000001e-010;
    u_xlat7 = u_xlat7 / u_xlat19;
    u_xlat7 = u_xlat7 + u_xlat1.z;
    u_xlat13 = u_xlat1.x + 1.00000001e-010;
    u_xlat18 = u_xlat18 / u_xlat13;
    u_xlatb13 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat16_6 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat6.x = u_xlat13 * u_xlat16_6 + u_xlat10_0.z;
    u_xlatb12 = u_xlat10_0.x>=u_xlat6.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat6.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat12 * u_xlat0 + u_xlat6.x;
    u_xlat6.x = u_xlat0 * _ValueMinimum;
    u_xlat6.x = max(u_xlat6.x, u_xlat1.x);
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0 = u_xlat12 * 50.0 + u_xlat0;
    u_xlat0 = u_xlat0 * _ValueMaximum;
    u_xlat0 = min(u_xlat0, u_xlat6.x);
    u_xlat1.xyz = abs(vec3(u_xlat7)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat6.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat3.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 300
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %85 %95 %96 %111 %127 %166 %169 %172 %290 %293 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %111 Location 111 
                                                      OpDecorate %127 Location 127 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %290 Location 290 
                                                      OpDecorate %293 Location 293 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %18 %19 %20 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 5 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 7 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                Output f32_4* %95 = OpVariable Output 
                                 Input f32_4* %96 = OpVariable Input 
                                              %97 = OpTypeVector %6 2 
                                         i32 %100 = OpConstant 8 
                                Input f32_4* %111 = OpVariable Input 
                                         i32 %114 = OpConstant 9 
                                             %125 = OpTypeVector %6 3 
                                             %126 = OpTypePointer Input %125 
                                Input f32_3* %127 = OpVariable Input 
                                         i32 %129 = OpConstant 6 
                                         u32 %134 = OpConstant 0 
                                             %135 = OpTypePointer Private %6 
                                         u32 %148 = OpConstant 2 
                                Private f32* %150 = OpVariable Private 
                                             %165 = OpTypePointer Output %125 
                               Output f32_3* %166 = OpVariable Output 
                               Output f32_3* %169 = OpVariable Output 
                               Output f32_4* %172 = OpVariable Output 
                              Private f32_4* %180 = OpVariable Private 
                              Private f32_4* %188 = OpVariable Private 
                                         f32 %224 = OpConstant 3.674022E-40 
                                       f32_4 %225 = OpConstantComposite %224 %224 %224 %224 
                                         f32 %233 = OpConstant 3.674022E-40 
                                       f32_4 %234 = OpConstantComposite %233 %233 %233 %233 
                                         f32 %242 = OpConstant 3.674022E-40 
                                       f32_4 %243 = OpConstantComposite %242 %242 %242 %242 
                                         i32 %250 = OpConstant 4 
                               Output f32_3* %290 = OpVariable Output 
                               Output f32_4* %293 = OpVariable Output 
                                             %294 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %86 = OpAccessChain %23 %63 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %60 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %31 
                                                      OpStore %94 %92 
                                        f32_4 %98 = OpLoad %96 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                              Uniform f32_4* %101 = OpAccessChain %23 %100 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %99 %103 
                              Uniform f32_4* %105 = OpAccessChain %23 %100 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                       f32_4 %109 = OpLoad %95 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 2 3 
                                                      OpStore %95 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 0 1 
                              Uniform f32_4* %115 = OpAccessChain %23 %114 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_2 %118 = OpFMul %113 %117 
                              Uniform f32_4* %119 = OpAccessChain %23 %114 
                                       f32_4 %120 = OpLoad %119 
                                       f32_2 %121 = OpVectorShuffle %120 %120 2 3 
                                       f32_2 %122 = OpFAdd %118 %121 
                                       f32_4 %123 = OpLoad %95 
                                       f32_4 %124 = OpVectorShuffle %123 %122 0 1 4 5 
                                                      OpStore %95 %124 
                                       f32_3 %128 = OpLoad %127 
                              Uniform f32_4* %130 = OpAccessChain %23 %129 %31 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %128 %132 
                                Private f32* %136 = OpAccessChain %47 %134 
                                                      OpStore %136 %133 
                                       f32_3 %137 = OpLoad %127 
                              Uniform f32_4* %138 = OpAccessChain %23 %129 %26 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %137 %140 
                                Private f32* %142 = OpAccessChain %47 %81 
                                                      OpStore %142 %141 
                                       f32_3 %143 = OpLoad %127 
                              Uniform f32_4* %144 = OpAccessChain %23 %129 %39 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                         f32 %147 = OpDot %143 %146 
                                Private f32* %149 = OpAccessChain %47 %148 
                                                      OpStore %149 %147 
                                       f32_4 %151 = OpLoad %47 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_4 %153 = OpLoad %47 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                         f32 %155 = OpDot %152 %154 
                                                      OpStore %150 %155 
                                         f32 %156 = OpLoad %150 
                                         f32 %157 = OpExtInst %1 32 %156 
                                                      OpStore %150 %157 
                                         f32 %158 = OpLoad %150 
                                       f32_3 %159 = OpCompositeConstruct %158 %158 %158 
                                       f32_4 %160 = OpLoad %47 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %47 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %47 %164 
                                       f32_4 %167 = OpLoad %47 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                                      OpStore %166 %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                                      OpStore %169 %171 
                                       f32_4 %173 = OpLoad %9 
                                                      OpStore %172 %173 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %174 1 1 1 1 
                                       f32_4 %176 = OpFNegate %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %26 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %60 %179 
                                       f32_4 %181 = OpLoad %47 
                                       f32_4 %182 = OpVectorShuffle %181 %181 1 1 1 1 
                                       f32_4 %183 = OpLoad %60 
                                       f32_4 %184 = OpFMul %182 %183 
                                                      OpStore %180 %184 
                                       f32_4 %185 = OpLoad %60 
                                       f32_4 %186 = OpLoad %60 
                                       f32_4 %187 = OpFMul %185 %186 
                                                      OpStore %60 %187 
                                       f32_4 %189 = OpLoad %9 
                                       f32_4 %190 = OpVectorShuffle %189 %189 0 0 0 0 
                                       f32_4 %191 = OpFNegate %190 
                              Uniform f32_4* %192 = OpAccessChain %23 %31 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpFAdd %191 %193 
                                                      OpStore %188 %194 
                                       f32_4 %195 = OpLoad %9 
                                       f32_4 %196 = OpVectorShuffle %195 %195 2 2 2 2 
                                       f32_4 %197 = OpFNegate %196 
                              Uniform f32_4* %198 = OpAccessChain %23 %39 
                                       f32_4 %199 = OpLoad %198 
                                       f32_4 %200 = OpFAdd %197 %199 
                                                      OpStore %9 %200 
                                       f32_4 %201 = OpLoad %188 
                                       f32_4 %202 = OpLoad %47 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 0 0 0 
                                       f32_4 %204 = OpFMul %201 %203 
                                       f32_4 %205 = OpLoad %180 
                                       f32_4 %206 = OpFAdd %204 %205 
                                                      OpStore %180 %206 
                                       f32_4 %207 = OpLoad %9 
                                       f32_4 %208 = OpLoad %47 
                                       f32_4 %209 = OpVectorShuffle %208 %208 2 2 2 2 
                                       f32_4 %210 = OpFMul %207 %209 
                                       f32_4 %211 = OpLoad %180 
                                       f32_4 %212 = OpFAdd %210 %211 
                                                      OpStore %47 %212 
                                       f32_4 %213 = OpLoad %188 
                                       f32_4 %214 = OpLoad %188 
                                       f32_4 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %60 
                                       f32_4 %217 = OpFAdd %215 %216 
                                                      OpStore %60 %217 
                                       f32_4 %218 = OpLoad %9 
                                       f32_4 %219 = OpLoad %9 
                                       f32_4 %220 = OpFMul %218 %219 
                                       f32_4 %221 = OpLoad %60 
                                       f32_4 %222 = OpFAdd %220 %221 
                                                      OpStore %9 %222 
                                       f32_4 %223 = OpLoad %9 
                                       f32_4 %226 = OpExtInst %1 40 %223 %225 
                                                      OpStore %9 %226 
                                       f32_4 %227 = OpLoad %9 
                                       f32_4 %228 = OpExtInst %1 32 %227 
                                                      OpStore %60 %228 
                                       f32_4 %229 = OpLoad %9 
                              Uniform f32_4* %230 = OpAccessChain %23 %49 
                                       f32_4 %231 = OpLoad %230 
                                       f32_4 %232 = OpFMul %229 %231 
                                       f32_4 %235 = OpFAdd %232 %234 
                                                      OpStore %9 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_4 %237 = OpFDiv %234 %236 
                                                      OpStore %9 %237 
                                       f32_4 %238 = OpLoad %47 
                                       f32_4 %239 = OpLoad %60 
                                       f32_4 %240 = OpFMul %238 %239 
                                                      OpStore %47 %240 
                                       f32_4 %241 = OpLoad %47 
                                       f32_4 %244 = OpExtInst %1 40 %241 %243 
                                                      OpStore %47 %244 
                                       f32_4 %245 = OpLoad %9 
                                       f32_4 %246 = OpLoad %47 
                                       f32_4 %247 = OpFMul %245 %246 
                                                      OpStore %9 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 1 1 1 
                              Uniform f32_4* %251 = OpAccessChain %23 %250 %26 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                       f32_3 %254 = OpFMul %249 %253 
                                       f32_4 %255 = OpLoad %47 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 6 3 
                                                      OpStore %47 %256 
                              Uniform f32_4* %257 = OpAccessChain %23 %250 %31 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_4 %260 = OpLoad %9 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 0 0 
                                       f32_3 %262 = OpFMul %259 %261 
                                       f32_4 %263 = OpLoad %47 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFAdd %262 %264 
                                       f32_4 %266 = OpLoad %47 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %47 %267 
                              Uniform f32_4* %268 = OpAccessChain %23 %250 %39 
                                       f32_4 %269 = OpLoad %268 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %9 
                                       f32_3 %272 = OpVectorShuffle %271 %271 2 2 2 
                                       f32_3 %273 = OpFMul %270 %272 
                                       f32_4 %274 = OpLoad %47 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_3 %276 = OpFAdd %273 %275 
                                       f32_4 %277 = OpLoad %9 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 6 3 
                                                      OpStore %9 %278 
                              Uniform f32_4* %279 = OpAccessChain %23 %250 %49 
                                       f32_4 %280 = OpLoad %279 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_4 %282 = OpLoad %9 
                                       f32_3 %283 = OpVectorShuffle %282 %282 3 3 3 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_4 %285 = OpLoad %9 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFAdd %284 %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %9 %289 
                                       f32_4 %291 = OpLoad %9 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                                      OpStore %290 %292 
                                                      OpStore %293 %243 
                                 Output f32* %295 = OpAccessChain %85 %31 %81 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpFNegate %296 
                                 Output f32* %298 = OpAccessChain %85 %31 %81 
                                                      OpStore %298 %297 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 574
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %166 %295 %301 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %31 ArrayStride 31 
                                                      OpMemberDecorate %32 0 RelaxedPrecision 
                                                      OpMemberDecorate %32 0 Offset 32 
                                                      OpMemberDecorate %32 1 Offset 32 
                                                      OpMemberDecorate %32 2 Offset 32 
                                                      OpMemberDecorate %32 3 Offset 32 
                                                      OpMemberDecorate %32 4 Offset 32 
                                                      OpMemberDecorate %32 5 RelaxedPrecision 
                                                      OpMemberDecorate %32 5 Offset 32 
                                                      OpMemberDecorate %32 6 Offset 32 
                                                      OpMemberDecorate %32 7 Offset 32 
                                                      OpMemberDecorate %32 8 Offset 32 
                                                      OpMemberDecorate %32 9 Offset 32 
                                                      OpMemberDecorate %32 10 Offset 32 
                                                      OpMemberDecorate %32 11 RelaxedPrecision 
                                                      OpMemberDecorate %32 11 Offset 32 
                                                      OpDecorate %32 Block 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %68 DescriptorSet 68 
                                                      OpDecorate %68 Binding 68 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %157 SpecId 157 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %260 DescriptorSet 260 
                                                      OpDecorate %260 Binding 260 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %295 Location 295 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %301 Location 301 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
                               Private f32_4* %27 = OpVariable Private 
                                              %29 = OpTypeInt 32 0 
                                          u32 %30 = OpConstant 4 
                                              %31 = OpTypeArray %7 %30 
                                              %32 = OpTypeStruct %7 %7 %31 %21 %21 %7 %6 %6 %6 %6 %6 %6 
                                              %33 = OpTypePointer Uniform %32 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32;}* %34 = OpVariable Uniform 
                                              %35 = OpTypeInt 32 1 
                                          i32 %36 = OpConstant 7 
                                              %37 = OpTypePointer Uniform %6 
                                          i32 %59 = OpConstant 6 
                                              %66 = OpTypePointer Private %6 
                                 Private f32* %67 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %68 = OpVariable UniformConstant 
                                          u32 %73 = OpConstant 0 
                               Private f32_4* %82 = OpVariable Private 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %87 = OpConstant 3.674022E-40 
                                        f32_3 %88 = OpConstantComposite %85 %86 %87 
                                              %91 = OpTypeBool 
                                              %92 = OpTypePointer Private %91 
                                Private bool* %93 = OpVariable Private 
                                          i32 %94 = OpConstant 8 
                                          f32 %97 = OpConstant 3.674022E-40 
                                 Private f32* %99 = OpVariable Private 
                                             %100 = OpTypePointer Function %6 
                                         f32 %105 = OpConstant 3.674022E-40 
                                         f32 %107 = OpConstant 3.674022E-40 
                                Private f32* %109 = OpVariable Private 
                                         f32 %113 = OpConstant 3.674022E-40 
                              Private f32_3* %119 = OpVariable Private 
                                         u32 %125 = OpConstant 3 
                                         i32 %128 = OpConstant 11 
                               Private bool* %134 = OpVariable Private 
                                         i32 %139 = OpConstant 0 
                                         i32 %140 = OpConstant 1 
                                         i32 %142 = OpConstant -1 
                                        bool %151 = OpConstantFalse 
                                        bool %157 = OpSpecConstantFalse 
                                         u32 %160 = OpConstant 1 
                              Private f32_4* %164 = OpVariable Private 
                                             %165 = OpTypePointer Input %21 
                                Input f32_3* %166 = OpVariable Input 
                                         i32 %169 = OpConstant 2 
                                             %170 = OpTypePointer Uniform %7 
                                         i32 %201 = OpConstant 3 
                                             %208 = OpTypePointer Function %21 
                                         i32 %222 = OpConstant 4 
                                             %223 = OpTypePointer Uniform %21 
                              Private f32_4* %230 = OpVariable Private 
                                Private f32* %238 = OpVariable Private 
                                         f32 %241 = OpConstant 3.674022E-40 
                                         f32 %243 = OpConstant 3.674022E-40 
                                         u32 %245 = OpConstant 2 
                                         f32 %248 = OpConstant 3.674022E-40 
                                             %257 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %258 = OpTypeSampledImage %257 
                                             %259 = OpTypePointer UniformConstant %258 
 UniformConstant read_only Texture3DSampled* %260 = OpVariable UniformConstant 
                              Private f32_3* %271 = OpVariable Private 
                              Private f32_3* %281 = OpVariable Private 
                                         i32 %284 = OpConstant 5 
                                Input f32_3* %295 = OpVariable Input 
                                             %300 = OpTypePointer Output %7 
                               Output f32_4* %301 = OpVariable Output 
                                             %304 = OpTypePointer Output %6 
                               Private bool* %313 = OpVariable Private 
                                Private f32* %319 = OpVariable Private 
                                             %334 = OpTypePointer Private %17 
                              Private f32_2* %335 = OpVariable Private 
                                         f32 %337 = OpConstant 3.674022E-40 
                                         f32 %353 = OpConstant 3.674022E-40 
                                       f32_2 %354 = OpConstantComposite %337 %353 
                                Private f32* %422 = OpVariable Private 
                                         f32 %424 = OpConstant 3.674022E-40 
                                         f32 %426 = OpConstant 3.674022E-40 
                               Private bool* %441 = OpVariable Private 
                                Private f32* %454 = OpVariable Private 
                              Private f32_3* %461 = OpVariable Private 
                               Private bool* %470 = OpVariable Private 
                                Private f32* %476 = OpVariable Private 
                              Private f32_3* %483 = OpVariable Private 
                                         i32 %501 = OpConstant 10 
                                         f32 %517 = OpConstant 3.674022E-40 
                                         i32 %525 = OpConstant 9 
                                         f32 %539 = OpConstant 3.674022E-40 
                                       f32_3 %540 = OpConstantComposite %105 %353 %539 
                                       f32_3 %545 = OpConstantComposite %424 %424 %424 
                                         f32 %547 = OpConstant 3.674022E-40 
                                       f32_3 %548 = OpConstantComposite %547 %547 %547 
                                       f32_3 %552 = OpConstantComposite %337 %337 %337 
                                       f32_3 %564 = OpConstantComposite %105 %105 %105 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %101 = OpVariable Function 
                             Function f32_3* %209 = OpVariable Function 
                               Function f32* %320 = OpVariable Function 
                               Function f32* %363 = OpVariable Function 
                               Function f32* %447 = OpVariable Function 
                               Function f32* %477 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                                        f32_4 %24 = OpLoad %9 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpExtInst %1 30 %25 
                                                      OpStore %23 %26 
                                        f32_3 %28 = OpLoad %23 
                                 Uniform f32* %38 = OpAccessChain %34 %36 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %34 %36 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %34 %36 
                                          f32 %43 = OpLoad %42 
                                        f32_3 %44 = OpCompositeConstruct %39 %41 %43 
                                          f32 %45 = OpCompositeExtract %44 0 
                                          f32 %46 = OpCompositeExtract %44 1 
                                          f32 %47 = OpCompositeExtract %44 2 
                                        f32_3 %48 = OpCompositeConstruct %45 %46 %47 
                                        f32_3 %49 = OpFMul %28 %48 
                                        f32_4 %50 = OpLoad %27 
                                        f32_4 %51 = OpVectorShuffle %50 %49 4 5 6 3 
                                                      OpStore %27 %51 
                                        f32_4 %52 = OpLoad %27 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpExtInst %1 29 %53 
                                        f32_4 %55 = OpLoad %27 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %27 %56 
                                        f32_4 %57 = OpLoad %27 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                                 Uniform f32* %60 = OpAccessChain %34 %59 
                                          f32 %61 = OpLoad %60 
                                        f32_3 %62 = OpCompositeConstruct %61 %61 %61 
                                        f32_3 %63 = OpFMul %58 %62 
                                        f32_4 %64 = OpLoad %27 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %27 %65 
                   read_only Texture2DSampled %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %16 
                                        f32_2 %71 = OpVectorShuffle %70 %70 2 3 
                                        f32_4 %72 = OpImageSampleImplicitLod %69 %71 
                                          f32 %74 = OpCompositeExtract %72 0 
                                                      OpStore %67 %74 
                                          f32 %75 = OpLoad %67 
                                        f32_3 %76 = OpCompositeConstruct %75 %75 %75 
                                        f32_4 %77 = OpLoad %27 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %27 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %27 %81 
                                        f32_4 %83 = OpLoad %9 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                          f32 %89 = OpDot %84 %88 
                                 Private f32* %90 = OpAccessChain %82 %73 
                                                      OpStore %90 %89 
                                 Uniform f32* %95 = OpAccessChain %34 %94 
                                          f32 %96 = OpLoad %95 
                                         bool %98 = OpFOrdGreaterThanEqual %96 %97 
                                                      OpStore %93 %98 
                                        bool %102 = OpLoad %93 
                                                      OpSelectionMerge %104 None 
                                                      OpBranchConditional %102 %103 %106 
                                             %103 = OpLabel 
                                                      OpStore %101 %105 
                                                      OpBranch %104 
                                             %106 = OpLabel 
                                                      OpStore %101 %107 
                                                      OpBranch %104 
                                             %104 = OpLabel 
                                         f32 %108 = OpLoad %101 
                                                      OpStore %99 %108 
                                Private f32* %110 = OpAccessChain %82 %73 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpFNegate %111 
                                         f32 %114 = OpFAdd %112 %113 
                                                      OpStore %109 %114 
                                         f32 %115 = OpLoad %99 
                                         f32 %116 = OpLoad %109 
                                         f32 %117 = OpFMul %115 %116 
                                         f32 %118 = OpFAdd %117 %105 
                                                      OpStore %99 %118 
                                         f32 %120 = OpLoad %99 
                                       f32_3 %121 = OpCompositeConstruct %120 %120 %120 
                                       f32_4 %122 = OpLoad %27 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                                      OpStore %119 %124 
                                Private f32* %126 = OpAccessChain %9 %125 
                                         f32 %127 = OpLoad %126 
                                Uniform f32* %129 = OpAccessChain %34 %128 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFNegate %130 
                                         f32 %132 = OpFAdd %127 %131 
                                Private f32* %133 = OpAccessChain %82 %73 
                                                      OpStore %133 %132 
                                Private f32* %135 = OpAccessChain %82 %73 
                                         f32 %136 = OpLoad %135 
                                        bool %137 = OpFOrdLessThan %136 %107 
                                                      OpStore %134 %137 
                                        bool %138 = OpLoad %134 
                                         i32 %141 = OpSelect %138 %140 %139 
                                         i32 %143 = OpIMul %141 %142 
                                        bool %144 = OpINotEqual %143 %139 
                                                      OpSelectionMerge %146 None 
                                                      OpBranchConditional %144 %145 %146 
                                             %145 = OpLabel 
                                                      OpKill
                                             %146 = OpLabel 
                                Uniform f32* %148 = OpAccessChain %34 %140 %73 
                                         f32 %149 = OpLoad %148 
                                        bool %150 = OpFOrdEqual %149 %105 
                                                      OpStore %134 %150 
                                                      OpSelectionMerge %153 None 
                                                      OpBranchConditional %151 %152 %153 
                                             %152 = OpLabel 
                                        bool %154 = OpLoad %134 
                                                      OpSelectionMerge %156 None 
                                                      OpBranchConditional %154 %155 %156 
                                             %155 = OpLabel 
                                                      OpBranch %156 
                                             %156 = OpLabel 
                                                      OpBranch %153 
                                             %153 = OpLabel 
                                                      OpSelectionMerge %159 None 
                                                      OpBranchConditional %157 %158 %266 
                                             %158 = OpLabel 
                                Uniform f32* %161 = OpAccessChain %34 %140 %160 
                                         f32 %162 = OpLoad %161 
                                        bool %163 = OpFOrdEqual %162 %105 
                                                      OpStore %134 %163 
                                       f32_3 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 1 1 1 
                              Uniform f32_4* %171 = OpAccessChain %34 %169 %140 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFMul %168 %173 
                                       f32_4 %175 = OpLoad %164 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %164 %176 
                              Uniform f32_4* %177 = OpAccessChain %34 %169 %139 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpLoad %166 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 0 0 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %164 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %164 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %164 %187 
                              Uniform f32_4* %188 = OpAccessChain %34 %169 %169 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpLoad %166 
                                       f32_3 %192 = OpVectorShuffle %191 %191 2 2 2 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_4 %194 = OpLoad %164 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFAdd %193 %195 
                                       f32_4 %197 = OpLoad %164 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %164 %198 
                                       f32_4 %199 = OpLoad %164 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                              Uniform f32_4* %202 = OpAccessChain %34 %169 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFAdd %200 %204 
                                       f32_4 %206 = OpLoad %164 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %164 %207 
                                        bool %210 = OpLoad %134 
                                                      OpSelectionMerge %212 None 
                                                      OpBranchConditional %210 %211 %215 
                                             %211 = OpLabel 
                                       f32_4 %213 = OpLoad %164 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                                      OpStore %209 %214 
                                                      OpBranch %212 
                                             %215 = OpLabel 
                                       f32_3 %216 = OpLoad %166 
                                                      OpStore %209 %216 
                                                      OpBranch %212 
                                             %212 = OpLabel 
                                       f32_3 %217 = OpLoad %209 
                                       f32_4 %218 = OpLoad %164 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %164 %219 
                                       f32_4 %220 = OpLoad %164 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                              Uniform f32_3* %224 = OpAccessChain %34 %222 
                                       f32_3 %225 = OpLoad %224 
                                       f32_3 %226 = OpFNegate %225 
                                       f32_3 %227 = OpFAdd %221 %226 
                                       f32_4 %228 = OpLoad %164 
                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
                                                      OpStore %164 %229 
                                       f32_4 %231 = OpLoad %164 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                              Uniform f32_3* %233 = OpAccessChain %34 %201 
                                       f32_3 %234 = OpLoad %233 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_4 %236 = OpLoad %230 
                                       f32_4 %237 = OpVectorShuffle %236 %235 0 4 5 6 
                                                      OpStore %230 %237 
                                Private f32* %239 = OpAccessChain %230 %160 
                                         f32 %240 = OpLoad %239 
                                         f32 %242 = OpFMul %240 %241 
                                         f32 %244 = OpFAdd %242 %243 
                                                      OpStore %238 %244 
                                Uniform f32* %246 = OpAccessChain %34 %140 %245 
                                         f32 %247 = OpLoad %246 
                                         f32 %249 = OpFMul %247 %248 
                                         f32 %250 = OpFAdd %249 %243 
                                Private f32* %251 = OpAccessChain %164 %73 
                                                      OpStore %251 %250 
                                         f32 %252 = OpLoad %238 
                                Private f32* %253 = OpAccessChain %164 %73 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpExtInst %1 40 %252 %254 
                                Private f32* %256 = OpAccessChain %230 %73 
                                                      OpStore %256 %255 
                  read_only Texture3DSampled %261 = OpLoad %260 
                                       f32_4 %262 = OpLoad %230 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 2 3 
                                       f32_4 %264 = OpImageSampleImplicitLod %261 %263 
                                                      OpStore %230 %264 
                                       f32_4 %265 = OpLoad %230 
                                                      OpStore %82 %265 
                                                      OpBranch %159 
                                             %266 = OpLabel 
                                Private f32* %267 = OpAccessChain %82 %73 
                                                      OpStore %267 %105 
                                Private f32* %268 = OpAccessChain %82 %160 
                                                      OpStore %268 %105 
                                Private f32* %269 = OpAccessChain %82 %245 
                                                      OpStore %269 %105 
                                Private f32* %270 = OpAccessChain %82 %125 
                                                      OpStore %270 %105 
                                                      OpBranch %159 
                                             %159 = OpLabel 
                                       f32_4 %272 = OpLoad %82 
                              Uniform f32_4* %273 = OpAccessChain %34 %139 
                                       f32_4 %274 = OpLoad %273 
                                         f32 %275 = OpDot %272 %274 
                                Private f32* %276 = OpAccessChain %271 %73 
                                                      OpStore %276 %275 
                                Private f32* %277 = OpAccessChain %271 %73 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpExtInst %1 43 %278 %107 %105 
                                Private f32* %280 = OpAccessChain %271 %73 
                                                      OpStore %280 %279 
                                       f32_4 %282 = OpLoad %9 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                              Uniform f32_4* %285 = OpAccessChain %34 %284 
                                       f32_4 %286 = OpLoad %285 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpFMul %283 %287 
                                                      OpStore %281 %288 
                                       f32_3 %289 = OpLoad %271 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 0 0 
                                       f32_3 %291 = OpLoad %281 
                                       f32_3 %292 = OpFMul %290 %291 
                                                      OpStore %271 %292 
                                       f32_4 %293 = OpLoad %9 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                                       f32_3 %296 = OpLoad %295 
                                       f32_3 %297 = OpFMul %294 %296 
                                       f32_3 %298 = OpLoad %271 
                                       f32_3 %299 = OpFAdd %297 %298 
                                                      OpStore %271 %299 
                                Private f32* %302 = OpAccessChain %9 %125 
                                         f32 %303 = OpLoad %302 
                                 Output f32* %305 = OpAccessChain %301 %125 
                                                      OpStore %305 %303 
                                       f32_4 %306 = OpLoad %27 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                         f32 %308 = OpLoad %99 
                                       f32_3 %309 = OpCompositeConstruct %308 %308 %308 
                                       f32_3 %310 = OpFMul %307 %309 
                                       f32_3 %311 = OpLoad %271 
                                       f32_3 %312 = OpFAdd %310 %311 
                                                      OpStore %271 %312 
                                Private f32* %314 = OpAccessChain %271 %160 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %271 %245 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %315 %317 
                                                      OpStore %313 %318 
                                        bool %321 = OpLoad %313 
                                                      OpSelectionMerge %323 None 
                                                      OpBranchConditional %321 %322 %324 
                                             %322 = OpLabel 
                                                      OpStore %320 %105 
                                                      OpBranch %323 
                                             %324 = OpLabel 
                                                      OpStore %320 %107 
                                                      OpBranch %323 
                                             %323 = OpLabel 
                                         f32 %325 = OpLoad %320 
                                                      OpStore %319 %325 
                                       f32_3 %326 = OpLoad %271 
                                       f32_2 %327 = OpVectorShuffle %326 %326 2 1 
                                       f32_2 %328 = OpFNegate %327 
                                       f32_3 %329 = OpLoad %271 
                                       f32_2 %330 = OpVectorShuffle %329 %329 1 2 
                                       f32_2 %331 = OpFAdd %328 %330 
                                       f32_3 %332 = OpLoad %23 
                                       f32_3 %333 = OpVectorShuffle %332 %331 3 4 2 
                                                      OpStore %23 %333 
                                Private f32* %336 = OpAccessChain %335 %73 
                                                      OpStore %336 %105 
                                Private f32* %338 = OpAccessChain %335 %160 
                                                      OpStore %338 %337 
                                         f32 %339 = OpLoad %319 
                                       f32_2 %340 = OpCompositeConstruct %339 %339 
                                       f32_3 %341 = OpLoad %23 
                                       f32_2 %342 = OpVectorShuffle %341 %341 0 1 
                                       f32_2 %343 = OpFMul %340 %342 
                                       f32_3 %344 = OpLoad %271 
                                       f32_2 %345 = OpVectorShuffle %344 %344 2 1 
                                       f32_2 %346 = OpFAdd %343 %345 
                                       f32_4 %347 = OpLoad %230 
                                       f32_4 %348 = OpVectorShuffle %347 %346 4 5 2 3 
                                                      OpStore %230 %348 
                                         f32 %349 = OpLoad %319 
                                       f32_2 %350 = OpCompositeConstruct %349 %349 
                                       f32_2 %351 = OpLoad %335 
                                       f32_2 %352 = OpFMul %350 %351 
                                       f32_2 %355 = OpFAdd %352 %354 
                                       f32_4 %356 = OpLoad %230 
                                       f32_4 %357 = OpVectorShuffle %356 %355 0 1 4 5 
                                                      OpStore %230 %357 
                                Private f32* %358 = OpAccessChain %271 %73 
                                         f32 %359 = OpLoad %358 
                                Private f32* %360 = OpAccessChain %230 %73 
                                         f32 %361 = OpLoad %360 
                                        bool %362 = OpFOrdGreaterThanEqual %359 %361 
                                                      OpStore %313 %362 
                                        bool %364 = OpLoad %313 
                                                      OpSelectionMerge %366 None 
                                                      OpBranchConditional %364 %365 %367 
                                             %365 = OpLabel 
                                                      OpStore %363 %105 
                                                      OpBranch %366 
                                             %367 = OpLabel 
                                                      OpStore %363 %107 
                                                      OpBranch %366 
                                             %366 = OpLabel 
                                         f32 %368 = OpLoad %363 
                                                      OpStore %319 %368 
                                       f32_4 %369 = OpLoad %230 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 3 
                                       f32_3 %371 = OpFNegate %370 
                                       f32_4 %372 = OpLoad %27 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %27 %373 
                                Private f32* %374 = OpAccessChain %271 %73 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpFNegate %375 
                                Private f32* %377 = OpAccessChain %27 %125 
                                                      OpStore %377 %376 
                                Private f32* %378 = OpAccessChain %27 %73 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %271 %73 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFAdd %379 %381 
                                Private f32* %383 = OpAccessChain %164 %73 
                                                      OpStore %383 %382 
                                       f32_4 %384 = OpLoad %27 
                                       f32_3 %385 = OpVectorShuffle %384 %384 1 2 3 
                                       f32_4 %386 = OpLoad %230 
                                       f32_3 %387 = OpVectorShuffle %386 %386 1 2 0 
                                       f32_3 %388 = OpFAdd %385 %387 
                                       f32_4 %389 = OpLoad %164 
                                       f32_4 %390 = OpVectorShuffle %389 %388 0 4 5 6 
                                                      OpStore %164 %390 
                                         f32 %391 = OpLoad %319 
                                       f32_3 %392 = OpCompositeConstruct %391 %391 %391 
                                       f32_4 %393 = OpLoad %164 
                                       f32_3 %394 = OpVectorShuffle %393 %393 0 1 2 
                                       f32_3 %395 = OpFMul %392 %394 
                                       f32_4 %396 = OpLoad %230 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 3 
                                       f32_3 %398 = OpFAdd %395 %397 
                                       f32_4 %399 = OpLoad %27 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %27 %400 
                                         f32 %401 = OpLoad %319 
                                Private f32* %402 = OpAccessChain %164 %125 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %401 %403 
                                Private f32* %405 = OpAccessChain %271 %73 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFAdd %404 %406 
                                                      OpStore %319 %407 
                                Private f32* %408 = OpAccessChain %27 %160 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpLoad %319 
                                         f32 %411 = OpExtInst %1 37 %409 %410 
                                                      OpStore %99 %411 
                                         f32 %412 = OpLoad %99 
                                         f32 %413 = OpFNegate %412 
                                Private f32* %414 = OpAccessChain %27 %73 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpFAdd %413 %415 
                                                      OpStore %99 %416 
                                Private f32* %417 = OpAccessChain %27 %160 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpFNegate %418 
                                         f32 %420 = OpLoad %319 
                                         f32 %421 = OpFAdd %419 %420 
                                                      OpStore %319 %421 
                                         f32 %423 = OpLoad %99 
                                         f32 %425 = OpFMul %423 %424 
                                         f32 %427 = OpFAdd %425 %426 
                                                      OpStore %422 %427 
                                         f32 %428 = OpLoad %319 
                                         f32 %429 = OpLoad %422 
                                         f32 %430 = OpFDiv %428 %429 
                                                      OpStore %319 %430 
                                         f32 %431 = OpLoad %319 
                                Private f32* %432 = OpAccessChain %27 %245 
                                         f32 %433 = OpLoad %432 
                                         f32 %434 = OpFAdd %431 %433 
                                                      OpStore %319 %434 
                                Private f32* %435 = OpAccessChain %27 %73 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpFAdd %436 %426 
                                                      OpStore %422 %437 
                                         f32 %438 = OpLoad %99 
                                         f32 %439 = OpLoad %422 
                                         f32 %440 = OpFDiv %438 %439 
                                                      OpStore %422 %440 
                                Private f32* %442 = OpAccessChain %9 %160 
                                         f32 %443 = OpLoad %442 
                                Private f32* %444 = OpAccessChain %9 %245 
                                         f32 %445 = OpLoad %444 
                                        bool %446 = OpFOrdGreaterThanEqual %443 %445 
                                                      OpStore %441 %446 
                                        bool %448 = OpLoad %441 
                                                      OpSelectionMerge %450 None 
                                                      OpBranchConditional %448 %449 %451 
                                             %449 = OpLabel 
                                                      OpStore %447 %105 
                                                      OpBranch %450 
                                             %451 = OpLabel 
                                                      OpStore %447 %107 
                                                      OpBranch %450 
                                             %450 = OpLabel 
                                         f32 %452 = OpLoad %447 
                                Private f32* %453 = OpAccessChain %335 %73 
                                                      OpStore %453 %452 
                                Private f32* %455 = OpAccessChain %9 %245 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpFNegate %456 
                                Private f32* %458 = OpAccessChain %9 %160 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFAdd %457 %459 
                                                      OpStore %454 %460 
                                Private f32* %462 = OpAccessChain %335 %73 
                                         f32 %463 = OpLoad %462 
                                         f32 %464 = OpLoad %454 
                                         f32 %465 = OpFMul %463 %464 
                                Private f32* %466 = OpAccessChain %9 %245 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFAdd %465 %467 
                                Private f32* %469 = OpAccessChain %461 %73 
                                                      OpStore %469 %468 
                                Private f32* %471 = OpAccessChain %9 %73 
                                         f32 %472 = OpLoad %471 
                                Private f32* %473 = OpAccessChain %461 %73 
                                         f32 %474 = OpLoad %473 
                                        bool %475 = OpFOrdGreaterThanEqual %472 %474 
                                                      OpStore %470 %475 
                                        bool %478 = OpLoad %470 
                                                      OpSelectionMerge %480 None 
                                                      OpBranchConditional %478 %479 %481 
                                             %479 = OpLabel 
                                                      OpStore %477 %105 
                                                      OpBranch %480 
                                             %481 = OpLabel 
                                                      OpStore %477 %107 
                                                      OpBranch %480 
                                             %480 = OpLabel 
                                         f32 %482 = OpLoad %477 
                                                      OpStore %476 %482 
                                Private f32* %484 = OpAccessChain %461 %73 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFNegate %485 
                                Private f32* %487 = OpAccessChain %9 %73 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpFAdd %486 %488 
                                Private f32* %490 = OpAccessChain %483 %73 
                                                      OpStore %490 %489 
                                         f32 %491 = OpLoad %476 
                                Private f32* %492 = OpAccessChain %483 %73 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFMul %491 %493 
                                Private f32* %495 = OpAccessChain %461 %73 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpFAdd %494 %496 
                                Private f32* %498 = OpAccessChain %483 %73 
                                                      OpStore %498 %497 
                                Private f32* %499 = OpAccessChain %483 %73 
                                         f32 %500 = OpLoad %499 
                                Uniform f32* %502 = OpAccessChain %34 %501 
                                         f32 %503 = OpLoad %502 
                                         f32 %504 = OpFMul %500 %503 
                                Private f32* %505 = OpAccessChain %461 %73 
                                                      OpStore %505 %504 
                                Private f32* %506 = OpAccessChain %461 %73 
                                         f32 %507 = OpLoad %506 
                                Private f32* %508 = OpAccessChain %27 %73 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpExtInst %1 40 %507 %509 
                                Private f32* %511 = OpAccessChain %461 %73 
                                                      OpStore %511 %510 
                                       f32_3 %512 = OpLoad %119 
                                         f32 %513 = OpDot %512 %88 
                                Private f32* %514 = OpAccessChain %271 %73 
                                                      OpStore %514 %513 
                                Private f32* %515 = OpAccessChain %271 %73 
                                         f32 %516 = OpLoad %515 
                                         f32 %518 = OpFMul %516 %517 
                                Private f32* %519 = OpAccessChain %483 %73 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFAdd %518 %520 
                                Private f32* %522 = OpAccessChain %483 %73 
                                                      OpStore %522 %521 
                                Private f32* %523 = OpAccessChain %483 %73 
                                         f32 %524 = OpLoad %523 
                                Uniform f32* %526 = OpAccessChain %34 %525 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpFMul %524 %527 
                                Private f32* %529 = OpAccessChain %483 %73 
                                                      OpStore %529 %528 
                                Private f32* %530 = OpAccessChain %483 %73 
                                         f32 %531 = OpLoad %530 
                                Private f32* %532 = OpAccessChain %461 %73 
                                         f32 %533 = OpLoad %532 
                                         f32 %534 = OpExtInst %1 37 %531 %533 
                                Private f32* %535 = OpAccessChain %483 %73 
                                                      OpStore %535 %534 
                                         f32 %536 = OpLoad %319 
                                       f32_3 %537 = OpCompositeConstruct %536 %536 %536 
                                       f32_3 %538 = OpExtInst %1 4 %537 
                                       f32_3 %541 = OpFAdd %538 %540 
                                                      OpStore %461 %541 
                                       f32_3 %542 = OpLoad %461 
                                       f32_3 %543 = OpExtInst %1 10 %542 
                                                      OpStore %461 %543 
                                       f32_3 %544 = OpLoad %461 
                                       f32_3 %546 = OpFMul %544 %545 
                                       f32_3 %549 = OpFAdd %546 %548 
                                                      OpStore %461 %549 
                                       f32_3 %550 = OpLoad %461 
                                       f32_3 %551 = OpExtInst %1 4 %550 
                                       f32_3 %553 = OpFAdd %551 %552 
                                                      OpStore %461 %553 
                                       f32_3 %554 = OpLoad %461 
                                       f32_3 %555 = OpCompositeConstruct %107 %107 %107 
                                       f32_3 %556 = OpCompositeConstruct %105 %105 %105 
                                       f32_3 %557 = OpExtInst %1 43 %554 %555 %556 
                                                      OpStore %461 %557 
                                       f32_3 %558 = OpLoad %461 
                                       f32_3 %559 = OpFAdd %558 %552 
                                                      OpStore %461 %559 
                                         f32 %560 = OpLoad %422 
                                       f32_3 %561 = OpCompositeConstruct %560 %560 %560 
                                       f32_3 %562 = OpLoad %461 
                                       f32_3 %563 = OpFMul %561 %562 
                                       f32_3 %565 = OpFAdd %563 %564 
                                                      OpStore %461 %565 
                                       f32_3 %566 = OpLoad %461 
                                       f32_3 %567 = OpLoad %483 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 0 0 
                                       f32_3 %569 = OpFMul %566 %568 
                                                      OpStore %483 %569 
                                       f32_3 %570 = OpLoad %483 
                                       f32_4 %571 = OpLoad %301 
                                       f32_4 %572 = OpVectorShuffle %571 %570 4 5 6 3 
                                                      OpStore %301 %572 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _EmissiveMap_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _EmissiveMap_ST.xy + _EmissiveMap_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _EmissiveGlowToggle;
uniform 	float _ValueMaximum;
uniform 	float _ValueMinimum;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _EmissiveMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat16_6;
float u_xlat7;
float u_xlat9;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat16_19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1.xyz = log2(u_xlat10_0.xyz);
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10_2 = texture(_EmissiveMap, vs_TEXCOORD0.zw);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xxx;
    u_xlat16_19 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlatb2 = _EmissiveGlowToggle>=0.100000001;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat16_19 = (-u_xlat16_19) + 0.100000024;
    u_xlat19 = u_xlat2.x * u_xlat16_19 + 1.0;
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat20 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb20 = u_xlat20<0.0;
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb20){
        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb20)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat20 = u_xlat3.y * 0.25 + 0.75;
        u_xlat9 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat20, u_xlat9);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat20 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat3.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat20) * u_xlat4.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.w = u_xlat10_0.w;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat1.xyw = u_xlat1.yzx * vec3(u_xlat19) + u_xlat3.yzx;
    u_xlatb18 = u_xlat1.x>=u_xlat1.y;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat1.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.xy + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat18) * u_xlat5 + u_xlat4;
    u_xlatb18 = u_xlat1.w>=u_xlat4.x;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat1.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat1.wyx;
    u_xlat4 = (-u_xlat1) + u_xlat4;
    u_xlat1 = vec4(u_xlat18) * u_xlat4 + u_xlat1;
    u_xlat18 = min(u_xlat1.y, u_xlat1.w);
    u_xlat18 = (-u_xlat18) + u_xlat1.x;
    u_xlat7 = (-u_xlat1.y) + u_xlat1.w;
    u_xlat19 = u_xlat18 * 6.0 + 1.00000001e-010;
    u_xlat7 = u_xlat7 / u_xlat19;
    u_xlat7 = u_xlat7 + u_xlat1.z;
    u_xlat13 = u_xlat1.x + 1.00000001e-010;
    u_xlat18 = u_xlat18 / u_xlat13;
    u_xlatb13 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat16_6 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat6.x = u_xlat13 * u_xlat16_6 + u_xlat10_0.z;
    u_xlatb12 = u_xlat10_0.x>=u_xlat6.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat6.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat12 * u_xlat0 + u_xlat6.x;
    u_xlat6.x = u_xlat0 * _ValueMinimum;
    u_xlat6.x = max(u_xlat6.x, u_xlat1.x);
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0 = u_xlat12 * 50.0 + u_xlat0;
    u_xlat0 = u_xlat0 * _ValueMaximum;
    u_xlat0 = min(u_xlat0, u_xlat6.x);
    u_xlat1.xyz = abs(vec3(u_xlat7)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat6.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat3.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 402
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %85 %95 %96 %111 %127 %166 %169 %172 %392 %395 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %111 Location 111 
                                                      OpDecorate %127 Location 127 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %392 Location 392 
                                                      OpDecorate %395 Location 395 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 12 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 14 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                Output f32_4* %95 = OpVariable Output 
                                 Input f32_4* %96 = OpVariable Input 
                                              %97 = OpTypeVector %6 2 
                                         i32 %100 = OpConstant 15 
                                Input f32_4* %111 = OpVariable Input 
                                         i32 %114 = OpConstant 16 
                                             %125 = OpTypeVector %6 3 
                                             %126 = OpTypePointer Input %125 
                                Input f32_3* %127 = OpVariable Input 
                                         i32 %129 = OpConstant 13 
                                         u32 %134 = OpConstant 0 
                                             %135 = OpTypePointer Private %6 
                                         u32 %148 = OpConstant 2 
                                Private f32* %150 = OpVariable Private 
                                             %165 = OpTypePointer Output %125 
                               Output f32_3* %166 = OpVariable Output 
                               Output f32_3* %169 = OpVariable Output 
                               Output f32_4* %172 = OpVariable Output 
                                             %174 = OpTypePointer Private %125 
                              Private f32_3* %175 = OpVariable Private 
                              Private f32_4* %192 = OpVariable Private 
                              Private f32_3* %198 = OpVariable Private 
                                         i32 %199 = OpConstant 8 
                                         i32 %205 = OpConstant 9 
                                         i32 %211 = OpConstant 10 
                                         i32 %217 = OpConstant 11 
                                         f32 %226 = OpConstant 3.674022E-40 
                                         u32 %227 = OpConstant 3 
                                         i32 %229 = OpConstant 5 
                                         i32 %235 = OpConstant 6 
                                         i32 %241 = OpConstant 7 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_3 %252 = OpConstantComposite %251 %251 %251 
                              Private f32_3* %254 = OpVariable Private 
                                         f32 %258 = OpConstant 3.674022E-40 
                                       f32_3 %259 = OpConstantComposite %258 %258 %258 
                                         f32 %264 = OpConstant 3.674022E-40 
                                       f32_3 %265 = OpConstantComposite %264 %264 %264 
                                         f32 %267 = OpConstant 3.674022E-40 
                                       f32_3 %268 = OpConstantComposite %267 %267 %267 
                              Private f32_4* %278 = OpVariable Private 
                              Private f32_4* %286 = OpVariable Private 
                                         f32 %322 = OpConstant 3.674022E-40 
                                       f32_4 %323 = OpConstantComposite %322 %322 %322 %322 
                                       f32_4 %331 = OpConstantComposite %226 %226 %226 %226 
                                       f32_4 %339 = OpConstantComposite %251 %251 %251 %251 
                                         i32 %346 = OpConstant 4 
                               Output f32_3* %392 = OpVariable Output 
                               Output f32_4* %395 = OpVariable Output 
                                             %396 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %86 = OpAccessChain %23 %63 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %60 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %31 
                                                      OpStore %94 %92 
                                        f32_4 %98 = OpLoad %96 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                              Uniform f32_4* %101 = OpAccessChain %23 %100 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %99 %103 
                              Uniform f32_4* %105 = OpAccessChain %23 %100 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                       f32_4 %109 = OpLoad %95 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 2 3 
                                                      OpStore %95 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 0 1 
                              Uniform f32_4* %115 = OpAccessChain %23 %114 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_2 %118 = OpFMul %113 %117 
                              Uniform f32_4* %119 = OpAccessChain %23 %114 
                                       f32_4 %120 = OpLoad %119 
                                       f32_2 %121 = OpVectorShuffle %120 %120 2 3 
                                       f32_2 %122 = OpFAdd %118 %121 
                                       f32_4 %123 = OpLoad %95 
                                       f32_4 %124 = OpVectorShuffle %123 %122 0 1 4 5 
                                                      OpStore %95 %124 
                                       f32_3 %128 = OpLoad %127 
                              Uniform f32_4* %130 = OpAccessChain %23 %129 %31 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %128 %132 
                                Private f32* %136 = OpAccessChain %47 %134 
                                                      OpStore %136 %133 
                                       f32_3 %137 = OpLoad %127 
                              Uniform f32_4* %138 = OpAccessChain %23 %129 %26 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %137 %140 
                                Private f32* %142 = OpAccessChain %47 %81 
                                                      OpStore %142 %141 
                                       f32_3 %143 = OpLoad %127 
                              Uniform f32_4* %144 = OpAccessChain %23 %129 %39 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                         f32 %147 = OpDot %143 %146 
                                Private f32* %149 = OpAccessChain %47 %148 
                                                      OpStore %149 %147 
                                       f32_4 %151 = OpLoad %47 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_4 %153 = OpLoad %47 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                         f32 %155 = OpDot %152 %154 
                                                      OpStore %150 %155 
                                         f32 %156 = OpLoad %150 
                                         f32 %157 = OpExtInst %1 32 %156 
                                                      OpStore %150 %157 
                                         f32 %158 = OpLoad %150 
                                       f32_3 %159 = OpCompositeConstruct %158 %158 %158 
                                       f32_4 %160 = OpLoad %47 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %47 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %47 %164 
                                       f32_4 %167 = OpLoad %47 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                                      OpStore %166 %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                                      OpStore %169 %171 
                                       f32_4 %173 = OpLoad %9 
                                                      OpStore %172 %173 
                                Private f32* %176 = OpAccessChain %47 %81 
                                         f32 %177 = OpLoad %176 
                                Private f32* %178 = OpAccessChain %47 %81 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFMul %177 %179 
                                Private f32* %181 = OpAccessChain %175 %134 
                                                      OpStore %181 %180 
                                Private f32* %182 = OpAccessChain %47 %134 
                                         f32 %183 = OpLoad %182 
                                Private f32* %184 = OpAccessChain %47 %134 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFMul %183 %185 
                                Private f32* %187 = OpAccessChain %175 %134 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                         f32 %190 = OpFAdd %186 %189 
                                Private f32* %191 = OpAccessChain %175 %134 
                                                      OpStore %191 %190 
                                       f32_4 %193 = OpLoad %47 
                                       f32_4 %194 = OpVectorShuffle %193 %193 1 2 2 0 
                                       f32_4 %195 = OpLoad %47 
                                       f32_4 %196 = OpVectorShuffle %195 %195 0 1 2 2 
                                       f32_4 %197 = OpFMul %194 %196 
                                                      OpStore %192 %197 
                              Uniform f32_4* %200 = OpAccessChain %23 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_4 %202 = OpLoad %192 
                                         f32 %203 = OpDot %201 %202 
                                Private f32* %204 = OpAccessChain %198 %134 
                                                      OpStore %204 %203 
                              Uniform f32_4* %206 = OpAccessChain %23 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpLoad %192 
                                         f32 %209 = OpDot %207 %208 
                                Private f32* %210 = OpAccessChain %198 %81 
                                                      OpStore %210 %209 
                              Uniform f32_4* %212 = OpAccessChain %23 %211 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %192 
                                         f32 %215 = OpDot %213 %214 
                                Private f32* %216 = OpAccessChain %198 %148 
                                                      OpStore %216 %215 
                              Uniform f32_4* %218 = OpAccessChain %23 %217 
                                       f32_4 %219 = OpLoad %218 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpLoad %175 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 0 0 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_3 %224 = OpLoad %198 
                                       f32_3 %225 = OpFAdd %223 %224 
                                                      OpStore %175 %225 
                                Private f32* %228 = OpAccessChain %47 %227 
                                                      OpStore %228 %226 
                              Uniform f32_4* %230 = OpAccessChain %23 %229 
                                       f32_4 %231 = OpLoad %230 
                                       f32_4 %232 = OpLoad %47 
                                         f32 %233 = OpDot %231 %232 
                                Private f32* %234 = OpAccessChain %198 %134 
                                                      OpStore %234 %233 
                              Uniform f32_4* %236 = OpAccessChain %23 %235 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %47 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %198 %81 
                                                      OpStore %240 %239 
                              Uniform f32_4* %242 = OpAccessChain %23 %241 
                                       f32_4 %243 = OpLoad %242 
                                       f32_4 %244 = OpLoad %47 
                                         f32 %245 = OpDot %243 %244 
                                Private f32* %246 = OpAccessChain %198 %148 
                                                      OpStore %246 %245 
                                       f32_3 %247 = OpLoad %175 
                                       f32_3 %248 = OpLoad %198 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %175 %249 
                                       f32_3 %250 = OpLoad %175 
                                       f32_3 %253 = OpExtInst %1 40 %250 %252 
                                                      OpStore %175 %253 
                                       f32_3 %255 = OpLoad %175 
                                       f32_3 %256 = OpExtInst %1 30 %255 
                                                      OpStore %254 %256 
                                       f32_3 %257 = OpLoad %254 
                                       f32_3 %260 = OpFMul %257 %259 
                                                      OpStore %254 %260 
                                       f32_3 %261 = OpLoad %254 
                                       f32_3 %262 = OpExtInst %1 29 %261 
                                                      OpStore %254 %262 
                                       f32_3 %263 = OpLoad %254 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %269 = OpFAdd %266 %268 
                                                      OpStore %254 %269 
                                       f32_3 %270 = OpLoad %254 
                                       f32_3 %271 = OpExtInst %1 40 %270 %252 
                                                      OpStore %254 %271 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %272 1 1 1 1 
                                       f32_4 %274 = OpFNegate %273 
                              Uniform f32_4* %275 = OpAccessChain %23 %26 
                                       f32_4 %276 = OpLoad %275 
                                       f32_4 %277 = OpFAdd %274 %276 
                                                      OpStore %60 %277 
                                       f32_4 %279 = OpLoad %47 
                                       f32_4 %280 = OpVectorShuffle %279 %279 1 1 1 1 
                                       f32_4 %281 = OpLoad %60 
                                       f32_4 %282 = OpFMul %280 %281 
                                                      OpStore %278 %282 
                                       f32_4 %283 = OpLoad %60 
                                       f32_4 %284 = OpLoad %60 
                                       f32_4 %285 = OpFMul %283 %284 
                                                      OpStore %60 %285 
                                       f32_4 %287 = OpLoad %9 
                                       f32_4 %288 = OpVectorShuffle %287 %287 0 0 0 0 
                                       f32_4 %289 = OpFNegate %288 
                              Uniform f32_4* %290 = OpAccessChain %23 %31 
                                       f32_4 %291 = OpLoad %290 
                                       f32_4 %292 = OpFAdd %289 %291 
                                                      OpStore %286 %292 
                                       f32_4 %293 = OpLoad %9 
                                       f32_4 %294 = OpVectorShuffle %293 %293 2 2 2 2 
                                       f32_4 %295 = OpFNegate %294 
                              Uniform f32_4* %296 = OpAccessChain %23 %39 
                                       f32_4 %297 = OpLoad %296 
                                       f32_4 %298 = OpFAdd %295 %297 
                                                      OpStore %9 %298 
                                       f32_4 %299 = OpLoad %286 
                                       f32_4 %300 = OpLoad %47 
                                       f32_4 %301 = OpVectorShuffle %300 %300 0 0 0 0 
                                       f32_4 %302 = OpFMul %299 %301 
                                       f32_4 %303 = OpLoad %278 
                                       f32_4 %304 = OpFAdd %302 %303 
                                                      OpStore %278 %304 
                                       f32_4 %305 = OpLoad %9 
                                       f32_4 %306 = OpLoad %47 
                                       f32_4 %307 = OpVectorShuffle %306 %306 2 2 2 2 
                                       f32_4 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %278 
                                       f32_4 %310 = OpFAdd %308 %309 
                                                      OpStore %47 %310 
                                       f32_4 %311 = OpLoad %286 
                                       f32_4 %312 = OpLoad %286 
                                       f32_4 %313 = OpFMul %311 %312 
                                       f32_4 %314 = OpLoad %60 
                                       f32_4 %315 = OpFAdd %313 %314 
                                                      OpStore %60 %315 
                                       f32_4 %316 = OpLoad %9 
                                       f32_4 %317 = OpLoad %9 
                                       f32_4 %318 = OpFMul %316 %317 
                                       f32_4 %319 = OpLoad %60 
                                       f32_4 %320 = OpFAdd %318 %319 
                                                      OpStore %9 %320 
                                       f32_4 %321 = OpLoad %9 
                                       f32_4 %324 = OpExtInst %1 40 %321 %323 
                                                      OpStore %9 %324 
                                       f32_4 %325 = OpLoad %9 
                                       f32_4 %326 = OpExtInst %1 32 %325 
                                                      OpStore %60 %326 
                                       f32_4 %327 = OpLoad %9 
                              Uniform f32_4* %328 = OpAccessChain %23 %49 
                                       f32_4 %329 = OpLoad %328 
                                       f32_4 %330 = OpFMul %327 %329 
                                       f32_4 %332 = OpFAdd %330 %331 
                                                      OpStore %9 %332 
                                       f32_4 %333 = OpLoad %9 
                                       f32_4 %334 = OpFDiv %331 %333 
                                                      OpStore %9 %334 
                                       f32_4 %335 = OpLoad %47 
                                       f32_4 %336 = OpLoad %60 
                                       f32_4 %337 = OpFMul %335 %336 
                                                      OpStore %47 %337 
                                       f32_4 %338 = OpLoad %47 
                                       f32_4 %340 = OpExtInst %1 40 %338 %339 
                                                      OpStore %47 %340 
                                       f32_4 %341 = OpLoad %9 
                                       f32_4 %342 = OpLoad %47 
                                       f32_4 %343 = OpFMul %341 %342 
                                                      OpStore %9 %343 
                                       f32_4 %344 = OpLoad %9 
                                       f32_3 %345 = OpVectorShuffle %344 %344 1 1 1 
                              Uniform f32_4* %347 = OpAccessChain %23 %346 %26 
                                       f32_4 %348 = OpLoad %347 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                       f32_3 %350 = OpFMul %345 %349 
                                       f32_4 %351 = OpLoad %47 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %47 %352 
                              Uniform f32_4* %353 = OpAccessChain %23 %346 %31 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %9 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 0 0 
                                       f32_3 %358 = OpFMul %355 %357 
                                       f32_4 %359 = OpLoad %47 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %361 = OpFAdd %358 %360 
                                       f32_4 %362 = OpLoad %47 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %47 %363 
                              Uniform f32_4* %364 = OpAccessChain %23 %346 %39 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_4 %367 = OpLoad %9 
                                       f32_3 %368 = OpVectorShuffle %367 %367 2 2 2 
                                       f32_3 %369 = OpFMul %366 %368 
                                       f32_4 %370 = OpLoad %47 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFAdd %369 %371 
                                       f32_4 %373 = OpLoad %9 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 5 6 3 
                                                      OpStore %9 %374 
                              Uniform f32_4* %375 = OpAccessChain %23 %346 %49 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_4 %378 = OpLoad %9 
                                       f32_3 %379 = OpVectorShuffle %378 %378 3 3 3 
                                       f32_3 %380 = OpFMul %377 %379 
                                       f32_4 %381 = OpLoad %9 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFAdd %380 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %9 %385 
                                       f32_4 %386 = OpLoad %9 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_3 %388 = OpLoad %254 
                                       f32_3 %389 = OpFAdd %387 %388 
                                       f32_4 %390 = OpLoad %9 
                                       f32_4 %391 = OpVectorShuffle %390 %389 4 5 6 3 
                                                      OpStore %9 %391 
                                       f32_4 %393 = OpLoad %9 
                                       f32_3 %394 = OpVectorShuffle %393 %393 0 1 2 
                                                      OpStore %392 %394 
                                                      OpStore %395 %339 
                                 Output f32* %397 = OpAccessChain %85 %31 %81 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFNegate %398 
                                 Output f32* %400 = OpAccessChain %85 %31 %81 
                                                      OpStore %400 %399 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 574
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %166 %295 %301 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %31 ArrayStride 31 
                                                      OpMemberDecorate %32 0 RelaxedPrecision 
                                                      OpMemberDecorate %32 0 Offset 32 
                                                      OpMemberDecorate %32 1 Offset 32 
                                                      OpMemberDecorate %32 2 Offset 32 
                                                      OpMemberDecorate %32 3 Offset 32 
                                                      OpMemberDecorate %32 4 Offset 32 
                                                      OpMemberDecorate %32 5 RelaxedPrecision 
                                                      OpMemberDecorate %32 5 Offset 32 
                                                      OpMemberDecorate %32 6 Offset 32 
                                                      OpMemberDecorate %32 7 Offset 32 
                                                      OpMemberDecorate %32 8 Offset 32 
                                                      OpMemberDecorate %32 9 Offset 32 
                                                      OpMemberDecorate %32 10 Offset 32 
                                                      OpMemberDecorate %32 11 RelaxedPrecision 
                                                      OpMemberDecorate %32 11 Offset 32 
                                                      OpDecorate %32 Block 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %68 DescriptorSet 68 
                                                      OpDecorate %68 Binding 68 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %157 SpecId 157 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %260 DescriptorSet 260 
                                                      OpDecorate %260 Binding 260 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %295 Location 295 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %301 Location 301 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
                               Private f32_4* %27 = OpVariable Private 
                                              %29 = OpTypeInt 32 0 
                                          u32 %30 = OpConstant 4 
                                              %31 = OpTypeArray %7 %30 
                                              %32 = OpTypeStruct %7 %7 %31 %21 %21 %7 %6 %6 %6 %6 %6 %6 
                                              %33 = OpTypePointer Uniform %32 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32;}* %34 = OpVariable Uniform 
                                              %35 = OpTypeInt 32 1 
                                          i32 %36 = OpConstant 7 
                                              %37 = OpTypePointer Uniform %6 
                                          i32 %59 = OpConstant 6 
                                              %66 = OpTypePointer Private %6 
                                 Private f32* %67 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %68 = OpVariable UniformConstant 
                                          u32 %73 = OpConstant 0 
                               Private f32_4* %82 = OpVariable Private 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %87 = OpConstant 3.674022E-40 
                                        f32_3 %88 = OpConstantComposite %85 %86 %87 
                                              %91 = OpTypeBool 
                                              %92 = OpTypePointer Private %91 
                                Private bool* %93 = OpVariable Private 
                                          i32 %94 = OpConstant 8 
                                          f32 %97 = OpConstant 3.674022E-40 
                                 Private f32* %99 = OpVariable Private 
                                             %100 = OpTypePointer Function %6 
                                         f32 %105 = OpConstant 3.674022E-40 
                                         f32 %107 = OpConstant 3.674022E-40 
                                Private f32* %109 = OpVariable Private 
                                         f32 %113 = OpConstant 3.674022E-40 
                              Private f32_3* %119 = OpVariable Private 
                                         u32 %125 = OpConstant 3 
                                         i32 %128 = OpConstant 11 
                               Private bool* %134 = OpVariable Private 
                                         i32 %139 = OpConstant 0 
                                         i32 %140 = OpConstant 1 
                                         i32 %142 = OpConstant -1 
                                        bool %151 = OpConstantFalse 
                                        bool %157 = OpSpecConstantFalse 
                                         u32 %160 = OpConstant 1 
                              Private f32_4* %164 = OpVariable Private 
                                             %165 = OpTypePointer Input %21 
                                Input f32_3* %166 = OpVariable Input 
                                         i32 %169 = OpConstant 2 
                                             %170 = OpTypePointer Uniform %7 
                                         i32 %201 = OpConstant 3 
                                             %208 = OpTypePointer Function %21 
                                         i32 %222 = OpConstant 4 
                                             %223 = OpTypePointer Uniform %21 
                              Private f32_4* %230 = OpVariable Private 
                                Private f32* %238 = OpVariable Private 
                                         f32 %241 = OpConstant 3.674022E-40 
                                         f32 %243 = OpConstant 3.674022E-40 
                                         u32 %245 = OpConstant 2 
                                         f32 %248 = OpConstant 3.674022E-40 
                                             %257 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %258 = OpTypeSampledImage %257 
                                             %259 = OpTypePointer UniformConstant %258 
 UniformConstant read_only Texture3DSampled* %260 = OpVariable UniformConstant 
                              Private f32_3* %271 = OpVariable Private 
                              Private f32_3* %281 = OpVariable Private 
                                         i32 %284 = OpConstant 5 
                                Input f32_3* %295 = OpVariable Input 
                                             %300 = OpTypePointer Output %7 
                               Output f32_4* %301 = OpVariable Output 
                                             %304 = OpTypePointer Output %6 
                               Private bool* %313 = OpVariable Private 
                                Private f32* %319 = OpVariable Private 
                                             %334 = OpTypePointer Private %17 
                              Private f32_2* %335 = OpVariable Private 
                                         f32 %337 = OpConstant 3.674022E-40 
                                         f32 %353 = OpConstant 3.674022E-40 
                                       f32_2 %354 = OpConstantComposite %337 %353 
                                Private f32* %422 = OpVariable Private 
                                         f32 %424 = OpConstant 3.674022E-40 
                                         f32 %426 = OpConstant 3.674022E-40 
                               Private bool* %441 = OpVariable Private 
                                Private f32* %454 = OpVariable Private 
                              Private f32_3* %461 = OpVariable Private 
                               Private bool* %470 = OpVariable Private 
                                Private f32* %476 = OpVariable Private 
                              Private f32_3* %483 = OpVariable Private 
                                         i32 %501 = OpConstant 10 
                                         f32 %517 = OpConstant 3.674022E-40 
                                         i32 %525 = OpConstant 9 
                                         f32 %539 = OpConstant 3.674022E-40 
                                       f32_3 %540 = OpConstantComposite %105 %353 %539 
                                       f32_3 %545 = OpConstantComposite %424 %424 %424 
                                         f32 %547 = OpConstant 3.674022E-40 
                                       f32_3 %548 = OpConstantComposite %547 %547 %547 
                                       f32_3 %552 = OpConstantComposite %337 %337 %337 
                                       f32_3 %564 = OpConstantComposite %105 %105 %105 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %101 = OpVariable Function 
                             Function f32_3* %209 = OpVariable Function 
                               Function f32* %320 = OpVariable Function 
                               Function f32* %363 = OpVariable Function 
                               Function f32* %447 = OpVariable Function 
                               Function f32* %477 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                                        f32_4 %24 = OpLoad %9 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpExtInst %1 30 %25 
                                                      OpStore %23 %26 
                                        f32_3 %28 = OpLoad %23 
                                 Uniform f32* %38 = OpAccessChain %34 %36 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %34 %36 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %34 %36 
                                          f32 %43 = OpLoad %42 
                                        f32_3 %44 = OpCompositeConstruct %39 %41 %43 
                                          f32 %45 = OpCompositeExtract %44 0 
                                          f32 %46 = OpCompositeExtract %44 1 
                                          f32 %47 = OpCompositeExtract %44 2 
                                        f32_3 %48 = OpCompositeConstruct %45 %46 %47 
                                        f32_3 %49 = OpFMul %28 %48 
                                        f32_4 %50 = OpLoad %27 
                                        f32_4 %51 = OpVectorShuffle %50 %49 4 5 6 3 
                                                      OpStore %27 %51 
                                        f32_4 %52 = OpLoad %27 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpExtInst %1 29 %53 
                                        f32_4 %55 = OpLoad %27 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %27 %56 
                                        f32_4 %57 = OpLoad %27 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                                 Uniform f32* %60 = OpAccessChain %34 %59 
                                          f32 %61 = OpLoad %60 
                                        f32_3 %62 = OpCompositeConstruct %61 %61 %61 
                                        f32_3 %63 = OpFMul %58 %62 
                                        f32_4 %64 = OpLoad %27 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %27 %65 
                   read_only Texture2DSampled %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %16 
                                        f32_2 %71 = OpVectorShuffle %70 %70 2 3 
                                        f32_4 %72 = OpImageSampleImplicitLod %69 %71 
                                          f32 %74 = OpCompositeExtract %72 0 
                                                      OpStore %67 %74 
                                          f32 %75 = OpLoad %67 
                                        f32_3 %76 = OpCompositeConstruct %75 %75 %75 
                                        f32_4 %77 = OpLoad %27 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %27 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %27 %81 
                                        f32_4 %83 = OpLoad %9 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                          f32 %89 = OpDot %84 %88 
                                 Private f32* %90 = OpAccessChain %82 %73 
                                                      OpStore %90 %89 
                                 Uniform f32* %95 = OpAccessChain %34 %94 
                                          f32 %96 = OpLoad %95 
                                         bool %98 = OpFOrdGreaterThanEqual %96 %97 
                                                      OpStore %93 %98 
                                        bool %102 = OpLoad %93 
                                                      OpSelectionMerge %104 None 
                                                      OpBranchConditional %102 %103 %106 
                                             %103 = OpLabel 
                                                      OpStore %101 %105 
                                                      OpBranch %104 
                                             %106 = OpLabel 
                                                      OpStore %101 %107 
                                                      OpBranch %104 
                                             %104 = OpLabel 
                                         f32 %108 = OpLoad %101 
                                                      OpStore %99 %108 
                                Private f32* %110 = OpAccessChain %82 %73 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpFNegate %111 
                                         f32 %114 = OpFAdd %112 %113 
                                                      OpStore %109 %114 
                                         f32 %115 = OpLoad %99 
                                         f32 %116 = OpLoad %109 
                                         f32 %117 = OpFMul %115 %116 
                                         f32 %118 = OpFAdd %117 %105 
                                                      OpStore %99 %118 
                                         f32 %120 = OpLoad %99 
                                       f32_3 %121 = OpCompositeConstruct %120 %120 %120 
                                       f32_4 %122 = OpLoad %27 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                                      OpStore %119 %124 
                                Private f32* %126 = OpAccessChain %9 %125 
                                         f32 %127 = OpLoad %126 
                                Uniform f32* %129 = OpAccessChain %34 %128 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFNegate %130 
                                         f32 %132 = OpFAdd %127 %131 
                                Private f32* %133 = OpAccessChain %82 %73 
                                                      OpStore %133 %132 
                                Private f32* %135 = OpAccessChain %82 %73 
                                         f32 %136 = OpLoad %135 
                                        bool %137 = OpFOrdLessThan %136 %107 
                                                      OpStore %134 %137 
                                        bool %138 = OpLoad %134 
                                         i32 %141 = OpSelect %138 %140 %139 
                                         i32 %143 = OpIMul %141 %142 
                                        bool %144 = OpINotEqual %143 %139 
                                                      OpSelectionMerge %146 None 
                                                      OpBranchConditional %144 %145 %146 
                                             %145 = OpLabel 
                                                      OpKill
                                             %146 = OpLabel 
                                Uniform f32* %148 = OpAccessChain %34 %140 %73 
                                         f32 %149 = OpLoad %148 
                                        bool %150 = OpFOrdEqual %149 %105 
                                                      OpStore %134 %150 
                                                      OpSelectionMerge %153 None 
                                                      OpBranchConditional %151 %152 %153 
                                             %152 = OpLabel 
                                        bool %154 = OpLoad %134 
                                                      OpSelectionMerge %156 None 
                                                      OpBranchConditional %154 %155 %156 
                                             %155 = OpLabel 
                                                      OpBranch %156 
                                             %156 = OpLabel 
                                                      OpBranch %153 
                                             %153 = OpLabel 
                                                      OpSelectionMerge %159 None 
                                                      OpBranchConditional %157 %158 %266 
                                             %158 = OpLabel 
                                Uniform f32* %161 = OpAccessChain %34 %140 %160 
                                         f32 %162 = OpLoad %161 
                                        bool %163 = OpFOrdEqual %162 %105 
                                                      OpStore %134 %163 
                                       f32_3 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 1 1 1 
                              Uniform f32_4* %171 = OpAccessChain %34 %169 %140 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFMul %168 %173 
                                       f32_4 %175 = OpLoad %164 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %164 %176 
                              Uniform f32_4* %177 = OpAccessChain %34 %169 %139 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpLoad %166 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 0 0 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %164 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %164 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %164 %187 
                              Uniform f32_4* %188 = OpAccessChain %34 %169 %169 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpLoad %166 
                                       f32_3 %192 = OpVectorShuffle %191 %191 2 2 2 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_4 %194 = OpLoad %164 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFAdd %193 %195 
                                       f32_4 %197 = OpLoad %164 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %164 %198 
                                       f32_4 %199 = OpLoad %164 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                              Uniform f32_4* %202 = OpAccessChain %34 %169 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFAdd %200 %204 
                                       f32_4 %206 = OpLoad %164 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %164 %207 
                                        bool %210 = OpLoad %134 
                                                      OpSelectionMerge %212 None 
                                                      OpBranchConditional %210 %211 %215 
                                             %211 = OpLabel 
                                       f32_4 %213 = OpLoad %164 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                                      OpStore %209 %214 
                                                      OpBranch %212 
                                             %215 = OpLabel 
                                       f32_3 %216 = OpLoad %166 
                                                      OpStore %209 %216 
                                                      OpBranch %212 
                                             %212 = OpLabel 
                                       f32_3 %217 = OpLoad %209 
                                       f32_4 %218 = OpLoad %164 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %164 %219 
                                       f32_4 %220 = OpLoad %164 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                              Uniform f32_3* %224 = OpAccessChain %34 %222 
                                       f32_3 %225 = OpLoad %224 
                                       f32_3 %226 = OpFNegate %225 
                                       f32_3 %227 = OpFAdd %221 %226 
                                       f32_4 %228 = OpLoad %164 
                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
                                                      OpStore %164 %229 
                                       f32_4 %231 = OpLoad %164 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                              Uniform f32_3* %233 = OpAccessChain %34 %201 
                                       f32_3 %234 = OpLoad %233 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_4 %236 = OpLoad %230 
                                       f32_4 %237 = OpVectorShuffle %236 %235 0 4 5 6 
                                                      OpStore %230 %237 
                                Private f32* %239 = OpAccessChain %230 %160 
                                         f32 %240 = OpLoad %239 
                                         f32 %242 = OpFMul %240 %241 
                                         f32 %244 = OpFAdd %242 %243 
                                                      OpStore %238 %244 
                                Uniform f32* %246 = OpAccessChain %34 %140 %245 
                                         f32 %247 = OpLoad %246 
                                         f32 %249 = OpFMul %247 %248 
                                         f32 %250 = OpFAdd %249 %243 
                                Private f32* %251 = OpAccessChain %164 %73 
                                                      OpStore %251 %250 
                                         f32 %252 = OpLoad %238 
                                Private f32* %253 = OpAccessChain %164 %73 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpExtInst %1 40 %252 %254 
                                Private f32* %256 = OpAccessChain %230 %73 
                                                      OpStore %256 %255 
                  read_only Texture3DSampled %261 = OpLoad %260 
                                       f32_4 %262 = OpLoad %230 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 2 3 
                                       f32_4 %264 = OpImageSampleImplicitLod %261 %263 
                                                      OpStore %230 %264 
                                       f32_4 %265 = OpLoad %230 
                                                      OpStore %82 %265 
                                                      OpBranch %159 
                                             %266 = OpLabel 
                                Private f32* %267 = OpAccessChain %82 %73 
                                                      OpStore %267 %105 
                                Private f32* %268 = OpAccessChain %82 %160 
                                                      OpStore %268 %105 
                                Private f32* %269 = OpAccessChain %82 %245 
                                                      OpStore %269 %105 
                                Private f32* %270 = OpAccessChain %82 %125 
                                                      OpStore %270 %105 
                                                      OpBranch %159 
                                             %159 = OpLabel 
                                       f32_4 %272 = OpLoad %82 
                              Uniform f32_4* %273 = OpAccessChain %34 %139 
                                       f32_4 %274 = OpLoad %273 
                                         f32 %275 = OpDot %272 %274 
                                Private f32* %276 = OpAccessChain %271 %73 
                                                      OpStore %276 %275 
                                Private f32* %277 = OpAccessChain %271 %73 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpExtInst %1 43 %278 %107 %105 
                                Private f32* %280 = OpAccessChain %271 %73 
                                                      OpStore %280 %279 
                                       f32_4 %282 = OpLoad %9 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                              Uniform f32_4* %285 = OpAccessChain %34 %284 
                                       f32_4 %286 = OpLoad %285 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpFMul %283 %287 
                                                      OpStore %281 %288 
                                       f32_3 %289 = OpLoad %271 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 0 0 
                                       f32_3 %291 = OpLoad %281 
                                       f32_3 %292 = OpFMul %290 %291 
                                                      OpStore %271 %292 
                                       f32_4 %293 = OpLoad %9 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                                       f32_3 %296 = OpLoad %295 
                                       f32_3 %297 = OpFMul %294 %296 
                                       f32_3 %298 = OpLoad %271 
                                       f32_3 %299 = OpFAdd %297 %298 
                                                      OpStore %271 %299 
                                Private f32* %302 = OpAccessChain %9 %125 
                                         f32 %303 = OpLoad %302 
                                 Output f32* %305 = OpAccessChain %301 %125 
                                                      OpStore %305 %303 
                                       f32_4 %306 = OpLoad %27 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                         f32 %308 = OpLoad %99 
                                       f32_3 %309 = OpCompositeConstruct %308 %308 %308 
                                       f32_3 %310 = OpFMul %307 %309 
                                       f32_3 %311 = OpLoad %271 
                                       f32_3 %312 = OpFAdd %310 %311 
                                                      OpStore %271 %312 
                                Private f32* %314 = OpAccessChain %271 %160 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %271 %245 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %315 %317 
                                                      OpStore %313 %318 
                                        bool %321 = OpLoad %313 
                                                      OpSelectionMerge %323 None 
                                                      OpBranchConditional %321 %322 %324 
                                             %322 = OpLabel 
                                                      OpStore %320 %105 
                                                      OpBranch %323 
                                             %324 = OpLabel 
                                                      OpStore %320 %107 
                                                      OpBranch %323 
                                             %323 = OpLabel 
                                         f32 %325 = OpLoad %320 
                                                      OpStore %319 %325 
                                       f32_3 %326 = OpLoad %271 
                                       f32_2 %327 = OpVectorShuffle %326 %326 2 1 
                                       f32_2 %328 = OpFNegate %327 
                                       f32_3 %329 = OpLoad %271 
                                       f32_2 %330 = OpVectorShuffle %329 %329 1 2 
                                       f32_2 %331 = OpFAdd %328 %330 
                                       f32_3 %332 = OpLoad %23 
                                       f32_3 %333 = OpVectorShuffle %332 %331 3 4 2 
                                                      OpStore %23 %333 
                                Private f32* %336 = OpAccessChain %335 %73 
                                                      OpStore %336 %105 
                                Private f32* %338 = OpAccessChain %335 %160 
                                                      OpStore %338 %337 
                                         f32 %339 = OpLoad %319 
                                       f32_2 %340 = OpCompositeConstruct %339 %339 
                                       f32_3 %341 = OpLoad %23 
                                       f32_2 %342 = OpVectorShuffle %341 %341 0 1 
                                       f32_2 %343 = OpFMul %340 %342 
                                       f32_3 %344 = OpLoad %271 
                                       f32_2 %345 = OpVectorShuffle %344 %344 2 1 
                                       f32_2 %346 = OpFAdd %343 %345 
                                       f32_4 %347 = OpLoad %230 
                                       f32_4 %348 = OpVectorShuffle %347 %346 4 5 2 3 
                                                      OpStore %230 %348 
                                         f32 %349 = OpLoad %319 
                                       f32_2 %350 = OpCompositeConstruct %349 %349 
                                       f32_2 %351 = OpLoad %335 
                                       f32_2 %352 = OpFMul %350 %351 
                                       f32_2 %355 = OpFAdd %352 %354 
                                       f32_4 %356 = OpLoad %230 
                                       f32_4 %357 = OpVectorShuffle %356 %355 0 1 4 5 
                                                      OpStore %230 %357 
                                Private f32* %358 = OpAccessChain %271 %73 
                                         f32 %359 = OpLoad %358 
                                Private f32* %360 = OpAccessChain %230 %73 
                                         f32 %361 = OpLoad %360 
                                        bool %362 = OpFOrdGreaterThanEqual %359 %361 
                                                      OpStore %313 %362 
                                        bool %364 = OpLoad %313 
                                                      OpSelectionMerge %366 None 
                                                      OpBranchConditional %364 %365 %367 
                                             %365 = OpLabel 
                                                      OpStore %363 %105 
                                                      OpBranch %366 
                                             %367 = OpLabel 
                                                      OpStore %363 %107 
                                                      OpBranch %366 
                                             %366 = OpLabel 
                                         f32 %368 = OpLoad %363 
                                                      OpStore %319 %368 
                                       f32_4 %369 = OpLoad %230 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 3 
                                       f32_3 %371 = OpFNegate %370 
                                       f32_4 %372 = OpLoad %27 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %27 %373 
                                Private f32* %374 = OpAccessChain %271 %73 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpFNegate %375 
                                Private f32* %377 = OpAccessChain %27 %125 
                                                      OpStore %377 %376 
                                Private f32* %378 = OpAccessChain %27 %73 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %271 %73 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFAdd %379 %381 
                                Private f32* %383 = OpAccessChain %164 %73 
                                                      OpStore %383 %382 
                                       f32_4 %384 = OpLoad %27 
                                       f32_3 %385 = OpVectorShuffle %384 %384 1 2 3 
                                       f32_4 %386 = OpLoad %230 
                                       f32_3 %387 = OpVectorShuffle %386 %386 1 2 0 
                                       f32_3 %388 = OpFAdd %385 %387 
                                       f32_4 %389 = OpLoad %164 
                                       f32_4 %390 = OpVectorShuffle %389 %388 0 4 5 6 
                                                      OpStore %164 %390 
                                         f32 %391 = OpLoad %319 
                                       f32_3 %392 = OpCompositeConstruct %391 %391 %391 
                                       f32_4 %393 = OpLoad %164 
                                       f32_3 %394 = OpVectorShuffle %393 %393 0 1 2 
                                       f32_3 %395 = OpFMul %392 %394 
                                       f32_4 %396 = OpLoad %230 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 3 
                                       f32_3 %398 = OpFAdd %395 %397 
                                       f32_4 %399 = OpLoad %27 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %27 %400 
                                         f32 %401 = OpLoad %319 
                                Private f32* %402 = OpAccessChain %164 %125 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %401 %403 
                                Private f32* %405 = OpAccessChain %271 %73 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFAdd %404 %406 
                                                      OpStore %319 %407 
                                Private f32* %408 = OpAccessChain %27 %160 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpLoad %319 
                                         f32 %411 = OpExtInst %1 37 %409 %410 
                                                      OpStore %99 %411 
                                         f32 %412 = OpLoad %99 
                                         f32 %413 = OpFNegate %412 
                                Private f32* %414 = OpAccessChain %27 %73 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpFAdd %413 %415 
                                                      OpStore %99 %416 
                                Private f32* %417 = OpAccessChain %27 %160 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpFNegate %418 
                                         f32 %420 = OpLoad %319 
                                         f32 %421 = OpFAdd %419 %420 
                                                      OpStore %319 %421 
                                         f32 %423 = OpLoad %99 
                                         f32 %425 = OpFMul %423 %424 
                                         f32 %427 = OpFAdd %425 %426 
                                                      OpStore %422 %427 
                                         f32 %428 = OpLoad %319 
                                         f32 %429 = OpLoad %422 
                                         f32 %430 = OpFDiv %428 %429 
                                                      OpStore %319 %430 
                                         f32 %431 = OpLoad %319 
                                Private f32* %432 = OpAccessChain %27 %245 
                                         f32 %433 = OpLoad %432 
                                         f32 %434 = OpFAdd %431 %433 
                                                      OpStore %319 %434 
                                Private f32* %435 = OpAccessChain %27 %73 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpFAdd %436 %426 
                                                      OpStore %422 %437 
                                         f32 %438 = OpLoad %99 
                                         f32 %439 = OpLoad %422 
                                         f32 %440 = OpFDiv %438 %439 
                                                      OpStore %422 %440 
                                Private f32* %442 = OpAccessChain %9 %160 
                                         f32 %443 = OpLoad %442 
                                Private f32* %444 = OpAccessChain %9 %245 
                                         f32 %445 = OpLoad %444 
                                        bool %446 = OpFOrdGreaterThanEqual %443 %445 
                                                      OpStore %441 %446 
                                        bool %448 = OpLoad %441 
                                                      OpSelectionMerge %450 None 
                                                      OpBranchConditional %448 %449 %451 
                                             %449 = OpLabel 
                                                      OpStore %447 %105 
                                                      OpBranch %450 
                                             %451 = OpLabel 
                                                      OpStore %447 %107 
                                                      OpBranch %450 
                                             %450 = OpLabel 
                                         f32 %452 = OpLoad %447 
                                Private f32* %453 = OpAccessChain %335 %73 
                                                      OpStore %453 %452 
                                Private f32* %455 = OpAccessChain %9 %245 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpFNegate %456 
                                Private f32* %458 = OpAccessChain %9 %160 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFAdd %457 %459 
                                                      OpStore %454 %460 
                                Private f32* %462 = OpAccessChain %335 %73 
                                         f32 %463 = OpLoad %462 
                                         f32 %464 = OpLoad %454 
                                         f32 %465 = OpFMul %463 %464 
                                Private f32* %466 = OpAccessChain %9 %245 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFAdd %465 %467 
                                Private f32* %469 = OpAccessChain %461 %73 
                                                      OpStore %469 %468 
                                Private f32* %471 = OpAccessChain %9 %73 
                                         f32 %472 = OpLoad %471 
                                Private f32* %473 = OpAccessChain %461 %73 
                                         f32 %474 = OpLoad %473 
                                        bool %475 = OpFOrdGreaterThanEqual %472 %474 
                                                      OpStore %470 %475 
                                        bool %478 = OpLoad %470 
                                                      OpSelectionMerge %480 None 
                                                      OpBranchConditional %478 %479 %481 
                                             %479 = OpLabel 
                                                      OpStore %477 %105 
                                                      OpBranch %480 
                                             %481 = OpLabel 
                                                      OpStore %477 %107 
                                                      OpBranch %480 
                                             %480 = OpLabel 
                                         f32 %482 = OpLoad %477 
                                                      OpStore %476 %482 
                                Private f32* %484 = OpAccessChain %461 %73 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFNegate %485 
                                Private f32* %487 = OpAccessChain %9 %73 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpFAdd %486 %488 
                                Private f32* %490 = OpAccessChain %483 %73 
                                                      OpStore %490 %489 
                                         f32 %491 = OpLoad %476 
                                Private f32* %492 = OpAccessChain %483 %73 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFMul %491 %493 
                                Private f32* %495 = OpAccessChain %461 %73 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpFAdd %494 %496 
                                Private f32* %498 = OpAccessChain %483 %73 
                                                      OpStore %498 %497 
                                Private f32* %499 = OpAccessChain %483 %73 
                                         f32 %500 = OpLoad %499 
                                Uniform f32* %502 = OpAccessChain %34 %501 
                                         f32 %503 = OpLoad %502 
                                         f32 %504 = OpFMul %500 %503 
                                Private f32* %505 = OpAccessChain %461 %73 
                                                      OpStore %505 %504 
                                Private f32* %506 = OpAccessChain %461 %73 
                                         f32 %507 = OpLoad %506 
                                Private f32* %508 = OpAccessChain %27 %73 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpExtInst %1 40 %507 %509 
                                Private f32* %511 = OpAccessChain %461 %73 
                                                      OpStore %511 %510 
                                       f32_3 %512 = OpLoad %119 
                                         f32 %513 = OpDot %512 %88 
                                Private f32* %514 = OpAccessChain %271 %73 
                                                      OpStore %514 %513 
                                Private f32* %515 = OpAccessChain %271 %73 
                                         f32 %516 = OpLoad %515 
                                         f32 %518 = OpFMul %516 %517 
                                Private f32* %519 = OpAccessChain %483 %73 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFAdd %518 %520 
                                Private f32* %522 = OpAccessChain %483 %73 
                                                      OpStore %522 %521 
                                Private f32* %523 = OpAccessChain %483 %73 
                                         f32 %524 = OpLoad %523 
                                Uniform f32* %526 = OpAccessChain %34 %525 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpFMul %524 %527 
                                Private f32* %529 = OpAccessChain %483 %73 
                                                      OpStore %529 %528 
                                Private f32* %530 = OpAccessChain %483 %73 
                                         f32 %531 = OpLoad %530 
                                Private f32* %532 = OpAccessChain %461 %73 
                                         f32 %533 = OpLoad %532 
                                         f32 %534 = OpExtInst %1 37 %531 %533 
                                Private f32* %535 = OpAccessChain %483 %73 
                                                      OpStore %535 %534 
                                         f32 %536 = OpLoad %319 
                                       f32_3 %537 = OpCompositeConstruct %536 %536 %536 
                                       f32_3 %538 = OpExtInst %1 4 %537 
                                       f32_3 %541 = OpFAdd %538 %540 
                                                      OpStore %461 %541 
                                       f32_3 %542 = OpLoad %461 
                                       f32_3 %543 = OpExtInst %1 10 %542 
                                                      OpStore %461 %543 
                                       f32_3 %544 = OpLoad %461 
                                       f32_3 %546 = OpFMul %544 %545 
                                       f32_3 %549 = OpFAdd %546 %548 
                                                      OpStore %461 %549 
                                       f32_3 %550 = OpLoad %461 
                                       f32_3 %551 = OpExtInst %1 4 %550 
                                       f32_3 %553 = OpFAdd %551 %552 
                                                      OpStore %461 %553 
                                       f32_3 %554 = OpLoad %461 
                                       f32_3 %555 = OpCompositeConstruct %107 %107 %107 
                                       f32_3 %556 = OpCompositeConstruct %105 %105 %105 
                                       f32_3 %557 = OpExtInst %1 43 %554 %555 %556 
                                                      OpStore %461 %557 
                                       f32_3 %558 = OpLoad %461 
                                       f32_3 %559 = OpFAdd %558 %552 
                                                      OpStore %461 %559 
                                         f32 %560 = OpLoad %422 
                                       f32_3 %561 = OpCompositeConstruct %560 %560 %560 
                                       f32_3 %562 = OpLoad %461 
                                       f32_3 %563 = OpFMul %561 %562 
                                       f32_3 %565 = OpFAdd %563 %564 
                                                      OpStore %461 %565 
                                       f32_3 %566 = OpLoad %461 
                                       f32_3 %567 = OpLoad %483 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 0 0 
                                       f32_3 %569 = OpFMul %566 %568 
                                                      OpStore %483 %569 
                                       f32_3 %570 = OpLoad %483 
                                       f32_4 %571 = OpLoad %301 
                                       f32_4 %572 = OpVectorShuffle %571 %570 4 5 6 3 
                                                      OpStore %301 %572 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _EmissiveMap_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _EmissiveMap_ST.xy + _EmissiveMap_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _EmissiveGlowToggle;
uniform 	float _ValueMaximum;
uniform 	float _ValueMinimum;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _EmissiveMap;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat15;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat16_19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1.xyz = log2(u_xlat10_0.xyz);
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10_2 = texture(_EmissiveMap, vs_TEXCOORD0.zw);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xxx;
    u_xlat16_19 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlatb2 = _EmissiveGlowToggle>=0.100000001;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat16_19 = (-u_xlat16_19) + 0.100000024;
    u_xlat19 = u_xlat2.x * u_xlat16_19 + 1.0;
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat20 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb20 = u_xlat20<0.0;
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat20 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat20) + u_xlat3.x;
    u_xlat20 = unity_ShadowFadeCenterAndType.w * u_xlat3.x + u_xlat20;
    u_xlat20 = u_xlat20 * _LightShadowData.z + _LightShadowData.w;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlatb3 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat9.xyz = (bool(u_xlatb9)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat9.xyz = u_xlat9.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat9.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat9.x = u_xlat4.y * 0.25 + 0.75;
        u_xlat15.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat15.x, u_xlat9.x);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat9.x = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
    u_xlat15.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat15.xy);
    u_xlat20 = u_xlat20 + u_xlat10_4.x;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat9.x = min(u_xlat20, u_xlat9.x);
    u_xlat20 = (u_xlatb3) ? u_xlat9.x : u_xlat20;
    u_xlat3.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat20) * u_xlat4.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.w = u_xlat10_0.w;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat1.xyw = u_xlat1.yzx * vec3(u_xlat19) + u_xlat3.yzx;
    u_xlatb18 = u_xlat1.x>=u_xlat1.y;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat1.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.xy + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat18) * u_xlat5 + u_xlat4;
    u_xlatb18 = u_xlat1.w>=u_xlat4.x;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat1.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat1.wyx;
    u_xlat4 = (-u_xlat1) + u_xlat4;
    u_xlat1 = vec4(u_xlat18) * u_xlat4 + u_xlat1;
    u_xlat18 = min(u_xlat1.y, u_xlat1.w);
    u_xlat18 = (-u_xlat18) + u_xlat1.x;
    u_xlat7 = (-u_xlat1.y) + u_xlat1.w;
    u_xlat19 = u_xlat18 * 6.0 + 1.00000001e-010;
    u_xlat7 = u_xlat7 / u_xlat19;
    u_xlat7 = u_xlat7 + u_xlat1.z;
    u_xlat13 = u_xlat1.x + 1.00000001e-010;
    u_xlat18 = u_xlat18 / u_xlat13;
    u_xlatb13 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat16_6 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat6.x = u_xlat13 * u_xlat16_6 + u_xlat10_0.z;
    u_xlatb12 = u_xlat10_0.x>=u_xlat6.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat6.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat12 * u_xlat0 + u_xlat6.x;
    u_xlat6.x = u_xlat0 * _ValueMinimum;
    u_xlat6.x = max(u_xlat6.x, u_xlat1.x);
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0 = u_xlat12 * 50.0 + u_xlat0;
    u_xlat0 = u_xlat0 * _ValueMaximum;
    u_xlat0 = min(u_xlat0, u_xlat6.x);
    u_xlat1.xyz = abs(vec3(u_xlat7)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat6.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat3.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 334
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %92 %96 %97 %112 %128 %167 %170 %173 %293 %315 %327 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %167 Location 167 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %173 Location 173 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %293 Location 293 
                                                      OpDecorate %315 Location 315 
                                                      OpDecorate %327 Location 327 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %18 %19 %20 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 6 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 8 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                Output f32_4* %96 = OpVariable Output 
                                 Input f32_4* %97 = OpVariable Input 
                                              %98 = OpTypeVector %6 2 
                                         i32 %101 = OpConstant 9 
                                Input f32_4* %112 = OpVariable Input 
                                         i32 %115 = OpConstant 10 
                                             %126 = OpTypeVector %6 3 
                                             %127 = OpTypePointer Input %126 
                                Input f32_3* %128 = OpVariable Input 
                                         i32 %130 = OpConstant 7 
                                         u32 %135 = OpConstant 0 
                                             %136 = OpTypePointer Private %6 
                                         u32 %149 = OpConstant 2 
                                Private f32* %151 = OpVariable Private 
                                             %166 = OpTypePointer Output %126 
                               Output f32_3* %167 = OpVariable Output 
                               Output f32_3* %170 = OpVariable Output 
                               Output f32_4* %173 = OpVariable Output 
                              Private f32_4* %175 = OpVariable Private 
                              Private f32_4* %182 = OpVariable Private 
                              Private f32_4* %190 = OpVariable Private 
                                         f32 %226 = OpConstant 3.674022E-40 
                                       f32_4 %227 = OpConstantComposite %226 %226 %226 %226 
                                         i32 %232 = OpConstant 4 
                                         f32 %236 = OpConstant 3.674022E-40 
                                       f32_4 %237 = OpConstantComposite %236 %236 %236 %236 
                                         f32 %245 = OpConstant 3.674022E-40 
                                       f32_4 %246 = OpConstantComposite %245 %245 %245 %245 
                                         i32 %253 = OpConstant 5 
                               Output f32_3* %293 = OpVariable Output 
                                             %298 = OpTypePointer Uniform %6 
                                         f32 %305 = OpConstant 3.674022E-40 
                                         u32 %307 = OpConstant 3 
                                       f32_2 %311 = OpConstantComposite %305 %305 
                               Output f32_4* %315 = OpVariable Output 
                               Output f32_4* %327 = OpVariable Output 
                                             %328 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %81 = OpAccessChain %23 %63 %49 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %47 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %60 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %47 %87 
                                        f32_4 %93 = OpLoad %47 
                                Output f32_4* %95 = OpAccessChain %92 %31 
                                                      OpStore %95 %93 
                                        f32_4 %99 = OpLoad %97 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %101 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %100 %104 
                              Uniform f32_4* %106 = OpAccessChain %23 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                       f32_4 %110 = OpLoad %96 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 3 
                                                      OpStore %96 %111 
                                       f32_4 %113 = OpLoad %112 
                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
                              Uniform f32_4* %116 = OpAccessChain %23 %115 
                                       f32_4 %117 = OpLoad %116 
                                       f32_2 %118 = OpVectorShuffle %117 %117 0 1 
                                       f32_2 %119 = OpFMul %114 %118 
                              Uniform f32_4* %120 = OpAccessChain %23 %115 
                                       f32_4 %121 = OpLoad %120 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 3 
                                       f32_2 %123 = OpFAdd %119 %122 
                                       f32_4 %124 = OpLoad %96 
                                       f32_4 %125 = OpVectorShuffle %124 %123 0 1 4 5 
                                                      OpStore %96 %125 
                                       f32_3 %129 = OpLoad %128 
                              Uniform f32_4* %131 = OpAccessChain %23 %130 %31 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %129 %133 
                                Private f32* %137 = OpAccessChain %60 %135 
                                                      OpStore %137 %134 
                                       f32_3 %138 = OpLoad %128 
                              Uniform f32_4* %139 = OpAccessChain %23 %130 %26 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                         f32 %142 = OpDot %138 %141 
                                Private f32* %143 = OpAccessChain %60 %88 
                                                      OpStore %143 %142 
                                       f32_3 %144 = OpLoad %128 
                              Uniform f32_4* %145 = OpAccessChain %23 %130 %39 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %144 %147 
                                Private f32* %150 = OpAccessChain %60 %149 
                                                      OpStore %150 %148 
                                       f32_4 %152 = OpLoad %60 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_4 %154 = OpLoad %60 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                         f32 %156 = OpDot %153 %155 
                                                      OpStore %151 %156 
                                         f32 %157 = OpLoad %151 
                                         f32 %158 = OpExtInst %1 32 %157 
                                                      OpStore %151 %158 
                                         f32 %159 = OpLoad %151 
                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
                                       f32_4 %161 = OpLoad %60 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFMul %160 %162 
                                       f32_4 %164 = OpLoad %60 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %60 %165 
                                       f32_4 %168 = OpLoad %60 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                                      OpStore %167 %169 
                                       f32_4 %171 = OpLoad %9 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                                      OpStore %170 %172 
                                       f32_4 %174 = OpLoad %9 
                                                      OpStore %173 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 1 1 1 
                                       f32_4 %178 = OpFNegate %177 
                              Uniform f32_4* %179 = OpAccessChain %23 %39 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpFAdd %178 %180 
                                                      OpStore %175 %181 
                                       f32_4 %183 = OpLoad %60 
                                       f32_4 %184 = OpVectorShuffle %183 %183 1 1 1 1 
                                       f32_4 %185 = OpLoad %175 
                                       f32_4 %186 = OpFMul %184 %185 
                                                      OpStore %182 %186 
                                       f32_4 %187 = OpLoad %175 
                                       f32_4 %188 = OpLoad %175 
                                       f32_4 %189 = OpFMul %187 %188 
                                                      OpStore %175 %189 
                                       f32_4 %191 = OpLoad %9 
                                       f32_4 %192 = OpVectorShuffle %191 %191 0 0 0 0 
                                       f32_4 %193 = OpFNegate %192 
                              Uniform f32_4* %194 = OpAccessChain %23 %26 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpFAdd %193 %195 
                                                      OpStore %190 %196 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %197 2 2 2 2 
                                       f32_4 %199 = OpFNegate %198 
                              Uniform f32_4* %200 = OpAccessChain %23 %49 
                                       f32_4 %201 = OpLoad %200 
                                       f32_4 %202 = OpFAdd %199 %201 
                                                      OpStore %9 %202 
                                       f32_4 %203 = OpLoad %190 
                                       f32_4 %204 = OpLoad %60 
                                       f32_4 %205 = OpVectorShuffle %204 %204 0 0 0 0 
                                       f32_4 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %182 
                                       f32_4 %208 = OpFAdd %206 %207 
                                                      OpStore %182 %208 
                                       f32_4 %209 = OpLoad %9 
                                       f32_4 %210 = OpLoad %60 
                                       f32_4 %211 = OpVectorShuffle %210 %210 2 2 2 2 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %182 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %60 %214 
                                       f32_4 %215 = OpLoad %190 
                                       f32_4 %216 = OpLoad %190 
                                       f32_4 %217 = OpFMul %215 %216 
                                       f32_4 %218 = OpLoad %175 
                                       f32_4 %219 = OpFAdd %217 %218 
                                                      OpStore %175 %219 
                                       f32_4 %220 = OpLoad %9 
                                       f32_4 %221 = OpLoad %9 
                                       f32_4 %222 = OpFMul %220 %221 
                                       f32_4 %223 = OpLoad %175 
                                       f32_4 %224 = OpFAdd %222 %223 
                                                      OpStore %9 %224 
                                       f32_4 %225 = OpLoad %9 
                                       f32_4 %228 = OpExtInst %1 40 %225 %227 
                                                      OpStore %9 %228 
                                       f32_4 %229 = OpLoad %9 
                                       f32_4 %230 = OpExtInst %1 32 %229 
                                                      OpStore %175 %230 
                                       f32_4 %231 = OpLoad %9 
                              Uniform f32_4* %233 = OpAccessChain %23 %232 
                                       f32_4 %234 = OpLoad %233 
                                       f32_4 %235 = OpFMul %231 %234 
                                       f32_4 %238 = OpFAdd %235 %237 
                                                      OpStore %9 %238 
                                       f32_4 %239 = OpLoad %9 
                                       f32_4 %240 = OpFDiv %237 %239 
                                                      OpStore %9 %240 
                                       f32_4 %241 = OpLoad %60 
                                       f32_4 %242 = OpLoad %175 
                                       f32_4 %243 = OpFMul %241 %242 
                                                      OpStore %60 %243 
                                       f32_4 %244 = OpLoad %60 
                                       f32_4 %247 = OpExtInst %1 40 %244 %246 
                                                      OpStore %60 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_4 %249 = OpLoad %60 
                                       f32_4 %250 = OpFMul %248 %249 
                                                      OpStore %9 %250 
                                       f32_4 %251 = OpLoad %9 
                                       f32_3 %252 = OpVectorShuffle %251 %251 1 1 1 
                              Uniform f32_4* %254 = OpAccessChain %23 %253 %26 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFMul %252 %256 
                                       f32_4 %258 = OpLoad %60 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %60 %259 
                              Uniform f32_4* %260 = OpAccessChain %23 %253 %31 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_4 %263 = OpLoad %9 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 0 0 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %60 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFAdd %265 %267 
                                       f32_4 %269 = OpLoad %60 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 6 3 
                                                      OpStore %60 %270 
                              Uniform f32_4* %271 = OpAccessChain %23 %253 %39 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_4 %274 = OpLoad %9 
                                       f32_3 %275 = OpVectorShuffle %274 %274 2 2 2 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_4 %277 = OpLoad %60 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFAdd %276 %278 
                                       f32_4 %280 = OpLoad %9 
                                       f32_4 %281 = OpVectorShuffle %280 %279 4 5 6 3 
                                                      OpStore %9 %281 
                              Uniform f32_4* %282 = OpAccessChain %23 %253 %49 
                                       f32_4 %283 = OpLoad %282 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_4 %285 = OpLoad %9 
                                       f32_3 %286 = OpVectorShuffle %285 %285 3 3 3 
                                       f32_3 %287 = OpFMul %284 %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFAdd %287 %289 
                                       f32_4 %291 = OpLoad %9 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 6 3 
                                                      OpStore %9 %292 
                                       f32_4 %294 = OpLoad %9 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                                      OpStore %293 %295 
                                Private f32* %296 = OpAccessChain %47 %88 
                                         f32 %297 = OpLoad %296 
                                Uniform f32* %299 = OpAccessChain %23 %31 %135 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFMul %297 %300 
                                Private f32* %302 = OpAccessChain %9 %135 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %9 %135 
                                         f32 %304 = OpLoad %303 
                                         f32 %306 = OpFMul %304 %305 
                                Private f32* %308 = OpAccessChain %9 %307 
                                                      OpStore %308 %306 
                                       f32_4 %309 = OpLoad %47 
                                       f32_2 %310 = OpVectorShuffle %309 %309 0 3 
                                       f32_2 %312 = OpFMul %310 %311 
                                       f32_4 %313 = OpLoad %9 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 1 5 3 
                                                      OpStore %9 %314 
                                       f32_4 %316 = OpLoad %47 
                                       f32_2 %317 = OpVectorShuffle %316 %316 2 3 
                                       f32_4 %318 = OpLoad %315 
                                       f32_4 %319 = OpVectorShuffle %318 %317 0 1 4 5 
                                                      OpStore %315 %319 
                                       f32_4 %320 = OpLoad %9 
                                       f32_2 %321 = OpVectorShuffle %320 %320 2 2 
                                       f32_4 %322 = OpLoad %9 
                                       f32_2 %323 = OpVectorShuffle %322 %322 0 3 
                                       f32_2 %324 = OpFAdd %321 %323 
                                       f32_4 %325 = OpLoad %315 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 2 3 
                                                      OpStore %315 %326 
                                                      OpStore %327 %246 
                                 Output f32* %329 = OpAccessChain %92 %31 %88 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFNegate %330 
                                 Output f32* %332 = OpAccessChain %92 %31 %88 
                                                      OpStore %332 %331 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 666
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %151 %333 %387 %393 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %31 ArrayStride 31 
                                                      OpDecorate %32 ArrayStride 32 
                                                      OpMemberDecorate %33 0 Offset 33 
                                                      OpMemberDecorate %33 1 RelaxedPrecision 
                                                      OpMemberDecorate %33 1 Offset 33 
                                                      OpMemberDecorate %33 2 RelaxedPrecision 
                                                      OpMemberDecorate %33 2 Offset 33 
                                                      OpMemberDecorate %33 3 Offset 33 
                                                      OpMemberDecorate %33 4 Offset 33 
                                                      OpMemberDecorate %33 5 Offset 33 
                                                      OpMemberDecorate %33 6 Offset 33 
                                                      OpMemberDecorate %33 7 Offset 33 
                                                      OpMemberDecorate %33 8 Offset 33 
                                                      OpMemberDecorate %33 9 RelaxedPrecision 
                                                      OpMemberDecorate %33 9 Offset 33 
                                                      OpMemberDecorate %33 10 Offset 33 
                                                      OpMemberDecorate %33 11 Offset 33 
                                                      OpMemberDecorate %33 12 Offset 33 
                                                      OpMemberDecorate %33 13 Offset 33 
                                                      OpMemberDecorate %33 14 Offset 33 
                                                      OpMemberDecorate %33 15 RelaxedPrecision 
                                                      OpMemberDecorate %33 15 Offset 33 
                                                      OpDecorate %33 Block 
                                                      OpDecorate %35 DescriptorSet 35 
                                                      OpDecorate %35 Binding 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %232 SpecId 232 
                                                      OpDecorate %312 DescriptorSet 312 
                                                      OpDecorate %312 Binding 312 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %342 DescriptorSet 342 
                                                      OpDecorate %342 Binding 342 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %387 Location 387 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %393 Location 393 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %559 RelaxedPrecision 
                                                      OpDecorate %564 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
                               Private f32_4* %27 = OpVariable Private 
                                              %29 = OpTypeInt 32 0 
                                          u32 %30 = OpConstant 4 
                                              %31 = OpTypeArray %7 %30 
                                              %32 = OpTypeArray %7 %30 
                                              %33 = OpTypeStruct %21 %7 %7 %7 %31 %7 %32 %21 %21 %7 %6 %6 %6 %6 %6 %6 
                                              %34 = OpTypePointer Uniform %33 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32;}* %35 = OpVariable Uniform 
                                              %36 = OpTypeInt 32 1 
                                          i32 %37 = OpConstant 11 
                                              %38 = OpTypePointer Uniform %6 
                                          i32 %60 = OpConstant 10 
                                              %67 = OpTypePointer Private %6 
                                 Private f32* %68 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %69 = OpVariable UniformConstant 
                                          u32 %74 = OpConstant 0 
                               Private f32_4* %83 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %88 = OpConstant 3.674022E-40 
                                        f32_3 %89 = OpConstantComposite %86 %87 %88 
                                              %92 = OpTypeBool 
                                              %93 = OpTypePointer Private %92 
                                Private bool* %94 = OpVariable Private 
                                          i32 %95 = OpConstant 12 
                                          f32 %98 = OpConstant 3.674022E-40 
                                Private f32* %100 = OpVariable Private 
                                             %101 = OpTypePointer Function %6 
                                         f32 %106 = OpConstant 3.674022E-40 
                                         f32 %108 = OpConstant 3.674022E-40 
                                Private f32* %110 = OpVariable Private 
                                         f32 %114 = OpConstant 3.674022E-40 
                              Private f32_3* %120 = OpVariable Private 
                                         u32 %126 = OpConstant 3 
                                         i32 %129 = OpConstant 15 
                               Private bool* %135 = OpVariable Private 
                                         i32 %140 = OpConstant 0 
                                         i32 %141 = OpConstant 1 
                                         i32 %143 = OpConstant -1 
                              Private f32_4* %149 = OpVariable Private 
                                             %150 = OpTypePointer Input %21 
                                Input f32_3* %151 = OpVariable Input 
                                             %154 = OpTypePointer Uniform %21 
                              Private f32_3* %160 = OpVariable Private 
                                         i32 %161 = OpConstant 4 
                                         u32 %162 = OpConstant 2 
                                         u32 %168 = OpConstant 1 
                                         i32 %170 = OpConstant 2 
                                Private f32* %174 = OpVariable Private 
                                         i32 %180 = OpConstant 3 
                                             %181 = OpTypePointer Uniform %7 
                               Private bool* %221 = OpVariable Private 
                                         i32 %222 = OpConstant 5 
                                        bool %226 = OpConstantFalse 
                                        bool %232 = OpSpecConstantFalse 
                               Private bool* %235 = OpVariable Private 
                                         i32 %241 = OpConstant 6 
                              Private f32_3* %267 = OpVariable Private 
                                             %268 = OpTypePointer Function %21 
                                         i32 %278 = OpConstant 8 
                              Private f32_4* %283 = OpVariable Private 
                                         i32 %285 = OpConstant 7 
                                         f32 %293 = OpConstant 3.674022E-40 
                                         f32 %295 = OpConstant 3.674022E-40 
                                Private f32* %298 = OpVariable Private 
                                         f32 %301 = OpConstant 3.674022E-40 
                                             %309 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %310 = OpTypeSampledImage %309 
                                             %311 = OpTypePointer UniformConstant %310 
 UniformConstant read_only Texture3DSampled* %312 = OpVariable UniformConstant 
                              Private f32_3* %323 = OpVariable Private 
                                Input f32_4* %333 = OpVariable Input 
                                Private f32* %341 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %342 = OpVariable UniformConstant 
                              Private f32_3* %348 = OpVariable Private 
                                         i32 %376 = OpConstant 9 
                                Input f32_3* %387 = OpVariable Input 
                                             %392 = OpTypePointer Output %7 
                               Output f32_4* %393 = OpVariable Output 
                                             %396 = OpTypePointer Output %6 
                               Private bool* %405 = OpVariable Private 
                                Private f32* %411 = OpVariable Private 
                                             %426 = OpTypePointer Private %17 
                              Private f32_2* %427 = OpVariable Private 
                                         f32 %429 = OpConstant 3.674022E-40 
                                         f32 %445 = OpConstant 3.674022E-40 
                                       f32_2 %446 = OpConstantComposite %429 %445 
                                Private f32* %514 = OpVariable Private 
                                         f32 %516 = OpConstant 3.674022E-40 
                                         f32 %518 = OpConstant 3.674022E-40 
                               Private bool* %533 = OpVariable Private 
                                Private f32* %546 = OpVariable Private 
                              Private f32_3* %553 = OpVariable Private 
                               Private bool* %562 = OpVariable Private 
                                Private f32* %568 = OpVariable Private 
                              Private f32_3* %575 = OpVariable Private 
                                         i32 %593 = OpConstant 14 
                                         f32 %609 = OpConstant 3.674022E-40 
                                         i32 %617 = OpConstant 13 
                                         f32 %631 = OpConstant 3.674022E-40 
                                       f32_3 %632 = OpConstantComposite %106 %445 %631 
                                       f32_3 %637 = OpConstantComposite %516 %516 %516 
                                         f32 %639 = OpConstant 3.674022E-40 
                                       f32_3 %640 = OpConstantComposite %639 %639 %639 
                                       f32_3 %644 = OpConstantComposite %429 %429 %429 
                                       f32_3 %656 = OpConstantComposite %106 %106 %106 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %102 = OpVariable Function 
                             Function f32_3* %269 = OpVariable Function 
                               Function f32* %363 = OpVariable Function 
                               Function f32* %412 = OpVariable Function 
                               Function f32* %455 = OpVariable Function 
                               Function f32* %539 = OpVariable Function 
                               Function f32* %569 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                                        f32_4 %24 = OpLoad %9 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpExtInst %1 30 %25 
                                                      OpStore %23 %26 
                                        f32_3 %28 = OpLoad %23 
                                 Uniform f32* %39 = OpAccessChain %35 %37 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %41 = OpAccessChain %35 %37 
                                          f32 %42 = OpLoad %41 
                                 Uniform f32* %43 = OpAccessChain %35 %37 
                                          f32 %44 = OpLoad %43 
                                        f32_3 %45 = OpCompositeConstruct %40 %42 %44 
                                          f32 %46 = OpCompositeExtract %45 0 
                                          f32 %47 = OpCompositeExtract %45 1 
                                          f32 %48 = OpCompositeExtract %45 2 
                                        f32_3 %49 = OpCompositeConstruct %46 %47 %48 
                                        f32_3 %50 = OpFMul %28 %49 
                                        f32_4 %51 = OpLoad %27 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %27 %52 
                                        f32_4 %53 = OpLoad %27 
                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                                        f32_3 %55 = OpExtInst %1 29 %54 
                                        f32_4 %56 = OpLoad %27 
                                        f32_4 %57 = OpVectorShuffle %56 %55 4 5 6 3 
                                                      OpStore %27 %57 
                                        f32_4 %58 = OpLoad %27 
                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                 Uniform f32* %61 = OpAccessChain %35 %60 
                                          f32 %62 = OpLoad %61 
                                        f32_3 %63 = OpCompositeConstruct %62 %62 %62 
                                        f32_3 %64 = OpFMul %59 %63 
                                        f32_4 %65 = OpLoad %27 
                                        f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                                      OpStore %27 %66 
                   read_only Texture2DSampled %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %16 
                                        f32_2 %72 = OpVectorShuffle %71 %71 2 3 
                                        f32_4 %73 = OpImageSampleImplicitLod %70 %72 
                                          f32 %75 = OpCompositeExtract %73 0 
                                                      OpStore %68 %75 
                                          f32 %76 = OpLoad %68 
                                        f32_3 %77 = OpCompositeConstruct %76 %76 %76 
                                        f32_4 %78 = OpLoad %27 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %27 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %27 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                          f32 %90 = OpDot %85 %89 
                                 Private f32* %91 = OpAccessChain %83 %74 
                                                      OpStore %91 %90 
                                 Uniform f32* %96 = OpAccessChain %35 %95 
                                          f32 %97 = OpLoad %96 
                                         bool %99 = OpFOrdGreaterThanEqual %97 %98 
                                                      OpStore %94 %99 
                                        bool %103 = OpLoad %94 
                                                      OpSelectionMerge %105 None 
                                                      OpBranchConditional %103 %104 %107 
                                             %104 = OpLabel 
                                                      OpStore %102 %106 
                                                      OpBranch %105 
                                             %107 = OpLabel 
                                                      OpStore %102 %108 
                                                      OpBranch %105 
                                             %105 = OpLabel 
                                         f32 %109 = OpLoad %102 
                                                      OpStore %100 %109 
                                Private f32* %111 = OpAccessChain %83 %74 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFNegate %112 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %110 %115 
                                         f32 %116 = OpLoad %100 
                                         f32 %117 = OpLoad %110 
                                         f32 %118 = OpFMul %116 %117 
                                         f32 %119 = OpFAdd %118 %106 
                                                      OpStore %100 %119 
                                         f32 %121 = OpLoad %100 
                                       f32_3 %122 = OpCompositeConstruct %121 %121 %121 
                                       f32_4 %123 = OpLoad %27 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_3 %125 = OpFMul %122 %124 
                                                      OpStore %120 %125 
                                Private f32* %127 = OpAccessChain %9 %126 
                                         f32 %128 = OpLoad %127 
                                Uniform f32* %130 = OpAccessChain %35 %129 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFNegate %131 
                                         f32 %133 = OpFAdd %128 %132 
                                Private f32* %134 = OpAccessChain %83 %74 
                                                      OpStore %134 %133 
                                Private f32* %136 = OpAccessChain %83 %74 
                                         f32 %137 = OpLoad %136 
                                        bool %138 = OpFOrdLessThan %137 %108 
                                                      OpStore %135 %138 
                                        bool %139 = OpLoad %135 
                                         i32 %142 = OpSelect %139 %141 %140 
                                         i32 %144 = OpIMul %142 %143 
                                        bool %145 = OpINotEqual %144 %140 
                                                      OpSelectionMerge %147 None 
                                                      OpBranchConditional %145 %146 %147 
                                             %146 = OpLabel 
                                                      OpKill
                                             %147 = OpLabel 
                                       f32_3 %152 = OpLoad %151 
                                       f32_3 %153 = OpFNegate %152 
                              Uniform f32_3* %155 = OpAccessChain %35 %140 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %149 
                                       f32_4 %159 = OpVectorShuffle %158 %157 4 5 6 3 
                                                      OpStore %149 %159 
                                Uniform f32* %163 = OpAccessChain %35 %161 %140 %162 
                                         f32 %164 = OpLoad %163 
                                Private f32* %165 = OpAccessChain %160 %74 
                                                      OpStore %165 %164 
                                Uniform f32* %166 = OpAccessChain %35 %161 %141 %162 
                                         f32 %167 = OpLoad %166 
                                Private f32* %169 = OpAccessChain %160 %168 
                                                      OpStore %169 %167 
                                Uniform f32* %171 = OpAccessChain %35 %161 %170 %162 
                                         f32 %172 = OpLoad %171 
                                Private f32* %173 = OpAccessChain %160 %162 
                                                      OpStore %173 %172 
                                       f32_4 %175 = OpLoad %149 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpLoad %160 
                                         f32 %178 = OpDot %176 %177 
                                                      OpStore %174 %178 
                                       f32_3 %179 = OpLoad %151 
                              Uniform f32_4* %182 = OpAccessChain %35 %180 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %179 %185 
                                       f32_4 %187 = OpLoad %149 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %149 %188 
                                       f32_4 %189 = OpLoad %149 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %149 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                Private f32* %194 = OpAccessChain %149 %74 
                                                      OpStore %194 %193 
                                Private f32* %195 = OpAccessChain %149 %74 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 31 %196 
                                Private f32* %198 = OpAccessChain %149 %74 
                                                      OpStore %198 %197 
                                         f32 %199 = OpLoad %174 
                                         f32 %200 = OpFNegate %199 
                                Private f32* %201 = OpAccessChain %149 %74 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFAdd %200 %202 
                                Private f32* %204 = OpAccessChain %149 %74 
                                                      OpStore %204 %203 
                                Uniform f32* %205 = OpAccessChain %35 %180 %126 
                                         f32 %206 = OpLoad %205 
                                Private f32* %207 = OpAccessChain %149 %74 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFMul %206 %208 
                                         f32 %210 = OpLoad %174 
                                         f32 %211 = OpFAdd %209 %210 
                                                      OpStore %174 %211 
                                         f32 %212 = OpLoad %174 
                                Uniform f32* %213 = OpAccessChain %35 %170 %162 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFMul %212 %214 
                                Uniform f32* %216 = OpAccessChain %35 %170 %126 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFAdd %215 %217 
                                                      OpStore %174 %218 
                                         f32 %219 = OpLoad %174 
                                         f32 %220 = OpExtInst %1 43 %219 %108 %106 
                                                      OpStore %174 %220 
                                Uniform f32* %223 = OpAccessChain %35 %222 %74 
                                         f32 %224 = OpLoad %223 
                                        bool %225 = OpFOrdEqual %224 %106 
                                                      OpStore %221 %225 
                                                      OpSelectionMerge %228 None 
                                                      OpBranchConditional %226 %227 %228 
                                             %227 = OpLabel 
                                        bool %229 = OpLoad %221 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %229 %230 %231 
                                             %230 = OpLabel 
                                                      OpBranch %231 
                                             %231 = OpLabel 
                                                      OpBranch %228 
                                             %228 = OpLabel 
                                                      OpSelectionMerge %234 None 
                                                      OpBranchConditional %232 %233 %318 
                                             %233 = OpLabel 
                                Uniform f32* %236 = OpAccessChain %35 %222 %168 
                                         f32 %237 = OpLoad %236 
                                        bool %238 = OpFOrdEqual %237 %106 
                                                      OpStore %235 %238 
                                       f32_3 %239 = OpLoad %151 
                                       f32_3 %240 = OpVectorShuffle %239 %239 1 1 1 
                              Uniform f32_4* %242 = OpAccessChain %35 %241 %141 
                                       f32_4 %243 = OpLoad %242 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpFMul %240 %244 
                                                      OpStore %160 %245 
                              Uniform f32_4* %246 = OpAccessChain %35 %241 %140 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpLoad %151 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 0 0 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %252 = OpLoad %160 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %160 %253 
                              Uniform f32_4* %254 = OpAccessChain %35 %241 %170 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpLoad %151 
                                       f32_3 %258 = OpVectorShuffle %257 %257 2 2 2 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %160 
                                       f32_3 %261 = OpFAdd %259 %260 
                                                      OpStore %160 %261 
                                       f32_3 %262 = OpLoad %160 
                              Uniform f32_4* %263 = OpAccessChain %35 %241 %180 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %266 = OpFAdd %262 %265 
                                                      OpStore %160 %266 
                                        bool %270 = OpLoad %235 
                                                      OpSelectionMerge %272 None 
                                                      OpBranchConditional %270 %271 %274 
                                             %271 = OpLabel 
                                       f32_3 %273 = OpLoad %160 
                                                      OpStore %269 %273 
                                                      OpBranch %272 
                                             %274 = OpLabel 
                                       f32_3 %275 = OpLoad %151 
                                                      OpStore %269 %275 
                                                      OpBranch %272 
                                             %272 = OpLabel 
                                       f32_3 %276 = OpLoad %269 
                                                      OpStore %267 %276 
                                       f32_3 %277 = OpLoad %267 
                              Uniform f32_3* %279 = OpAccessChain %35 %278 
                                       f32_3 %280 = OpLoad %279 
                                       f32_3 %281 = OpFNegate %280 
                                       f32_3 %282 = OpFAdd %277 %281 
                                                      OpStore %267 %282 
                                       f32_3 %284 = OpLoad %267 
                              Uniform f32_3* %286 = OpAccessChain %35 %285 
                                       f32_3 %287 = OpLoad %286 
                                       f32_3 %288 = OpFMul %284 %287 
                                       f32_4 %289 = OpLoad %283 
                                       f32_4 %290 = OpVectorShuffle %289 %288 0 4 5 6 
                                                      OpStore %283 %290 
                                Private f32* %291 = OpAccessChain %283 %168 
                                         f32 %292 = OpLoad %291 
                                         f32 %294 = OpFMul %292 %293 
                                         f32 %296 = OpFAdd %294 %295 
                                Private f32* %297 = OpAccessChain %267 %74 
                                                      OpStore %297 %296 
                                Uniform f32* %299 = OpAccessChain %35 %222 %162 
                                         f32 %300 = OpLoad %299 
                                         f32 %302 = OpFMul %300 %301 
                                         f32 %303 = OpFAdd %302 %295 
                                                      OpStore %298 %303 
                                         f32 %304 = OpLoad %298 
                                Private f32* %305 = OpAccessChain %267 %74 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpExtInst %1 40 %304 %306 
                                Private f32* %308 = OpAccessChain %283 %74 
                                                      OpStore %308 %307 
                  read_only Texture3DSampled %313 = OpLoad %312 
                                       f32_4 %314 = OpLoad %283 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 2 3 
                                       f32_4 %316 = OpImageSampleImplicitLod %313 %315 
                                                      OpStore %283 %316 
                                       f32_4 %317 = OpLoad %283 
                                                      OpStore %83 %317 
                                                      OpBranch %234 
                                             %318 = OpLabel 
                                Private f32* %319 = OpAccessChain %83 %74 
                                                      OpStore %319 %106 
                                Private f32* %320 = OpAccessChain %83 %168 
                                                      OpStore %320 %106 
                                Private f32* %321 = OpAccessChain %83 %162 
                                                      OpStore %321 %106 
                                Private f32* %322 = OpAccessChain %83 %126 
                                                      OpStore %322 %106 
                                                      OpBranch %234 
                                             %234 = OpLabel 
                                       f32_4 %324 = OpLoad %83 
                              Uniform f32_4* %325 = OpAccessChain %35 %141 
                                       f32_4 %326 = OpLoad %325 
                                         f32 %327 = OpDot %324 %326 
                                Private f32* %328 = OpAccessChain %323 %74 
                                                      OpStore %328 %327 
                                Private f32* %329 = OpAccessChain %323 %74 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpExtInst %1 43 %330 %108 %106 
                                Private f32* %332 = OpAccessChain %323 %74 
                                                      OpStore %332 %331 
                                       f32_4 %334 = OpLoad %333 
                                       f32_2 %335 = OpVectorShuffle %334 %334 0 1 
                                       f32_4 %336 = OpLoad %333 
                                       f32_2 %337 = OpVectorShuffle %336 %336 3 3 
                                       f32_2 %338 = OpFDiv %335 %337 
                                       f32_3 %339 = OpLoad %267 
                                       f32_3 %340 = OpVectorShuffle %339 %338 3 4 2 
                                                      OpStore %267 %340 
                  read_only Texture2DSampled %343 = OpLoad %342 
                                       f32_3 %344 = OpLoad %267 
                                       f32_2 %345 = OpVectorShuffle %344 %344 0 1 
                                       f32_4 %346 = OpImageSampleImplicitLod %343 %345 
                                         f32 %347 = OpCompositeExtract %346 0 
                                                      OpStore %341 %347 
                                         f32 %349 = OpLoad %174 
                                         f32 %350 = OpLoad %341 
                                         f32 %351 = OpFAdd %349 %350 
                                Private f32* %352 = OpAccessChain %348 %74 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %348 %74 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpExtInst %1 43 %354 %108 %106 
                                Private f32* %356 = OpAccessChain %348 %74 
                                                      OpStore %356 %355 
                                Private f32* %357 = OpAccessChain %348 %74 
                                         f32 %358 = OpLoad %357 
                                Private f32* %359 = OpAccessChain %323 %74 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpExtInst %1 37 %358 %360 
                                Private f32* %362 = OpAccessChain %323 %74 
                                                      OpStore %362 %361 
                                        bool %364 = OpLoad %221 
                                                      OpSelectionMerge %366 None 
                                                      OpBranchConditional %364 %365 %369 
                                             %365 = OpLabel 
                                Private f32* %367 = OpAccessChain %323 %74 
                                         f32 %368 = OpLoad %367 
                                                      OpStore %363 %368 
                                                      OpBranch %366 
                                             %369 = OpLabel 
                                Private f32* %370 = OpAccessChain %348 %74 
                                         f32 %371 = OpLoad %370 
                                                      OpStore %363 %371 
                                                      OpBranch %366 
                                             %366 = OpLabel 
                                         f32 %372 = OpLoad %363 
                                Private f32* %373 = OpAccessChain %323 %74 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                              Uniform f32_4* %377 = OpAccessChain %35 %376 
                                       f32_4 %378 = OpLoad %377 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFMul %375 %379 
                                                      OpStore %348 %380 
                                       f32_3 %381 = OpLoad %323 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 0 0 
                                       f32_3 %383 = OpLoad %348 
                                       f32_3 %384 = OpFMul %382 %383 
                                                      OpStore %323 %384 
                                       f32_4 %385 = OpLoad %9 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_3 %388 = OpLoad %387 
                                       f32_3 %389 = OpFMul %386 %388 
                                       f32_3 %390 = OpLoad %323 
                                       f32_3 %391 = OpFAdd %389 %390 
                                                      OpStore %323 %391 
                                Private f32* %394 = OpAccessChain %9 %126 
                                         f32 %395 = OpLoad %394 
                                 Output f32* %397 = OpAccessChain %393 %126 
                                                      OpStore %397 %395 
                                       f32_4 %398 = OpLoad %27 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                         f32 %400 = OpLoad %100 
                                       f32_3 %401 = OpCompositeConstruct %400 %400 %400 
                                       f32_3 %402 = OpFMul %399 %401 
                                       f32_3 %403 = OpLoad %323 
                                       f32_3 %404 = OpFAdd %402 %403 
                                                      OpStore %323 %404 
                                Private f32* %406 = OpAccessChain %323 %168 
                                         f32 %407 = OpLoad %406 
                                Private f32* %408 = OpAccessChain %323 %162 
                                         f32 %409 = OpLoad %408 
                                        bool %410 = OpFOrdGreaterThanEqual %407 %409 
                                                      OpStore %405 %410 
                                        bool %413 = OpLoad %405 
                                                      OpSelectionMerge %415 None 
                                                      OpBranchConditional %413 %414 %416 
                                             %414 = OpLabel 
                                                      OpStore %412 %106 
                                                      OpBranch %415 
                                             %416 = OpLabel 
                                                      OpStore %412 %108 
                                                      OpBranch %415 
                                             %415 = OpLabel 
                                         f32 %417 = OpLoad %412 
                                                      OpStore %411 %417 
                                       f32_3 %418 = OpLoad %323 
                                       f32_2 %419 = OpVectorShuffle %418 %418 2 1 
                                       f32_2 %420 = OpFNegate %419 
                                       f32_3 %421 = OpLoad %323 
                                       f32_2 %422 = OpVectorShuffle %421 %421 1 2 
                                       f32_2 %423 = OpFAdd %420 %422 
                                       f32_3 %424 = OpLoad %23 
                                       f32_3 %425 = OpVectorShuffle %424 %423 3 4 2 
                                                      OpStore %23 %425 
                                Private f32* %428 = OpAccessChain %427 %74 
                                                      OpStore %428 %106 
                                Private f32* %430 = OpAccessChain %427 %168 
                                                      OpStore %430 %429 
                                         f32 %431 = OpLoad %411 
                                       f32_2 %432 = OpCompositeConstruct %431 %431 
                                       f32_3 %433 = OpLoad %23 
                                       f32_2 %434 = OpVectorShuffle %433 %433 0 1 
                                       f32_2 %435 = OpFMul %432 %434 
                                       f32_3 %436 = OpLoad %323 
                                       f32_2 %437 = OpVectorShuffle %436 %436 2 1 
                                       f32_2 %438 = OpFAdd %435 %437 
                                       f32_4 %439 = OpLoad %283 
                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 2 3 
                                                      OpStore %283 %440 
                                         f32 %441 = OpLoad %411 
                                       f32_2 %442 = OpCompositeConstruct %441 %441 
                                       f32_2 %443 = OpLoad %427 
                                       f32_2 %444 = OpFMul %442 %443 
                                       f32_2 %447 = OpFAdd %444 %446 
                                       f32_4 %448 = OpLoad %283 
                                       f32_4 %449 = OpVectorShuffle %448 %447 0 1 4 5 
                                                      OpStore %283 %449 
                                Private f32* %450 = OpAccessChain %323 %74 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %283 %74 
                                         f32 %453 = OpLoad %452 
                                        bool %454 = OpFOrdGreaterThanEqual %451 %453 
                                                      OpStore %405 %454 
                                        bool %456 = OpLoad %405 
                                                      OpSelectionMerge %458 None 
                                                      OpBranchConditional %456 %457 %459 
                                             %457 = OpLabel 
                                                      OpStore %455 %106 
                                                      OpBranch %458 
                                             %459 = OpLabel 
                                                      OpStore %455 %108 
                                                      OpBranch %458 
                                             %458 = OpLabel 
                                         f32 %460 = OpLoad %455 
                                                      OpStore %411 %460 
                                       f32_4 %461 = OpLoad %283 
                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 3 
                                       f32_3 %463 = OpFNegate %462 
                                       f32_4 %464 = OpLoad %27 
                                       f32_4 %465 = OpVectorShuffle %464 %463 4 5 6 3 
                                                      OpStore %27 %465 
                                Private f32* %466 = OpAccessChain %323 %74 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFNegate %467 
                                Private f32* %469 = OpAccessChain %27 %126 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %27 %74 
                                         f32 %471 = OpLoad %470 
                                Private f32* %472 = OpAccessChain %323 %74 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpFAdd %471 %473 
                                Private f32* %475 = OpAccessChain %149 %74 
                                                      OpStore %475 %474 
                                       f32_4 %476 = OpLoad %27 
                                       f32_3 %477 = OpVectorShuffle %476 %476 1 2 3 
                                       f32_4 %478 = OpLoad %283 
                                       f32_3 %479 = OpVectorShuffle %478 %478 1 2 0 
                                       f32_3 %480 = OpFAdd %477 %479 
                                       f32_4 %481 = OpLoad %149 
                                       f32_4 %482 = OpVectorShuffle %481 %480 0 4 5 6 
                                                      OpStore %149 %482 
                                         f32 %483 = OpLoad %411 
                                       f32_3 %484 = OpCompositeConstruct %483 %483 %483 
                                       f32_4 %485 = OpLoad %149 
                                       f32_3 %486 = OpVectorShuffle %485 %485 0 1 2 
                                       f32_3 %487 = OpFMul %484 %486 
                                       f32_4 %488 = OpLoad %283 
                                       f32_3 %489 = OpVectorShuffle %488 %488 0 1 3 
                                       f32_3 %490 = OpFAdd %487 %489 
                                       f32_4 %491 = OpLoad %27 
                                       f32_4 %492 = OpVectorShuffle %491 %490 4 5 6 3 
                                                      OpStore %27 %492 
                                         f32 %493 = OpLoad %411 
                                Private f32* %494 = OpAccessChain %149 %126 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpFMul %493 %495 
                                Private f32* %497 = OpAccessChain %323 %74 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpFAdd %496 %498 
                                                      OpStore %411 %499 
                                Private f32* %500 = OpAccessChain %27 %168 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpLoad %411 
                                         f32 %503 = OpExtInst %1 37 %501 %502 
                                                      OpStore %100 %503 
                                         f32 %504 = OpLoad %100 
                                         f32 %505 = OpFNegate %504 
                                Private f32* %506 = OpAccessChain %27 %74 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpFAdd %505 %507 
                                                      OpStore %100 %508 
                                Private f32* %509 = OpAccessChain %27 %168 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFNegate %510 
                                         f32 %512 = OpLoad %411 
                                         f32 %513 = OpFAdd %511 %512 
                                                      OpStore %411 %513 
                                         f32 %515 = OpLoad %100 
                                         f32 %517 = OpFMul %515 %516 
                                         f32 %519 = OpFAdd %517 %518 
                                                      OpStore %514 %519 
                                         f32 %520 = OpLoad %411 
                                         f32 %521 = OpLoad %514 
                                         f32 %522 = OpFDiv %520 %521 
                                                      OpStore %411 %522 
                                         f32 %523 = OpLoad %411 
                                Private f32* %524 = OpAccessChain %27 %162 
                                         f32 %525 = OpLoad %524 
                                         f32 %526 = OpFAdd %523 %525 
                                                      OpStore %411 %526 
                                Private f32* %527 = OpAccessChain %27 %74 
                                         f32 %528 = OpLoad %527 
                                         f32 %529 = OpFAdd %528 %518 
                                                      OpStore %514 %529 
                                         f32 %530 = OpLoad %100 
                                         f32 %531 = OpLoad %514 
                                         f32 %532 = OpFDiv %530 %531 
                                                      OpStore %514 %532 
                                Private f32* %534 = OpAccessChain %9 %168 
                                         f32 %535 = OpLoad %534 
                                Private f32* %536 = OpAccessChain %9 %162 
                                         f32 %537 = OpLoad %536 
                                        bool %538 = OpFOrdGreaterThanEqual %535 %537 
                                                      OpStore %533 %538 
                                        bool %540 = OpLoad %533 
                                                      OpSelectionMerge %542 None 
                                                      OpBranchConditional %540 %541 %543 
                                             %541 = OpLabel 
                                                      OpStore %539 %106 
                                                      OpBranch %542 
                                             %543 = OpLabel 
                                                      OpStore %539 %108 
                                                      OpBranch %542 
                                             %542 = OpLabel 
                                         f32 %544 = OpLoad %539 
                                Private f32* %545 = OpAccessChain %427 %74 
                                                      OpStore %545 %544 
                                Private f32* %547 = OpAccessChain %9 %162 
                                         f32 %548 = OpLoad %547 
                                         f32 %549 = OpFNegate %548 
                                Private f32* %550 = OpAccessChain %9 %168 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpFAdd %549 %551 
                                                      OpStore %546 %552 
                                Private f32* %554 = OpAccessChain %427 %74 
                                         f32 %555 = OpLoad %554 
                                         f32 %556 = OpLoad %546 
                                         f32 %557 = OpFMul %555 %556 
                                Private f32* %558 = OpAccessChain %9 %162 
                                         f32 %559 = OpLoad %558 
                                         f32 %560 = OpFAdd %557 %559 
                                Private f32* %561 = OpAccessChain %553 %74 
                                                      OpStore %561 %560 
                                Private f32* %563 = OpAccessChain %9 %74 
                                         f32 %564 = OpLoad %563 
                                Private f32* %565 = OpAccessChain %553 %74 
                                         f32 %566 = OpLoad %565 
                                        bool %567 = OpFOrdGreaterThanEqual %564 %566 
                                                      OpStore %562 %567 
                                        bool %570 = OpLoad %562 
                                                      OpSelectionMerge %572 None 
                                                      OpBranchConditional %570 %571 %573 
                                             %571 = OpLabel 
                                                      OpStore %569 %106 
                                                      OpBranch %572 
                                             %573 = OpLabel 
                                                      OpStore %569 %108 
                                                      OpBranch %572 
                                             %572 = OpLabel 
                                         f32 %574 = OpLoad %569 
                                                      OpStore %568 %574 
                                Private f32* %576 = OpAccessChain %553 %74 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpFNegate %577 
                                Private f32* %579 = OpAccessChain %9 %74 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFAdd %578 %580 
                                Private f32* %582 = OpAccessChain %575 %74 
                                                      OpStore %582 %581 
                                         f32 %583 = OpLoad %568 
                                Private f32* %584 = OpAccessChain %575 %74 
                                         f32 %585 = OpLoad %584 
                                         f32 %586 = OpFMul %583 %585 
                                Private f32* %587 = OpAccessChain %553 %74 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpFAdd %586 %588 
                                Private f32* %590 = OpAccessChain %575 %74 
                                                      OpStore %590 %589 
                                Private f32* %591 = OpAccessChain %575 %74 
                                         f32 %592 = OpLoad %591 
                                Uniform f32* %594 = OpAccessChain %35 %593 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpFMul %592 %595 
                                Private f32* %597 = OpAccessChain %553 %74 
                                                      OpStore %597 %596 
                                Private f32* %598 = OpAccessChain %553 %74 
                                         f32 %599 = OpLoad %598 
                                Private f32* %600 = OpAccessChain %27 %74 
                                         f32 %601 = OpLoad %600 
                                         f32 %602 = OpExtInst %1 40 %599 %601 
                                Private f32* %603 = OpAccessChain %553 %74 
                                                      OpStore %603 %602 
                                       f32_3 %604 = OpLoad %120 
                                         f32 %605 = OpDot %604 %89 
                                Private f32* %606 = OpAccessChain %323 %74 
                                                      OpStore %606 %605 
                                Private f32* %607 = OpAccessChain %323 %74 
                                         f32 %608 = OpLoad %607 
                                         f32 %610 = OpFMul %608 %609 
                                Private f32* %611 = OpAccessChain %575 %74 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFAdd %610 %612 
                                Private f32* %614 = OpAccessChain %575 %74 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %575 %74 
                                         f32 %616 = OpLoad %615 
                                Uniform f32* %618 = OpAccessChain %35 %617 
                                         f32 %619 = OpLoad %618 
                                         f32 %620 = OpFMul %616 %619 
                                Private f32* %621 = OpAccessChain %575 %74 
                                                      OpStore %621 %620 
                                Private f32* %622 = OpAccessChain %575 %74 
                                         f32 %623 = OpLoad %622 
                                Private f32* %624 = OpAccessChain %553 %74 
                                         f32 %625 = OpLoad %624 
                                         f32 %626 = OpExtInst %1 37 %623 %625 
                                Private f32* %627 = OpAccessChain %575 %74 
                                                      OpStore %627 %626 
                                         f32 %628 = OpLoad %411 
                                       f32_3 %629 = OpCompositeConstruct %628 %628 %628 
                                       f32_3 %630 = OpExtInst %1 4 %629 
                                       f32_3 %633 = OpFAdd %630 %632 
                                                      OpStore %553 %633 
                                       f32_3 %634 = OpLoad %553 
                                       f32_3 %635 = OpExtInst %1 10 %634 
                                                      OpStore %553 %635 
                                       f32_3 %636 = OpLoad %553 
                                       f32_3 %638 = OpFMul %636 %637 
                                       f32_3 %641 = OpFAdd %638 %640 
                                                      OpStore %553 %641 
                                       f32_3 %642 = OpLoad %553 
                                       f32_3 %643 = OpExtInst %1 4 %642 
                                       f32_3 %645 = OpFAdd %643 %644 
                                                      OpStore %553 %645 
                                       f32_3 %646 = OpLoad %553 
                                       f32_3 %647 = OpCompositeConstruct %108 %108 %108 
                                       f32_3 %648 = OpCompositeConstruct %106 %106 %106 
                                       f32_3 %649 = OpExtInst %1 43 %646 %647 %648 
                                                      OpStore %553 %649 
                                       f32_3 %650 = OpLoad %553 
                                       f32_3 %651 = OpFAdd %650 %644 
                                                      OpStore %553 %651 
                                         f32 %652 = OpLoad %514 
                                       f32_3 %653 = OpCompositeConstruct %652 %652 %652 
                                       f32_3 %654 = OpLoad %553 
                                       f32_3 %655 = OpFMul %653 %654 
                                       f32_3 %657 = OpFAdd %655 %656 
                                                      OpStore %553 %657 
                                       f32_3 %658 = OpLoad %553 
                                       f32_3 %659 = OpLoad %575 
                                       f32_3 %660 = OpVectorShuffle %659 %659 0 0 0 
                                       f32_3 %661 = OpFMul %658 %660 
                                                      OpStore %575 %661 
                                       f32_3 %662 = OpLoad %575 
                                       f32_4 %663 = OpLoad %393 
                                       f32_4 %664 = OpVectorShuffle %663 %662 4 5 6 3 
                                                      OpStore %393 %664 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _EmissiveMap_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat21;
float u_xlat23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _EmissiveMap_ST.xy + _EmissiveMap_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat21 = u_xlat2.y * u_xlat2.y;
    u_xlat21 = u_xlat2.x * u_xlat2.x + (-u_xlat21);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat2);
    u_xlat4.y = dot(unity_SHAg, u_xlat2);
    u_xlat4.z = dot(unity_SHAb, u_xlat2);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _EmissiveGlowToggle;
uniform 	float _ValueMaximum;
uniform 	float _ValueMinimum;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _EmissiveMap;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat15;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat16_19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1.xyz = log2(u_xlat10_0.xyz);
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10_2 = texture(_EmissiveMap, vs_TEXCOORD0.zw);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xxx;
    u_xlat16_19 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlatb2 = _EmissiveGlowToggle>=0.100000001;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat16_19 = (-u_xlat16_19) + 0.100000024;
    u_xlat19 = u_xlat2.x * u_xlat16_19 + 1.0;
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    u_xlat20 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb20 = u_xlat20<0.0;
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat20 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat20) + u_xlat3.x;
    u_xlat20 = unity_ShadowFadeCenterAndType.w * u_xlat3.x + u_xlat20;
    u_xlat20 = u_xlat20 * _LightShadowData.z + _LightShadowData.w;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlatb3 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat9.xyz = (bool(u_xlatb9)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat9.xyz = u_xlat9.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat9.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat9.x = u_xlat4.y * 0.25 + 0.75;
        u_xlat15.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat15.x, u_xlat9.x);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat9.x = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
    u_xlat15.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat15.xy);
    u_xlat20 = u_xlat20 + u_xlat10_4.x;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat9.x = min(u_xlat20, u_xlat9.x);
    u_xlat20 = (u_xlatb3) ? u_xlat9.x : u_xlat20;
    u_xlat3.xyz = u_xlat10_0.xyz * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat20) * u_xlat4.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.w = u_xlat10_0.w;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat1.xyw = u_xlat1.yzx * vec3(u_xlat19) + u_xlat3.yzx;
    u_xlatb18 = u_xlat1.x>=u_xlat1.y;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat4.xy = u_xlat1.yx;
    u_xlat4.z = float(-1.0);
    u_xlat4.w = float(0.666666687);
    u_xlat5.xy = u_xlat1.xy + (-u_xlat4.xy);
    u_xlat5.z = float(1.0);
    u_xlat5.w = float(-1.0);
    u_xlat4 = vec4(u_xlat18) * u_xlat5 + u_xlat4;
    u_xlatb18 = u_xlat1.w>=u_xlat4.x;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat1.xyz = u_xlat4.xyw;
    u_xlat4.xyw = u_xlat1.wyx;
    u_xlat4 = (-u_xlat1) + u_xlat4;
    u_xlat1 = vec4(u_xlat18) * u_xlat4 + u_xlat1;
    u_xlat18 = min(u_xlat1.y, u_xlat1.w);
    u_xlat18 = (-u_xlat18) + u_xlat1.x;
    u_xlat7 = (-u_xlat1.y) + u_xlat1.w;
    u_xlat19 = u_xlat18 * 6.0 + 1.00000001e-010;
    u_xlat7 = u_xlat7 / u_xlat19;
    u_xlat7 = u_xlat7 + u_xlat1.z;
    u_xlat13 = u_xlat1.x + 1.00000001e-010;
    u_xlat18 = u_xlat18 / u_xlat13;
    u_xlatb13 = u_xlat10_0.y>=u_xlat10_0.z;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat16_6 = (-u_xlat10_0.z) + u_xlat10_0.y;
    u_xlat6.x = u_xlat13 * u_xlat16_6 + u_xlat10_0.z;
    u_xlatb12 = u_xlat10_0.x>=u_xlat6.x;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0 = (-u_xlat6.x) + u_xlat10_0.x;
    u_xlat0 = u_xlat12 * u_xlat0 + u_xlat6.x;
    u_xlat6.x = u_xlat0 * _ValueMinimum;
    u_xlat6.x = max(u_xlat6.x, u_xlat1.x);
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0 = u_xlat12 * 50.0 + u_xlat0;
    u_xlat0 = u_xlat0 * _ValueMaximum;
    u_xlat0 = min(u_xlat0, u_xlat6.x);
    u_xlat1.xyz = abs(vec3(u_xlat7)) + vec3(1.0, 0.666666687, 0.333333343);
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);
    u_xlat1.xyz = abs(u_xlat1.xyz) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    SV_Target0.xyz = u_xlat6.xyz * vec3(u_xlat0);
    SV_Target0.w = u_xlat3.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 436
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %92 %96 %97 %112 %128 %167 %170 %173 %396 %417 %429 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpMemberDecorate %21 17 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %167 Location 167 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %173 Location 173 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %396 Location 396 
                                                      OpDecorate %417 Location 417 
                                                      OpDecorate %429 Location 429 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 13 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 15 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                Output f32_4* %96 = OpVariable Output 
                                 Input f32_4* %97 = OpVariable Input 
                                              %98 = OpTypeVector %6 2 
                                         i32 %101 = OpConstant 16 
                                Input f32_4* %112 = OpVariable Input 
                                         i32 %115 = OpConstant 17 
                                             %126 = OpTypeVector %6 3 
                                             %127 = OpTypePointer Input %126 
                                Input f32_3* %128 = OpVariable Input 
                                         i32 %130 = OpConstant 14 
                                         u32 %135 = OpConstant 0 
                                             %136 = OpTypePointer Private %6 
                                         u32 %149 = OpConstant 2 
                                Private f32* %151 = OpVariable Private 
                                             %166 = OpTypePointer Output %126 
                               Output f32_3* %167 = OpVariable Output 
                               Output f32_3* %170 = OpVariable Output 
                               Output f32_4* %173 = OpVariable Output 
                                             %175 = OpTypePointer Private %126 
                              Private f32_3* %176 = OpVariable Private 
                              Private f32_4* %193 = OpVariable Private 
                              Private f32_3* %199 = OpVariable Private 
                                         i32 %200 = OpConstant 9 
                                         i32 %206 = OpConstant 10 
                                         i32 %212 = OpConstant 11 
                                         i32 %218 = OpConstant 12 
                                         f32 %227 = OpConstant 3.674022E-40 
                                         u32 %228 = OpConstant 3 
                                         i32 %230 = OpConstant 6 
                                         i32 %236 = OpConstant 7 
                                         i32 %242 = OpConstant 8 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                              Private f32_3* %256 = OpVariable Private 
                                         f32 %260 = OpConstant 3.674022E-40 
                                       f32_3 %261 = OpConstantComposite %260 %260 %260 
                                         f32 %266 = OpConstant 3.674022E-40 
                                       f32_3 %267 = OpConstantComposite %266 %266 %266 
                                         f32 %269 = OpConstant 3.674022E-40 
                                       f32_3 %270 = OpConstantComposite %269 %269 %269 
                              Private f32_4* %274 = OpVariable Private 
                              Private f32_4* %281 = OpVariable Private 
                              Private f32_4* %289 = OpVariable Private 
                                         f32 %325 = OpConstant 3.674022E-40 
                                       f32_4 %326 = OpConstantComposite %325 %325 %325 %325 
                                         i32 %331 = OpConstant 4 
                                       f32_4 %335 = OpConstantComposite %227 %227 %227 %227 
                                       f32_4 %343 = OpConstantComposite %253 %253 %253 %253 
                                         i32 %350 = OpConstant 5 
                               Output f32_3* %396 = OpVariable Output 
                                             %401 = OpTypePointer Uniform %6 
                                         f32 %408 = OpConstant 3.674022E-40 
                                       f32_2 %413 = OpConstantComposite %408 %408 
                               Output f32_4* %417 = OpVariable Output 
                               Output f32_4* %429 = OpVariable Output 
                                             %430 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %81 = OpAccessChain %23 %63 %49 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %47 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %60 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %47 %87 
                                        f32_4 %93 = OpLoad %47 
                                Output f32_4* %95 = OpAccessChain %92 %31 
                                                      OpStore %95 %93 
                                        f32_4 %99 = OpLoad %97 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %101 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %100 %104 
                              Uniform f32_4* %106 = OpAccessChain %23 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                       f32_4 %110 = OpLoad %96 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 3 
                                                      OpStore %96 %111 
                                       f32_4 %113 = OpLoad %112 
                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
                              Uniform f32_4* %116 = OpAccessChain %23 %115 
                                       f32_4 %117 = OpLoad %116 
                                       f32_2 %118 = OpVectorShuffle %117 %117 0 1 
                                       f32_2 %119 = OpFMul %114 %118 
                              Uniform f32_4* %120 = OpAccessChain %23 %115 
                                       f32_4 %121 = OpLoad %120 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 3 
                                       f32_2 %123 = OpFAdd %119 %122 
                                       f32_4 %124 = OpLoad %96 
                                       f32_4 %125 = OpVectorShuffle %124 %123 0 1 4 5 
                                                      OpStore %96 %125 
                                       f32_3 %129 = OpLoad %128 
                              Uniform f32_4* %131 = OpAccessChain %23 %130 %31 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %129 %133 
                                Private f32* %137 = OpAccessChain %60 %135 
                                                      OpStore %137 %134 
                                       f32_3 %138 = OpLoad %128 
                              Uniform f32_4* %139 = OpAccessChain %23 %130 %26 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                         f32 %142 = OpDot %138 %141 
                                Private f32* %143 = OpAccessChain %60 %88 
                                                      OpStore %143 %142 
                                       f32_3 %144 = OpLoad %128 
                              Uniform f32_4* %145 = OpAccessChain %23 %130 %39 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %144 %147 
                                Private f32* %150 = OpAccessChain %60 %149 
                                                      OpStore %150 %148 
                                       f32_4 %152 = OpLoad %60 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_4 %154 = OpLoad %60 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                         f32 %156 = OpDot %153 %155 
                                                      OpStore %151 %156 
                                         f32 %157 = OpLoad %151 
                                         f32 %158 = OpExtInst %1 32 %157 
                                                      OpStore %151 %158 
                                         f32 %159 = OpLoad %151 
                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
                                       f32_4 %161 = OpLoad %60 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFMul %160 %162 
                                       f32_4 %164 = OpLoad %60 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %60 %165 
                                       f32_4 %168 = OpLoad %60 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                                      OpStore %167 %169 
                                       f32_4 %171 = OpLoad %9 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                                      OpStore %170 %172 
                                       f32_4 %174 = OpLoad %9 
                                                      OpStore %173 %174 
                                Private f32* %177 = OpAccessChain %60 %88 
                                         f32 %178 = OpLoad %177 
                                Private f32* %179 = OpAccessChain %60 %88 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpFMul %178 %180 
                                Private f32* %182 = OpAccessChain %176 %135 
                                                      OpStore %182 %181 
                                Private f32* %183 = OpAccessChain %60 %135 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %60 %135 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %176 %135 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                         f32 %191 = OpFAdd %187 %190 
                                Private f32* %192 = OpAccessChain %176 %135 
                                                      OpStore %192 %191 
                                       f32_4 %194 = OpLoad %60 
                                       f32_4 %195 = OpVectorShuffle %194 %194 1 2 2 0 
                                       f32_4 %196 = OpLoad %60 
                                       f32_4 %197 = OpVectorShuffle %196 %196 0 1 2 2 
                                       f32_4 %198 = OpFMul %195 %197 
                                                      OpStore %193 %198 
                              Uniform f32_4* %201 = OpAccessChain %23 %200 
                                       f32_4 %202 = OpLoad %201 
                                       f32_4 %203 = OpLoad %193 
                                         f32 %204 = OpDot %202 %203 
                                Private f32* %205 = OpAccessChain %199 %135 
                                                      OpStore %205 %204 
                              Uniform f32_4* %207 = OpAccessChain %23 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %193 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %199 %88 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %23 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %193 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %199 %149 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %23 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_3 %222 = OpLoad %176 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 0 0 
                                       f32_3 %224 = OpFMul %221 %223 
                                       f32_3 %225 = OpLoad %199 
                                       f32_3 %226 = OpFAdd %224 %225 
                                                      OpStore %176 %226 
                                Private f32* %229 = OpAccessChain %60 %228 
                                                      OpStore %229 %227 
                              Uniform f32_4* %231 = OpAccessChain %23 %230 
                                       f32_4 %232 = OpLoad %231 
                                       f32_4 %233 = OpLoad %60 
                                         f32 %234 = OpDot %232 %233 
                                Private f32* %235 = OpAccessChain %193 %135 
                                                      OpStore %235 %234 
                              Uniform f32_4* %237 = OpAccessChain %23 %236 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpLoad %60 
                                         f32 %240 = OpDot %238 %239 
                                Private f32* %241 = OpAccessChain %193 %88 
                                                      OpStore %241 %240 
                              Uniform f32_4* %243 = OpAccessChain %23 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %60 
                                         f32 %246 = OpDot %244 %245 
                                Private f32* %247 = OpAccessChain %193 %149 
                                                      OpStore %247 %246 
                                       f32_3 %248 = OpLoad %176 
                                       f32_4 %249 = OpLoad %193 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpFAdd %248 %250 
                                                      OpStore %176 %251 
                                       f32_3 %252 = OpLoad %176 
                                       f32_3 %255 = OpExtInst %1 40 %252 %254 
                                                      OpStore %176 %255 
                                       f32_3 %257 = OpLoad %176 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                                      OpStore %256 %258 
                                       f32_3 %259 = OpLoad %256 
                                       f32_3 %262 = OpFMul %259 %261 
                                                      OpStore %256 %262 
                                       f32_3 %263 = OpLoad %256 
                                       f32_3 %264 = OpExtInst %1 29 %263 
                                                      OpStore %256 %264 
                                       f32_3 %265 = OpLoad %256 
                                       f32_3 %268 = OpFMul %265 %267 
                                       f32_3 %271 = OpFAdd %268 %270 
                                                      OpStore %256 %271 
                                       f32_3 %272 = OpLoad %256 
                                       f32_3 %273 = OpExtInst %1 40 %272 %254 
                                                      OpStore %256 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %275 1 1 1 1 
                                       f32_4 %277 = OpFNegate %276 
                              Uniform f32_4* %278 = OpAccessChain %23 %39 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpFAdd %277 %279 
                                                      OpStore %274 %280 
                                       f32_4 %282 = OpLoad %60 
                                       f32_4 %283 = OpVectorShuffle %282 %282 1 1 1 1 
                                       f32_4 %284 = OpLoad %274 
                                       f32_4 %285 = OpFMul %283 %284 
                                                      OpStore %281 %285 
                                       f32_4 %286 = OpLoad %274 
                                       f32_4 %287 = OpLoad %274 
                                       f32_4 %288 = OpFMul %286 %287 
                                                      OpStore %274 %288 
                                       f32_4 %290 = OpLoad %9 
                                       f32_4 %291 = OpVectorShuffle %290 %290 0 0 0 0 
                                       f32_4 %292 = OpFNegate %291 
                              Uniform f32_4* %293 = OpAccessChain %23 %26 
                                       f32_4 %294 = OpLoad %293 
                                       f32_4 %295 = OpFAdd %292 %294 
                                                      OpStore %289 %295 
                                       f32_4 %296 = OpLoad %9 
                                       f32_4 %297 = OpVectorShuffle %296 %296 2 2 2 2 
                                       f32_4 %298 = OpFNegate %297 
                              Uniform f32_4* %299 = OpAccessChain %23 %49 
                                       f32_4 %300 = OpLoad %299 
                                       f32_4 %301 = OpFAdd %298 %300 
                                                      OpStore %9 %301 
                                       f32_4 %302 = OpLoad %289 
                                       f32_4 %303 = OpLoad %60 
                                       f32_4 %304 = OpVectorShuffle %303 %303 0 0 0 0 
                                       f32_4 %305 = OpFMul %302 %304 
                                       f32_4 %306 = OpLoad %281 
                                       f32_4 %307 = OpFAdd %305 %306 
                                                      OpStore %281 %307 
                                       f32_4 %308 = OpLoad %9 
                                       f32_4 %309 = OpLoad %60 
                                       f32_4 %310 = OpVectorShuffle %309 %309 2 2 2 2 
                                       f32_4 %311 = OpFMul %308 %310 
                                       f32_4 %312 = OpLoad %281 
                                       f32_4 %313 = OpFAdd %311 %312 
                                                      OpStore %60 %313 
                                       f32_4 %314 = OpLoad %289 
                                       f32_4 %315 = OpLoad %289 
                                       f32_4 %316 = OpFMul %314 %315 
                                       f32_4 %317 = OpLoad %274 
                                       f32_4 %318 = OpFAdd %316 %317 
                                                      OpStore %274 %318 
                                       f32_4 %319 = OpLoad %9 
                                       f32_4 %320 = OpLoad %9 
                                       f32_4 %321 = OpFMul %319 %320 
                                       f32_4 %322 = OpLoad %274 
                                       f32_4 %323 = OpFAdd %321 %322 
                                                      OpStore %9 %323 
                                       f32_4 %324 = OpLoad %9 
                                       f32_4 %327 = OpExtInst %1 40 %324 %326 
                                                      OpStore %9 %327 
                                       f32_4 %328 = OpLoad %9 
                                       f32_4 %329 = OpExtInst %1 32 %328 
                                                      OpStore %274 %329 
                                       f32_4 %330 = OpLoad %9 
                              Uniform f32_4* %332 = OpAccessChain %23 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_4 %334 = OpFMul %330 %333 
                                       f32_4 %336 = OpFAdd %334 %335 
                                                      OpStore %9 %336 
                                       f32_4 %337 = OpLoad %9 
                                       f32_4 %338 = OpFDiv %335 %337 
                                                      OpStore %9 %338 
                                       f32_4 %339 = OpLoad %60 
                                       f32_4 %340 = OpLoad %274 
                                       f32_4 %341 = OpFMul %339 %340 
                                                      OpStore %60 %341 
                                       f32_4 %342 = OpLoad %60 
                                       f32_4 %344 = OpExtInst %1 40 %342 %343 
                                                      OpStore %60 %344 
                                       f32_4 %345 = OpLoad %9 
                                       f32_4 %346 = OpLoad %60 
                                       f32_4 %347 = OpFMul %345 %346 
                                                      OpStore %9 %347 
                                       f32_4 %348 = OpLoad %9 
                                       f32_3 %349 = OpVectorShuffle %348 %348 1 1 1 
                              Uniform f32_4* %351 = OpAccessChain %23 %350 %26 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_3 %354 = OpFMul %349 %353 
                                       f32_4 %355 = OpLoad %60 
                                       f32_4 %356 = OpVectorShuffle %355 %354 4 5 6 3 
                                                      OpStore %60 %356 
                              Uniform f32_4* %357 = OpAccessChain %23 %350 %31 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_4 %360 = OpLoad %9 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 0 0 
                                       f32_3 %362 = OpFMul %359 %361 
                                       f32_4 %363 = OpLoad %60 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_3 %365 = OpFAdd %362 %364 
                                       f32_4 %366 = OpLoad %60 
                                       f32_4 %367 = OpVectorShuffle %366 %365 4 5 6 3 
                                                      OpStore %60 %367 
                              Uniform f32_4* %368 = OpAccessChain %23 %350 %39 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_4 %371 = OpLoad %9 
                                       f32_3 %372 = OpVectorShuffle %371 %371 2 2 2 
                                       f32_3 %373 = OpFMul %370 %372 
                                       f32_4 %374 = OpLoad %60 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpFAdd %373 %375 
                                       f32_4 %377 = OpLoad %9 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %9 %378 
                              Uniform f32_4* %379 = OpAccessChain %23 %350 %49 
                                       f32_4 %380 = OpLoad %379 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                                       f32_4 %382 = OpLoad %9 
                                       f32_3 %383 = OpVectorShuffle %382 %382 3 3 3 
                                       f32_3 %384 = OpFMul %381 %383 
                                       f32_4 %385 = OpLoad %9 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_3 %387 = OpFAdd %384 %386 
                                       f32_4 %388 = OpLoad %9 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %9 %389 
                                       f32_4 %390 = OpLoad %9 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpLoad %256 
                                       f32_3 %393 = OpFAdd %391 %392 
                                       f32_4 %394 = OpLoad %9 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
                                                      OpStore %9 %395 
                                       f32_4 %397 = OpLoad %9 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 1 2 
                                                      OpStore %396 %398 
                                Private f32* %399 = OpAccessChain %47 %88 
                                         f32 %400 = OpLoad %399 
                                Uniform f32* %402 = OpAccessChain %23 %31 %135 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %400 %403 
                                Private f32* %405 = OpAccessChain %9 %135 
                                                      OpStore %405 %404 
                                Private f32* %406 = OpAccessChain %9 %135 
                                         f32 %407 = OpLoad %406 
                                         f32 %409 = OpFMul %407 %408 
                                Private f32* %410 = OpAccessChain %9 %228 
                                                      OpStore %410 %409 
                                       f32_4 %411 = OpLoad %47 
                                       f32_2 %412 = OpVectorShuffle %411 %411 0 3 
                                       f32_2 %414 = OpFMul %412 %413 
                                       f32_4 %415 = OpLoad %9 
                                       f32_4 %416 = OpVectorShuffle %415 %414 4 1 5 3 
                                                      OpStore %9 %416 
                                       f32_4 %418 = OpLoad %47 
                                       f32_2 %419 = OpVectorShuffle %418 %418 2 3 
                                       f32_4 %420 = OpLoad %417 
                                       f32_4 %421 = OpVectorShuffle %420 %419 0 1 4 5 
                                                      OpStore %417 %421 
                                       f32_4 %422 = OpLoad %9 
                                       f32_2 %423 = OpVectorShuffle %422 %422 2 2 
                                       f32_4 %424 = OpLoad %9 
                                       f32_2 %425 = OpVectorShuffle %424 %424 0 3 
                                       f32_2 %426 = OpFAdd %423 %425 
                                       f32_4 %427 = OpLoad %417 
                                       f32_4 %428 = OpVectorShuffle %427 %426 4 5 2 3 
                                                      OpStore %417 %428 
                                                      OpStore %429 %343 
                                 Output f32* %431 = OpAccessChain %92 %31 %88 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpFNegate %432 
                                 Output f32* %434 = OpAccessChain %92 %31 %88 
                                                      OpStore %434 %433 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 666
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %151 %333 %387 %393 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %31 ArrayStride 31 
                                                      OpDecorate %32 ArrayStride 32 
                                                      OpMemberDecorate %33 0 Offset 33 
                                                      OpMemberDecorate %33 1 RelaxedPrecision 
                                                      OpMemberDecorate %33 1 Offset 33 
                                                      OpMemberDecorate %33 2 RelaxedPrecision 
                                                      OpMemberDecorate %33 2 Offset 33 
                                                      OpMemberDecorate %33 3 Offset 33 
                                                      OpMemberDecorate %33 4 Offset 33 
                                                      OpMemberDecorate %33 5 Offset 33 
                                                      OpMemberDecorate %33 6 Offset 33 
                                                      OpMemberDecorate %33 7 Offset 33 
                                                      OpMemberDecorate %33 8 Offset 33 
                                                      OpMemberDecorate %33 9 RelaxedPrecision 
                                                      OpMemberDecorate %33 9 Offset 33 
                                                      OpMemberDecorate %33 10 Offset 33 
                                                      OpMemberDecorate %33 11 Offset 33 
                                                      OpMemberDecorate %33 12 Offset 33 
                                                      OpMemberDecorate %33 13 Offset 33 
                                                      OpMemberDecorate %33 14 Offset 33 
                                                      OpMemberDecorate %33 15 RelaxedPrecision 
                                                      OpMemberDecorate %33 15 Offset 33 
                                                      OpDecorate %33 Block 
                                                      OpDecorate %35 DescriptorSet 35 
                                                      OpDecorate %35 Binding 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %232 SpecId 232 
                                                      OpDecorate %312 DescriptorSet 312 
                                                      OpDecorate %312 Binding 312 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %342 DescriptorSet 342 
                                                      OpDecorate %342 Binding 342 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %387 Location 387 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %393 Location 393 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %559 RelaxedPrecision 
                                                      OpDecorate %564 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
                               Private f32_4* %27 = OpVariable Private 
                                              %29 = OpTypeInt 32 0 
                                          u32 %30 = OpConstant 4 
                                              %31 = OpTypeArray %7 %30 
                                              %32 = OpTypeArray %7 %30 
                                              %33 = OpTypeStruct %21 %7 %7 %7 %31 %7 %32 %21 %21 %7 %6 %6 %6 %6 %6 %6 
                                              %34 = OpTypePointer Uniform %33 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32; f32;}* %35 = OpVariable Uniform 
                                              %36 = OpTypeInt 32 1 
                                          i32 %37 = OpConstant 11 
                                              %38 = OpTypePointer Uniform %6 
                                          i32 %60 = OpConstant 10 
                                              %67 = OpTypePointer Private %6 
                                 Private f32* %68 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %69 = OpVariable UniformConstant 
                                          u32 %74 = OpConstant 0 
                               Private f32_4* %83 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %88 = OpConstant 3.674022E-40 
                                        f32_3 %89 = OpConstantComposite %86 %87 %88 
                                              %92 = OpTypeBool 
                                              %93 = OpTypePointer Private %92 
                                Private bool* %94 = OpVariable Private 
                                          i32 %95 = OpConstant 12 
                                          f32 %98 = OpConstant 3.674022E-40 
                                Private f32* %100 = OpVariable Private 
                                             %101 = OpTypePointer Function %6 
                                         f32 %106 = OpConstant 3.674022E-40 
                                         f32 %108 = OpConstant 3.674022E-40 
                                Private f32* %110 = OpVariable Private 
                                         f32 %114 = OpConstant 3.674022E-40 
                              Private f32_3* %120 = OpVariable Private 
                                         u32 %126 = OpConstant 3 
                                         i32 %129 = OpConstant 15 
                               Private bool* %135 = OpVariable Private 
                                         i32 %140 = OpConstant 0 
                                         i32 %141 = OpConstant 1 
                                         i32 %143 = OpConstant -1 
                              Private f32_4* %149 = OpVariable Private 
                                             %150 = OpTypePointer Input %21 
                                Input f32_3* %151 = OpVariable Input 
                                             %154 = OpTypePointer Uniform %21 
                              Private f32_3* %160 = OpVariable Private 
                                         i32 %161 = OpConstant 4 
                                         u32 %162 = OpConstant 2 
                                         u32 %168 = OpConstant 1 
                                         i32 %170 = OpConstant 2 
                                Private f32* %174 = OpVariable Private 
                                         i32 %180 = OpConstant 3 
                                             %181 = OpTypePointer Uniform %7 
                               Private bool* %221 = OpVariable Private 
                                         i32 %222 = OpConstant 5 
                                        bool %226 = OpConstantFalse 
                                        bool %232 = OpSpecConstantFalse 
                               Private bool* %235 = OpVariable Private 
                                         i32 %241 = OpConstant 6 
                              Private f32_3* %267 = OpVariable Private 
                                             %268 = OpTypePointer Function %21 
                                         i32 %278 = OpConstant 8 
                              Private f32_4* %283 = OpVariable Private 
                                         i32 %285 = OpConstant 7 
                                         f32 %293 = OpConstant 3.674022E-40 
                                         f32 %295 = OpConstant 3.674022E-40 
                                Private f32* %298 = OpVariable Private 
                                         f32 %301 = OpConstant 3.674022E-40 
                                             %309 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %310 = OpTypeSampledImage %309 
                                             %311 = OpTypePointer UniformConstant %310 
 UniformConstant read_only Texture3DSampled* %312 = OpVariable UniformConstant 
                              Private f32_3* %323 = OpVariable Private 
                                Input f32_4* %333 = OpVariable Input 
                                Private f32* %341 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %342 = OpVariable UniformConstant 
                              Private f32_3* %348 = OpVariable Private 
                                         i32 %376 = OpConstant 9 
                                Input f32_3* %387 = OpVariable Input 
                                             %392 = OpTypePointer Output %7 
                               Output f32_4* %393 = OpVariable Output 
                                             %396 = OpTypePointer Output %6 
                               Private bool* %405 = OpVariable Private 
                                Private f32* %411 = OpVariable Private 
                                             %426 = OpTypePointer Private %17 
                              Private f32_2* %427 = OpVariable Private 
                                         f32 %429 = OpConstant 3.674022E-40 
                                         f32 %445 = OpConstant 3.674022E-40 
                                       f32_2 %446 = OpConstantComposite %429 %445 
                                Private f32* %514 = OpVariable Private 
                                         f32 %516 = OpConstant 3.674022E-40 
                                         f32 %518 = OpConstant 3.674022E-40 
                               Private bool* %533 = OpVariable Private 
                                Private f32* %546 = OpVariable Private 
                              Private f32_3* %553 = OpVariable Private 
                               Private bool* %562 = OpVariable Private 
                                Private f32* %568 = OpVariable Private 
                              Private f32_3* %575 = OpVariable Private 
                                         i32 %593 = OpConstant 14 
                                         f32 %609 = OpConstant 3.674022E-40 
                                         i32 %617 = OpConstant 13 
                                         f32 %631 = OpConstant 3.674022E-40 
                                       f32_3 %632 = OpConstantComposite %106 %445 %631 
                                       f32_3 %637 = OpConstantComposite %516 %516 %516 
                                         f32 %639 = OpConstant 3.674022E-40 
                                       f32_3 %640 = OpConstantComposite %639 %639 %639 
                                       f32_3 %644 = OpConstantComposite %429 %429 %429 
                                       f32_3 %656 = OpConstantComposite %106 %106 %106 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %102 = OpVariable Function 
                             Function f32_3* %269 = OpVariable Function 
                               Function f32* %363 = OpVariable Function 
                               Function f32* %412 = OpVariable Function 
                               Function f32* %455 = OpVariable Function 
                               Function f32* %539 = OpVariable Function 
                               Function f32* %569 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                                        f32_4 %24 = OpLoad %9 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpExtInst %1 30 %25 
                                                      OpStore %23 %26 
                                        f32_3 %28 = OpLoad %23 
                                 Uniform f32* %39 = OpAccessChain %35 %37 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %41 = OpAccessChain %35 %37 
                                          f32 %42 = OpLoad %41 
                                 Uniform f32* %43 = OpAccessChain %35 %37 
                                          f32 %44 = OpLoad %43 
                                        f32_3 %45 = OpCompositeConstruct %40 %42 %44 
                                          f32 %46 = OpCompositeExtract %45 0 
                                          f32 %47 = OpCompositeExtract %45 1 
                                          f32 %48 = OpCompositeExtract %45 2 
                                        f32_3 %49 = OpCompositeConstruct %46 %47 %48 
                                        f32_3 %50 = OpFMul %28 %49 
                                        f32_4 %51 = OpLoad %27 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %27 %52 
                                        f32_4 %53 = OpLoad %27 
                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                                        f32_3 %55 = OpExtInst %1 29 %54 
                                        f32_4 %56 = OpLoad %27 
                                        f32_4 %57 = OpVectorShuffle %56 %55 4 5 6 3 
                                                      OpStore %27 %57 
                                        f32_4 %58 = OpLoad %27 
                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                 Uniform f32* %61 = OpAccessChain %35 %60 
                                          f32 %62 = OpLoad %61 
                                        f32_3 %63 = OpCompositeConstruct %62 %62 %62 
                                        f32_3 %64 = OpFMul %59 %63 
                                        f32_4 %65 = OpLoad %27 
                                        f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                                      OpStore %27 %66 
                   read_only Texture2DSampled %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %16 
                                        f32_2 %72 = OpVectorShuffle %71 %71 2 3 
                                        f32_4 %73 = OpImageSampleImplicitLod %70 %72 
                                          f32 %75 = OpCompositeExtract %73 0 
                                                      OpStore %68 %75 
                                          f32 %76 = OpLoad %68 
                                        f32_3 %77 = OpCompositeConstruct %76 %76 %76 
                                        f32_4 %78 = OpLoad %27 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %27 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %27 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                          f32 %90 = OpDot %85 %89 
                                 Private f32* %91 = OpAccessChain %83 %74 
                                                      OpStore %91 %90 
                                 Uniform f32* %96 = OpAccessChain %35 %95 
                                          f32 %97 = OpLoad %96 
                                         bool %99 = OpFOrdGreaterThanEqual %97 %98 
                                                      OpStore %94 %99 
                                        bool %103 = OpLoad %94 
                                                      OpSelectionMerge %105 None 
                                                      OpBranchConditional %103 %104 %107 
                                             %104 = OpLabel 
                                                      OpStore %102 %106 
                                                      OpBranch %105 
                                             %107 = OpLabel 
                                                      OpStore %102 %108 
                                                      OpBranch %105 
                                             %105 = OpLabel 
                                         f32 %109 = OpLoad %102 
                                                      OpStore %100 %109 
                                Private f32* %111 = OpAccessChain %83 %74 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFNegate %112 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %110 %115 
                                         f32 %116 = OpLoad %100 
                                         f32 %117 = OpLoad %110 
                                         f32 %118 = OpFMul %116 %117 
                                         f32 %119 = OpFAdd %118 %106 
                                                      OpStore %100 %119 
                                         f32 %121 = OpLoad %100 
                                       f32_3 %122 = OpCompositeConstruct %121 %121 %121 
                                       f32_4 %123 = OpLoad %27 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_3 %125 = OpFMul %122 %124 
                                                      OpStore %120 %125 
                                Private f32* %127 = OpAccessChain %9 %126 
                                         f32 %128 = OpLoad %127 
                                Uniform f32* %130 = OpAccessChain %35 %129 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFNegate %131 
                                         f32 %133 = OpFAdd %128 %132 
                                Private f32* %134 = OpAccessChain %83 %74 
                                                      OpStore %134 %133 
                                Private f32* %136 = OpAccessChain %83 %74 
                                         f32 %137 = OpLoad %136 
                                        bool %138 = OpFOrdLessThan %137 %108 
                                                      OpStore %135 %138 
                                        bool %139 = OpLoad %135 
                                         i32 %142 = OpSelect %139 %141 %140 
                                         i32 %144 = OpIMul %142 %143 
                                        bool %145 = OpINotEqual %144 %140 
                                                      OpSelectionMerge %147 None 
                                                      OpBranchConditional %145 %146 %147 
                                             %146 = OpLabel 
                                                      OpKill
                                             %147 = OpLabel 
                                       f32_3 %152 = OpLoad %151 
                                       f32_3 %153 = OpFNegate %152 
                              Uniform f32_3* %155 = OpAccessChain %35 %140 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %149 
                                       f32_4 %159 = OpVectorShuffle %158 %157 4 5 6 3 
                                                      OpStore %149 %159 
                                Uniform f32* %163 = OpAccessChain %35 %161 %140 %162 
                                         f32 %164 = OpLoad %163 
                                Private f32* %165 = OpAccessChain %160 %74 
                                                      OpStore %165 %164 
                                Uniform f32* %166 = OpAccessChain %35 %161 %141 %162 
                                         f32 %167 = OpLoad %166 
                                Private f32* %169 = OpAccessChain %160 %168 
                                                      OpStore %169 %167 
                                Uniform f32* %171 = OpAccessChain %35 %161 %170 %162 
                                         f32 %172 = OpLoad %171 
                                Private f32* %173 = OpAccessChain %160 %162 
                                                      OpStore %173 %172 
                                       f32_4 %175 = OpLoad %149 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpLoad %160 
                                         f32 %178 = OpDot %176 %177 
                                                      OpStore %174 %178 
                                       f32_3 %179 = OpLoad %151 
                              Uniform f32_4* %182 = OpAccessChain %35 %180 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %179 %185 
                                       f32_4 %187 = OpLoad %149 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %149 %188 
                                       f32_4 %189 = OpLoad %149 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %149 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                Private f32* %194 = OpAccessChain %149 %74 
                                                      OpStore %194 %193 
                                Private f32* %195 = OpAccessChain %149 %74 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 31 %196 
                                Private f32* %198 = OpAccessChain %149 %74 
                                                      OpStore %198 %197 
                                         f32 %199 = OpLoad %174 
                                         f32 %200 = OpFNegate %199 
                                Private f32* %201 = OpAccessChain %149 %74 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFAdd %200 %202 
                                Private f32* %204 = OpAccessChain %149 %74 
                                                      OpStore %204 %203 
                                Uniform f32* %205 = OpAccessChain %35 %180 %126 
                                         f32 %206 = OpLoad %205 
                                Private f32* %207 = OpAccessChain %149 %74 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFMul %206 %208 
                                         f32 %210 = OpLoad %174 
                                         f32 %211 = OpFAdd %209 %210 
                                                      OpStore %174 %211 
                                         f32 %212 = OpLoad %174 
                                Uniform f32* %213 = OpAccessChain %35 %170 %162 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFMul %212 %214 
                                Uniform f32* %216 = OpAccessChain %35 %170 %126 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFAdd %215 %217 
                                                      OpStore %174 %218 
                                         f32 %219 = OpLoad %174 
                                         f32 %220 = OpExtInst %1 43 %219 %108 %106 
                                                      OpStore %174 %220 
                                Uniform f32* %223 = OpAccessChain %35 %222 %74 
                                         f32 %224 = OpLoad %223 
                                        bool %225 = OpFOrdEqual %224 %106 
                                                      OpStore %221 %225 
                                                      OpSelectionMerge %228 None 
                                                      OpBranchConditional %226 %227 %228 
                                             %227 = OpLabel 
                                        bool %229 = OpLoad %221 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %229 %230 %231 
                                             %230 = OpLabel 
                                                      OpBranch %231 
                                             %231 = OpLabel 
                                                      OpBranch %228 
                                             %228 = OpLabel 
                                                      OpSelectionMerge %234 None 
                                                      OpBranchConditional %232 %233 %318 
                                             %233 = OpLabel 
                                Uniform f32* %236 = OpAccessChain %35 %222 %168 
                                         f32 %237 = OpLoad %236 
                                        bool %238 = OpFOrdEqual %237 %106 
                                                      OpStore %235 %238 
                                       f32_3 %239 = OpLoad %151 
                                       f32_3 %240 = OpVectorShuffle %239 %239 1 1 1 
                              Uniform f32_4* %242 = OpAccessChain %35 %241 %141 
                                       f32_4 %243 = OpLoad %242 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpFMul %240 %244 
                                                      OpStore %160 %245 
                              Uniform f32_4* %246 = OpAccessChain %35 %241 %140 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpLoad %151 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 0 0 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %252 = OpLoad %160 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %160 %253 
                              Uniform f32_4* %254 = OpAccessChain %35 %241 %170 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpLoad %151 
                                       f32_3 %258 = OpVectorShuffle %257 %257 2 2 2 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %160 
                                       f32_3 %261 = OpFAdd %259 %260 
                                                      OpStore %160 %261 
                                       f32_3 %262 = OpLoad %160 
                              Uniform f32_4* %263 = OpAccessChain %35 %241 %180 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %266 = OpFAdd %262 %265 
                                                      OpStore %160 %266 
                                        bool %270 = OpLoad %235 
                                                      OpSelectionMerge %272 None 
                                                      OpBranchConditional %270 %271 %274 
                                             %271 = OpLabel 
                                       f32_3 %273 = OpLoad %160 
                                                      OpStore %269 %273 
                                                      OpBranch %272 
                                             %274 = OpLabel 
                                       f32_3 %275 = OpLoad %151 
                                                      OpStore %269 %275 
                                                      OpBranch %272 
                                             %272 = OpLabel 
                                       f32_3 %276 = OpLoad %269 
                                                      OpStore %267 %276 
                                       f32_3 %277 = OpLoad %267 
                              Uniform f32_3* %279 = OpAccessChain %35 %278 
                                       f32_3 %280 = OpLoad %279 
                                       f32_3 %281 = OpFNegate %280 
                                       f32_3 %282 = OpFAdd %277 %281 
                                                      OpStore %267 %282 
                                       f32_3 %284 = OpLoad %267 
                              Uniform f32_3* %286 = OpAccessChain %35 %285 
                                       f32_3 %287 = OpLoad %286 
                                       f32_3 %288 = OpFMul %284 %287 
                                       f32_4 %289 = OpLoad %283 
                                       f32_4 %290 = OpVectorShuffle %289 %288 0 4 5 6 
                                                      OpStore %283 %290 
                                Private f32* %291 = OpAccessChain %283 %168 
                                         f32 %292 = OpLoad %291 
                                         f32 %294 = OpFMul %292 %293 
                                         f32 %296 = OpFAdd %294 %295 
                                Private f32* %297 = OpAccessChain %267 %74 
                                                      OpStore %297 %296 
                                Uniform f32* %299 = OpAccessChain %35 %222 %162 
                                         f32 %300 = OpLoad %299 
                                         f32 %302 = OpFMul %300 %301 
                                         f32 %303 = OpFAdd %302 %295 
                                                      OpStore %298 %303 
                                         f32 %304 = OpLoad %298 
                                Private f32* %305 = OpAccessChain %267 %74 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpExtInst %1 40 %304 %306 
                                Private f32* %308 = OpAccessChain %283 %74 
                                                      OpStore %308 %307 
                  read_only Texture3DSampled %313 = OpLoad %312 
                                       f32_4 %314 = OpLoad %283 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 2 3 
                                       f32_4 %316 = OpImageSampleImplicitLod %313 %315 
                                                      OpStore %283 %316 
                                       f32_4 %317 = OpLoad %283 
                                                      OpStore %83 %317 
                                                      OpBranch %234 
                                             %318 = OpLabel 
                                Private f32* %319 = OpAccessChain %83 %74 
                                                      OpStore %319 %106 
                                Private f32* %320 = OpAccessChain %83 %168 
                                                      OpStore %320 %106 
                                Private f32* %321 = OpAccessChain %83 %162 
                                                      OpStore %321 %106 
                                Private f32* %322 = OpAccessChain %83 %126 
                                                      OpStore %322 %106 
                                                      OpBranch %234 
                                             %234 = OpLabel 
                                       f32_4 %324 = OpLoad %83 
                              Uniform f32_4* %325 = OpAccessChain %35 %141 
                                       f32_4 %326 = OpLoad %325 
                                         f32 %327 = OpDot %324 %326 
                                Private f32* %328 = OpAccessChain %323 %74 
                                                      OpStore %328 %327 
                                Private f32* %329 = OpAccessChain %323 %74 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpExtInst %1 43 %330 %108 %106 
                                Private f32* %332 = OpAccessChain %323 %74 
                                                      OpStore %332 %331 
                                       f32_4 %334 = OpLoad %333 
                                       f32_2 %335 = OpVectorShuffle %334 %334 0 1 
                                       f32_4 %336 = OpLoad %333 
                                       f32_2 %337 = OpVectorShuffle %336 %336 3 3 
                                       f32_2 %338 = OpFDiv %335 %337 
                                       f32_3 %339 = OpLoad %267 
                                       f32_3 %340 = OpVectorShuffle %339 %338 3 4 2 
                                                      OpStore %267 %340 
                  read_only Texture2DSampled %343 = OpLoad %342 
                                       f32_3 %344 = OpLoad %267 
                                       f32_2 %345 = OpVectorShuffle %344 %344 0 1 
                                       f32_4 %346 = OpImageSampleImplicitLod %343 %345 
                                         f32 %347 = OpCompositeExtract %346 0 
                                                      OpStore %341 %347 
                                         f32 %349 = OpLoad %174 
                                         f32 %350 = OpLoad %341 
                                         f32 %351 = OpFAdd %349 %350 
                                Private f32* %352 = OpAccessChain %348 %74 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %348 %74 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpExtInst %1 43 %354 %108 %106 
                                Private f32* %356 = OpAccessChain %348 %74 
                                                      OpStore %356 %355 
                                Private f32* %357 = OpAccessChain %348 %74 
                                         f32 %358 = OpLoad %357 
                                Private f32* %359 = OpAccessChain %323 %74 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpExtInst %1 37 %358 %360 
                                Private f32* %362 = OpAccessChain %323 %74 
                                                      OpStore %362 %361 
                                        bool %364 = OpLoad %221 
                                                      OpSelectionMerge %366 None 
                                                      OpBranchConditional %364 %365 %369 
                                             %365 = OpLabel 
                                Private f32* %367 = OpAccessChain %323 %74 
                                         f32 %368 = OpLoad %367 
                                                      OpStore %363 %368 
                                                      OpBranch %366 
                                             %369 = OpLabel 
                                Private f32* %370 = OpAccessChain %348 %74 
                                         f32 %371 = OpLoad %370 
                                                      OpStore %363 %371 
                                                      OpBranch %366 
                                             %366 = OpLabel 
                                         f32 %372 = OpLoad %363 
                                Private f32* %373 = OpAccessChain %323 %74 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                              Uniform f32_4* %377 = OpAccessChain %35 %376 
                                       f32_4 %378 = OpLoad %377 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFMul %375 %379 
                                                      OpStore %348 %380 
                                       f32_3 %381 = OpLoad %323 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 0 0 
                                       f32_3 %383 = OpLoad %348 
                                       f32_3 %384 = OpFMul %382 %383 
                                                      OpStore %323 %384 
                                       f32_4 %385 = OpLoad %9 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_3 %388 = OpLoad %387 
                                       f32_3 %389 = OpFMul %386 %388 
                                       f32_3 %390 = OpLoad %323 
                                       f32_3 %391 = OpFAdd %389 %390 
                                                      OpStore %323 %391 
                                Private f32* %394 = OpAccessChain %9 %126 
                                         f32 %395 = OpLoad %394 
                                 Output f32* %397 = OpAccessChain %393 %126 
                                                      OpStore %397 %395 
                                       f32_4 %398 = OpLoad %27 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                         f32 %400 = OpLoad %100 
                                       f32_3 %401 = OpCompositeConstruct %400 %400 %400 
                                       f32_3 %402 = OpFMul %399 %401 
                                       f32_3 %403 = OpLoad %323 
                                       f32_3 %404 = OpFAdd %402 %403 
                                                      OpStore %323 %404 
                                Private f32* %406 = OpAccessChain %323 %168 
                                         f32 %407 = OpLoad %406 
                                Private f32* %408 = OpAccessChain %323 %162 
                                         f32 %409 = OpLoad %408 
                                        bool %410 = OpFOrdGreaterThanEqual %407 %409 
                                                      OpStore %405 %410 
                                        bool %413 = OpLoad %405 
                                                      OpSelectionMerge %415 None 
                                                      OpBranchConditional %413 %414 %416 
                                             %414 = OpLabel 
                                                      OpStore %412 %106 
                                                      OpBranch %415 
                                             %416 = OpLabel 
                                                      OpStore %412 %108 
                                                      OpBranch %415 
                                             %415 = OpLabel 
                                         f32 %417 = OpLoad %412 
                                                      OpStore %411 %417 
                                       f32_3 %418 = OpLoad %323 
                                       f32_2 %419 = OpVectorShuffle %418 %418 2 1 
                                       f32_2 %420 = OpFNegate %419 
                                       f32_3 %421 = OpLoad %323 
                                       f32_2 %422 = OpVectorShuffle %421 %421 1 2 
                                       f32_2 %423 = OpFAdd %420 %422 
                                       f32_3 %424 = OpLoad %23 
                                       f32_3 %425 = OpVectorShuffle %424 %423 3 4 2 
                                                      OpStore %23 %425 
                                Private f32* %428 = OpAccessChain %427 %74 
                                                      OpStore %428 %106 
                                Private f32* %430 = OpAccessChain %427 %168 
                                                      OpStore %430 %429 
                                         f32 %431 = OpLoad %411 
                                       f32_2 %432 = OpCompositeConstruct %431 %431 
                                       f32_3 %433 = OpLoad %23 
                                       f32_2 %434 = OpVectorShuffle %433 %433 0 1 
                                       f32_2 %435 = OpFMul %432 %434 
                                       f32_3 %436 = OpLoad %323 
                                       f32_2 %437 = OpVectorShuffle %436 %436 2 1 
                                       f32_2 %438 = OpFAdd %435 %437 
                                       f32_4 %439 = OpLoad %283 
                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 2 3 
                                                      OpStore %283 %440 
                                         f32 %441 = OpLoad %411 
                                       f32_2 %442 = OpCompositeConstruct %441 %441 
                                       f32_2 %443 = OpLoad %427 
                                       f32_2 %444 = OpFMul %442 %443 
                                       f32_2 %447 = OpFAdd %444 %446 
                                       f32_4 %448 = OpLoad %283 
                                       f32_4 %449 = OpVectorShuffle %448 %447 0 1 4 5 
                                                      OpStore %283 %449 
                                Private f32* %450 = OpAccessChain %323 %74 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %283 %74 
                                         f32 %453 = OpLoad %452 
                                        bool %454 = OpFOrdGreaterThanEqual %451 %453 
                                                      OpStore %405 %454 
                                        bool %456 = OpLoad %405 
                                                      OpSelectionMerge %458 None 
                                                      OpBranchConditional %456 %457 %459 
                                             %457 = OpLabel 
                                                      OpStore %455 %106 
                                                      OpBranch %458 
                                             %459 = OpLabel 
                                                      OpStore %455 %108 
                                                      OpBranch %458 
                                             %458 = OpLabel 
                                         f32 %460 = OpLoad %455 
                                                      OpStore %411 %460 
                                       f32_4 %461 = OpLoad %283 
                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 3 
                                       f32_3 %463 = OpFNegate %462 
                                       f32_4 %464 = OpLoad %27 
                                       f32_4 %465 = OpVectorShuffle %464 %463 4 5 6 3 
                                                      OpStore %27 %465 
                                Private f32* %466 = OpAccessChain %323 %74 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFNegate %467 
                                Private f32* %469 = OpAccessChain %27 %126 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %27 %74 
                                         f32 %471 = OpLoad %470 
                                Private f32* %472 = OpAccessChain %323 %74 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpFAdd %471 %473 
                                Private f32* %475 = OpAccessChain %149 %74 
                                                      OpStore %475 %474 
                                       f32_4 %476 = OpLoad %27 
                                       f32_3 %477 = OpVectorShuffle %476 %476 1 2 3 
                                       f32_4 %478 = OpLoad %283 
                                       f32_3 %479 = OpVectorShuffle %478 %478 1 2 0 
                                       f32_3 %480 = OpFAdd %477 %479 
                                       f32_4 %481 = OpLoad %149 
                                       f32_4 %482 = OpVectorShuffle %481 %480 0 4 5 6 
                                                      OpStore %149 %482 
                                         f32 %483 = OpLoad %411 
                                       f32_3 %484 = OpCompositeConstruct %483 %483 %483 
                                       f32_4 %485 = OpLoad %149 
                                       f32_3 %486 = OpVectorShuffle %485 %485 0 1 2 
                                       f32_3 %487 = OpFMul %484 %486 
                                       f32_4 %488 = OpLoad %283 
                                       f32_3 %489 = OpVectorShuffle %488 %488 0 1 3 
                                       f32_3 %490 = OpFAdd %487 %489 
                                       f32_4 %491 = OpLoad %27 
                                       f32_4 %492 = OpVectorShuffle %491 %490 4 5 6 3 
                                                      OpStore %27 %492 
                                         f32 %493 = OpLoad %411 
                                Private f32* %494 = OpAccessChain %149 %126 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpFMul %493 %495 
                                Private f32* %497 = OpAccessChain %323 %74 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpFAdd %496 %498 
                                                      OpStore %411 %499 
                                Private f32* %500 = OpAccessChain %27 %168 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpLoad %411 
                                         f32 %503 = OpExtInst %1 37 %501 %502 
                                                      OpStore %100 %503 
                                         f32 %504 = OpLoad %100 
                                         f32 %505 = OpFNegate %504 
                                Private f32* %506 = OpAccessChain %27 %74 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpFAdd %505 %507 
                                                      OpStore %100 %508 
                                Private f32* %509 = OpAccessChain %27 %168 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFNegate %510 
                                         f32 %512 = OpLoad %411 
                                         f32 %513 = OpFAdd %511 %512 
                                                      OpStore %411 %513 
                                         f32 %515 = OpLoad %100 
                                         f32 %517 = OpFMul %515 %516 
                                         f32 %519 = OpFAdd %517 %518 
                                                      OpStore %514 %519 
                                         f32 %520 = OpLoad %411 
                                         f32 %521 = OpLoad %514 
                                         f32 %522 = OpFDiv %520 %521 
                                                      OpStore %411 %522 
                                         f32 %523 = OpLoad %411 
                                Private f32* %524 = OpAccessChain %27 %162 
                                         f32 %525 = OpLoad %524 
                                         f32 %526 = OpFAdd %523 %525 
                                                      OpStore %411 %526 
                                Private f32* %527 = OpAccessChain %27 %74 
                                         f32 %528 = OpLoad %527 
                                         f32 %529 = OpFAdd %528 %518 
                                                      OpStore %514 %529 
                                         f32 %530 = OpLoad %100 
                                         f32 %531 = OpLoad %514 
                                         f32 %532 = OpFDiv %530 %531 
                                                      OpStore %514 %532 
                                Private f32* %534 = OpAccessChain %9 %168 
                                         f32 %535 = OpLoad %534 
                                Private f32* %536 = OpAccessChain %9 %162 
                                         f32 %537 = OpLoad %536 
                                        bool %538 = OpFOrdGreaterThanEqual %535 %537 
                                                      OpStore %533 %538 
                                        bool %540 = OpLoad %533 
                                                      OpSelectionMerge %542 None 
                                                      OpBranchConditional %540 %541 %543 
                                             %541 = OpLabel 
                                                      OpStore %539 %106 
                                                      OpBranch %542 
                                             %543 = OpLabel 
                                                      OpStore %539 %108 
                                                      OpBranch %542 
                                             %542 = OpLabel 
                                         f32 %544 = OpLoad %539 
                                Private f32* %545 = OpAccessChain %427 %74 
                                                      OpStore %545 %544 
                                Private f32* %547 = OpAccessChain %9 %162 
                                         f32 %548 = OpLoad %547 
                                         f32 %549 = OpFNegate %548 
                                Private f32* %550 = OpAccessChain %9 %168 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpFAdd %549 %551 
                                                      OpStore %546 %552 
                                Private f32* %554 = OpAccessChain %427 %74 
                                         f32 %555 = OpLoad %554 
                                         f32 %556 = OpLoad %546 
                                         f32 %557 = OpFMul %555 %556 
                                Private f32* %558 = OpAccessChain %9 %162 
                                         f32 %559 = OpLoad %558 
                                         f32 %560 = OpFAdd %557 %559 
                                Private f32* %561 = OpAccessChain %553 %74 
                                                      OpStore %561 %560 
                                Private f32* %563 = OpAccessChain %9 %74 
                                         f32 %564 = OpLoad %563 
                                Private f32* %565 = OpAccessChain %553 %74 
                                         f32 %566 = OpLoad %565 
                                        bool %567 = OpFOrdGreaterThanEqual %564 %566 
                                                      OpStore %562 %567 
                                        bool %570 = OpLoad %562 
                                                      OpSelectionMerge %572 None 
                                                      OpBranchConditional %570 %571 %573 
                                             %571 = OpLabel 
                                                      OpStore %569 %106 
                                                      OpBranch %572 
                                             %573 = OpLabel 
                                                      OpStore %569 %108 
                                                      OpBranch %572 
                                             %572 = OpLabel 
                                         f32 %574 = OpLoad %569 
                                                      OpStore %568 %574 
                                Private f32* %576 = OpAccessChain %553 %74 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpFNegate %577 
                                Private f32* %579 = OpAccessChain %9 %74 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFAdd %578 %580 
                                Private f32* %582 = OpAccessChain %575 %74 
                                                      OpStore %582 %581 
                                         f32 %583 = OpLoad %568 
                                Private f32* %584 = OpAccessChain %575 %74 
                                         f32 %585 = OpLoad %584 
                                         f32 %586 = OpFMul %583 %585 
                                Private f32* %587 = OpAccessChain %553 %74 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpFAdd %586 %588 
                                Private f32* %590 = OpAccessChain %575 %74 
                                                      OpStore %590 %589 
                                Private f32* %591 = OpAccessChain %575 %74 
                                         f32 %592 = OpLoad %591 
                                Uniform f32* %594 = OpAccessChain %35 %593 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpFMul %592 %595 
                                Private f32* %597 = OpAccessChain %553 %74 
                                                      OpStore %597 %596 
                                Private f32* %598 = OpAccessChain %553 %74 
                                         f32 %599 = OpLoad %598 
                                Private f32* %600 = OpAccessChain %27 %74 
                                         f32 %601 = OpLoad %600 
                                         f32 %602 = OpExtInst %1 40 %599 %601 
                                Private f32* %603 = OpAccessChain %553 %74 
                                                      OpStore %603 %602 
                                       f32_3 %604 = OpLoad %120 
                                         f32 %605 = OpDot %604 %89 
                                Private f32* %606 = OpAccessChain %323 %74 
                                                      OpStore %606 %605 
                                Private f32* %607 = OpAccessChain %323 %74 
                                         f32 %608 = OpLoad %607 
                                         f32 %610 = OpFMul %608 %609 
                                Private f32* %611 = OpAccessChain %575 %74 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFAdd %610 %612 
                                Private f32* %614 = OpAccessChain %575 %74 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %575 %74 
                                         f32 %616 = OpLoad %615 
                                Uniform f32* %618 = OpAccessChain %35 %617 
                                         f32 %619 = OpLoad %618 
                                         f32 %620 = OpFMul %616 %619 
                                Private f32* %621 = OpAccessChain %575 %74 
                                                      OpStore %621 %620 
                                Private f32* %622 = OpAccessChain %575 %74 
                                         f32 %623 = OpLoad %622 
                                Private f32* %624 = OpAccessChain %553 %74 
                                         f32 %625 = OpLoad %624 
                                         f32 %626 = OpExtInst %1 37 %623 %625 
                                Private f32* %627 = OpAccessChain %575 %74 
                                                      OpStore %627 %626 
                                         f32 %628 = OpLoad %411 
                                       f32_3 %629 = OpCompositeConstruct %628 %628 %628 
                                       f32_3 %630 = OpExtInst %1 4 %629 
                                       f32_3 %633 = OpFAdd %630 %632 
                                                      OpStore %553 %633 
                                       f32_3 %634 = OpLoad %553 
                                       f32_3 %635 = OpExtInst %1 10 %634 
                                                      OpStore %553 %635 
                                       f32_3 %636 = OpLoad %553 
                                       f32_3 %638 = OpFMul %636 %637 
                                       f32_3 %641 = OpFAdd %638 %640 
                                                      OpStore %553 %641 
                                       f32_3 %642 = OpLoad %553 
                                       f32_3 %643 = OpExtInst %1 4 %642 
                                       f32_3 %645 = OpFAdd %643 %644 
                                                      OpStore %553 %645 
                                       f32_3 %646 = OpLoad %553 
                                       f32_3 %647 = OpCompositeConstruct %108 %108 %108 
                                       f32_3 %648 = OpCompositeConstruct %106 %106 %106 
                                       f32_3 %649 = OpExtInst %1 43 %646 %647 %648 
                                                      OpStore %553 %649 
                                       f32_3 %650 = OpLoad %553 
                                       f32_3 %651 = OpFAdd %650 %644 
                                                      OpStore %553 %651 
                                         f32 %652 = OpLoad %514 
                                       f32_3 %653 = OpCompositeConstruct %652 %652 %652 
                                       f32_3 %654 = OpLoad %553 
                                       f32_3 %655 = OpFMul %653 %654 
                                       f32_3 %657 = OpFAdd %655 %656 
                                                      OpStore %553 %657 
                                       f32_3 %658 = OpLoad %553 
                                       f32_3 %659 = OpLoad %575 
                                       f32_3 %660 = OpVectorShuffle %659 %659 0 0 0 
                                       f32_3 %661 = OpFMul %658 %660 
                                                      OpStore %575 %661 
                                       f32_3 %662 = OpLoad %575 
                                       f32_4 %663 = OpLoad %393 
                                       f32_4 %664 = OpVectorShuffle %663 %662 4 5 6 3 
                                                      OpStore %393 %664 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" "UnlitTilted" = "UnlitTilted" }
  Blend One One, One One
  ColorMask RGB 0
  ZWrite Off
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 75176
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
float u_xlat5;
float u_xlat10;
bool u_xlatb10;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb10 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10 = u_xlat2.y * 0.25 + 0.75;
        u_xlat5 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat5);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat10 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xx);
    u_xlat1.x = u_xlat10 * u_xlat10_2.w;
    u_xlat0.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %93 %94 %107 %138 %144 %147 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %107 Location 107 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %147 Location 147 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %89 = OpTypePointer Output %7 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                                Output f32_2* %93 = OpVariable Output 
                                 Input f32_4* %94 = OpVariable Input 
                                             %105 = OpTypeVector %6 3 
                                             %106 = OpTypePointer Input %105 
                                Input f32_3* %107 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                                             %114 = OpTypePointer Private %6 
                                         u32 %127 = OpConstant 2 
                                Private f32* %129 = OpVariable Private 
                                             %137 = OpTypePointer Output %105 
                               Output f32_3* %138 = OpVariable Output 
                               Output f32_3* %144 = OpVariable Output 
                               Output f32_4* %147 = OpVariable Output 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %36 %24 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %36 %23 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %36 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %82 = OpAccessChain %21 %36 %46 
                                        f32_4 %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %44 
                                        f32_4 %85 = OpVectorShuffle %84 %84 3 3 3 3 
                                        f32_4 %86 = OpFMul %83 %85 
                                        f32_4 %87 = OpLoad %57 
                                        f32_4 %88 = OpFAdd %86 %87 
                                Output f32_4* %90 = OpAccessChain %81 %23 
                                                      OpStore %90 %88 
                                        f32_4 %95 = OpLoad %94 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                               Uniform f32_4* %97 = OpAccessChain %21 %46 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_2 %100 = OpFMul %96 %99 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 2 3 
                                       f32_2 %104 = OpFAdd %100 %103 
                                                      OpStore %93 %104 
                                       f32_3 %108 = OpLoad %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %23 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %115 = OpAccessChain %44 %113 
                                                      OpStore %115 %112 
                                       f32_3 %116 = OpLoad %107 
                              Uniform f32_4* %117 = OpAccessChain %21 %24 %24 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %116 %119 
                                Private f32* %121 = OpAccessChain %44 %77 
                                                      OpStore %121 %120 
                                       f32_3 %122 = OpLoad %107 
                              Uniform f32_4* %123 = OpAccessChain %21 %24 %36 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %128 = OpAccessChain %44 %127 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %44 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %44 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %136 = OpExtInst %1 32 %135 
                                                      OpStore %129 %136 
                                         f32 %139 = OpLoad %129 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %140 %142 
                                                      OpStore %138 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore %144 %146 
                                       f32_4 %148 = OpLoad %9 
                                                      OpStore %147 %148 
                                 Output f32* %150 = OpAccessChain %81 %23 %77 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %81 %23 %77 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 243
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %62 %231 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 RelaxedPrecision 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 RelaxedPrecision 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 RelaxedPrecision 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %62 Location 62 
                                                      OpDecorate %105 SpecId 105 
                                                      OpDecorate %185 DescriptorSet 185 
                                                      OpDecorate %185 Binding 185 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %210 DescriptorSet 210 
                                                      OpDecorate %210 Binding 210 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %231 Location 231 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeArray %7 %26 
                                              %30 = OpTypeStruct %7 %7 %27 %28 %28 %7 %29 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 7 
                                              %35 = OpTypePointer Uniform %6 
                                          u32 %40 = OpConstant 0 
                                              %42 = OpTypeBool 
                                              %43 = OpTypePointer Private %42 
                                Private bool* %44 = OpVariable Private 
                                          f32 %47 = OpConstant 3.674022E-40 
                                          i32 %50 = OpConstant 0 
                                          i32 %51 = OpConstant 1 
                                          i32 %53 = OpConstant -1 
                                              %59 = OpTypePointer Private %28 
                               Private f32_3* %60 = OpVariable Private 
                                              %61 = OpTypePointer Input %28 
                                 Input f32_3* %62 = OpVariable Input 
                                          i32 %65 = OpConstant 6 
                                              %66 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 2 
                                          i32 %89 = OpConstant 3 
                                Private bool* %94 = OpVariable Private 
                                          f32 %97 = OpConstant 3.674022E-40 
                                         bool %99 = OpConstantFalse 
                                        bool %105 = OpSpecConstantFalse 
                                         u32 %108 = OpConstant 1 
                              Private f32_3* %112 = OpVariable Private 
                                             %140 = OpTypePointer Function %28 
                                         i32 %150 = OpConstant 4 
                                             %151 = OpTypePointer Uniform %28 
                              Private f32_4* %156 = OpVariable Private 
                                Private f32* %163 = OpVariable Private 
                                         f32 %166 = OpConstant 3.674022E-40 
                                         f32 %168 = OpConstant 3.674022E-40 
                                         u32 %170 = OpConstant 2 
                                         f32 %173 = OpConstant 3.674022E-40 
                                             %182 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %183 = OpTypeSampledImage %182 
                                             %184 = OpTypePointer UniformConstant %183 
 UniformConstant read_only Texture3DSampled* %185 = OpVariable UniformConstant 
                              Private f32_3* %196 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %210 = OpVariable UniformConstant 
                                         i32 %225 = OpConstant 5 
                                             %230 = OpTypePointer Output %7 
                               Output f32_4* %231 = OpVariable Output 
                                             %240 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %141 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                 Private f32* %41 = OpAccessChain %20 %40 
                                                      OpStore %41 %39 
                                 Private f32* %45 = OpAccessChain %20 %40 
                                          f32 %46 = OpLoad %45 
                                         bool %48 = OpFOrdLessThan %46 %47 
                                                      OpStore %44 %48 
                                         bool %49 = OpLoad %44 
                                          i32 %52 = OpSelect %49 %51 %50 
                                          i32 %54 = OpIMul %52 %53 
                                         bool %55 = OpINotEqual %54 %50 
                                                      OpSelectionMerge %57 None 
                                                      OpBranchConditional %55 %56 %57 
                                              %56 = OpLabel 
                                                      OpKill
                                              %57 = OpLabel 
                                        f32_3 %63 = OpLoad %62 
                                        f32_3 %64 = OpVectorShuffle %63 %63 1 1 1 
                               Uniform f32_4* %67 = OpAccessChain %32 %65 %51 
                                        f32_4 %68 = OpLoad %67 
                                        f32_3 %69 = OpVectorShuffle %68 %68 0 1 2 
                                        f32_3 %70 = OpFMul %64 %69 
                                                      OpStore %60 %70 
                               Uniform f32_4* %71 = OpAccessChain %32 %65 %50 
                                        f32_4 %72 = OpLoad %71 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpLoad %62 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                                        f32_3 %76 = OpFMul %73 %75 
                                        f32_3 %77 = OpLoad %60 
                                        f32_3 %78 = OpFAdd %76 %77 
                                                      OpStore %60 %78 
                               Uniform f32_4* %80 = OpAccessChain %32 %65 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpLoad %62 
                                        f32_3 %84 = OpVectorShuffle %83 %83 2 2 2 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_3 %86 = OpLoad %60 
                                        f32_3 %87 = OpFAdd %85 %86 
                                                      OpStore %60 %87 
                                        f32_3 %88 = OpLoad %60 
                               Uniform f32_4* %90 = OpAccessChain %32 %65 %89 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFAdd %88 %92 
                                                      OpStore %60 %93 
                                 Uniform f32* %95 = OpAccessChain %32 %51 %40 
                                          f32 %96 = OpLoad %95 
                                         bool %98 = OpFOrdEqual %96 %97 
                                                      OpStore %94 %98 
                                                      OpSelectionMerge %101 None 
                                                      OpBranchConditional %99 %100 %101 
                                             %100 = OpLabel 
                                        bool %102 = OpLoad %94 
                                                      OpSelectionMerge %104 None 
                                                      OpBranchConditional %102 %103 %104 
                                             %103 = OpLabel 
                                                      OpBranch %104 
                                             %104 = OpLabel 
                                                      OpBranch %101 
                                             %101 = OpLabel 
                                                      OpSelectionMerge %107 None 
                                                      OpBranchConditional %105 %106 %191 
                                             %106 = OpLabel 
                                Uniform f32* %109 = OpAccessChain %32 %51 %108 
                                         f32 %110 = OpLoad %109 
                                        bool %111 = OpFOrdEqual %110 %97 
                                                      OpStore %94 %111 
                                       f32_3 %113 = OpLoad %62 
                                       f32_3 %114 = OpVectorShuffle %113 %113 1 1 1 
                              Uniform f32_4* %115 = OpAccessChain %32 %79 %51 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFMul %114 %117 
                                                      OpStore %112 %118 
                              Uniform f32_4* %119 = OpAccessChain %32 %79 %50 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpLoad %62 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 0 0 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_3 %125 = OpLoad %112 
                                       f32_3 %126 = OpFAdd %124 %125 
                                                      OpStore %112 %126 
                              Uniform f32_4* %127 = OpAccessChain %32 %79 %79 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpLoad %62 
                                       f32_3 %131 = OpVectorShuffle %130 %130 2 2 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_3 %133 = OpLoad %112 
                                       f32_3 %134 = OpFAdd %132 %133 
                                                      OpStore %112 %134 
                                       f32_3 %135 = OpLoad %112 
                              Uniform f32_4* %136 = OpAccessChain %32 %79 %89 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpFAdd %135 %138 
                                                      OpStore %112 %139 
                                        bool %142 = OpLoad %94 
                                                      OpSelectionMerge %144 None 
                                                      OpBranchConditional %142 %143 %146 
                                             %143 = OpLabel 
                                       f32_3 %145 = OpLoad %112 
                                                      OpStore %141 %145 
                                                      OpBranch %144 
                                             %146 = OpLabel 
                                       f32_3 %147 = OpLoad %62 
                                                      OpStore %141 %147 
                                                      OpBranch %144 
                                             %144 = OpLabel 
                                       f32_3 %148 = OpLoad %141 
                                                      OpStore %112 %148 
                                       f32_3 %149 = OpLoad %112 
                              Uniform f32_3* %152 = OpAccessChain %32 %150 
                                       f32_3 %153 = OpLoad %152 
                                       f32_3 %154 = OpFNegate %153 
                                       f32_3 %155 = OpFAdd %149 %154 
                                                      OpStore %112 %155 
                                       f32_3 %157 = OpLoad %112 
                              Uniform f32_3* %158 = OpAccessChain %32 %89 
                                       f32_3 %159 = OpLoad %158 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %156 
                                       f32_4 %162 = OpVectorShuffle %161 %160 0 4 5 6 
                                                      OpStore %156 %162 
                                Private f32* %164 = OpAccessChain %156 %108 
                                         f32 %165 = OpLoad %164 
                                         f32 %167 = OpFMul %165 %166 
                                         f32 %169 = OpFAdd %167 %168 
                                                      OpStore %163 %169 
                                Uniform f32* %171 = OpAccessChain %32 %51 %170 
                                         f32 %172 = OpLoad %171 
                                         f32 %174 = OpFMul %172 %173 
                                         f32 %175 = OpFAdd %174 %168 
                                Private f32* %176 = OpAccessChain %112 %40 
                                                      OpStore %176 %175 
                                         f32 %177 = OpLoad %163 
                                Private f32* %178 = OpAccessChain %112 %40 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpExtInst %1 40 %177 %179 
                                Private f32* %181 = OpAccessChain %156 %40 
                                                      OpStore %181 %180 
                  read_only Texture3DSampled %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %156 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 2 3 
                                       f32_4 %189 = OpImageSampleImplicitLod %186 %188 
                                                      OpStore %156 %189 
                                       f32_4 %190 = OpLoad %156 
                                                      OpStore %20 %190 
                                                      OpBranch %107 
                                             %191 = OpLabel 
                                Private f32* %192 = OpAccessChain %20 %40 
                                                      OpStore %192 %97 
                                Private f32* %193 = OpAccessChain %20 %108 
                                                      OpStore %193 %97 
                                Private f32* %194 = OpAccessChain %20 %170 
                                                      OpStore %194 %97 
                                Private f32* %195 = OpAccessChain %20 %22 
                                                      OpStore %195 %97 
                                                      OpBranch %107 
                                             %107 = OpLabel 
                                       f32_4 %197 = OpLoad %20 
                              Uniform f32_4* %198 = OpAccessChain %32 %50 
                                       f32_4 %199 = OpLoad %198 
                                         f32 %200 = OpDot %197 %199 
                                Private f32* %201 = OpAccessChain %196 %40 
                                                      OpStore %201 %200 
                                Private f32* %202 = OpAccessChain %196 %40 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpExtInst %1 43 %203 %47 %97 
                                Private f32* %205 = OpAccessChain %196 %40 
                                                      OpStore %205 %204 
                                       f32_3 %206 = OpLoad %60 
                                       f32_3 %207 = OpLoad %60 
                                         f32 %208 = OpDot %206 %207 
                                Private f32* %209 = OpAccessChain %60 %40 
                                                      OpStore %209 %208 
                  read_only Texture2DSampled %211 = OpLoad %210 
                                       f32_3 %212 = OpLoad %60 
                                       f32_2 %213 = OpVectorShuffle %212 %212 0 0 
                                       f32_4 %214 = OpImageSampleImplicitLod %211 %213 
                                         f32 %215 = OpCompositeExtract %214 3 
                                Private f32* %216 = OpAccessChain %60 %40 
                                                      OpStore %216 %215 
                                Private f32* %217 = OpAccessChain %196 %40 
                                         f32 %218 = OpLoad %217 
                                Private f32* %219 = OpAccessChain %60 %40 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpFMul %218 %220 
                                Private f32* %222 = OpAccessChain %60 %40 
                                                      OpStore %222 %221 
                                       f32_4 %223 = OpLoad %9 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                              Uniform f32_4* %226 = OpAccessChain %32 %225 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %224 %228 
                                                      OpStore %196 %229 
                                       f32_3 %232 = OpLoad %60 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 0 0 
                                       f32_3 %234 = OpLoad %196 
                                       f32_3 %235 = OpFMul %233 %234 
                                       f32_4 %236 = OpLoad %231 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                                      OpStore %231 %237 
                                Private f32* %238 = OpAccessChain %9 %22 
                                         f32 %239 = OpLoad %238 
                                 Output f32* %241 = OpAccessChain %231 %22 
                                                      OpStore %241 %239 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
float u_xlat2;
vec3 u_xlat4;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat1.y * 0.25 + 0.75;
        u_xlat2 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat4.x, u_xlat2);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat1.x = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %93 %94 %107 %138 %144 %147 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %107 Location 107 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %147 Location 147 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %89 = OpTypePointer Output %7 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                                Output f32_2* %93 = OpVariable Output 
                                 Input f32_4* %94 = OpVariable Input 
                                             %105 = OpTypeVector %6 3 
                                             %106 = OpTypePointer Input %105 
                                Input f32_3* %107 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                                             %114 = OpTypePointer Private %6 
                                         u32 %127 = OpConstant 2 
                                Private f32* %129 = OpVariable Private 
                                             %137 = OpTypePointer Output %105 
                               Output f32_3* %138 = OpVariable Output 
                               Output f32_3* %144 = OpVariable Output 
                               Output f32_4* %147 = OpVariable Output 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %36 %24 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %36 %23 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %36 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %82 = OpAccessChain %21 %36 %46 
                                        f32_4 %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %44 
                                        f32_4 %85 = OpVectorShuffle %84 %84 3 3 3 3 
                                        f32_4 %86 = OpFMul %83 %85 
                                        f32_4 %87 = OpLoad %57 
                                        f32_4 %88 = OpFAdd %86 %87 
                                Output f32_4* %90 = OpAccessChain %81 %23 
                                                      OpStore %90 %88 
                                        f32_4 %95 = OpLoad %94 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                               Uniform f32_4* %97 = OpAccessChain %21 %46 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_2 %100 = OpFMul %96 %99 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 2 3 
                                       f32_2 %104 = OpFAdd %100 %103 
                                                      OpStore %93 %104 
                                       f32_3 %108 = OpLoad %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %23 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %115 = OpAccessChain %44 %113 
                                                      OpStore %115 %112 
                                       f32_3 %116 = OpLoad %107 
                              Uniform f32_4* %117 = OpAccessChain %21 %24 %24 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %116 %119 
                                Private f32* %121 = OpAccessChain %44 %77 
                                                      OpStore %121 %120 
                                       f32_3 %122 = OpLoad %107 
                              Uniform f32_4* %123 = OpAccessChain %21 %24 %36 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %128 = OpAccessChain %44 %127 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %44 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %44 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %136 = OpExtInst %1 32 %135 
                                                      OpStore %129 %136 
                                         f32 %139 = OpLoad %129 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %140 %142 
                                                      OpStore %138 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore %144 %146 
                                       f32_4 %148 = OpLoad %9 
                                                      OpStore %147 %148 
                                 Output f32* %150 = OpAccessChain %81 %23 %77 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %81 %23 %77 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 195
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %78 %183 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %29 0 RelaxedPrecision 
                                                      OpMemberDecorate %29 0 Offset 29 
                                                      OpMemberDecorate %29 1 Offset 29 
                                                      OpMemberDecorate %29 2 Offset 29 
                                                      OpMemberDecorate %29 3 Offset 29 
                                                      OpMemberDecorate %29 4 Offset 29 
                                                      OpMemberDecorate %29 5 RelaxedPrecision 
                                                      OpMemberDecorate %29 5 Offset 29 
                                                      OpMemberDecorate %29 6 RelaxedPrecision 
                                                      OpMemberDecorate %29 6 Offset 29 
                                                      OpDecorate %29 Block 
                                                      OpDecorate %31 DescriptorSet 31 
                                                      OpDecorate %31 Binding 31 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %68 SpecId 68 
                                                      OpDecorate %78 Location 78 
                                                      OpDecorate %156 DescriptorSet 156 
                                                      OpDecorate %156 Binding 156 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeStruct %7 %7 %27 %28 %28 %7 %6 
                                              %30 = OpTypePointer Uniform %29 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32;}* %31 = OpVariable Uniform 
                                              %32 = OpTypeInt 32 1 
                                          i32 %33 = OpConstant 6 
                                              %34 = OpTypePointer Uniform %6 
                                          u32 %39 = OpConstant 0 
                                              %41 = OpTypeBool 
                                              %42 = OpTypePointer Private %41 
                                Private bool* %43 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                          i32 %49 = OpConstant 0 
                                          i32 %50 = OpConstant 1 
                                          i32 %52 = OpConstant -1 
                                          f32 %60 = OpConstant 3.674022E-40 
                                         bool %62 = OpConstantFalse 
                                         bool %68 = OpSpecConstantFalse 
                                          u32 %71 = OpConstant 1 
                                              %75 = OpTypePointer Private %28 
                               Private f32_3* %76 = OpVariable Private 
                                              %77 = OpTypePointer Input %28 
                                 Input f32_3* %78 = OpVariable Input 
                                          i32 %81 = OpConstant 2 
                                              %82 = OpTypePointer Uniform %7 
                                         i32 %104 = OpConstant 3 
                              Private f32_3* %109 = OpVariable Private 
                                             %110 = OpTypePointer Function %28 
                                         i32 %120 = OpConstant 4 
                                             %121 = OpTypePointer Uniform %28 
                              Private f32_4* %126 = OpVariable Private 
                                         f32 %135 = OpConstant 3.674022E-40 
                                         f32 %137 = OpConstant 3.674022E-40 
                                         u32 %140 = OpConstant 2 
                                         f32 %143 = OpConstant 3.674022E-40 
                                             %153 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %154 = OpTypeSampledImage %153 
                                             %155 = OpTypePointer UniformConstant %154 
 UniformConstant read_only Texture3DSampled* %156 = OpVariable UniformConstant 
                                Private f32* %167 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         i32 %177 = OpConstant 5 
                                             %182 = OpTypePointer Output %7 
                               Output f32_4* %183 = OpVariable Output 
                                             %192 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %111 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %35 = OpAccessChain %31 %33 
                                          f32 %36 = OpLoad %35 
                                          f32 %37 = OpFNegate %36 
                                          f32 %38 = OpFAdd %25 %37 
                                 Private f32* %40 = OpAccessChain %20 %39 
                                                      OpStore %40 %38 
                                 Private f32* %44 = OpAccessChain %20 %39 
                                          f32 %45 = OpLoad %44 
                                         bool %47 = OpFOrdLessThan %45 %46 
                                                      OpStore %43 %47 
                                         bool %48 = OpLoad %43 
                                          i32 %51 = OpSelect %48 %50 %49 
                                          i32 %53 = OpIMul %51 %52 
                                         bool %54 = OpINotEqual %53 %49 
                                                      OpSelectionMerge %56 None 
                                                      OpBranchConditional %54 %55 %56 
                                              %55 = OpLabel 
                                                      OpKill
                                              %56 = OpLabel 
                                 Uniform f32* %58 = OpAccessChain %31 %50 %39 
                                          f32 %59 = OpLoad %58 
                                         bool %61 = OpFOrdEqual %59 %60 
                                                      OpStore %43 %61 
                                                      OpSelectionMerge %64 None 
                                                      OpBranchConditional %62 %63 %64 
                                              %63 = OpLabel 
                                         bool %65 = OpLoad %43 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpBranch %67 
                                              %67 = OpLabel 
                                                      OpBranch %64 
                                              %64 = OpLabel 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %162 
                                              %69 = OpLabel 
                                 Uniform f32* %72 = OpAccessChain %31 %50 %71 
                                          f32 %73 = OpLoad %72 
                                         bool %74 = OpFOrdEqual %73 %60 
                                                      OpStore %43 %74 
                                        f32_3 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %31 %81 %50 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %76 %86 
                               Uniform f32_4* %87 = OpAccessChain %31 %81 %49 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpLoad %78 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpFMul %89 %91 
                                        f32_3 %93 = OpLoad %76 
                                        f32_3 %94 = OpFAdd %92 %93 
                                                      OpStore %76 %94 
                               Uniform f32_4* %95 = OpAccessChain %31 %81 %81 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpLoad %78 
                                        f32_3 %99 = OpVectorShuffle %98 %98 2 2 2 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_3 %101 = OpLoad %76 
                                       f32_3 %102 = OpFAdd %100 %101 
                                                      OpStore %76 %102 
                                       f32_3 %103 = OpLoad %76 
                              Uniform f32_4* %105 = OpAccessChain %31 %81 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFAdd %103 %107 
                                                      OpStore %76 %108 
                                        bool %112 = OpLoad %43 
                                                      OpSelectionMerge %114 None 
                                                      OpBranchConditional %112 %113 %116 
                                             %113 = OpLabel 
                                       f32_3 %115 = OpLoad %76 
                                                      OpStore %111 %115 
                                                      OpBranch %114 
                                             %116 = OpLabel 
                                       f32_3 %117 = OpLoad %78 
                                                      OpStore %111 %117 
                                                      OpBranch %114 
                                             %114 = OpLabel 
                                       f32_3 %118 = OpLoad %111 
                                                      OpStore %109 %118 
                                       f32_3 %119 = OpLoad %109 
                              Uniform f32_3* %122 = OpAccessChain %31 %120 
                                       f32_3 %123 = OpLoad %122 
                                       f32_3 %124 = OpFNegate %123 
                                       f32_3 %125 = OpFAdd %119 %124 
                                                      OpStore %109 %125 
                                       f32_3 %127 = OpLoad %109 
                              Uniform f32_3* %128 = OpAccessChain %31 %104 
                                       f32_3 %129 = OpLoad %128 
                                       f32_3 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %126 
                                       f32_4 %132 = OpVectorShuffle %131 %130 0 4 5 6 
                                                      OpStore %126 %132 
                                Private f32* %133 = OpAccessChain %126 %71 
                                         f32 %134 = OpLoad %133 
                                         f32 %136 = OpFMul %134 %135 
                                         f32 %138 = OpFAdd %136 %137 
                                Private f32* %139 = OpAccessChain %109 %39 
                                                      OpStore %139 %138 
                                Uniform f32* %141 = OpAccessChain %31 %50 %140 
                                         f32 %142 = OpLoad %141 
                                         f32 %144 = OpFMul %142 %143 
                                         f32 %145 = OpFAdd %144 %137 
                                Private f32* %146 = OpAccessChain %76 %39 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %76 %39 
                                         f32 %148 = OpLoad %147 
                                Private f32* %149 = OpAccessChain %109 %39 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpExtInst %1 40 %148 %150 
                                Private f32* %152 = OpAccessChain %126 %39 
                                                      OpStore %152 %151 
                  read_only Texture3DSampled %157 = OpLoad %156 
                                       f32_4 %158 = OpLoad %126 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 2 3 
                                       f32_4 %160 = OpImageSampleImplicitLod %157 %159 
                                                      OpStore %126 %160 
                                       f32_4 %161 = OpLoad %126 
                                                      OpStore %20 %161 
                                                      OpBranch %70 
                                             %162 = OpLabel 
                                Private f32* %163 = OpAccessChain %20 %39 
                                                      OpStore %163 %60 
                                Private f32* %164 = OpAccessChain %20 %71 
                                                      OpStore %164 %60 
                                Private f32* %165 = OpAccessChain %20 %140 
                                                      OpStore %165 %60 
                                Private f32* %166 = OpAccessChain %20 %22 
                                                      OpStore %166 %60 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                       f32_4 %168 = OpLoad %20 
                              Uniform f32_4* %169 = OpAccessChain %31 %49 
                                       f32_4 %170 = OpLoad %169 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %167 %171 
                                         f32 %172 = OpLoad %167 
                                         f32 %173 = OpExtInst %1 43 %172 %46 %60 
                                                      OpStore %167 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                              Uniform f32_4* %178 = OpAccessChain %31 %177 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFMul %176 %180 
                                                      OpStore %174 %181 
                                         f32 %184 = OpLoad %167 
                                       f32_3 %185 = OpCompositeConstruct %184 %184 %184 
                                       f32_3 %186 = OpLoad %174 
                                       f32_3 %187 = OpFMul %185 %186 
                                       f32_4 %188 = OpLoad %183 
                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
                                                      OpStore %183 %189 
                                Private f32* %190 = OpAccessChain %9 %22 
                                         f32 %191 = OpLoad %190 
                                 Output f32* %193 = OpAccessChain %183 %22 
                                                      OpStore %193 %191 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
float u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat3 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat6.x, u_xlat3);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat2.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb6 = 0.0<u_xlat1.z;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat10.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(0.5, 0.5);
    u_xlat10_3 = texture(_LightTexture0, u_xlat10.xy);
    u_xlat13 = u_xlat6.x * u_xlat10_3.w;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_3 = texture(_LightTextureB0, u_xlat1.xx);
    u_xlat1.x = u_xlat13 * u_xlat10_3.w;
    u_xlat1.x = u_xlat2.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %93 %94 %107 %138 %144 %147 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %107 Location 107 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %147 Location 147 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %89 = OpTypePointer Output %7 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                                Output f32_2* %93 = OpVariable Output 
                                 Input f32_4* %94 = OpVariable Input 
                                             %105 = OpTypeVector %6 3 
                                             %106 = OpTypePointer Input %105 
                                Input f32_3* %107 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                                             %114 = OpTypePointer Private %6 
                                         u32 %127 = OpConstant 2 
                                Private f32* %129 = OpVariable Private 
                                             %137 = OpTypePointer Output %105 
                               Output f32_3* %138 = OpVariable Output 
                               Output f32_3* %144 = OpVariable Output 
                               Output f32_4* %147 = OpVariable Output 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %36 %24 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %36 %23 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %36 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %82 = OpAccessChain %21 %36 %46 
                                        f32_4 %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %44 
                                        f32_4 %85 = OpVectorShuffle %84 %84 3 3 3 3 
                                        f32_4 %86 = OpFMul %83 %85 
                                        f32_4 %87 = OpLoad %57 
                                        f32_4 %88 = OpFAdd %86 %87 
                                Output f32_4* %90 = OpAccessChain %81 %23 
                                                      OpStore %90 %88 
                                        f32_4 %95 = OpLoad %94 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                               Uniform f32_4* %97 = OpAccessChain %21 %46 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_2 %100 = OpFMul %96 %99 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 2 3 
                                       f32_2 %104 = OpFAdd %100 %103 
                                                      OpStore %93 %104 
                                       f32_3 %108 = OpLoad %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %23 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %115 = OpAccessChain %44 %113 
                                                      OpStore %115 %112 
                                       f32_3 %116 = OpLoad %107 
                              Uniform f32_4* %117 = OpAccessChain %21 %24 %24 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %116 %119 
                                Private f32* %121 = OpAccessChain %44 %77 
                                                      OpStore %121 %120 
                                       f32_3 %122 = OpLoad %107 
                              Uniform f32_4* %123 = OpAccessChain %21 %24 %36 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %128 = OpAccessChain %44 %127 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %44 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %44 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %136 = OpExtInst %1 32 %135 
                                                      OpStore %129 %136 
                                         f32 %139 = OpLoad %129 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %140 %142 
                                                      OpStore %138 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore %144 %146 
                                       f32_4 %148 = OpLoad %9 
                                                      OpStore %147 %148 
                                 Output f32* %150 = OpAccessChain %81 %23 %77 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %81 %23 %77 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 282
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %58 %270 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 RelaxedPrecision 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 RelaxedPrecision 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 RelaxedPrecision 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate %97 SpecId 97 
                                                      OpDecorate %187 DescriptorSet 187 
                                                      OpDecorate %187 Binding 187 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %227 DescriptorSet 227 
                                                      OpDecorate %227 Binding 227 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %245 DescriptorSet 245 
                                                      OpDecorate %245 Binding 245 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %270 Location 270 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 3 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeArray %7 %26 
                                              %30 = OpTypeStruct %7 %7 %27 %28 %28 %7 %29 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 7 
                                              %35 = OpTypePointer Uniform %6 
                                              %40 = OpTypeBool 
                                              %41 = OpTypePointer Private %40 
                                Private bool* %42 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                          i32 %47 = OpConstant 0 
                                          i32 %48 = OpConstant 1 
                                          i32 %50 = OpConstant -1 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypePointer Input %28 
                                 Input f32_3* %58 = OpVariable Input 
                                          i32 %61 = OpConstant 6 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                                          i32 %82 = OpConstant 3 
                                          u32 %86 = OpConstant 0 
                                          f32 %89 = OpConstant 3.674022E-40 
                                         bool %91 = OpConstantFalse 
                                         bool %97 = OpSpecConstantFalse 
                                         u32 %100 = OpConstant 1 
                                             %104 = OpTypePointer Private %28 
                              Private f32_3* %105 = OpVariable Private 
                              Private f32_4* %133 = OpVariable Private 
                                             %134 = OpTypePointer Function %28 
                                         i32 %147 = OpConstant 4 
                                             %148 = OpTypePointer Uniform %28 
                                         f32 %164 = OpConstant 3.674022E-40 
                                         f32 %166 = OpConstant 3.674022E-40 
                                             %169 = OpTypePointer Private %15 
                              Private f32_2* %170 = OpVariable Private 
                                         u32 %171 = OpConstant 2 
                                         f32 %174 = OpConstant 3.674022E-40 
                                             %184 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %185 = OpTypeSampledImage %184 
                                             %186 = OpTypePointer UniformConstant %185 
 UniformConstant read_only Texture3DSampled* %187 = OpVariable UniformConstant 
                              Private f32_4* %192 = OpVariable Private 
                                Private f32* %199 = OpVariable Private 
                               Private bool* %206 = OpVariable Private 
                              Private f32_3* %210 = OpVariable Private 
                                             %211 = OpTypePointer Function %6 
                                       f32_2 %225 = OpConstantComposite %174 %174 
 UniformConstant read_only Texture2DSampled* %227 = OpVariable UniformConstant 
 UniformConstant read_only Texture2DSampled* %245 = OpVariable UniformConstant 
                                         i32 %264 = OpConstant 5 
                                             %269 = OpTypePointer Output %7 
                               Output f32_4* %270 = OpVariable Output 
                                             %279 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %135 = OpVariable Function 
                               Function f32* %212 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %23 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                                      OpStore %21 %39 
                                          f32 %43 = OpLoad %21 
                                         bool %45 = OpFOrdLessThan %43 %44 
                                                      OpStore %42 %45 
                                         bool %46 = OpLoad %42 
                                          i32 %49 = OpSelect %46 %48 %47 
                                          i32 %51 = OpIMul %49 %50 
                                         bool %52 = OpINotEqual %51 %47 
                                                      OpSelectionMerge %54 None 
                                                      OpBranchConditional %52 %53 %54 
                                              %53 = OpLabel 
                                                      OpKill
                                              %54 = OpLabel 
                                        f32_3 %59 = OpLoad %58 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %32 %61 %48 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %60 %64 
                                                      OpStore %56 %65 
                               Uniform f32_4* %66 = OpAccessChain %32 %61 %47 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %58 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %56 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %56 %72 
                               Uniform f32_4* %74 = OpAccessChain %32 %61 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_3 %76 = OpLoad %58 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %56 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %56 %80 
                                        f32_4 %81 = OpLoad %56 
                               Uniform f32_4* %83 = OpAccessChain %32 %61 %82 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %81 %84 
                                                      OpStore %56 %85 
                                 Uniform f32* %87 = OpAccessChain %32 %48 %86 
                                          f32 %88 = OpLoad %87 
                                         bool %90 = OpFOrdEqual %88 %89 
                                                      OpStore %42 %90 
                                                      OpSelectionMerge %93 None 
                                                      OpBranchConditional %91 %92 %93 
                                              %92 = OpLabel 
                                         bool %94 = OpLoad %42 
                                                      OpSelectionMerge %96 None 
                                                      OpBranchConditional %94 %95 %96 
                                              %95 = OpLabel 
                                                      OpBranch %96 
                                              %96 = OpLabel 
                                                      OpBranch %93 
                                              %93 = OpLabel 
                                                      OpSelectionMerge %99 None 
                                                      OpBranchConditional %97 %98 %194 
                                              %98 = OpLabel 
                                Uniform f32* %101 = OpAccessChain %32 %48 %100 
                                         f32 %102 = OpLoad %101 
                                        bool %103 = OpFOrdEqual %102 %89 
                                                      OpStore %42 %103 
                                       f32_3 %106 = OpLoad %58 
                                       f32_3 %107 = OpVectorShuffle %106 %106 1 1 1 
                              Uniform f32_4* %108 = OpAccessChain %32 %73 %48 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpFMul %107 %110 
                                                      OpStore %105 %111 
                              Uniform f32_4* %112 = OpAccessChain %32 %73 %47 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_3 %115 = OpLoad %58 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_3 %118 = OpLoad %105 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %105 %119 
                              Uniform f32_4* %120 = OpAccessChain %32 %73 %73 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpLoad %58 
                                       f32_3 %124 = OpVectorShuffle %123 %123 2 2 2 
                                       f32_3 %125 = OpFMul %122 %124 
                                       f32_3 %126 = OpLoad %105 
                                       f32_3 %127 = OpFAdd %125 %126 
                                                      OpStore %105 %127 
                                       f32_3 %128 = OpLoad %105 
                              Uniform f32_4* %129 = OpAccessChain %32 %73 %82 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFAdd %128 %131 
                                                      OpStore %105 %132 
                                        bool %136 = OpLoad %42 
                                                      OpSelectionMerge %138 None 
                                                      OpBranchConditional %136 %137 %140 
                                             %137 = OpLabel 
                                       f32_3 %139 = OpLoad %105 
                                                      OpStore %135 %139 
                                                      OpBranch %138 
                                             %140 = OpLabel 
                                       f32_3 %141 = OpLoad %58 
                                                      OpStore %135 %141 
                                                      OpBranch %138 
                                             %138 = OpLabel 
                                       f32_3 %142 = OpLoad %135 
                                       f32_4 %143 = OpLoad %133 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %133 %144 
                                       f32_4 %145 = OpLoad %133 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                              Uniform f32_3* %149 = OpAccessChain %32 %147 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpFNegate %150 
                                       f32_3 %152 = OpFAdd %146 %151 
                                       f32_4 %153 = OpLoad %133 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %133 %154 
                                       f32_4 %155 = OpLoad %133 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_3* %157 = OpAccessChain %32 %82 
                                       f32_3 %158 = OpLoad %157 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %133 
                                       f32_4 %161 = OpVectorShuffle %160 %159 0 4 5 6 
                                                      OpStore %133 %161 
                                Private f32* %162 = OpAccessChain %133 %100 
                                         f32 %163 = OpLoad %162 
                                         f32 %165 = OpFMul %163 %164 
                                         f32 %167 = OpFAdd %165 %166 
                                Private f32* %168 = OpAccessChain %105 %86 
                                                      OpStore %168 %167 
                                Uniform f32* %172 = OpAccessChain %32 %48 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %175 = OpFMul %173 %174 
                                         f32 %176 = OpFAdd %175 %166 
                                Private f32* %177 = OpAccessChain %170 %86 
                                                      OpStore %177 %176 
                                Private f32* %178 = OpAccessChain %105 %86 
                                         f32 %179 = OpLoad %178 
                                Private f32* %180 = OpAccessChain %170 %86 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpExtInst %1 40 %179 %181 
                                Private f32* %183 = OpAccessChain %133 %86 
                                                      OpStore %183 %182 
                  read_only Texture3DSampled %188 = OpLoad %187 
                                       f32_4 %189 = OpLoad %133 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 2 3 
                                       f32_4 %191 = OpImageSampleImplicitLod %188 %190 
                                                      OpStore %133 %191 
                                       f32_4 %193 = OpLoad %133 
                                                      OpStore %192 %193 
                                                      OpBranch %99 
                                             %194 = OpLabel 
                                Private f32* %195 = OpAccessChain %192 %86 
                                                      OpStore %195 %89 
                                Private f32* %196 = OpAccessChain %192 %100 
                                                      OpStore %196 %89 
                                Private f32* %197 = OpAccessChain %192 %171 
                                                      OpStore %197 %89 
                                Private f32* %198 = OpAccessChain %192 %23 
                                                      OpStore %198 %89 
                                                      OpBranch %99 
                                              %99 = OpLabel 
                                       f32_4 %200 = OpLoad %192 
                              Uniform f32_4* %201 = OpAccessChain %32 %47 
                                       f32_4 %202 = OpLoad %201 
                                         f32 %203 = OpDot %200 %202 
                                                      OpStore %199 %203 
                                         f32 %204 = OpLoad %199 
                                         f32 %205 = OpExtInst %1 43 %204 %44 %89 
                                                      OpStore %199 %205 
                                Private f32* %207 = OpAccessChain %56 %171 
                                         f32 %208 = OpLoad %207 
                                        bool %209 = OpFOrdLessThan %44 %208 
                                                      OpStore %206 %209 
                                        bool %213 = OpLoad %206 
                                                      OpSelectionMerge %215 None 
                                                      OpBranchConditional %213 %214 %216 
                                             %214 = OpLabel 
                                                      OpStore %212 %89 
                                                      OpBranch %215 
                                             %216 = OpLabel 
                                                      OpStore %212 %44 
                                                      OpBranch %215 
                                             %215 = OpLabel 
                                         f32 %217 = OpLoad %212 
                                Private f32* %218 = OpAccessChain %210 %86 
                                                      OpStore %218 %217 
                                       f32_4 %219 = OpLoad %56 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_4 %221 = OpLoad %56 
                                       f32_2 %222 = OpVectorShuffle %221 %221 3 3 
                                       f32_2 %223 = OpFDiv %220 %222 
                                                      OpStore %170 %223 
                                       f32_2 %224 = OpLoad %170 
                                       f32_2 %226 = OpFAdd %224 %225 
                                                      OpStore %170 %226 
                  read_only Texture2DSampled %228 = OpLoad %227 
                                       f32_2 %229 = OpLoad %170 
                                       f32_4 %230 = OpImageSampleImplicitLod %228 %229 
                                         f32 %231 = OpCompositeExtract %230 3 
                                Private f32* %232 = OpAccessChain %170 %86 
                                                      OpStore %232 %231 
                                Private f32* %233 = OpAccessChain %170 %86 
                                         f32 %234 = OpLoad %233 
                                Private f32* %235 = OpAccessChain %210 %86 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpFMul %234 %236 
                                Private f32* %238 = OpAccessChain %210 %86 
                                                      OpStore %238 %237 
                                       f32_4 %239 = OpLoad %56 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_4 %241 = OpLoad %56 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                         f32 %243 = OpDot %240 %242 
                                Private f32* %244 = OpAccessChain %170 %86 
                                                      OpStore %244 %243 
                  read_only Texture2DSampled %246 = OpLoad %245 
                                       f32_2 %247 = OpLoad %170 
                                       f32_2 %248 = OpVectorShuffle %247 %247 0 0 
                                       f32_4 %249 = OpImageSampleImplicitLod %246 %248 
                                         f32 %250 = OpCompositeExtract %249 3 
                                Private f32* %251 = OpAccessChain %170 %86 
                                                      OpStore %251 %250 
                                Private f32* %252 = OpAccessChain %170 %86 
                                         f32 %253 = OpLoad %252 
                                Private f32* %254 = OpAccessChain %210 %86 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %253 %255 
                                Private f32* %257 = OpAccessChain %210 %86 
                                                      OpStore %257 %256 
                                         f32 %258 = OpLoad %199 
                                Private f32* %259 = OpAccessChain %210 %86 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFMul %258 %260 
                                                      OpStore %199 %261 
                                       f32_4 %262 = OpLoad %9 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                              Uniform f32_4* %265 = OpAccessChain %32 %264 
                                       f32_4 %266 = OpLoad %265 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %263 %267 
                                                      OpStore %210 %268 
                                         f32 %271 = OpLoad %199 
                                       f32_3 %272 = OpCompositeConstruct %271 %271 %271 
                                       f32_3 %273 = OpLoad %210 
                                       f32_3 %274 = OpFMul %272 %273 
                                       f32_4 %275 = OpLoad %270 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %270 %276 
                                Private f32* %277 = OpAccessChain %9 %23 
                                         f32 %278 = OpLoad %277 
                                 Output f32* %280 = OpAccessChain %270 %23 
                                                      OpStore %280 %278 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat10_3;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat2.xx);
    u_xlat10_3 = texture(_LightTexture0, u_xlat1.xyz);
    u_xlat16_1 = u_xlat10_2.w * u_xlat10_3.w;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %93 %94 %107 %138 %144 %147 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %107 Location 107 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %147 Location 147 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %89 = OpTypePointer Output %7 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                                Output f32_2* %93 = OpVariable Output 
                                 Input f32_4* %94 = OpVariable Input 
                                             %105 = OpTypeVector %6 3 
                                             %106 = OpTypePointer Input %105 
                                Input f32_3* %107 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                                             %114 = OpTypePointer Private %6 
                                         u32 %127 = OpConstant 2 
                                Private f32* %129 = OpVariable Private 
                                             %137 = OpTypePointer Output %105 
                               Output f32_3* %138 = OpVariable Output 
                               Output f32_3* %144 = OpVariable Output 
                               Output f32_4* %147 = OpVariable Output 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %36 %24 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %36 %23 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %36 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %82 = OpAccessChain %21 %36 %46 
                                        f32_4 %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %44 
                                        f32_4 %85 = OpVectorShuffle %84 %84 3 3 3 3 
                                        f32_4 %86 = OpFMul %83 %85 
                                        f32_4 %87 = OpLoad %57 
                                        f32_4 %88 = OpFAdd %86 %87 
                                Output f32_4* %90 = OpAccessChain %81 %23 
                                                      OpStore %90 %88 
                                        f32_4 %95 = OpLoad %94 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                               Uniform f32_4* %97 = OpAccessChain %21 %46 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_2 %100 = OpFMul %96 %99 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 2 3 
                                       f32_2 %104 = OpFAdd %100 %103 
                                                      OpStore %93 %104 
                                       f32_3 %108 = OpLoad %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %23 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %115 = OpAccessChain %44 %113 
                                                      OpStore %115 %112 
                                       f32_3 %116 = OpLoad %107 
                              Uniform f32_4* %117 = OpAccessChain %21 %24 %24 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %116 %119 
                                Private f32* %121 = OpAccessChain %44 %77 
                                                      OpStore %121 %120 
                                       f32_3 %122 = OpLoad %107 
                              Uniform f32_4* %123 = OpAccessChain %21 %24 %36 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %128 = OpAccessChain %44 %127 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %44 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %44 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %136 = OpExtInst %1 32 %135 
                                                      OpStore %129 %136 
                                         f32 %139 = OpLoad %129 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %140 %142 
                                                      OpStore %138 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore %144 %146 
                                       f32_4 %148 = OpLoad %9 
                                                      OpStore %147 %148 
                                 Output f32* %150 = OpAccessChain %81 %23 %77 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %81 %23 %77 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 255
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %62 %243 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 RelaxedPrecision 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 RelaxedPrecision 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 RelaxedPrecision 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %62 Location 62 
                                                      OpDecorate %105 SpecId 105 
                                                      OpDecorate %185 DescriptorSet 185 
                                                      OpDecorate %185 Binding 185 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %209 DescriptorSet 209 
                                                      OpDecorate %209 Binding 209 
                                                      OpDecorate %218 DescriptorSet 218 
                                                      OpDecorate %218 Binding 218 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeArray %7 %26 
                                              %30 = OpTypeStruct %7 %7 %27 %28 %28 %7 %29 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 7 
                                              %35 = OpTypePointer Uniform %6 
                                          u32 %40 = OpConstant 0 
                                              %42 = OpTypeBool 
                                              %43 = OpTypePointer Private %42 
                                Private bool* %44 = OpVariable Private 
                                          f32 %47 = OpConstant 3.674022E-40 
                                          i32 %50 = OpConstant 0 
                                          i32 %51 = OpConstant 1 
                                          i32 %53 = OpConstant -1 
                                              %59 = OpTypePointer Private %28 
                               Private f32_3* %60 = OpVariable Private 
                                              %61 = OpTypePointer Input %28 
                                 Input f32_3* %62 = OpVariable Input 
                                          i32 %65 = OpConstant 6 
                                              %66 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 2 
                                          i32 %89 = OpConstant 3 
                                Private bool* %94 = OpVariable Private 
                                          f32 %97 = OpConstant 3.674022E-40 
                                         bool %99 = OpConstantFalse 
                                        bool %105 = OpSpecConstantFalse 
                                         u32 %108 = OpConstant 1 
                              Private f32_3* %112 = OpVariable Private 
                                             %140 = OpTypePointer Function %28 
                                         i32 %150 = OpConstant 4 
                                             %151 = OpTypePointer Uniform %28 
                              Private f32_4* %156 = OpVariable Private 
                                Private f32* %163 = OpVariable Private 
                                         f32 %166 = OpConstant 3.674022E-40 
                                         f32 %168 = OpConstant 3.674022E-40 
                                         u32 %170 = OpConstant 2 
                                         f32 %173 = OpConstant 3.674022E-40 
                                             %182 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %183 = OpTypeSampledImage %182 
                                             %184 = OpTypePointer UniformConstant %183 
 UniformConstant read_only Texture3DSampled* %185 = OpVariable UniformConstant 
                              Private f32_3* %196 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %209 = OpVariable UniformConstant 
                                             %215 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %216 = OpTypeSampledImage %215 
                                             %217 = OpTypePointer UniformConstant %216 
UniformConstant read_only TextureCubeSampled* %218 = OpVariable UniformConstant 
                                         i32 %237 = OpConstant 5 
                                             %242 = OpTypePointer Output %7 
                               Output f32_4* %243 = OpVariable Output 
                                             %252 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %141 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                 Private f32* %41 = OpAccessChain %20 %40 
                                                      OpStore %41 %39 
                                 Private f32* %45 = OpAccessChain %20 %40 
                                          f32 %46 = OpLoad %45 
                                         bool %48 = OpFOrdLessThan %46 %47 
                                                      OpStore %44 %48 
                                         bool %49 = OpLoad %44 
                                          i32 %52 = OpSelect %49 %51 %50 
                                          i32 %54 = OpIMul %52 %53 
                                         bool %55 = OpINotEqual %54 %50 
                                                      OpSelectionMerge %57 None 
                                                      OpBranchConditional %55 %56 %57 
                                              %56 = OpLabel 
                                                      OpKill
                                              %57 = OpLabel 
                                        f32_3 %63 = OpLoad %62 
                                        f32_3 %64 = OpVectorShuffle %63 %63 1 1 1 
                               Uniform f32_4* %67 = OpAccessChain %32 %65 %51 
                                        f32_4 %68 = OpLoad %67 
                                        f32_3 %69 = OpVectorShuffle %68 %68 0 1 2 
                                        f32_3 %70 = OpFMul %64 %69 
                                                      OpStore %60 %70 
                               Uniform f32_4* %71 = OpAccessChain %32 %65 %50 
                                        f32_4 %72 = OpLoad %71 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpLoad %62 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                                        f32_3 %76 = OpFMul %73 %75 
                                        f32_3 %77 = OpLoad %60 
                                        f32_3 %78 = OpFAdd %76 %77 
                                                      OpStore %60 %78 
                               Uniform f32_4* %80 = OpAccessChain %32 %65 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpLoad %62 
                                        f32_3 %84 = OpVectorShuffle %83 %83 2 2 2 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_3 %86 = OpLoad %60 
                                        f32_3 %87 = OpFAdd %85 %86 
                                                      OpStore %60 %87 
                                        f32_3 %88 = OpLoad %60 
                               Uniform f32_4* %90 = OpAccessChain %32 %65 %89 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFAdd %88 %92 
                                                      OpStore %60 %93 
                                 Uniform f32* %95 = OpAccessChain %32 %51 %40 
                                          f32 %96 = OpLoad %95 
                                         bool %98 = OpFOrdEqual %96 %97 
                                                      OpStore %94 %98 
                                                      OpSelectionMerge %101 None 
                                                      OpBranchConditional %99 %100 %101 
                                             %100 = OpLabel 
                                        bool %102 = OpLoad %94 
                                                      OpSelectionMerge %104 None 
                                                      OpBranchConditional %102 %103 %104 
                                             %103 = OpLabel 
                                                      OpBranch %104 
                                             %104 = OpLabel 
                                                      OpBranch %101 
                                             %101 = OpLabel 
                                                      OpSelectionMerge %107 None 
                                                      OpBranchConditional %105 %106 %191 
                                             %106 = OpLabel 
                                Uniform f32* %109 = OpAccessChain %32 %51 %108 
                                         f32 %110 = OpLoad %109 
                                        bool %111 = OpFOrdEqual %110 %97 
                                                      OpStore %94 %111 
                                       f32_3 %113 = OpLoad %62 
                                       f32_3 %114 = OpVectorShuffle %113 %113 1 1 1 
                              Uniform f32_4* %115 = OpAccessChain %32 %79 %51 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFMul %114 %117 
                                                      OpStore %112 %118 
                              Uniform f32_4* %119 = OpAccessChain %32 %79 %50 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpLoad %62 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 0 0 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_3 %125 = OpLoad %112 
                                       f32_3 %126 = OpFAdd %124 %125 
                                                      OpStore %112 %126 
                              Uniform f32_4* %127 = OpAccessChain %32 %79 %79 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpLoad %62 
                                       f32_3 %131 = OpVectorShuffle %130 %130 2 2 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_3 %133 = OpLoad %112 
                                       f32_3 %134 = OpFAdd %132 %133 
                                                      OpStore %112 %134 
                                       f32_3 %135 = OpLoad %112 
                              Uniform f32_4* %136 = OpAccessChain %32 %79 %89 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpFAdd %135 %138 
                                                      OpStore %112 %139 
                                        bool %142 = OpLoad %94 
                                                      OpSelectionMerge %144 None 
                                                      OpBranchConditional %142 %143 %146 
                                             %143 = OpLabel 
                                       f32_3 %145 = OpLoad %112 
                                                      OpStore %141 %145 
                                                      OpBranch %144 
                                             %146 = OpLabel 
                                       f32_3 %147 = OpLoad %62 
                                                      OpStore %141 %147 
                                                      OpBranch %144 
                                             %144 = OpLabel 
                                       f32_3 %148 = OpLoad %141 
                                                      OpStore %112 %148 
                                       f32_3 %149 = OpLoad %112 
                              Uniform f32_3* %152 = OpAccessChain %32 %150 
                                       f32_3 %153 = OpLoad %152 
                                       f32_3 %154 = OpFNegate %153 
                                       f32_3 %155 = OpFAdd %149 %154 
                                                      OpStore %112 %155 
                                       f32_3 %157 = OpLoad %112 
                              Uniform f32_3* %158 = OpAccessChain %32 %89 
                                       f32_3 %159 = OpLoad %158 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %156 
                                       f32_4 %162 = OpVectorShuffle %161 %160 0 4 5 6 
                                                      OpStore %156 %162 
                                Private f32* %164 = OpAccessChain %156 %108 
                                         f32 %165 = OpLoad %164 
                                         f32 %167 = OpFMul %165 %166 
                                         f32 %169 = OpFAdd %167 %168 
                                                      OpStore %163 %169 
                                Uniform f32* %171 = OpAccessChain %32 %51 %170 
                                         f32 %172 = OpLoad %171 
                                         f32 %174 = OpFMul %172 %173 
                                         f32 %175 = OpFAdd %174 %168 
                                Private f32* %176 = OpAccessChain %112 %40 
                                                      OpStore %176 %175 
                                         f32 %177 = OpLoad %163 
                                Private f32* %178 = OpAccessChain %112 %40 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpExtInst %1 40 %177 %179 
                                Private f32* %181 = OpAccessChain %156 %40 
                                                      OpStore %181 %180 
                  read_only Texture3DSampled %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %156 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 2 3 
                                       f32_4 %189 = OpImageSampleImplicitLod %186 %188 
                                                      OpStore %156 %189 
                                       f32_4 %190 = OpLoad %156 
                                                      OpStore %20 %190 
                                                      OpBranch %107 
                                             %191 = OpLabel 
                                Private f32* %192 = OpAccessChain %20 %40 
                                                      OpStore %192 %97 
                                Private f32* %193 = OpAccessChain %20 %108 
                                                      OpStore %193 %97 
                                Private f32* %194 = OpAccessChain %20 %170 
                                                      OpStore %194 %97 
                                Private f32* %195 = OpAccessChain %20 %22 
                                                      OpStore %195 %97 
                                                      OpBranch %107 
                                             %107 = OpLabel 
                                       f32_4 %197 = OpLoad %20 
                              Uniform f32_4* %198 = OpAccessChain %32 %50 
                                       f32_4 %199 = OpLoad %198 
                                         f32 %200 = OpDot %197 %199 
                                Private f32* %201 = OpAccessChain %196 %40 
                                                      OpStore %201 %200 
                                Private f32* %202 = OpAccessChain %196 %40 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpExtInst %1 43 %203 %47 %97 
                                Private f32* %205 = OpAccessChain %196 %40 
                                                      OpStore %205 %204 
                                       f32_3 %206 = OpLoad %60 
                                       f32_3 %207 = OpLoad %60 
                                         f32 %208 = OpDot %206 %207 
                                                      OpStore %163 %208 
                  read_only Texture2DSampled %210 = OpLoad %209 
                                         f32 %211 = OpLoad %163 
                                       f32_2 %212 = OpCompositeConstruct %211 %211 
                                       f32_4 %213 = OpImageSampleImplicitLod %210 %212 
                                         f32 %214 = OpCompositeExtract %213 3 
                                                      OpStore %163 %214 
                read_only TextureCubeSampled %219 = OpLoad %218 
                                       f32_3 %220 = OpLoad %60 
                                       f32_4 %221 = OpImageSampleImplicitLod %219 %220 
                                         f32 %222 = OpCompositeExtract %221 3 
                                Private f32* %223 = OpAccessChain %60 %40 
                                                      OpStore %223 %222 
                                Private f32* %224 = OpAccessChain %60 %40 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpLoad %163 
                                         f32 %227 = OpFMul %225 %226 
                                Private f32* %228 = OpAccessChain %60 %40 
                                                      OpStore %228 %227 
                                Private f32* %229 = OpAccessChain %196 %40 
                                         f32 %230 = OpLoad %229 
                                Private f32* %231 = OpAccessChain %60 %40 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFMul %230 %232 
                                Private f32* %234 = OpAccessChain %60 %40 
                                                      OpStore %234 %233 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                              Uniform f32_4* %238 = OpAccessChain %32 %237 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %236 %240 
                                                      OpStore %196 %241 
                                       f32_3 %244 = OpLoad %60 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 0 0 
                                       f32_3 %246 = OpLoad %196 
                                       f32_3 %247 = OpFMul %245 %246 
                                       f32_4 %248 = OpLoad %243 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
                                                      OpStore %243 %249 
                                Private f32* %250 = OpAccessChain %9 %22 
                                         f32 %251 = OpLoad %250 
                                 Output f32* %253 = OpAccessChain %243 %22 
                                                      OpStore %253 %251 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec2 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
float u_xlat7;
bool u_xlatb7;
float u_xlat10;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb7 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb7)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7 = u_xlat2.y * 0.25 + 0.75;
        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat7);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat7 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xy);
    u_xlat1.x = u_xlat7 * u_xlat10_2.w;
    u_xlat0.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %93 %94 %107 %138 %144 %147 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %107 Location 107 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %147 Location 147 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %89 = OpTypePointer Output %7 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                                Output f32_2* %93 = OpVariable Output 
                                 Input f32_4* %94 = OpVariable Input 
                                             %105 = OpTypeVector %6 3 
                                             %106 = OpTypePointer Input %105 
                                Input f32_3* %107 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                                             %114 = OpTypePointer Private %6 
                                         u32 %127 = OpConstant 2 
                                Private f32* %129 = OpVariable Private 
                                             %137 = OpTypePointer Output %105 
                               Output f32_3* %138 = OpVariable Output 
                               Output f32_3* %144 = OpVariable Output 
                               Output f32_4* %147 = OpVariable Output 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %36 %24 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %36 %23 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %36 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %82 = OpAccessChain %21 %36 %46 
                                        f32_4 %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %44 
                                        f32_4 %85 = OpVectorShuffle %84 %84 3 3 3 3 
                                        f32_4 %86 = OpFMul %83 %85 
                                        f32_4 %87 = OpLoad %57 
                                        f32_4 %88 = OpFAdd %86 %87 
                                Output f32_4* %90 = OpAccessChain %81 %23 
                                                      OpStore %90 %88 
                                        f32_4 %95 = OpLoad %94 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                               Uniform f32_4* %97 = OpAccessChain %21 %46 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_2 %100 = OpFMul %96 %99 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 2 3 
                                       f32_2 %104 = OpFAdd %100 %103 
                                                      OpStore %93 %104 
                                       f32_3 %108 = OpLoad %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %23 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %115 = OpAccessChain %44 %113 
                                                      OpStore %115 %112 
                                       f32_3 %116 = OpLoad %107 
                              Uniform f32_4* %117 = OpAccessChain %21 %24 %24 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %116 %119 
                                Private f32* %121 = OpAccessChain %44 %77 
                                                      OpStore %121 %120 
                                       f32_3 %122 = OpLoad %107 
                              Uniform f32_4* %123 = OpAccessChain %21 %24 %36 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %128 = OpAccessChain %44 %127 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %44 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %44 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %136 = OpExtInst %1 32 %135 
                                                      OpStore %129 %136 
                                         f32 %139 = OpLoad %129 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %140 %142 
                                                      OpStore %138 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore %144 %146 
                                       f32_4 %148 = OpLoad %9 
                                                      OpStore %147 %148 
                                 Output f32* %150 = OpAccessChain %81 %23 %77 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %81 %23 %77 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 238
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %62 %226 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 RelaxedPrecision 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 RelaxedPrecision 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 RelaxedPrecision 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %62 Location 62 
                                                      OpDecorate %105 SpecId 105 
                                                      OpDecorate %185 DescriptorSet 185 
                                                      OpDecorate %185 Binding 185 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %206 DescriptorSet 206 
                                                      OpDecorate %206 Binding 206 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %226 Location 226 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeArray %7 %26 
                                              %30 = OpTypeStruct %7 %7 %27 %28 %28 %7 %29 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 7 
                                              %35 = OpTypePointer Uniform %6 
                                          u32 %40 = OpConstant 0 
                                              %42 = OpTypeBool 
                                              %43 = OpTypePointer Private %42 
                                Private bool* %44 = OpVariable Private 
                                          f32 %47 = OpConstant 3.674022E-40 
                                          i32 %50 = OpConstant 0 
                                          i32 %51 = OpConstant 1 
                                          i32 %53 = OpConstant -1 
                                              %59 = OpTypePointer Private %15 
                               Private f32_2* %60 = OpVariable Private 
                                              %61 = OpTypePointer Input %28 
                                 Input f32_3* %62 = OpVariable Input 
                                          i32 %65 = OpConstant 6 
                                              %66 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 2 
                                          i32 %89 = OpConstant 3 
                                Private bool* %94 = OpVariable Private 
                                          f32 %97 = OpConstant 3.674022E-40 
                                         bool %99 = OpConstantFalse 
                                        bool %105 = OpSpecConstantFalse 
                                         u32 %108 = OpConstant 1 
                                             %112 = OpTypePointer Private %28 
                              Private f32_3* %113 = OpVariable Private 
                                             %141 = OpTypePointer Function %28 
                                         i32 %151 = OpConstant 4 
                                             %152 = OpTypePointer Uniform %28 
                              Private f32_4* %157 = OpVariable Private 
                                Private f32* %164 = OpVariable Private 
                                         f32 %167 = OpConstant 3.674022E-40 
                                         f32 %169 = OpConstant 3.674022E-40 
                                Private f32* %171 = OpVariable Private 
                                         u32 %172 = OpConstant 2 
                                         f32 %175 = OpConstant 3.674022E-40 
                                             %182 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %183 = OpTypeSampledImage %182 
                                             %184 = OpTypePointer UniformConstant %183 
 UniformConstant read_only Texture3DSampled* %185 = OpVariable UniformConstant 
                              Private f32_3* %196 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %206 = OpVariable UniformConstant 
                                         i32 %220 = OpConstant 5 
                                             %225 = OpTypePointer Output %7 
                               Output f32_4* %226 = OpVariable Output 
                                             %235 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %142 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                 Private f32* %41 = OpAccessChain %20 %40 
                                                      OpStore %41 %39 
                                 Private f32* %45 = OpAccessChain %20 %40 
                                          f32 %46 = OpLoad %45 
                                         bool %48 = OpFOrdLessThan %46 %47 
                                                      OpStore %44 %48 
                                         bool %49 = OpLoad %44 
                                          i32 %52 = OpSelect %49 %51 %50 
                                          i32 %54 = OpIMul %52 %53 
                                         bool %55 = OpINotEqual %54 %50 
                                                      OpSelectionMerge %57 None 
                                                      OpBranchConditional %55 %56 %57 
                                              %56 = OpLabel 
                                                      OpKill
                                              %57 = OpLabel 
                                        f32_3 %63 = OpLoad %62 
                                        f32_2 %64 = OpVectorShuffle %63 %63 1 1 
                               Uniform f32_4* %67 = OpAccessChain %32 %65 %51 
                                        f32_4 %68 = OpLoad %67 
                                        f32_2 %69 = OpVectorShuffle %68 %68 0 1 
                                        f32_2 %70 = OpFMul %64 %69 
                                                      OpStore %60 %70 
                               Uniform f32_4* %71 = OpAccessChain %32 %65 %50 
                                        f32_4 %72 = OpLoad %71 
                                        f32_2 %73 = OpVectorShuffle %72 %72 0 1 
                                        f32_3 %74 = OpLoad %62 
                                        f32_2 %75 = OpVectorShuffle %74 %74 0 0 
                                        f32_2 %76 = OpFMul %73 %75 
                                        f32_2 %77 = OpLoad %60 
                                        f32_2 %78 = OpFAdd %76 %77 
                                                      OpStore %60 %78 
                               Uniform f32_4* %80 = OpAccessChain %32 %65 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_2 %82 = OpVectorShuffle %81 %81 0 1 
                                        f32_3 %83 = OpLoad %62 
                                        f32_2 %84 = OpVectorShuffle %83 %83 2 2 
                                        f32_2 %85 = OpFMul %82 %84 
                                        f32_2 %86 = OpLoad %60 
                                        f32_2 %87 = OpFAdd %85 %86 
                                                      OpStore %60 %87 
                                        f32_2 %88 = OpLoad %60 
                               Uniform f32_4* %90 = OpAccessChain %32 %65 %89 
                                        f32_4 %91 = OpLoad %90 
                                        f32_2 %92 = OpVectorShuffle %91 %91 0 1 
                                        f32_2 %93 = OpFAdd %88 %92 
                                                      OpStore %60 %93 
                                 Uniform f32* %95 = OpAccessChain %32 %51 %40 
                                          f32 %96 = OpLoad %95 
                                         bool %98 = OpFOrdEqual %96 %97 
                                                      OpStore %94 %98 
                                                      OpSelectionMerge %101 None 
                                                      OpBranchConditional %99 %100 %101 
                                             %100 = OpLabel 
                                        bool %102 = OpLoad %94 
                                                      OpSelectionMerge %104 None 
                                                      OpBranchConditional %102 %103 %104 
                                             %103 = OpLabel 
                                                      OpBranch %104 
                                             %104 = OpLabel 
                                                      OpBranch %101 
                                             %101 = OpLabel 
                                                      OpSelectionMerge %107 None 
                                                      OpBranchConditional %105 %106 %191 
                                             %106 = OpLabel 
                                Uniform f32* %109 = OpAccessChain %32 %51 %108 
                                         f32 %110 = OpLoad %109 
                                        bool %111 = OpFOrdEqual %110 %97 
                                                      OpStore %94 %111 
                                       f32_3 %114 = OpLoad %62 
                                       f32_3 %115 = OpVectorShuffle %114 %114 1 1 1 
                              Uniform f32_4* %116 = OpAccessChain %32 %79 %51 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFMul %115 %118 
                                                      OpStore %113 %119 
                              Uniform f32_4* %120 = OpAccessChain %32 %79 %50 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpLoad %62 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 0 0 
                                       f32_3 %125 = OpFMul %122 %124 
                                       f32_3 %126 = OpLoad %113 
                                       f32_3 %127 = OpFAdd %125 %126 
                                                      OpStore %113 %127 
                              Uniform f32_4* %128 = OpAccessChain %32 %79 %79 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpLoad %62 
                                       f32_3 %132 = OpVectorShuffle %131 %131 2 2 2 
                                       f32_3 %133 = OpFMul %130 %132 
                                       f32_3 %134 = OpLoad %113 
                                       f32_3 %135 = OpFAdd %133 %134 
                                                      OpStore %113 %135 
                                       f32_3 %136 = OpLoad %113 
                              Uniform f32_4* %137 = OpAccessChain %32 %79 %89 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFAdd %136 %139 
                                                      OpStore %113 %140 
                                        bool %143 = OpLoad %94 
                                                      OpSelectionMerge %145 None 
                                                      OpBranchConditional %143 %144 %147 
                                             %144 = OpLabel 
                                       f32_3 %146 = OpLoad %113 
                                                      OpStore %142 %146 
                                                      OpBranch %145 
                                             %147 = OpLabel 
                                       f32_3 %148 = OpLoad %62 
                                                      OpStore %142 %148 
                                                      OpBranch %145 
                                             %145 = OpLabel 
                                       f32_3 %149 = OpLoad %142 
                                                      OpStore %113 %149 
                                       f32_3 %150 = OpLoad %113 
                              Uniform f32_3* %153 = OpAccessChain %32 %151 
                                       f32_3 %154 = OpLoad %153 
                                       f32_3 %155 = OpFNegate %154 
                                       f32_3 %156 = OpFAdd %150 %155 
                                                      OpStore %113 %156 
                                       f32_3 %158 = OpLoad %113 
                              Uniform f32_3* %159 = OpAccessChain %32 %89 
                                       f32_3 %160 = OpLoad %159 
                                       f32_3 %161 = OpFMul %158 %160 
                                       f32_4 %162 = OpLoad %157 
                                       f32_4 %163 = OpVectorShuffle %162 %161 0 4 5 6 
                                                      OpStore %157 %163 
                                Private f32* %165 = OpAccessChain %157 %108 
                                         f32 %166 = OpLoad %165 
                                         f32 %168 = OpFMul %166 %167 
                                         f32 %170 = OpFAdd %168 %169 
                                                      OpStore %164 %170 
                                Uniform f32* %173 = OpAccessChain %32 %51 %172 
                                         f32 %174 = OpLoad %173 
                                         f32 %176 = OpFMul %174 %175 
                                         f32 %177 = OpFAdd %176 %169 
                                                      OpStore %171 %177 
                                         f32 %178 = OpLoad %171 
                                         f32 %179 = OpLoad %164 
                                         f32 %180 = OpExtInst %1 40 %178 %179 
                                Private f32* %181 = OpAccessChain %157 %40 
                                                      OpStore %181 %180 
                  read_only Texture3DSampled %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %157 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 2 3 
                                       f32_4 %189 = OpImageSampleImplicitLod %186 %188 
                                                      OpStore %157 %189 
                                       f32_4 %190 = OpLoad %157 
                                                      OpStore %20 %190 
                                                      OpBranch %107 
                                             %191 = OpLabel 
                                Private f32* %192 = OpAccessChain %20 %40 
                                                      OpStore %192 %97 
                                Private f32* %193 = OpAccessChain %20 %108 
                                                      OpStore %193 %97 
                                Private f32* %194 = OpAccessChain %20 %172 
                                                      OpStore %194 %97 
                                Private f32* %195 = OpAccessChain %20 %22 
                                                      OpStore %195 %97 
                                                      OpBranch %107 
                                             %107 = OpLabel 
                                       f32_4 %197 = OpLoad %20 
                              Uniform f32_4* %198 = OpAccessChain %32 %50 
                                       f32_4 %199 = OpLoad %198 
                                         f32 %200 = OpDot %197 %199 
                                Private f32* %201 = OpAccessChain %196 %40 
                                                      OpStore %201 %200 
                                Private f32* %202 = OpAccessChain %196 %40 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpExtInst %1 43 %203 %47 %97 
                                Private f32* %205 = OpAccessChain %196 %40 
                                                      OpStore %205 %204 
                  read_only Texture2DSampled %207 = OpLoad %206 
                                       f32_2 %208 = OpLoad %60 
                                       f32_4 %209 = OpImageSampleImplicitLod %207 %208 
                                         f32 %210 = OpCompositeExtract %209 3 
                                Private f32* %211 = OpAccessChain %60 %40 
                                                      OpStore %211 %210 
                                Private f32* %212 = OpAccessChain %196 %40 
                                         f32 %213 = OpLoad %212 
                                Private f32* %214 = OpAccessChain %60 %40 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFMul %213 %215 
                                Private f32* %217 = OpAccessChain %60 %40 
                                                      OpStore %217 %216 
                                       f32_4 %218 = OpLoad %9 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                              Uniform f32_4* %221 = OpAccessChain %32 %220 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpFMul %219 %223 
                                                      OpStore %196 %224 
                                       f32_2 %227 = OpLoad %60 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 0 0 
                                       f32_3 %229 = OpLoad %196 
                                       f32_3 %230 = OpFMul %228 %229 
                                       f32_4 %231 = OpLoad %226 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %226 %232 
                                Private f32* %233 = OpAccessChain %9 %22 
                                         f32 %234 = OpLoad %233 
                                 Output f32* %236 = OpAccessChain %226 %22 
                                                      OpStore %236 %234 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "META"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" "UnlitTilted" = "UnlitTilted" }
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 136691
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _EmissiveMap_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _EmissiveMap_ST.xy + _EmissiveMap_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _EmissiveGlowToggle;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float unity_UseLinearSpace;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _EmissiveMap;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat10_2;
float u_xlat9;
float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat9 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb9 = u_xlat9<0.0;
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_0.xyz = log2(u_xlat10_0.xyz);
    u_xlat16_9 = (-u_xlat16_9) + 0.100000024;
    u_xlatb1 = _EmissiveGlowToggle>=0.100000001;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat9 = u_xlat1.x * u_xlat16_9 + 1.0;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat10_2 = texture(_EmissiveMap, vs_TEXCOORD0.zw);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xxx;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
    u_xlat1.xyz = (bool(u_xlatb9)) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat9 = unity_OneOverOutputBoost;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat9);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.w = 1.0;
    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat1 : u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 237
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %13 %32 %89 %166 %176 %177 %223 
                                                      OpDecorate %13 Location 13 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpMemberDecorate %40 6 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %164 0 BuiltIn 164 
                                                      OpMemberDecorate %164 1 BuiltIn 164 
                                                      OpMemberDecorate %164 2 BuiltIn 164 
                                                      OpDecorate %164 Block 
                                                      OpDecorate %176 Location 176 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %223 Location 223 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypePointer Input %11 
                                 Input f32_4* %13 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 2 
                                              %16 = OpTypePointer Input %9 
                                              %20 = OpTypePointer Private %11 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypePointer Function %9 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %30 = OpTypePointer Private %9 
                                 Input f32_4* %32 = OpVariable Input 
                                              %33 = OpTypeVector %9 2 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %11 %36 
                                              %38 = OpTypeArray %11 %36 
                                              %39 = OpTypeVector %14 4 
                                              %40 = OpTypeStruct %37 %38 %11 %11 %39 %11 %11 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4; f32_4; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 2 
                                              %45 = OpTypePointer Uniform %11 
                                              %56 = OpTypeVector %9 3 
                                              %57 = OpTypePointer Function %56 
                                          i32 %59 = OpConstant 4 
                                              %60 = OpTypeVector %6 4 
                                              %61 = OpTypePointer Uniform %39 
                                          u32 %65 = OpConstant 0 
                                Private bool* %77 = OpVariable Private 
                               Private f32_4* %81 = OpVariable Private 
                                 Input f32_4* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                                         i32 %120 = OpConstant 0 
                                         i32 %121 = OpConstant 1 
                                         u32 %162 = OpConstant 1 
                                             %163 = OpTypeArray %9 %162 
                                             %164 = OpTypeStruct %11 %9 %163 
                                             %165 = OpTypePointer Output %164 
        Output struct {f32_4; f32; f32[1];}* %166 = OpVariable Output 
                                             %174 = OpTypePointer Output %11 
                               Output f32_4* %176 = OpVariable Output 
                                Input f32_4* %177 = OpVariable Input 
                                         i32 %180 = OpConstant 5 
                                         i32 %193 = OpConstant 6 
                               Output f32_4* %223 = OpVariable Output 
                                             %231 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %23 = OpVariable Function 
                              Function f32_3* %58 = OpVariable Function 
                                Function f32* %82 = OpVariable Function 
                             Function f32_3* %103 = OpVariable Function 
                                   Input f32* %17 = OpAccessChain %13 %15 
                                          f32 %18 = OpLoad %17 
                                         bool %19 = OpFOrdLessThan %10 %18 
                                                      OpStore %8 %19 
                                         bool %24 = OpLoad %8 
                                                      OpSelectionMerge %26 None 
                                                      OpBranchConditional %24 %25 %28 
                                              %25 = OpLabel 
                                                      OpStore %23 %27 
                                                      OpBranch %26 
                                              %28 = OpLabel 
                                                      OpStore %23 %10 
                                                      OpBranch %26 
                                              %26 = OpLabel 
                                          f32 %29 = OpLoad %23 
                                 Private f32* %31 = OpAccessChain %21 %15 
                                                      OpStore %31 %29 
                                        f32_4 %34 = OpLoad %32 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                        f32_4 %54 = OpLoad %21 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 2 3 
                                                      OpStore %21 %55 
                               Uniform u32_4* %62 = OpAccessChain %42 %59 
                                        u32_4 %63 = OpLoad %62 
                                          u32 %64 = OpCompositeExtract %63 0 
                                         bool %66 = OpINotEqual %64 %65 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %71 
                                              %67 = OpLabel 
                                        f32_4 %69 = OpLoad %21 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %58 %70 
                                                      OpBranch %68 
                                              %71 = OpLabel 
                                        f32_4 %72 = OpLoad %13 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                                      OpStore %58 %73 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                        f32_3 %74 = OpLoad %58 
                                        f32_4 %75 = OpLoad %21 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %21 %76 
                                 Private f32* %78 = OpAccessChain %21 %15 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %10 %79 
                                                      OpStore %77 %80 
                                         bool %83 = OpLoad %77 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %86 
                                              %84 = OpLabel 
                                                      OpStore %82 %27 
                                                      OpBranch %85 
                                              %86 = OpLabel 
                                                      OpStore %82 %10 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %87 = OpLoad %82 
                                 Private f32* %88 = OpAccessChain %81 %15 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                               Uniform f32_4* %93 = OpAccessChain %42 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                        f32_2 %96 = OpFMul %91 %95 
                               Uniform f32_4* %97 = OpAccessChain %42 %92 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 2 3 
                                       f32_2 %100 = OpFAdd %96 %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %81 %102 
                              Uniform u32_4* %104 = OpAccessChain %42 %59 
                                       u32_4 %105 = OpLoad %104 
                                         u32 %106 = OpCompositeExtract %105 1 
                                        bool %107 = OpINotEqual %106 %65 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %81 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %103 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_4 %113 = OpLoad %21 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %103 %114 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %115 = OpLoad %103 
                                       f32_4 %116 = OpLoad %21 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %21 %117 
                                       f32_4 %118 = OpLoad %21 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %122 = OpAccessChain %42 %120 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpFMul %119 %123 
                                                      OpStore %81 %124 
                              Uniform f32_4* %125 = OpAccessChain %42 %120 %120 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %21 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %81 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %81 %131 
                              Uniform f32_4* %132 = OpAccessChain %42 %120 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpLoad %21 
                                       f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
                                       f32_4 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %81 
                                       f32_4 %138 = OpFAdd %136 %137 
                                                      OpStore %21 %138 
                                       f32_4 %139 = OpLoad %21 
                              Uniform f32_4* %140 = OpAccessChain %42 %120 %92 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpFAdd %139 %141 
                                                      OpStore %21 %142 
                                       f32_4 %143 = OpLoad %21 
                                       f32_4 %144 = OpVectorShuffle %143 %143 1 1 1 1 
                              Uniform f32_4* %145 = OpAccessChain %42 %121 %121 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %144 %146 
                                                      OpStore %81 %147 
                              Uniform f32_4* %148 = OpAccessChain %42 %121 %120 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpLoad %21 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 0 0 0 
                                       f32_4 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %81 
                                       f32_4 %154 = OpFAdd %152 %153 
                                                      OpStore %81 %154 
                              Uniform f32_4* %155 = OpAccessChain %42 %121 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_4 %157 = OpLoad %21 
                                       f32_4 %158 = OpVectorShuffle %157 %157 2 2 2 2 
                                       f32_4 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpFAdd %159 %160 
                                                      OpStore %81 %161 
                              Uniform f32_4* %167 = OpAccessChain %42 %121 %92 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %21 
                                       f32_4 %170 = OpVectorShuffle %169 %169 3 3 3 3 
                                       f32_4 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %81 
                                       f32_4 %173 = OpFAdd %171 %172 
                               Output f32_4* %175 = OpAccessChain %166 %120 
                                                      OpStore %175 %173 
                                       f32_4 %178 = OpLoad %177 
                                       f32_2 %179 = OpVectorShuffle %178 %178 0 1 
                              Uniform f32_4* %181 = OpAccessChain %42 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_2 %183 = OpVectorShuffle %182 %182 0 1 
                                       f32_2 %184 = OpFMul %179 %183 
                              Uniform f32_4* %185 = OpAccessChain %42 %180 
                                       f32_4 %186 = OpLoad %185 
                                       f32_2 %187 = OpVectorShuffle %186 %186 2 3 
                                       f32_2 %188 = OpFAdd %184 %187 
                                       f32_4 %189 = OpLoad %176 
                                       f32_4 %190 = OpVectorShuffle %189 %188 4 5 2 3 
                                                      OpStore %176 %190 
                                       f32_4 %191 = OpLoad %32 
                                       f32_2 %192 = OpVectorShuffle %191 %191 0 1 
                              Uniform f32_4* %194 = OpAccessChain %42 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                                       f32_2 %197 = OpFMul %192 %196 
                              Uniform f32_4* %198 = OpAccessChain %42 %193 
                                       f32_4 %199 = OpLoad %198 
                                       f32_2 %200 = OpVectorShuffle %199 %199 2 3 
                                       f32_2 %201 = OpFAdd %197 %200 
                                       f32_4 %202 = OpLoad %176 
                                       f32_4 %203 = OpVectorShuffle %202 %201 0 1 4 5 
                                                      OpStore %176 %203 
                                       f32_4 %204 = OpLoad %13 
                                       f32_4 %205 = OpVectorShuffle %204 %204 1 1 1 1 
                              Uniform f32_4* %206 = OpAccessChain %42 %120 %121 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpFMul %205 %207 
                                                      OpStore %21 %208 
                              Uniform f32_4* %209 = OpAccessChain %42 %120 %120 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %13 
                                       f32_4 %212 = OpVectorShuffle %211 %211 0 0 0 0 
                                       f32_4 %213 = OpFMul %210 %212 
                                       f32_4 %214 = OpLoad %21 
                                       f32_4 %215 = OpFAdd %213 %214 
                                                      OpStore %21 %215 
                              Uniform f32_4* %216 = OpAccessChain %42 %120 %44 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %13 
                                       f32_4 %219 = OpVectorShuffle %218 %218 2 2 2 2 
                                       f32_4 %220 = OpFMul %217 %219 
                                       f32_4 %221 = OpLoad %21 
                                       f32_4 %222 = OpFAdd %220 %221 
                                                      OpStore %21 %222 
                              Uniform f32_4* %224 = OpAccessChain %42 %120 %92 
                                       f32_4 %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %13 
                                       f32_4 %227 = OpVectorShuffle %226 %226 3 3 3 3 
                                       f32_4 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %21 
                                       f32_4 %230 = OpFAdd %228 %229 
                                                      OpStore %223 %230 
                                 Output f32* %232 = OpAccessChain %166 %120 %162 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFNegate %233 
                                 Output f32* %235 = OpAccessChain %166 %120 %162 
                                                      OpStore %235 %234 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 241
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %227 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpMemberDecorate %28 1 Offset 28 
                                                      OpMemberDecorate %28 2 Offset 28 
                                                      OpMemberDecorate %28 3 Offset 28 
                                                      OpMemberDecorate %28 4 Offset 28 
                                                      OpMemberDecorate %28 5 Offset 28 
                                                      OpMemberDecorate %28 6 Offset 28 
                                                      OpMemberDecorate %28 7 RelaxedPrecision 
                                                      OpMemberDecorate %28 7 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %123 DescriptorSet 123 
                                                      OpDecorate %123 Binding 123 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %227 Location 227 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 3 
                                              %24 = OpTypePointer Private %6 
                                              %27 = OpTypeVector %22 4 
                                              %28 = OpTypeStruct %6 %6 %6 %27 %6 %6 %6 %6 
                                              %29 = OpTypePointer Uniform %28 
Uniform struct {f32; f32; f32; u32_4; f32; f32; f32; f32;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 7 
                                              %33 = OpTypePointer Uniform %6 
                                          u32 %38 = OpConstant 0 
                                              %40 = OpTypeBool 
                                              %41 = OpTypePointer Private %40 
                                Private bool* %42 = OpVariable Private 
                                          f32 %45 = OpConstant 3.674022E-40 
                                          i32 %48 = OpConstant 0 
                                          i32 %49 = OpConstant 1 
                                          i32 %51 = OpConstant -1 
                                              %57 = OpTypeVector %6 3 
                                          f32 %60 = OpConstant 3.674022E-40 
                                          f32 %61 = OpConstant 3.674022E-40 
                                          f32 %62 = OpConstant 3.674022E-40 
                                        f32_3 %63 = OpConstantComposite %60 %61 %62 
                               Private f32_4* %66 = OpVariable Private 
                                 Private f32* %72 = OpVariable Private 
                                          f32 %76 = OpConstant 3.674022E-40 
                                Private bool* %78 = OpVariable Private 
                                          i32 %79 = OpConstant 2 
                                          f32 %82 = OpConstant 3.674022E-40 
                                              %84 = OpTypePointer Private %57 
                               Private f32_3* %85 = OpVariable Private 
                                              %86 = OpTypePointer Function %6 
                                          f32 %91 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                Private f32* %122 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %123 = OpVariable UniformConstant 
                              Private f32_3* %137 = OpVariable Private 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_3 %140 = OpConstantComposite %139 %139 %139 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_3 %143 = OpConstantComposite %142 %142 %142 
                                         f32 %148 = OpConstant 3.674022E-40 
                                       f32_3 %149 = OpConstantComposite %148 %148 %148 
                                       f32_4 %154 = OpConstantComposite %45 %45 %45 %45 
                                         i32 %155 = OpConstant 6 
                                             %159 = OpTypeVector %40 4 
                                             %162 = OpTypePointer Function %57 
                                         i32 %173 = OpConstant 4 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %187 = OpConstant 5 
                                         i32 %201 = OpConstant 3 
                                             %202 = OpTypePointer Uniform %27 
                                       f32_3 %211 = OpConstantComposite %45 %45 %45 
                                             %226 = OpTypePointer Output %7 
                               Output f32_4* %227 = OpVariable Output 
                                             %228 = OpTypePointer Function %7 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %87 = OpVariable Function 
                             Function f32_3* %163 = OpVariable Function 
                             Function f32_3* %200 = OpVariable Function 
                               Function f32* %215 = OpVariable Function 
                             Function f32_4* %229 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                                 Private f32* %25 = OpAccessChain %9 %23 
                                          f32 %26 = OpLoad %25 
                                 Uniform f32* %34 = OpAccessChain %30 %32 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpFNegate %35 
                                          f32 %37 = OpFAdd %26 %36 
                                 Private f32* %39 = OpAccessChain %21 %38 
                                                      OpStore %39 %37 
                                 Private f32* %43 = OpAccessChain %21 %38 
                                          f32 %44 = OpLoad %43 
                                         bool %46 = OpFOrdLessThan %44 %45 
                                                      OpStore %42 %46 
                                         bool %47 = OpLoad %42 
                                          i32 %50 = OpSelect %47 %49 %48 
                                          i32 %52 = OpIMul %50 %51 
                                         bool %53 = OpINotEqual %52 %48 
                                                      OpSelectionMerge %55 None 
                                                      OpBranchConditional %53 %54 %55 
                                              %54 = OpLabel 
                                                      OpKill
                                              %55 = OpLabel 
                                        f32_4 %58 = OpLoad %9 
                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                          f32 %64 = OpDot %59 %63 
                                 Private f32* %65 = OpAccessChain %21 %38 
                                                      OpStore %65 %64 
                                        f32_4 %67 = OpLoad %9 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_3 %69 = OpExtInst %1 30 %68 
                                        f32_4 %70 = OpLoad %66 
                                        f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                                      OpStore %66 %71 
                                 Private f32* %73 = OpAccessChain %21 %38 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFNegate %74 
                                          f32 %77 = OpFAdd %75 %76 
                                                      OpStore %72 %77 
                                 Uniform f32* %80 = OpAccessChain %30 %79 
                                          f32 %81 = OpLoad %80 
                                         bool %83 = OpFOrdGreaterThanEqual %81 %82 
                                                      OpStore %78 %83 
                                         bool %88 = OpLoad %78 
                                                      OpSelectionMerge %90 None 
                                                      OpBranchConditional %88 %89 %92 
                                              %89 = OpLabel 
                                                      OpStore %87 %91 
                                                      OpBranch %90 
                                              %92 = OpLabel 
                                                      OpStore %87 %45 
                                                      OpBranch %90 
                                              %90 = OpLabel 
                                          f32 %93 = OpLoad %87 
                                 Private f32* %94 = OpAccessChain %85 %38 
                                                      OpStore %94 %93 
                                 Private f32* %96 = OpAccessChain %85 %38 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpLoad %72 
                                          f32 %99 = OpFMul %97 %98 
                                         f32 %100 = OpFAdd %99 %91 
                                                      OpStore %95 %100 
                                       f32_4 %101 = OpLoad %66 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                Uniform f32* %103 = OpAccessChain %30 %49 
                                         f32 %104 = OpLoad %103 
                                Uniform f32* %105 = OpAccessChain %30 %49 
                                         f32 %106 = OpLoad %105 
                                Uniform f32* %107 = OpAccessChain %30 %49 
                                         f32 %108 = OpLoad %107 
                                       f32_3 %109 = OpCompositeConstruct %104 %106 %108 
                                         f32 %110 = OpCompositeExtract %109 0 
                                         f32 %111 = OpCompositeExtract %109 1 
                                         f32 %112 = OpCompositeExtract %109 2 
                                       f32_3 %113 = OpCompositeConstruct %110 %111 %112 
                                       f32_3 %114 = OpFMul %102 %113 
                                                      OpStore %85 %114 
                                       f32_3 %115 = OpLoad %85 
                                       f32_3 %116 = OpExtInst %1 29 %115 
                                                      OpStore %85 %116 
                                       f32_3 %117 = OpLoad %85 
                                Uniform f32* %118 = OpAccessChain %30 %48 
                                         f32 %119 = OpLoad %118 
                                       f32_3 %120 = OpCompositeConstruct %119 %119 %119 
                                       f32_3 %121 = OpFMul %117 %120 
                                                      OpStore %85 %121 
                  read_only Texture2DSampled %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %16 
                                       f32_2 %126 = OpVectorShuffle %125 %125 2 3 
                                       f32_4 %127 = OpImageSampleImplicitLod %124 %126 
                                         f32 %128 = OpCompositeExtract %127 0 
                                                      OpStore %122 %128 
                                         f32 %129 = OpLoad %122 
                                       f32_3 %130 = OpCompositeConstruct %129 %129 %129 
                                       f32_3 %131 = OpLoad %85 
                                       f32_3 %132 = OpFMul %130 %131 
                                                      OpStore %85 %132 
                                         f32 %133 = OpLoad %95 
                                       f32_3 %134 = OpCompositeConstruct %133 %133 %133 
                                       f32_3 %135 = OpLoad %85 
                                       f32_3 %136 = OpFMul %134 %135 
                                                      OpStore %85 %136 
                                       f32_3 %138 = OpLoad %85 
                                       f32_3 %141 = OpFMul %138 %140 
                                       f32_3 %144 = OpFAdd %141 %143 
                                                      OpStore %137 %144 
                                       f32_3 %145 = OpLoad %85 
                                       f32_3 %146 = OpLoad %137 
                                       f32_3 %147 = OpFMul %145 %146 
                                       f32_3 %150 = OpFAdd %147 %149 
                                                      OpStore %137 %150 
                                       f32_3 %151 = OpLoad %85 
                                       f32_3 %152 = OpLoad %137 
                                       f32_3 %153 = OpFMul %151 %152 
                                                      OpStore %137 %153 
                                Uniform f32* %156 = OpAccessChain %30 %155 
                                         f32 %157 = OpLoad %156 
                                       f32_4 %158 = OpCompositeConstruct %157 %157 %157 %157 
                                      bool_4 %160 = OpFOrdNotEqual %154 %158 
                                        bool %161 = OpAny %160 
                                                      OpStore %42 %161 
                                        bool %164 = OpLoad %42 
                                                      OpSelectionMerge %166 None 
                                                      OpBranchConditional %164 %165 %168 
                                             %165 = OpLabel 
                                       f32_3 %167 = OpLoad %85 
                                                      OpStore %163 %167 
                                                      OpBranch %166 
                                             %168 = OpLabel 
                                       f32_3 %169 = OpLoad %137 
                                                      OpStore %163 %169 
                                                      OpBranch %166 
                                             %166 = OpLabel 
                                       f32_3 %170 = OpLoad %163 
                                       f32_4 %171 = OpLoad %21 
                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
                                                      OpStore %21 %172 
                                Uniform f32* %174 = OpAccessChain %30 %173 
                                         f32 %175 = OpLoad %174 
                                                      OpStore %95 %175 
                                         f32 %176 = OpLoad %95 
                                         f32 %177 = OpExtInst %1 43 %176 %45 %91 
                                                      OpStore %95 %177 
                                       f32_4 %179 = OpLoad %66 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                         f32 %181 = OpLoad %95 
                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
                                       f32_3 %183 = OpFMul %180 %182 
                                                      OpStore %178 %183 
                                       f32_3 %184 = OpLoad %178 
                                       f32_3 %185 = OpExtInst %1 29 %184 
                                                      OpStore %178 %185 
                                       f32_3 %186 = OpLoad %178 
                                Uniform f32* %188 = OpAccessChain %30 %187 
                                         f32 %189 = OpLoad %188 
                                Uniform f32* %190 = OpAccessChain %30 %187 
                                         f32 %191 = OpLoad %190 
                                Uniform f32* %192 = OpAccessChain %30 %187 
                                         f32 %193 = OpLoad %192 
                                       f32_3 %194 = OpCompositeConstruct %189 %191 %193 
                                         f32 %195 = OpCompositeExtract %194 0 
                                         f32 %196 = OpCompositeExtract %194 1 
                                         f32 %197 = OpCompositeExtract %194 2 
                                       f32_3 %198 = OpCompositeConstruct %195 %196 %197 
                                       f32_3 %199 = OpExtInst %1 37 %186 %198 
                                                      OpStore %178 %199 
                              Uniform u32_4* %203 = OpAccessChain %30 %201 
                                       u32_4 %204 = OpLoad %203 
                                         u32 %205 = OpCompositeExtract %204 0 
                                        bool %206 = OpINotEqual %205 %38 
                                                      OpSelectionMerge %208 None 
                                                      OpBranchConditional %206 %207 %210 
                                             %207 = OpLabel 
                                       f32_3 %209 = OpLoad %178 
                                                      OpStore %200 %209 
                                                      OpBranch %208 
                                             %210 = OpLabel 
                                                      OpStore %200 %211 
                                                      OpBranch %208 
                                             %208 = OpLabel 
                                       f32_3 %212 = OpLoad %200 
                                       f32_4 %213 = OpLoad %66 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %66 %214 
                              Uniform u32_4* %216 = OpAccessChain %30 %201 
                                       u32_4 %217 = OpLoad %216 
                                         u32 %218 = OpCompositeExtract %217 0 
                                        bool %219 = OpINotEqual %218 %38 
                                                      OpSelectionMerge %221 None 
                                                      OpBranchConditional %219 %220 %222 
                                             %220 = OpLabel 
                                                      OpStore %215 %91 
                                                      OpBranch %221 
                                             %222 = OpLabel 
                                                      OpStore %215 %45 
                                                      OpBranch %221 
                                             %221 = OpLabel 
                                         f32 %223 = OpLoad %215 
                                Private f32* %224 = OpAccessChain %66 %23 
                                                      OpStore %224 %223 
                                Private f32* %225 = OpAccessChain %21 %23 
                                                      OpStore %225 %91 
                              Uniform u32_4* %230 = OpAccessChain %30 %201 
                                       u32_4 %231 = OpLoad %230 
                                         u32 %232 = OpCompositeExtract %231 1 
                                        bool %233 = OpINotEqual %232 %38 
                                                      OpSelectionMerge %235 None 
                                                      OpBranchConditional %233 %234 %237 
                                             %234 = OpLabel 
                                       f32_4 %236 = OpLoad %21 
                                                      OpStore %229 %236 
                                                      OpBranch %235 
                                             %237 = OpLabel 
                                       f32_4 %238 = OpLoad %66 
                                                      OpStore %229 %238 
                                                      OpBranch %235 
                                             %235 = OpLabel 
                                       f32_4 %239 = OpLoad %229 
                                                      OpStore %227 %239 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
}
Fallback "VertexLit"
}